
STM32H750B-DK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .bootloader   0000227c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .isr_vector   00000298  90000000  90000000  00020000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00027f54  900002a0  900002a0  000202a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000377c  900281f4  900281f4  000481f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000004a0  9002b970  9002b970  0004b970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.extab    00000000  9002be10  9002be10  000ff6a4  2**0
                  CONTENTS
  6 .ARM          00000008  9002be10  9002be10  0004be10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .preinit_array 00000000  9002be18  9002be18  000ff6a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  8 .init_array   0000001c  9002be18  9002be18  0004be18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .fini_array   00000008  9002be34  9002be34  0004be34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data         00000148  24000000  9002be3c  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 CCMRAM        00005a00  24000148  9002bf84  00050148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          000216ec  24005b48  90031984  00055b48  2**3
                  ALLOC
 13 ._user_heap_stack 00002004  24027234  90031984  00057234  2**0
                  ALLOC
 14 .ARM.attributes 0000002e  00000000  00000000  000ff6a4  2**0
                  CONTENTS, READONLY
 15 FontFlashSection 00009088  90200000  90200000  00060000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 16 TextFlashSection 000000cc  90209088  90209088  00069088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 17 ExtFlashSection 00096550  90209154  90209154  00069154  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 TouchGFX_Framebuffer 000bf400  d0000000  d0000000  00100000  2**2
                  ALLOC
 19 Video_RGB_Buffer 00043800  d00bf400  d00bf400  00100000  2**2
                  ALLOC
 20 .debug_line   0008413c  00000000  00000000  000ff6d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_info   000f2566  00000000  00000000  0018380e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_abbrev 0001707a  00000000  00000000  00275d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00003688  00000000  00000000  0028cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    001ad2fd  00000000  00000000  00290478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_ranges 000111a0  00000000  00000000  0043d778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_macro  0004bc23  00000000  00000000  0044e918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .comment      000000cf  00000000  00000000  0049a53b  2**0
                  CONTENTS, READONLY
 28 .debug_frame  0000ca50  00000000  00000000  0049a60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_loc    0006cbf4  00000000  00000000  004a705c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

900002a0 <__do_global_dtors_aux>:
900002a0:	b510      	push	{r4, lr}
900002a2:	4c05      	ldr	r4, [pc, #20]	; (900002b8 <__do_global_dtors_aux+0x18>)
900002a4:	7823      	ldrb	r3, [r4, #0]
900002a6:	b933      	cbnz	r3, 900002b6 <__do_global_dtors_aux+0x16>
900002a8:	4b04      	ldr	r3, [pc, #16]	; (900002bc <__do_global_dtors_aux+0x1c>)
900002aa:	b113      	cbz	r3, 900002b2 <__do_global_dtors_aux+0x12>
900002ac:	4804      	ldr	r0, [pc, #16]	; (900002c0 <__do_global_dtors_aux+0x20>)
900002ae:	f3af 8000 	nop.w
900002b2:	2301      	movs	r3, #1
900002b4:	7023      	strb	r3, [r4, #0]
900002b6:	bd10      	pop	{r4, pc}
900002b8:	24005b48 	.word	0x24005b48
900002bc:	00000000 	.word	0x00000000
900002c0:	900281dc 	.word	0x900281dc

900002c4 <frame_dummy>:
900002c4:	b508      	push	{r3, lr}
900002c6:	4b03      	ldr	r3, [pc, #12]	; (900002d4 <frame_dummy+0x10>)
900002c8:	b11b      	cbz	r3, 900002d2 <frame_dummy+0xe>
900002ca:	4903      	ldr	r1, [pc, #12]	; (900002d8 <frame_dummy+0x14>)
900002cc:	4803      	ldr	r0, [pc, #12]	; (900002dc <frame_dummy+0x18>)
900002ce:	f3af 8000 	nop.w
900002d2:	bd08      	pop	{r3, pc}
900002d4:	00000000 	.word	0x00000000
900002d8:	24005b4c 	.word	0x24005b4c
900002dc:	900281dc 	.word	0x900281dc

900002e0 <memchr>:
900002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
900002e4:	2a10      	cmp	r2, #16
900002e6:	db2b      	blt.n	90000340 <memchr+0x60>
900002e8:	f010 0f07 	tst.w	r0, #7
900002ec:	d008      	beq.n	90000300 <memchr+0x20>
900002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
900002f2:	3a01      	subs	r2, #1
900002f4:	428b      	cmp	r3, r1
900002f6:	d02d      	beq.n	90000354 <memchr+0x74>
900002f8:	f010 0f07 	tst.w	r0, #7
900002fc:	b342      	cbz	r2, 90000350 <memchr+0x70>
900002fe:	d1f6      	bne.n	900002ee <memchr+0xe>
90000300:	b4f0      	push	{r4, r5, r6, r7}
90000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
90000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
9000030a:	f022 0407 	bic.w	r4, r2, #7
9000030e:	f07f 0700 	mvns.w	r7, #0
90000312:	2300      	movs	r3, #0
90000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
90000318:	3c08      	subs	r4, #8
9000031a:	ea85 0501 	eor.w	r5, r5, r1
9000031e:	ea86 0601 	eor.w	r6, r6, r1
90000322:	fa85 f547 	uadd8	r5, r5, r7
90000326:	faa3 f587 	sel	r5, r3, r7
9000032a:	fa86 f647 	uadd8	r6, r6, r7
9000032e:	faa5 f687 	sel	r6, r5, r7
90000332:	b98e      	cbnz	r6, 90000358 <memchr+0x78>
90000334:	d1ee      	bne.n	90000314 <memchr+0x34>
90000336:	bcf0      	pop	{r4, r5, r6, r7}
90000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
9000033c:	f002 0207 	and.w	r2, r2, #7
90000340:	b132      	cbz	r2, 90000350 <memchr+0x70>
90000342:	f810 3b01 	ldrb.w	r3, [r0], #1
90000346:	3a01      	subs	r2, #1
90000348:	ea83 0301 	eor.w	r3, r3, r1
9000034c:	b113      	cbz	r3, 90000354 <memchr+0x74>
9000034e:	d1f8      	bne.n	90000342 <memchr+0x62>
90000350:	2000      	movs	r0, #0
90000352:	4770      	bx	lr
90000354:	3801      	subs	r0, #1
90000356:	4770      	bx	lr
90000358:	2d00      	cmp	r5, #0
9000035a:	bf06      	itte	eq
9000035c:	4635      	moveq	r5, r6
9000035e:	3803      	subeq	r0, #3
90000360:	3807      	subne	r0, #7
90000362:	f015 0f01 	tst.w	r5, #1
90000366:	d107      	bne.n	90000378 <memchr+0x98>
90000368:	3001      	adds	r0, #1
9000036a:	f415 7f80 	tst.w	r5, #256	; 0x100
9000036e:	bf02      	ittt	eq
90000370:	3001      	addeq	r0, #1
90000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
90000376:	3001      	addeq	r0, #1
90000378:	bcf0      	pop	{r4, r5, r6, r7}
9000037a:	3801      	subs	r0, #1
9000037c:	4770      	bx	lr
9000037e:	bf00      	nop

90000380 <strcmp>:
90000380:	f810 2b01 	ldrb.w	r2, [r0], #1
90000384:	f811 3b01 	ldrb.w	r3, [r1], #1
90000388:	2a01      	cmp	r2, #1
9000038a:	bf28      	it	cs
9000038c:	429a      	cmpcs	r2, r3
9000038e:	d0f7      	beq.n	90000380 <strcmp>
90000390:	1ad0      	subs	r0, r2, r3
90000392:	4770      	bx	lr

90000394 <__aeabi_uldivmod>:
90000394:	b953      	cbnz	r3, 900003ac <__aeabi_uldivmod+0x18>
90000396:	b94a      	cbnz	r2, 900003ac <__aeabi_uldivmod+0x18>
90000398:	2900      	cmp	r1, #0
9000039a:	bf08      	it	eq
9000039c:	2800      	cmpeq	r0, #0
9000039e:	bf1c      	itt	ne
900003a0:	f04f 31ff 	movne.w	r1, #4294967295
900003a4:	f04f 30ff 	movne.w	r0, #4294967295
900003a8:	f000 b974 	b.w	90000694 <__aeabi_idiv0>
900003ac:	f1ad 0c08 	sub.w	ip, sp, #8
900003b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
900003b4:	f000 f806 	bl	900003c4 <__udivmoddi4>
900003b8:	f8dd e004 	ldr.w	lr, [sp, #4]
900003bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
900003c0:	b004      	add	sp, #16
900003c2:	4770      	bx	lr

900003c4 <__udivmoddi4>:
900003c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900003c8:	9d08      	ldr	r5, [sp, #32]
900003ca:	4604      	mov	r4, r0
900003cc:	468e      	mov	lr, r1
900003ce:	2b00      	cmp	r3, #0
900003d0:	d14d      	bne.n	9000046e <__udivmoddi4+0xaa>
900003d2:	428a      	cmp	r2, r1
900003d4:	4694      	mov	ip, r2
900003d6:	d969      	bls.n	900004ac <__udivmoddi4+0xe8>
900003d8:	fab2 f282 	clz	r2, r2
900003dc:	b152      	cbz	r2, 900003f4 <__udivmoddi4+0x30>
900003de:	fa01 f302 	lsl.w	r3, r1, r2
900003e2:	f1c2 0120 	rsb	r1, r2, #32
900003e6:	fa20 f101 	lsr.w	r1, r0, r1
900003ea:	fa0c fc02 	lsl.w	ip, ip, r2
900003ee:	ea41 0e03 	orr.w	lr, r1, r3
900003f2:	4094      	lsls	r4, r2
900003f4:	ea4f 481c 	mov.w	r8, ip, lsr #16
900003f8:	0c21      	lsrs	r1, r4, #16
900003fa:	fbbe f6f8 	udiv	r6, lr, r8
900003fe:	fa1f f78c 	uxth.w	r7, ip
90000402:	fb08 e316 	mls	r3, r8, r6, lr
90000406:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
9000040a:	fb06 f107 	mul.w	r1, r6, r7
9000040e:	4299      	cmp	r1, r3
90000410:	d90a      	bls.n	90000428 <__udivmoddi4+0x64>
90000412:	eb1c 0303 	adds.w	r3, ip, r3
90000416:	f106 30ff 	add.w	r0, r6, #4294967295
9000041a:	f080 811f 	bcs.w	9000065c <__udivmoddi4+0x298>
9000041e:	4299      	cmp	r1, r3
90000420:	f240 811c 	bls.w	9000065c <__udivmoddi4+0x298>
90000424:	3e02      	subs	r6, #2
90000426:	4463      	add	r3, ip
90000428:	1a5b      	subs	r3, r3, r1
9000042a:	b2a4      	uxth	r4, r4
9000042c:	fbb3 f0f8 	udiv	r0, r3, r8
90000430:	fb08 3310 	mls	r3, r8, r0, r3
90000434:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
90000438:	fb00 f707 	mul.w	r7, r0, r7
9000043c:	42a7      	cmp	r7, r4
9000043e:	d90a      	bls.n	90000456 <__udivmoddi4+0x92>
90000440:	eb1c 0404 	adds.w	r4, ip, r4
90000444:	f100 33ff 	add.w	r3, r0, #4294967295
90000448:	f080 810a 	bcs.w	90000660 <__udivmoddi4+0x29c>
9000044c:	42a7      	cmp	r7, r4
9000044e:	f240 8107 	bls.w	90000660 <__udivmoddi4+0x29c>
90000452:	4464      	add	r4, ip
90000454:	3802      	subs	r0, #2
90000456:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
9000045a:	1be4      	subs	r4, r4, r7
9000045c:	2600      	movs	r6, #0
9000045e:	b11d      	cbz	r5, 90000468 <__udivmoddi4+0xa4>
90000460:	40d4      	lsrs	r4, r2
90000462:	2300      	movs	r3, #0
90000464:	e9c5 4300 	strd	r4, r3, [r5]
90000468:	4631      	mov	r1, r6
9000046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000046e:	428b      	cmp	r3, r1
90000470:	d909      	bls.n	90000486 <__udivmoddi4+0xc2>
90000472:	2d00      	cmp	r5, #0
90000474:	f000 80ef 	beq.w	90000656 <__udivmoddi4+0x292>
90000478:	2600      	movs	r6, #0
9000047a:	e9c5 0100 	strd	r0, r1, [r5]
9000047e:	4630      	mov	r0, r6
90000480:	4631      	mov	r1, r6
90000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90000486:	fab3 f683 	clz	r6, r3
9000048a:	2e00      	cmp	r6, #0
9000048c:	d14a      	bne.n	90000524 <__udivmoddi4+0x160>
9000048e:	428b      	cmp	r3, r1
90000490:	d302      	bcc.n	90000498 <__udivmoddi4+0xd4>
90000492:	4282      	cmp	r2, r0
90000494:	f200 80f9 	bhi.w	9000068a <__udivmoddi4+0x2c6>
90000498:	1a84      	subs	r4, r0, r2
9000049a:	eb61 0303 	sbc.w	r3, r1, r3
9000049e:	2001      	movs	r0, #1
900004a0:	469e      	mov	lr, r3
900004a2:	2d00      	cmp	r5, #0
900004a4:	d0e0      	beq.n	90000468 <__udivmoddi4+0xa4>
900004a6:	e9c5 4e00 	strd	r4, lr, [r5]
900004aa:	e7dd      	b.n	90000468 <__udivmoddi4+0xa4>
900004ac:	b902      	cbnz	r2, 900004b0 <__udivmoddi4+0xec>
900004ae:	deff      	udf	#255	; 0xff
900004b0:	fab2 f282 	clz	r2, r2
900004b4:	2a00      	cmp	r2, #0
900004b6:	f040 8092 	bne.w	900005de <__udivmoddi4+0x21a>
900004ba:	eba1 010c 	sub.w	r1, r1, ip
900004be:	ea4f 471c 	mov.w	r7, ip, lsr #16
900004c2:	fa1f fe8c 	uxth.w	lr, ip
900004c6:	2601      	movs	r6, #1
900004c8:	0c20      	lsrs	r0, r4, #16
900004ca:	fbb1 f3f7 	udiv	r3, r1, r7
900004ce:	fb07 1113 	mls	r1, r7, r3, r1
900004d2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
900004d6:	fb0e f003 	mul.w	r0, lr, r3
900004da:	4288      	cmp	r0, r1
900004dc:	d908      	bls.n	900004f0 <__udivmoddi4+0x12c>
900004de:	eb1c 0101 	adds.w	r1, ip, r1
900004e2:	f103 38ff 	add.w	r8, r3, #4294967295
900004e6:	d202      	bcs.n	900004ee <__udivmoddi4+0x12a>
900004e8:	4288      	cmp	r0, r1
900004ea:	f200 80cb 	bhi.w	90000684 <__udivmoddi4+0x2c0>
900004ee:	4643      	mov	r3, r8
900004f0:	1a09      	subs	r1, r1, r0
900004f2:	b2a4      	uxth	r4, r4
900004f4:	fbb1 f0f7 	udiv	r0, r1, r7
900004f8:	fb07 1110 	mls	r1, r7, r0, r1
900004fc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
90000500:	fb0e fe00 	mul.w	lr, lr, r0
90000504:	45a6      	cmp	lr, r4
90000506:	d908      	bls.n	9000051a <__udivmoddi4+0x156>
90000508:	eb1c 0404 	adds.w	r4, ip, r4
9000050c:	f100 31ff 	add.w	r1, r0, #4294967295
90000510:	d202      	bcs.n	90000518 <__udivmoddi4+0x154>
90000512:	45a6      	cmp	lr, r4
90000514:	f200 80bb 	bhi.w	9000068e <__udivmoddi4+0x2ca>
90000518:	4608      	mov	r0, r1
9000051a:	eba4 040e 	sub.w	r4, r4, lr
9000051e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
90000522:	e79c      	b.n	9000045e <__udivmoddi4+0x9a>
90000524:	f1c6 0720 	rsb	r7, r6, #32
90000528:	40b3      	lsls	r3, r6
9000052a:	fa22 fc07 	lsr.w	ip, r2, r7
9000052e:	ea4c 0c03 	orr.w	ip, ip, r3
90000532:	fa20 f407 	lsr.w	r4, r0, r7
90000536:	fa01 f306 	lsl.w	r3, r1, r6
9000053a:	431c      	orrs	r4, r3
9000053c:	40f9      	lsrs	r1, r7
9000053e:	ea4f 491c 	mov.w	r9, ip, lsr #16
90000542:	fa00 f306 	lsl.w	r3, r0, r6
90000546:	fbb1 f8f9 	udiv	r8, r1, r9
9000054a:	0c20      	lsrs	r0, r4, #16
9000054c:	fa1f fe8c 	uxth.w	lr, ip
90000550:	fb09 1118 	mls	r1, r9, r8, r1
90000554:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
90000558:	fb08 f00e 	mul.w	r0, r8, lr
9000055c:	4288      	cmp	r0, r1
9000055e:	fa02 f206 	lsl.w	r2, r2, r6
90000562:	d90b      	bls.n	9000057c <__udivmoddi4+0x1b8>
90000564:	eb1c 0101 	adds.w	r1, ip, r1
90000568:	f108 3aff 	add.w	sl, r8, #4294967295
9000056c:	f080 8088 	bcs.w	90000680 <__udivmoddi4+0x2bc>
90000570:	4288      	cmp	r0, r1
90000572:	f240 8085 	bls.w	90000680 <__udivmoddi4+0x2bc>
90000576:	f1a8 0802 	sub.w	r8, r8, #2
9000057a:	4461      	add	r1, ip
9000057c:	1a09      	subs	r1, r1, r0
9000057e:	b2a4      	uxth	r4, r4
90000580:	fbb1 f0f9 	udiv	r0, r1, r9
90000584:	fb09 1110 	mls	r1, r9, r0, r1
90000588:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
9000058c:	fb00 fe0e 	mul.w	lr, r0, lr
90000590:	458e      	cmp	lr, r1
90000592:	d908      	bls.n	900005a6 <__udivmoddi4+0x1e2>
90000594:	eb1c 0101 	adds.w	r1, ip, r1
90000598:	f100 34ff 	add.w	r4, r0, #4294967295
9000059c:	d26c      	bcs.n	90000678 <__udivmoddi4+0x2b4>
9000059e:	458e      	cmp	lr, r1
900005a0:	d96a      	bls.n	90000678 <__udivmoddi4+0x2b4>
900005a2:	3802      	subs	r0, #2
900005a4:	4461      	add	r1, ip
900005a6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
900005aa:	fba0 9402 	umull	r9, r4, r0, r2
900005ae:	eba1 010e 	sub.w	r1, r1, lr
900005b2:	42a1      	cmp	r1, r4
900005b4:	46c8      	mov	r8, r9
900005b6:	46a6      	mov	lr, r4
900005b8:	d356      	bcc.n	90000668 <__udivmoddi4+0x2a4>
900005ba:	d053      	beq.n	90000664 <__udivmoddi4+0x2a0>
900005bc:	b15d      	cbz	r5, 900005d6 <__udivmoddi4+0x212>
900005be:	ebb3 0208 	subs.w	r2, r3, r8
900005c2:	eb61 010e 	sbc.w	r1, r1, lr
900005c6:	fa01 f707 	lsl.w	r7, r1, r7
900005ca:	fa22 f306 	lsr.w	r3, r2, r6
900005ce:	40f1      	lsrs	r1, r6
900005d0:	431f      	orrs	r7, r3
900005d2:	e9c5 7100 	strd	r7, r1, [r5]
900005d6:	2600      	movs	r6, #0
900005d8:	4631      	mov	r1, r6
900005da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900005de:	f1c2 0320 	rsb	r3, r2, #32
900005e2:	40d8      	lsrs	r0, r3
900005e4:	fa0c fc02 	lsl.w	ip, ip, r2
900005e8:	fa21 f303 	lsr.w	r3, r1, r3
900005ec:	4091      	lsls	r1, r2
900005ee:	4301      	orrs	r1, r0
900005f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
900005f4:	fa1f fe8c 	uxth.w	lr, ip
900005f8:	fbb3 f0f7 	udiv	r0, r3, r7
900005fc:	fb07 3610 	mls	r6, r7, r0, r3
90000600:	0c0b      	lsrs	r3, r1, #16
90000602:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
90000606:	fb00 f60e 	mul.w	r6, r0, lr
9000060a:	429e      	cmp	r6, r3
9000060c:	fa04 f402 	lsl.w	r4, r4, r2
90000610:	d908      	bls.n	90000624 <__udivmoddi4+0x260>
90000612:	eb1c 0303 	adds.w	r3, ip, r3
90000616:	f100 38ff 	add.w	r8, r0, #4294967295
9000061a:	d22f      	bcs.n	9000067c <__udivmoddi4+0x2b8>
9000061c:	429e      	cmp	r6, r3
9000061e:	d92d      	bls.n	9000067c <__udivmoddi4+0x2b8>
90000620:	3802      	subs	r0, #2
90000622:	4463      	add	r3, ip
90000624:	1b9b      	subs	r3, r3, r6
90000626:	b289      	uxth	r1, r1
90000628:	fbb3 f6f7 	udiv	r6, r3, r7
9000062c:	fb07 3316 	mls	r3, r7, r6, r3
90000630:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
90000634:	fb06 f30e 	mul.w	r3, r6, lr
90000638:	428b      	cmp	r3, r1
9000063a:	d908      	bls.n	9000064e <__udivmoddi4+0x28a>
9000063c:	eb1c 0101 	adds.w	r1, ip, r1
90000640:	f106 38ff 	add.w	r8, r6, #4294967295
90000644:	d216      	bcs.n	90000674 <__udivmoddi4+0x2b0>
90000646:	428b      	cmp	r3, r1
90000648:	d914      	bls.n	90000674 <__udivmoddi4+0x2b0>
9000064a:	3e02      	subs	r6, #2
9000064c:	4461      	add	r1, ip
9000064e:	1ac9      	subs	r1, r1, r3
90000650:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
90000654:	e738      	b.n	900004c8 <__udivmoddi4+0x104>
90000656:	462e      	mov	r6, r5
90000658:	4628      	mov	r0, r5
9000065a:	e705      	b.n	90000468 <__udivmoddi4+0xa4>
9000065c:	4606      	mov	r6, r0
9000065e:	e6e3      	b.n	90000428 <__udivmoddi4+0x64>
90000660:	4618      	mov	r0, r3
90000662:	e6f8      	b.n	90000456 <__udivmoddi4+0x92>
90000664:	454b      	cmp	r3, r9
90000666:	d2a9      	bcs.n	900005bc <__udivmoddi4+0x1f8>
90000668:	ebb9 0802 	subs.w	r8, r9, r2
9000066c:	eb64 0e0c 	sbc.w	lr, r4, ip
90000670:	3801      	subs	r0, #1
90000672:	e7a3      	b.n	900005bc <__udivmoddi4+0x1f8>
90000674:	4646      	mov	r6, r8
90000676:	e7ea      	b.n	9000064e <__udivmoddi4+0x28a>
90000678:	4620      	mov	r0, r4
9000067a:	e794      	b.n	900005a6 <__udivmoddi4+0x1e2>
9000067c:	4640      	mov	r0, r8
9000067e:	e7d1      	b.n	90000624 <__udivmoddi4+0x260>
90000680:	46d0      	mov	r8, sl
90000682:	e77b      	b.n	9000057c <__udivmoddi4+0x1b8>
90000684:	3b02      	subs	r3, #2
90000686:	4461      	add	r1, ip
90000688:	e732      	b.n	900004f0 <__udivmoddi4+0x12c>
9000068a:	4630      	mov	r0, r6
9000068c:	e709      	b.n	900004a2 <__udivmoddi4+0xde>
9000068e:	4464      	add	r4, ip
90000690:	3802      	subs	r0, #2
90000692:	e742      	b.n	9000051a <__udivmoddi4+0x156>

90000694 <__aeabi_idiv0>:
90000694:	4770      	bx	lr
90000696:	bf00      	nop

90000698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
90000698:	f8df d034 	ldr.w	sp, [pc, #52]	; 900006d0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
9000069c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
9000069e:	e003      	b.n	900006a8 <LoopCopyDataInit>

900006a0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
900006a0:	4b0c      	ldr	r3, [pc, #48]	; (900006d4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
900006a2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
900006a4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
900006a6:	3104      	adds	r1, #4

900006a8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
900006a8:	480b      	ldr	r0, [pc, #44]	; (900006d8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
900006aa:	4b0c      	ldr	r3, [pc, #48]	; (900006dc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
900006ac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
900006ae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
900006b0:	d3f6      	bcc.n	900006a0 <CopyDataInit>
  ldr  r2, =_sbss
900006b2:	4a0b      	ldr	r2, [pc, #44]	; (900006e0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
900006b4:	e002      	b.n	900006bc <LoopFillZerobss>

900006b6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
900006b6:	2300      	movs	r3, #0
  str  r3, [r2], #4
900006b8:	f842 3b04 	str.w	r3, [r2], #4

900006bc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
900006bc:	4b09      	ldr	r3, [pc, #36]	; (900006e4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
900006be:	429a      	cmp	r2, r3
  bcc  FillZerobss
900006c0:	d3f9      	bcc.n	900006b6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
900006c2:	f009 f8e7 	bl	90009894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
900006c6:	f026 fcfb 	bl	900270c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
900006ca:	f003 fda5 	bl	90004218 <main>
  bx  lr    
900006ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
900006d0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
900006d4:	9002be3c 	.word	0x9002be3c
  ldr  r0, =_sdata
900006d8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
900006dc:	24000148 	.word	0x24000148
  ldr  r2, =_sbss
900006e0:	24005b48 	.word	0x24005b48
  ldr  r3, = _ebss
900006e4:	24027234 	.word	0x24027234

900006e8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
900006e8:	e7fe      	b.n	900006e8 <ADC3_IRQHandler>
	...

900006ec <MX_LIBJPEG_Init>:
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
900006ec:	4770      	bx	lr
900006ee:	bf00      	nop

900006f0 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
900006f0:	4770      	bx	lr
900006f2:	bf00      	nop

900006f4 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
900006f4:	b508      	push	{r3, lr}
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
900006f6:	f001 fed5 	bl	900024a4 <touchgfx_components_init>
  touchgfx_init();
}
900006fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  touchgfx_init();
900006fe:	f001 be59 	b.w	900023b4 <touchgfx_init>
90000702:	bf00      	nop

90000704 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void *argument)
{
  // Calling forward to touchgfx_taskEntry in C++ domain
  touchgfx_taskEntry();
90000704:	f001 bed0 	b.w	900024a8 <touchgfx_taskEntry>

90000708 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
90000708:	6840      	ldr	r0, [r0, #4]
    }
9000070a:	4770      	bx	lr

9000070c <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
9000070c:	6041      	str	r1, [r0, #4]
    }
9000070e:	4770      	bx	lr

90000710 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>:
    //                                    Embedded Trace Macrocell (ETM)
    //                                    Trace Port Interface Unit (TPIU).
    //                                    This enables control of power usage unless tracing is required. The application can enable this, for ITM use, or use by a debugger.

    // Enable Debug Exception and Monitor Control Register
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000710:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    // Enable Lock Access Register
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90000714:	4b08      	ldr	r3, [pc, #32]	; (90000738 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x28>)
90000716:	4a09      	ldr	r2, [pc, #36]	; (9000073c <_ZN8touchgfx25CortexMMCUInstrumentation4initEv+0x2c>)
    *((volatile unsigned int*)0xE000EDFC) |= 0x01000000;
90000718:	f8d0 1dfc 	ldr.w	r1, [r0, #3580]	; 0xdfc
9000071c:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
90000720:	f8c0 1dfc 	str.w	r1, [r0, #3580]	; 0xdfc
    *((volatile unsigned int*)0xE0001FB0) |= 0xC5ACCE55;
90000724:	f8d3 1fb0 	ldr.w	r1, [r3, #4016]	; 0xfb0
90000728:	430a      	orrs	r2, r1
9000072a:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
    // Enable Data Watchpoint and Trace Control Register
    *((volatile unsigned int*)0xE0001000) |= 1;
9000072e:	681a      	ldr	r2, [r3, #0]
90000730:	f042 0201 	orr.w	r2, r2, #1
90000734:	601a      	str	r2, [r3, #0]
}
90000736:	4770      	bx	lr
90000738:	e0001000 	.word	0xe0001000
9000073c:	c5acce55 	.word	0xc5acce55

90000740 <_ZN8touchgfx25CortexMMCUInstrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int CortexMMCUInstrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
90000740:	1a51      	subs	r1, r2, r1
90000742:	eb01 0153 	add.w	r1, r1, r3, lsr #1
}
90000746:	fbb1 f0f3 	udiv	r0, r1, r3
9000074a:	4770      	bx	lr

9000074c <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv>:

unsigned int CortexMMCUInstrumentation::getCPUCycles()
{
    return *((volatile unsigned int*)0xE0001004);
9000074c:	4b01      	ldr	r3, [pc, #4]	; (90000754 <_ZN8touchgfx25CortexMMCUInstrumentation12getCPUCyclesEv+0x8>)
9000074e:	6858      	ldr	r0, [r3, #4]
}
90000750:	4770      	bx	lr
90000752:	bf00      	nop
90000754:	e0001000 	.word	0xe0001000

90000758 <_ZN8touchgfx25CortexMMCUInstrumentationD1Ev>:
 *        Interface for instrumenting Cortex-M processors to measure MCU load via measured CPU
 *        cycles.
 *
 * @sa MCUInstrumentation
 */
class CortexMMCUInstrumentation : public MCUInstrumentation
90000758:	4770      	bx	lr
9000075a:	bf00      	nop

9000075c <_ZN8touchgfx25CortexMMCUInstrumentationD0Ev>:
9000075c:	b510      	push	{r4, lr}
9000075e:	4604      	mov	r4, r0
90000760:	210c      	movs	r1, #12
90000762:	f026 fbc6 	bl	90026ef2 <_ZdlPvj>
90000766:	4620      	mov	r0, r4
90000768:	bd10      	pop	{r4, pc}
9000076a:	bf00      	nop

9000076c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb>:

void CortexMMCUInstrumentation::setMCUActive(bool active)
{
    if (active) //idle task sched out
    {
        uint32_t cc_temp = getCPUCycles() - cc_in;
9000076c:	6803      	ldr	r3, [r0, #0]
9000076e:	4a0c      	ldr	r2, [pc, #48]	; (900007a0 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x34>)
90000770:	691b      	ldr	r3, [r3, #16]
{
90000772:	b510      	push	{r4, lr}
90000774:	4604      	mov	r4, r0
    if (active) //idle task sched out
90000776:	b149      	cbz	r1, 9000078c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x20>
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000778:	4293      	cmp	r3, r2
9000077a:	d10d      	bne.n	90000798 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x2c>
    return *((volatile unsigned int*)0xE0001004);
9000077c:	4b09      	ldr	r3, [pc, #36]	; (900007a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
9000077e:	6858      	ldr	r0, [r3, #4]
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000780:	68a2      	ldr	r2, [r4, #8]
        cc_consumed += cc_temp;
90000782:	6863      	ldr	r3, [r4, #4]
90000784:	1a9b      	subs	r3, r3, r2
90000786:	4418      	add	r0, r3
90000788:	6060      	str	r0, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
9000078a:	bd10      	pop	{r4, pc}
        cc_in = getCPUCycles();
9000078c:	4293      	cmp	r3, r2
9000078e:	d105      	bne.n	9000079c <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x30>
    return *((volatile unsigned int*)0xE0001004);
90000790:	4b04      	ldr	r3, [pc, #16]	; (900007a4 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x38>)
90000792:	6858      	ldr	r0, [r3, #4]
        cc_in = getCPUCycles();
90000794:	60a0      	str	r0, [r4, #8]
}
90000796:	bd10      	pop	{r4, pc}
        uint32_t cc_temp = getCPUCycles() - cc_in;
90000798:	4798      	blx	r3
9000079a:	e7f1      	b.n	90000780 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x14>
        cc_in = getCPUCycles();
9000079c:	4798      	blx	r3
9000079e:	e7f9      	b.n	90000794 <_ZN8touchgfx25CortexMMCUInstrumentation12setMCUActiveEb+0x28>
900007a0:	9000074d 	.word	0x9000074d
900007a4:	e0001000 	.word	0xe0001000

900007a8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
900007a8:	4770      	bx	lr
900007aa:	bf00      	nop
900007ac:	0000      	movs	r0, r0
	...

900007b0 <_ZN20STM32TouchController4initEv>:

#include <STM32TouchController.hpp>
#include "stm32h750b_discovery_ts.h"

void STM32TouchController::init()
{
900007b0:	b500      	push	{lr}
900007b2:	b085      	sub	sp, #20
     *
     */
    TS_Init_t hTS;
    hTS.Orientation = TS_SWAP_XY;
    hTS.Accuracy = 0;
    hTS.Width = 480;
900007b4:	2208      	movs	r2, #8
900007b6:	2300      	movs	r3, #0
    hTS.Height = 272;
    BSP_TS_Init(0, &hTS);
900007b8:	2000      	movs	r0, #0
900007ba:	4669      	mov	r1, sp
    hTS.Width = 480;
900007bc:	ed9f 7b06 	vldr	d7, [pc, #24]	; 900007d8 <_ZN20STM32TouchController4initEv+0x28>
900007c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
900007c4:	ed8d 7b00 	vstr	d7, [sp]
    BSP_TS_Init(0, &hTS);
900007c8:	f008 ff74 	bl	900096b4 <BSP_TS_Init>
}
900007cc:	b005      	add	sp, #20
900007ce:	f85d fb04 	ldr.w	pc, [sp], #4
900007d2:	bf00      	nop
900007d4:	f3af 8000 	nop.w
900007d8:	000001e0 	.word	0x000001e0
900007dc:	00000110 	.word	0x00000110

900007e0 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
900007e0:	b530      	push	{r4, r5, lr}
900007e2:	b085      	sub	sp, #20
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    TS_State_t  TS_State = { 0 };
900007e4:	2000      	movs	r0, #0
{
900007e6:	460d      	mov	r5, r1
900007e8:	4614      	mov	r4, r2
    BSP_TS_GetState(0, &TS_State);
900007ea:	a901      	add	r1, sp, #4
    TS_State_t  TS_State = { 0 };
900007ec:	9001      	str	r0, [sp, #4]
900007ee:	e9cd 0002 	strd	r0, r0, [sp, #8]
    BSP_TS_GetState(0, &TS_State);
900007f2:	f008 ffed 	bl	900097d0 <BSP_TS_GetState>
    if (TS_State.TouchDetected)
900007f6:	9801      	ldr	r0, [sp, #4]
900007f8:	b120      	cbz	r0, 90000804 <_ZN20STM32TouchController11sampleTouchERlS0_+0x24>
    {
        x = TS_State.TouchX;
        y = TS_State.TouchY;
        return true;
900007fa:	2001      	movs	r0, #1
        y = TS_State.TouchY;
900007fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
        x = TS_State.TouchX;
90000800:	602a      	str	r2, [r5, #0]
        y = TS_State.TouchY;
90000802:	6023      	str	r3, [r4, #0]
    }

    return false;
}
90000804:	b005      	add	sp, #20
90000806:	bd30      	pop	{r4, r5, pc}

90000808 <_ZN20STM32TouchControllerD0Ev>:
90000808:	b510      	push	{r4, lr}
9000080a:	4604      	mov	r4, r0
9000080c:	2104      	movs	r1, #4
9000080e:	f026 fb70 	bl	90026ef2 <_ZdlPvj>
90000812:	4620      	mov	r0, r4
90000814:	bd10      	pop	{r4, pc}
90000816:	bf00      	nop

90000818 <_ZN8touchgfx4GPIO4initEv>:
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000818:	2108      	movs	r1, #8
9000081a:	480c      	ldr	r0, [pc, #48]	; (9000084c <_ZN8touchgfx4GPIO4initEv+0x34>)
{
9000081c:	b508      	push	{r3, lr}
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
9000081e:	f009 ff87 	bl	9000a730 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000822:	2801      	cmp	r0, #1
90000824:	d101      	bne.n	9000082a <_ZN8touchgfx4GPIO4initEv+0x12>
            GPIO_InvertedLevels[id] = 1;
90000826:	4b0a      	ldr	r3, [pc, #40]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x38>)
90000828:	6018      	str	r0, [r3, #0]
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
9000082a:	2140      	movs	r1, #64	; 0x40
9000082c:	4809      	ldr	r0, [pc, #36]	; (90000854 <_ZN8touchgfx4GPIO4initEv+0x3c>)
9000082e:	f009 ff7f 	bl	9000a730 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000832:	2801      	cmp	r0, #1
90000834:	d101      	bne.n	9000083a <_ZN8touchgfx4GPIO4initEv+0x22>
            GPIO_InvertedLevels[id] = 1;
90000836:	4b06      	ldr	r3, [pc, #24]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x38>)
90000838:	6098      	str	r0, [r3, #8]
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
9000083a:	2140      	movs	r1, #64	; 0x40
9000083c:	4806      	ldr	r0, [pc, #24]	; (90000858 <_ZN8touchgfx4GPIO4initEv+0x40>)
9000083e:	f009 ff77 	bl	9000a730 <HAL_GPIO_ReadPin>
        if (GPIO::get(static_cast<GPIO_ID>(id)))
90000842:	2801      	cmp	r0, #1
90000844:	d101      	bne.n	9000084a <_ZN8touchgfx4GPIO4initEv+0x32>
            GPIO_InvertedLevels[id] = 1;
90000846:	4b02      	ldr	r3, [pc, #8]	; (90000850 <_ZN8touchgfx4GPIO4initEv+0x38>)
90000848:	60d8      	str	r0, [r3, #12]
}
9000084a:	bd08      	pop	{r3, pc}
9000084c:	58021800 	.word	0x58021800
90000850:	24005b64 	.word	0x24005b64
90000854:	58020400 	.word	0x58020400
90000858:	58020000 	.word	0x58020000

9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
    switch (id)
9000085c:	2802      	cmp	r0, #2
9000085e:	d003      	beq.n	90000868 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0xc>
90000860:	2803      	cmp	r0, #3
90000862:	d013      	beq.n	9000088c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x30>
90000864:	b148      	cbz	r0, 9000087a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1e>
}
90000866:	4770      	bx	lr
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
90000868:	4b0d      	ldr	r3, [pc, #52]	; (900008a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
9000086a:	2140      	movs	r1, #64	; 0x40
9000086c:	480d      	ldr	r0, [pc, #52]	; (900008a4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x48>)
9000086e:	689a      	ldr	r2, [r3, #8]
90000870:	fab2 f282 	clz	r2, r2
90000874:	0952      	lsrs	r2, r2, #5
90000876:	f009 bf61 	b.w	9000a73c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
9000087a:	4b09      	ldr	r3, [pc, #36]	; (900008a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
9000087c:	2108      	movs	r1, #8
9000087e:	480a      	ldr	r0, [pc, #40]	; (900008a8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x4c>)
90000880:	681a      	ldr	r2, [r3, #0]
90000882:	fab2 f282 	clz	r2, r2
90000886:	0952      	lsrs	r2, r2, #5
90000888:	f009 bf58 	b.w	9000a73c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
9000088c:	4b04      	ldr	r3, [pc, #16]	; (900008a0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x44>)
9000088e:	2140      	movs	r1, #64	; 0x40
90000890:	4806      	ldr	r0, [pc, #24]	; (900008ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>)
90000892:	68da      	ldr	r2, [r3, #12]
90000894:	fab2 f282 	clz	r2, r2
90000898:	0952      	lsrs	r2, r2, #5
9000089a:	f009 bf4f 	b.w	9000a73c <HAL_GPIO_WritePin>
9000089e:	bf00      	nop
900008a0:	24005b64 	.word	0x24005b64
900008a4:	58020400 	.word	0x58020400
900008a8:	58021800 	.word	0x58021800
900008ac:	58020000 	.word	0x58020000

900008b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
    switch (id)
900008b0:	2802      	cmp	r0, #2
900008b2:	d003      	beq.n	900008bc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0xc>
900008b4:	2803      	cmp	r0, #3
900008b6:	d013      	beq.n	900008e0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x30>
900008b8:	b148      	cbz	r0, 900008ce <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1e>
}
900008ba:	4770      	bx	lr
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
900008bc:	4b0d      	ldr	r3, [pc, #52]	; (900008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
900008be:	2140      	movs	r1, #64	; 0x40
900008c0:	480d      	ldr	r0, [pc, #52]	; (900008f8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x48>)
900008c2:	689a      	ldr	r2, [r3, #8]
900008c4:	3a00      	subs	r2, #0
900008c6:	bf18      	it	ne
900008c8:	2201      	movne	r2, #1
900008ca:	f009 bf37 	b.w	9000a73c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
900008ce:	4b09      	ldr	r3, [pc, #36]	; (900008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
900008d0:	2108      	movs	r1, #8
900008d2:	480a      	ldr	r0, [pc, #40]	; (900008fc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x4c>)
900008d4:	681a      	ldr	r2, [r3, #0]
900008d6:	3a00      	subs	r2, #0
900008d8:	bf18      	it	ne
900008da:	2201      	movne	r2, #1
900008dc:	f009 bf2e 	b.w	9000a73c <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
900008e0:	4b04      	ldr	r3, [pc, #16]	; (900008f4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x44>)
900008e2:	2140      	movs	r1, #64	; 0x40
900008e4:	4806      	ldr	r0, [pc, #24]	; (90000900 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>)
900008e6:	68da      	ldr	r2, [r3, #12]
900008e8:	3a00      	subs	r2, #0
900008ea:	bf18      	it	ne
900008ec:	2201      	movne	r2, #1
900008ee:	f009 bf25 	b.w	9000a73c <HAL_GPIO_WritePin>
900008f2:	bf00      	nop
900008f4:	24005b64 	.word	0x24005b64
900008f8:	58020400 	.word	0x58020400
900008fc:	58021800 	.word	0x58021800
90000900:	58020000 	.word	0x58020000

90000904 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
    switch (id)
90000904:	2802      	cmp	r0, #2
90000906:	d003      	beq.n	90000910 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xc>
90000908:	2803      	cmp	r0, #3
9000090a:	d009      	beq.n	90000920 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x1c>
9000090c:	b120      	cbz	r0, 90000918 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x14>
}
9000090e:	4770      	bx	lr
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
90000910:	2140      	movs	r1, #64	; 0x40
90000912:	4805      	ldr	r0, [pc, #20]	; (90000928 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x24>)
90000914:	f009 bf16 	b.w	9000a744 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
90000918:	2108      	movs	r1, #8
9000091a:	4804      	ldr	r0, [pc, #16]	; (9000092c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>)
9000091c:	f009 bf12 	b.w	9000a744 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
90000920:	2140      	movs	r1, #64	; 0x40
90000922:	4803      	ldr	r0, [pc, #12]	; (90000930 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
90000924:	f009 bf0e 	b.w	9000a744 <HAL_GPIO_TogglePin>
90000928:	58020400 	.word	0x58020400
9000092c:	58021800 	.word	0x58021800
90000930:	58020000 	.word	0x58020000

90000934 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
    {
        return DMA_TYPE_GENERIC;
    }
90000934:	2000      	movs	r0, #0
90000936:	4770      	bx	lr

90000938 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
90000938:	2301      	movs	r3, #1
        requestedOrientation = orientation;
9000093a:	f880 1074 	strb.w	r1, [r0, #116]	; 0x74
        displayOrientationChangeRequested = true;
9000093e:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
90000942:	4770      	bx	lr

90000944 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
90000944:	2000      	movs	r0, #0
90000946:	4770      	bx	lr

90000948 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000948:	1e0a      	subs	r2, r1, #0
9000094a:	4b03      	ldr	r3, [pc, #12]	; (90000958 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
9000094c:	6441      	str	r1, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
9000094e:	bf18      	it	ne
90000950:	2201      	movne	r2, #1
90000952:	701a      	strb	r2, [r3, #0]
    }
90000954:	4770      	bx	lr
90000956:	bf00      	nop
90000958:	24026f8b 	.word	0x24026f8b

9000095c <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
9000095c:	2000      	movs	r0, #0
9000095e:	4770      	bx	lr

90000960 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
90000960:	6b83      	ldr	r3, [r0, #56]	; 0x38
    virtual void taskDelay(uint16_t ms)
90000962:	4608      	mov	r0, r1
        if (taskDelayFunc)
90000964:	b103      	cbz	r3, 90000968 <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
90000966:	4718      	bx	r3
        }
    }
90000968:	4770      	bx	lr
9000096a:	bf00      	nop

9000096c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
9000096c:	f64f 70ff 	movw	r0, #65535	; 0xffff
90000970:	4770      	bx	lr
90000972:	bf00      	nop

90000974 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
90000974:	4770      	bx	lr
90000976:	bf00      	nop

90000978 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
90000978:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
9000097a:	4b09      	ldr	r3, [pc, #36]	; (900009a0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
9000097c:	881b      	ldrh	r3, [r3, #0]
9000097e:	428b      	cmp	r3, r1
90000980:	d808      	bhi.n	90000994 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
90000982:	4b08      	ldr	r3, [pc, #32]	; (900009a4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
90000984:	881b      	ldrh	r3, [r3, #0]
90000986:	4293      	cmp	r3, r2
90000988:	d804      	bhi.n	90000994 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1c>
        FRAME_BUFFER_WIDTH = width;
9000098a:	4807      	ldr	r0, [pc, #28]	; (900009a8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
        FRAME_BUFFER_HEIGHT = height;
9000098c:	4b07      	ldr	r3, [pc, #28]	; (900009ac <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
        FRAME_BUFFER_WIDTH = width;
9000098e:	8001      	strh	r1, [r0, #0]
        FRAME_BUFFER_HEIGHT = height;
90000990:	801a      	strh	r2, [r3, #0]
    }
90000992:	bd08      	pop	{r3, pc}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
90000994:	4b06      	ldr	r3, [pc, #24]	; (900009b0 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
90000996:	219e      	movs	r1, #158	; 0x9e
90000998:	4a06      	ldr	r2, [pc, #24]	; (900009b4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
9000099a:	4807      	ldr	r0, [pc, #28]	; (900009b8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
9000099c:	f026 fb46 	bl	9002702c <__assert_func>
900009a0:	24026f80 	.word	0x24026f80
900009a4:	24026f82 	.word	0x24026f82
900009a8:	24026f86 	.word	0x24026f86
900009ac:	24026f88 	.word	0x24026f88
900009b0:	90028274 	.word	0x90028274
900009b4:	900282d8 	.word	0x900282d8
900009b8:	9002831c 	.word	0x9002831c

900009bc <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
900009bc:	b510      	push	{r4, lr}
900009be:	4604      	mov	r4, r0
        swapFrameBuffers();
900009c0:	f014 feb6 	bl	90015730 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
900009c4:	6823      	ldr	r3, [r4, #0]
900009c6:	4620      	mov	r0, r4
900009c8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
    }
900009cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
900009d0:	4718      	bx	r3
900009d2:	bf00      	nop

900009d4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
900009d4:	f001 be42 	b.w	9000265c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>

900009d8 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
900009d8:	f001 be46 	b.w	90002668 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

900009dc <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
900009dc:	b510      	push	{r4, lr}
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
900009de:	f001 ff05 	bl	900027ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900009e2:	4812      	ldr	r0, [pc, #72]	; (90000a2c <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x50>)
900009e4:	2300      	movs	r3, #0
900009e6:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
900009ea:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
900009ee:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
900009f2:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
900009f6:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
900009fa:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
900009fe:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000a02:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90000a06:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000a08:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
90000a0c:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90000a0e:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
90000a12:	1c5a      	adds	r2, r3, #1
90000a14:	d1f8      	bne.n	90000a08 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x2c>
    } while(sets-- != 0U);
90000a16:	f1ac 0c20 	sub.w	ip, ip, #32
90000a1a:	f11c 0f20 	cmn.w	ip, #32
90000a1e:	d1f0      	bne.n	90000a02 <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE+0x26>
90000a20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90000a24:	f3bf 8f6f 	isb	sy
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then we need
    // to flush the Dcache to make sure framebuffer is correct in RAM. That's done
    // using SCB_CleanInvalidateDCache().

    SCB_CleanInvalidateDCache();
}
90000a28:	bd10      	pop	{r4, pc}
90000a2a:	bf00      	nop
90000a2c:	e000ed00 	.word	0xe000ed00

90000a30 <_ZN11TouchGFXHAL19configureInterruptsEv>:
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
90000a30:	f001 bdf0 	b.w	90002614 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

90000a34 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
90000a34:	f002 b800 	b.w	90002a38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

90000a38 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
90000a38:	f001 bfea 	b.w	90002a10 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>

90000a3c <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
90000a3c:	f001 bdf4 	b.w	90002628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>

90000a40 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
    {
        HAL::flushFrameBuffer();
90000a40:	f014 b8ce 	b.w	90014be0 <_ZN8touchgfx3HAL16flushFrameBufferEv>

90000a44 <_ZN11TouchGFXHALD0Ev>:
90000a44:	b510      	push	{r4, lr}
90000a46:	4604      	mov	r4, r0
90000a48:	2188      	movs	r1, #136	; 0x88
90000a4a:	f026 fa52 	bl	90026ef2 <_ZdlPvj>
90000a4e:	4620      	mov	r0, r4
90000a50:	bd10      	pop	{r4, pc}
90000a52:	bf00      	nop

90000a54 <_ZN8touchgfx3HAL11getBlitCapsEv>:
        if (useDMAAcceleration)
90000a54:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
90000a58:	b11b      	cbz	r3, 90000a62 <_ZN8touchgfx3HAL11getBlitCapsEv+0xe>
            return dma.getBlitCaps();
90000a5a:	6840      	ldr	r0, [r0, #4]
90000a5c:	6803      	ldr	r3, [r0, #0]
90000a5e:	681b      	ldr	r3, [r3, #0]
90000a60:	4718      	bx	r3
    }
90000a62:	4618      	mov	r0, r3
90000a64:	4770      	bx	lr
90000a66:	bf00      	nop

90000a68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
90000a68:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
90000a6c:	f890 3034 	ldrb.w	r3, [r0, #52]	; 0x34
90000a70:	429a      	cmp	r2, r3
        {
            if (DISPLAY_ROTATION == rotate0)
90000a72:	4b0b      	ldr	r3, [pc, #44]	; (90000aa0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x38>)
90000a74:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
90000a76:	d00b      	beq.n	90000a90 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x28>
            if (DISPLAY_ROTATION == rotate0)
90000a78:	b94a      	cbnz	r2, 90000a8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
90000a7a:	4a0a      	ldr	r2, [pc, #40]	; (90000aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
                DISPLAY_WIDTH = tmp;
                DISPLAY_ROTATION = rotate90;
90000a7c:	f04f 0c01 	mov.w	ip, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000a80:	4909      	ldr	r1, [pc, #36]	; (90000aa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            }
        }
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
90000a82:	8810      	ldrh	r0, [r2, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
90000a84:	f883 c000 	strb.w	ip, [r3]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000a88:	880b      	ldrh	r3, [r1, #0]
            DISPLAY_WIDTH = tmp;
90000a8a:	8008      	strh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000a8c:	8013      	strh	r3, [r2, #0]
        }
    }
90000a8e:	4770      	bx	lr
        else if (DISPLAY_ROTATION != rotate0)
90000a90:	2a00      	cmp	r2, #0
90000a92:	d0fc      	beq.n	90000a8e <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            const uint16_t tmp = DISPLAY_HEIGHT;
90000a94:	4a03      	ldr	r2, [pc, #12]	; (90000aa4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
            DISPLAY_ROTATION = rotate0;
90000a96:	f04f 0c00 	mov.w	ip, #0
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
90000a9a:	4903      	ldr	r1, [pc, #12]	; (90000aa8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
90000a9c:	e7f1      	b.n	90000a82 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x1a>
90000a9e:	bf00      	nop
90000aa0:	24026f84 	.word	0x24026f84
90000aa4:	24026f82 	.word	0x24026f82
90000aa8:	24026f80 	.word	0x24026f80

90000aac <_ZN8touchgfx3HAL10getDMATypeEv>:
        return dma.getDMAType();
90000aac:	6840      	ldr	r0, [r0, #4]
90000aae:	4a04      	ldr	r2, [pc, #16]	; (90000ac0 <_ZN8touchgfx3HAL10getDMATypeEv+0x14>)
90000ab0:	6803      	ldr	r3, [r0, #0]
90000ab2:	699b      	ldr	r3, [r3, #24]
90000ab4:	4293      	cmp	r3, r2
90000ab6:	d101      	bne.n	90000abc <_ZN8touchgfx3HAL10getDMATypeEv+0x10>
    }
90000ab8:	2000      	movs	r0, #0
90000aba:	4770      	bx	lr
        return dma.getDMAType();
90000abc:	4718      	bx	r3
90000abe:	bf00      	nop
90000ac0:	90000935 	.word	0x90000935

90000ac4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000ac4:	b1a9      	cbz	r1, 90000af2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2e>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90000ac6:	6402      	str	r2, [r0, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000ac8:	3a00      	subs	r2, #0
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90000aca:	63c1      	str	r1, [r0, #60]	; 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000acc:	bf18      	it	ne
90000ace:	2201      	movne	r2, #1
90000ad0:	490c      	ldr	r1, [pc, #48]	; (90000b04 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x40>)
90000ad2:	700a      	strb	r2, [r1, #0]
        setAnimationStorage(animationStorage);
90000ad4:	6802      	ldr	r2, [r0, #0]
90000ad6:	490c      	ldr	r1, [pc, #48]	; (90000b08 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x44>)
90000ad8:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
90000adc:	428a      	cmp	r2, r1
90000ade:	d106      	bne.n	90000aee <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x2a>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000ae0:	1e19      	subs	r1, r3, #0
90000ae2:	4a0a      	ldr	r2, [pc, #40]	; (90000b0c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x48>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000ae4:	6443      	str	r3, [r0, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000ae6:	bf18      	it	ne
90000ae8:	2101      	movne	r1, #1
90000aea:	7011      	strb	r1, [r2, #0]
90000aec:	4770      	bx	lr
        setAnimationStorage(animationStorage);
90000aee:	4619      	mov	r1, r3
90000af0:	4710      	bx	r2
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000af2:	4b07      	ldr	r3, [pc, #28]	; (90000b10 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x4c>)
90000af4:	f240 21d2 	movw	r1, #722	; 0x2d2
90000af8:	4a06      	ldr	r2, [pc, #24]	; (90000b14 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x50>)
90000afa:	4807      	ldr	r0, [pc, #28]	; (90000b18 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
90000afc:	b510      	push	{r4, lr}
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000afe:	f026 fa95 	bl	9002702c <__assert_func>
90000b02:	bf00      	nop
90000b04:	24026f8a 	.word	0x24026f8a
90000b08:	90000949 	.word	0x90000949
90000b0c:	24026f8b 	.word	0x24026f8b
90000b10:	90028364 	.word	0x90028364
90000b14:	9002839c 	.word	0x9002839c
90000b18:	9002831c 	.word	0x9002831c

90000b1c <_ZN11TouchGFXHAL9taskEntryEv>:
{
90000b1c:	b508      	push	{r3, lr}
    enableLCDControllerInterrupt();
90000b1e:	6803      	ldr	r3, [r0, #0]
{
90000b20:	4604      	mov	r4, r0
90000b22:	4d17      	ldr	r5, [pc, #92]	; (90000b80 <_ZN11TouchGFXHAL9taskEntryEv+0x64>)
    enableLCDControllerInterrupt();
90000b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90000b28:	4798      	blx	r3
    enableInterrupts();
90000b2a:	6823      	ldr	r3, [r4, #0]
90000b2c:	4620      	mov	r0, r4
90000b2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90000b30:	4798      	blx	r3
    OSWrappers::waitForVSync();
90000b32:	f001 f8c7 	bl	90001cc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
90000b36:	6823      	ldr	r3, [r4, #0]
90000b38:	4620      	mov	r0, r4
90000b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000b3c:	4798      	blx	r3
    HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_SET);
90000b3e:	2201      	movs	r2, #1
90000b40:	2104      	movs	r1, #4
90000b42:	4810      	ldr	r0, [pc, #64]	; (90000b84 <_ZN11TouchGFXHAL9taskEntryEv+0x68>)
90000b44:	f009 fdfa 	bl	9000a73c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_DE_GPIO_Port, LCD_DE_Pin, GPIO_PIN_SET);
90000b48:	2201      	movs	r2, #1
90000b4a:	2180      	movs	r1, #128	; 0x80
90000b4c:	480e      	ldr	r0, [pc, #56]	; (90000b88 <_ZN11TouchGFXHAL9taskEntryEv+0x6c>)
90000b4e:	f009 fdf5 	bl	9000a73c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90000b52:	2201      	movs	r2, #1
90000b54:	480d      	ldr	r0, [pc, #52]	; (90000b8c <_ZN11TouchGFXHAL9taskEntryEv+0x70>)
90000b56:	4611      	mov	r1, r2
90000b58:	f009 fdf0 	bl	9000a73c <HAL_GPIO_WritePin>
        OSWrappers::waitForVSync();
90000b5c:	f001 f8b2 	bl	90001cc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
90000b60:	6823      	ldr	r3, [r4, #0]
        swapFrameBuffers();
90000b62:	4620      	mov	r0, r4
90000b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90000b66:	42ab      	cmp	r3, r5
90000b68:	d107      	bne.n	90000b7a <_ZN11TouchGFXHAL9taskEntryEv+0x5e>
90000b6a:	f014 fde1 	bl	90015730 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
90000b6e:	6823      	ldr	r3, [r4, #0]
90000b70:	4620      	mov	r0, r4
90000b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
90000b76:	4798      	blx	r3
    }
90000b78:	e7f0      	b.n	90000b5c <_ZN11TouchGFXHAL9taskEntryEv+0x40>
90000b7a:	4798      	blx	r3
90000b7c:	e7ee      	b.n	90000b5c <_ZN11TouchGFXHAL9taskEntryEv+0x40>
90000b7e:	bf00      	nop
90000b80:	900009bd 	.word	0x900009bd
90000b84:	58020000 	.word	0x58020000
90000b88:	58020c00 	.word	0x58020c00
90000b8c:	58022800 	.word	0x58022800

90000b90 <_ZN11TouchGFXHAL10initializeEv>:
{
90000b90:	b538      	push	{r3, r4, r5, lr}
90000b92:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::initialize();
90000b94:	f001 ff5a 	bl	90002a4c <_ZN20TouchGFXGeneratedHAL10initializeEv>
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000b98:	4817      	ldr	r0, [pc, #92]	; (90000bf8 <_ZN11TouchGFXHAL10initializeEv+0x68>)
90000b9a:	6823      	ldr	r3, [r4, #0]
90000b9c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
90000b9e:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90000ba2:	6c22      	ldr	r2, [r4, #64]	; 0x40
90000ba4:	4285      	cmp	r5, r0
90000ba6:	d119      	bne.n	90000bdc <_ZN11TouchGFXHAL10initializeEv+0x4c>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000ba8:	b1f9      	cbz	r1, 90000bea <_ZN11TouchGFXHAL10initializeEv+0x5a>
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000baa:	3a00      	subs	r2, #0
90000bac:	4913      	ldr	r1, [pc, #76]	; (90000bfc <_ZN11TouchGFXHAL10initializeEv+0x6c>)
        setAnimationStorage(animationStorage);
90000bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000bb2:	bf18      	it	ne
90000bb4:	2201      	movne	r2, #1
90000bb6:	4812      	ldr	r0, [pc, #72]	; (90000c00 <_ZN11TouchGFXHAL10initializeEv+0x70>)
90000bb8:	428b      	cmp	r3, r1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000bba:	4912      	ldr	r1, [pc, #72]	; (90000c04 <_ZN11TouchGFXHAL10initializeEv+0x74>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90000bbc:	7002      	strb	r2, [r0, #0]
        setAnimationStorage(animationStorage);
90000bbe:	d111      	bne.n	90000be4 <_ZN11TouchGFXHAL10initializeEv+0x54>
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000bc0:	4b11      	ldr	r3, [pc, #68]	; (90000c08 <_ZN11TouchGFXHAL10initializeEv+0x78>)
90000bc2:	2201      	movs	r2, #1
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90000bc4:	6461      	str	r1, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90000bc6:	701a      	strb	r2, [r3, #0]
    instrumentation.init();
90000bc8:	f104 057c 	add.w	r5, r4, #124	; 0x7c
90000bcc:	4628      	mov	r0, r5
90000bce:	f7ff fd9f 	bl	90000710 <_ZN8touchgfx25CortexMMCUInstrumentation4initEv>
        updateMCULoad = enabled;
90000bd2:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
90000bd4:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
90000bd6:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
}
90000bda:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuffer0, (void*)frameBuffer1, (void*)animationBuffer);
90000bdc:	4b09      	ldr	r3, [pc, #36]	; (90000c04 <_ZN11TouchGFXHAL10initializeEv+0x74>)
90000bde:	4620      	mov	r0, r4
90000be0:	47a8      	blx	r5
90000be2:	e7f1      	b.n	90000bc8 <_ZN11TouchGFXHAL10initializeEv+0x38>
        setAnimationStorage(animationStorage);
90000be4:	4620      	mov	r0, r4
90000be6:	4798      	blx	r3
90000be8:	e7ee      	b.n	90000bc8 <_ZN11TouchGFXHAL10initializeEv+0x38>
        assert(frameBuffer != 0 && "A framebuffer address must be set");
90000bea:	4b08      	ldr	r3, [pc, #32]	; (90000c0c <_ZN11TouchGFXHAL10initializeEv+0x7c>)
90000bec:	f240 21d2 	movw	r1, #722	; 0x2d2
90000bf0:	4a07      	ldr	r2, [pc, #28]	; (90000c10 <_ZN11TouchGFXHAL10initializeEv+0x80>)
90000bf2:	4808      	ldr	r0, [pc, #32]	; (90000c14 <_ZN11TouchGFXHAL10initializeEv+0x84>)
90000bf4:	f026 fa1a 	bl	9002702c <__assert_func>
90000bf8:	90000ac5 	.word	0x90000ac5
90000bfc:	90000949 	.word	0x90000949
90000c00:	24026f8a 	.word	0x24026f8a
90000c04:	d0000000 	.word	0xd0000000
90000c08:	24026f8b 	.word	0x24026f8b
90000c0c:	90028364 	.word	0x90028364
90000c10:	9002839c 	.word	0x9002839c
90000c14:	9002831c 	.word	0x9002831c

90000c18 <IdleTaskHook>:
}

extern "C"
{
    portBASE_TYPE IdleTaskHook(void* p)
    {
90000c18:	b508      	push	{r3, lr}
        return instance;
90000c1a:	4b07      	ldr	r3, [pc, #28]	; (90000c38 <IdleTaskHook+0x20>)
        if ((int)p) //idle task sched out
90000c1c:	b128      	cbz	r0, 90000c2a <IdleTaskHook+0x12>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
90000c1e:	6818      	ldr	r0, [r3, #0]
90000c20:	2101      	movs	r1, #1
90000c22:	f014 fd9f 	bl	90015764 <_ZN8touchgfx3HAL12setMCUActiveEb>
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }
90000c26:	2001      	movs	r0, #1
90000c28:	bd08      	pop	{r3, pc}
            touchgfx::HAL::getInstance()->setMCUActive(false);
90000c2a:	4601      	mov	r1, r0
90000c2c:	6818      	ldr	r0, [r3, #0]
90000c2e:	f014 fd99 	bl	90015764 <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
90000c32:	2001      	movs	r0, #1
90000c34:	bd08      	pop	{r3, pc}
90000c36:	bf00      	nop
90000c38:	24026f8c 	.word	0x24026f8c

90000c3c <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool gotoNextFrame();
    //Decode part of the current frame
    virtual bool decodeFrame(const touchgfx::Rect& area, uint8_t* frameBuffer, uint32_t framebuffer_width);
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90000c3c:	6940      	ldr	r0, [r0, #20]
90000c3e:	4770      	bx	lr

90000c40 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    virtual void setRepeatVideo(bool repeat);
    virtual void getVideoInfo(touchgfx::VideoInformation* data);

    void setAVIFileBuffer(uint8_t* buffer, uint32_t size) { aviBuffer = buffer, aviBufferLength = size; }

    virtual AVIErrors getLastError() { return lastError; }
90000c40:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
90000c44:	4770      	bx	lr
90000c46:	bf00      	nop

90000c48 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
90000c48:	6b03      	ldr	r3, [r0, #48]	; 0x30
90000c4a:	b10b      	cbz	r3, 90000c50 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0x8>
90000c4c:	2001      	movs	r0, #1
}
90000c4e:	4770      	bx	lr
    return (reader != 0) || (movieData != 0);
90000c50:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
90000c52:	3800      	subs	r0, #0
90000c54:	bf18      	it	ne
90000c56:	2001      	movne	r0, #1
90000c58:	4770      	bx	lr
90000c5a:	bf00      	nop

90000c5c <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
90000c5c:	6880      	ldr	r0, [r0, #8]
90000c5e:	4770      	bx	lr

90000c60 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
90000c60:	4770      	bx	lr
90000c62:	bf00      	nop

90000c64 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
90000c64:	3004      	adds	r0, #4
{
90000c66:	468c      	mov	ip, r1
    *data = videoInfo;
90000c68:	c80f      	ldmia	r0, {r0, r1, r2, r3}
90000c6a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
}
90000c6e:	4770      	bx	lr

90000c70 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
90000c70:	4770      	bx	lr
90000c72:	bf00      	nop

90000c74 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
90000c74:	b508      	push	{r3, lr}
    assert(0);
90000c76:	4a03      	ldr	r2, [pc, #12]	; (90000c84 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
90000c78:	f240 11cf 	movw	r1, #463	; 0x1cf
90000c7c:	4b02      	ldr	r3, [pc, #8]	; (90000c88 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
90000c7e:	4803      	ldr	r0, [pc, #12]	; (90000c8c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
90000c80:	f026 f9d4 	bl	9002702c <__assert_func>
90000c84:	900284c8 	.word	0x900284c8
90000c88:	900284c4 	.word	0x900284c4
90000c8c:	90028524 	.word	0x90028524

90000c90 <_ZN20HardwareMJPEGDecoderD0Ev>:
90000c90:	b510      	push	{r4, lr}
90000c92:	4604      	mov	r4, r0
90000c94:	2148      	movs	r1, #72	; 0x48
90000c96:	f026 f92c 	bl	90026ef2 <_ZdlPvj>
90000c9a:	4620      	mov	r0, r4
90000c9c:	bd10      	pop	{r4, pc}
90000c9e:	bf00      	nop

90000ca0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>:
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000ca4:	b085      	sub	sp, #20
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000ca6:	f8df b1d0 	ldr.w	fp, [pc, #464]	; 90000e78 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d8>
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000caa:	4604      	mov	r4, r0
  * @retval None
  */
uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef *hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
{
    FrameBufferAddress = output;
    Output_Is_Paused = 0;
90000cac:	4e65      	ldr	r6, [pc, #404]	; (90000e44 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a4>)
void HardwareMJPEGDecoder::decodeMJPEGFrame(const uint8_t* const mjpgdata, const uint32_t length, uint8_t* outputBuffer, uint16_t bufferWidth, uint16_t bufferHeight, uint32_t bufferStride)
90000cae:	9003      	str	r0, [sp, #12]
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000cb0:	2002      	movs	r0, #2
    DMA2D_output_Is_Paused = 1;

    //Init buffers
    for(uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
    {
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000cb2:	4d65      	ldr	r5, [pc, #404]	; (90000e48 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a8>)
      JPEG_ConvertorParams.bytes_pr_pixel = 2;
90000cb4:	f8cb 0010 	str.w	r0, [fp, #16]
      JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
90000cb8:	68e0      	ldr	r0, [r4, #12]
    JPEG_OUT_Read_BufferIndex = 0;
90000cba:	4f64      	ldr	r7, [pc, #400]	; (90000e4c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1ac>)
      if((JPEG_ConvertorParams.WidthExtend % 16) != 0)
90000cbc:	0704      	lsls	r4, r0, #28
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000cbe:	f44f 7470 	mov.w	r4, #960	; 0x3c0
    DMA2D_output_Is_Paused = 1;
90000cc2:	f8df a1b8 	ldr.w	sl, [pc, #440]	; 90000e7c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1dc>
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000cc6:	bf18      	it	ne
90000cc8:	f020 000f 	bicne.w	r0, r0, #15
      JPEG_ConvertorParams.ScaledWidth = 480 * JPEG_ConvertorParams.bytes_pr_pixel;
90000ccc:	f8cb 4004 	str.w	r4, [fp, #4]
    FrameBufferAddress = output;
90000cd0:	4c5f      	ldr	r4, [pc, #380]	; (90000e50 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b0>)
          JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
90000cd2:	bf18      	it	ne
90000cd4:	3010      	addne	r0, #16
90000cd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 90000e80 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e0>
90000cda:	f8df 91a8 	ldr.w	r9, [pc, #424]	; 90000e84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1e4>
90000cde:	f8cb 0000 	str.w	r0, [fp]
      JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
90000ce2:	0900      	lsrs	r0, r0, #4
90000ce4:	f8cb 000c 	str.w	r0, [fp, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
    }

    //Do not return from this function until done with decoding all chunks.
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000ce8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90000cec:	01c0      	lsls	r0, r0, #7
90000cee:	9000      	str	r0, [sp, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000cf0:	9803      	ldr	r0, [sp, #12]
    FrameBufferAddress = output;
90000cf2:	6023      	str	r3, [r4, #0]
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000cf4:	6900      	ldr	r0, [r0, #16]
    JPEG_OUT_Write_BufferIndex = 0;
90000cf6:	4b57      	ldr	r3, [pc, #348]	; (90000e54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
      JPEG_ConvertorParams.LastLineHeight = 16 - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
90000cf8:	f000 000f 	and.w	r0, r0, #15
90000cfc:	4c56      	ldr	r4, [pc, #344]	; (90000e58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b8>)
90000cfe:	f1c0 0010 	rsb	r0, r0, #16
90000d02:	f8cb 0008 	str.w	r0, [fp, #8]
    Output_Is_Paused = 0;
90000d06:	2000      	movs	r0, #0
    JPEG_OUT_Write_BufferIndex = 0;
90000d08:	6018      	str	r0, [r3, #0]
    JPEG_InputImageIndex = 0;
90000d0a:	4b54      	ldr	r3, [pc, #336]	; (90000e5c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1bc>)
    Output_Is_Paused = 0;
90000d0c:	6030      	str	r0, [r6, #0]
    JPEG_InputImageIndex = 0;
90000d0e:	6018      	str	r0, [r3, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d10:	4b53      	ldr	r3, [pc, #332]	; (90000e60 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c0>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d12:	7028      	strb	r0, [r5, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90000d14:	6019      	str	r1, [r3, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d16:	4b53      	ldr	r3, [pc, #332]	; (90000e64 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c4>)
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d18:	60a8      	str	r0, [r5, #8]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
90000d1a:	601a      	str	r2, [r3, #0]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d1c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    MCU_BlockIndex = 0;
90000d20:	4b51      	ldr	r3, [pc, #324]	; (90000e68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000d22:	7328      	strb	r0, [r5, #12]
    MCU_BlockIndex = 0;
90000d24:	6018      	str	r0, [r3, #0]
    DMA2D_output_Is_Paused = 1;
90000d26:	2301      	movs	r3, #1
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000d28:	6168      	str	r0, [r5, #20]
    JPEG_OUT_Read_BufferIndex = 0;
90000d2a:	6038      	str	r0, [r7, #0]
    DMA2D_output_Is_Paused = 1;
90000d2c:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000d30:	484e      	ldr	r0, [pc, #312]	; (90000e6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
90000d32:	686b      	ldr	r3, [r5, #4]
90000d34:	f00a fe18 	bl	9000b968 <HAL_JPEG_Decode_DMA>
  * @param dma: DMA2D reference
  * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
  */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef *hjpeg, touchgfx::DMA_Interface& dma)
{
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90000d38:	f8d8 3000 	ldr.w	r3, [r8]
90000d3c:	b11b      	cbz	r3, 90000d46 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xa6>
90000d3e:	4b4c      	ldr	r3, [pc, #304]	; (90000e70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000d40:	681b      	ldr	r3, [r3, #0]
90000d42:	2b00      	cmp	r3, #0
90000d44:	d17c      	bne.n	90000e40 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1a0>
  {
      return 1;
  }

  // Add job to DMA2D if ready and JPEG buffer is full
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000d46:	683b      	ldr	r3, [r7, #0]
90000d48:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90000d4c:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
90000d50:	eb05 0282 	add.w	r2, r5, r2, lsl #2
90000d54:	2901      	cmp	r1, #1
90000d56:	d040      	beq.n	90000dda <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x13a>
      // Try to start DMA2D
      dma.start();
  }

  // Start JPEG IP if paused and next buffer is empty
  if((Output_Is_Paused == 1) && \
90000d58:	6833      	ldr	r3, [r6, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000d5a:	2b01      	cmp	r3, #1
90000d5c:	d028      	beq.n	90000db0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x110>
  {
      Output_Is_Paused = 0;
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
  }

  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90000d5e:	6833      	ldr	r3, [r6, #0]
90000d60:	b9bb      	cbnz	r3, 90000d92 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xf2>
90000d62:	f8da 2000 	ldr.w	r2, [sl]
  {
      return 2;
90000d66:	2a00      	cmp	r2, #0
90000d68:	bf08      	it	eq
90000d6a:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d6c:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000d6e:	6823      	ldr	r3, [r4, #0]
90000d70:	2b02      	cmp	r3, #2
90000d72:	d013      	beq.n	90000d9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xfc>
      while(JpegProcessing_End != 1);
90000d74:	6823      	ldr	r3, [r4, #0]
90000d76:	2b01      	cmp	r3, #1
90000d78:	d1de      	bne.n	90000d38 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
  {
      return count_ == max_size_;
  }
  void reset()
  {
      head_ = tail_ = count_ = 0;
90000d7a:	2300      	movs	r3, #0
      DMA2D_CopyBufferEnd = 0;
90000d7c:	4a3c      	ldr	r2, [pc, #240]	; (90000e70 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d0>)
90000d7e:	e9c9 3302 	strd	r3, r3, [r9, #8]
90000d82:	f8c9 3004 	str.w	r3, [r9, #4]
      Jpeg_HWDecodingEnd = 0;
90000d86:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_CopyBufferEnd = 0;
90000d8a:	6013      	str	r3, [r2, #0]
}
90000d8c:	b005      	add	sp, #20
90000d8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  }

  return 0;
90000d92:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000d94:	6023      	str	r3, [r4, #0]
        if (JpegProcessing_End == 2)
90000d96:	6823      	ldr	r3, [r4, #0]
90000d98:	2b02      	cmp	r3, #2
90000d9a:	d1eb      	bne.n	90000d74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xd4>
          SEM_WAIT(semDecodingDone);
90000d9c:	4b35      	ldr	r3, [pc, #212]	; (90000e74 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1d4>)
90000d9e:	f04f 31ff 	mov.w	r1, #4294967295
90000da2:	6818      	ldr	r0, [r3, #0]
90000da4:	f00f ff8a 	bl	90010cbc <osSemaphoreAcquire>
      while(JpegProcessing_End != 1);
90000da8:	6823      	ldr	r3, [r4, #0]
90000daa:	2b01      	cmp	r3, #1
90000dac:	d1c4      	bne.n	90000d38 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x98>
90000dae:	e7e4      	b.n	90000d7a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xda>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000db0:	4b28      	ldr	r3, [pc, #160]	; (90000e54 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1b4>)
90000db2:	681b      	ldr	r3, [r3, #0]
90000db4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90000db8:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dbc:	2b00      	cmp	r3, #0
90000dbe:	d1ce      	bne.n	90000d5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90000dc0:	683b      	ldr	r3, [r7, #0]
90000dc2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90000dc6:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
90000dca:	2b00      	cmp	r3, #0
90000dcc:	d1c7      	bne.n	90000d5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dce:	2102      	movs	r1, #2
90000dd0:	4826      	ldr	r0, [pc, #152]	; (90000e6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1cc>)
      Output_Is_Paused = 0;
90000dd2:	6033      	str	r3, [r6, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90000dd4:	f00a ff12 	bl	9000bbfc <HAL_JPEG_Resume>
90000dd8:	e7c1      	b.n	90000d5e <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xbe>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
90000dda:	f8da 1000 	ldr.w	r1, [sl]
90000dde:	2901      	cmp	r1, #1
90000de0:	d1ba      	bne.n	90000d58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      buffer_[tail_] = job;
90000de2:	f8d9 1008 	ldr.w	r1, [r9, #8]
      JPEG_OUT_Read_BufferIndex++;
90000de6:	3301      	adds	r3, #1
      };
90000de8:	481f      	ldr	r0, [pc, #124]	; (90000e68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      tail_ = (tail_ + 1) % max_size_;
90000dea:	f8d9 c000 	ldr.w	ip, [r9]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90000dee:	2b01      	cmp	r3, #1
      };
90000df0:	f8d0 e000 	ldr.w	lr, [r0]
90000df4:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
90000df8:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
90000dfc:	bf88      	it	hi
90000dfe:	2300      	movhi	r3, #0
90000e00:	f849 e031 	str.w	lr, [r9, r1, lsl #3]
90000e04:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
90000e08:	603b      	str	r3, [r7, #0]
      DMA2D_output_Is_Paused = 0;
90000e0a:	2300      	movs	r3, #0
90000e0c:	604a      	str	r2, [r1, #4]
      count_++;
90000e0e:	f8d9 100c 	ldr.w	r1, [r9, #12]
      tail_ = (tail_ + 1) % max_size_;
90000e12:	fbb0 f2fc 	udiv	r2, r0, ip
90000e16:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
90000e1a:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
90000e1c:	f8c9 0008 	str.w	r0, [r9, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
90000e20:	4811      	ldr	r0, [pc, #68]	; (90000e68 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0x1c8>)
      count_++;
90000e22:	f8c9 100c 	str.w	r1, [r9, #12]
90000e26:	6802      	ldr	r2, [r0, #0]
90000e28:	f8db 100c 	ldr.w	r1, [fp, #12]
90000e2c:	440a      	add	r2, r1
90000e2e:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e30:	9a03      	ldr	r2, [sp, #12]
      DMA2D_output_Is_Paused = 0;
90000e32:	f8ca 3000 	str.w	r3, [sl]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90000e36:	6c50      	ldr	r0, [r2, #68]	; 0x44
      dma.start();
90000e38:	6803      	ldr	r3, [r0, #0]
90000e3a:	691b      	ldr	r3, [r3, #16]
90000e3c:	4798      	blx	r3
90000e3e:	e78b      	b.n	90000d58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xb8>
      return 1;
90000e40:	2301      	movs	r3, #1
90000e42:	e793      	b.n	90000d6c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0+0xcc>
90000e44:	24005ba4 	.word	0x24005ba4
90000e48:	24000004 	.word	0x24000004
90000e4c:	24005b8c 	.word	0x24005b8c
90000e50:	24005b7c 	.word	0x24005b7c
90000e54:	24005b90 	.word	0x24005b90
90000e58:	24005b94 	.word	0x24005b94
90000e5c:	24005b84 	.word	0x24005b84
90000e60:	24005b80 	.word	0x24005b80
90000e64:	24005b88 	.word	0x24005b88
90000e68:	24005b9c 	.word	0x24005b9c
90000e6c:	2400bb54 	.word	0x2400bb54
90000e70:	24005b74 	.word	0x24005b74
90000e74:	24005be0 	.word	0x24005be0
90000e78:	24005ba8 	.word	0x24005ba8
90000e7c:	24005b78 	.word	0x24005b78
90000e80:	24005b98 	.word	0x24005b98
90000e84:	24005bbc 	.word	0x24005bbc

90000e88 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
{
90000e88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (frameNumber > getNumberOfFrames())
90000e8a:	6803      	ldr	r3, [r0, #0]
90000e8c:	2901      	cmp	r1, #1
90000e8e:	4e29      	ldr	r6, [pc, #164]	; (90000f34 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xac>)
{
90000e90:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
90000e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000e94:	bf38      	it	cc
90000e96:	2101      	movcc	r1, #1
90000e98:	42b3      	cmp	r3, r6
90000e9a:	460d      	mov	r5, r1
90000e9c:	d13a      	bne.n	90000f14 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x8c>
    return videoInfo.number_of_frames;
90000e9e:	6880      	ldr	r0, [r0, #8]
    if (frameNumber > getNumberOfFrames())
90000ea0:	42a8      	cmp	r0, r5
90000ea2:	d204      	bcs.n	90000eae <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
        frameNumber = getNumberOfFrames();
90000ea4:	6823      	ldr	r3, [r4, #0]
90000ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90000ea8:	42b3      	cmp	r3, r6
90000eaa:	d135      	bne.n	90000f18 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x90>
    return videoInfo.number_of_frames;
90000eac:	68a5      	ldr	r5, [r4, #8]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000eae:	1e6b      	subs	r3, r5, #1
90000eb0:	69e2      	ldr	r2, [r4, #28]
    if (reader != 0)
90000eb2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000eb4:	eb02 1703 	add.w	r7, r2, r3, lsl #4
    if (reader != 0)
90000eb8:	b338      	cbz	r0, 90000f0a <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        if (length > aviBufferLength)
90000eba:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000ebc:	2b0f      	cmp	r3, #15
90000ebe:	d92f      	bls.n	90000f20 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x98>
        reader->seek(offset);
90000ec0:	6803      	ldr	r3, [r0, #0]
    uint32_t offset = indexOffset + 8 + (frameNumber-1)*16;
90000ec2:	f107 0608 	add.w	r6, r7, #8
        reader->seek(offset);
90000ec6:	68db      	ldr	r3, [r3, #12]
90000ec8:	4631      	mov	r1, r6
90000eca:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000ecc:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000ece:	2210      	movs	r2, #16
90000ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000ed2:	6803      	ldr	r3, [r0, #0]
90000ed4:	691b      	ldr	r3, [r3, #16]
90000ed6:	4798      	blx	r3
90000ed8:	b198      	cbz	r0, 90000f02 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x7a>
    if (reader != 0)
90000eda:	6b23      	ldr	r3, [r4, #48]	; 0x30
        aviBufferStartOffset = offset;
90000edc:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000ede:	b1a3      	cbz	r3, 90000f0a <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x82>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000ee0:	6b62      	ldr	r2, [r4, #52]	; 0x34
90000ee2:	7a93      	ldrb	r3, [r2, #10]
90000ee4:	7a51      	ldrb	r1, [r2, #9]
90000ee6:	041b      	lsls	r3, r3, #16
90000ee8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
90000eec:	7a11      	ldrb	r1, [r2, #8]
90000eee:	7ad2      	ldrb	r2, [r2, #11]
90000ef0:	430b      	orrs	r3, r1
90000ef2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000ef6:	6a22      	ldr	r2, [r4, #32]
    this->frameNumber = frameNumber;
90000ef8:	6165      	str	r5, [r4, #20]
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000efa:	3a04      	subs	r2, #4
90000efc:	4413      	add	r3, r2
90000efe:	61a3      	str	r3, [r4, #24]
}
90000f00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90000f02:	230d      	movs	r3, #13
90000f04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
90000f08:	e7e7      	b.n	90000eda <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x52>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
90000f0a:	f107 0310 	add.w	r3, r7, #16
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90000f0e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90000f10:	58d3      	ldr	r3, [r2, r3]
90000f12:	e7f0      	b.n	90000ef6 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x6e>
    if (frameNumber > getNumberOfFrames())
90000f14:	4798      	blx	r3
90000f16:	e7c3      	b.n	90000ea0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x18>
        frameNumber = getNumberOfFrames();
90000f18:	4620      	mov	r0, r4
90000f1a:	4798      	blx	r3
90000f1c:	4605      	mov	r5, r0
90000f1e:	e7c6      	b.n	90000eae <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x26>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000f20:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90000f22:	4b05      	ldr	r3, [pc, #20]	; (90000f38 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb0>)
90000f24:	4a05      	ldr	r2, [pc, #20]	; (90000f3c <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb4>)
90000f26:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90000f28:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90000f2c:	4804      	ldr	r0, [pc, #16]	; (90000f40 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0xb8>)
90000f2e:	f026 f87d 	bl	9002702c <__assert_func>
90000f32:	bf00      	nop
90000f34:	90000c5d 	.word	0x90000c5d
90000f38:	90028588 	.word	0x90028588
90000f3c:	9002859c 	.word	0x9002859c
90000f40:	90028524 	.word	0x90028524

90000f44 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
90000f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90000f48:	4604      	mov	r4, r0
    if (reader != 0)
90000f4a:	6b00      	ldr	r0, [r0, #48]	; 0x30
{
90000f4c:	b083      	sub	sp, #12
90000f4e:	4615      	mov	r5, r2
    readData(currentMovieOffset, 8);
90000f50:	69a6      	ldr	r6, [r4, #24]
    if (reader != 0)
90000f52:	2800      	cmp	r0, #0
90000f54:	f000 80e3 	beq.w	9000111e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1da>
        if (length > aviBufferLength)
90000f58:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90000f5a:	2b07      	cmp	r3, #7
90000f5c:	f240 80e6 	bls.w	9000112c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000f60:	6803      	ldr	r3, [r0, #0]
90000f62:	4631      	mov	r1, r6
90000f64:	68db      	ldr	r3, [r3, #12]
90000f66:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000f68:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000f6a:	2208      	movs	r2, #8
90000f6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000f6e:	6803      	ldr	r3, [r0, #0]
90000f70:	691b      	ldr	r3, [r3, #16]
90000f72:	4798      	blx	r3
90000f74:	2800      	cmp	r0, #0
90000f76:	f000 80ce 	beq.w	90001116 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1d2>
    const uint32_t length = getU32(currentMovieOffset + 4);
90000f7a:	69a7      	ldr	r7, [r4, #24]
    if (reader != 0)
90000f7c:	6b20      	ldr	r0, [r4, #48]	; 0x30
    const uint32_t length = getU32(currentMovieOffset + 4);
90000f7e:	1d3b      	adds	r3, r7, #4
        aviBufferStartOffset = offset;
90000f80:	63e6      	str	r6, [r4, #60]	; 0x3c
    if (reader != 0)
90000f82:	2800      	cmp	r0, #0
90000f84:	f000 80db 	beq.w	9000113e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1fa>
        const uint32_t index = offset - aviBufferStartOffset;
90000f88:	1b9e      	subs	r6, r3, r6
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90000f8a:	3708      	adds	r7, #8
        if (length > aviBufferLength)
90000f8c:	e9d4 230d 	ldrd	r2, r3, [r4, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90000f90:	1991      	adds	r1, r2, r6
90000f92:	5d92      	ldrb	r2, [r2, r6]
90000f94:	788e      	ldrb	r6, [r1, #2]
90000f96:	f891 c001 	ldrb.w	ip, [r1, #1]
90000f9a:	0436      	lsls	r6, r6, #16
90000f9c:	ea46 260c 	orr.w	r6, r6, ip, lsl #8
90000fa0:	4316      	orrs	r6, r2
90000fa2:	78ca      	ldrb	r2, [r1, #3]
90000fa4:	ea46 6602 	orr.w	r6, r6, r2, lsl #24
        if (length > aviBufferLength)
90000fa8:	42b3      	cmp	r3, r6
90000faa:	f0c0 80bf 	bcc.w	9000112c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1e8>
        reader->seek(offset);
90000fae:	6803      	ldr	r3, [r0, #0]
90000fb0:	4639      	mov	r1, r7
90000fb2:	68db      	ldr	r3, [r3, #12]
90000fb4:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90000fb6:	6b20      	ldr	r0, [r4, #48]	; 0x30
90000fb8:	4632      	mov	r2, r6
90000fba:	6b61      	ldr	r1, [r4, #52]	; 0x34
90000fbc:	6803      	ldr	r3, [r0, #0]
90000fbe:	691b      	ldr	r3, [r3, #16]
90000fc0:	4798      	blx	r3
90000fc2:	b910      	cbnz	r0, 90000fca <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90000fc4:	230d      	movs	r3, #13
90000fc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90000fca:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90000fcc:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (frameBuffer) //only decode if buffers are assigned.
90000fce:	2d00      	cmp	r5, #0
90000fd0:	d052      	beq.n	90001078 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fd2:	4a5c      	ldr	r2, [pc, #368]	; (90001144 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
    FrameBufferAddress = output;
90000fd4:	4b5c      	ldr	r3, [pc, #368]	; (90001148 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x204>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fd6:	68d2      	ldr	r2, [r2, #12]
    FrameBufferAddress = output;
90000fd8:	601d      	str	r5, [r3, #0]
    Output_Is_Paused = 0;
90000fda:	2300      	movs	r3, #0
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fdc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000fe0:	4d5a      	ldr	r5, [pc, #360]	; (9000114c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x208>)
    Output_Is_Paused = 0;
90000fe2:	4f5b      	ldr	r7, [pc, #364]	; (90001150 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x20c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000fe4:	01d2      	lsls	r2, r2, #7
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000fe6:	702b      	strb	r3, [r5, #0]
    Output_Is_Paused = 0;
90000fe8:	603b      	str	r3, [r7, #0]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000fea:	60ab      	str	r3, [r5, #8]
      Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
90000fec:	732b      	strb	r3, [r5, #12]
      Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
90000fee:	616b      	str	r3, [r5, #20]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90000ff0:	9200      	str	r2, [sp, #0]
    JPEG_OUT_Write_BufferIndex = 0;
90000ff2:	4a58      	ldr	r2, [pc, #352]	; (90001154 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
    JPEG_OUT_Read_BufferIndex = 0;
90000ff4:	f8df 8188 	ldr.w	r8, [pc, #392]	; 90001180 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x23c>
    JPEG_OUT_Write_BufferIndex = 0;
90000ff8:	6013      	str	r3, [r2, #0]
    JPEG_InputImageIndex = 0;
90000ffa:	4a57      	ldr	r2, [pc, #348]	; (90001158 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x214>)
    DMA2D_output_Is_Paused = 1;
90000ffc:	f8df a184 	ldr.w	sl, [pc, #388]	; 90001184 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x240>
    JPEG_InputImageIndex = 0;
90001000:	6013      	str	r3, [r2, #0]
    JPEG_InputImageAddress = (uint32_t)input;
90001002:	4a56      	ldr	r2, [pc, #344]	; (9000115c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x218>)
    JPEG_OUT_Read_BufferIndex = 0;
90001004:	f8c8 3000 	str.w	r3, [r8]
    JPEG_InputImageAddress = (uint32_t)input;
90001008:	6011      	str	r1, [r2, #0]
    JPEG_InputImageSize_Bytes = chunkSizeIn;
9000100a:	4a55      	ldr	r2, [pc, #340]	; (90001160 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x21c>)
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000100c:	4855      	ldr	r0, [pc, #340]	; (90001164 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
    JPEG_InputImageSize_Bytes = chunkSizeIn;
9000100e:	6016      	str	r6, [r2, #0]
    MCU_BlockIndex = 0;
90001010:	4a55      	ldr	r2, [pc, #340]	; (90001168 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
90001012:	f8df 9174 	ldr.w	r9, [pc, #372]	; 90001188 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x244>
90001016:	6013      	str	r3, [r2, #0]
    DMA2D_output_Is_Paused = 1;
90001018:	2301      	movs	r3, #1
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
9000101a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
9000101e:	4e53      	ldr	r6, [pc, #332]	; (9000116c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x228>)
    DMA2D_output_Is_Paused = 1;
90001020:	f8ca 3000 	str.w	r3, [sl]
    HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001024:	686b      	ldr	r3, [r5, #4]
      buffer_[tail_] = job;
90001026:	f8df b164 	ldr.w	fp, [pc, #356]	; 9000118c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x248>
9000102a:	f00a fc9d 	bl	9000b968 <HAL_JPEG_Decode_DMA>
    return 0;
9000102e:	e007      	b.n	90001040 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90001030:	f8da 2000 	ldr.w	r2, [sl]
      return 2;
90001034:	2a00      	cmp	r2, #0
90001036:	bf08      	it	eq
90001038:	2302      	moveq	r3, #2
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
9000103a:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
9000103c:	6833      	ldr	r3, [r6, #0]
9000103e:	b9db      	cbnz	r3, 90001078 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x134>
  if(Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd) // decode completed
90001040:	f8d9 3000 	ldr.w	r3, [r9]
90001044:	b11b      	cbz	r3, 9000104e <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x10a>
90001046:	4b4a      	ldr	r3, [pc, #296]	; (90001170 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x22c>)
90001048:	681b      	ldr	r3, [r3, #0]
9000104a:	2b00      	cmp	r3, #0
9000104c:	d161      	bne.n	90001112 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1ce>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
9000104e:	f8d8 3000 	ldr.w	r3, [r8]
90001052:	eb03 0243 	add.w	r2, r3, r3, lsl #1
90001056:	f815 1022 	ldrb.w	r1, [r5, r2, lsl #2]
9000105a:	eb05 0282 	add.w	r2, r5, r2, lsl #2
9000105e:	2901      	cmp	r1, #1
90001060:	d024      	beq.n	900010ac <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x168>
  if((Output_Is_Paused == 1) && \
90001062:	683b      	ldr	r3, [r7, #0]
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90001064:	2b01      	cmp	r3, #1
90001066:	d00b      	beq.n	90001080 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x13c>
  if ((Output_Is_Paused == 0) && (DMA2D_output_Is_Paused == 0))
90001068:	683b      	ldr	r3, [r7, #0]
9000106a:	2b00      	cmp	r3, #0
9000106c:	d0e0      	beq.n	90001030 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xec>
  return 0;
9000106e:	2300      	movs	r3, #0
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90001070:	6033      	str	r3, [r6, #0]
      while(JpegProcessing_End == 0);
90001072:	6833      	ldr	r3, [r6, #0]
90001074:	2b00      	cmp	r3, #0
90001076:	d0e3      	beq.n	90001040 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xfc>
}
90001078:	2001      	movs	r0, #1
9000107a:	b003      	add	sp, #12
9000107c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90001080:	4b34      	ldr	r3, [pc, #208]	; (90001154 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x210>)
90001082:	681b      	ldr	r3, [r3, #0]
90001084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
  if((Output_Is_Paused == 1) && \
90001088:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
9000108c:	2b00      	cmp	r3, #0
9000108e:	d1eb      	bne.n	90001068 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
          (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_EMPTY))
90001090:	f8d8 3000 	ldr.w	r3, [r8]
90001094:	eb03 0343 	add.w	r3, r3, r3, lsl #1
          (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) &&\
90001098:	f815 3023 	ldrb.w	r3, [r5, r3, lsl #2]
9000109c:	2b00      	cmp	r3, #0
9000109e:	d1e3      	bne.n	90001068 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
900010a0:	2102      	movs	r1, #2
900010a2:	4830      	ldr	r0, [pc, #192]	; (90001164 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x220>)
      Output_Is_Paused = 0;
900010a4:	603b      	str	r3, [r7, #0]
      HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
900010a6:	f00a fda9 	bl	9000bbfc <HAL_JPEG_Resume>
900010aa:	e7dd      	b.n	90001068 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x124>
  if((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_output_Is_Paused == 1))
900010ac:	f8da 1000 	ldr.w	r1, [sl]
900010b0:	2901      	cmp	r1, #1
900010b2:	d1d6      	bne.n	90001062 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
900010b4:	f8db 1008 	ldr.w	r1, [fp, #8]
      JPEG_OUT_Read_BufferIndex++;
900010b8:	3301      	adds	r3, #1
      };
900010ba:	482b      	ldr	r0, [pc, #172]	; (90001168 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
      tail_ = (tail_ + 1) % max_size_;
900010bc:	f8db c000 	ldr.w	ip, [fp]
      if(JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
900010c0:	2b01      	cmp	r3, #1
      };
900010c2:	f8d0 e000 	ldr.w	lr, [r0]
900010c6:	f101 0001 	add.w	r0, r1, #1
      buffer_[tail_] = job;
900010ca:	f101 0102 	add.w	r1, r1, #2
        JPEG_OUT_Read_BufferIndex = 0;
900010ce:	bf88      	it	hi
900010d0:	2300      	movhi	r3, #0
900010d2:	f84b e031 	str.w	lr, [fp, r1, lsl #3]
900010d6:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
900010da:	f8c8 3000 	str.w	r3, [r8]
      DMA2D_output_Is_Paused = 0;
900010de:	2300      	movs	r3, #0
900010e0:	604a      	str	r2, [r1, #4]
      count_++;
900010e2:	f8db 100c 	ldr.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
900010e6:	fbb0 f2fc 	udiv	r2, r0, ip
      count_++;
900010ea:	3101      	adds	r1, #1
      tail_ = (tail_ + 1) % max_size_;
900010ec:	fb0c 0012 	mls	r0, ip, r2, r0
      count_++;
900010f0:	f8cb 100c 	str.w	r1, [fp, #12]
      tail_ = (tail_ + 1) % max_size_;
900010f4:	f8cb 0008 	str.w	r0, [fp, #8]
      MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
900010f8:	4912      	ldr	r1, [pc, #72]	; (90001144 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x200>)
900010fa:	481b      	ldr	r0, [pc, #108]	; (90001168 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x224>)
900010fc:	68c9      	ldr	r1, [r1, #12]
900010fe:	6802      	ldr	r2, [r0, #0]
90001100:	440a      	add	r2, r1
90001102:	6002      	str	r2, [r0, #0]
        JpegProcessing_End = JPEG_OutputHandler(&hjpeg, *pDma);
90001104:	6c60      	ldr	r0, [r4, #68]	; 0x44
      DMA2D_output_Is_Paused = 0;
90001106:	f8ca 3000 	str.w	r3, [sl]
      dma.start();
9000110a:	6803      	ldr	r3, [r0, #0]
9000110c:	691b      	ldr	r3, [r3, #16]
9000110e:	4798      	blx	r3
90001110:	e7a7      	b.n	90001062 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x11e>
      return 1;
90001112:	2301      	movs	r3, #1
90001114:	e791      	b.n	9000103a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0xf6>
            lastError = AVI_ERROR_EOF_REACHED;
90001116:	230d      	movs	r3, #13
90001118:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000111c:	e72d      	b.n	90000f7a <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x36>
    const uint32_t length = getU32(currentMovieOffset + 4);
9000111e:	1d33      	adds	r3, r6, #4
    if (reader != 0)
90001120:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
90001122:	f106 0208 	add.w	r2, r6, #8
90001126:	58ce      	ldr	r6, [r1, r3]
    return movieData + offset;
90001128:	4411      	add	r1, r2
9000112a:	e750      	b.n	90000fce <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x8a>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000112c:	2009      	movs	r0, #9
            assert(!"Buffer to small");
9000112e:	4b11      	ldr	r3, [pc, #68]	; (90001174 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x230>)
90001130:	4a11      	ldr	r2, [pc, #68]	; (90001178 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x234>)
90001132:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001134:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
90001138:	4810      	ldr	r0, [pc, #64]	; (9000117c <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x238>)
9000113a:	f025 ff77 	bl	9002702c <__assert_func>
    const uint32_t length = getU32(currentMovieOffset + 4);
9000113e:	463e      	mov	r6, r7
90001140:	e7ee      	b.n	90001120 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x1dc>
90001142:	bf00      	nop
90001144:	24005ba8 	.word	0x24005ba8
90001148:	24005b7c 	.word	0x24005b7c
9000114c:	24000004 	.word	0x24000004
90001150:	24005ba4 	.word	0x24005ba4
90001154:	24005b90 	.word	0x24005b90
90001158:	24005b84 	.word	0x24005b84
9000115c:	24005b80 	.word	0x24005b80
90001160:	24005b88 	.word	0x24005b88
90001164:	2400bb54 	.word	0x2400bb54
90001168:	24005b9c 	.word	0x24005b9c
9000116c:	24005b94 	.word	0x24005b94
90001170:	24005b74 	.word	0x24005b74
90001174:	90028588 	.word	0x90028588
90001178:	9002859c 	.word	0x9002859c
9000117c:	90028524 	.word	0x90028524
90001180:	24005b8c 	.word	0x24005b8c
90001184:	24005b78 	.word	0x24005b78
90001188:	24005b98 	.word	0x24005b98
9000118c:	24005bbc 	.word	0x24005bbc

90001190 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001190:	6943      	ldr	r3, [r0, #20]
{
90001192:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001196:	2b00      	cmp	r3, #0
90001198:	f000 8098 	beq.w	900012cc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x13c>
    readData(currentMovieOffset, 8);
9000119c:	4605      	mov	r5, r0
    if (reader != 0)
9000119e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    readData(currentMovieOffset, 8);
900011a0:	69ac      	ldr	r4, [r5, #24]
    if (reader != 0)
900011a2:	2800      	cmp	r0, #0
900011a4:	f000 8082 	beq.w	900012ac <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x11c>
        if (length > aviBufferLength)
900011a8:	6bab      	ldr	r3, [r5, #56]	; 0x38
900011aa:	2b07      	cmp	r3, #7
900011ac:	f240 8083 	bls.w	900012b6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
900011b0:	6803      	ldr	r3, [r0, #0]
900011b2:	4621      	mov	r1, r4
900011b4:	68db      	ldr	r3, [r3, #12]
900011b6:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900011b8:	6b28      	ldr	r0, [r5, #48]	; 0x30
900011ba:	2208      	movs	r2, #8
900011bc:	6b69      	ldr	r1, [r5, #52]	; 0x34
900011be:	6803      	ldr	r3, [r0, #0]
900011c0:	691b      	ldr	r3, [r3, #16]
900011c2:	4798      	blx	r3
900011c4:	2800      	cmp	r0, #0
900011c6:	d06d      	beq.n	900012a4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x114>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900011c8:	69aa      	ldr	r2, [r5, #24]
    if (reader != 0)
900011ca:	6b28      	ldr	r0, [r5, #48]	; 0x30
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900011cc:	1d13      	adds	r3, r2, #4
        aviBufferStartOffset = offset;
900011ce:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
900011d0:	2800      	cmp	r0, #0
900011d2:	d06d      	beq.n	900012b0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x120>
        const uint32_t index = offset - aviBufferStartOffset;
900011d4:	1b1b      	subs	r3, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900011d6:	6b6c      	ldr	r4, [r5, #52]	; 0x34
900011d8:	18e1      	adds	r1, r4, r3
900011da:	5ce4      	ldrb	r4, [r4, r3]
900011dc:	788b      	ldrb	r3, [r1, #2]
900011de:	784e      	ldrb	r6, [r1, #1]
900011e0:	041b      	lsls	r3, r3, #16
900011e2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
900011e6:	4323      	orrs	r3, r4
900011e8:	78cc      	ldrb	r4, [r1, #3]
900011ea:	ea43 6404 	orr.w	r4, r3, r4, lsl #24
            lastError = AVI_ERROR_EOF_REACHED;
900011ee:	270d      	movs	r7, #13
        if (streamNo == STREAM0 && chunkType == TYPEDC)
900011f0:	f243 0630 	movw	r6, #12336	; 0x3030
900011f4:	e039      	b.n	9000126a <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xda>
        if (length > aviBufferLength)
900011f6:	6bab      	ldr	r3, [r5, #56]	; 0x38
900011f8:	2b07      	cmp	r3, #7
900011fa:	d95c      	bls.n	900012b6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x126>
        reader->seek(offset);
900011fc:	6803      	ldr	r3, [r0, #0]
900011fe:	4621      	mov	r1, r4
90001200:	68db      	ldr	r3, [r3, #12]
90001202:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001204:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001206:	2208      	movs	r2, #8
90001208:	6b69      	ldr	r1, [r5, #52]	; 0x34
9000120a:	6803      	ldr	r3, [r0, #0]
9000120c:	691b      	ldr	r3, [r3, #16]
9000120e:	4798      	blx	r3
90001210:	b908      	cbnz	r0, 90001216 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x86>
            lastError = AVI_ERROR_EOF_REACHED;
90001212:	f885 7040 	strb.w	r7, [r5, #64]	; 0x40
    if (reader != 0)
90001216:	6b28      	ldr	r0, [r5, #48]	; 0x30
        uint32_t streamNo  = getU16(currentMovieOffset);
90001218:	69ab      	ldr	r3, [r5, #24]
        aviBufferStartOffset = offset;
9000121a:	63ec      	str	r4, [r5, #60]	; 0x3c
    if (reader != 0)
9000121c:	2800      	cmp	r0, #0
9000121e:	d053      	beq.n	900012c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x138>
        const uint32_t index = offset - aviBufferStartOffset;
90001220:	1b1c      	subs	r4, r3, r4
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001222:	6b6a      	ldr	r2, [r5, #52]	; 0x34
90001224:	1913      	adds	r3, r2, r4
90001226:	5d11      	ldrb	r1, [r2, r4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001228:	799c      	ldrb	r4, [r3, #6]
9000122a:	f893 a005 	ldrb.w	sl, [r3, #5]
9000122e:	0424      	lsls	r4, r4, #16
90001230:	f893 e004 	ldrb.w	lr, [r3, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001234:	f893 9001 	ldrb.w	r9, [r3, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001238:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
9000123c:	f893 c007 	ldrb.w	ip, [r3, #7]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001240:	f893 8003 	ldrb.w	r8, [r3, #3]
90001244:	ea41 2109 	orr.w	r1, r1, r9, lsl #8
90001248:	789a      	ldrb	r2, [r3, #2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000124a:	ea44 040e 	orr.w	r4, r4, lr
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
9000124e:	ea42 2308 	orr.w	r3, r2, r8, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001252:	ea44 640c 	orr.w	r4, r4, ip, lsl #24
        if (streamNo == STREAM0 && chunkType == TYPEDC)
90001256:	f246 3264 	movw	r2, #25444	; 0x6364
9000125a:	42b1      	cmp	r1, r6
9000125c:	bf08      	it	eq
9000125e:	4293      	cmpeq	r3, r2
90001260:	bf0c      	ite	eq
90001262:	2301      	moveq	r3, #1
90001264:	2300      	movne	r3, #0
90001266:	d01a      	beq.n	9000129e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x10e>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
90001268:	69aa      	ldr	r2, [r5, #24]
9000126a:	4414      	add	r4, r2
9000126c:	6aab      	ldr	r3, [r5, #40]	; 0x28
9000126e:	f104 0208 	add.w	r2, r4, #8
90001272:	429a      	cmp	r2, r3
90001274:	d20e      	bcs.n	90001294 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x104>
        frameNumber++;
90001276:	696b      	ldr	r3, [r5, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001278:	3409      	adds	r4, #9
        frameNumber++;
9000127a:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
9000127c:	f024 0401 	bic.w	r4, r4, #1
90001280:	e9c5 3405 	strd	r3, r4, [r5, #20]
    if (reader != 0)
90001284:	2800      	cmp	r0, #0
90001286:	d1b6      	bne.n	900011f6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x66>
        const uint8_t* const d = movieData + offset;
90001288:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        return d[0] | (d[1] << 8);
9000128a:	191a      	adds	r2, r3, r4
9000128c:	5b19      	ldrh	r1, [r3, r4]
9000128e:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001290:	6854      	ldr	r4, [r2, #4]
90001292:	e7e0      	b.n	90001256 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xc6>
    frameNumber = 1;
90001294:	2101      	movs	r1, #1
    currentMovieOffset = firstFrameOffset; //start over
90001296:	6a2a      	ldr	r2, [r5, #32]
    return false;
90001298:	2300      	movs	r3, #0
    currentMovieOffset = firstFrameOffset; //start over
9000129a:	e9c5 1205 	strd	r1, r2, [r5, #20]
}
9000129e:	4618      	mov	r0, r3
900012a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900012a4:	230d      	movs	r3, #13
900012a6:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900012aa:	e78d      	b.n	900011c8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x38>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
900012ac:	1d23      	adds	r3, r4, #4
900012ae:	4622      	mov	r2, r4
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900012b0:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
900012b2:	58cc      	ldr	r4, [r1, r3]
900012b4:	e79b      	b.n	900011ee <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x5e>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900012b6:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900012b8:	4b07      	ldr	r3, [pc, #28]	; (900012d8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x148>)
900012ba:	4a08      	ldr	r2, [pc, #32]	; (900012dc <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x14c>)
900012bc:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900012be:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
900012c2:	4807      	ldr	r0, [pc, #28]	; (900012e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
900012c4:	f025 feb2 	bl	9002702c <__assert_func>
        uint32_t streamNo  = getU16(currentMovieOffset);
900012c8:	461c      	mov	r4, r3
900012ca:	e7dd      	b.n	90001288 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0xf8>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900012cc:	4b05      	ldr	r3, [pc, #20]	; (900012e4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x154>)
900012ce:	21ec      	movs	r1, #236	; 0xec
900012d0:	4a05      	ldr	r2, [pc, #20]	; (900012e8 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x158>)
900012d2:	4803      	ldr	r0, [pc, #12]	; (900012e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x150>)
900012d4:	f025 feaa 	bl	9002702c <__assert_func>
900012d8:	90028588 	.word	0x90028588
900012dc:	9002859c 	.word	0x9002859c
900012e0:	90028524 	.word	0x90028524
900012e4:	900285e0 	.word	0x900285e0
900012e8:	9002862c 	.word	0x9002862c

900012ec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900012ec:	6943      	ldr	r3, [r0, #20]
{
900012ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
900012f2:	2b00      	cmp	r3, #0
900012f4:	f000 8097 	beq.w	90001426 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x13a>
    readData(currentMovieOffset, 8);
900012f8:	4604      	mov	r4, r0
    if (reader != 0)
900012fa:	6b00      	ldr	r0, [r0, #48]	; 0x30
900012fc:	460e      	mov	r6, r1
    readData(currentMovieOffset, 8);
900012fe:	69a5      	ldr	r5, [r4, #24]
    if (reader != 0)
90001300:	2800      	cmp	r0, #0
90001302:	d05d      	beq.n	900013c0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd4>
        if (length > aviBufferLength)
90001304:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90001306:	2b07      	cmp	r3, #7
90001308:	f240 8093 	bls.w	90001432 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
9000130c:	6803      	ldr	r3, [r0, #0]
9000130e:	4629      	mov	r1, r5
90001310:	68db      	ldr	r3, [r3, #12]
90001312:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
90001314:	6b20      	ldr	r0, [r4, #48]	; 0x30
90001316:	2208      	movs	r2, #8
90001318:	6b61      	ldr	r1, [r4, #52]	; 0x34
9000131a:	6803      	ldr	r3, [r0, #0]
9000131c:	691b      	ldr	r3, [r3, #16]
9000131e:	4798      	blx	r3
90001320:	2800      	cmp	r0, #0
90001322:	d048      	beq.n	900013b6 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xca>
    if (reader != 0)
90001324:	6b20      	ldr	r0, [r4, #48]	; 0x30
    uint32_t streamNo  = getU16(currentMovieOffset);
90001326:	69a1      	ldr	r1, [r4, #24]
        aviBufferStartOffset = offset;
90001328:	63e5      	str	r5, [r4, #60]	; 0x3c
    if (reader != 0)
9000132a:	2800      	cmp	r0, #0
9000132c:	d047      	beq.n	900013be <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xd2>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
9000132e:	1d0a      	adds	r2, r1, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
90001330:	f101 0c02 	add.w	ip, r1, #2
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001334:	6b63      	ldr	r3, [r4, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
90001336:	1b52      	subs	r2, r2, r5
        const uint32_t index = offset - aviBufferStartOffset;
90001338:	ebac 0c05 	sub.w	ip, ip, r5
9000133c:	1b4d      	subs	r5, r1, r5
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000133e:	189f      	adds	r7, r3, r2
90001340:	5c9a      	ldrb	r2, [r3, r2]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001342:	eb03 0805 	add.w	r8, r3, r5
90001346:	f813 e005 	ldrb.w	lr, [r3, r5]
9000134a:	f898 5001 	ldrb.w	r5, [r8, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
9000134e:	f897 8001 	ldrb.w	r8, [r7, #1]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001352:	ea4e 2e05 	orr.w	lr, lr, r5, lsl #8
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001356:	78bd      	ldrb	r5, [r7, #2]
90001358:	042d      	lsls	r5, r5, #16
9000135a:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
9000135e:	4315      	orrs	r5, r2
90001360:	78fa      	ldrb	r2, [r7, #3]
90001362:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8);
90001366:	eb03 020c 	add.w	r2, r3, ip
9000136a:	f813 300c 	ldrb.w	r3, [r3, ip]
9000136e:	7852      	ldrb	r2, [r2, #1]
90001370:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
90001374:	194a      	adds	r2, r1, r5
90001376:	6aa7      	ldr	r7, [r4, #40]	; 0x28
90001378:	f102 0c08 	add.w	ip, r2, #8
9000137c:	45bc      	cmp	ip, r7
9000137e:	d213      	bcs.n	900013a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
90001380:	f243 0730 	movw	r7, #12336	; 0x3030
90001384:	45be      	cmp	lr, r7
90001386:	d124      	bne.n	900013d2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
90001388:	f246 3764 	movw	r7, #25444	; 0x6364
9000138c:	42bb      	cmp	r3, r7
9000138e:	d120      	bne.n	900013d2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xe6>
90001390:	bb1d      	cbnz	r5, 900013da <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xee>
          currentMovieOffset += 8;
90001392:	4662      	mov	r2, ip
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001394:	3201      	adds	r2, #1
        if (currentMovieOffset == lastFrameEnd)
90001396:	6a63      	ldr	r3, [r4, #36]	; 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
90001398:	f022 0201 	bic.w	r2, r2, #1
        if (currentMovieOffset == lastFrameEnd)
9000139c:	429a      	cmp	r2, r3
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; //pad to next word
9000139e:	61a2      	str	r2, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
900013a0:	d002      	beq.n	900013a8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>
900013a2:	2001      	movs	r0, #1
}
900013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        frameNumber = 1;
900013a8:	2201      	movs	r2, #1
        currentMovieOffset = firstFrameOffset; //start over
900013aa:	6a23      	ldr	r3, [r4, #32]
900013ac:	2000      	movs	r0, #0
900013ae:	e9c4 2305 	strd	r2, r3, [r4, #20]
}
900013b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            lastError = AVI_ERROR_EOF_REACHED;
900013b6:	230d      	movs	r3, #13
900013b8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
900013bc:	e7b2      	b.n	90001324 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x38>
    uint32_t streamNo  = getU16(currentMovieOffset);
900013be:	460d      	mov	r5, r1
        const uint8_t* const d = movieData + offset;
900013c0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        const uint8_t* const d = movieData + offset;
900013c2:	4629      	mov	r1, r5
900013c4:	2000      	movs	r0, #0
        return d[0] | (d[1] << 8);
900013c6:	f832 e005 	ldrh.w	lr, [r2, r5]
900013ca:	442a      	add	r2, r5
900013cc:	8853      	ldrh	r3, [r2, #2]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900013ce:	6855      	ldr	r5, [r2, #4]
900013d0:	e7d0      	b.n	90001374 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x88>
        currentMovieOffset += chunkSize;
900013d2:	61a2      	str	r2, [r4, #24]
        if (chunkSize == 0) // Empty frame - Skip
900013d4:	2d00      	cmp	r5, #0
900013d6:	d1dd      	bne.n	90001394 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
900013d8:	e7db      	b.n	90001392 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa6>
            currentMovieOffset += 8;
900013da:	f101 0708 	add.w	r7, r1, #8
900013de:	61a7      	str	r7, [r4, #24]
    if (reader != 0)
900013e0:	b1f0      	cbz	r0, 90001420 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x134>
        if (length > aviBufferLength)
900013e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900013e4:	429d      	cmp	r5, r3
900013e6:	d824      	bhi.n	90001432 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x146>
        reader->seek(offset);
900013e8:	6803      	ldr	r3, [r0, #0]
900013ea:	4639      	mov	r1, r7
900013ec:	68db      	ldr	r3, [r3, #12]
900013ee:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900013f0:	6b20      	ldr	r0, [r4, #48]	; 0x30
900013f2:	462a      	mov	r2, r5
900013f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
900013f6:	6803      	ldr	r3, [r0, #0]
900013f8:	691b      	ldr	r3, [r3, #16]
900013fa:	4798      	blx	r3
900013fc:	b910      	cbnz	r0, 90001404 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x118>
            lastError = AVI_ERROR_EOF_REACHED;
900013fe:	230d      	movs	r3, #13
90001400:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return aviBuffer;
90001404:	6b61      	ldr	r1, [r4, #52]	; 0x34
        aviBufferStartOffset = offset;
90001406:	63e7      	str	r7, [r4, #60]	; 0x3c
    if (outputBuffer) //only decode if buffers are assigned.
90001408:	b126      	cbz	r6, 90001414 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x128>
9000140a:	4633      	mov	r3, r6
9000140c:	462a      	mov	r2, r5
9000140e:	4620      	mov	r0, r4
90001410:	f7ff fc46 	bl	90000ca0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm.part.0>
        currentMovieOffset += chunkSize;
90001414:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
            frameNumber++;
90001418:	3301      	adds	r3, #1
        currentMovieOffset += chunkSize;
9000141a:	442a      	add	r2, r5
            frameNumber++;
9000141c:	6163      	str	r3, [r4, #20]
        if (chunkSize == 0) // Empty frame - Skip
9000141e:	e7b9      	b.n	90001394 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa8>
    return movieData + offset;
90001420:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90001422:	4439      	add	r1, r7
90001424:	e7f0      	b.n	90001408 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x11c>
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
90001426:	4b07      	ldr	r3, [pc, #28]	; (90001444 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x158>)
90001428:	21b8      	movs	r1, #184	; 0xb8
9000142a:	4a07      	ldr	r2, [pc, #28]	; (90001448 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x15c>)
9000142c:	4807      	ldr	r0, [pc, #28]	; (9000144c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
9000142e:	f025 fdfd 	bl	9002702c <__assert_func>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
90001432:	2009      	movs	r0, #9
            assert(!"Buffer to small");
90001434:	4b06      	ldr	r3, [pc, #24]	; (90001450 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x164>)
90001436:	4a07      	ldr	r2, [pc, #28]	; (90001454 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x168>)
90001438:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
9000143a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
            assert(!"Buffer to small");
9000143e:	4803      	ldr	r0, [pc, #12]	; (9000144c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x160>)
90001440:	f025 fdf4 	bl	9002702c <__assert_func>
90001444:	900285e0 	.word	0x900285e0
90001448:	90028660 	.word	0x90028660
9000144c:	90028524 	.word	0x90028524
90001450:	90028588 	.word	0x90028588
90001454:	9002859c 	.word	0x9002859c

90001458 <_ZN20HardwareMJPEGDecoderC1Ev>:
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
90001458:	b538      	push	{r3, r4, r5, lr}
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
9000145a:	2500      	movs	r5, #0
9000145c:	4b0f      	ldr	r3, [pc, #60]	; (9000149c <_ZN20HardwareMJPEGDecoderC1Ev+0x44>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
9000145e:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
90001460:	6003      	str	r3, [r0, #0]
90001462:	63c5      	str	r5, [r0, #60]	; 0x3c
90001464:	f880 5040 	strb.w	r5, [r0, #64]	; 0x40
90001468:	e9c0 5505 	strd	r5, r5, [r0, #20]
9000146c:	e9c0 5507 	strd	r5, r5, [r0, #28]
90001470:	e9c0 5509 	strd	r5, r5, [r0, #36]	; 0x24
90001474:	e9c0 550b 	strd	r5, r5, [r0, #44]	; 0x2c
90001478:	e9c0 550d 	strd	r5, r5, [r0, #52]	; 0x34
    videoInfo.frame_width = 0;
9000147c:	e9c0 5503 	strd	r5, r5, [r0, #12]
    videoInfo.number_of_frames = 0;
90001480:	e9c0 5501 	strd	r5, r5, [r0, #4]
    TGFX_JPEG_InitColorTables();
90001484:	f002 fa3c 	bl	90003900 <TGFX_JPEG_InitColorTables>
    semDecodingDone = SEM_CREATE();
90001488:	462a      	mov	r2, r5
9000148a:	4629      	mov	r1, r5
9000148c:	2001      	movs	r0, #1
9000148e:	f00f fbc5 	bl	90010c1c <osSemaphoreNew>
90001492:	4b03      	ldr	r3, [pc, #12]	; (900014a0 <_ZN20HardwareMJPEGDecoderC1Ev+0x48>)
90001494:	4602      	mov	r2, r0
}
90001496:	4620      	mov	r0, r4
    semDecodingDone = SEM_CREATE();
90001498:	601a      	str	r2, [r3, #0]
}
9000149a:	bd38      	pop	{r3, r4, r5, pc}
9000149c:	900287e0 	.word	0x900287e0
900014a0:	24005be0 	.word	0x24005be0

900014a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
{
900014a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    currentMovieOffset = 0;
900014a8:	2100      	movs	r1, #0
    if (reader != 0)
900014aa:	6b06      	ldr	r6, [r0, #48]	; 0x30
{
900014ac:	b083      	sub	sp, #12
900014ae:	4605      	mov	r5, r0
    currentMovieOffset = 0;
900014b0:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
900014b2:	f880 1040 	strb.w	r1, [r0, #64]	; 0x40
    if (reader != 0)
900014b6:	2e00      	cmp	r6, #0
900014b8:	f000 81ba 	beq.w	90001830 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38c>
        if (length > aviBufferLength)
900014bc:	6b83      	ldr	r3, [r0, #56]	; 0x38
900014be:	2b47      	cmp	r3, #71	; 0x47
900014c0:	f240 8212 	bls.w	900018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900014c4:	6833      	ldr	r3, [r6, #0]
900014c6:	4630      	mov	r0, r6
900014c8:	68db      	ldr	r3, [r3, #12]
900014ca:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900014cc:	6b28      	ldr	r0, [r5, #48]	; 0x30
900014ce:	2248      	movs	r2, #72	; 0x48
900014d0:	6b69      	ldr	r1, [r5, #52]	; 0x34
900014d2:	6803      	ldr	r3, [r0, #0]
900014d4:	691b      	ldr	r3, [r3, #16]
900014d6:	4798      	blx	r3
900014d8:	2800      	cmp	r0, #0
900014da:	f000 80bd 	beq.w	90001658 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>
        aviBufferStartOffset = offset;
900014de:	2300      	movs	r3, #0
    if (reader != 0)
900014e0:	6b2e      	ldr	r6, [r5, #48]	; 0x30
    if (compare(currentMovieOffset, "RIFF", 4))
900014e2:	69af      	ldr	r7, [r5, #24]
    if (reader != 0)
900014e4:	46b1      	mov	r9, r6
        aviBufferStartOffset = offset;
900014e6:	63eb      	str	r3, [r5, #60]	; 0x3c
    if (reader != 0)
900014e8:	2e00      	cmp	r6, #0
900014ea:	f000 81a2 	beq.w	90001832 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38e>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900014ee:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
    return strncmp(src, str, num);
900014f2:	2204      	movs	r2, #4
900014f4:	49c6      	ldr	r1, [pc, #792]	; (90001810 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x36c>)
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900014f6:	eb08 0b07 	add.w	fp, r8, r7
    return strncmp(src, str, num);
900014fa:	4658      	mov	r0, fp
900014fc:	f026 fa50 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001500:	2800      	cmp	r0, #0
90001502:	f040 8201 	bne.w	90001908 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001506:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000150a:	2204      	movs	r2, #4
9000150c:	49c1      	ldr	r1, [pc, #772]	; (90001814 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x370>)
    currentMovieOffset += 8;
9000150e:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001510:	4440      	add	r0, r8
90001512:	f026 fa45 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001516:	2800      	cmp	r0, #0
90001518:	f040 820a 	bne.w	90001930 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
9000151c:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001520:	2204      	movs	r2, #4
90001522:	49bd      	ldr	r1, [pc, #756]	; (90001818 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x374>)
90001524:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001528:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
9000152c:	f026 fa38 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001530:	9001      	str	r0, [sp, #4]
90001532:	2800      	cmp	r0, #0
90001534:	f040 81f2 	bne.w	9000191c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001538:	f89b 4012 	ldrb.w	r4, [fp, #18]
9000153c:	f89b 2011 	ldrb.w	r2, [fp, #17]
90001540:	0424      	lsls	r4, r4, #16
90001542:	f89b 3013 	ldrb.w	r3, [fp, #19]
90001546:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
9000154a:	f89b 2010 	ldrb.w	r2, [fp, #16]
9000154e:	4314      	orrs	r4, r2
    assert(aviListSize);
90001550:	ea54 6403 	orrs.w	r4, r4, r3, lsl #24
90001554:	f000 81d1 	beq.w	900018fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
90001558:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
9000155c:	2204      	movs	r2, #4
9000155e:	49af      	ldr	r1, [pc, #700]	; (9000181c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x378>)
90001560:	4440      	add	r0, r8
90001562:	f026 fa1d 	bl	900279a0 <strncmp>
    if (compare(offset, "hdrl", 4))
90001566:	2800      	cmp	r0, #0
90001568:	d07a      	beq.n	90001660 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
9000156a:	2306      	movs	r3, #6
        foundFrame = false;
9000156c:	f8dd b004 	ldr.w	fp, [sp, #4]
    offset += 4;
90001570:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
90001574:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
90001578:	4440      	add	r0, r8
    return strncmp(src, str, num);
9000157a:	2204      	movs	r2, #4
9000157c:	49a8      	ldr	r1, [pc, #672]	; (90001820 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x37c>)
9000157e:	f026 fa0f 	bl	900279a0 <strncmp>
    if (compare(offset, "avih", 4))
90001582:	2800      	cmp	r0, #0
90001584:	f000 8088 	beq.w	90001698 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1f4>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
90001588:	2307      	movs	r3, #7
9000158a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
9000158e:	4454      	add	r4, sl
90001590:	3408      	adds	r4, #8
    if (reader != 0)
90001592:	f1b9 0f00 	cmp.w	r9, #0
90001596:	f000 80dd 	beq.w	90001754 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b0>
        if (length > aviBufferLength)
9000159a:	6bab      	ldr	r3, [r5, #56]	; 0x38
9000159c:	2b0b      	cmp	r3, #11
9000159e:	f240 81a3 	bls.w	900018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900015a2:	f8d9 3000 	ldr.w	r3, [r9]
900015a6:	4621      	mov	r1, r4
900015a8:	4648      	mov	r0, r9
900015aa:	68db      	ldr	r3, [r3, #12]
900015ac:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900015ae:	6b28      	ldr	r0, [r5, #48]	; 0x30
900015b0:	220c      	movs	r2, #12
900015b2:	6b69      	ldr	r1, [r5, #52]	; 0x34
900015b4:	6803      	ldr	r3, [r0, #0]
900015b6:	691b      	ldr	r3, [r3, #16]
900015b8:	4798      	blx	r3
900015ba:	2800      	cmp	r0, #0
900015bc:	f000 8122 	beq.w	90001804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x360>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900015c0:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
        aviBufferStartOffset = offset;
900015c4:	6b2e      	ldr	r6, [r5, #48]	; 0x30
900015c6:	63ec      	str	r4, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
900015c8:	f8df 825c 	ldr.w	r8, [pc, #604]	; 90001828 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x384>
            lastError = AVI_ERROR_EOF_REACHED;
900015cc:	f04f 090d 	mov.w	r9, #13
900015d0:	e003      	b.n	900015da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x136>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900015d2:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
    if (reader != 0)
900015d6:	6b2e      	ldr	r6, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900015d8:	63ec      	str	r4, [r5, #60]	; 0x3c
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900015da:	f104 0708 	add.w	r7, r4, #8
    if (reader != 0)
900015de:	2e00      	cmp	r6, #0
900015e0:	d048      	beq.n	90001674 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900015e2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    return strncmp(src, str, num);
900015e4:	2204      	movs	r2, #4
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900015e6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
900015e8:	4641      	mov	r1, r8
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900015ea:	1afb      	subs	r3, r7, r3
900015ec:	4418      	add	r0, r3
    return strncmp(src, str, num);
900015ee:	f026 f9d7 	bl	900279a0 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
900015f2:	2800      	cmp	r0, #0
900015f4:	d047      	beq.n	90001686 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e2>
900015f6:	f1ba 0f00 	cmp.w	sl, #0
900015fa:	d147      	bne.n	9000168c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1e8>
900015fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
900015fe:	42a3      	cmp	r3, r4
90001600:	f240 80ab 	bls.w	9000175a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
90001604:	3404      	adds	r4, #4
    if (reader != 0)
90001606:	b386      	cbz	r6, 9000166a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c6>
        const uint32_t index = offset - aviBufferStartOffset;
90001608:	6bea      	ldr	r2, [r5, #60]	; 0x3c
        if (length > aviBufferLength)
9000160a:	e9d5 130d 	ldrd	r1, r3, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
9000160e:	1aa4      	subs	r4, r4, r2
        if (length > aviBufferLength)
90001610:	2b0b      	cmp	r3, #11
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001612:	eb01 0204 	add.w	r2, r1, r4
90001616:	5d09      	ldrb	r1, [r1, r4]
90001618:	7894      	ldrb	r4, [r2, #2]
9000161a:	7850      	ldrb	r0, [r2, #1]
9000161c:	ea4f 4404 	mov.w	r4, r4, lsl #16
90001620:	78d2      	ldrb	r2, [r2, #3]
90001622:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
90001626:	ea44 0401 	orr.w	r4, r4, r1
9000162a:	ea44 6402 	orr.w	r4, r4, r2, lsl #24
        listOffset += listSize;
9000162e:	443c      	add	r4, r7
        if (length > aviBufferLength)
90001630:	f240 815a 	bls.w	900018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
90001634:	6833      	ldr	r3, [r6, #0]
90001636:	4621      	mov	r1, r4
90001638:	4630      	mov	r0, r6
9000163a:	68db      	ldr	r3, [r3, #12]
9000163c:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
9000163e:	6b28      	ldr	r0, [r5, #48]	; 0x30
90001640:	220c      	movs	r2, #12
90001642:	6b69      	ldr	r1, [r5, #52]	; 0x34
90001644:	6803      	ldr	r3, [r0, #0]
90001646:	691b      	ldr	r3, [r3, #16]
90001648:	4798      	blx	r3
9000164a:	2800      	cmp	r0, #0
9000164c:	d1c1      	bne.n	900015d2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x12e>
            lastError = AVI_ERROR_EOF_REACHED;
9000164e:	f04f 0a0d 	mov.w	sl, #13
90001652:	f885 9040 	strb.w	r9, [r5, #64]	; 0x40
90001656:	e7be      	b.n	900015d6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x132>
90001658:	230d      	movs	r3, #13
9000165a:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
9000165e:	e73e      	b.n	900014de <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3a>
    offset += 4;
90001660:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
90001664:	f04f 0b01 	mov.w	fp, #1
90001668:	e786      	b.n	90001578 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd4>
        listOffset += listSize;
9000166a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000166c:	591c      	ldr	r4, [r3, r4]
9000166e:	443c      	add	r4, r7
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001670:	f104 0708 	add.w	r7, r4, #8
        src = (const char*)movieData + offset;
90001674:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
90001676:	2204      	movs	r2, #4
90001678:	4641      	mov	r1, r8
        src = (const char*)movieData + offset;
9000167a:	2600      	movs	r6, #0
9000167c:	4438      	add	r0, r7
    return strncmp(src, str, num);
9000167e:	f026 f98f 	bl	900279a0 <strncmp>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001682:	2800      	cmp	r0, #0
90001684:	d1b7      	bne.n	900015f6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x152>
    if (lastError != AVI_NO_ERROR)
90001686:	f1ba 0f00 	cmp.w	sl, #0
9000168a:	d066      	beq.n	9000175a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2b6>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
9000168c:	230a      	movs	r3, #10
9000168e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
90001692:	b003      	add	sp, #12
90001694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (foundFrame)
90001698:	f1bb 0f00 	cmp.w	fp, #0
9000169c:	f43f af77 	beq.w	9000158e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xea>
        offset += 8; //skip fourcc and cb in AVIMAINHEADER
900016a0:	f107 0120 	add.w	r1, r7, #32
    if (reader != 0)
900016a4:	f1b9 0f00 	cmp.w	r9, #0
900016a8:	f000 8102 	beq.w	900018b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x40c>
        const uint32_t index = offset - aviBufferStartOffset;
900016ac:	6beb      	ldr	r3, [r5, #60]	; 0x3c
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        const uint32_t index = offset - aviBufferStartOffset;
900016b0:	1ac9      	subs	r1, r1, r3
900016b2:	f1c3 0030 	rsb	r0, r3, #48	; 0x30
        videoInfo.ms_between_frames = getU32(offset)/1000;
900016b6:	f8df c174 	ldr.w	ip, [pc, #372]	; 9000182c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x388>
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016ba:	f812 8001 	ldrb.w	r8, [r2, r1]
900016be:	eb02 0e01 	add.w	lr, r2, r1
        const uint32_t index = offset - aviBufferStartOffset;
900016c2:	f1c3 0140 	rsb	r1, r3, #64	; 0x40
900016c6:	f1c3 0344 	rsb	r3, r3, #68	; 0x44
900016ca:	4438      	add	r0, r7
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016cc:	f89e b001 	ldrb.w	fp, [lr, #1]
        const uint32_t index = offset - aviBufferStartOffset;
900016d0:	4439      	add	r1, r7
900016d2:	441f      	add	r7, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016d4:	f89e 3002 	ldrb.w	r3, [lr, #2]
900016d8:	f89e e003 	ldrb.w	lr, [lr, #3]
900016dc:	041b      	lsls	r3, r3, #16
900016de:	ea43 230b 	orr.w	r3, r3, fp, lsl #8
900016e2:	ea43 0308 	orr.w	r3, r3, r8
900016e6:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
        videoInfo.ms_between_frames = getU32(offset)/1000;
900016ea:	fbac c303 	umull	ip, r3, ip, r3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016ee:	eb02 0c00 	add.w	ip, r2, r0
        videoInfo.ms_between_frames = getU32(offset)/1000;
900016f2:	099b      	lsrs	r3, r3, #6
900016f4:	606b      	str	r3, [r5, #4]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900016f6:	f89c 3002 	ldrb.w	r3, [ip, #2]
900016fa:	f89c 8001 	ldrb.w	r8, [ip, #1]
900016fe:	041b      	lsls	r3, r3, #16
90001700:	f812 e000 	ldrb.w	lr, [r2, r0]
90001704:	f89c c003 	ldrb.w	ip, [ip, #3]
90001708:	1850      	adds	r0, r2, r1
9000170a:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
9000170e:	ea43 030e 	orr.w	r3, r3, lr
90001712:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
        videoInfo.number_of_frames = getU32(offset + 16);
90001716:	60ab      	str	r3, [r5, #8]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001718:	7883      	ldrb	r3, [r0, #2]
9000171a:	f890 c001 	ldrb.w	ip, [r0, #1]
9000171e:	041b      	lsls	r3, r3, #16
90001720:	5c51      	ldrb	r1, [r2, r1]
90001722:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90001726:	430b      	orrs	r3, r1
90001728:	78c1      	ldrb	r1, [r0, #3]
9000172a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000172e:	19d1      	adds	r1, r2, r7
        videoInfo.frame_width = getU32(offset + 32);
90001730:	60eb      	str	r3, [r5, #12]
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001732:	788b      	ldrb	r3, [r1, #2]
90001734:	7848      	ldrb	r0, [r1, #1]
90001736:	041b      	lsls	r3, r3, #16
90001738:	5dd2      	ldrb	r2, [r2, r7]
9000173a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
9000173e:	4313      	orrs	r3, r2
90001740:	78ca      	ldrb	r2, [r1, #3]
90001742:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    uint32_t listOffset = aviListOffset + aviListSize + 8;
90001746:	4454      	add	r4, sl
        videoInfo.frame_height = getU32(offset + 36);
90001748:	612b      	str	r3, [r5, #16]
    uint32_t listOffset = aviListOffset + aviListSize + 8;
9000174a:	3408      	adds	r4, #8
    if (reader != 0)
9000174c:	f1b9 0f00 	cmp.w	r9, #0
90001750:	f47f af23 	bne.w	9000159a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf6>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
90001754:	f895 a040 	ldrb.w	sl, [r5, #64]	; 0x40
90001758:	e736      	b.n	900015c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x124>
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
9000175a:	f104 030c 	add.w	r3, r4, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000175e:	3404      	adds	r4, #4
    currentMovieOffset = listOffset + 8 + 4; //skip LIST and 'movi'
90001760:	61ab      	str	r3, [r5, #24]
    if (reader != 0)
90001762:	2e00      	cmp	r6, #0
90001764:	f000 80b8 	beq.w	900018d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x434>
        const uint32_t index = offset - aviBufferStartOffset;
90001768:	6beb      	ldr	r3, [r5, #60]	; 0x3c
9000176a:	1ae4      	subs	r4, r4, r3
        if (length > aviBufferLength)
9000176c:	e9d5 120d 	ldrd	r1, r2, [r5, #52]	; 0x34
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001770:	f104 0e02 	add.w	lr, r4, #2
90001774:	f104 0c01 	add.w	ip, r4, #1
90001778:	f811 8004 	ldrb.w	r8, [r1, r4]
9000177c:	1ce0      	adds	r0, r4, #3
9000177e:	f811 300e 	ldrb.w	r3, [r1, lr]
        if (length > aviBufferLength)
90001782:	2a03      	cmp	r2, #3
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
90001784:	f811 900c 	ldrb.w	r9, [r1, ip]
90001788:	ea4f 4303 	mov.w	r3, r3, lsl #16
9000178c:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
90001790:	ea43 0308 	orr.w	r3, r3, r8
90001794:	f811 8000 	ldrb.w	r8, [r1, r0]
90001798:	ea43 6308 	orr.w	r3, r3, r8, lsl #24
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
9000179c:	443b      	add	r3, r7
9000179e:	626b      	str	r3, [r5, #36]	; 0x24
        return aviBuffer[index+0] | (aviBuffer[index+1]<<8) | (aviBuffer[index+2]<<16) | (aviBuffer[index+3]<<24);
900017a0:	f811 300e 	ldrb.w	r3, [r1, lr]
900017a4:	f811 c00c 	ldrb.w	ip, [r1, ip]
900017a8:	ea4f 4303 	mov.w	r3, r3, lsl #16
900017ac:	5d0c      	ldrb	r4, [r1, r4]
900017ae:	5c09      	ldrb	r1, [r1, r0]
900017b0:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
900017b4:	ea43 0304 	orr.w	r3, r3, r4
900017b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    listOffset += listSize;
900017bc:	441f      	add	r7, r3
        if (length > aviBufferLength)
900017be:	f240 8093 	bls.w	900018e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x444>
        reader->seek(offset);
900017c2:	6833      	ldr	r3, [r6, #0]
900017c4:	4639      	mov	r1, r7
900017c6:	4630      	mov	r0, r6
900017c8:	68db      	ldr	r3, [r3, #12]
900017ca:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
900017cc:	6b28      	ldr	r0, [r5, #48]	; 0x30
900017ce:	2204      	movs	r2, #4
900017d0:	6b69      	ldr	r1, [r5, #52]	; 0x34
900017d2:	6803      	ldr	r3, [r0, #0]
900017d4:	691b      	ldr	r3, [r3, #16]
900017d6:	4798      	blx	r3
900017d8:	2800      	cmp	r0, #0
900017da:	d05f      	beq.n	9000189c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f8>
    if (reader != 0)
900017dc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
        aviBufferStartOffset = offset;
900017de:	63ef      	str	r7, [r5, #60]	; 0x3c
    if (reader != 0)
900017e0:	2b00      	cmp	r3, #0
900017e2:	f000 80af 	beq.w	90001944 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a0>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
900017e6:	6b68      	ldr	r0, [r5, #52]	; 0x34
    return strncmp(src, str, num);
900017e8:	2204      	movs	r2, #4
900017ea:	490e      	ldr	r1, [pc, #56]	; (90001824 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x380>)
900017ec:	f026 f8d8 	bl	900279a0 <strncmp>
    if (!compare(listOffset, "idx1", 4))
900017f0:	2800      	cmp	r0, #0
900017f2:	d16b      	bne.n	900018cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x428>
    frameNumber = 1; //next frame number is 1
900017f4:	2201      	movs	r2, #1
    firstFrameOffset = currentMovieOffset;
900017f6:	69ab      	ldr	r3, [r5, #24]
        indexOffset = listOffset;
900017f8:	61ef      	str	r7, [r5, #28]
    frameNumber = 1; //next frame number is 1
900017fa:	616a      	str	r2, [r5, #20]
    firstFrameOffset = currentMovieOffset;
900017fc:	622b      	str	r3, [r5, #32]
}
900017fe:	b003      	add	sp, #12
90001800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            lastError = AVI_ERROR_EOF_REACHED;
90001804:	230d      	movs	r3, #13
90001806:	469a      	mov	sl, r3
90001808:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
9000180c:	e6da      	b.n	900015c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x120>
9000180e:	bf00      	nop
90001810:	900286bc 	.word	0x900286bc
90001814:	90028774 	.word	0x90028774
90001818:	9002876c 	.word	0x9002876c
9000181c:	90028764 	.word	0x90028764
90001820:	9002874c 	.word	0x9002874c
90001824:	9002875c 	.word	0x9002875c
90001828:	90028754 	.word	0x90028754
9000182c:	10624dd3 	.word	0x10624dd3
    if (compare(currentMovieOffset, "RIFF", 4))
90001830:	4637      	mov	r7, r6
        src = (const char*)movieData + offset;
90001832:	f8d5 802c 	ldr.w	r8, [r5, #44]	; 0x2c
    return strncmp(src, str, num);
90001836:	2204      	movs	r2, #4
90001838:	4944      	ldr	r1, [pc, #272]	; (9000194c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4a8>)
        src = (const char*)movieData + offset;
9000183a:	eb08 0407 	add.w	r4, r8, r7
    return strncmp(src, str, num);
9000183e:	4620      	mov	r0, r4
90001840:	f026 f8ae 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "RIFF", 4))
90001844:	2800      	cmp	r0, #0
90001846:	d15f      	bne.n	90001908 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x464>
    currentMovieOffset += 8;
90001848:	f107 0008 	add.w	r0, r7, #8
    return strncmp(src, str, num);
9000184c:	2204      	movs	r2, #4
9000184e:	4940      	ldr	r1, [pc, #256]	; (90001950 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4ac>)
    currentMovieOffset += 8;
90001850:	61a8      	str	r0, [r5, #24]
    return strncmp(src, str, num);
90001852:	4440      	add	r0, r8
90001854:	f026 f8a4 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "AVI ", 4))
90001858:	2800      	cmp	r0, #0
9000185a:	d169      	bne.n	90001930 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x48c>
    currentMovieOffset += 4;
9000185c:	f107 0a0c 	add.w	sl, r7, #12
    return strncmp(src, str, num);
90001860:	2204      	movs	r2, #4
90001862:	493c      	ldr	r1, [pc, #240]	; (90001954 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b0>)
90001864:	eb08 000a 	add.w	r0, r8, sl
    currentMovieOffset += 4;
90001868:	f8c5 a018 	str.w	sl, [r5, #24]
    return strncmp(src, str, num);
9000186c:	f026 f898 	bl	900279a0 <strncmp>
    if (compare(currentMovieOffset, "LIST", 4))
90001870:	4683      	mov	fp, r0
90001872:	2800      	cmp	r0, #0
90001874:	d152      	bne.n	9000191c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x478>
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
90001876:	6924      	ldr	r4, [r4, #16]
    assert(aviListSize);
90001878:	2c00      	cmp	r4, #0
9000187a:	d03e      	beq.n	900018fa <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x456>
    uint32_t offset =  currentMovieOffset + 8;
9000187c:	f107 0014 	add.w	r0, r7, #20
    return strncmp(src, str, num);
90001880:	2204      	movs	r2, #4
90001882:	4935      	ldr	r1, [pc, #212]	; (90001958 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b4>)
90001884:	4440      	add	r0, r8
90001886:	f026 f88b 	bl	900279a0 <strncmp>
    if (compare(offset, "hdrl", 4))
9000188a:	b958      	cbnz	r0, 900018a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x400>
    offset += 4;
9000188c:	f107 0018 	add.w	r0, r7, #24
    bool foundFrame = true;
90001890:	f04f 0b01 	mov.w	fp, #1
        src = (const char*)movieData + offset;
90001894:	4440      	add	r0, r8
90001896:	f04f 0900 	mov.w	r9, #0
9000189a:	e66e      	b.n	9000157a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
            lastError = AVI_ERROR_EOF_REACHED;
9000189c:	230d      	movs	r3, #13
9000189e:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
900018a2:	e79b      	b.n	900017dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x338>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900018a4:	2306      	movs	r3, #6
    offset += 4;
900018a6:	f107 0018 	add.w	r0, r7, #24
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
900018aa:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
    if (reader != 0)
900018ae:	e7f1      	b.n	90001894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x3f0>
900018b0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        videoInfo.ms_between_frames = getU32(offset)/1000;
900018b2:	585a      	ldr	r2, [r3, r1]
900018b4:	441f      	add	r7, r3
900018b6:	4b29      	ldr	r3, [pc, #164]	; (9000195c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4b8>)
900018b8:	fba3 2302 	umull	r2, r3, r3, r2
900018bc:	099b      	lsrs	r3, r3, #6
900018be:	606b      	str	r3, [r5, #4]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900018c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        videoInfo.number_of_frames = getU32(offset + 16);
900018c2:	60ab      	str	r3, [r5, #8]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900018c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
        videoInfo.frame_width = getU32(offset + 32);
900018c6:	60eb      	str	r3, [r5, #12]
        return d[0] | (d[1] << 8) | (d[2] << 16) | (d[3] << 24);
900018c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
900018ca:	e73c      	b.n	90001746 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x2a2>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
900018cc:	230b      	movs	r3, #11
900018ce:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
900018d2:	b003      	add	sp, #12
900018d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900018d8:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
900018da:	5903      	ldr	r3, [r0, r4]
900018dc:	443b      	add	r3, r7
900018de:	626b      	str	r3, [r5, #36]	; 0x24
    listOffset += listSize;
900018e0:	5903      	ldr	r3, [r0, r4]
900018e2:	441f      	add	r7, r3
        src = (const char*)movieData + offset;
900018e4:	4438      	add	r0, r7
900018e6:	e77f      	b.n	900017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900018e8:	2009      	movs	r0, #9
            assert(!"Buffer to small");
900018ea:	4b1d      	ldr	r3, [pc, #116]	; (90001960 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4bc>)
900018ec:	4a1d      	ldr	r2, [pc, #116]	; (90001964 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c0>)
900018ee:	21a6      	movs	r1, #166	; 0xa6
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
900018f0:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
            assert(!"Buffer to small");
900018f4:	481c      	ldr	r0, [pc, #112]	; (90001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
900018f6:	f025 fb99 	bl	9002702c <__assert_func>
    assert(aviListSize);
900018fa:	4b1c      	ldr	r3, [pc, #112]	; (9000196c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c8>)
900018fc:	f240 1149 	movw	r1, #329	; 0x149
90001900:	4a1b      	ldr	r2, [pc, #108]	; (90001970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
90001902:	4819      	ldr	r0, [pc, #100]	; (90001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001904:	f025 fb92 	bl	9002702c <__assert_func>
        lastError = AVI_ERROR_NOT_RIFF;
90001908:	2003      	movs	r0, #3
        assert(!"RIFF header not found");
9000190a:	4b1a      	ldr	r3, [pc, #104]	; (90001974 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d0>)
9000190c:	4a18      	ldr	r2, [pc, #96]	; (90001970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
9000190e:	f44f 719a 	mov.w	r1, #308	; 0x134
        lastError = AVI_ERROR_NOT_RIFF;
90001912:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"RIFF header not found");
90001916:	4814      	ldr	r0, [pc, #80]	; (90001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001918:	f025 fb88 	bl	9002702c <__assert_func>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
9000191c:	2005      	movs	r0, #5
        assert(!"AVI LIST not found");
9000191e:	4b16      	ldr	r3, [pc, #88]	; (90001978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d4>)
90001920:	4a13      	ldr	r2, [pc, #76]	; (90001970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
90001922:	f240 1143 	movw	r1, #323	; 0x143
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
90001926:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI LIST not found");
9000192a:	480f      	ldr	r0, [pc, #60]	; (90001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
9000192c:	f025 fb7e 	bl	9002702c <__assert_func>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
90001930:	2004      	movs	r0, #4
        assert(!"AVI header not found");
90001932:	4b12      	ldr	r3, [pc, #72]	; (9000197c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4d8>)
90001934:	4a0e      	ldr	r2, [pc, #56]	; (90001970 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4cc>)
90001936:	f44f 719e 	mov.w	r1, #316	; 0x13c
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
9000193a:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
        assert(!"AVI header not found");
9000193e:	480a      	ldr	r0, [pc, #40]	; (90001968 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x4c4>)
90001940:	f025 fb74 	bl	9002702c <__assert_func>
        src = (const char*)movieData + offset;
90001944:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90001946:	4438      	add	r0, r7
90001948:	e74e      	b.n	900017e8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x344>
9000194a:	bf00      	nop
9000194c:	900286bc 	.word	0x900286bc
90001950:	90028774 	.word	0x90028774
90001954:	9002876c 	.word	0x9002876c
90001958:	90028764 	.word	0x90028764
9000195c:	10624dd3 	.word	0x10624dd3
90001960:	90028588 	.word	0x90028588
90001964:	9002859c 	.word	0x9002859c
90001968:	90028524 	.word	0x90028524
9000196c:	90028740 	.word	0x90028740
90001970:	900286e0 	.word	0x900286e0
90001974:	900286c4 	.word	0x900286c4
90001978:	90028728 	.word	0x90028728
9000197c:	90028710 	.word	0x90028710

90001980 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
{
90001980:	b410      	push	{r4}
    reader = 0; //not using reader
90001982:	2400      	movs	r4, #0
    movieLength = length;
90001984:	e9c0 210a 	strd	r2, r1, [r0, #40]	; 0x28
    reader = 0; //not using reader
90001988:	6304      	str	r4, [r0, #48]	; 0x30
}
9000198a:	f85d 4b04 	ldr.w	r4, [sp], #4
    readVideoHeader();
9000198e:	f7ff bd89 	b.w	900014a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
90001992:	bf00      	nop

90001994 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
90001994:	b510      	push	{r4, lr}
    movieLength = reader.getDataLength();
90001996:	680b      	ldr	r3, [r1, #0]
{
90001998:	4604      	mov	r4, r0
    movieData = 0;
9000199a:	2200      	movs	r2, #0
    movieLength = reader.getDataLength();
9000199c:	4608      	mov	r0, r1
9000199e:	689b      	ldr	r3, [r3, #8]
    movieData = 0;
900019a0:	e9c4 210b 	strd	r2, r1, [r4, #44]	; 0x2c
    movieLength = reader.getDataLength();
900019a4:	4798      	blx	r3
900019a6:	4603      	mov	r3, r0
    readVideoHeader();
900019a8:	4620      	mov	r0, r4
    movieLength = reader.getDataLength();
900019aa:	62a3      	str	r3, [r4, #40]	; 0x28
}
900019ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
900019b0:	f7ff bd78 	b.w	900014a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

900019b4 <HAL_JPEG_InfoReadyCallback>:
{
900019b4:	b508      	push	{r3, lr}
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900019b6:	684b      	ldr	r3, [r1, #4]
{
900019b8:	4608      	mov	r0, r1
  if(pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
900019ba:	2b01      	cmp	r3, #1
900019bc:	d01a      	beq.n	900019f4 <HAL_JPEG_InfoReadyCallback+0x40>
    if(pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
900019be:	2b02      	cmp	r3, #2
900019c0:	d010      	beq.n	900019e4 <HAL_JPEG_InfoReadyCallback+0x30>
    if(pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
900019c2:	b94b      	cbnz	r3, 900019d8 <HAL_JPEG_InfoReadyCallback+0x24>
      if((pInfo->ImageWidth % 8) != 0)
900019c4:	68cb      	ldr	r3, [r1, #12]
900019c6:	0759      	lsls	r1, r3, #29
900019c8:	d12f      	bne.n	90001a2a <HAL_JPEG_InfoReadyCallback+0x76>
      if((pInfo->ImageHeight % 8) != 0)
900019ca:	6883      	ldr	r3, [r0, #8]
900019cc:	075a      	lsls	r2, r3, #29
900019ce:	d003      	beq.n	900019d8 <HAL_JPEG_InfoReadyCallback+0x24>
        pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
900019d0:	f023 0307 	bic.w	r3, r3, #7
900019d4:	3308      	adds	r3, #8
900019d6:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
900019d8:	4a1a      	ldr	r2, [pc, #104]	; (90001a44 <HAL_JPEG_InfoReadyCallback+0x90>)
900019da:	491b      	ldr	r1, [pc, #108]	; (90001a48 <HAL_JPEG_InfoReadyCallback+0x94>)
900019dc:	f012 fdc0 	bl	90014560 <JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
900019e0:	bb40      	cbnz	r0, 90001a34 <HAL_JPEG_InfoReadyCallback+0x80>
}
900019e2:	bd08      	pop	{r3, pc}
      if((pInfo->ImageWidth % 16) != 0)
900019e4:	68cb      	ldr	r3, [r1, #12]
900019e6:	071a      	lsls	r2, r3, #28
900019e8:	d0ef      	beq.n	900019ca <HAL_JPEG_InfoReadyCallback+0x16>
        pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900019ea:	f023 030f 	bic.w	r3, r3, #15
900019ee:	3310      	adds	r3, #16
900019f0:	60cb      	str	r3, [r1, #12]
900019f2:	e7ea      	b.n	900019ca <HAL_JPEG_InfoReadyCallback+0x16>
    if((pInfo->ImageWidth % 16) != 0)
900019f4:	68cb      	ldr	r3, [r1, #12]
900019f6:	071a      	lsls	r2, r3, #28
900019f8:	d003      	beq.n	90001a02 <HAL_JPEG_InfoReadyCallback+0x4e>
      pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
900019fa:	f023 030f 	bic.w	r3, r3, #15
900019fe:	3310      	adds	r3, #16
90001a00:	60cb      	str	r3, [r1, #12]
    if((pInfo->ImageHeight % 16) != 0)
90001a02:	6883      	ldr	r3, [r0, #8]
90001a04:	0719      	lsls	r1, r3, #28
90001a06:	d003      	beq.n	90001a10 <HAL_JPEG_InfoReadyCallback+0x5c>
      pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
90001a08:	f023 030f 	bic.w	r3, r3, #15
90001a0c:	3310      	adds	r3, #16
90001a0e:	6083      	str	r3, [r0, #8]
    HAL_StatusTypeDef status = TGFX_JPEG_GetDecodeColorConvertFunc(pInfo, &pConvert_Function, &MCU_TotalNb);
90001a10:	4a0c      	ldr	r2, [pc, #48]	; (90001a44 <HAL_JPEG_InfoReadyCallback+0x90>)
90001a12:	490d      	ldr	r1, [pc, #52]	; (90001a48 <HAL_JPEG_InfoReadyCallback+0x94>)
90001a14:	f001 fefe 	bl	90003814 <TGFX_JPEG_GetDecodeColorConvertFunc>
    if(status != HAL_OK)
90001a18:	2800      	cmp	r0, #0
90001a1a:	d0e2      	beq.n	900019e2 <HAL_JPEG_InfoReadyCallback+0x2e>
      assert(status == HAL_OK);
90001a1c:	4b0b      	ldr	r3, [pc, #44]	; (90001a4c <HAL_JPEG_InfoReadyCallback+0x98>)
90001a1e:	f240 212e 	movw	r1, #558	; 0x22e
90001a22:	4a0b      	ldr	r2, [pc, #44]	; (90001a50 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001a24:	480b      	ldr	r0, [pc, #44]	; (90001a54 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001a26:	f025 fb01 	bl	9002702c <__assert_func>
        pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
90001a2a:	f023 0307 	bic.w	r3, r3, #7
90001a2e:	3308      	adds	r3, #8
90001a30:	60c3      	str	r3, [r0, #12]
90001a32:	e7ca      	b.n	900019ca <HAL_JPEG_InfoReadyCallback+0x16>
      assert(status == HAL_OK);
90001a34:	4b05      	ldr	r3, [pc, #20]	; (90001a4c <HAL_JPEG_InfoReadyCallback+0x98>)
90001a36:	f44f 7112 	mov.w	r1, #584	; 0x248
90001a3a:	4a05      	ldr	r2, [pc, #20]	; (90001a50 <HAL_JPEG_InfoReadyCallback+0x9c>)
90001a3c:	4805      	ldr	r0, [pc, #20]	; (90001a54 <HAL_JPEG_InfoReadyCallback+0xa0>)
90001a3e:	f025 faf5 	bl	9002702c <__assert_func>
90001a42:	bf00      	nop
90001a44:	24005ba0 	.word	0x24005ba0
90001a48:	24005bdc 	.word	0x24005bdc
90001a4c:	9002877c 	.word	0x9002877c
90001a50:	90028790 	.word	0x90028790
90001a54:	90028524 	.word	0x90028524

90001a58 <HAL_JPEG_GetDataCallback>:
  JPEG_InputImageIndex += NbDecodedData;
90001a58:	4b0c      	ldr	r3, [pc, #48]	; (90001a8c <HAL_JPEG_GetDataCallback+0x34>)
{
90001a5a:	b410      	push	{r4}
  JPEG_InputImageIndex += NbDecodedData;
90001a5c:	681a      	ldr	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001a5e:	4c0c      	ldr	r4, [pc, #48]	; (90001a90 <HAL_JPEG_GetDataCallback+0x38>)
  JPEG_InputImageIndex += NbDecodedData;
90001a60:	440a      	add	r2, r1
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001a62:	6824      	ldr	r4, [r4, #0]
  JPEG_InputImageIndex += NbDecodedData;
90001a64:	601a      	str	r2, [r3, #0]
  if(JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
90001a66:	42a2      	cmp	r2, r4
90001a68:	d302      	bcc.n	90001a70 <HAL_JPEG_GetDataCallback+0x18>
}
90001a6a:	f85d 4b04 	ldr.w	r4, [sp], #4
90001a6e:	4770      	bx	lr
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001a70:	4b08      	ldr	r3, [pc, #32]	; (90001a94 <HAL_JPEG_GetDataCallback+0x3c>)
    uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
90001a72:	1aa2      	subs	r2, r4, r2
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001a74:	681c      	ldr	r4, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001a76:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001a7a:	4421      	add	r1, r4
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001a7c:	bf28      	it	cs
90001a7e:	f44f 3280 	movcs.w	r2, #65536	; 0x10000
}
90001a82:	f85d 4b04 	ldr.w	r4, [sp], #4
    JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
90001a86:	6019      	str	r1, [r3, #0]
    HAL_JPEG_ConfigInputBuffer(hjpeg,(uint8_t *)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
90001a88:	f009 bfe8 	b.w	9000ba5c <HAL_JPEG_ConfigInputBuffer>
90001a8c:	24005b84 	.word	0x24005b84
90001a90:	24005b88 	.word	0x24005b88
90001a94:	24005b80 	.word	0x24005b80

90001a98 <HAL_JPEG_DataReadyCallback>:
{
90001a98:	b570      	push	{r4, r5, r6, lr}
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001a9a:	4e1e      	ldr	r6, [pc, #120]	; (90001b14 <HAL_JPEG_DataReadyCallback+0x7c>)
{
90001a9c:	4605      	mov	r5, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001a9e:	2001      	movs	r0, #1
90001aa0:	4c1d      	ldr	r4, [pc, #116]	; (90001b18 <HAL_JPEG_DataReadyCallback+0x80>)
90001aa2:	6833      	ldr	r3, [r6, #0]
90001aa4:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001aa8:	4403      	add	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001aaa:	f804 0021 	strb.w	r0, [r4, r1, lsl #2]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90001aae:	4283      	cmp	r3, r0
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
90001ab0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
    Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
90001ab4:	608a      	str	r2, [r1, #8]
    if(JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
90001ab6:	d91a      	bls.n	90001aee <HAL_JPEG_DataReadyCallback+0x56>
      JPEG_OUT_Write_BufferIndex = 0;
90001ab8:	2200      	movs	r2, #0
90001aba:	4613      	mov	r3, r2
90001abc:	6032      	str	r2, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001abe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
90001ac2:	005a      	lsls	r2, r3, #1
90001ac4:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
90001ac8:	b9c9      	cbnz	r1, 90001afe <HAL_JPEG_DataReadyCallback+0x66>
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001aca:	4914      	ldr	r1, [pc, #80]	; (90001b1c <HAL_JPEG_DataReadyCallback+0x84>)
90001acc:	4413      	add	r3, r2
90001ace:	4628      	mov	r0, r5
90001ad0:	68ca      	ldr	r2, [r1, #12]
90001ad2:	eb04 0483 	add.w	r4, r4, r3, lsl #2
90001ad6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90001ada:	6861      	ldr	r1, [r4, #4]
90001adc:	01d2      	lsls	r2, r2, #7
90001ade:	f009 ffc1 	bl	9000ba64 <HAL_JPEG_ConfigOutputBuffer>
    SEM_POST(semDecodingDone);
90001ae2:	4b0f      	ldr	r3, [pc, #60]	; (90001b20 <HAL_JPEG_DataReadyCallback+0x88>)
}
90001ae4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    SEM_POST(semDecodingDone);
90001ae8:	6818      	ldr	r0, [r3, #0]
90001aea:	f00f b91b 	b.w	90010d24 <osSemaphoreRelease>
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001aee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    JPEG_OUT_Write_BufferIndex++;
90001af2:	6033      	str	r3, [r6, #0]
    if(Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
90001af4:	005a      	lsls	r2, r3, #1
90001af6:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
90001afa:	2900      	cmp	r1, #0
90001afc:	d0e5      	beq.n	90001aca <HAL_JPEG_DataReadyCallback+0x32>
      HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
90001afe:	2102      	movs	r1, #2
90001b00:	4628      	mov	r0, r5
90001b02:	f009 ff73 	bl	9000b9ec <HAL_JPEG_Pause>
      Output_Is_Paused = 1;
90001b06:	4a07      	ldr	r2, [pc, #28]	; (90001b24 <HAL_JPEG_DataReadyCallback+0x8c>)
90001b08:	2101      	movs	r1, #1
    HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
90001b0a:	6833      	ldr	r3, [r6, #0]
      Output_Is_Paused = 1;
90001b0c:	6011      	str	r1, [r2, #0]
90001b0e:	fa03 f201 	lsl.w	r2, r3, r1
90001b12:	e7da      	b.n	90001aca <HAL_JPEG_DataReadyCallback+0x32>
90001b14:	24005b90 	.word	0x24005b90
90001b18:	24000004 	.word	0x24000004
90001b1c:	24005ba8 	.word	0x24005ba8
90001b20:	24005be0 	.word	0x24005be0
90001b24:	24005ba4 	.word	0x24005ba4

90001b28 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
90001b28:	b672      	cpsid	i
  while (1)
90001b2a:	e7fe      	b.n	90001b2a <HAL_JPEG_ErrorCallback+0x2>

90001b2c <HAL_JPEG_DecodeCpltCallback>:
  Jpeg_HWDecodingEnd = 1;
90001b2c:	4b01      	ldr	r3, [pc, #4]	; (90001b34 <HAL_JPEG_DecodeCpltCallback+0x8>)
90001b2e:	2201      	movs	r2, #1
90001b30:	601a      	str	r2, [r3, #0]
}
90001b32:	4770      	bx	lr
90001b34:	24005b98 	.word	0x24005b98

90001b38 <DMA2D_CopyBuffer>:
  * @brief  Configures external DMA2D job to copy YCbCr data to RGB buffer(s)
  * @param job: External job reference
  * @retval None
  */
void DMA2D_CopyBuffer(External_DMA2D_JobTypeDef& job)
{
90001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001b3a:	2302      	movs	r3, #2
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001b3c:	4c1a      	ldr	r4, [pc, #104]	; (90001ba8 <DMA2D_CopyBuffer+0x70>)
90001b3e:	6806      	ldr	r6, [r0, #0]
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001b40:	4d1a      	ldr	r5, [pc, #104]	; (90001bac <DMA2D_CopyBuffer+0x74>)
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001b42:	6822      	ldr	r2, [r4, #0]
90001b44:	0131      	lsls	r1, r6, #4
  WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB565);
90001b46:	636b      	str	r3, [r5, #52]	; 0x34

  /* Configure DMA2D data size */
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001b48:	4b19      	ldr	r3, [pc, #100]	; (90001bb0 <DMA2D_CopyBuffer+0x78>)
90001b4a:	681f      	ldr	r7, [r3, #0]
  xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
90001b4c:	fbb1 f3f2 	udiv	r3, r1, r2
  yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
90001b50:	fb02 1113 	mls	r1, r2, r3, r1
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001b54:	6862      	ldr	r2, [r4, #4]
90001b56:	fb02 f303 	mul.w	r3, r2, r3
90001b5a:	6922      	ldr	r2, [r4, #16]
90001b5c:	ea4f 1c03 	mov.w	ip, r3, lsl #4
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001b60:	68e3      	ldr	r3, [r4, #12]
  refline = (JPEG_ConvertorParams.ScaledWidth) * xRef + (JPEG_ConvertorParams.bytes_pr_pixel * yRef);
90001b62:	fb01 f202 	mul.w	r2, r1, r2
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  // Last line of frame
90001b66:	eba7 0e03 	sub.w	lr, r7, r3
90001b6a:	4576      	cmp	r6, lr
90001b6c:	d317      	bcc.n	90001b9e <DMA2D_CopyBuffer+0x66>
  {
      WRITE_REG(DMA2D->NLR, (JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001b6e:	68a1      	ldr	r1, [r4, #8]
90001b70:	ea41 5103 	orr.w	r1, r1, r3, lsl #20
90001b74:	6469      	str	r1, [r5, #68]	; 0x44
  {
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
  }

  /* Configure DMA2D destination address */
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001b76:	490f      	ldr	r1, [pc, #60]	; (90001bb4 <DMA2D_CopyBuffer+0x7c>)

  /* DMA2D OOR register configuration ------------------------------------------*/
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001b78:	f1c3 031e 	rsb	r3, r3, #30

  /* DMA2D FGPFCCR register configuration -------------------------------------*/
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));

  /* Configure DMA2D source address */
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001b7c:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->FGOR, 0);
90001b7e:	2400      	movs	r4, #0
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001b80:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001b82:	011b      	lsls	r3, r3, #4
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001b84:	6840      	ldr	r0, [r0, #4]
  WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
90001b86:	4411      	add	r1, r2
90001b88:	4a08      	ldr	r2, [pc, #32]	; (90001bac <DMA2D_CopyBuffer+0x74>)
90001b8a:	4461      	add	r1, ip
90001b8c:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(DMA2D->OOR, 480 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
90001b8e:	6413      	str	r3, [r2, #64]	; 0x40
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
90001b90:	4909      	ldr	r1, [pc, #36]	; (90001bb8 <DMA2D_CopyBuffer+0x80>)

  /* Configure DMA2D contol register */
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001b92:	4b0a      	ldr	r3, [pc, #40]	; (90001bbc <DMA2D_CopyBuffer+0x84>)
  WRITE_REG(DMA2D->FGOR, 0);
90001b94:	6114      	str	r4, [r2, #16]
  WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
90001b96:	61d1      	str	r1, [r2, #28]
  WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.jpeg_buffer->DataBuffer));
90001b98:	60d0      	str	r0, [r2, #12]
  WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
90001b9a:	6013      	str	r3, [r2, #0]
}
90001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
90001b9e:	0519      	lsls	r1, r3, #20
90001ba0:	f041 0110 	orr.w	r1, r1, #16
90001ba4:	6469      	str	r1, [r5, #68]	; 0x44
90001ba6:	e7e6      	b.n	90001b76 <DMA2D_CopyBuffer+0x3e>
90001ba8:	24005ba8 	.word	0x24005ba8
90001bac:	52001000 	.word	0x52001000
90001bb0:	24005ba0 	.word	0x24005ba0
90001bb4:	24005b7c 	.word	0x24005b7c
90001bb8:	ff09000b 	.word	0xff09000b
90001bbc:	00010201 	.word	0x00010201

90001bc0 <DMA2D_ExternalJobCompleted>:
  * @retval None
  */
void DMA2D_ExternalJobCompleted(External_DMA2D_JobTypeDef& job)
{
  // Mark ycbcr empty
  job.jpeg_buffer->State = JPEG_BUFFER_EMPTY;
90001bc0:	2200      	movs	r2, #0
90001bc2:	6843      	ldr	r3, [r0, #4]
      return count_ == 0;
90001bc4:	490b      	ldr	r1, [pc, #44]	; (90001bf4 <DMA2D_ExternalJobCompleted+0x34>)
90001bc6:	701a      	strb	r2, [r3, #0]
  job.jpeg_buffer->DataBufferSize = 0;

  // Mark dma paused if queue is empty
  if(external_queue.is_empty())
90001bc8:	68c9      	ldr	r1, [r1, #12]
  job.jpeg_buffer->DataBufferSize = 0;
90001bca:	609a      	str	r2, [r3, #8]
  if(external_queue.is_empty())
90001bcc:	b911      	cbnz	r1, 90001bd4 <DMA2D_ExternalJobCompleted+0x14>
  {
      DMA2D_output_Is_Paused = 1;
90001bce:	4b0a      	ldr	r3, [pc, #40]	; (90001bf8 <DMA2D_ExternalJobCompleted+0x38>)
90001bd0:	2201      	movs	r2, #1
90001bd2:	601a      	str	r2, [r3, #0]
  }

  // Check if last line
  if(job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
90001bd4:	4b09      	ldr	r3, [pc, #36]	; (90001bfc <DMA2D_ExternalJobCompleted+0x3c>)
90001bd6:	490a      	ldr	r1, [pc, #40]	; (90001c00 <DMA2D_ExternalJobCompleted+0x40>)
90001bd8:	681b      	ldr	r3, [r3, #0]
90001bda:	68c9      	ldr	r1, [r1, #12]
90001bdc:	6802      	ldr	r2, [r0, #0]
90001bde:	1a5b      	subs	r3, r3, r1
90001be0:	429a      	cmp	r2, r3
90001be2:	d302      	bcc.n	90001bea <DMA2D_ExternalJobCompleted+0x2a>
  {
      DMA2D_CopyBufferEnd = 1;
90001be4:	4b07      	ldr	r3, [pc, #28]	; (90001c04 <DMA2D_ExternalJobCompleted+0x44>)
90001be6:	2201      	movs	r2, #1
90001be8:	601a      	str	r2, [r3, #0]
  }

  // Signal Hardware Decoding to wake up
  SEM_POST(semDecodingDone);
90001bea:	4b07      	ldr	r3, [pc, #28]	; (90001c08 <DMA2D_ExternalJobCompleted+0x48>)
90001bec:	6818      	ldr	r0, [r3, #0]
90001bee:	f00f b899 	b.w	90010d24 <osSemaphoreRelease>
90001bf2:	bf00      	nop
90001bf4:	24005bbc 	.word	0x24005bbc
90001bf8:	24005b78 	.word	0x24005b78
90001bfc:	24005ba0 	.word	0x24005ba0
90001c00:	24005ba8 	.word	0x24005ba8
90001c04:	24005b74 	.word	0x24005b74
90001c08:	24005be0 	.word	0x24005be0

90001c0c <_GLOBAL__sub_I_FrameBufferAddress>:
      : max_size_(Size), head_(0), tail_(0), count_(0)
90001c0c:	4b03      	ldr	r3, [pc, #12]	; (90001c1c <_GLOBAL__sub_I_FrameBufferAddress+0x10>)
90001c0e:	2200      	movs	r2, #0
90001c10:	2102      	movs	r1, #2
90001c12:	60da      	str	r2, [r3, #12]
90001c14:	6019      	str	r1, [r3, #0]
90001c16:	e9c3 2201 	strd	r2, r2, [r3, #4]
}
90001c1a:	4770      	bx	lr
90001c1c:	24005bbc 	.word	0x24005bbc

90001c20 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001c20:	2101      	movs	r1, #1
90001c22:	2200      	movs	r2, #0
{
90001c24:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
90001c26:	4608      	mov	r0, r1
90001c28:	f00e fff8 	bl	90010c1c <osSemaphoreNew>
90001c2c:	4b0b      	ldr	r3, [pc, #44]	; (90001c5c <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
90001c2e:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001c30:	b140      	cbz	r0, 90001c44 <_ZN8touchgfx10OSWrappers10initializeEv+0x24>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
90001c32:	2200      	movs	r2, #0
90001c34:	2104      	movs	r1, #4
90001c36:	2001      	movs	r0, #1
90001c38:	f00f f8a0 	bl	90010d7c <osMessageQueueNew>
90001c3c:	4b08      	ldr	r3, [pc, #32]	; (90001c60 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
90001c3e:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001c40:	b130      	cbz	r0, 90001c50 <_ZN8touchgfx10OSWrappers10initializeEv+0x30>
}
90001c42:	bd08      	pop	{r3, pc}
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
90001c44:	4b07      	ldr	r3, [pc, #28]	; (90001c64 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
90001c46:	2128      	movs	r1, #40	; 0x28
90001c48:	4a07      	ldr	r2, [pc, #28]	; (90001c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001c4a:	4808      	ldr	r0, [pc, #32]	; (90001c6c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001c4c:	f025 f9ee 	bl	9002702c <__assert_func>
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
90001c50:	4b07      	ldr	r3, [pc, #28]	; (90001c70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
90001c52:	212c      	movs	r1, #44	; 0x2c
90001c54:	4a04      	ldr	r2, [pc, #16]	; (90001c68 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
90001c56:	4805      	ldr	r0, [pc, #20]	; (90001c6c <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
90001c58:	f025 f9e8 	bl	9002702c <__assert_func>
90001c5c:	24005be8 	.word	0x24005be8
90001c60:	24005be4 	.word	0x24005be4
90001c64:	9002881c 	.word	0x9002881c
90001c68:	90028868 	.word	0x90028868
90001c6c:	90028898 	.word	0x90028898
90001c70:	900288f0 	.word	0x900288f0

90001c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
90001c74:	4b02      	ldr	r3, [pc, #8]	; (90001c80 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
90001c76:	f04f 31ff 	mov.w	r1, #4294967295
90001c7a:	6818      	ldr	r0, [r3, #0]
90001c7c:	f00f b81e 	b.w	90010cbc <osSemaphoreAcquire>
90001c80:	24005be8 	.word	0x24005be8

90001c84 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
90001c84:	4b01      	ldr	r3, [pc, #4]	; (90001c8c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
90001c86:	6818      	ldr	r0, [r3, #0]
90001c88:	f00f b84c 	b.w	90010d24 <osSemaphoreRelease>
90001c8c:	24005be8 	.word	0x24005be8

90001c90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
90001c90:	4b02      	ldr	r3, [pc, #8]	; (90001c9c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
90001c92:	2100      	movs	r1, #0
90001c94:	6818      	ldr	r0, [r3, #0]
90001c96:	f00f b811 	b.w	90010cbc <osSemaphoreAcquire>
90001c9a:	bf00      	nop
90001c9c:	24005be8 	.word	0x24005be8

90001ca0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
90001ca0:	4b01      	ldr	r3, [pc, #4]	; (90001ca8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x8>)
90001ca2:	6818      	ldr	r0, [r3, #0]
90001ca4:	f00f b83e 	b.w	90010d24 <osSemaphoreRelease>
90001ca8:	24005be8 	.word	0x24005be8

90001cac <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
90001cac:	4803      	ldr	r0, [pc, #12]	; (90001cbc <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
90001cae:	2300      	movs	r3, #0
90001cb0:	4903      	ldr	r1, [pc, #12]	; (90001cc0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
90001cb2:	461a      	mov	r2, r3
90001cb4:	6800      	ldr	r0, [r0, #0]
90001cb6:	f00f b89b 	b.w	90010df0 <osMessageQueuePut>
90001cba:	bf00      	nop
90001cbc:	24005be4 	.word	0x24005be4
90001cc0:	2400001c 	.word	0x2400001c

90001cc4 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
90001cc4:	b510      	push	{r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
90001cc6:	2300      	movs	r3, #0
{
90001cc8:	b082      	sub	sp, #8
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
90001cca:	4c07      	ldr	r4, [pc, #28]	; (90001ce8 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
90001ccc:	461a      	mov	r2, r3
90001cce:	a901      	add	r1, sp, #4
90001cd0:	6820      	ldr	r0, [r4, #0]
90001cd2:	f00f f8cf 	bl	90010e74 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
90001cd6:	f04f 33ff 	mov.w	r3, #4294967295
90001cda:	2200      	movs	r2, #0
90001cdc:	a901      	add	r1, sp, #4
90001cde:	6820      	ldr	r0, [r4, #0]
90001ce0:	f00f f8c8 	bl	90010e74 <osMessageQueueGet>
}
90001ce4:	b002      	add	sp, #8
90001ce6:	bd10      	pop	{r4, pc}
90001ce8:	24005be4 	.word	0x24005be4

90001cec <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
90001cec:	6803      	ldr	r3, [r0, #0]
90001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90001cf0:	4718      	bx	r3
90001cf2:	bf00      	nop

90001cf4 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
90001cf4:	2001      	movs	r0, #1
90001cf6:	4770      	bx	lr

90001cf8 <_ZN8STM32DMAD1Ev>:
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
{
    mutexIsRunning = MUTEX_CREATE();
}

STM32DMA::~STM32DMA()
90001cf8:	4905      	ldr	r1, [pc, #20]	; (90001d10 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001cfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001cfe:	4b05      	ldr	r3, [pc, #20]	; (90001d14 <_ZN8STM32DMAD1Ev+0x1c>)
90001d00:	6001      	str	r1, [r0, #0]
90001d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001d06:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001d0a:	f3bf 8f6f 	isb	sy
{
    /* Disable DMA2D global Interrupt */
    NVIC_DisableIRQ(DMA2D_IRQn);
}
90001d0e:	4770      	bx	lr
90001d10:	90028aa4 	.word	0x90028aa4
90001d14:	e000e100 	.word	0xe000e100

90001d18 <_ZN8STM32DMA10initializeEv>:

void STM32DMA::initialize()
{
    /* Ensure DMA2D Clock is enabled */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001d18:	4b0f      	ldr	r3, [pc, #60]	; (90001d58 <_ZN8STM32DMA10initializeEv+0x40>)
{
90001d1a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_FORCE_RESET();
    __HAL_RCC_DMA2D_RELEASE_RESET();

    /* Add transfer complete callback function */
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001d1c:	490f      	ldr	r1, [pc, #60]	; (90001d5c <_ZN8STM32DMA10initializeEv+0x44>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001d1e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001d22:	480f      	ldr	r0, [pc, #60]	; (90001d60 <_ZN8STM32DMA10initializeEv+0x48>)
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001d24:	f042 0210 	orr.w	r2, r2, #16
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
90001d28:	6208      	str	r0, [r1, #32]
    __HAL_RCC_DMA2D_CLK_ENABLE();
90001d2a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90001d2e:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90001d32:	f002 0210 	and.w	r2, r2, #16
90001d36:	9201      	str	r2, [sp, #4]
90001d38:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
90001d3a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001d3c:	f042 0210 	orr.w	r2, r2, #16
90001d40:	67da      	str	r2, [r3, #124]	; 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
90001d42:	6fda      	ldr	r2, [r3, #124]	; 0x7c
90001d44:	f022 0210 	bic.w	r2, r2, #16
90001d48:	67da      	str	r2, [r3, #124]	; 0x7c
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001d4a:	4b06      	ldr	r3, [pc, #24]	; (90001d64 <_ZN8STM32DMA10initializeEv+0x4c>)
90001d4c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001d50:	609a      	str	r2, [r3, #8]

    /* Enable DMA2D global Interrupt */
    NVIC_EnableIRQ(DMA2D_IRQn);
}
90001d52:	b002      	add	sp, #8
90001d54:	4770      	bx	lr
90001d56:	bf00      	nop
90001d58:	58024400 	.word	0x58024400
90001d5c:	2400baec 	.word	0x2400baec
90001d60:	90002111 	.word	0x90002111
90001d64:	e000e100 	.word	0xe000e100

90001d68 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
90001d68:	f240 30ef 	movw	r0, #1007	; 0x3ef
90001d6c:	4770      	bx	lr
90001d6e:	bf00      	nop

90001d70 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
90001d70:	4909      	ldr	r1, [pc, #36]	; (90001d98 <_ZN8STM32DMAD0Ev+0x28>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90001d72:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90001d76:	4b09      	ldr	r3, [pc, #36]	; (90001d9c <_ZN8STM32DMAD0Ev+0x2c>)
90001d78:	b510      	push	{r4, lr}
90001d7a:	6001      	str	r1, [r0, #0]
90001d7c:	4604      	mov	r4, r0
90001d7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90001d82:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90001d86:	f3bf 8f6f 	isb	sy
}
90001d8a:	f640 51a8 	movw	r1, #3496	; 0xda8
90001d8e:	f025 f8b0 	bl	90026ef2 <_ZdlPvj>
90001d92:	4620      	mov	r0, r4
90001d94:	bd10      	pop	{r4, pc}
90001d96:	bf00      	nop
90001d98:	90028aa4 	.word	0x90028aa4
90001d9c:	e000e100 	.word	0xe000e100

90001da0 <_ZN8STM32DMA5startEv>:
                externalJobExecute();
            }
        }
    }

    virtual void start()
90001da0:	b510      	push	{r4, lr}
90001da2:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
90001da4:	f04f 31ff 	mov.w	r1, #4294967295
90001da8:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	; 0xda4
90001dac:	f00e fef0 	bl	90010b90 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
90001db0:	6860      	ldr	r0, [r4, #4]
90001db2:	6803      	ldr	r3, [r0, #0]
90001db4:	681b      	ldr	r3, [r3, #0]
90001db6:	4798      	blx	r3
90001db8:	b978      	cbnz	r0, 90001dda <_ZN8STM32DMA5startEv+0x3a>
90001dba:	7a63      	ldrb	r3, [r4, #9]
90001dbc:	b16b      	cbz	r3, 90001dda <_ZN8STM32DMA5startEv+0x3a>
90001dbe:	7a23      	ldrb	r3, [r4, #8]
90001dc0:	b92b      	cbnz	r3, 90001dce <_ZN8STM32DMA5startEv+0x2e>
        {
            started_by_external_job = false;
            execute();
90001dc2:	6822      	ldr	r2, [r4, #0]
90001dc4:	4620      	mov	r0, r4
            started_by_external_job = false;
90001dc6:	f884 3da0 	strb.w	r3, [r4, #3488]	; 0xda0
            execute();
90001dca:	6a53      	ldr	r3, [r2, #36]	; 0x24
90001dcc:	4798      	blx	r3
        else if(!external_queue.is_empty() && !isRunning)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
90001dce:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001dd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001dd6:	f00e beff 	b.w	90010bd8 <osMutexRelease>
      return count_ == 0;
90001dda:	4b0b      	ldr	r3, [pc, #44]	; (90001e08 <_ZN8STM32DMA5startEv+0x68>)
        else if(!external_queue.is_empty() && !isRunning)
90001ddc:	68da      	ldr	r2, [r3, #12]
90001dde:	2a00      	cmp	r2, #0
90001de0:	d0f5      	beq.n	90001dce <_ZN8STM32DMA5startEv+0x2e>
90001de2:	7a22      	ldrb	r2, [r4, #8]
90001de4:	2a00      	cmp	r2, #0
90001de6:	d1f2      	bne.n	90001dce <_ZN8STM32DMA5startEv+0x2e>
      return buffer_[head_];
90001de8:	6858      	ldr	r0, [r3, #4]
            started_by_external_job = true;
90001dea:	2201      	movs	r2, #1
      return buffer_[head_];
90001dec:	3002      	adds	r0, #2
            started_by_external_job = true;
90001dee:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
     *
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
90001df2:	7222      	strb	r2, [r4, #8]
        External_DMA2D_JobTypeDef& job = external_queue.front();
        DMA2D_CopyBuffer(job);
90001df4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90001df8:	f7ff fe9e 	bl	90001b38 <DMA2D_CopyBuffer>
        MUTEX_UNLOCK(mutexIsRunning);
90001dfc:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	; 0xda4
    }
90001e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
90001e04:	f00e bee8 	b.w	90010bd8 <osMutexRelease>
90001e08:	24005bbc 	.word	0x24005bbc

90001e0c <_ZN8STM32DMA18signalDMAInterruptEv>:
    virtual void signalDMAInterrupt()
90001e0c:	b538      	push	{r3, r4, r5, lr}
        if(started_by_external_job)
90001e0e:	f890 3da0 	ldrb.w	r3, [r0, #3488]	; 0xda0
    virtual void signalDMAInterrupt()
90001e12:	4604      	mov	r4, r0
        if(started_by_external_job)
90001e14:	b943      	cbnz	r3, 90001e28 <_ZN8STM32DMA18signalDMAInterruptEv+0x1c>
            executeCompleted();
90001e16:	6803      	ldr	r3, [r0, #0]
90001e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90001e1a:	4798      	blx	r3
      return count_ == 0;
90001e1c:	4b15      	ldr	r3, [pc, #84]	; (90001e74 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
            if(!external_queue.is_empty() && !isRunning)
90001e1e:	68da      	ldr	r2, [r3, #12]
90001e20:	b10a      	cbz	r2, 90001e26 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001e22:	7a22      	ldrb	r2, [r4, #8]
90001e24:	b1d2      	cbz	r2, 90001e5c <_ZN8STM32DMA18signalDMAInterruptEv+0x50>
    }
90001e26:	bd38      	pop	{r3, r4, r5, pc}
      return count_ == 0;
90001e28:	4b12      	ldr	r3, [pc, #72]	; (90001e74 <_ZN8STM32DMA18signalDMAInterruptEv+0x68>)
90001e2a:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
90001e2c:	2a00      	cmp	r2, #0
90001e2e:	d0fa      	beq.n	90001e26 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
90001e30:	7a01      	ldrb	r1, [r0, #8]
90001e32:	2900      	cmp	r1, #0
90001e34:	d0f7      	beq.n	90001e26 <_ZN8STM32DMA18signalDMAInterruptEv+0x1a>
            isRunning = false;
90001e36:	2100      	movs	r1, #0
      count_--;
90001e38:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
90001e3a:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90001e3e:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90001e40:	1c41      	adds	r1, r0, #1
      count_--;
90001e42:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90001e44:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90001e46:	fbb1 f2f5 	udiv	r2, r1, r5
90001e4a:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90001e4e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
      head_ = (head_ + 1) % max_size_;
90001e52:	6059      	str	r1, [r3, #4]
    }
90001e54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            DMA2D_ExternalJobCompleted(completed_job);
90001e58:	f7ff beb2 	b.w	90001bc0 <DMA2D_ExternalJobCompleted>
      return buffer_[head_];
90001e5c:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90001e5e:	2201      	movs	r2, #1
      return buffer_[head_];
90001e60:	3002      	adds	r0, #2
                started_by_external_job = true;
90001e62:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90001e66:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90001e68:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    }
90001e6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        DMA2D_CopyBuffer(job);
90001e70:	f7ff be62 	b.w	90001b38 <DMA2D_CopyBuffer>
90001e74:	24005bbc 	.word	0x24005bbc

90001e78 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
90001e78:	b538      	push	{r3, r4, r5, lr}
    switch (format)
90001e7a:	7f8b      	ldrb	r3, [r1, #30]
90001e7c:	2b0a      	cmp	r3, #10
90001e7e:	d83e      	bhi.n	90001efe <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x86>
90001e80:	e8df f003 	tbb	[pc, r3]
90001e84:	3d2a063b 	.word	0x3d2a063b
90001e88:	063d3d3d 	.word	0x063d3d3d
90001e8c:	0606      	.short	0x0606
90001e8e:	06          	.byte	0x06
90001e8f:	00          	.byte	0x00
90001e90:	2401      	movs	r4, #1

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001e92:	f8b1 c014 	ldrh.w	ip, [r1, #20]
90001e96:	8ac8      	ldrh	r0, [r1, #22]

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001e98:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001e9a:	4b1c      	ldr	r3, [pc, #112]	; (90001f0c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x94>)
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001e9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ea0:	eba2 020c 	sub.w	r2, r2, ip
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001ea4:	635c      	str	r4, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001ea6:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ea8:	6908      	ldr	r0, [r1, #16]
90001eaa:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001eac:	641a      	str	r2, [r3, #64]	; 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
90001eae:	680d      	ldr	r5, [r1, #0]
90001eb0:	2d08      	cmp	r5, #8
90001eb2:	d013      	beq.n	90001edc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x64>
    {
        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, 0);
90001eb4:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
90001eb6:	61dc      	str	r4, [r3, #28]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001eb8:	4c15      	ldr	r4, [pc, #84]	; (90001f10 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x98>)
        WRITE_REG(DMA2D->FGOR, 0);
90001eba:	611a      	str	r2, [r3, #16]
     *
     * @return The result of the operation.
     */
    operator uint32_t() const
    {
        return color;
90001ebc:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->OCOLR, ((blitOp.color >> 8) & 0xF800) | ((blitOp.color >> 5) & 0x07E0) | ((blitOp.color >> 3) & 0x001F));
90001ebe:	0a0a      	lsrs	r2, r1, #8
90001ec0:	0948      	lsrs	r0, r1, #5
90001ec2:	f3c1 01c4 	ubfx	r1, r1, #3, #5
90001ec6:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90001eca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90001ece:	4302      	orrs	r2, r0
90001ed0:	430a      	orrs	r2, r1
90001ed2:	639a      	str	r2, [r3, #56]	; 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M));
90001ed4:	601c      	str	r4, [r3, #0]
    }
}
90001ed6:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001ed8:	2400      	movs	r4, #0
90001eda:	e7da      	b.n	90001e92 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001edc:	619a      	str	r2, [r3, #24]
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001ede:	611a      	str	r2, [r3, #16]
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001ee0:	625c      	str	r4, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001ee2:	4a0c      	ldr	r2, [pc, #48]	; (90001f14 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x9c>)
90001ee4:	7f0c      	ldrb	r4, [r1, #28]
90001ee6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001eea:	4c0b      	ldr	r4, [pc, #44]	; (90001f18 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa0>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
90001eec:	61da      	str	r2, [r3, #28]
90001eee:	68ca      	ldr	r2, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001ef0:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ef2:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ef4:	60d8      	str	r0, [r3, #12]
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND));
90001ef6:	601c      	str	r4, [r3, #0]
}
90001ef8:	bd38      	pop	{r3, r4, r5, pc}
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
90001efa:	2402      	movs	r4, #2
90001efc:	e7c9      	b.n	90001e92 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1a>
        assert(0 && "Unsupported Format!");
90001efe:	4b07      	ldr	r3, [pc, #28]	; (90001f1c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa4>)
90001f00:	2188      	movs	r1, #136	; 0x88
90001f02:	4a07      	ldr	r2, [pc, #28]	; (90001f20 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xa8>)
90001f04:	4807      	ldr	r0, [pc, #28]	; (90001f24 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0xac>)
90001f06:	f025 f891 	bl	9002702c <__assert_func>
90001f0a:	bf00      	nop
90001f0c:	52001000 	.word	0x52001000
90001f10:	00030201 	.word	0x00030201
90001f14:	00010009 	.word	0x00010009
90001f18:	00020201 	.word	0x00020201
90001f1c:	90028934 	.word	0x90028934
90001f20:	90028950 	.word	0x90028950
90001f24:	9002899c 	.word	0x9002899c

90001f28 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
90001f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
90001f2a:	f891 e01d 	ldrb.w	lr, [r1, #29]
    switch (format)
90001f2e:	f1be 0f0b 	cmp.w	lr, #11
90001f32:	f200 80c1 	bhi.w	900020b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001f36:	e8df f01e 	tbh	[pc, lr, lsl #1]
90001f3a:	0063      	.short	0x0063
90001f3c:	004c0065 	.word	0x004c0065
90001f40:	00bf00bf 	.word	0x00bf00bf
90001f44:	00bf00bf 	.word	0x00bf00bf
90001f48:	000c000c 	.word	0x000c000c
90001f4c:	000c000c 	.word	0x000c000c
90001f50:	000c      	.short	0x000c
        dma2dColorMode = DMA2D_INPUT_L8;
90001f52:	2505      	movs	r5, #5
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
90001f54:	f891 c01e 	ldrb.w	ip, [r1, #30]
    switch (format)
90001f58:	f1bc 0f0b 	cmp.w	ip, #11
90001f5c:	f200 80ac 	bhi.w	900020b8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x190>
90001f60:	e8df f00c 	tbb	[pc, ip]
90001f64:	aa0e4b52 	.word	0xaa0e4b52
90001f68:	06aaaaaa 	.word	0x06aaaaaa
90001f6c:	06060606 	.word	0x06060606
    switch (format)
90001f70:	f1ac 0307 	sub.w	r3, ip, #7
90001f74:	2b03      	cmp	r3, #3
90001f76:	f200 80a5 	bhi.w	900020c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x19c>
90001f7a:	2605      	movs	r6, #5
90001f7c:	2701      	movs	r7, #1
90001f7e:	e001      	b.n	90001f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001f80:	2600      	movs	r6, #0
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
90001f82:	4637      	mov	r7, r6
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001f84:	8a8b      	ldrh	r3, [r1, #20]
90001f86:	8b4a      	ldrh	r2, [r1, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001f88:	8b0c      	ldrh	r4, [r1, #24]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001f8a:	8ac8      	ldrh	r0, [r1, #22]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001f8c:	1ad2      	subs	r2, r2, r3
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001f8e:	1ae4      	subs	r4, r4, r3
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001f90:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
90001f94:	4b52      	ldr	r3, [pc, #328]	; (900020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90001f96:	641a      	str	r2, [r3, #64]	; 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
90001f98:	619a      	str	r2, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
90001f9a:	611c      	str	r4, [r3, #16]
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001f9c:	684a      	ldr	r2, [r1, #4]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
90001f9e:	635f      	str	r7, [r3, #52]	; 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
90001fa0:	6458      	str	r0, [r3, #68]	; 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001fa2:	6908      	ldr	r0, [r1, #16]
90001fa4:	63d8      	str	r0, [r3, #60]	; 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
90001fa6:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
90001fa8:	680a      	ldr	r2, [r1, #0]
90001faa:	2a80      	cmp	r2, #128	; 0x80
90001fac:	d03b      	beq.n	90002026 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
90001fae:	d812      	bhi.n	90001fd6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
90001fb0:	2a20      	cmp	r2, #32
90001fb2:	d02c      	beq.n	9000200e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001fb4:	2a40      	cmp	r2, #64	; 0x40
90001fb6:	d02a      	beq.n	9000200e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
90001fb8:	2a04      	cmp	r2, #4
90001fba:	d169      	bne.n	90002090 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fbc:	7f0a      	ldrb	r2, [r1, #28]
90001fbe:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001fc2:	4a48      	ldr	r2, [pc, #288]	; (900020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fc4:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90001fc8:	61dd      	str	r5, [r3, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001fca:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001fcc:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001fce:	601a      	str	r2, [r3, #0]
}
90001fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
90001fd2:	2500      	movs	r5, #0
90001fd4:	e7be      	b.n	90001f54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
    switch (blitOp.operation)
90001fd6:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
90001fda:	d067      	beq.n	900020ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x184>
90001fdc:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
90001fe0:	d156      	bne.n	90002090 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x168>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90001fe2:	7f0c      	ldrb	r4, [r1, #28]
90001fe4:	4a40      	ldr	r2, [pc, #256]	; (900020e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c0>)
90001fe6:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
90001fea:	61da      	str	r2, [r3, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001fec:	4a3d      	ldr	r2, [pc, #244]	; (900020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
90001fee:	68c9      	ldr	r1, [r1, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
90001ff0:	6219      	str	r1, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
90001ff2:	625e      	str	r6, [r3, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90001ff4:	6158      	str	r0, [r3, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90001ff6:	601a      	str	r2, [r3, #0]
}
90001ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (format)
90001ffa:	2601      	movs	r6, #1
90001ffc:	4637      	mov	r7, r6
90001ffe:	e7c1      	b.n	90001f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
90002000:	2502      	movs	r5, #2
90002002:	e7a7      	b.n	90001f54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB888;
90002004:	2501      	movs	r5, #1
90002006:	e7a5      	b.n	90001f54 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
        dma2dColorMode = DMA2D_INPUT_RGB565;
90002008:	2602      	movs	r6, #2
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
9000200a:	4637      	mov	r7, r6
9000200c:	e7ba      	b.n	90001f84 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x5c>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
9000200e:	7f0b      	ldrb	r3, [r1, #28]
90002010:	4a33      	ldr	r2, [pc, #204]	; (900020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90002012:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002016:	4b33      	ldr	r3, [pc, #204]	; (900020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002018:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
9000201c:	61d5      	str	r5, [r2, #28]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
9000201e:	6256      	str	r6, [r2, #36]	; 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
90002020:	6150      	str	r0, [r2, #20]
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002022:	6013      	str	r3, [r2, #0]
}
90002024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
90002026:	688a      	ldr	r2, [r1, #8]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
90002028:	1d14      	adds	r4, r2, #4
9000202a:	62dc      	str	r4, [r3, #44]	; 0x2c
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
9000202c:	7f0c      	ldrb	r4, [r1, #28]
            switch ((Bitmap::ClutFormat)palette->format)
9000202e:	7811      	ldrb	r1, [r2, #0]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002030:	ea45 6504 	orr.w	r5, r5, r4, lsl #24
90002034:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
90002038:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
9000203a:	625e      	str	r6, [r3, #36]	; 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
9000203c:	6158      	str	r0, [r3, #20]
            switch ((Bitmap::ClutFormat)palette->format)
9000203e:	b9b1      	cbnz	r1, 9000206e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x146>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90002040:	8851      	ldrh	r1, [r2, #2]
            bool blend = true;
90002042:	2401      	movs	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
90002044:	69d8      	ldr	r0, [r3, #28]
90002046:	4a29      	ldr	r2, [pc, #164]	; (900020ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
90002048:	3901      	subs	r1, #1
9000204a:	4002      	ands	r2, r0
9000204c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90002050:	61da      	str	r2, [r3, #28]
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
90002052:	4a23      	ldr	r2, [pc, #140]	; (900020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90002054:	69d3      	ldr	r3, [r2, #28]
90002056:	f043 0320 	orr.w	r3, r3, #32
9000205a:	61d3      	str	r3, [r2, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
9000205c:	69d3      	ldr	r3, [r2, #28]
9000205e:	069b      	lsls	r3, r3, #26
90002060:	d4fc      	bmi.n	9000205c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x134>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
90002062:	2310      	movs	r3, #16
90002064:	6093      	str	r3, [r2, #8]
            if(blend)
90002066:	b324      	cbz	r4, 900020b2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18a>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START);
90002068:	4b1e      	ldr	r3, [pc, #120]	; (900020e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1bc>)
9000206a:	6013      	str	r3, [r2, #0]
}
9000206c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9000206e:	2901      	cmp	r1, #1
90002070:	d12e      	bne.n	900020d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1a8>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002072:	8851      	ldrh	r1, [r2, #2]
                if(blitOp.alpha == 255)
90002074:	3cff      	subs	r4, #255	; 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002076:	69d8      	ldr	r0, [r3, #28]
90002078:	4a1c      	ldr	r2, [pc, #112]	; (900020ec <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c4>)
9000207a:	f101 31ff 	add.w	r1, r1, #4294967295
                if(blitOp.alpha == 255)
9000207e:	bf18      	it	ne
90002080:	2401      	movne	r4, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
90002082:	4002      	ands	r2, r0
90002084:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
90002088:	f042 0210 	orr.w	r2, r2, #16
9000208c:	61da      	str	r2, [r3, #28]
                break;
9000208e:	e7e0      	b.n	90002052 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12a>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002090:	7f0a      	ldrb	r2, [r1, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
90002092:	45e6      	cmp	lr, ip
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
90002094:	4b12      	ldr	r3, [pc, #72]	; (900020e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1b8>)
90002096:	ea45 6502 	orr.w	r5, r5, r2, lsl #24
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
9000209a:	bf14      	ite	ne
9000209c:	4a14      	ldrne	r2, [pc, #80]	; (900020f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
9000209e:	f240 2201 	movweq	r2, #513	; 0x201
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900020a2:	f445 3500 	orr.w	r5, r5, #131072	; 0x20000
900020a6:	61dd      	str	r5, [r3, #28]
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START);
900020a8:	601a      	str	r2, [r3, #0]
}
900020aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
900020ac:	7f0c      	ldrb	r4, [r1, #28]
900020ae:	4a11      	ldr	r2, [pc, #68]	; (900020f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1cc>)
900020b0:	e799      	b.n	90001fe6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbe>
                WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START);
900020b2:	4b0f      	ldr	r3, [pc, #60]	; (900020f0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c8>)
900020b4:	6013      	str	r3, [r2, #0]
}
900020b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        assert(0 && "Unsupported Format!");
900020b8:	4b0f      	ldr	r3, [pc, #60]	; (900020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
900020ba:	2167      	movs	r1, #103	; 0x67
900020bc:	4a0f      	ldr	r2, [pc, #60]	; (900020fc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d4>)
900020be:	4810      	ldr	r0, [pc, #64]	; (90002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
900020c0:	f024 ffb4 	bl	9002702c <__assert_func>
        assert(0 && "Unsupported Format!");
900020c4:	4b0c      	ldr	r3, [pc, #48]	; (900020f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d0>)
900020c6:	2188      	movs	r1, #136	; 0x88
900020c8:	4a0e      	ldr	r2, [pc, #56]	; (90002104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1dc>)
900020ca:	480d      	ldr	r0, [pc, #52]	; (90002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
900020cc:	f024 ffae 	bl	9002702c <__assert_func>
                assert(0 && "Unsupported format");
900020d0:	4b0d      	ldr	r3, [pc, #52]	; (90002108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e0>)
900020d2:	f44f 7189 	mov.w	r1, #274	; 0x112
900020d6:	4a0d      	ldr	r2, [pc, #52]	; (9000210c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1e4>)
900020d8:	4809      	ldr	r0, [pc, #36]	; (90002100 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1d8>)
900020da:	f024 ffa7 	bl	9002702c <__assert_func>
900020de:	bf00      	nop
900020e0:	52001000 	.word	0x52001000
900020e4:	00020201 	.word	0x00020201
900020e8:	00020009 	.word	0x00020009
900020ec:	ffff00ef 	.word	0xffff00ef
900020f0:	00010201 	.word	0x00010201
900020f4:	0002000a 	.word	0x0002000a
900020f8:	90028934 	.word	0x90028934
900020fc:	900289f4 	.word	0x900289f4
90002100:	9002899c 	.word	0x9002899c
90002104:	90028950 	.word	0x90028950
90002108:	90028a40 	.word	0x90028a40
9000210c:	90028a5c 	.word	0x90028a5c

90002110 <DMA2D_XferCpltCallback>:
        dma.signalDMAInterrupt();
90002110:	4b1f      	ldr	r3, [pc, #124]	; (90002190 <DMA2D_XferCpltCallback+0x80>)
90002112:	4920      	ldr	r1, [pc, #128]	; (90002194 <DMA2D_XferCpltCallback+0x84>)
90002114:	681b      	ldr	r3, [r3, #0]
    {
90002116:	b570      	push	{r4, r5, r6, lr}
90002118:	685c      	ldr	r4, [r3, #4]
9000211a:	6823      	ldr	r3, [r4, #0]
9000211c:	695a      	ldr	r2, [r3, #20]
9000211e:	428a      	cmp	r2, r1
90002120:	d125      	bne.n	9000216e <DMA2D_XferCpltCallback+0x5e>
        if(started_by_external_job)
90002122:	f894 2da0 	ldrb.w	r2, [r4, #3488]	; 0xda0
90002126:	b942      	cbnz	r2, 9000213a <DMA2D_XferCpltCallback+0x2a>
            executeCompleted();
90002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9000212a:	4620      	mov	r0, r4
9000212c:	4798      	blx	r3
      return count_ == 0;
9000212e:	4b1a      	ldr	r3, [pc, #104]	; (90002198 <DMA2D_XferCpltCallback+0x88>)
            if(!external_queue.is_empty() && !isRunning)
90002130:	68da      	ldr	r2, [r3, #12]
90002132:	b10a      	cbz	r2, 90002138 <DMA2D_XferCpltCallback+0x28>
90002134:	7a22      	ldrb	r2, [r4, #8]
90002136:	b1f2      	cbz	r2, 90002176 <DMA2D_XferCpltCallback+0x66>
    }
90002138:	bd70      	pop	{r4, r5, r6, pc}
      return count_ == 0;
9000213a:	4b17      	ldr	r3, [pc, #92]	; (90002198 <DMA2D_XferCpltCallback+0x88>)
9000213c:	68da      	ldr	r2, [r3, #12]
        if(!external_queue.is_empty() && isRunning)
9000213e:	2a00      	cmp	r2, #0
90002140:	d0fa      	beq.n	90002138 <DMA2D_XferCpltCallback+0x28>
90002142:	7a21      	ldrb	r1, [r4, #8]
90002144:	2900      	cmp	r1, #0
90002146:	d0f7      	beq.n	90002138 <DMA2D_XferCpltCallback+0x28>
            isRunning = false;
90002148:	2100      	movs	r1, #0
      count_--;
9000214a:	3a01      	subs	r2, #1
      head_ = (head_ + 1) % max_size_;
9000214c:	e9d3 5000 	ldrd	r5, r0, [r3]
            isRunning = false;
90002150:	7221      	strb	r1, [r4, #8]
      head_ = (head_ + 1) % max_size_;
90002152:	1c41      	adds	r1, r0, #1
      count_--;
90002154:	60da      	str	r2, [r3, #12]
      return buffer_[head_];
90002156:	3002      	adds	r0, #2
      head_ = (head_ + 1) % max_size_;
90002158:	fbb1 f2f5 	udiv	r2, r1, r5
9000215c:	fb05 1112 	mls	r1, r5, r2, r1
            DMA2D_ExternalJobCompleted(completed_job);
90002160:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90002164:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      head_ = (head_ + 1) % max_size_;
90002168:	6059      	str	r1, [r3, #4]
            DMA2D_ExternalJobCompleted(completed_job);
9000216a:	f7ff bd29 	b.w	90001bc0 <DMA2D_ExternalJobCompleted>
9000216e:	4620      	mov	r0, r4
90002170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90002174:	4710      	bx	r2
      return buffer_[head_];
90002176:	6858      	ldr	r0, [r3, #4]
                started_by_external_job = true;
90002178:	2201      	movs	r2, #1
      return buffer_[head_];
9000217a:	3002      	adds	r0, #2
                started_by_external_job = true;
9000217c:	f884 2da0 	strb.w	r2, [r4, #3488]	; 0xda0
        isRunning = true;
90002180:	7222      	strb	r2, [r4, #8]
        DMA2D_CopyBuffer(job);
90002182:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
90002186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9000218a:	f7ff bcd5 	b.w	90001b38 <DMA2D_CopyBuffer>
9000218e:	bf00      	nop
90002190:	24026f8c 	.word	0x24026f8c
90002194:	90001e0d 	.word	0x90001e0d
90002198:	24005bbc 	.word	0x24005bbc

9000219c <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
9000219c:	b570      	push	{r4, r5, r6, lr}
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
9000219e:	4b10      	ldr	r3, [pc, #64]	; (900021e0 <_ZN8STM32DMAC1Ev+0x44>)
STM32DMA::STM32DMA()
900021a0:	4606      	mov	r6, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
900021a2:	4604      	mov	r4, r0
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
900021a4:	2500      	movs	r5, #0
900021a6:	300c      	adds	r0, #12
900021a8:	2260      	movs	r2, #96	; 0x60
900021aa:	7235      	strb	r5, [r6, #8]
900021ac:	7275      	strb	r5, [r6, #9]
900021ae:	6070      	str	r0, [r6, #4]
900021b0:	f844 3b20 	str.w	r3, [r4], #32
900021b4:	4621      	mov	r1, r4
900021b6:	f013 fbff 	bl	900159b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
900021ba:	4621      	mov	r1, r4
900021bc:	f506 635a 	add.w	r3, r6, #3488	; 0xda0
        : color(0)
900021c0:	60cd      	str	r5, [r1, #12]
900021c2:	3124      	adds	r1, #36	; 0x24
900021c4:	428b      	cmp	r3, r1
900021c6:	d1fb      	bne.n	900021c0 <_ZN8STM32DMAC1Ev+0x24>
900021c8:	f886 5da0 	strb.w	r5, [r6, #3488]	; 0xda0
    mutexIsRunning = MUTEX_CREATE();
900021cc:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
900021ce:	f8c6 5da4 	str.w	r5, [r6, #3492]	; 0xda4
    mutexIsRunning = MUTEX_CREATE();
900021d2:	f00e fca3 	bl	90010b1c <osMutexNew>
900021d6:	4603      	mov	r3, r0
}
900021d8:	4630      	mov	r0, r6
    mutexIsRunning = MUTEX_CREATE();
900021da:	f8c6 3da4 	str.w	r3, [r6, #3492]	; 0xda4
}
900021de:	bd70      	pop	{r4, r5, r6, pc}
900021e0:	90028aa4 	.word	0x90028aa4

900021e4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
900021e4:	2001      	movs	r0, #1
900021e6:	4770      	bx	lr

900021e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
900021e8:	200c      	movs	r0, #12
900021ea:	4770      	bx	lr

900021ec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
900021ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
900021f0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
900021f4:	3008      	adds	r0, #8
900021f6:	4770      	bx	lr

900021f8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
900021f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
900021fc:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    }
90002200:	3008      	adds	r0, #8
90002202:	4770      	bx	lr

90002204 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002204:	2001      	movs	r0, #1
90002206:	4770      	bx	lr

90002208 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
90002208:	f640 2074 	movw	r0, #2676	; 0xa74
9000220c:	4770      	bx	lr
9000220e:	bf00      	nop

90002210 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002210:	f640 2374 	movw	r3, #2676	; 0xa74
90002214:	fb03 0001 	mla	r0, r3, r1, r0
    }
90002218:	3008      	adds	r0, #8
9000221a:	4770      	bx	lr

9000221c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
9000221c:	f640 2374 	movw	r3, #2676	; 0xa74
90002220:	fb03 0001 	mla	r0, r3, r1, r0
    }
90002224:	3008      	adds	r0, #8
90002226:	4770      	bx	lr

90002228 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
90002228:	2001      	movs	r0, #1
9000222a:	4770      	bx	lr

9000222c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
9000222c:	2010      	movs	r0, #16
9000222e:	4770      	bx	lr

90002230 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002230:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
90002234:	3008      	adds	r0, #8
90002236:	4770      	bx	lr

90002238 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
90002238:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
9000223c:	3008      	adds	r0, #8
9000223e:	4770      	bx	lr

90002240 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoScreen1ScreenNoTransition();
90002240:	4608      	mov	r0, r1
90002242:	f003 b887 	b.w	90005354 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
90002246:	bf00      	nop

90002248 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
90002248:	4b03      	ldr	r3, [pc, #12]	; (90002258 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
9000224a:	b510      	push	{r4, lr}
9000224c:	4604      	mov	r4, r0
9000224e:	6003      	str	r3, [r0, #0]
90002250:	f012 fa1f 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002254:	4620      	mov	r0, r4
90002256:	bd10      	pop	{r4, pc}
90002258:	90028b5c 	.word	0x90028b5c

9000225c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
9000225c:	4b05      	ldr	r3, [pc, #20]	; (90002274 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
9000225e:	b510      	push	{r4, lr}
90002260:	4604      	mov	r4, r0
90002262:	6003      	str	r3, [r0, #0]
90002264:	f012 fa15 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002268:	2114      	movs	r1, #20
9000226a:	4620      	mov	r0, r4
9000226c:	f024 fe41 	bl	90026ef2 <_ZdlPvj>
90002270:	4620      	mov	r0, r4
90002272:	bd10      	pop	{r4, pc}
90002274:	90028b5c 	.word	0x90028b5c

90002278 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
90002278:	4b03      	ldr	r3, [pc, #12]	; (90002288 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
9000227a:	b510      	push	{r4, lr}
9000227c:	4604      	mov	r4, r0
9000227e:	6003      	str	r3, [r0, #0]
90002280:	f012 fa07 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002284:	4620      	mov	r0, r4
90002286:	bd10      	pop	{r4, pc}
90002288:	90028b28 	.word	0x90028b28

9000228c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
9000228c:	4b06      	ldr	r3, [pc, #24]	; (900022a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev+0x1c>)
9000228e:	b510      	push	{r4, lr}
90002290:	4604      	mov	r4, r0
90002292:	6003      	str	r3, [r0, #0]
90002294:	f012 f9fd 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002298:	f640 217c 	movw	r1, #2684	; 0xa7c
9000229c:	4620      	mov	r0, r4
9000229e:	f024 fe28 	bl	90026ef2 <_ZdlPvj>
900022a2:	4620      	mov	r0, r4
900022a4:	bd10      	pop	{r4, pc}
900022a6:	bf00      	nop
900022a8:	90028b28 	.word	0x90028b28

900022ac <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
900022ac:	4b03      	ldr	r3, [pc, #12]	; (900022bc <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
900022ae:	b510      	push	{r4, lr}
900022b0:	4604      	mov	r4, r0
900022b2:	6003      	str	r3, [r0, #0]
900022b4:	f012 f9ed 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022b8:	4620      	mov	r0, r4
900022ba:	bd10      	pop	{r4, pc}
900022bc:	90028af4 	.word	0x90028af4

900022c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
900022c0:	4b05      	ldr	r3, [pc, #20]	; (900022d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev+0x18>)
900022c2:	b510      	push	{r4, lr}
900022c4:	4604      	mov	r4, r0
900022c6:	6003      	str	r3, [r0, #0]
900022c8:	f012 f9e3 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022cc:	2118      	movs	r1, #24
900022ce:	4620      	mov	r0, r4
900022d0:	f024 fe0f 	bl	90026ef2 <_ZdlPvj>
900022d4:	4620      	mov	r0, r4
900022d6:	bd10      	pop	{r4, pc}
900022d8:	90028af4 	.word	0x90028af4

900022dc <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
900022dc:	b510      	push	{r4, lr}
900022de:	4a0c      	ldr	r2, [pc, #48]	; (90002310 <_ZN12FrontendHeapD1Ev+0x34>)
900022e0:	4604      	mov	r4, r0
900022e2:	4b0c      	ldr	r3, [pc, #48]	; (90002314 <_ZN12FrontendHeapD1Ev+0x38>)
900022e4:	f600 20a8 	addw	r0, r0, #2728	; 0xaa8
900022e8:	6022      	str	r2, [r4, #0]
900022ea:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
900022ee:	f012 f9d0 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022f2:	4620      	mov	r0, r4
900022f4:	4b08      	ldr	r3, [pc, #32]	; (90002318 <_ZN12FrontendHeapD1Ev+0x3c>)
900022f6:	f840 3f2c 	str.w	r3, [r0, #44]!
900022fa:	f012 f9ca 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
900022fe:	4620      	mov	r0, r4
90002300:	4b06      	ldr	r3, [pc, #24]	; (9000231c <_ZN12FrontendHeapD1Ev+0x40>)
90002302:	f840 3f14 	str.w	r3, [r0, #20]!
90002306:	f012 f9c4 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000230a:	4620      	mov	r0, r4
9000230c:	bd10      	pop	{r4, pc}
9000230e:	bf00      	nop
90002310:	90028b90 	.word	0x90028b90
90002314:	90028b5c 	.word	0x90028b5c
90002318:	90028b28 	.word	0x90028b28
9000231c:	90028af4 	.word	0x90028af4

90002320 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
90002320:	b510      	push	{r4, lr}
class FrontendHeap : public FrontendHeapBase
90002322:	4c0c      	ldr	r4, [pc, #48]	; (90002354 <__tcf_0+0x34>)
90002324:	4a0c      	ldr	r2, [pc, #48]	; (90002358 <__tcf_0+0x38>)
90002326:	4b0d      	ldr	r3, [pc, #52]	; (9000235c <__tcf_0+0x3c>)
90002328:	f604 20a8 	addw	r0, r4, #2728	; 0xaa8
9000232c:	6022      	str	r2, [r4, #0]
9000232e:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
90002332:	f012 f9ae 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002336:	4620      	mov	r0, r4
90002338:	4b09      	ldr	r3, [pc, #36]	; (90002360 <__tcf_0+0x40>)
9000233a:	f840 3f2c 	str.w	r3, [r0, #44]!
9000233e:	f012 f9a8 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002342:	4620      	mov	r0, r4
90002344:	4b07      	ldr	r3, [pc, #28]	; (90002364 <__tcf_0+0x44>)
        static FrontendHeap instance;
90002346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000234a:	f840 3f14 	str.w	r3, [r0, #20]!
9000234e:	f012 b9a0 	b.w	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002352:	bf00      	nop
90002354:	24005bf0 	.word	0x24005bf0
90002358:	90028b90 	.word	0x90028b90
9000235c:	90028b5c 	.word	0x90028b5c
90002360:	90028b28 	.word	0x90028b28
90002364:	90028af4 	.word	0x90028af4

90002368 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
90002368:	b510      	push	{r4, lr}
9000236a:	4a0e      	ldr	r2, [pc, #56]	; (900023a4 <_ZN12FrontendHeapD0Ev+0x3c>)
9000236c:	4604      	mov	r4, r0
9000236e:	4b0e      	ldr	r3, [pc, #56]	; (900023a8 <_ZN12FrontendHeapD0Ev+0x40>)
90002370:	f600 20a8 	addw	r0, r0, #2728	; 0xaa8
90002374:	6022      	str	r2, [r4, #0]
90002376:	f8c4 3aa8 	str.w	r3, [r4, #2728]	; 0xaa8
9000237a:	f012 f98a 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000237e:	4620      	mov	r0, r4
90002380:	4b0a      	ldr	r3, [pc, #40]	; (900023ac <_ZN12FrontendHeapD0Ev+0x44>)
90002382:	f840 3f2c 	str.w	r3, [r0, #44]!
90002386:	f012 f984 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
9000238a:	4b09      	ldr	r3, [pc, #36]	; (900023b0 <_ZN12FrontendHeapD0Ev+0x48>)
9000238c:	4620      	mov	r0, r4
9000238e:	f840 3f14 	str.w	r3, [r0, #20]!
90002392:	f012 f97e 	bl	90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>
90002396:	4620      	mov	r0, r4
90002398:	f640 6144 	movw	r1, #3652	; 0xe44
9000239c:	f024 fda9 	bl	90026ef2 <_ZdlPvj>
900023a0:	4620      	mov	r0, r4
900023a2:	bd10      	pop	{r4, pc}
900023a4:	90028b90 	.word	0x90028b90
900023a8:	90028b5c 	.word	0x90028b5c
900023ac:	90028b28 	.word	0x90028b28
900023b0:	90028af4 	.word	0x90028af4

900023b4 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 480, 272);

void touchgfx_init()
{
900023b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900023b8:	b082      	sub	sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
900023ba:	2400      	movs	r4, #0
900023bc:	f002 fdde 	bl	90004f7c <_ZN14BitmapDatabase11getInstanceEv>
900023c0:	4605      	mov	r5, r0
900023c2:	f002 fddf 	bl	90004f84 <_ZN14BitmapDatabase15getInstanceSizeEv>
900023c6:	4623      	mov	r3, r4
900023c8:	4601      	mov	r1, r0
900023ca:	4622      	mov	r2, r4
900023cc:	4628      	mov	r0, r5
900023ce:	9400      	str	r4, [sp, #0]
900023d0:	f018 ff9a 	bl	9001b308 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
900023d4:	4b28      	ldr	r3, [pc, #160]	; (90002478 <touchgfx_init+0xc4>)
900023d6:	4a29      	ldr	r2, [pc, #164]	; (9000247c <touchgfx_init+0xc8>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
900023d8:	4620      	mov	r0, r4
        static FrontendHeap instance;
900023da:	4c29      	ldr	r4, [pc, #164]	; (90002480 <touchgfx_init+0xcc>)
900023dc:	601a      	str	r2, [r3, #0]
900023de:	f005 f801 	bl	900073e4 <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
900023e2:	4828      	ldr	r0, [pc, #160]	; (90002484 <touchgfx_init+0xd0>)
900023e4:	f018 fef8 	bl	9001b1d8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
900023e8:	7823      	ldrb	r3, [r4, #0]
900023ea:	f3bf 8f5b 	dmb	ish
900023ee:	07db      	lsls	r3, r3, #31
900023f0:	d505      	bpl.n	900023fe <touchgfx_init+0x4a>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
900023f2:	4825      	ldr	r0, [pc, #148]	; (90002488 <touchgfx_init+0xd4>)
}
900023f4:	b002      	add	sp, #8
900023f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
900023fa:	f7fe bbc9 	b.w	90000b90 <_ZN11TouchGFXHAL10initializeEv>
900023fe:	4620      	mov	r0, r4
90002400:	f024 fd79 	bl	90026ef6 <__cxa_guard_acquire>
90002404:	2800      	cmp	r0, #0
90002406:	d0f4      	beq.n	900023f2 <touchgfx_init+0x3e>
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
90002408:	4d20      	ldr	r5, [pc, #128]	; (9000248c <touchgfx_init+0xd8>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
9000240a:	4b21      	ldr	r3, [pc, #132]	; (90002490 <touchgfx_init+0xdc>)
9000240c:	f605 46e8 	addw	r6, r5, #3304	; 0xce8
90002410:	f105 0014 	add.w	r0, r5, #20
90002414:	f105 082c 	add.w	r8, r5, #44	; 0x2c
90002418:	f605 27a8 	addw	r7, r5, #2728	; 0xaa8
9000241c:	602b      	str	r3, [r5, #0]
9000241e:	60ef      	str	r7, [r5, #12]
90002420:	612e      	str	r6, [r5, #16]
90002422:	e9c5 0801 	strd	r0, r8, [r5, #4]
90002426:	f012 f935 	bl	90014694 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000242a:	4b1a      	ldr	r3, [pc, #104]	; (90002494 <touchgfx_init+0xe0>)
9000242c:	4640      	mov	r0, r8
9000242e:	616b      	str	r3, [r5, #20]
90002430:	f012 f930 	bl	90014694 <_ZN8touchgfx17AbstractPartitionC1Ev>
90002434:	4b18      	ldr	r3, [pc, #96]	; (90002498 <touchgfx_init+0xe4>)
90002436:	4638      	mov	r0, r7
90002438:	62eb      	str	r3, [r5, #44]	; 0x2c
9000243a:	f012 f92b 	bl	90014694 <_ZN8touchgfx17AbstractPartitionC1Ev>
9000243e:	4b17      	ldr	r3, [pc, #92]	; (9000249c <touchgfx_init+0xe8>)
90002440:	f605 20bc 	addw	r0, r5, #2748	; 0xabc
90002444:	f8c5 3aa8 	str.w	r3, [r5, #2728]	; 0xaa8
90002448:	f005 f852 	bl	900074f0 <_ZN5ModelC1Ev>
9000244c:	462a      	mov	r2, r5
9000244e:	f605 21bc 	addw	r1, r5, #2748	; 0xabc
90002452:	4630      	mov	r0, r6
90002454:	f005 f840 	bl	900074d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
90002458:	4630      	mov	r0, r6
9000245a:	f002 ff7b 	bl	90005354 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
        static FrontendHeap instance;
9000245e:	4810      	ldr	r0, [pc, #64]	; (900024a0 <touchgfx_init+0xec>)
90002460:	f024 fe02 	bl	90027068 <atexit>
90002464:	4620      	mov	r0, r4
90002466:	f024 fd52 	bl	90026f0e <__cxa_guard_release>
9000246a:	4807      	ldr	r0, [pc, #28]	; (90002488 <touchgfx_init+0xd4>)
}
9000246c:	b002      	add	sp, #8
9000246e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
90002472:	f7fe bb8d 	b.w	90000b90 <_ZN11TouchGFXHAL10initializeEv>
90002476:	bf00      	nop
90002478:	24026fe8 	.word	0x24026fe8
9000247c:	24007868 	.word	0x24007868
90002480:	24005bec 	.word	0x24005bec
90002484:	24000020 	.word	0x24000020
90002488:	240077e0 	.word	0x240077e0
9000248c:	24005bf0 	.word	0x24005bf0
90002490:	90028b90 	.word	0x90028b90
90002494:	90028af4 	.word	0x90028af4
90002498:	90028b28 	.word	0x90028b28
9000249c:	90028b5c 	.word	0x90028b5c
900024a0:	90002321 	.word	0x90002321

900024a4 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
900024a4:	4770      	bx	lr
900024a6:	bf00      	nop

900024a8 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
900024a8:	4801      	ldr	r0, [pc, #4]	; (900024b0 <touchgfx_taskEntry+0x8>)
900024aa:	f7fe bb37 	b.w	90000b1c <_ZN11TouchGFXHAL9taskEntryEv>
900024ae:	bf00      	nop
900024b0:	240077e0 	.word	0x240077e0

900024b4 <_GLOBAL__sub_I_touchgfx_init>:
}
900024b4:	b570      	push	{r4, r5, r6, lr}
{
public:

    STM32TouchController() {}
900024b6:	4b26      	ldr	r3, [pc, #152]	; (90002550 <_GLOBAL__sub_I_touchgfx_init+0x9c>)
900024b8:	4c26      	ldr	r4, [pc, #152]	; (90002554 <_GLOBAL__sub_I_touchgfx_init+0xa0>)
static STM32DMA dma;
900024ba:	4e27      	ldr	r6, [pc, #156]	; (90002558 <_GLOBAL__sub_I_touchgfx_init+0xa4>)
static LCD16bpp display;
900024bc:	4d27      	ldr	r5, [pc, #156]	; (9000255c <_GLOBAL__sub_I_touchgfx_init+0xa8>)
900024be:	6023      	str	r3, [r4, #0]
static STM32DMA dma;
900024c0:	4630      	mov	r0, r6
900024c2:	f7ff fe6b 	bl	9000219c <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
900024c6:	4628      	mov	r0, r5
900024c8:	f01c f828 	bl	9001e51c <_ZN8touchgfx8LCD16bppC1Ev>
          lastRenderMethod(HARDWARE)
900024cc:	4b24      	ldr	r3, [pc, #144]	; (90002560 <_GLOBAL__sub_I_touchgfx_init+0xac>)
900024ce:	2200      	movs	r2, #0
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900024d0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
900024d4:	f44f 7188 	mov.w	r1, #272	; 0x110
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
900024d8:	62da      	str	r2, [r3, #44]	; 0x2c
900024da:	861a      	strh	r2, [r3, #48]	; 0x30
          lastRenderMethod(HARDWARE)
900024dc:	669a      	str	r2, [r3, #104]	; 0x68
900024de:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
900024e2:	671a      	str	r2, [r3, #112]	; 0x70
900024e4:	e9c3 4203 	strd	r4, r2, [r3, #12]
900024e8:	4c1e      	ldr	r4, [pc, #120]	; (90002564 <_GLOBAL__sub_I_touchgfx_init+0xb0>)
900024ea:	665c      	str	r4, [r3, #100]	; 0x64
900024ec:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
900024f0:	675c      	str	r4, [r3, #116]	; 0x74
900024f2:	2401      	movs	r4, #1
900024f4:	f883 4078 	strb.w	r4, [r3, #120]	; 0x78
        instance = this;
900024f8:	4c1b      	ldr	r4, [pc, #108]	; (90002568 <_GLOBAL__sub_I_touchgfx_init+0xb4>)
900024fa:	6023      	str	r3, [r4, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
900024fc:	4c1b      	ldr	r4, [pc, #108]	; (9000256c <_GLOBAL__sub_I_touchgfx_init+0xb8>)
900024fe:	8020      	strh	r0, [r4, #0]
90002500:	4c1b      	ldr	r4, [pc, #108]	; (90002570 <_GLOBAL__sub_I_touchgfx_init+0xbc>)
          lastRenderMethod(HARDWARE)
90002502:	e9c3 6501 	strd	r6, r5, [r3, #4]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
90002506:	8020      	strh	r0, [r4, #0]
          lastRenderMethod(HARDWARE)
90002508:	f44f 7580 	mov.w	r5, #256	; 0x100
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
9000250c:	4c19      	ldr	r4, [pc, #100]	; (90002574 <_GLOBAL__sub_I_touchgfx_init+0xc0>)
9000250e:	481a      	ldr	r0, [pc, #104]	; (90002578 <_GLOBAL__sub_I_touchgfx_init+0xc4>)
          lastRenderMethod(HARDWARE)
90002510:	649d      	str	r5, [r3, #72]	; 0x48
90002512:	e9c3 2205 	strd	r2, r2, [r3, #20]
90002516:	e9c3 2207 	strd	r2, r2, [r3, #28]
9000251a:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
9000251e:	e9c3 220e 	strd	r2, r2, [r3, #56]	; 0x38
90002522:	e9c3 2210 	strd	r2, r2, [r3, #64]	; 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
90002526:	e9c3 2213 	strd	r2, r2, [r3, #76]	; 0x4c
9000252a:	e9c3 2215 	strd	r2, r2, [r3, #84]	; 0x54
9000252e:	e9c3 2217 	strd	r2, r2, [r3, #92]	; 0x5c
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
90002532:	8021      	strh	r1, [r4, #0]
90002534:	8001      	strh	r1, [r0, #0]
        DISPLAY_ROTATION = rotate0;
90002536:	4c11      	ldr	r4, [pc, #68]	; (9000257c <_GLOBAL__sub_I_touchgfx_init+0xc8>)
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
90002538:	4811      	ldr	r0, [pc, #68]	; (90002580 <_GLOBAL__sub_I_touchgfx_init+0xcc>)
9000253a:	4912      	ldr	r1, [pc, #72]	; (90002584 <_GLOBAL__sub_I_touchgfx_init+0xd0>)
          cc_in(0)
9000253c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
90002540:	7022      	strb	r2, [r4, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
90002542:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
90002546:	6018      	str	r0, [r3, #0]
90002548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
9000254c:	67d9      	str	r1, [r3, #124]	; 0x7c
}
9000254e:	bd70      	pop	{r4, r5, r6, pc}
90002550:	90028264 	.word	0x90028264
90002554:	24006a34 	.word	0x24006a34
90002558:	24006a38 	.word	0x24006a38
9000255c:	2400786c 	.word	0x2400786c
90002560:	240077e0 	.word	0x240077e0
90002564:	01000001 	.word	0x01000001
90002568:	24026f8c 	.word	0x24026f8c
9000256c:	24026f80 	.word	0x24026f80
90002570:	24026f86 	.word	0x24026f86
90002574:	24026f82 	.word	0x24026f82
90002578:	24026f88 	.word	0x24026f88
9000257c:	24026f84 	.word	0x24026f84
90002580:	900283f4 	.word	0x900283f4
90002584:	9002823c 	.word	0x9002823c

90002588 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
90002588:	4801      	ldr	r0, [pc, #4]	; (90002590 <_GLOBAL__sub_D_touchgfx_init+0x8>)
9000258a:	f7ff bbb5 	b.w	90001cf8 <_ZN8STM32DMAD1Ev>
9000258e:	bf00      	nop
90002590:	24006a38 	.word	0x24006a38

90002594 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * drawn by the widget.
     */
    virtual void invalidateContent() const
    {
        // Consider checking if *this is in the draw chain
        if (visible)
90002594:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002598:	b112      	cbz	r2, 900025a0 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
        {
            invalidate();
9000259a:	6803      	ldr	r3, [r0, #0]
9000259c:	695b      	ldr	r3, [r3, #20]
9000259e:	4718      	bx	r3
        }
    }
900025a0:	4770      	bx	lr
900025a2:	bf00      	nop

900025a4 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
900025a4:	2000      	movs	r0, #0
900025a6:	4770      	bx	lr

900025a8 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
900025a8:	8081      	strh	r1, [r0, #4]
    }
900025aa:	4770      	bx	lr

900025ac <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
900025ac:	80c1      	strh	r1, [r0, #6]
    }
900025ae:	4770      	bx	lr

900025b0 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
900025b0:	8101      	strh	r1, [r0, #8]
    }
900025b2:	4770      	bx	lr

900025b4 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
900025b4:	8141      	strh	r1, [r0, #10]
    }
900025b6:	4770      	bx	lr

900025b8 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
900025b8:	4770      	bx	lr
900025ba:	bf00      	nop

900025bc <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
900025bc:	4770      	bx	lr
900025be:	bf00      	nop

900025c0 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
900025c0:	4770      	bx	lr
900025c2:	bf00      	nop

900025c4 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
900025c4:	4770      	bx	lr
900025c6:	bf00      	nop

900025c8 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
900025c8:	4770      	bx	lr
900025ca:	bf00      	nop

900025cc <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
    {
        moveRelative(x - rect.x, y - rect.y);
900025cc:	f8b0 c006 	ldrh.w	ip, [r0, #6]
900025d0:	6803      	ldr	r3, [r0, #0]
900025d2:	eba2 020c 	sub.w	r2, r2, ip
900025d6:	f8b0 c004 	ldrh.w	ip, [r0, #4]
900025da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900025dc:	eba1 010c 	sub.w	r1, r1, ip
900025e0:	b212      	sxth	r2, r2
900025e2:	b209      	sxth	r1, r1
900025e4:	4718      	bx	r3
900025e6:	bf00      	nop

900025e8 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
900025e8:	6813      	ldr	r3, [r2, #0]
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900025ea:	f64f 7cff 	movw	ip, #65535	; 0xffff
        cachedAbsX = UNCACHED_INDICATOR;
900025ee:	f04f 31ff 	mov.w	r1, #4294967295
        cachedVisibleRect.x = UNCACHED_INDICATOR;
900025f2:	f8a0 c00c 	strh.w	ip, [r0, #12]
        nextDrawChainElement = *nextPreviousElement;
900025f6:	e9c0 3107 	strd	r3, r1, [r0, #28]
        *nextPreviousElement = this;
900025fa:	6010      	str	r0, [r2, #0]
    }
900025fc:	4770      	bx	lr
900025fe:	bf00      	nop

90002600 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
90002600:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
90002604:	b11a      	cbz	r2, 9000260e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
90002606:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
9000260a:	b102      	cbz	r2, 9000260e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
9000260c:	6018      	str	r0, [r3, #0]
        }
    }
9000260e:	4770      	bx	lr

90002610 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
    }

    virtual Bitmap::BitmapFormat framebufferFormat() const
    {
        return Bitmap::RGB565;
    }
90002610:	2000      	movs	r0, #0
90002612:	4770      	bx	lr

90002614 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90002614:	4b03      	ldr	r3, [pc, #12]	; (90002624 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0x10>)
90002616:	2290      	movs	r2, #144	; 0x90
90002618:	f883 235a 	strb.w	r2, [r3, #858]	; 0x35a
9000261c:	f883 2358 	strb.w	r2, [r3, #856]	; 0x358

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
    NVIC_SetPriority(LTDC_IRQn, 9);
}
90002620:	4770      	bx	lr
90002622:	bf00      	nop
90002624:	e000e100 	.word	0xe000e100

90002628 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:
    NVIC_DisableIRQ(LTDC_IRQn);
}

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002628:	4a09      	ldr	r2, [pc, #36]	; (90002650 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x28>)
9000262a:	490a      	ldr	r1, [pc, #40]	; (90002654 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x2c>)
9000262c:	68d3      	ldr	r3, [r2, #12]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000262e:	480a      	ldr	r0, [pc, #40]	; (90002658 <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv+0x30>)
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
90002630:	f3c3 030a 	ubfx	r3, r3, #0, #11
90002634:	3b01      	subs	r3, #1
90002636:	b29b      	uxth	r3, r3
90002638:	800b      	strh	r3, [r1, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
9000263a:	6911      	ldr	r1, [r2, #16]
9000263c:	f3c1 010a 	ubfx	r1, r1, #0, #11
90002640:	3901      	subs	r1, #1
90002642:	8001      	strh	r1, [r0, #0]

    /* Sets the Line Interrupt position */
    LTDC->LIPCR = lcd_int_active_line;
90002644:	6413      	str	r3, [r2, #64]	; 0x40
    /* Line Interrupt Enable            */
    LTDC->IER |= LTDC_IER_LIE;
90002646:	6b53      	ldr	r3, [r2, #52]	; 0x34
90002648:	f043 0301 	orr.w	r3, r3, #1
9000264c:	6353      	str	r3, [r2, #52]	; 0x34
}
9000264e:	4770      	bx	lr
90002650:	50001000 	.word	0x50001000
90002654:	240078e8 	.word	0x240078e8
90002658:	240078e6 	.word	0x240078e6

9000265c <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:
    videoController.endFrame();
}

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
    return (uint16_t*)LTDC_Layer1->CFBAR;
9000265c:	4b01      	ldr	r3, [pc, #4]	; (90002664 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x8>)
9000265e:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
}
90002662:	4770      	bx	lr
90002664:	50001000 	.word	0x50001000

90002668 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    LTDC_Layer1->CFBAR = (uint32_t)adr;
90002668:	4b02      	ldr	r3, [pc, #8]	; (90002674 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt+0xc>)

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
9000266a:	2201      	movs	r2, #1
    LTDC_Layer1->CFBAR = (uint32_t)adr;
9000266c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
90002670:	625a      	str	r2, [r3, #36]	; 0x24
}
90002672:	4770      	bx	lr
90002674:	50001000 	.word	0x50001000

90002678 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
90002678:	e9c0 120c 	strd	r1, r2, [r0, #48]	; 0x30
        topBufferRGB = bufferRGB;
9000267c:	6381      	str	r1, [r0, #56]	; 0x38
        sizeBufferRGB = sizeOfBuffer;
    }
9000267e:	4770      	bx	lr

90002680 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002680:	4770      	bx	lr
90002682:	bf00      	nop

90002684 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
90002684:	eb00 0081 	add.w	r0, r0, r1, lsl #2
90002688:	4611      	mov	r1, r2
9000268a:	6840      	ldr	r0, [r0, #4]
9000268c:	6803      	ldr	r3, [r0, #0]
9000268e:	68db      	ldr	r3, [r3, #12]
90002690:	4718      	bx	r3
90002692:	bf00      	nop

90002694 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
90002694:	b510      	push	{r4, lr}
90002696:	4604      	mov	r4, r0
90002698:	2148      	movs	r1, #72	; 0x48
9000269a:	f024 fc2a 	bl	90026ef2 <_ZdlPvj>
9000269e:	4620      	mov	r0, r4
900026a0:	bd10      	pop	{r4, pc}
900026a2:	bf00      	nop

900026a4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm>:
        mjpegDecoders[handle]->getVideoInfo(data);
    }

    virtual bool getIsPlaying(const Handle handle)
    {
        assert(handle < no_streams);
900026a4:	b911      	cbnz	r1, 900026ac <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x8>
        Stream& stream = streams[handle];
        return stream.isPlaying;
    }
900026a6:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900026aa:	4770      	bx	lr
    virtual bool getIsPlaying(const Handle handle)
900026ac:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900026ae:	4a03      	ldr	r2, [pc, #12]	; (900026bc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x18>)
900026b0:	f44f 71b8 	mov.w	r1, #368	; 0x170
900026b4:	4b02      	ldr	r3, [pc, #8]	; (900026c0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x1c>)
900026b6:	4803      	ldr	r0, [pc, #12]	; (900026c4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12getIsPlayingEm+0x20>)
900026b8:	f024 fcb8 	bl	9002702c <__assert_func>
900026bc:	90028bb0 	.word	0x90028bb0
900026c0:	90028b9c 	.word	0x90028b9c
900026c4:	90028d3c 	.word	0x90028d3c

900026c8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE>:
        assert(handle < no_streams);
900026c8:	b921      	cbnz	r1, 900026d4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0xc>
        mjpegDecoders[handle]->getVideoInfo(data);
900026ca:	6840      	ldr	r0, [r0, #4]
900026cc:	4611      	mov	r1, r2
900026ce:	6803      	ldr	r3, [r0, #0]
900026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900026d2:	4718      	bx	r3
        assert(handle < no_streams);
900026d4:	4b03      	ldr	r3, [pc, #12]	; (900026e4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x1c>)
900026d6:	f44f 71b5 	mov.w	r1, #362	; 0x16a
900026da:	4a03      	ldr	r2, [pc, #12]	; (900026e8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
900026dc:	4803      	ldr	r0, [pc, #12]	; (900026ec <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
900026de:	b510      	push	{r4, lr}
        assert(handle < no_streams);
900026e0:	f024 fca4 	bl	9002702c <__assert_func>
900026e4:	90028b9c 	.word	0x90028b9c
900026e8:	90028d80 	.word	0x90028d80
900026ec:	90028d3c 	.word	0x90028d3c

900026f0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm>:
        assert(handle < no_streams);
900026f0:	b909      	cbnz	r1, 900026f6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x6>
    }
900026f2:	68c0      	ldr	r0, [r0, #12]
900026f4:	4770      	bx	lr
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
900026f6:	b508      	push	{r3, lr}
        assert(handle < no_streams);
900026f8:	4a02      	ldr	r2, [pc, #8]	; (90002704 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x14>)
900026fa:	2179      	movs	r1, #121	; 0x79
900026fc:	4b02      	ldr	r3, [pc, #8]	; (90002708 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x18>)
900026fe:	4803      	ldr	r0, [pc, #12]	; (9000270c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21getCurrentFrameNumberEm+0x1c>)
90002700:	f024 fc94 	bl	9002702c <__assert_func>
90002704:	90028f30 	.word	0x90028f30
90002708:	90028b9c 	.word	0x90028b9c
9000270c:	90028d3c 	.word	0x90028d3c

90002710 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
90002710:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002712:	460c      	mov	r4, r1
90002714:	b949      	cbnz	r1, 9000272a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x1a>
90002716:	4611      	mov	r1, r2
90002718:	461a      	mov	r2, r3
        mjpegDecoders[handle]->setVideoData(movie, length);
9000271a:	6843      	ldr	r3, [r0, #4]
        stream.frameNumber = 0;
9000271c:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
9000271e:	681c      	ldr	r4, [r3, #0]
90002720:	4618      	mov	r0, r3
90002722:	68a3      	ldr	r3, [r4, #8]
    }
90002724:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
90002728:	4718      	bx	r3
        assert(handle < no_streams);
9000272a:	4b03      	ldr	r3, [pc, #12]	; (90002738 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x28>)
9000272c:	2190      	movs	r1, #144	; 0x90
9000272e:	4a03      	ldr	r2, [pc, #12]	; (9000273c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x2c>)
90002730:	4803      	ldr	r0, [pc, #12]	; (90002740 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setVideoDataEmPKhm+0x30>)
90002732:	f024 fc7b 	bl	9002702c <__assert_func>
90002736:	bf00      	nop
90002738:	90028b9c 	.word	0x90028b9c
9000273c:	900290e4 	.word	0x900290e4
90002740:	90028d3c 	.word	0x90028d3c

90002744 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm>:
        assert(handle < no_streams);
90002744:	b921      	cbnz	r1, 90002750 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0xc>
        stream.tickCount = 0;
90002746:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
9000274a:	e9c0 3206 	strd	r3, r2, [r0, #24]
9000274e:	4770      	bx	lr
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
90002750:	b508      	push	{r3, lr}
        assert(handle < no_streams);
90002752:	4a03      	ldr	r2, [pc, #12]	; (90002760 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x1c>)
90002754:	2182      	movs	r1, #130	; 0x82
90002756:	4b03      	ldr	r3, [pc, #12]	; (90002764 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x20>)
90002758:	4803      	ldr	r0, [pc, #12]	; (90002768 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE12setFrameRateEmmm+0x24>)
9000275a:	f024 fc67 	bl	9002702c <__assert_func>
9000275e:	bf00      	nop
90002760:	900292c0 	.word	0x900292c0
90002764:	90028b9c 	.word	0x90028b9c
90002768:	90028d3c 	.word	0x90028d3c

9000276c <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:
    return HAL::beginFrame();
9000276c:	f012 ba74 	b.w	90014c58 <_ZN8touchgfx3HAL10beginFrameEv>

90002770 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
    if (frameBufferUpdatedThisFrame)
90002770:	f890 304b 	ldrb.w	r3, [r0, #75]	; 0x4b
{
90002774:	b510      	push	{r4, lr}
    if (frameBufferUpdatedThisFrame)
90002776:	b113      	cbz	r3, 9000277e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0xe>
        refreshRequested = true;
90002778:	4b1a      	ldr	r3, [pc, #104]	; (900027e4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x74>)
9000277a:	2201      	movs	r2, #1
9000277c:	701a      	strb	r2, [r3, #0]
            if (stream.isPlaying || stream.isShowingOneFrame)
9000277e:	4c1a      	ldr	r4, [pc, #104]	; (900027e8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x78>)
    HAL::endFrame();
90002780:	f012 fa76 	bl	90014c70 <_ZN8touchgfx3HAL8endFrameEv>
90002784:	f894 3029 	ldrb.w	r3, [r4, #41]	; 0x29
90002788:	b963      	cbnz	r3, 900027a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
9000278a:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
9000278e:	b94b      	cbnz	r3, 900027a4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x34>
        firstDrawThisFrame = true;
90002790:	2301      	movs	r3, #1
        SEM_POST(semDecode);
90002792:	6c20      	ldr	r0, [r4, #64]	; 0x40
        firstDrawThisFrame = true;
90002794:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        SEM_POST(semDecode);
90002798:	f00e fac4 	bl	90010d24 <osSemaphoreRelease>
        if (uiHasMutex)
9000279c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
900027a0:	b9cb      	cbnz	r3, 900027d6 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x66>
}
900027a2:	bd10      	pop	{r4, pc}
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
900027a4:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
900027a8:	69e1      	ldr	r1, [r4, #28]
900027aa:	6922      	ldr	r2, [r4, #16]
900027ac:	fb00 f303 	mul.w	r3, r0, r3
900027b0:	fb01 f202 	mul.w	r2, r1, r2
900027b4:	4293      	cmp	r3, r2
900027b6:	d3eb      	bcc.n	90002790 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
        {
            if (allowSkipFrames)
900027b8:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
900027bc:	b138      	cbz	r0, 900027ce <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x5e>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
900027be:	1a9b      	subs	r3, r3, r2
900027c0:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
900027c4:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
900027c6:	bf98      	it	ls
900027c8:	f102 32ff 	addls.w	r2, r2, #4294967295
900027cc:	6262      	str	r2, [r4, #36]	; 0x24
                    stream.doDecode = true;
900027ce:	2301      	movs	r3, #1
900027d0:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
        for (uint32_t i = 0; i < no_streams; i++)
900027d4:	e7dc      	b.n	90002790 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x20>
            MUTEX_UNLOCK(mutexBuffers);
900027d6:	6c60      	ldr	r0, [r4, #68]	; 0x44
900027d8:	f00e f9fe 	bl	90010bd8 <osMutexRelease>
            uiHasMutex = false;
900027dc:	2300      	movs	r3, #0
900027de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
900027e2:	bd10      	pop	{r4, pc}
900027e4:	240078e4 	.word	0x240078e4
900027e8:	24007934 	.word	0x24007934

900027ec <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
900027ec:	f012 b9fe 	b.w	90014bec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

900027f0 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
900027f0:	f012 bb59 	b.w	90014ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

900027f4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
900027f4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
900027f8:	b903      	cbnz	r3, 900027fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x8>
900027fa:	4770      	bx	lr
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
900027fc:	b510      	push	{r4, lr}
            MUTEX_LOCK(mutexBuffers);
900027fe:	f04f 31ff 	mov.w	r1, #4294967295
90002802:	4604      	mov	r4, r0
90002804:	6c40      	ldr	r0, [r0, #68]	; 0x44
90002806:	f00e f9c3 	bl	90010b90 <osMutexAcquire>
            firstDrawThisFrame = false;
9000280a:	f44f 7380 	mov.w	r3, #256	; 0x100
9000280e:	f8a4 303d 	strh.w	r3, [r4, #61]	; 0x3d
    }
90002812:	bd10      	pop	{r4, pc}

90002814 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
90002814:	b538      	push	{r3, r4, r5, lr}
90002816:	460c      	mov	r4, r1
90002818:	4605      	mov	r5, r0
        MUTEX_LOCK(mutexBuffers);
9000281a:	f04f 31ff 	mov.w	r1, #4294967295
9000281e:	6c40      	ldr	r0, [r0, #68]	; 0x44
        streams[handle].isActive = false;
90002820:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
        MUTEX_LOCK(mutexBuffers);
90002824:	f00e f9b4 	bl	90010b90 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
90002828:	6c68      	ldr	r0, [r5, #68]	; 0x44
9000282a:	f00e f9d5 	bl	90010bd8 <osMutexRelease>
        streams[handle].isActive = false;
9000282e:	2300      	movs	r3, #0
90002830:	eb05 0484 	add.w	r4, r5, r4, lsl #2
90002834:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (oneIsActive == false)
90002838:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
9000283c:	b90b      	cbnz	r3, 90002842 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE21unregisterVideoWidgetEm+0x2e>
            topBufferRGB = bufferRGB;
9000283e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
90002840:	63ab      	str	r3, [r5, #56]	; 0x38
    }
90002842:	bd38      	pop	{r3, r4, r5, pc}

90002844 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
{
    // If the framebuffer is placed in Write Through cached memory (e.g. SRAM) then
    // the DCache must be flushed prior to DMA2D accessing it. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable "CPU Cache" in the
    // "System Core" settings for "Cortex M7" in CubeMX in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
90002844:	4814      	ldr	r0, [pc, #80]	; (90002898 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x54>)
90002846:	6943      	ldr	r3, [r0, #20]
90002848:	03d9      	lsls	r1, r3, #15
9000284a:	d523      	bpl.n	90002894 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x50>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
9000284c:	2300      	movs	r3, #0
{
9000284e:	b510      	push	{r4, lr}
90002850:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
90002854:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90002858:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000285c:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
90002860:	f3c3 3c4e 	ubfx	ip, r3, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002864:	f3c3 0ec9 	ubfx	lr, r3, #3, #10
90002868:	ea4f 1c4c 	mov.w	ip, ip, lsl #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
9000286c:	ea0c 0104 	and.w	r1, ip, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90002870:	4673      	mov	r3, lr
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002872:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
90002876:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
90002878:	f8c0 2274 	str.w	r2, [r0, #628]	; 0x274
      } while (ways-- != 0U);
9000287c:	1c5a      	adds	r2, r3, #1
9000287e:	d1f8      	bne.n	90002872 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2e>
    } while(sets-- != 0U);
90002880:	f1ac 0c20 	sub.w	ip, ip, #32
90002884:	f11c 0f20 	cmn.w	ip, #32
90002888:	d1f0      	bne.n	9000286c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x28>
9000288a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
9000288e:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
90002892:	bd10      	pop	{r4, pc}
90002894:	4770      	bx	lr
90002896:	bf00      	nop
90002898:	e000ed00 	.word	0xe000ed00

9000289c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
9000289c:	b510      	push	{r4, lr}
        assert(handle < no_streams);
9000289e:	2900      	cmp	r1, #0
900028a0:	d133      	bne.n	9000290a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x6e>
900028a2:	4604      	mov	r4, r0
        switch (cmd)
900028a4:	2a05      	cmp	r2, #5
900028a6:	d809      	bhi.n	900028bc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
900028a8:	e8df f002 	tbb	[pc, r2]
900028ac:	211c1809 	.word	0x211c1809
900028b0:	0329      	.short	0x0329
            stream.repeat = (param > 0);
900028b2:	3b00      	subs	r3, #0
900028b4:	bf18      	it	ne
900028b6:	2301      	movne	r3, #1
900028b8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    }
900028bc:	bd10      	pop	{r4, pc}
            if (mjpegDecoders[handle]->hasVideo())
900028be:	6840      	ldr	r0, [r0, #4]
900028c0:	6803      	ldr	r3, [r0, #0]
900028c2:	691b      	ldr	r3, [r3, #16]
900028c4:	4798      	blx	r3
900028c6:	2800      	cmp	r0, #0
900028c8:	d0f8      	beq.n	900028bc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x20>
                stream.isPlaying = true;
900028ca:	2201      	movs	r2, #1
                stream.frameCount = 0;
900028cc:	2300      	movs	r3, #0
                stream.isPlaying = true;
900028ce:	f884 2029 	strb.w	r2, [r4, #41]	; 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
900028d2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
                stream.tickCount = 0;
900028d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    }
900028da:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900028dc:	2300      	movs	r3, #0
900028de:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
    }
900028e2:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900028e4:	2200      	movs	r2, #0
            stream.seek_to_frame = param;
900028e6:	6203      	str	r3, [r0, #32]
            stream.tickCount = 0;
900028e8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900028ec:	bd10      	pop	{r4, pc}
            stream.frameCount = 0;
900028ee:	2200      	movs	r2, #0
            stream.isShowingOneFrame = true;
900028f0:	2101      	movs	r1, #1
            stream.seek_to_frame = param;
900028f2:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
900028f4:	f880 102a 	strb.w	r1, [r0, #42]	; 0x2a
            stream.tickCount = 0;
900028f8:	e9c0 2204 	strd	r2, r2, [r0, #16]
    }
900028fc:	bd10      	pop	{r4, pc}
            stream.isPlaying = false;
900028fe:	2200      	movs	r2, #0
            stream.seek_to_frame = 1;
90002900:	2301      	movs	r3, #1
            stream.isPlaying = false;
90002902:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
            stream.seek_to_frame = 1;
90002906:	6203      	str	r3, [r0, #32]
    }
90002908:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
9000290a:	4b03      	ldr	r3, [pc, #12]	; (90002918 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x7c>)
9000290c:	21a2      	movs	r1, #162	; 0xa2
9000290e:	4a03      	ldr	r2, [pc, #12]	; (9000291c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x80>)
90002910:	4803      	ldr	r0, [pc, #12]	; (90002920 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE10setCommandEmNS0_15VideoController7CommandEm+0x84>)
90002912:	f024 fb8b 	bl	9002702c <__assert_func>
90002916:	bf00      	nop
90002918:	90028b9c 	.word	0x90028b9c
9000291c:	9002947c 	.word	0x9002947c
90002920:	90028d3c 	.word	0x90028d3c

90002924 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
90002924:	b510      	push	{r4, lr}
        assert(handle < no_streams);
90002926:	bb39      	cbnz	r1, 90002978 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x54>
        if (stream.isPlaying)
90002928:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
9000292c:	4604      	mov	r4, r0
9000292e:	b923      	cbnz	r3, 9000293a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x16>
        if (stream.doInvalidateOnNextTick)
90002930:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
90002934:	b963      	cbnz	r3, 90002950 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x2c>
        return true;
90002936:	2001      	movs	r0, #1
    }
90002938:	bd10      	pop	{r4, pc}
        return vSyncForFrame;
9000293a:	4912      	ldr	r1, [pc, #72]	; (90002984 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
            stream.tickCount+=HAL::getInstance()->getLCDRefreshCount();
9000293c:	6943      	ldr	r3, [r0, #20]
9000293e:	6809      	ldr	r1, [r1, #0]
90002940:	f891 1067 	ldrb.w	r1, [r1, #103]	; 0x67
90002944:	440b      	add	r3, r1
90002946:	6143      	str	r3, [r0, #20]
        if (stream.doInvalidateOnNextTick)
90002948:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
9000294c:	2b00      	cmp	r3, #0
9000294e:	d0f2      	beq.n	90002936 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
90002950:	68a1      	ldr	r1, [r4, #8]
            widget.invalidate();
90002952:	4610      	mov	r0, r2
90002954:	6813      	ldr	r3, [r2, #0]
90002956:	695b      	ldr	r3, [r3, #20]
90002958:	6311      	str	r1, [r2, #48]	; 0x30
9000295a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
9000295c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
9000295e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
            stream.doInvalidateOnNextTick = false;
90002962:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
90002966:	2800      	cmp	r0, #0
90002968:	d1e5      	bne.n	90002936 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x12>
9000296a:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
9000296e:	2b00      	cmp	r3, #0
90002970:	d1e2      	bne.n	90002938 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
                stream.isPlaying = false;
90002972:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    }
90002976:	bd10      	pop	{r4, pc}
        assert(handle < no_streams);
90002978:	4b03      	ldr	r3, [pc, #12]	; (90002988 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
9000297a:	21d0      	movs	r1, #208	; 0xd0
9000297c:	4a03      	ldr	r2, [pc, #12]	; (9000298c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x68>)
9000297e:	4804      	ldr	r0, [pc, #16]	; (90002990 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE11updateFrameEmRNS0_11VideoWidgetE+0x6c>)
90002980:	f024 fb54 	bl	9002702c <__assert_func>
90002984:	24026f8c 	.word	0x24026f8c
90002988:	90028b9c 	.word	0x90028b9c
9000298c:	90029650 	.word	0x90029650
90002990:	90028d3c 	.word	0x90028d3c

90002994 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
90002994:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
90002998:	b570      	push	{r4, r5, r6, lr}
            if (streams[i].isActive == false)
9000299a:	b9fb      	cbnz	r3, 900029dc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x48>
        streams[handle].isActive = true;
9000299c:	2201      	movs	r2, #1
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
9000299e:	6b85      	ldr	r5, [r0, #56]	; 0x38
            {
                // Reset stream parameters
                streams[i] = Stream();
900029a0:	60c3      	str	r3, [r0, #12]
        streams[handle].isActive = true;
900029a2:	6282      	str	r2, [r0, #40]	; 0x28
                streams[i] = Stream();
900029a4:	f44f 7280 	mov.w	r2, #256	; 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900029a8:	f505 2487 	add.w	r4, r5, #276480	; 0x43800
                streams[i] = Stream();
900029ac:	6103      	str	r3, [r0, #16]
900029ae:	8582      	strh	r2, [r0, #44]	; 0x2c
900029b0:	6143      	str	r3, [r0, #20]
900029b2:	6183      	str	r3, [r0, #24]
900029b4:	61c3      	str	r3, [r0, #28]
900029b6:	6203      	str	r3, [r0, #32]
900029b8:	6243      	str	r3, [r0, #36]	; 0x24
900029ba:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
900029be:	e9d0 260c 	ldrd	r2, r6, [r0, #48]	; 0x30
900029c2:	4432      	add	r2, r6
900029c4:	4294      	cmp	r4, r2
900029c6:	d810      	bhi.n	900029ea <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x56>
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
900029c8:	4a0b      	ldr	r2, [pc, #44]	; (900029f8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x64>)
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
900029ca:	6085      	str	r5, [r0, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
900029cc:	6384      	str	r4, [r0, #56]	; 0x38
    }
900029ce:	4618      	mov	r0, r3
        format = bufferFormat;
900029d0:	f881 3034 	strb.w	r3, [r1, #52]	; 0x34
        bufferWidth = width;
900029d4:	f8c1 2036 	str.w	r2, [r1, #54]	; 0x36
        buffer = videoBuffer;
900029d8:	630b      	str	r3, [r1, #48]	; 0x30
900029da:	bd70      	pop	{r4, r5, r6, pc}

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
900029dc:	4b07      	ldr	r3, [pc, #28]	; (900029fc <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
900029de:	f240 11c5 	movw	r1, #453	; 0x1c5
900029e2:	4a07      	ldr	r2, [pc, #28]	; (90002a00 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
900029e4:	4807      	ldr	r0, [pc, #28]	; (90002a04 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900029e6:	f024 fb21 	bl	9002702c <__assert_func>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
900029ea:	4b07      	ldr	r3, [pc, #28]	; (90002a08 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
900029ec:	2152      	movs	r1, #82	; 0x52
900029ee:	4a07      	ldr	r2, [pc, #28]	; (90002a0c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
900029f0:	4804      	ldr	r0, [pc, #16]	; (90002a04 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
900029f2:	f024 fb1b 	bl	9002702c <__assert_func>
900029f6:	bf00      	nop
900029f8:	012001e0 	.word	0x012001e0
900029fc:	900297f0 	.word	0x900297f0
90002a00:	90029820 	.word	0x90029820
90002a04:	90028d3c 	.word	0x90028d3c
90002a08:	900299a8 	.word	0x900299a8
90002a0c:	900299e4 	.word	0x900299e4

90002a10 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002a10:	4b08      	ldr	r3, [pc, #32]	; (90002a34 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x24>)
90002a12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002a1a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002a1e:	f3bf 8f6f 	isb	sy
90002a22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("dsb 0xF":::"memory");
90002a2a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90002a2e:	f3bf 8f6f 	isb	sy
}
90002a32:	4770      	bx	lr
90002a34:	e000e100 	.word	0xe000e100

90002a38 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90002a38:	4b03      	ldr	r3, [pc, #12]	; (90002a48 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0x10>)
90002a3a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
90002a3e:	609a      	str	r2, [r3, #8]
90002a40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90002a44:	609a      	str	r2, [r3, #8]
}
90002a46:	4770      	bx	lr
90002a48:	e000e100 	.word	0xe000e100

90002a4c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
90002a4c:	b538      	push	{r3, r4, r5, lr}
90002a4e:	4604      	mov	r4, r0
    HAL::initialize();
90002a50:	f012 f91b 	bl	90014c8a <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
90002a54:	6823      	ldr	r3, [r4, #0]
90002a56:	6e5d      	ldr	r5, [r3, #100]	; 0x64
90002a58:	f015 fc16 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
90002a5c:	4601      	mov	r1, r0
90002a5e:	4620      	mov	r0, r4
90002a60:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002a62:	6823      	ldr	r3, [r4, #0]
90002a64:	4a16      	ldr	r2, [pc, #88]	; (90002ac0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x74>)
90002a66:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
90002a6a:	4295      	cmp	r5, r2
90002a6c:	d11c      	bne.n	90002aa8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x5c>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002a6e:	4a15      	ldr	r2, [pc, #84]	; (90002ac4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x78>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002a70:	2501      	movs	r5, #1
        setAnimationStorage(animationStorage);
90002a72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
90002a76:	f502 317f 	add.w	r1, r2, #261120	; 0x3fc00
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002a7a:	4813      	ldr	r0, [pc, #76]	; (90002ac8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x7c>)
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
90002a7c:	e9c4 210f 	strd	r2, r1, [r4, #60]	; 0x3c
        setAnimationStorage(animationStorage);
90002a80:	4a12      	ldr	r2, [pc, #72]	; (90002acc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x80>)
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
90002a82:	7005      	strb	r5, [r0, #0]
90002a84:	4293      	cmp	r3, r2
90002a86:	d116      	bne.n	90002ab6 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x6a>
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002a88:	2300      	movs	r3, #0
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002a8a:	4a11      	ldr	r2, [pc, #68]	; (90002ad0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x84>)
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
90002a8c:	6463      	str	r3, [r4, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
90002a8e:	7013      	strb	r3, [r2, #0]
    void addDMA(touchgfx::DMA_Interface& dma) { pDma = &dma; }
90002a90:	6864      	ldr	r4, [r4, #4]
        sizeBufferRGB = sizeOfBuffer;
90002a92:	f44f 2087 	mov.w	r0, #276480	; 0x43800
        mjpegDecoders[index] = &decoder;
90002a96:	4b0f      	ldr	r3, [pc, #60]	; (90002ad4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x88>)
90002a98:	490f      	ldr	r1, [pc, #60]	; (90002ad8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x8c>)
        bufferRGB = buffer;
90002a9a:	4a10      	ldr	r2, [pc, #64]	; (90002adc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x90>)
90002a9c:	644c      	str	r4, [r1, #68]	; 0x44
        mjpegDecoders[index] = &decoder;
90002a9e:	6059      	str	r1, [r3, #4]
        bufferRGB = buffer;
90002aa0:	631a      	str	r2, [r3, #48]	; 0x30
        sizeBufferRGB = sizeOfBuffer;
90002aa2:	e9c3 020d 	strd	r0, r2, [r3, #52]	; 0x34
}
90002aa6:	bd38      	pop	{r3, r4, r5, pc}
    setFrameBufferStartAddresses((void*)frameBuf, (void*)(frameBuf + sizeof(frameBuf) / (sizeof(uint32_t) * 2)), (void*)0);
90002aa8:	4a0d      	ldr	r2, [pc, #52]	; (90002ae0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x94>)
90002aaa:	2300      	movs	r3, #0
90002aac:	4620      	mov	r0, r4
90002aae:	f5a2 317f 	sub.w	r1, r2, #261120	; 0x3fc00
90002ab2:	47a8      	blx	r5
90002ab4:	e7ec      	b.n	90002a90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
        setAnimationStorage(animationStorage);
90002ab6:	2100      	movs	r1, #0
90002ab8:	4620      	mov	r0, r4
90002aba:	4798      	blx	r3
90002abc:	e7e8      	b.n	90002a90 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>
90002abe:	bf00      	nop
90002ac0:	90000ac5 	.word	0x90000ac5
90002ac4:	d003fc00 	.word	0xd003fc00
90002ac8:	24026f8a 	.word	0x24026f8a
90002acc:	90000949 	.word	0x90000949
90002ad0:	24026f8b 	.word	0x24026f8b
90002ad4:	24007934 	.word	0x24007934
90002ad8:	240078ec 	.word	0x240078ec
90002adc:	d00bf400 	.word	0xd00bf400
90002ae0:	d007f800 	.word	0xd007f800

90002ae4 <HAL_LTDC_LineEventCallback>:
}

extern "C"
{
    void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef* hltdc)
    {
90002ae4:	b510      	push	{r4, lr}
        return instance;
90002ae6:	4c14      	ldr	r4, [pc, #80]	; (90002b38 <HAL_LTDC_LineEventCallback+0x54>)
        if (!HAL::getInstance())
90002ae8:	6823      	ldr	r3, [r4, #0]
90002aea:	b323      	cbz	r3, 90002b36 <HAL_LTDC_LineEventCallback+0x52>
        {
            return;
        }

        if (LTDC->LIPCR == lcd_int_active_line)
90002aec:	4b13      	ldr	r3, [pc, #76]	; (90002b3c <HAL_LTDC_LineEventCallback+0x58>)
90002aee:	4a14      	ldr	r2, [pc, #80]	; (90002b40 <HAL_LTDC_LineEventCallback+0x5c>)
90002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90002af2:	8811      	ldrh	r1, [r2, #0]
90002af4:	428b      	cmp	r3, r1
90002af6:	d00a      	beq.n	90002b0e <HAL_LTDC_LineEventCallback+0x2a>
            GPIO::set(GPIO::VSYNC_FREQ);
        }
        else
        {
            //exiting active area
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
90002af8:	f009 fff2 	bl	9000cae0 <HAL_LTDC_ProgramLineEvent>
90002afc:	6820      	ldr	r0, [r4, #0]
        allowDMATransfers();
90002afe:	6803      	ldr	r3, [r0, #0]
90002b00:	6a1b      	ldr	r3, [r3, #32]
90002b02:	4798      	blx	r3

            // Signal to the framework that display update has finished.
            HAL::getInstance()->frontPorchEntered();
            GPIO::clear(GPIO::VSYNC_FREQ);
90002b04:	2000      	movs	r0, #0
        }
    }
90002b06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
90002b0a:	f7fd bed1 	b.w	900008b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
            HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
90002b0e:	4b0d      	ldr	r3, [pc, #52]	; (90002b44 <HAL_LTDC_LineEventCallback+0x60>)
90002b10:	8819      	ldrh	r1, [r3, #0]
90002b12:	f009 ffe5 	bl	9000cae0 <HAL_LTDC_ProgramLineEvent>
        return instance;
90002b16:	6822      	ldr	r2, [r4, #0]
        vSyncCnt++;
90002b18:	f892 3066 	ldrb.w	r3, [r2, #102]	; 0x66
90002b1c:	3301      	adds	r3, #1
90002b1e:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
            OSWrappers::signalVSync();
90002b22:	f7ff f8c3 	bl	90001cac <_ZN8touchgfx10OSWrappers11signalVSyncEv>
            HAL::getInstance()->swapFrameBuffers();
90002b26:	6820      	ldr	r0, [r4, #0]
90002b28:	f012 fe02 	bl	90015730 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
            GPIO::set(GPIO::VSYNC_FREQ);
90002b2c:	2000      	movs	r0, #0
    }
90002b2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            GPIO::set(GPIO::VSYNC_FREQ);
90002b32:	f7fd be93 	b.w	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
    }
90002b36:	bd10      	pop	{r4, pc}
90002b38:	24026f8c 	.word	0x24026f8c
90002b3c:	50001000 	.word	0x50001000
90002b40:	240078e8 	.word	0x240078e8
90002b44:	240078e6 	.word	0x240078e6

90002b48 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
90002b48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90002b4c:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90002c08 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xc0>
90002b50:	b083      	sub	sp, #12
                    stream.doInvalidateOnNextTick = true;
90002b52:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002b54:	f44f 7770 	mov.w	r7, #960	; 0x3c0
    void decoderTaskEntry()
90002b58:	4604      	mov	r4, r0
90002b5a:	e024      	b.n	90002ba6 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x5e>
                        decoder->gotoFrame(stream.seek_to_frame);
90002b5c:	682b      	ldr	r3, [r5, #0]
90002b5e:	4628      	mov	r0, r5
90002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002b62:	4798      	blx	r3
                        stream.seek_to_frame = 0;
90002b64:	2300      	movs	r3, #0
90002b66:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002b68:	6829      	ldr	r1, [r5, #0]
90002b6a:	f44f 7390 	mov.w	r3, #288	; 0x120
90002b6e:	9700      	str	r7, [sp, #0]
90002b70:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
90002b74:	f8d1 9014 	ldr.w	r9, [r1, #20]
90002b78:	4628      	mov	r0, r5
90002b7a:	68a1      	ldr	r1, [r4, #8]
90002b7c:	47c8      	blx	r9
                    stream.frameCount++;
90002b7e:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
90002b80:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
                    stream.frameCount++;
90002b84:	3301      	adds	r3, #1
90002b86:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
90002b88:	2800      	cmp	r0, #0
90002b8a:	d033      	beq.n	90002bf4 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xac>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002b8c:	682b      	ldr	r3, [r5, #0]
90002b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90002b90:	4543      	cmp	r3, r8
90002b92:	d131      	bne.n	90002bf8 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb0>
    virtual uint32_t getCurrentFrameNumber() const { return frameNumber; }
90002b94:	6968      	ldr	r0, [r5, #20]
90002b96:	3801      	subs	r0, #1
90002b98:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
90002b9a:	2300      	movs	r3, #0
90002b9c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
            MUTEX_UNLOCK(mutexBuffers);
90002ba0:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002ba2:	f00e f819 	bl	90010bd8 <osMutexRelease>
            SEM_WAIT(semDecode);
90002ba6:	f04f 31ff 	mov.w	r1, #4294967295
90002baa:	6c20      	ldr	r0, [r4, #64]	; 0x40
90002bac:	f00e f886 	bl	90010cbc <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
90002bb0:	f04f 31ff 	mov.w	r1, #4294967295
90002bb4:	6c60      	ldr	r0, [r4, #68]	; 0x44
90002bb6:	f00d ffeb 	bl	90010b90 <osMutexAcquire>
                if (stream.doDecode)
90002bba:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
90002bbe:	2b00      	cmp	r3, #0
90002bc0:	d0ee      	beq.n	90002ba0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x58>
                    if (stream.seek_to_frame > 0)
90002bc2:	6a21      	ldr	r1, [r4, #32]
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
90002bc4:	6865      	ldr	r5, [r4, #4]
                    stream.doInvalidateOnNextTick = true;
90002bc6:	f884 602b 	strb.w	r6, [r4, #43]	; 0x2b
                    if (stream.seek_to_frame > 0)
90002bca:	2900      	cmp	r1, #0
90002bcc:	d1c6      	bne.n	90002b5c <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x14>
                        if (stream.skip_frames > 0)
90002bce:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002bd0:	2b00      	cmp	r3, #0
90002bd2:	d0c9      	beq.n	90002b68 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002bd4:	682a      	ldr	r2, [r5, #0]
90002bd6:	e9d2 9109 	ldrd	r9, r1, [r2, #36]	; 0x24
90002bda:	4541      	cmp	r1, r8
90002bdc:	d10f      	bne.n	90002bfe <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0xb6>
90002bde:	6968      	ldr	r0, [r5, #20]
90002be0:	18c1      	adds	r1, r0, r3
90002be2:	4628      	mov	r0, r5
90002be4:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
90002be6:	6923      	ldr	r3, [r4, #16]
90002be8:	6a61      	ldr	r1, [r4, #36]	; 0x24
                            stream.skip_frames = 0;
90002bea:	2200      	movs	r2, #0
                            stream.frameCount += stream.skip_frames;
90002bec:	440b      	add	r3, r1
                            stream.skip_frames = 0;
90002bee:	6262      	str	r2, [r4, #36]	; 0x24
                            stream.frameCount += stream.skip_frames;
90002bf0:	6123      	str	r3, [r4, #16]
90002bf2:	e7b9      	b.n	90002b68 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x20>
                        stream.frameNumber = 1;
90002bf4:	60e6      	str	r6, [r4, #12]
90002bf6:	e7d0      	b.n	90002b9a <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x52>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
90002bf8:	4628      	mov	r0, r5
90002bfa:	4798      	blx	r3
90002bfc:	e7cb      	b.n	90002b96 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x4e>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
90002bfe:	4628      	mov	r0, r5
90002c00:	4788      	blx	r1
90002c02:	6a63      	ldr	r3, [r4, #36]	; 0x24
90002c04:	e7ec      	b.n	90002be0 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv+0x98>
90002c06:	bf00      	nop
90002c08:	90000c3d 	.word	0x90000c3d

90002c0c <videoTaskFunc>:
    videoController.decoderTaskEntry();
90002c0c:	4801      	ldr	r0, [pc, #4]	; (90002c14 <videoTaskFunc+0x8>)
{
90002c0e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
90002c10:	f7ff ff9a 	bl	90002b48 <_ZN25DedicatedBufferControllerILm1ELm480ELm288ELm960ELN8touchgfx6Bitmap12BitmapFormatE0EE16decoderTaskEntryEv>
90002c14:	24007934 	.word	0x24007934

90002c18 <_GLOBAL__sub_I_mjpegdecoder1>:
}
90002c18:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
90002c1a:	4815      	ldr	r0, [pc, #84]	; (90002c70 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002c1c:	2500      	movs	r5, #0
90002c1e:	f7fe fc1b 	bl	90001458 <_ZN20HardwareMJPEGDecoderC1Ev>
90002c22:	4c14      	ldr	r4, [pc, #80]	; (90002c74 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
90002c24:	4914      	ldr	r1, [pc, #80]	; (90002c78 <_GLOBAL__sub_I_mjpegdecoder1+0x60>)
90002c26:	f44f 7380 	mov.w	r3, #256	; 0x100
        semDecode = SEM_CREATE(); // Binary semaphore
90002c2a:	462a      	mov	r2, r5
90002c2c:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002c2e:	6021      	str	r1, [r4, #0]
        semDecode = SEM_CREATE(); // Binary semaphore
90002c30:	4629      	mov	r1, r5
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002c32:	87a3      	strh	r3, [r4, #60]	; 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
90002c34:	85a3      	strh	r3, [r4, #44]	; 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002c36:	6325      	str	r5, [r4, #48]	; 0x30
90002c38:	f884 503e 	strb.w	r5, [r4, #62]	; 0x3e
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002c3c:	f884 502e 	strb.w	r5, [r4, #46]	; 0x2e
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
90002c40:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90002c44:	e9c4 5510 	strd	r5, r5, [r4, #64]	; 0x40
90002c48:	e9c4 5501 	strd	r5, r5, [r4, #4]
                   doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
90002c4c:	e9c4 5503 	strd	r5, r5, [r4, #12]
90002c50:	e9c4 5505 	strd	r5, r5, [r4, #20]
90002c54:	e9c4 5507 	strd	r5, r5, [r4, #28]
90002c58:	e9c4 5509 	strd	r5, r5, [r4, #36]	; 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
90002c5c:	f00d ffde 	bl	90010c1c <osSemaphoreNew>
90002c60:	4603      	mov	r3, r0
        mutexBuffers = MUTEX_CREATE();
90002c62:	4628      	mov	r0, r5
        semDecode = SEM_CREATE(); // Binary semaphore
90002c64:	6423      	str	r3, [r4, #64]	; 0x40
        mutexBuffers = MUTEX_CREATE();
90002c66:	f00d ff59 	bl	90010b1c <osMutexNew>
90002c6a:	6460      	str	r0, [r4, #68]	; 0x44
}
90002c6c:	bd38      	pop	{r3, r4, r5, pc}
90002c6e:	bf00      	nop
90002c70:	240078ec 	.word	0x240078ec
90002c74:	24007934 	.word	0x24007934
90002c78:	90029b90 	.word	0x90029b90

90002c7c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002c7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002c80:	4c7e      	ldr	r4, [pc, #504]	; (90002e7c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x200>)
{
90002c82:	b08d      	sub	sp, #52	; 0x34
90002c84:	9006      	str	r0, [sp, #24]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002c86:	fba4 0303 	umull	r0, r3, r4, r3
{
90002c8a:	9109      	str	r1, [sp, #36]	; 0x24
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002c8c:	0a19      	lsrs	r1, r3, #8
{
90002c8e:	9208      	str	r2, [sp, #32]
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002c90:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
90002c94:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90002c98:	4293      	cmp	r3, r2
90002c9a:	930b      	str	r3, [sp, #44]	; 0x2c
90002c9c:	f240 80e9 	bls.w	90002e72 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f6>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002ca0:	4b77      	ldr	r3, [pc, #476]	; (90002e80 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002ca2:	f8df 81ec 	ldr.w	r8, [pc, #492]	; 90002e90 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>
90002ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90002ca8:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 90002e94 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>
90002cac:	930a      	str	r3, [sp, #40]	; 0x28
90002cae:	9a06      	ldr	r2, [sp, #24]
    //tgfx: Set stride to the full width of the RGB Buffer, and not the video itself.
    JPEG_ConvertorParams.ScaledWidth = 480 * 2;

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);

    currentMCU++;
90002cb0:	f04f 0e02 	mov.w	lr, #2
90002cb4:	9908      	ldr	r1, [sp, #32]
90002cb6:	f502 7080 	add.w	r0, r2, #256	; 0x100
90002cba:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002cbc:	3101      	adds	r1, #1
    currentMCU++;
90002cbe:	e9cd 2003 	strd	r2, r0, [sp, #12]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90002cc2:	980a      	ldr	r0, [sp, #40]	; 0x28
90002cc4:	9108      	str	r1, [sp, #32]
90002cc6:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002cca:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002cce:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
90002cd2:	005b      	lsls	r3, r3, #1
90002cd4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
90002cd8:	9301      	str	r3, [sp, #4]

    pChrom = pInBuffer + 256; /* pChroma = pInBuffer + 4*64 */

    pLum = pInBuffer;

    for(i= 0; i <  16; i+=2)
90002cda:	e009      	b.n	90002cf0 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x74>
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }

      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002cdc:	9b01      	ldr	r3, [sp, #4]
90002cde:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002ce2:	d30f      	bcc.n	90002d04 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x88>
    for(i= 0; i <  16; i+=2)
90002ce4:	f1be 0f10 	cmp.w	lr, #16
90002ce8:	f000 80b6 	beq.w	90002e58 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1dc>
90002cec:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90002cf0:	f1be 0f0a 	cmp.w	lr, #10
90002cf4:	d1f2      	bne.n	90002cdc <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x60>
        pLum = pInBuffer + 128;
90002cf6:	9b06      	ldr	r3, [sp, #24]
90002cf8:	3380      	adds	r3, #128	; 0x80
90002cfa:	9303      	str	r3, [sp, #12]
      if(refline < JPEG_ConvertorParams.ScaledWidth * 288)
90002cfc:	9b01      	ldr	r3, [sp, #4]
90002cfe:	f5b3 2f87 	cmp.w	r3, #276480	; 0x43800
90002d02:	d2f3      	bcs.n	90002cec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      {
        pOutAddr = pOutBuffer + refline;
90002d04:	9a01      	ldr	r2, [sp, #4]
90002d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002d08:	f8cd e01c 	str.w	lr, [sp, #28]
90002d0c:	4413      	add	r3, r2
90002d0e:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
90002d12:	f103 0c10 	add.w	ip, r3, #16
90002d16:	3330      	adds	r3, #48	; 0x30
90002d18:	4696      	mov	lr, r2
90002d1a:	9102      	str	r1, [sp, #8]
90002d1c:	9305      	str	r3, [sp, #20]
90002d1e:	9b02      	ldr	r3, [sp, #8]
90002d20:	f50c 766c 	add.w	r6, ip, #944	; 0x3b0
90002d24:	f1ac 0510 	sub.w	r5, ip, #16
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;

        for(k= 0; k<2; k++)
        {
          for(j=0; j < 8; j+=2)
90002d28:	4674      	mov	r4, lr
90002d2a:	1e5f      	subs	r7, r3, #1
          {
            cbcomp = (int32_t)(*(pChrom));
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d2c:	f817 1f01 	ldrb.w	r1, [r7, #1]!
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
#endif /* JPEG_RGB_FORMAT */

            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90002d30:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d32:	4b54      	ldr	r3, [pc, #336]	; (90002e84 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x208>)
          for(j=0; j < 8; j+=2)
90002d34:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d36:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90002d3a:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d3c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
90002d40:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d42:	4b51      	ldr	r3, [pc, #324]	; (90002e88 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x20c>)
            ycomp = (int32_t)(*(pLum +j));
90002d44:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002d48:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d4c:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d50:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002d52:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d54:	484d      	ldr	r0, [pc, #308]	; (90002e8c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d56:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002d5a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d5e:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d62:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d64:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
90002d68:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d6c:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d6e:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d72:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d76:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d7a:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d7e:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002d82:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
90002d86:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr =
90002d8a:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90002d8e:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d92:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002d96:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002d9a:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002d9c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002da0:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002da4:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002da8:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dac:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002db0:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002db4:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002db8:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002dbc:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90002dc0:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dc4:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dc8:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002dcc:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dce:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dd2:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dd6:	ea4f 0292 	mov.w	r2, r2, lsr #2
90002dda:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dde:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002de2:	ea4f 1242 	mov.w	r2, r2, lsl #5
90002de6:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90002dea:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 =
90002dee:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90002df2:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002df4:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002df6:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002df8:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002dfa:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002dfe:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e02:	ea4f 0393 	mov.w	r3, r3, lsr #2
90002e06:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002e0a:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002e0e:	ea4f 1343 	mov.w	r3, r3, lsl #5
90002e12:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90002e16:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) =
90002e1a:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90002e1e:	d185      	bne.n	90002d2c <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb0>

            pChrom++;
90002e20:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002e22:	f105 0c10 	add.w	ip, r5, #16
          }
          pLum += 64;
90002e26:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pChrom++;
90002e2a:	3304      	adds	r3, #4
90002e2c:	9302      	str	r3, [sp, #8]
        for(k= 0; k<2; k++)
90002e2e:	9b05      	ldr	r3, [sp, #20]
90002e30:	4563      	cmp	r3, ip
90002e32:	f47f af74 	bne.w	90002d1e <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xa2>
            pChrom++;
90002e36:	9b04      	ldr	r3, [sp, #16]
90002e38:	f8dd e01c 	ldr.w	lr, [sp, #28]
90002e3c:	3308      	adds	r3, #8
    for(i= 0; i <  16; i+=2)
90002e3e:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90002e42:	9304      	str	r3, [sp, #16]
        }

        pLum = pLum - 128 + 16;
90002e44:	9b03      	ldr	r3, [sp, #12]
90002e46:	f103 0310 	add.w	r3, r3, #16
90002e4a:	9303      	str	r3, [sp, #12]

        refline += 2*JPEG_ConvertorParams.ScaledWidth;
90002e4c:	9b01      	ldr	r3, [sp, #4]
90002e4e:	f503 63f0 	add.w	r3, r3, #1920	; 0x780
90002e52:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90002e54:	f47f af4a 	bne.w	90002cec <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x70>
      }
    }

    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002e58:	9b06      	ldr	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002e5a:	9a08      	ldr	r2, [sp, #32]
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90002e5c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90002e60:	9306      	str	r3, [sp, #24]
  while(currentMCU < (numberMCU + BlockIndex))
90002e62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90002e64:	4293      	cmp	r3, r2
90002e66:	f47f af22 	bne.w	90002cae <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x32>
90002e6a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
90002e6e:	4a04      	ldr	r2, [pc, #16]	; (90002e80 <TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x204>)
90002e70:	6293      	str	r3, [r2, #40]	; 0x28
  }
  return numberMCU;
}
90002e72:	ee17 0a90 	vmov	r0, s15
90002e76:	b00d      	add	sp, #52	; 0x34
90002e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90002e7c:	aaaaaaab 	.word	0xaaaaaaab
90002e80:	2400a5fc 	.word	0x2400a5fc
90002e84:	2400897c 	.word	0x2400897c
90002e88:	2400857c 	.word	0x2400857c
90002e8c:	2400917c 	.word	0x2400917c
90002e90:	24008d7c 	.word	0x24008d7c
90002e94:	90029bc8 	.word	0x90029bc8

90002e98 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90002e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002e9c:	0a1c      	lsrs	r4, r3, #8
{
90002e9e:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90002ea0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90002ea4:	ee07 4a90 	vmov	s15, r4
{
90002ea8:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90002eaa:	429a      	cmp	r2, r3
{
90002eac:	9007      	str	r0, [sp, #28]
90002eae:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90002eb0:	930b      	str	r3, [sp, #44]	; 0x2c
90002eb2:	f080 814a 	bcs.w	9000314a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002eb6:	4ba7      	ldr	r3, [pc, #668]	; (90003154 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90002eb8:	4da7      	ldr	r5, [pc, #668]	; (90003158 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90002eba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90002ebc:	f8df 929c 	ldr.w	r9, [pc, #668]	; 9000315c <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90002ec0:	920a      	str	r2, [sp, #40]	; 0x28

    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ec4:	691b      	ldr	r3, [r3, #16]
90002ec6:	f8df a298 	ldr.w	sl, [pc, #664]	; 90003160 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90002eca:	f8df b298 	ldr.w	fp, [pc, #664]	; 90003164 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90002ece:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90003168 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002ed2:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002ed4:	9301      	str	r3, [sp, #4]
90002ed6:	e008      	b.n	90002eea <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002ed8:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002eda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90002edc:	f503 7380 	add.w	r3, r3, #256	; 0x100
90002ee0:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90002ee2:	9b08      	ldr	r3, [sp, #32]
90002ee4:	4293      	cmp	r3, r2
90002ee6:	f000 8130 	beq.w	9000314a <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002eea:	9a07      	ldr	r2, [sp, #28]
90002eec:	9908      	ldr	r1, [sp, #32]
90002eee:	f102 0080 	add.w	r0, r2, #128	; 0x80
90002ef2:	010b      	lsls	r3, r1, #4
90002ef4:	3101      	adds	r1, #1
    currentMCU++;
90002ef6:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002efa:	980a      	ldr	r0, [sp, #40]	; 0x28
90002efc:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002efe:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90002f00:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90002f04:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90002f08:	fb01 f202 	mul.w	r2, r1, r2
90002f0c:	005b      	lsls	r3, r3, #1
90002f0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90002f12:	9300      	str	r3, [sp, #0]
    currentMCU++;
90002f14:	2308      	movs	r3, #8
90002f16:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90002f18:	e9dd 2300 	ldrd	r2, r3, [sp]
90002f1c:	4293      	cmp	r3, r2
90002f1e:	d9db      	bls.n	90002ed8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90002f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
90002f22:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90002f24:	9a03      	ldr	r2, [sp, #12]
90002f26:	f102 0140 	add.w	r1, r2, #64	; 0x40
90002f2a:	9a02      	ldr	r2, [sp, #8]
90002f2c:	f103 0020 	add.w	r0, r3, #32
90002f30:	3204      	adds	r2, #4
90002f32:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f34:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90002f38:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f3a:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90002f3e:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002f40:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90002f44:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90002f46:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002f4a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f4e:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f50:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002f54:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f58:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002f5a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f5c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f60:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f64:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f68:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f6c:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f6e:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f72:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002f76:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002f7a:	08e4      	lsrs	r4, r4, #3
90002f7c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002f80:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002f84:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90002f88:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90002f8c:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002f90:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f92:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f94:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002f96:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002f9a:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90002f9e:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fa2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fa4:	08c0      	lsrs	r0, r0, #3
90002fa6:	08a4      	lsrs	r4, r4, #2
90002fa8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90002fac:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
90002fb0:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fb4:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fb8:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90002fbc:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90002fc0:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90002fc4:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fc8:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fca:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90002fce:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fd2:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90002fd4:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fd6:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fda:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fde:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90002fe2:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fe6:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90002fe8:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90002fec:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90002ff0:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90002ff4:	08e4      	lsrs	r4, r4, #3
90002ff6:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90002ffa:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90002ffe:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003002:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90003006:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000300a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000300c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000300e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003010:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003014:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90003018:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000301c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000301e:	08c0      	lsrs	r0, r0, #3
90003020:	08a4      	lsrs	r4, r4, #2
90003022:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90003026:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
9000302a:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000302e:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003032:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003036:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000303a:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000303e:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003042:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003046:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003048:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000304c:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000304e:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003050:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003054:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003058:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000305c:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003060:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003062:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003066:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
9000306a:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
9000306e:	08e4      	lsrs	r4, r4, #3
90003070:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003074:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90003078:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
9000307c:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90003080:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003084:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003086:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003088:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000308a:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000308e:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90003092:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003096:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003098:	08c0      	lsrs	r0, r0, #3
9000309a:	08a4      	lsrs	r4, r4, #2
9000309c:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
900030a0:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
900030a4:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030a8:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030ac:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030b0:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900030b4:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900030b8:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030bc:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030c0:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030c2:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900030c4:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
900030c6:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030ca:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030ce:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030d2:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030d6:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030da:	4484      	add	ip, r0
900030dc:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900030e0:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900030e4:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
900030e8:	08e4      	lsrs	r4, r4, #3
900030ea:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900030ee:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
900030f2:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr =
900030f6:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
900030fa:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900030fe:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003100:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003102:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003104:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003108:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
9000310c:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003110:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003112:	08c0      	lsrs	r0, r0, #3
90003114:	08a4      	lsrs	r4, r4, #2
90003116:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
9000311a:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) =
9000311e:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90003122:	9804      	ldr	r0, [sp, #16]
90003124:	4283      	cmp	r3, r0
90003126:	f47f af05 	bne.w	90002f34 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
9000312a:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;
9000312c:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
9000312e:	3308      	adds	r3, #8
90003130:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90003132:	9b03      	ldr	r3, [sp, #12]
90003134:	3308      	adds	r3, #8
90003136:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003138:	9b00      	ldr	r3, [sp, #0]
9000313a:	4413      	add	r3, r2
9000313c:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
9000313e:	9b05      	ldr	r3, [sp, #20]
90003140:	3b01      	subs	r3, #1
90003142:	9305      	str	r3, [sp, #20]
90003144:	f47f aee8 	bne.w	90002f18 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90003148:	e6c6      	b.n	90002ed8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
9000314a:	ee17 0a90 	vmov	r0, s15
9000314e:	b00d      	add	sp, #52	; 0x34
90003150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003154:	2400a5fc 	.word	0x2400a5fc
90003158:	2400857c 	.word	0x2400857c
9000315c:	2400917c 	.word	0x2400917c
90003160:	24008d7c 	.word	0x24008d7c
90003164:	2400897c 	.word	0x2400897c
90003168:	90029bc8 	.word	0x90029bc8

9000316c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
9000316c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;

  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003170:	4cb6      	ldr	r4, [pc, #728]	; (9000344c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{
90003172:	b089      	sub	sp, #36	; 0x24
90003174:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003178:	fba4 0303 	umull	r0, r3, r4, r3
{
9000317c:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
9000317e:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
90003180:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90003184:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90003188:	429a      	cmp	r2, r3
9000318a:	9306      	str	r3, [sp, #24]
9000318c:	f080 8158 	bcs.w	90003440 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003190:	4baf      	ldr	r3, [pc, #700]	; (90003450 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)

            ycomp = (int32_t)(*(pLum +j));

            *(__IO uint16_t *)pOutAddr =
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003192:	4cb0      	ldr	r4, [pc, #704]	; (90003454 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003194:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003196:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 9000345c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000319a:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000319c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
9000319e:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031a0:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 90003460 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031a4:	48ac      	ldr	r0, [pc, #688]	; (90003458 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
900031a6:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 90003464 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031aa:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031ac:	9300      	str	r3, [sp, #0]
900031ae:	e007      	b.n	900031c0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
900031b0:	9b04      	ldr	r3, [sp, #16]
900031b2:	33c0      	adds	r3, #192	; 0xc0
900031b4:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
900031b6:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
900031ba:	4293      	cmp	r3, r2
900031bc:	f000 8140 	beq.w	90003440 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031c0:	9e05      	ldr	r6, [sp, #20]
900031c2:	9f07      	ldr	r7, [sp, #28]
900031c4:	00f5      	lsls	r5, r6, #3
900031c6:	3601      	adds	r6, #1
900031c8:	9904      	ldr	r1, [sp, #16]
900031ca:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031cc:	9e03      	ldr	r6, [sp, #12]
900031ce:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900031d2:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900031d6:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900031da:	fb06 f202 	mul.w	r2, r6, r2
900031de:	006d      	lsls	r5, r5, #1
900031e0:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;
900031e4:	2508      	movs	r5, #8
900031e6:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900031e8:	9d00      	ldr	r5, [sp, #0]
900031ea:	4295      	cmp	r5, r2
900031ec:	d9e0      	bls.n	900031b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900031ee:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
900031f2:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900031f4:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
900031f8:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
900031fa:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900031fe:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003202:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90003206:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003208:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000320c:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003210:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003212:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003214:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003216:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000321a:	eb05 4929 	add.w	r9, r5, r9, asr #16
9000321e:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003222:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003224:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90003228:	08ed      	lsrs	r5, r5, #3
9000322a:	08bf      	lsrs	r7, r7, #2
9000322c:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr =
90003230:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003232:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003236:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003238:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000323c:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90003240:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003244:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003248:	4425      	add	r5, r4
9000324a:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000324e:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003252:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003256:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003258:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000325a:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000325c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003260:	eb05 4929 	add.w	r9, r5, r9, asr #16
90003264:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003268:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000326a:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
9000326e:	08ed      	lsrs	r5, r5, #3
90003270:	08bf      	lsrs	r7, r7, #2
90003272:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90003276:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003278:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
9000327c:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr =
9000327e:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003280:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90003284:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003288:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000328a:	4427      	add	r7, r4
9000328c:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003290:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003292:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003296:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003298:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000329c:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032a0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900032a4:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900032a8:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032aa:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900032ae:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900032b0:	eb07 4626 	add.w	r6, r7, r6, asr #16
900032b4:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900032b8:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900032bc:	08ff      	lsrs	r7, r7, #3
900032be:	08b6      	lsrs	r6, r6, #2
900032c0:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900032c4:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
900032c8:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900032cc:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900032d0:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
900032d4:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900032d8:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032dc:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900032e0:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900032e2:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900032e6:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032ea:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900032ec:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900032ee:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032f0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900032f4:	eb07 4626 	add.w	r6, r7, r6, asr #16
900032f8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900032fc:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003300:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003304:	08ff      	lsrs	r7, r7, #3
90003306:	08b6      	lsrs	r6, r6, #2
90003308:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000330c:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003310:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
90003314:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90003318:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
9000331c:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003320:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003324:	4427      	add	r7, r4
90003326:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000332a:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000332e:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003332:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003334:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003336:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003338:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9000333c:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003340:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003344:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003348:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9000334c:	08ff      	lsrs	r7, r7, #3
9000334e:	08b6      	lsrs	r6, r6, #2
90003350:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90003354:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003358:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
9000335c:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
90003360:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003364:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90003368:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9000336a:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000336e:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003372:	44b9      	add	r9, r7
90003374:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003378:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000337c:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003380:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003384:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003386:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003388:	eb07 4626 	add.w	r6, r7, r6, asr #16
9000338c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90003390:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003394:	08ff      	lsrs	r7, r7, #3
90003396:	08b6      	lsrs	r6, r6, #2
90003398:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000339c:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
900033a0:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900033a4:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900033a8:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900033ac:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900033b0:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900033b4:	4427      	add	r7, r4
900033b6:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900033ba:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900033be:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900033c2:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
900033c4:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900033c6:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900033c8:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900033cc:	eb07 4626 	add.w	r6, r7, r6, asr #16
900033d0:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900033d4:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900033d8:	08ff      	lsrs	r7, r7, #3
900033da:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900033de:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900033e2:	08b6      	lsrs	r6, r6, #2
900033e4:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
900033e8:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));
900033ec:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900033f0:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
900033f4:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900033f8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900033fc:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
900033fe:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90003402:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
90003406:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000340a:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
9000340c:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;
9000340e:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90003410:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003414:	eb07 4626 	add.w	r6, r7, r6, asr #16
90003418:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9000341c:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90003420:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90003424:	08ff      	lsrs	r7, r7, #3
90003426:	08b6      	lsrs	r6, r6, #2
90003428:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9000342c:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr =
90003430:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
90003434:	9d01      	ldr	r5, [sp, #4]
90003436:	3d01      	subs	r5, #1
90003438:	9501      	str	r5, [sp, #4]
9000343a:	f47f aed5 	bne.w	900031e8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9000343e:	e6b7      	b.n	900031b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
90003440:	ee17 0a90 	vmov	r0, s15
90003444:	b009      	add	sp, #36	; 0x24
90003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000344a:	bf00      	nop
9000344c:	aaaaaaab 	.word	0xaaaaaaab
90003450:	2400a5fc 	.word	0x2400a5fc
90003454:	90029bc8 	.word	0x90029bc8
90003458:	24008d7c 	.word	0x24008d7c
9000345c:	2400917c 	.word	0x2400917c
90003460:	2400857c 	.word	0x2400857c
90003464:	2400897c 	.word	0x2400897c

90003468 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t *pOutAddr,  *pLum;

  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
9000346c:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003470:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
90003472:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
90003474:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
90003478:	f080 8088 	bcs.w	9000358c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000347c:	4b45      	ldr	r3, [pc, #276]	; (90003594 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)

    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);

    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9000347e:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;

    for(i= 0; i <  8; i++)
    {
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90003482:	691e      	ldr	r6, [r3, #16]
90003484:	e003      	b.n	9000348e <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
90003486:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  GRAY_444_BLOCK_SIZE;
90003488:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
9000348c:	d07e      	beq.n	9000358c <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9000348e:	00d5      	lsls	r5, r2, #3
    currentMCU++;
90003490:	4604      	mov	r4, r0
90003492:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90003496:	3201      	adds	r2, #1
90003498:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
9000349c:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900034a0:	fb08 f707 	mul.w	r7, r8, r7
900034a4:	005b      	lsls	r3, r3, #1
900034a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900034aa:	429e      	cmp	r6, r3
900034ac:	d9eb      	bls.n	90003486 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900034ae:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900034b2:	18cd      	adds	r5, r1, r3
          pLum++;
900034b4:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
900034b6:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900034ba:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900034be:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900034c2:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900034c6:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900034ca:	ea47 070c 	orr.w	r7, r7, ip
900034ce:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;
900034d0:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
900034d2:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900034d6:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900034da:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900034de:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900034e2:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900034e6:	ea47 070c 	orr.w	r7, r7, ip
900034ea:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
900034ec:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
900034f0:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900034f4:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900034f8:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900034fc:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003500:	ea47 070c 	orr.w	r7, r7, ip
90003504:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90003506:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000350a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000350e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003512:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003516:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000351a:	ea47 070c 	orr.w	r7, r7, ip
9000351e:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
90003520:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003524:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003528:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000352c:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003530:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003534:	ea47 070c 	orr.w	r7, r7, ip
90003538:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
9000353a:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
9000353e:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003542:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003546:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000354a:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9000354e:	ea47 070c 	orr.w	r7, r7, ip
90003552:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
90003554:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003558:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9000355c:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90003560:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90003564:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003568:	ea47 070c 	orr.w	r7, r7, ip
9000356c:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
9000356e:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);
90003572:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90003576:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9000357a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9000357e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90003582:	ea47 070c 	orr.w	r7, r7, ip
90003586:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
90003588:	d18f      	bne.n	900034aa <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
9000358a:	e77c      	b.n	90003486 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
9000358c:	ee17 0a90 	vmov	r0, s15
90003590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90003594:	2400a5fc 	.word	0x2400a5fc

90003598 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer,
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
90003598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  int32_t c_red, c_blue, c_green;

  uint8_t *pOutAddr, *pChrom;

  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
9000359c:	0a1c      	lsrs	r4, r3, #8
{
9000359e:	b083      	sub	sp, #12
  currentMCU = BlockIndex;

  while(currentMCU < (numberMCU + BlockIndex))
900035a0:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900035a4:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900035a8:	429a      	cmp	r2, r3
900035aa:	9301      	str	r3, [sp, #4]
900035ac:	f080 8128 	bcs.w	90003800 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900035b0:	4b96      	ldr	r3, [pc, #600]	; (9000380c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;

          for(j=0; j < 8; j++)
          {
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900035b2:	f8df c25c 	ldr.w	ip, [pc, #604]	; 90003810 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900035b6:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900035b8:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
900035bc:	e006      	b.n	900035cc <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;
      }
    }

    pInBuffer +=  CMYK_444_BLOCK_SIZE;
900035be:	9a00      	ldr	r2, [sp, #0]
900035c0:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
900035c4:	9b01      	ldr	r3, [sp, #4]
900035c6:	429a      	cmp	r2, r3
900035c8:	f000 811a 	beq.w	90003800 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900035cc:	00d3      	lsls	r3, r2, #3
    currentMCU++;
900035ce:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900035d2:	3201      	adds	r2, #1
900035d4:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900035d8:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
900035dc:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900035de:	fb09 f404 	mul.w	r4, r9, r4
900035e2:	006d      	lsls	r5, r5, #1
    currentMCU++;
900035e4:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900035e6:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900035ea:	42af      	cmp	r7, r5
900035ec:	d9e7      	bls.n	900035be <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
900035ee:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;
900035f2:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900035f4:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
900035f8:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
900035fc:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003600:	fb1e fe0b 	smulbb	lr, lr, fp
90003604:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003608:	f813 4c08 	ldrb.w	r4, [r3, #-8]
9000360c:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003610:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003614:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003618:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000361c:	ea4f 2494 	mov.w	r4, r4, lsr #10
90003620:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003624:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
90003628:	fb1e fb0b 	smulbb	fp, lr, fp
9000362c:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003630:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003634:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003636:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;
90003638:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
9000363a:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000363e:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003642:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003646:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000364a:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000364e:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003652:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003656:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000365a:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000365e:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003662:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003666:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
9000366a:	fb1e fb0b 	smulbb	fp, lr, fp
9000366e:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003672:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003676:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003678:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
9000367a:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000367e:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003682:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003686:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000368a:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000368e:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003692:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003696:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000369a:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000369e:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900036a2:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900036a6:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
900036aa:	fb1e fb0b 	smulbb	fp, lr, fp
900036ae:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900036b2:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900036b6:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900036b8:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
900036ba:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900036be:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900036c2:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900036c6:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900036ca:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900036ce:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900036d2:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900036d6:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900036da:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900036de:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900036e2:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900036e6:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
900036ea:	fb1e fb0b 	smulbb	fp, lr, fp
900036ee:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900036f2:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900036f6:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900036f8:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
900036fa:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900036fe:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003702:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003706:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000370a:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000370e:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003712:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003716:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000371a:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000371e:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003722:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003726:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
9000372a:	fb1e fb0b 	smulbb	fp, lr, fp
9000372e:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003732:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003736:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003738:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
9000373a:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000373e:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003742:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003746:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000374a:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000374e:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003752:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003756:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9000375a:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000375e:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003762:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90003766:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
9000376a:	fb1e fb0b 	smulbb	fp, lr, fp
9000376e:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90003772:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90003776:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
90003778:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
9000377a:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000377e:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003782:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90003786:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9000378a:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9000378e:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90003792:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90003796:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9000379a:	ea4f 2454 	mov.w	r4, r4, lsr #9
9000379e:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900037a2:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900037a6:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
900037aa:	fb1e fb0b 	smulbb	fp, lr, fp
900037ae:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900037b2:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900037b6:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900037b8:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
900037ba:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900037be:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900037c2:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900037c6:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900037ca:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900037ce:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900037d2:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900037d6:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900037da:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900037de:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900037e2:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900037e6:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
900037ea:	fb1e fb0b 	smulbb	fp, lr, fp
900037ee:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900037f2:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900037f6:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr =
900037f8:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
900037fa:	f47f aef6 	bne.w	900035ea <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
900037fe:	e6de      	b.n	900035be <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
90003800:	ee17 0a90 	vmov	r0, s15
90003804:	b003      	add	sp, #12
90003806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9000380a:	bf00      	nop
9000380c:	2400a5fc 	.word	0x2400a5fc
90003810:	80808081 	.word	0x80808081

90003814 <TGFX_JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info.
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef TGFX_JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90003814:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;

  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003816:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000381a:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000381c:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9000381e:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90003822:	4b31      	ldr	r3, [pc, #196]	; (900038e8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003824:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003826:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
9000382a:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9000382c:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9000382e:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;
90003830:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90003832:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90003834:	d02b      	beq.n	9000388e <TGFX_JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90003836:	b9fc      	cbnz	r4, 90003878 <TGFX_JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90003838:	482c      	ldr	r0, [pc, #176]	; (900038ec <TGFX_JPEG_GetDecodeColorConvertFunc+0xd8>)
9000383a:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;

    if(JPEG_ConvertorParams.LineOffset != 0)
9000383c:	f015 0007 	ands.w	r0, r5, #7
90003840:	d121      	bne.n	90003886 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
90003842:	4607      	mov	r7, r0
90003844:	6158      	str	r0, [r3, #20]

    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
    }
    JPEG_ConvertorParams.H_factor = 8;
90003846:	2108      	movs	r1, #8
90003848:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
9000384a:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {
    return HAL_ERROR; /* Color space Not supported*/
  }

  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9000384e:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;

  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
90003850:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003854:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
90003856:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth;
90003858:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
9000385a:	b100      	cbz	r0, 9000385e <TGFX_JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */
9000385c:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
9000385e:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
90003862:	fb01 6110 	mls	r1, r1, r0, r6
90003866:	b101      	cbz	r1, 9000386a <TGFX_JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */
90003868:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
9000386a:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
9000386e:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
90003870:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
90003872:	6014      	str	r4, [r2, #0]
}
90003874:	bcf0      	pop	{r4, r5, r6, r7}
90003876:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
90003878:	2c30      	cmp	r4, #48	; 0x30
9000387a:	d112      	bne.n	900038a2 <TGFX_JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
9000387c:	481c      	ldr	r0, [pc, #112]	; (900038f0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xdc>)
9000387e:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
90003880:	f015 0007 	ands.w	r0, r5, #7
90003884:	d0dd      	beq.n	90003842 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;
90003886:	f1c0 0708 	rsb	r7, r0, #8
9000388a:	615f      	str	r7, [r3, #20]
9000388c:	e7db      	b.n	90003846 <TGFX_JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
9000388e:	2f01      	cmp	r7, #1
90003890:	d017      	beq.n	900038c2 <TGFX_JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
90003892:	2f02      	cmp	r7, #2
90003894:	d008      	beq.n	900038a8 <TGFX_JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
90003896:	4817      	ldr	r0, [pc, #92]	; (900038f4 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe0>)
90003898:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
9000389a:	f015 0007 	ands.w	r0, r5, #7
9000389e:	d1f2      	bne.n	90003886 <TGFX_JPEG_GetDecodeColorConvertFunc+0x72>
900038a0:	e7cf      	b.n	90003842 <TGFX_JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
900038a2:	2001      	movs	r0, #1
}
900038a4:	bcf0      	pop	{r4, r5, r6, r7}
900038a6:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900038a8:	4813      	ldr	r0, [pc, #76]	; (900038f8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xe4>)
900038aa:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900038ac:	f015 000f 	ands.w	r0, r5, #15
900038b0:	d116      	bne.n	900038e0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900038b2:	4607      	mov	r7, r0
900038b4:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900038b6:	f04f 0c10 	mov.w	ip, #16
900038ba:	2108      	movs	r1, #8
900038bc:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
900038c0:	e7c5      	b.n	9000384e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = TGFX_JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
900038c2:	480e      	ldr	r0, [pc, #56]	; (900038fc <TGFX_JPEG_GetDecodeColorConvertFunc+0xe8>)
900038c4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900038c6:	f015 000f 	ands.w	r0, r5, #15
900038ca:	d105      	bne.n	900038d8 <TGFX_JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900038cc:	4607      	mov	r7, r0
900038ce:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
900038d0:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
900038d2:	e9c3 1107 	strd	r1, r1, [r3, #28]
900038d6:	e7ba      	b.n	9000384e <TGFX_JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900038d8:	f1c0 0710 	rsb	r7, r0, #16
900038dc:	615f      	str	r7, [r3, #20]
900038de:	e7f7      	b.n	900038d0 <TGFX_JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;
900038e0:	f1c0 0710 	rsb	r7, r0, #16
900038e4:	615f      	str	r7, [r3, #20]
900038e6:	e7e6      	b.n	900038b6 <TGFX_JPEG_GetDecodeColorConvertFunc+0xa2>
900038e8:	2400a5fc 	.word	0x2400a5fc
900038ec:	90003469 	.word	0x90003469
900038f0:	90003599 	.word	0x90003599
900038f4:	9000316d 	.word	0x9000316d
900038f8:	90002e99 	.word	0x90002e99
900038fc:	90002c7d 	.word	0x90002c7d

90003900 <TGFX_JPEG_InitColorTables>:
  * @brief  Initializes the colors conversion Look Up Tables
  * @param  None
  * @retval None
  */
void TGFX_JPEG_InitColorTables(void)
{
90003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90003904:	f8df c12c 	ldr.w	ip, [pc, #300]	; 90003a34 <TGFX_JPEG_InitColorTables+0x134>
90003908:	b08b      	sub	sp, #44	; 0x2c
9000390a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 90003a38 <TGFX_JPEG_InitColorTables+0x138>
9000390e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90003912:	f8df e128 	ldr.w	lr, [pc, #296]	; 90003a3c <TGFX_JPEG_InitColorTables+0x13c>
  */
void TGFX_JPEG_InitPreProcColorTables(void)
{
  int32_t i;

  for (i = 0; i <= 255; i++)
90003916:	2300      	movs	r3, #0
90003918:	4f3d      	ldr	r7, [pc, #244]	; (90003a10 <TGFX_JPEG_InitColorTables+0x110>)
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    /* BLUE_CB_LUT and RED_CR_LUT are identical */
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;

    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000391a:	f64e 3b2f 	movw	fp, #60207	; 0xeb2f
9000391e:	4e3d      	ldr	r6, [pc, #244]	; (90003a14 <TGFX_JPEG_InitColorTables+0x114>)
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003920:	f249 4ad0 	movw	sl, #38096	; 0x94d0
90003924:	4d3c      	ldr	r5, [pc, #240]	; (90003a18 <TGFX_JPEG_InitColorTables+0x118>)
  for (i = 0; i <= 255; i++)
90003926:	f644 498b 	movw	r9, #19595	; 0x4c8b
9000392a:	4c3c      	ldr	r4, [pc, #240]	; (90003a1c <TGFX_JPEG_InitColorTables+0x11c>)
9000392c:	483c      	ldr	r0, [pc, #240]	; (90003a20 <TGFX_JPEG_InitColorTables+0x120>)
    GREEN_Y_LUT[i]         = ((  ((int32_t) ((0.587 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000392e:	f249 6245 	movw	r2, #38469	; 0x9645
90003932:	fb02 f203 	mul.w	r2, r2, r3
90003936:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000393a:	1412      	asrs	r2, r2, #16
9000393c:	f84e 2f04 	str.w	r2, [lr, #4]!
    BLUE_Y_LUT[i]          = ((  ((int32_t) ((0.114 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003940:	f641 522f 	movw	r2, #7471	; 0x1d2f
90003944:	fb02 f203 	mul.w	r2, r2, r3
90003948:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000394c:	1412      	asrs	r2, r2, #16
9000394e:	f84c 2f04 	str.w	r2, [ip, #4]!
    RED_CB_LUT[i]          = (((-((int32_t) ((0.1687 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003952:	4a34      	ldr	r2, [pc, #208]	; (90003a24 <TGFX_JPEG_InitColorTables+0x124>)
90003954:	fb02 f203 	mul.w	r2, r2, r3
90003958:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9000395c:	1412      	asrs	r2, r2, #16
9000395e:	f847 2f04 	str.w	r2, [r7, #4]!
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003962:	4a31      	ldr	r2, [pc, #196]	; (90003a28 <TGFX_JPEG_InitColorTables+0x128>)
90003964:	fb02 f203 	mul.w	r2, r2, r3
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003968:	3301      	adds	r3, #1
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000396a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
  for (i = 0; i <= 255; i++)
9000396e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    GREEN_CB_LUT[i]        = (((-((int32_t) ((0.3313 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003972:	ea4f 4222 	mov.w	r2, r2, asr #16
90003976:	f846 2f04 	str.w	r2, [r6, #4]!
    GREEN_CR_LUT[i]        = (((-((int32_t) ((0.4187 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000397a:	4a2c      	ldr	r2, [pc, #176]	; (90003a2c <TGFX_JPEG_InitColorTables+0x12c>)
9000397c:	fb02 b203 	mla	r2, r2, r3, fp
90003980:	ea4f 4222 	mov.w	r2, r2, asr #16
90003984:	f844 2f04 	str.w	r2, [r4, #4]!
    BLUE_CR_LUT[i]         = (((-((int32_t) ((0.0813 ) * (1L << 16)))) * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003988:	4a29      	ldr	r2, [pc, #164]	; (90003a30 <TGFX_JPEG_InitColorTables+0x130>)
9000398a:	fb02 a203 	mla	r2, r2, r3, sl
9000398e:	ea4f 4222 	mov.w	r2, r2, asr #16
90003992:	f840 2f04 	str.w	r2, [r0, #4]!
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
90003996:	ea4f 4221 	mov.w	r2, r1, asr #16
  for (i = 0; i <= 255; i++)
9000399a:	4449      	add	r1, r9
    RED_Y_LUT[i]           = ((  ((int32_t) ((0.299 )  * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
9000399c:	f848 2f04 	str.w	r2, [r8, #4]!
    BLUE_CB_RED_CR_LUT[i]  = ((  ((int32_t) ((0.5 )    * (1L << 16)))  * i) + ((int32_t) 1 << (16 - 1))) >> 16 ;
900039a0:	f343 024f 	sbfx	r2, r3, #1, #16
900039a4:	f845 2f04 	str.w	r2, [r5, #4]!
  for (i = 0; i <= 255; i++)
900039a8:	d1c1      	bne.n	9000392e <TGFX_JPEG_InitColorTables+0x2e>
900039aa:	f8df e094 	ldr.w	lr, [pc, #148]	; 90003a40 <TGFX_JPEG_InitColorTables+0x140>
900039ae:	2138      	movs	r1, #56	; 0x38
void TGFX_JPEG_Init_MCU_LUT(void)
{
  uint32_t i, j, offset;

  /*Y LUT */
  for(i = 0; i < 16; i++)
900039b0:	f04f 0c00 	mov.w	ip, #0
900039b4:	e007      	b.n	900039c6 <TGFX_JPEG_InitColorTables+0xc6>
900039b6:	f10c 0c01 	add.w	ip, ip, #1
900039ba:	f10e 0e20 	add.w	lr, lr, #32
900039be:	4641      	mov	r1, r8
900039c0:	f1bc 0f10 	cmp.w	ip, #16
900039c4:	d03e      	beq.n	90003a44 <TGFX_JPEG_InitColorTables+0x144>
  {
    for(j = 0; j < 16; j++)
    {
      offset =  j + (i*8);
      if((j>=8) && (i>=8)) offset+= 120;
900039c6:	f1bc 0f07 	cmp.w	ip, #7
900039ca:	f101 0808 	add.w	r8, r1, #8
900039ce:	4672      	mov	r2, lr
900039d0:	f04f 0001 	mov.w	r0, #1
900039d4:	bf94      	ite	ls
900039d6:	2600      	movls	r6, #0
900039d8:	2601      	movhi	r6, #1
900039da:	fa1f f388 	uxth.w	r3, r8
900039de:	2400      	movs	r4, #0
900039e0:	2c07      	cmp	r4, #7
900039e2:	f1a1 0538 	sub.w	r5, r1, #56	; 0x38
900039e6:	bf94      	ite	ls
900039e8:	2700      	movls	r7, #0
900039ea:	2701      	movhi	r7, #1
900039ec:	2f00      	cmp	r7, #0
900039ee:	f000 8356 	beq.w	9000409e <TGFX_JPEG_InitColorTables+0x79e>
900039f2:	2e00      	cmp	r6, #0
900039f4:	f000 8353 	beq.w	9000409e <TGFX_JPEG_InitColorTables+0x79e>
900039f8:	f101 0540 	add.w	r5, r1, #64	; 0x40
    for(j = 0; j < 16; j++)
900039fc:	2810      	cmp	r0, #16
      else  if((j>=8) && (i<8)) offset+= 56;
      else  if((j<8) && (i>=8)) offset+= 64;

      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900039fe:	8015      	strh	r5, [r2, #0]
    for(j = 0; j < 16; j++)
90003a00:	d0d9      	beq.n	900039b6 <TGFX_JPEG_InitColorTables+0xb6>
90003a02:	3301      	adds	r3, #1
90003a04:	3401      	adds	r4, #1
90003a06:	3001      	adds	r0, #1
90003a08:	3202      	adds	r2, #2
90003a0a:	b29b      	uxth	r3, r3
90003a0c:	3101      	adds	r1, #1
90003a0e:	e7e7      	b.n	900039e0 <TGFX_JPEG_InitColorTables+0xe0>
90003a10:	2400b1b8 	.word	0x2400b1b8
90003a14:	24009578 	.word	0x24009578
90003a18:	24007978 	.word	0x24007978
90003a1c:	24009978 	.word	0x24009978
90003a20:	24007d78 	.word	0x24007d78
90003a24:	ffffd4d1 	.word	0xffffd4d1
90003a28:	ffffab30 	.word	0xffffab30
90003a2c:	ffff94d1 	.word	0xffff94d1
90003a30:	ffffeb30 	.word	0xffffeb30
90003a34:	24008178 	.word	0x24008178
90003a38:	2400b5b8 	.word	0x2400b5b8
90003a3c:	24009d78 	.word	0x24009d78
90003a40:	2400afbc 	.word	0x2400afbc
    }
  }

  /*Cb Cr K LUT*/
  for(i = 0; i < 16; i++)
90003a44:	2300      	movs	r3, #0
90003a46:	f8df b370 	ldr.w	fp, [pc, #880]	; 90003db8 <TGFX_JPEG_InitColorTables+0x4b8>
90003a4a:	f8df a370 	ldr.w	sl, [pc, #880]	; 90003dbc <TGFX_JPEG_InitColorTables+0x4bc>
  for(i = 0; i < 16; i++)
90003a4e:	2680      	movs	r6, #128	; 0x80
90003a50:	f8df 836c 	ldr.w	r8, [pc, #876]	; 90003dc0 <TGFX_JPEG_InitColorTables+0x4c0>
90003a54:	f8df e36c 	ldr.w	lr, [pc, #876]	; 90003dc4 <TGFX_JPEG_InitColorTables+0x4c4>
90003a58:	f8df c36c 	ldr.w	ip, [pc, #876]	; 90003dc8 <TGFX_JPEG_InitColorTables+0x4c8>
90003a5c:	4fce      	ldr	r7, [pc, #824]	; (90003d98 <TGFX_JPEG_InitColorTables+0x498>)
  for(i = 0; i < 16; i++)
90003a5e:	9300      	str	r3, [sp, #0]

      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;

      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a60:	f106 0441 	add.w	r4, r6, #65	; 0x41
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a64:	9800      	ldr	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a66:	f106 0240 	add.w	r2, r6, #64	; 0x40
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a6a:	1c71      	adds	r1, r6, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a6c:	b2a4      	uxth	r4, r4
90003a6e:	f106 0542 	add.w	r5, r6, #66	; 0x42
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a72:	0843      	lsrs	r3, r0, #1
  for(i = 0; i < 16; i++)
90003a74:	3001      	adds	r0, #1
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a76:	f8ae 4004 	strh.w	r4, [lr, #4]
90003a7a:	b292      	uxth	r2, r2
90003a7c:	f8ae 4006 	strh.w	r4, [lr, #6]
90003a80:	f106 0443 	add.w	r4, r6, #67	; 0x43
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a84:	00db      	lsls	r3, r3, #3
  for(i = 0; i < 16; i++)
90003a86:	9000      	str	r0, [sp, #0]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a88:	b2a4      	uxth	r4, r4
90003a8a:	f8ae 2000 	strh.w	r2, [lr]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a8e:	b29b      	uxth	r3, r3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003a90:	f8ae 2002 	strh.w	r2, [lr, #2]
90003a94:	9401      	str	r4, [sp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a96:	1d34      	adds	r4, r6, #4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003a98:	f503 7080 	add.w	r0, r3, #256	; 0x100
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003a9c:	b289      	uxth	r1, r1
90003a9e:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003aa0:	f203 1201 	addw	r2, r3, #257	; 0x101
90003aa4:	b280      	uxth	r0, r0
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aa6:	f8aa 1004 	strh.w	r1, [sl, #4]
90003aaa:	9402      	str	r4, [sp, #8]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003aac:	f106 0444 	add.w	r4, r6, #68	; 0x44
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ab0:	b292      	uxth	r2, r2
90003ab2:	f8ab 0000 	strh.w	r0, [fp]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ab6:	b2a4      	uxth	r4, r4

      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ab8:	8038      	strh	r0, [r7, #0]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003aba:	f8ab 0002 	strh.w	r0, [fp, #2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003abe:	f503 79a1 	add.w	r9, r3, #322	; 0x142
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ac2:	9403      	str	r4, [sp, #12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ac4:	1d74      	adds	r4, r6, #5
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ac6:	8078      	strh	r0, [r7, #2]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ac8:	1cb0      	adds	r0, r6, #2
90003aca:	b2a4      	uxth	r4, r4
90003acc:	f8aa 1006 	strh.w	r1, [sl, #6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ad0:	f503 7181 	add.w	r1, r3, #258	; 0x102
90003ad4:	f8ab 2004 	strh.w	r2, [fp, #4]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003ad8:	9404      	str	r4, [sp, #16]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ada:	f106 0445 	add.w	r4, r6, #69	; 0x45
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ade:	b289      	uxth	r1, r1
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ae0:	80ba      	strh	r2, [r7, #4]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ae2:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ae4:	f8ab 2006 	strh.w	r2, [fp, #6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ae8:	80fa      	strh	r2, [r7, #6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003aea:	b2ad      	uxth	r5, r5
90003aec:	9405      	str	r4, [sp, #20]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003aee:	1db4      	adds	r4, r6, #6
90003af0:	b282      	uxth	r2, r0
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003af2:	f8ab 1008 	strh.w	r1, [fp, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003af6:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003af8:	8139      	strh	r1, [r7, #8]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003afa:	fa1f f989 	uxth.w	r9, r9
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003afe:	f8ab 100a 	strh.w	r1, [fp, #10]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b02:	9406      	str	r4, [sp, #24]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b04:	f106 0446 	add.w	r4, r6, #70	; 0x46
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b08:	f8a8 9008 	strh.w	r9, [r8, #8]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b0c:	1cf0      	adds	r0, r6, #3
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b0e:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b10:	f8aa 6000 	strh.w	r6, [sl]
90003b14:	f8aa 6002 	strh.w	r6, [sl, #2]
90003b18:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b1a:	9407      	str	r4, [sp, #28]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b1c:	1df4      	adds	r4, r6, #7
90003b1e:	f8aa 2008 	strh.w	r2, [sl, #8]
  for(i = 0; i < 16; i++)
90003b22:	f10c 0c20 	add.w	ip, ip, #32
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b26:	b2a4      	uxth	r4, r4
90003b28:	f8aa 200a 	strh.w	r2, [sl, #10]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b2c:	f8ae 5008 	strh.w	r5, [lr, #8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b30:	f203 1203 	addw	r2, r3, #259	; 0x103
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b34:	9408      	str	r4, [sp, #32]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b36:	f106 0447 	add.w	r4, r6, #71	; 0x47
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b3a:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b3c:	f8ae 500a 	strh.w	r5, [lr, #10]
90003b40:	b2a4      	uxth	r4, r4
90003b42:	9d05      	ldr	r5, [sp, #20]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b44:	f8ab 200c 	strh.w	r2, [fp, #12]
  for(i = 0; i < 16; i++)
90003b48:	f108 0820 	add.w	r8, r8, #32
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003b4c:	9409      	str	r4, [sp, #36]	; 0x24
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b4e:	f503 74a0 	add.w	r4, r3, #320	; 0x140
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b52:	81ba      	strh	r2, [r7, #12]
  for(i = 0; i < 16; i++)
90003b54:	f10b 0b20 	add.w	fp, fp, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b58:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b5a:	81fa      	strh	r2, [r7, #14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b5c:	f82b 2c12 	strh.w	r2, [fp, #-18]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b60:	f203 1243 	addw	r2, r3, #323	; 0x143
90003b64:	f828 4c20 	strh.w	r4, [r8, #-32]
  for(i = 0; i < 16; i++)
90003b68:	3720      	adds	r7, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b6a:	f828 4c1e 	strh.w	r4, [r8, #-30]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b6e:	f503 74c0 	add.w	r4, r3, #384	; 0x180
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b72:	b292      	uxth	r2, r2
90003b74:	f828 9c16 	strh.w	r9, [r8, #-22]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b78:	b2a4      	uxth	r4, r4
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003b7a:	f827 1c16 	strh.w	r1, [r7, #-22]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b7e:	f8aa 000c 	strh.w	r0, [sl, #12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b82:	f203 1185 	addw	r1, r3, #389	; 0x185
90003b86:	f82c 4c20 	strh.w	r4, [ip, #-32]
  for(i = 0; i < 16; i++)
90003b8a:	3608      	adds	r6, #8
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003b8c:	f82c 4c1e 	strh.w	r4, [ip, #-30]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b90:	f203 1441 	addw	r4, r3, #321	; 0x141
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003b94:	f8aa 000e 	strh.w	r0, [sl, #14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003b98:	f203 1045 	addw	r0, r3, #325	; 0x145
90003b9c:	b2a4      	uxth	r4, r4
  for(i = 0; i < 16; i++)
90003b9e:	f10a 0a20 	add.w	sl, sl, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ba2:	b280      	uxth	r0, r0
  for(i = 0; i < 16; i++)
90003ba4:	f10e 0e20 	add.w	lr, lr, #32
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ba8:	f828 4c1c 	strh.w	r4, [r8, #-28]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003bac:	b289      	uxth	r1, r1
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003bae:	f828 4c1a 	strh.w	r4, [r8, #-26]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003bb2:	f203 1481 	addw	r4, r3, #385	; 0x181
  for(i = 0; i < 16; i++)
90003bb6:	b2b6      	uxth	r6, r6
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003bb8:	b2a4      	uxth	r4, r4
90003bba:	f82c 4c1c 	strh.w	r4, [ip, #-28]
90003bbe:	f82c 4c1a 	strh.w	r4, [ip, #-26]
90003bc2:	f503 74c1 	add.w	r4, r3, #386	; 0x182
90003bc6:	b2a4      	uxth	r4, r4
90003bc8:	f82c 4c18 	strh.w	r4, [ip, #-24]
90003bcc:	f82c 4c16 	strh.w	r4, [ip, #-22]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003bd0:	9c01      	ldr	r4, [sp, #4]
90003bd2:	f82e 4c14 	strh.w	r4, [lr, #-20]
90003bd6:	f82e 4c12 	strh.w	r4, [lr, #-18]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003bda:	9c02      	ldr	r4, [sp, #8]
90003bdc:	f82a 4c10 	strh.w	r4, [sl, #-16]
90003be0:	f82a 4c0e 	strh.w	r4, [sl, #-14]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003be4:	9c03      	ldr	r4, [sp, #12]
90003be6:	f82e 4c10 	strh.w	r4, [lr, #-16]
90003bea:	f82e 4c0e 	strh.w	r4, [lr, #-14]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003bee:	9c04      	ldr	r4, [sp, #16]
90003bf0:	f82a 4c0c 	strh.w	r4, [sl, #-12]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003bf4:	f82e 5c0c 	strh.w	r5, [lr, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003bf8:	f828 2c14 	strh.w	r2, [r8, #-20]
90003bfc:	f828 2c12 	strh.w	r2, [r8, #-18]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c00:	f203 1283 	addw	r2, r3, #387	; 0x183
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c04:	f82a 4c0a 	strh.w	r4, [sl, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c08:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c0a:	9c06      	ldr	r4, [sp, #24]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c0c:	f828 0c0c 	strh.w	r0, [r8, #-12]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c10:	f82c 2c14 	strh.w	r2, [ip, #-20]
90003c14:	f82c 2c12 	strh.w	r2, [ip, #-18]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c18:	f503 7282 	add.w	r2, r3, #260	; 0x104
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c1c:	f82a 4c08 	strh.w	r4, [sl, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c20:	b292      	uxth	r2, r2
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c22:	f82a 4c06 	strh.w	r4, [sl, #-6]
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c26:	9c07      	ldr	r4, [sp, #28]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c28:	f82b 2c10 	strh.w	r2, [fp, #-16]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c2c:	f827 2c10 	strh.w	r2, [r7, #-16]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c30:	f82b 2c0e 	strh.w	r2, [fp, #-14]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c34:	f827 2c0e 	strh.w	r2, [r7, #-14]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c38:	f503 72a2 	add.w	r2, r3, #324	; 0x144
90003c3c:	f828 0c0a 	strh.w	r0, [r8, #-10]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c40:	f503 70c3 	add.w	r0, r3, #390	; 0x186
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c44:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c46:	f82e 4c08 	strh.w	r4, [lr, #-8]
90003c4a:	f82e 4c06 	strh.w	r4, [lr, #-6]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c4e:	b280      	uxth	r0, r0
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c50:	f828 2c10 	strh.w	r2, [r8, #-16]
90003c54:	f828 2c0e 	strh.w	r2, [r8, #-14]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c58:	f503 72c2 	add.w	r2, r3, #388	; 0x184
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c5c:	9c08      	ldr	r4, [sp, #32]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c5e:	b292      	uxth	r2, r2
90003c60:	f82c 1c0c 	strh.w	r1, [ip, #-12]
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c64:	f82a 4c04 	strh.w	r4, [sl, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c68:	f82c 2c10 	strh.w	r2, [ip, #-16]
90003c6c:	f82c 2c0e 	strh.w	r2, [ip, #-14]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c70:	f203 1205 	addw	r2, r3, #261	; 0x105
      JPEG_Cb_MCU_422_LUT[offset] = (j/2) + (i*8) + 128;
90003c74:	f82a 4c02 	strh.w	r4, [sl, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c78:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c7a:	9c09      	ldr	r4, [sp, #36]	; 0x24
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003c7c:	f82c 1c0a 	strh.w	r1, [ip, #-10]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c80:	f203 1147 	addw	r1, r3, #327	; 0x147
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c84:	f82b 2c0c 	strh.w	r2, [fp, #-12]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c88:	f827 2c0c 	strh.w	r2, [r7, #-12]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003c8c:	b289      	uxth	r1, r1
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c8e:	f82b 2c0a 	strh.w	r2, [fp, #-10]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c92:	f827 2c0a 	strh.w	r2, [r7, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c96:	f203 1207 	addw	r2, r3, #263	; 0x107
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003c9a:	f82e 5c0a 	strh.w	r5, [lr, #-10]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003c9e:	b292      	uxth	r2, r2
      JPEG_Cr_MCU_422_LUT[offset] = (j/2) + (i*8) + 192;
90003ca0:	f82e 4c04 	strh.w	r4, [lr, #-4]
90003ca4:	f82e 4c02 	strh.w	r4, [lr, #-2]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ca8:	f503 74a3 	add.w	r4, r3, #326	; 0x146
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cac:	f82b 2c04 	strh.w	r2, [fp, #-4]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cb0:	f827 2c04 	strh.w	r2, [r7, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003cb4:	b2a4      	uxth	r4, r4
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cb6:	f82b 2c02 	strh.w	r2, [fp, #-2]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cba:	f827 2c02 	strh.w	r2, [r7, #-2]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cbe:	f503 7283 	add.w	r2, r3, #262	; 0x106
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003cc2:	f82c 0c08 	strh.w	r0, [ip, #-8]
90003cc6:	f203 1387 	addw	r3, r3, #391	; 0x187
90003cca:	f82c 0c06 	strh.w	r0, [ip, #-6]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cce:	b292      	uxth	r2, r2
  for(i = 0; i < 16; i++)
90003cd0:	9800      	ldr	r0, [sp, #0]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003cd2:	b29b      	uxth	r3, r3
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cd4:	f82b 2c08 	strh.w	r2, [fp, #-8]
  for(i = 0; i < 16; i++)
90003cd8:	2810      	cmp	r0, #16
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003cda:	f828 4c08 	strh.w	r4, [r8, #-8]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cde:	f827 2c08 	strh.w	r2, [r7, #-8]
      JPEG_Cb_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003ce2:	f82b 2c06 	strh.w	r2, [fp, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003ce6:	f828 4c06 	strh.w	r4, [r8, #-6]
      JPEG_K_MCU_422_LUT[offset] = (j/2) + ((i/2)*8) + 256;
90003cea:	f827 2c06 	strh.w	r2, [r7, #-6]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003cee:	f828 1c04 	strh.w	r1, [r8, #-4]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003cf2:	f82c 3c04 	strh.w	r3, [ip, #-4]
      JPEG_Cr_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 320;
90003cf6:	f828 1c02 	strh.w	r1, [r8, #-2]
      JPEG_K_MCU_420_LUT[offset] = (j/2) + ((i/2)*8) + 384;
90003cfa:	f82c 3c02 	strh.w	r3, [ip, #-2]
  for(i = 0; i < 16; i++)
90003cfe:	f47f aeaf 	bne.w	90003a60 <TGFX_JPEG_InitColorTables+0x160>
  {
    for(j = 0; j < 8; j++)
    {
      offset = i*8 + j;

      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d02:	4826      	ldr	r0, [pc, #152]	; (90003d9c <TGFX_JPEG_InitColorTables+0x49c>)
90003d04:	f44f 3480 	mov.w	r4, #65536	; 0x10000
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003d08:	4925      	ldr	r1, [pc, #148]	; (90003da0 <TGFX_JPEG_InitColorTables+0x4a0>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d0a:	6004      	str	r4, [r0, #0]
90003d0c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003d10:	4a24      	ldr	r2, [pc, #144]	; (90003da4 <TGFX_JPEG_InitColorTables+0x4a4>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d12:	6044      	str	r4, [r0, #4]
90003d14:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003d18:	4b23      	ldr	r3, [pc, #140]	; (90003da8 <TGFX_JPEG_InitColorTables+0x4a8>)
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d1a:	6084      	str	r4, [r0, #8]
90003d1c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d20:	4f22      	ldr	r7, [pc, #136]	; (90003dac <TGFX_JPEG_InitColorTables+0x4ac>)
90003d22:	60c4      	str	r4, [r0, #12]
90003d24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d28:	4e21      	ldr	r6, [pc, #132]	; (90003db0 <TGFX_JPEG_InitColorTables+0x4b0>)
90003d2a:	6104      	str	r4, [r0, #16]
90003d2c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d30:	4d20      	ldr	r5, [pc, #128]	; (90003db4 <TGFX_JPEG_InitColorTables+0x4b4>)
90003d32:	6144      	str	r4, [r0, #20]
90003d34:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d38:	f8df b090 	ldr.w	fp, [pc, #144]	; 90003dcc <TGFX_JPEG_InitColorTables+0x4cc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d3c:	6184      	str	r4, [r0, #24]
90003d3e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d42:	f8df a08c 	ldr.w	sl, [pc, #140]	; 90003dd0 <TGFX_JPEG_InitColorTables+0x4d0>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d46:	61c4      	str	r4, [r0, #28]
90003d48:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d4c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 90003dd4 <TGFX_JPEG_InitColorTables+0x4d4>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d50:	6204      	str	r4, [r0, #32]
90003d52:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d56:	f8df 8080 	ldr.w	r8, [pc, #128]	; 90003dd8 <TGFX_JPEG_InitColorTables+0x4d8>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d5a:	6244      	str	r4, [r0, #36]	; 0x24
90003d5c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
  for (i = 0; i <= 255; i++)
90003d60:	f8df e078 	ldr.w	lr, [pc, #120]	; 90003ddc <TGFX_JPEG_InitColorTables+0x4dc>
      JPEG_Y_MCU_444_LUT[offset]  = offset;
90003d64:	6284      	str	r4, [r0, #40]	; 0x28
90003d66:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d6a:	62c4      	str	r4, [r0, #44]	; 0x2c
90003d6c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d70:	6304      	str	r4, [r0, #48]	; 0x30
90003d72:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d76:	6344      	str	r4, [r0, #52]	; 0x34
90003d78:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d7c:	6384      	str	r4, [r0, #56]	; 0x38
90003d7e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d82:	63c4      	str	r4, [r0, #60]	; 0x3c
90003d84:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d88:	6404      	str	r4, [r0, #64]	; 0x40
90003d8a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d8e:	6444      	str	r4, [r0, #68]	; 0x44
90003d90:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003d94:	e024      	b.n	90003de0 <TGFX_JPEG_InitColorTables+0x4e0>
90003d96:	bf00      	nop
90003d98:	2400acbc 	.word	0x2400acbc
90003d9c:	2400af3c 	.word	0x2400af3c
90003da0:	2400a57c 	.word	0x2400a57c
90003da4:	2400aa3c 	.word	0x2400aa3c
90003da8:	2400aebc 	.word	0x2400aebc
90003dac:	24009178 	.word	0x24009178
90003db0:	24008578 	.word	0x24008578
90003db4:	24008d78 	.word	0x24008d78
90003db8:	2400a17c 	.word	0x2400a17c
90003dbc:	2400a37c 	.word	0x2400a37c
90003dc0:	2400a63c 	.word	0x2400a63c
90003dc4:	2400a83c 	.word	0x2400a83c
90003dc8:	2400aabc 	.word	0x2400aabc
90003dcc:	000166e8 	.word	0x000166e8
90003dd0:	0001c5a0 	.word	0x0001c5a0
90003dd4:	ffff4930 	.word	0xffff4930
90003dd8:	ffffa7e8 	.word	0xffffa7e8
90003ddc:	00b3f400 	.word	0x00b3f400
90003de0:	6484      	str	r4, [r0, #72]	; 0x48
90003de2:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003de6:	64c4      	str	r4, [r0, #76]	; 0x4c
90003de8:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003dec:	6504      	str	r4, [r0, #80]	; 0x50
90003dee:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003df2:	6544      	str	r4, [r0, #84]	; 0x54
90003df4:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003df8:	6584      	str	r4, [r0, #88]	; 0x58
90003dfa:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003dfe:	65c4      	str	r4, [r0, #92]	; 0x5c
90003e00:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e04:	6604      	str	r4, [r0, #96]	; 0x60
90003e06:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e0a:	6644      	str	r4, [r0, #100]	; 0x64
90003e0c:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e10:	6684      	str	r4, [r0, #104]	; 0x68
90003e12:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e16:	66c4      	str	r4, [r0, #108]	; 0x6c
90003e18:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e1c:	6704      	str	r4, [r0, #112]	; 0x70
90003e1e:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e22:	6744      	str	r4, [r0, #116]	; 0x74
90003e24:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e28:	6784      	str	r4, [r0, #120]	; 0x78
90003e2a:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e2e:	67c4      	str	r4, [r0, #124]	; 0x7c
      JPEG_Cb_MCU_444_LUT[offset] = offset + 64 ;
90003e30:	f104 1402 	add.w	r4, r4, #131074	; 0x20002
90003e34:	48a1      	ldr	r0, [pc, #644]	; (900040bc <TGFX_JPEG_InitColorTables+0x7bc>)
90003e36:	e9c1 4000 	strd	r4, r0, [r1]
90003e3a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e3e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e42:	e9c1 4002 	strd	r4, r0, [r1, #8]
90003e46:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e4a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e4e:	e9c1 4004 	strd	r4, r0, [r1, #16]
90003e52:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e56:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e5a:	e9c1 4006 	strd	r4, r0, [r1, #24]
90003e5e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e62:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e66:	e9c1 4008 	strd	r4, r0, [r1, #32]
90003e6a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e6e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e72:	e9c1 400a 	strd	r4, r0, [r1, #40]	; 0x28
90003e76:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e7a:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e7e:	e9c1 400c 	strd	r4, r0, [r1, #48]	; 0x30
90003e82:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e86:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e8a:	e9c1 400e 	strd	r4, r0, [r1, #56]	; 0x38
90003e8e:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e92:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003e96:	e9c1 4010 	strd	r4, r0, [r1, #64]	; 0x40
90003e9a:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003e9e:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ea2:	e9c1 4012 	strd	r4, r0, [r1, #72]	; 0x48
90003ea6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003eaa:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003eae:	e9c1 4014 	strd	r4, r0, [r1, #80]	; 0x50
90003eb2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003eb6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003eba:	e9c1 4016 	strd	r4, r0, [r1, #88]	; 0x58
90003ebe:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ec2:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ec6:	e9c1 4018 	strd	r4, r0, [r1, #96]	; 0x60
90003eca:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ece:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ed2:	e9c1 401a 	strd	r4, r0, [r1, #104]	; 0x68
90003ed6:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003eda:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003ede:	e9c1 401c 	strd	r4, r0, [r1, #112]	; 0x70
90003ee2:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ee6:	f100 1004 	add.w	r0, r0, #262148	; 0x40004
90003eea:	e9c1 401e 	strd	r4, r0, [r1, #120]	; 0x78
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003eee:	f104 1404 	add.w	r4, r4, #262148	; 0x40004
90003ef2:	4973      	ldr	r1, [pc, #460]	; (900040c0 <TGFX_JPEG_InitColorTables+0x7c0>)
90003ef4:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003ef8:	e9c2 4100 	strd	r4, r1, [r2]
90003efc:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f00:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f04:	e9c2 0102 	strd	r0, r1, [r2, #8]
90003f08:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f0c:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f10:	e9c2 4104 	strd	r4, r1, [r2, #16]
90003f14:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f18:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f1c:	e9c2 0106 	strd	r0, r1, [r2, #24]
90003f20:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f24:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f28:	e9c2 4108 	strd	r4, r1, [r2, #32]
90003f2c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f30:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f34:	e9c2 010a 	strd	r0, r1, [r2, #40]	; 0x28
90003f38:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f3c:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f40:	e9c2 410c 	strd	r4, r1, [r2, #48]	; 0x30
90003f44:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f48:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f4c:	e9c2 010e 	strd	r0, r1, [r2, #56]	; 0x38
90003f50:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f54:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f58:	e9c2 4110 	strd	r4, r1, [r2, #64]	; 0x40
90003f5c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f60:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f64:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
90003f68:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f6c:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f70:	e9c2 4114 	strd	r4, r1, [r2, #80]	; 0x50
90003f74:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f78:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f7c:	e9c2 0116 	strd	r0, r1, [r2, #88]	; 0x58
90003f80:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f84:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003f88:	e9c2 4118 	strd	r4, r1, [r2, #96]	; 0x60
90003f8c:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f90:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003f94:	e9c2 011a 	strd	r0, r1, [r2, #104]	; 0x68
90003f98:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
90003f9c:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fa0:	e9c2 411c 	strd	r4, r1, [r2, #112]	; 0x70
90003fa4:	f101 1104 	add.w	r1, r1, #262148	; 0x40004
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fa8:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
      JPEG_Cr_MCU_444_LUT[offset] = offset + 128 ;
90003fac:	e9c2 011e 	strd	r0, r1, [r2, #120]	; 0x78
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
90003fb0:	f100 1006 	add.w	r0, r0, #393222	; 0x60006
90003fb4:	f101 1106 	add.w	r1, r1, #393222	; 0x60006
90003fb8:	4a42      	ldr	r2, [pc, #264]	; (900040c4 <TGFX_JPEG_InitColorTables+0x7c4>)
90003fba:	e9c3 4000 	strd	r4, r0, [r3]
90003fbe:	e9c3 1202 	strd	r1, r2, [r3, #8]
90003fc2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fc6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fca:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fce:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fd2:	e9c3 4004 	strd	r4, r0, [r3, #16]
90003fd6:	e9c3 1206 	strd	r1, r2, [r3, #24]
90003fda:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003fde:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003fe2:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003fe6:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90003fea:	e9c3 4008 	strd	r4, r0, [r3, #32]
90003fee:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
90003ff2:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90003ff6:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90003ffa:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90003ffe:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90004002:	e9c3 400c 	strd	r4, r0, [r3, #48]	; 0x30
90004006:	e9c3 120e 	strd	r1, r2, [r3, #56]	; 0x38
9000400a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
9000400e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90004012:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90004016:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
9000401a:	e9c3 4010 	strd	r4, r0, [r3, #64]	; 0x40
9000401e:	e9c3 1212 	strd	r1, r2, [r3, #72]	; 0x48
90004022:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90004026:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
9000402a:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
9000402e:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90004032:	e9c3 4014 	strd	r4, r0, [r3, #80]	; 0x50
90004036:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
9000403a:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
9000403e:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
90004042:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
90004046:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
9000404a:	e9c3 4018 	strd	r4, r0, [r3, #96]	; 0x60
9000404e:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
90004052:	f104 1408 	add.w	r4, r4, #524296	; 0x80008
90004056:	f100 1008 	add.w	r0, r0, #524296	; 0x80008
9000405a:	f101 1108 	add.w	r1, r1, #524296	; 0x80008
9000405e:	f102 1208 	add.w	r2, r2, #524296	; 0x80008
90004062:	e9c3 401c 	strd	r4, r0, [r3, #112]	; 0x70
90004066:	e9c3 121e 	strd	r1, r2, [r3, #120]	; 0x78
  for(i = 0; i < 8; i++)
9000406a:	4c17      	ldr	r4, [pc, #92]	; (900040c8 <TGFX_JPEG_InitColorTables+0x7c8>)
      JPEG_K_MCU_444_LUT[offset]  = offset + 192 ;
9000406c:	4817      	ldr	r0, [pc, #92]	; (900040cc <TGFX_JPEG_InitColorTables+0x7cc>)
9000406e:	4918      	ldr	r1, [pc, #96]	; (900040d0 <TGFX_JPEG_InitColorTables+0x7d0>)
90004070:	4a18      	ldr	r2, [pc, #96]	; (900040d4 <TGFX_JPEG_InitColorTables+0x7d4>)
90004072:	4b19      	ldr	r3, [pc, #100]	; (900040d8 <TGFX_JPEG_InitColorTables+0x7d8>)
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004074:	ea4f 4c23 	mov.w	ip, r3, asr #16
  for (i = 0; i <= 255; i++)
90004078:	445b      	add	r3, fp
    CR_GREEN_LUT[i] = (-((int32_t) ((0.71414 / 2) * (1L << 16)))) * index;
9000407a:	f845 1f04 	str.w	r1, [r5, #4]!
  for (i = 0; i <= 255; i++)
9000407e:	4449      	add	r1, r9
    CR_RED_LUT[i] = ( (((int32_t) ((1.40200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004080:	f847 cf04 	str.w	ip, [r7, #4]!
  for (i = 0; i <= 255; i++)
90004084:	4573      	cmp	r3, lr
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004086:	ea4f 4c22 	mov.w	ip, r2, asr #16
    CB_GREEN_LUT[i] = (-((int32_t) ((0.34414 / 2) * (1L << 16)))) * index;
9000408a:	f844 0f04 	str.w	r0, [r4, #4]!
  for (i = 0; i <= 255; i++)
9000408e:	4452      	add	r2, sl
90004090:	4440      	add	r0, r8
    CB_BLUE_LUT[i] = ( (((int32_t) ((1.77200 / 2) * (1L << 16)))  * index) + ((int32_t) 1 << (16 - 1))) >> 16;
90004092:	f846 cf04 	str.w	ip, [r6, #4]!
  for (i = 0; i <= 255; i++)
90004096:	d1ed      	bne.n	90004074 <TGFX_JPEG_InitColorTables+0x774>
}
90004098:	b00b      	add	sp, #44	; 0x2c
9000409a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      else  if((j>=8) && (i<8)) offset+= 56;
9000409e:	f1bc 0f07 	cmp.w	ip, #7
900040a2:	d802      	bhi.n	900040aa <TGFX_JPEG_InitColorTables+0x7aa>
900040a4:	b10f      	cbz	r7, 900040aa <TGFX_JPEG_InitColorTables+0x7aa>
900040a6:	460d      	mov	r5, r1
900040a8:	e4a8      	b.n	900039fc <TGFX_JPEG_InitColorTables+0xfc>
      else  if((j<8) && (i>=8)) offset+= 64;
900040aa:	2c07      	cmp	r4, #7
900040ac:	f63f aca6 	bhi.w	900039fc <TGFX_JPEG_InitColorTables+0xfc>
900040b0:	2e00      	cmp	r6, #0
900040b2:	f43f aca3 	beq.w	900039fc <TGFX_JPEG_InitColorTables+0xfc>
      JPEG_Y_MCU_LUT[i*16 + j] = offset;
900040b6:	8013      	strh	r3, [r2, #0]
    for(j = 0; j < 16; j++)
900040b8:	e4a3      	b.n	90003a02 <TGFX_JPEG_InitColorTables+0x102>
900040ba:	bf00      	nop
900040bc:	00430042 	.word	0x00430042
900040c0:	00830082 	.word	0x00830082
900040c4:	00c700c6 	.word	0x00c700c6
900040c8:	24008978 	.word	0x24008978
900040cc:	002c0c00 	.word	0x002c0c00
900040d0:	005b6800 	.word	0x005b6800
900040d4:	ff1db000 	.word	0xff1db000
900040d8:	ff4d0c00 	.word	0xff4d0c00

900040dc <vApplicationIdleHook>:
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
  
  vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
900040dc:	4901      	ldr	r1, [pc, #4]	; (900040e4 <vApplicationIdleHook+0x8>)
900040de:	2000      	movs	r0, #0
900040e0:	f00e bfd2 	b.w	90013088 <vTaskSetApplicationTaskTag>
900040e4:	90000c19 	.word	0x90000c19

900040e8 <StartDefaultTask>:
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
  /* USER CODE BEGIN 5 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
900040e8:	f44f 7280 	mov.w	r2, #256	; 0x100
900040ec:	4904      	ldr	r1, [pc, #16]	; (90004100 <StartDefaultTask+0x18>)
900040ee:	4805      	ldr	r0, [pc, #20]	; (90004104 <StartDefaultTask+0x1c>)
{
900040f0:	b508      	push	{r3, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
900040f2:	f00c fb99 	bl	90010828 <HAL_UARTEx_ReceiveToIdle_IT>
  /* Infinite loop */
  for(;;)
  {
    osDelay(100);
900040f6:	2064      	movs	r0, #100	; 0x64
900040f8:	f00c fd02 	bl	90010b00 <osDelay>
  for(;;)
900040fc:	e7fb      	b.n	900040f6 <StartDefaultTask+0xe>
900040fe:	bf00      	nop
90004100:	2400b9c0 	.word	0x2400b9c0
90004104:	2400bd60 	.word	0x2400bd60

90004108 <HAL_UARTEx_RxEventCallback>:
{
90004108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (osMessageQueueGetSpace(uartQueueHandle) > 0)
9000410c:	4e11      	ldr	r6, [pc, #68]	; (90004154 <HAL_UARTEx_RxEventCallback+0x4c>)
	RxData[Size] = '\0';  // terminating charcter
9000410e:	2500      	movs	r5, #0
90004110:	4f11      	ldr	r7, [pc, #68]	; (90004158 <HAL_UARTEx_RxEventCallback+0x50>)
{
90004112:	460c      	mov	r4, r1
	if (osMessageQueueGetSpace(uartQueueHandle) > 0)
90004114:	6830      	ldr	r0, [r6, #0]
	RxData[Size] = '\0';  // terminating charcter
90004116:	547d      	strb	r5, [r7, r1]
	if (osMessageQueueGetSpace(uartQueueHandle) > 0)
90004118:	f00c fef4 	bl	90010f04 <osMessageQueueGetSpace>
9000411c:	b938      	cbnz	r0, 9000412e <HAL_UARTEx_RxEventCallback+0x26>
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
9000411e:	f44f 7280 	mov.w	r2, #256	; 0x100
90004122:	490d      	ldr	r1, [pc, #52]	; (90004158 <HAL_UARTEx_RxEventCallback+0x50>)
90004124:	480d      	ldr	r0, [pc, #52]	; (9000415c <HAL_UARTEx_RxEventCallback+0x54>)
}
90004126:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, RxData, 256);
9000412a:	f00c bb7d 	b.w	90010828 <HAL_UARTEx_ReceiveToIdle_IT>
		strncpy(uartData_q->Data, (char *) RxData, Size+1);
9000412e:	f8df 8030 	ldr.w	r8, [pc, #48]	; 90004160 <HAL_UARTEx_RxEventCallback+0x58>
90004132:	3401      	adds	r4, #1
90004134:	4639      	mov	r1, r7
90004136:	f8d8 7000 	ldr.w	r7, [r8]
9000413a:	4622      	mov	r2, r4
9000413c:	1d38      	adds	r0, r7, #4
9000413e:	f023 fc43 	bl	900279c8 <strncpy>
		osMessageQueuePut(uartQueueHandle, &uartData_q, 0, 0);
90004142:	6830      	ldr	r0, [r6, #0]
90004144:	4641      	mov	r1, r8
90004146:	462b      	mov	r3, r5
90004148:	462a      	mov	r2, r5
		uartData_q->size = Size +1;
9000414a:	603c      	str	r4, [r7, #0]
		osMessageQueuePut(uartQueueHandle, &uartData_q, 0, 0);
9000414c:	f00c fe50 	bl	90010df0 <osMessageQueuePut>
90004150:	e7e5      	b.n	9000411e <HAL_UARTEx_RxEventCallback+0x16>
90004152:	bf00      	nop
90004154:	2400bdf8 	.word	0x2400bdf8
90004158:	2400b9c0 	.word	0x2400b9c0
9000415c:	2400bd60 	.word	0x2400bd60
90004160:	2400bdf4 	.word	0x2400bdf4

90004164 <SystemClock_Config>:
{
90004164:	b510      	push	{r4, lr}
90004166:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
90004168:	224c      	movs	r2, #76	; 0x4c
9000416a:	2100      	movs	r1, #0
9000416c:	a80a      	add	r0, sp, #40	; 0x28
9000416e:	f022 ffed 	bl	9002714c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
90004172:	2220      	movs	r2, #32
90004174:	2100      	movs	r1, #0
90004176:	a802      	add	r0, sp, #8
90004178:	f022 ffe8 	bl	9002714c <memset>
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
9000417c:	2002      	movs	r0, #2
9000417e:	f008 feef 	bl	9000cf60 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
90004182:	4b23      	ldr	r3, [pc, #140]	; (90004210 <SystemClock_Config+0xac>)
90004184:	2100      	movs	r1, #0
90004186:	4a23      	ldr	r2, [pc, #140]	; (90004214 <SystemClock_Config+0xb0>)
90004188:	9101      	str	r1, [sp, #4]
9000418a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000418c:	f021 0101 	bic.w	r1, r1, #1
90004190:	62d9      	str	r1, [r3, #44]	; 0x2c
90004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90004194:	f003 0301 	and.w	r3, r3, #1
90004198:	9301      	str	r3, [sp, #4]
9000419a:	6993      	ldr	r3, [r2, #24]
9000419c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
900041a0:	6193      	str	r3, [r2, #24]
900041a2:	6993      	ldr	r3, [r2, #24]
900041a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
900041a8:	9301      	str	r3, [sp, #4]
900041aa:	9b01      	ldr	r3, [sp, #4]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
900041ac:	6993      	ldr	r3, [r2, #24]
900041ae:	049b      	lsls	r3, r3, #18
900041b0:	d5fc      	bpl.n	900041ac <SystemClock_Config+0x48>
  RCC_OscInitStruct.PLL.PLLM = 5;
900041b2:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900041b4:	2300      	movs	r3, #0
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900041b6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
900041ba:	2001      	movs	r0, #1
  RCC_OscInitStruct.PLL.PLLM = 5;
900041bc:	9215      	str	r2, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLN = 160;
900041be:	22a0      	movs	r2, #160	; 0xa0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
900041c0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
900041c2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 160;
900041c4:	9216      	str	r2, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
900041c6:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
900041c8:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900041ca:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLQ = 4;
900041cc:	9218      	str	r2, [sp, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
900041ce:	931a      	str	r3, [sp, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLP = 2;
900041d0:	9417      	str	r4, [sp, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
900041d2:	9419      	str	r4, [sp, #100]	; 0x64
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
900041d4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900041d8:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
900041da:	e9cd 4413 	strd	r4, r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
900041de:	f008 ff7b 	bl	9000d0d8 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900041e2:	223f      	movs	r2, #63	; 0x3f
900041e4:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
900041e6:	4621      	mov	r1, r4
900041e8:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
900041ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
900041ee:	2200      	movs	r2, #0
900041f0:	2308      	movs	r3, #8
900041f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
900041f6:	2240      	movs	r2, #64	; 0x40
900041f8:	2340      	movs	r3, #64	; 0x40
900041fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
900041fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
90004202:	2340      	movs	r3, #64	; 0x40
90004204:	e9cd 2308 	strd	r2, r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
90004208:	f009 fafa 	bl	9000d800 <HAL_RCC_ClockConfig>
}
9000420c:	b01e      	add	sp, #120	; 0x78
9000420e:	bd10      	pop	{r4, pc}
90004210:	58000400 	.word	0x58000400
90004214:	58024800 	.word	0x58024800

90004218 <main>:
{
90004218:	b580      	push	{r7, lr}

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
9000421a:	2400      	movs	r4, #0
{
9000421c:	b09a      	sub	sp, #104	; 0x68
  /* Disables the MPU */
  HAL_MPU_Disable();

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000421e:	2501      	movs	r5, #1

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
  MPU_InitStruct.BaseAddress = 0x90000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004220:	271b      	movs	r7, #27

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004222:	2603      	movs	r6, #3
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
90004224:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
90004228:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  HAL_MPU_Disable();
9000422c:	f005 fc2e 	bl	90009a8c <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0x24000000;
90004230:	f04f 5310 	mov.w	r3, #603979776	; 0x24000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004234:	49d6      	ldr	r1, [pc, #856]	; (90004590 <main+0x378>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004236:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.BaseAddress = 0x24000000;
90004238:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
9000423a:	4bd6      	ldr	r3, [pc, #856]	; (90004594 <main+0x37c>)
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
9000423c:	f8ad 5030 	strh.w	r5, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
90004240:	e9cd 130e 	strd	r1, r3, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004244:	f005 fc40 	bl	90009ac8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x90000000;
90004248:	f04f 4310 	mov.w	r3, #2415919104	; 0x90000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000424c:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000424e:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  MPU_InitStruct.BaseAddress = 0x90000000;
90004252:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004254:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
90004258:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
9000425c:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004260:	f005 fc32 	bl	90009ac8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
90004264:	2302      	movs	r3, #2
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004266:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
90004268:	f8ad 603b 	strh.w	r6, [sp, #59]	; 0x3b
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
9000426c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
90004270:	231a      	movs	r3, #26
90004272:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
90004276:	f240 1301 	movw	r3, #257	; 0x101
9000427a:	f8ad 303e 	strh.w	r3, [sp, #62]	; 0x3e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
9000427e:	f005 fc23 	bl	90009ac8 <HAL_MPU_ConfigRegion>
  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
  MPU_InitStruct.BaseAddress = 0xD0000000;
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
90004282:	f44f 7380 	mov.w	r3, #256	; 0x100
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
90004286:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
90004288:	f8ad 403e 	strh.w	r4, [sp, #62]	; 0x3e

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
9000428c:	2404      	movs	r4, #4
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
9000428e:	f8ad 303b 	strh.w	r3, [sp, #59]	; 0x3b
  MPU_InitStruct.BaseAddress = 0xD0000000;
90004292:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
90004296:	f88d 7038 	strb.w	r7, [sp, #56]	; 0x38
  MPU_InitStruct.BaseAddress = 0xD0000000;
9000429a:	930d      	str	r3, [sp, #52]	; 0x34
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
9000429c:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042a0:	f005 fc12 	bl	90009ac8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900042a4:	2318      	movs	r3, #24
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042a6:	a80c      	add	r0, sp, #48	; 0x30
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
900042a8:	f88d 603b 	strb.w	r6, [sp, #59]	; 0x3b
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
900042ac:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
900042b0:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
900042b4:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
900042b8:	f005 fc06 	bl	90009ac8 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
900042bc:	4620      	mov	r0, r4
900042be:	f005 fbf3 	bl	90009aa8 <HAL_MPU_Enable>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
900042c2:	4ab5      	ldr	r2, [pc, #724]	; (90004598 <main+0x380>)
900042c4:	6953      	ldr	r3, [r2, #20]
900042c6:	f413 3300 	ands.w	r3, r3, #131072	; 0x20000
900042ca:	d111      	bne.n	900042f0 <main+0xd8>
  __ASM volatile ("dsb 0xF":::"memory");
900042cc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900042d0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
900042d4:	f8c2 3250 	str.w	r3, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
900042d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900042dc:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
900042e0:	6953      	ldr	r3, [r2, #20]
900042e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
900042e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
900042e8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
900042ec:	f3bf 8f6f 	isb	sy
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
900042f0:	48a9      	ldr	r0, [pc, #676]	; (90004598 <main+0x380>)
900042f2:	6943      	ldr	r3, [r0, #20]
900042f4:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
900042f8:	d124      	bne.n	90004344 <main+0x12c>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
900042fa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
900042fe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
90004302:	f8d0 5080 	ldr.w	r5, [r0, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004306:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
9000430a:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
9000430e:	f3c5 05c9 	ubfx	r5, r5, #3, #10
90004312:	0164      	lsls	r4, r4, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004314:	ea04 0106 	and.w	r1, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
90004318:	462b      	mov	r3, r5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
9000431a:	ea41 7283 	orr.w	r2, r1, r3, lsl #30
      } while (ways-- != 0U);
9000431e:	3b01      	subs	r3, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
90004320:	f8c0 2260 	str.w	r2, [r0, #608]	; 0x260
      } while (ways-- != 0U);
90004324:	1c5a      	adds	r2, r3, #1
90004326:	d1f8      	bne.n	9000431a <main+0x102>
    } while(sets-- != 0U);
90004328:	3c20      	subs	r4, #32
9000432a:	f114 0f20 	cmn.w	r4, #32
9000432e:	d1f1      	bne.n	90004314 <main+0xfc>
90004330:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
90004334:	6943      	ldr	r3, [r0, #20]
90004336:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000433a:	6143      	str	r3, [r0, #20]
9000433c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90004340:	f3bf 8f6f 	isb	sy
  HAL_Init();
90004344:	f005 fae8 	bl	90009918 <HAL_Init>
  SystemClock_Config();
90004348:	f7ff ff0c 	bl	90004164 <SystemClock_Config>
  __ASM volatile ("cpsie i" : : : "memory");
9000434c:	b662      	cpsie	i
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000434e:	2400      	movs	r4, #0
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004350:	4d92      	ldr	r5, [pc, #584]	; (9000459c <main+0x384>)
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
90004352:	f248 0140 	movw	r1, #32832	; 0x8040
90004356:	4892      	ldr	r0, [pc, #584]	; (900045a0 <main+0x388>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004358:	9410      	str	r4, [sp, #64]	; 0x40
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
9000435a:	4622      	mov	r2, r4
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
9000435c:	f04f 0a01 	mov.w	sl, #1
  hltdc.Instance = LTDC;
90004360:	4e90      	ldr	r6, [pc, #576]	; (900045a4 <main+0x38c>)
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004362:	f04f 0902 	mov.w	r9, #2
  hdma2d.Instance = DMA2D;
90004366:	f8df 825c 	ldr.w	r8, [pc, #604]	; 900045c4 <main+0x3ac>
  huart1.Instance = USART1;
9000436a:	4f8f      	ldr	r7, [pc, #572]	; (900045a8 <main+0x390>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
9000436c:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
90004370:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  __HAL_RCC_GPIOK_CLK_ENABLE();
90004374:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004378:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
9000437c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004380:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004384:	f403 6380 	and.w	r3, r3, #1024	; 0x400
90004388:	9301      	str	r3, [sp, #4]
9000438a:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
9000438c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90004394:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004398:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000439c:	f003 0340 	and.w	r3, r3, #64	; 0x40
900043a0:	9302      	str	r3, [sp, #8]
900043a2:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOI_CLK_ENABLE();
900043a4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
900043ac:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043b0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
900043b8:	9303      	str	r3, [sp, #12]
900043ba:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
900043bc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043c0:	f043 0310 	orr.w	r3, r3, #16
900043c4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043cc:	f003 0310 	and.w	r3, r3, #16
900043d0:	9304      	str	r3, [sp, #16]
900043d2:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
900043d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043d8:	f043 0302 	orr.w	r3, r3, #2
900043dc:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043e4:	f003 0302 	and.w	r3, r3, #2
900043e8:	9305      	str	r3, [sp, #20]
900043ea:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
900043ec:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
900043f4:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
900043f8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
900043fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
90004400:	9306      	str	r3, [sp, #24]
90004402:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
90004404:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004408:	f043 0308 	orr.w	r3, r3, #8
9000440c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004410:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004414:	f003 0308 	and.w	r3, r3, #8
90004418:	9307      	str	r3, [sp, #28]
9000441a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
9000441c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004420:	f043 0304 	orr.w	r3, r3, #4
90004424:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004428:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000442c:	f003 0304 	and.w	r3, r3, #4
90004430:	9308      	str	r3, [sp, #32]
90004432:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
90004434:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004438:	f043 0320 	orr.w	r3, r3, #32
9000443c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004440:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004444:	f003 0320 	and.w	r3, r3, #32
90004448:	9309      	str	r3, [sp, #36]	; 0x24
9000444a:	9b09      	ldr	r3, [sp, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000444c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004450:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90004454:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004458:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
9000445c:	f003 0380 	and.w	r3, r3, #128	; 0x80
90004460:	930a      	str	r3, [sp, #40]	; 0x28
90004462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  __HAL_RCC_GPIOA_CLK_ENABLE();
90004464:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004468:	f043 0301 	orr.w	r3, r3, #1
9000446c:	f8c5 30e0 	str.w	r3, [r5, #224]	; 0xe0
90004470:	f8d5 30e0 	ldr.w	r3, [r5, #224]	; 0xe0
90004474:	f003 0301 	and.w	r3, r3, #1
90004478:	930b      	str	r3, [sp, #44]	; 0x2c
9000447a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, FRAME_RATE_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
9000447c:	f006 f95e 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LCD_DE_Pin|GPIO_PIN_12, GPIO_PIN_RESET);
90004480:	4622      	mov	r2, r4
90004482:	f44f 5184 	mov.w	r1, #4224	; 0x1080
90004486:	4849      	ldr	r0, [pc, #292]	; (900045ac <main+0x394>)
90004488:	f006 f958 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
9000448c:	4622      	mov	r2, r4
9000448e:	2108      	movs	r1, #8
90004490:	4847      	ldr	r0, [pc, #284]	; (900045b0 <main+0x398>)
90004492:	f006 f953 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
90004496:	2201      	movs	r2, #1
90004498:	4846      	ldr	r0, [pc, #280]	; (900045b4 <main+0x39c>)
9000449a:	4611      	mov	r1, r2
9000449c:	f006 f94e 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, LCD_RESET_Pin|MCU_ACTIVE_Pin, GPIO_PIN_RESET);
900044a0:	4622      	mov	r2, r4
900044a2:	2144      	movs	r1, #68	; 0x44
900044a4:	4844      	ldr	r0, [pc, #272]	; (900045b8 <main+0x3a0>)
900044a6:	f006 f949 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOH, GPIO_PIN_10, GPIO_PIN_RESET);
900044aa:	4622      	mov	r2, r4
900044ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
900044b0:	4842      	ldr	r0, [pc, #264]	; (900045bc <main+0x3a4>)
900044b2:	f006 f943 	bl	9000a73c <HAL_GPIO_WritePin>
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
900044b6:	a90c      	add	r1, sp, #48	; 0x30
900044b8:	4839      	ldr	r0, [pc, #228]	; (900045a0 <main+0x388>)
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
900044ba:	ed9f 9b2f 	vldr	d9, [pc, #188]	; 90004578 <main+0x360>
900044be:	ed9f ab30 	vldr	d10, [pc, #192]	; 90004580 <main+0x368>
  GPIO_InitStruct.Pin = LCD_DE_Pin|GPIO_PIN_12;
900044c2:	ed9f 8b31 	vldr	d8, [pc, #196]	; 90004588 <main+0x370>
  GPIO_InitStruct.Pin = FRAME_RATE_Pin;
900044c6:	ed8d 9b0e 	vstr	d9, [sp, #56]	; 0x38
900044ca:	ed8d ab0c 	vstr	d10, [sp, #48]	; 0x30
  HAL_GPIO_Init(FRAME_RATE_GPIO_Port, &GPIO_InitStruct);
900044ce:	f005 ff2d 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_DE_Pin|GPIO_PIN_12;
900044d2:	f44f 5284 	mov.w	r2, #4224	; 0x1080
900044d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900044d8:	a90c      	add	r1, sp, #48	; 0x30
900044da:	4834      	ldr	r0, [pc, #208]	; (900045ac <main+0x394>)
  GPIO_InitStruct.Pin = LCD_DE_Pin|GPIO_PIN_12;
900044dc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
900044e0:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
900044e4:	f005 ff22 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
900044e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
900044ec:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900044ee:	a90c      	add	r1, sp, #48	; 0x30
900044f0:	4833      	ldr	r0, [pc, #204]	; (900045c0 <main+0x3a8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
900044f2:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pin = GPIO_PIN_13;
900044f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
900044f8:	f005 ff18 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
900044fc:	2208      	movs	r2, #8
900044fe:	2301      	movs	r3, #1
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
90004500:	a90c      	add	r1, sp, #48	; 0x30
90004502:	482b      	ldr	r0, [pc, #172]	; (900045b0 <main+0x398>)
  GPIO_InitStruct.Pin = VSYNC_FREQ_Pin;
90004504:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90004508:	ed8d 9b0e 	vstr	d9, [sp, #56]	; 0x38
  HAL_GPIO_Init(VSYNC_FREQ_GPIO_Port, &GPIO_InitStruct);
9000450c:	f005 ff0e 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90004510:	2201      	movs	r2, #1
90004512:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004514:	a90c      	add	r1, sp, #48	; 0x30
90004516:	4827      	ldr	r0, [pc, #156]	; (900045b4 <main+0x39c>)
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
90004518:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
9000451c:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
90004520:	f005 ff04 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
90004524:	2204      	movs	r2, #4
90004526:	2301      	movs	r3, #1
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004528:	a90c      	add	r1, sp, #48	; 0x30
9000452a:	4823      	ldr	r0, [pc, #140]	; (900045b8 <main+0x3a0>)
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
9000452c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90004530:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
90004534:	f005 fefa 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10;
90004538:	f44f 6280 	mov.w	r2, #1024	; 0x400
9000453c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000453e:	a90c      	add	r1, sp, #48	; 0x30
90004540:	481e      	ldr	r0, [pc, #120]	; (900045bc <main+0x3a4>)
  GPIO_InitStruct.Pin = GPIO_PIN_10;
90004542:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
90004546:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
9000454a:	f005 feef 	bl	9000a32c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000454e:	a90c      	add	r1, sp, #48	; 0x30
90004550:	4819      	ldr	r0, [pc, #100]	; (900045b8 <main+0x3a0>)
  GPIO_InitStruct.Pin = MCU_ACTIVE_Pin;
90004552:	ed8d ab0c 	vstr	d10, [sp, #48]	; 0x30
90004556:	ed8d 9b0e 	vstr	d9, [sp, #56]	; 0x38
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
9000455a:	f005 fee7 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
9000455e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
90004562:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004564:	a90c      	add	r1, sp, #48	; 0x30
90004566:	480e      	ldr	r0, [pc, #56]	; (900045a0 <main+0x388>)
  GPIO_InitStruct.Pin = GPIO_PIN_15;
90004568:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
9000456c:	ed8d 8b0e 	vstr	d8, [sp, #56]	; 0x38
90004570:	e02a      	b.n	900045c8 <main+0x3b0>
90004572:	bf00      	nop
90004574:	f3af 8000 	nop.w
90004578:	00000000 	.word	0x00000000
9000457c:	00000003 	.word	0x00000003
90004580:	00000040 	.word	0x00000040
90004584:	00000001 	.word	0x00000001
	...
90004590:	03000012 	.word	0x03000012
90004594:	01010001 	.word	0x01010001
90004598:	e000ed00 	.word	0xe000ed00
9000459c:	58024400 	.word	0x58024400
900045a0:	58020400 	.word	0x58020400
900045a4:	2400bbac 	.word	0x2400bbac
900045a8:	2400bd60 	.word	0x2400bd60
900045ac:	58020c00 	.word	0x58020c00
900045b0:	58021800 	.word	0x58021800
900045b4:	58022800 	.word	0x58022800
900045b8:	58020000 	.word	0x58020000
900045bc:	58021c00 	.word	0x58021c00
900045c0:	58020800 	.word	0x58020800
900045c4:	2400baec 	.word	0x2400baec
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
900045c8:	f005 feb0 	bl	9000a32c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
900045cc:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045d0:	4622      	mov	r2, r4
900045d2:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
900045d4:	ea43 030a 	orr.w	r3, r3, sl
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045d8:	207a      	movs	r0, #122	; 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
900045da:	f8c5 30d4 	str.w	r3, [r5, #212]	; 0xd4
900045de:	f8d5 30d4 	ldr.w	r3, [r5, #212]	; 0xd4
  hltdc.Init.AccumulatedActiveH = 283;
900045e2:	f240 250a 	movw	r5, #522	; 0x20a
  __HAL_RCC_MDMA_CLK_ENABLE();
900045e6:	ea03 030a 	and.w	r3, r3, sl
900045ea:	9300      	str	r3, [sp, #0]
900045ec:	9b00      	ldr	r3, [sp, #0]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
900045ee:	f005 f9ed 	bl	900099cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
900045f2:	207a      	movs	r0, #122	; 0x7a
900045f4:	f005 fa28 	bl	90009a48 <HAL_NVIC_EnableIRQ>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
900045f8:	2234      	movs	r2, #52	; 0x34
900045fa:	4621      	mov	r1, r4
900045fc:	a80c      	add	r0, sp, #48	; 0x30
900045fe:	f022 fda5 	bl	9002714c <memset>
  hltdc.Instance = LTDC;
90004602:	4b6a      	ldr	r3, [pc, #424]	; (900047ac <main+0x594>)
  hltdc.Init.VerticalSync = 8;
90004604:	2127      	movs	r1, #39	; 0x27
  hltdc.Init.AccumulatedVBP = 11;
90004606:	202a      	movs	r0, #42	; 0x2a
  hltdc.Instance = LTDC;
90004608:	6033      	str	r3, [r6, #0]
  hltdc.Init.VerticalSync = 8;
9000460a:	2308      	movs	r3, #8
  hltdc.Init.TotalHeigh = 285;
9000460c:	f44f 7c04 	mov.w	ip, #528	; 0x210
  hltdc.Init.Backcolor.Blue = 0;
90004610:	86b4      	strh	r4, [r6, #52]	; 0x34
  hltdc.Init.Backcolor.Red = 0;
90004612:	f886 4036 	strb.w	r4, [r6, #54]	; 0x36
  hltdc.Init.VerticalSync = 8;
90004616:	e9c6 1305 	strd	r1, r3, [r6, #20]
  hltdc.Init.AccumulatedVBP = 11;
9000461a:	230b      	movs	r3, #11
9000461c:	e9c6 0307 	strd	r0, r3, [r6, #28]
  hltdc.Init.AccumulatedActiveH = 283;
90004620:	f240 131b 	movw	r3, #283	; 0x11b
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
90004624:	4630      	mov	r0, r6
  hltdc.Init.AccumulatedActiveH = 283;
90004626:	e9c6 5309 	strd	r5, r3, [r6, #36]	; 0x24
  hltdc.Init.TotalHeigh = 285;
9000462a:	f240 131d 	movw	r3, #285	; 0x11d
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
9000462e:	e9c6 4401 	strd	r4, r4, [r6, #4]
  hltdc.Init.TotalHeigh = 285;
90004632:	e9c6 c30b 	strd	ip, r3, [r6, #44]	; 0x2c
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
90004636:	e9c6 4403 	strd	r4, r4, [r6, #12]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
9000463a:	f008 f8a9 	bl	9000c790 <HAL_LTDC_Init>
  pLayerCfg.WindowX1 = 480;
9000463e:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004642:	f44f 6280 	mov.w	r2, #1024	; 0x400
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004646:	a90c      	add	r1, sp, #48	; 0x30
  pLayerCfg.WindowX1 = 480;
90004648:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
9000464a:	4630      	mov	r0, r6
  pLayerCfg.ImageWidth = 480;
9000464c:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.WindowY1 = 272;
9000464e:	f44f 7388 	mov.w	r3, #272	; 0x110
  pLayerCfg.WindowX0 = 0;
90004652:	940c      	str	r4, [sp, #48]	; 0x30
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
90004654:	2604      	movs	r6, #4
  pLayerCfg.WindowY1 = 272;
90004656:	930f      	str	r3, [sp, #60]	; 0x3c
  pLayerCfg.ImageHeight = 272;
90004658:	9317      	str	r3, [sp, #92]	; 0x5c
  pLayerCfg.Alpha = 255;
9000465a:	23ff      	movs	r3, #255	; 0xff
  pLayerCfg.WindowY0 = 0;
9000465c:	940e      	str	r4, [sp, #56]	; 0x38
  pLayerCfg.Alpha = 255;
9000465e:	9311      	str	r3, [sp, #68]	; 0x44
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004660:	2305      	movs	r3, #5
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
90004662:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  pLayerCfg.Alpha0 = 0;
90004666:	9412      	str	r4, [sp, #72]	; 0x48
  pLayerCfg.FBStartAdress = 0;
90004668:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.Backcolor.Blue = 0;
9000466a:	f8ad 4060 	strh.w	r4, [sp, #96]	; 0x60
  pLayerCfg.Backcolor.Red = 0;
9000466e:	f88d 4062 	strb.w	r4, [sp, #98]	; 0x62
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
90004672:	e9cd 2313 	strd	r2, r3, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
90004676:	4622      	mov	r2, r4
90004678:	f008 f95e 	bl	9000c938 <HAL_LTDC_ConfigLayer>
  hdma2d.Instance = DMA2D;
9000467c:	4b4c      	ldr	r3, [pc, #304]	; (900047b0 <main+0x598>)
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
9000467e:	4640      	mov	r0, r8
  hdma2d.Init.OutputOffset = 0;
90004680:	f8c8 400c 	str.w	r4, [r8, #12]
  hdma2d.Instance = DMA2D;
90004684:	f8c8 3000 	str.w	r3, [r8]
  hdma2d.LayerCfg[1].ChromaSubSampling = DMA2D_NO_CSS;
90004688:	f8c8 405c 	str.w	r4, [r8, #92]	; 0x5c
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
9000468c:	e9c8 4901 	strd	r4, r9, [r8, #4]
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
90004690:	e9c8 4911 	strd	r4, r9, [r8, #68]	; 0x44
  hdma2d.LayerCfg[1].InputAlpha = 0;
90004694:	e9c8 4413 	strd	r4, r4, [r8, #76]	; 0x4c
  hdma2d.LayerCfg[1].RedBlueSwap = DMA2D_RB_REGULAR;
90004698:	e9c8 4415 	strd	r4, r4, [r8, #84]	; 0x54
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
9000469c:	f005 fcfe 	bl	9000a09c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
900046a0:	4651      	mov	r1, sl
900046a2:	4640      	mov	r0, r8
900046a4:	f005 fdd2 	bl	9000a24c <HAL_DMA2D_ConfigLayer>
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046a8:	4842      	ldr	r0, [pc, #264]	; (900047b4 <main+0x59c>)
900046aa:	4b43      	ldr	r3, [pc, #268]	; (900047b8 <main+0x5a0>)
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900046ac:	f04f 0c40 	mov.w	ip, #64	; 0x40
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046b0:	f44f 6e00 	mov.w	lr, #2048	; 0x800
  SdramTiming.LoadToActiveDelay = 2;
900046b4:	2202      	movs	r2, #2
  hsdram2.Instance = FMC_SDRAM_DEVICE;
900046b6:	6003      	str	r3, [r0, #0]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046b8:	2310      	movs	r3, #16
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046ba:	a90c      	add	r1, sp, #48	; 0x30
  SdramTiming.RCDDelay = 2;
900046bc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
900046c0:	61c4      	str	r4, [r0, #28]
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
900046c2:	6284      	str	r4, [r0, #40]	; 0x28
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
900046c4:	e9c0 6303 	strd	r6, r3, [r0, #12]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
900046c8:	f44f 73c0 	mov.w	r3, #384	; 0x180
900046cc:	e9c0 c305 	strd	ip, r3, [r0, #20]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
900046d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
900046d4:	e9c0 e308 	strd	lr, r3, [r0, #32]
  SdramTiming.LoadToActiveDelay = 2;
900046d8:	2307      	movs	r3, #7
900046da:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
900046de:	2204      	movs	r2, #4
900046e0:	2307      	movs	r3, #7
900046e2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
900046e6:	2205      	movs	r2, #5
900046e8:	2302      	movs	r3, #2
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
900046ea:	e9c0 a401 	strd	sl, r4, [r0, #4]
  SdramTiming.LoadToActiveDelay = 2;
900046ee:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
900046f2:	f00a fb27 	bl	9000ed44 <HAL_SDRAM_Init>
  BSP_SDRAM_DeInit(0);
900046f6:	4620      	mov	r0, r4
900046f8:	f004 fea0 	bl	9000943c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
900046fc:	4620      	mov	r0, r4
900046fe:	f004 fee9 	bl	900094d4 <BSP_SDRAM_Init>
  MX_LIBJPEG_Init();
90004702:	f7fb fff3 	bl	900006ec <MX_LIBJPEG_Init>
  hjpeg.Instance = JPEG;
90004706:	4b2d      	ldr	r3, [pc, #180]	; (900047bc <main+0x5a4>)
90004708:	482d      	ldr	r0, [pc, #180]	; (900047c0 <main+0x5a8>)
9000470a:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
9000470c:	f006 fff6 	bl	9000b6fc <HAL_JPEG_Init>
  hcrc.Instance = CRC;
90004710:	482c      	ldr	r0, [pc, #176]	; (900047c4 <main+0x5ac>)
90004712:	4b2d      	ldr	r3, [pc, #180]	; (900047c8 <main+0x5b0>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
90004714:	8084      	strh	r4, [r0, #4]
  hcrc.Instance = CRC;
90004716:	6003      	str	r3, [r0, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
90004718:	f8c0 a020 	str.w	sl, [r0, #32]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
9000471c:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
90004720:	f005 fa04 	bl	90009b2c <HAL_CRC_Init>
  huart1.Instance = USART1;
90004724:	4b29      	ldr	r3, [pc, #164]	; (900047cc <main+0x5b4>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
90004726:	4638      	mov	r0, r7
  huart1.Init.Parity = UART_PARITY_NONE;
90004728:	613c      	str	r4, [r7, #16]
  huart1.Instance = USART1;
9000472a:	603b      	str	r3, [r7, #0]
  huart1.Init.BaudRate = 115200;
9000472c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
90004730:	61bc      	str	r4, [r7, #24]
  huart1.Init.BaudRate = 115200;
90004732:	607b      	str	r3, [r7, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
90004734:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
90004736:	e9c7 4402 	strd	r4, r4, [r7, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
9000473a:	617b      	str	r3, [r7, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
9000473c:	e9c7 4407 	strd	r4, r4, [r7, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
90004740:	e9c7 4409 	strd	r4, r4, [r7, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
90004744:	f00b fef2 	bl	9001052c <HAL_UART_Init>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
90004748:	4621      	mov	r1, r4
9000474a:	4638      	mov	r0, r7
9000474c:	f00b ffe8 	bl	90010720 <HAL_UARTEx_SetTxFifoThreshold>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
90004750:	4621      	mov	r1, r4
90004752:	4638      	mov	r0, r7
90004754:	f00c f826 	bl	900107a4 <HAL_UARTEx_SetRxFifoThreshold>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
90004758:	4638      	mov	r0, r7
9000475a:	f00b ffc3 	bl	900106e4 <HAL_UARTEx_DisableFifoMode>
  MX_TouchGFX_Init();
9000475e:	f7fb ffc9 	bl	900006f4 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
90004762:	f7fb ffc5 	bl	900006f0 <MX_TouchGFX_PreOSInit>
  osKernelInitialize();
90004766:	f00c f955 	bl	90010a14 <osKernelInitialize>
  uartQueueHandle = osMessageQueueNew (2, sizeof(uint8_t), &uartQueue_attributes);
9000476a:	4a19      	ldr	r2, [pc, #100]	; (900047d0 <main+0x5b8>)
9000476c:	4651      	mov	r1, sl
9000476e:	4648      	mov	r0, r9
90004770:	f00c fb04 	bl	90010d7c <osMessageQueueNew>
90004774:	4b17      	ldr	r3, [pc, #92]	; (900047d4 <main+0x5bc>)
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004776:	4a18      	ldr	r2, [pc, #96]	; (900047d8 <main+0x5c0>)
90004778:	4621      	mov	r1, r4
  uartQueueHandle = osMessageQueueNew (2, sizeof(uint8_t), &uartQueue_attributes);
9000477a:	6018      	str	r0, [r3, #0]
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
9000477c:	4817      	ldr	r0, [pc, #92]	; (900047dc <main+0x5c4>)
9000477e:	f00c f975 	bl	90010a6c <osThreadNew>
90004782:	4b17      	ldr	r3, [pc, #92]	; (900047e0 <main+0x5c8>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
90004784:	4a17      	ldr	r2, [pc, #92]	; (900047e4 <main+0x5cc>)
90004786:	4621      	mov	r1, r4
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
90004788:	6018      	str	r0, [r3, #0]
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000478a:	4817      	ldr	r0, [pc, #92]	; (900047e8 <main+0x5d0>)
9000478c:	f00c f96e 	bl	90010a6c <osThreadNew>
90004790:	4b16      	ldr	r3, [pc, #88]	; (900047ec <main+0x5d4>)
90004792:	4605      	mov	r5, r0
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
90004794:	4a16      	ldr	r2, [pc, #88]	; (900047f0 <main+0x5d8>)
90004796:	4621      	mov	r1, r4
90004798:	4816      	ldr	r0, [pc, #88]	; (900047f4 <main+0x5dc>)
  GUITaskHandle = osThreadNew(TouchGFX_Task, NULL, &GUITask_attributes);
9000479a:	601d      	str	r5, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
9000479c:	f00c f966 	bl	90010a6c <osThreadNew>
900047a0:	4b15      	ldr	r3, [pc, #84]	; (900047f8 <main+0x5e0>)
900047a2:	6018      	str	r0, [r3, #0]
  osKernelStart();
900047a4:	f00c f948 	bl	90010a38 <osKernelStart>
  while (1)
900047a8:	e7fe      	b.n	900047a8 <main+0x590>
900047aa:	bf00      	nop
900047ac:	50001000 	.word	0x50001000
900047b0:	52001000 	.word	0x52001000
900047b4:	2400bd2c 	.word	0x2400bd2c
900047b8:	52004140 	.word	0x52004140
900047bc:	52003000 	.word	0x52003000
900047c0:	2400bb54 	.word	0x2400bb54
900047c4:	2400bac8 	.word	0x2400bac8
900047c8:	58024c00 	.word	0x58024c00
900047cc:	40011000 	.word	0x40011000
900047d0:	90029f3c 	.word	0x90029f3c
900047d4:	2400bdf8 	.word	0x2400bdf8
900047d8:	90029f18 	.word	0x90029f18
900047dc:	900040e9 	.word	0x900040e9
900047e0:	2400bac4 	.word	0x2400bac4
900047e4:	90029ef4 	.word	0x90029ef4
900047e8:	90000705 	.word	0x90000705
900047ec:	2400b9bc 	.word	0x2400b9bc
900047f0:	90029f54 	.word	0x90029f54
900047f4:	90002c0d 	.word	0x90002c0d
900047f8:	2400bdfc 	.word	0x2400bdfc

900047fc <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
900047fc:	4b03      	ldr	r3, [pc, #12]	; (9000480c <HAL_TIM_PeriodElapsedCallback+0x10>)
900047fe:	6802      	ldr	r2, [r0, #0]
90004800:	429a      	cmp	r2, r3
90004802:	d000      	beq.n	90004806 <HAL_TIM_PeriodElapsedCallback+0xa>
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
90004804:	4770      	bx	lr
    HAL_IncTick();
90004806:	f005 b8b7 	b.w	90009978 <HAL_IncTick>
9000480a:	bf00      	nop
9000480c:	40001000 	.word	0x40001000

90004810 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
90004810:	4770      	bx	lr
90004812:	bf00      	nop

90004814 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004814:	4b0b      	ldr	r3, [pc, #44]	; (90004844 <HAL_MspInit+0x30>)

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004816:	2200      	movs	r2, #0
90004818:	210f      	movs	r1, #15
9000481a:	f06f 0001 	mvn.w	r0, #1
{
9000481e:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004820:	f8d3 40f4 	ldr.w	r4, [r3, #244]	; 0xf4
{
90004824:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
90004826:	f044 0402 	orr.w	r4, r4, #2
9000482a:	f8c3 40f4 	str.w	r4, [r3, #244]	; 0xf4
9000482e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
90004832:	f003 0302 	and.w	r3, r3, #2
90004836:	9301      	str	r3, [sp, #4]
90004838:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
9000483a:	b003      	add	sp, #12
9000483c:	f85d 4b04 	ldr.w	r4, [sp], #4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
90004840:	f005 b8c4 	b.w	900099cc <HAL_NVIC_SetPriority>
90004844:	58024400 	.word	0x58024400

90004848 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
90004848:	4b0a      	ldr	r3, [pc, #40]	; (90004874 <HAL_CRC_MspInit+0x2c>)
9000484a:	6802      	ldr	r2, [r0, #0]
9000484c:	429a      	cmp	r2, r3
9000484e:	d000      	beq.n	90004852 <HAL_CRC_MspInit+0xa>
90004850:	4770      	bx	lr
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
90004852:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
{
90004856:	b082      	sub	sp, #8
    __HAL_RCC_CRC_CLK_ENABLE();
90004858:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000485c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
90004860:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004864:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
90004868:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
9000486c:	9301      	str	r3, [sp, #4]
9000486e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
90004870:	b002      	add	sp, #8
90004872:	4770      	bx	lr
90004874:	58024c00 	.word	0x58024c00

90004878 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
90004878:	4b0f      	ldr	r3, [pc, #60]	; (900048b8 <HAL_DMA2D_MspInit+0x40>)
9000487a:	6802      	ldr	r2, [r0, #0]
9000487c:	429a      	cmp	r2, r3
9000487e:	d000      	beq.n	90004882 <HAL_DMA2D_MspInit+0xa>
90004880:	4770      	bx	lr
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004882:	4b0e      	ldr	r3, [pc, #56]	; (900048bc <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
90004884:	205a      	movs	r0, #90	; 0x5a
90004886:	2200      	movs	r2, #0
90004888:	2105      	movs	r1, #5
{
9000488a:	b510      	push	{r4, lr}
    __HAL_RCC_DMA2D_CLK_ENABLE();
9000488c:	f8d3 40d4 	ldr.w	r4, [r3, #212]	; 0xd4
{
90004890:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
90004892:	f044 0410 	orr.w	r4, r4, #16
90004896:	f8c3 40d4 	str.w	r4, [r3, #212]	; 0xd4
9000489a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
9000489e:	f003 0310 	and.w	r3, r3, #16
900048a2:	9301      	str	r3, [sp, #4]
900048a4:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
900048a6:	f005 f891 	bl	900099cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900048aa:	205a      	movs	r0, #90	; 0x5a
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
900048ac:	b002      	add	sp, #8
900048ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
900048b2:	f005 b8c9 	b.w	90009a48 <HAL_NVIC_EnableIRQ>
900048b6:	bf00      	nop
900048b8:	52001000 	.word	0x52001000
900048bc:	58024400 	.word	0x58024400

900048c0 <HAL_JPEG_MspInit>:
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
  if(hjpeg->Instance==JPEG)
900048c0:	4b3f      	ldr	r3, [pc, #252]	; (900049c0 <HAL_JPEG_MspInit+0x100>)
900048c2:	6802      	ldr	r2, [r0, #0]
900048c4:	429a      	cmp	r2, r3
900048c6:	d000      	beq.n	900048ca <HAL_JPEG_MspInit+0xa>
900048c8:	4770      	bx	lr
{
900048ca:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN JPEG_MspInit 0 */
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
900048cc:	4b3d      	ldr	r3, [pc, #244]	; (900049c4 <HAL_JPEG_MspInit+0x104>)
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048ce:	2211      	movs	r2, #17
900048d0:	4e3d      	ldr	r6, [pc, #244]	; (900049c8 <HAL_JPEG_MspInit+0x108>)
{
900048d2:	b082      	sub	sp, #8
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
900048d4:	4d3d      	ldr	r5, [pc, #244]	; (900049cc <HAL_JPEG_MspInit+0x10c>)
900048d6:	4604      	mov	r4, r0
	 hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
900048d8:	6072      	str	r2, [r6, #4]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
900048da:	4630      	mov	r0, r6
    __HAL_RCC_JPEG_CLK_ENABLE();
900048dc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900048e0:	493b      	ldr	r1, [pc, #236]	; (900049d0 <HAL_JPEG_MspInit+0x110>)
    __HAL_RCC_JPEG_CLK_ENABLE();
900048e2:	f042 0220 	orr.w	r2, r2, #32
900048e6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
900048ea:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
900048ec:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900048f0:	6232      	str	r2, [r6, #32]
    __HAL_RCC_JPEG_CLK_ENABLE();
900048f2:	f003 0320 	and.w	r3, r3, #32
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
900048f6:	6031      	str	r1, [r6, #0]
    __HAL_RCC_JPEG_CLK_ENABLE();
900048f8:	9301      	str	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
900048fa:	2300      	movs	r3, #0
    __HAL_RCC_JPEG_CLK_ENABLE();
900048fc:	9901      	ldr	r1, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
900048fe:	6133      	str	r3, [r6, #16]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
90004900:	e9c6 3202 	strd	r3, r2, [r6, #8]
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004904:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
90004908:	6272      	str	r2, [r6, #36]	; 0x24
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
9000490a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
9000490c:	e9c6 3306 	strd	r3, r3, [r6, #24]
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
90004910:	e9c6 330d 	strd	r3, r3, [r6, #52]	; 0x34
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
90004914:	62b2      	str	r2, [r6, #40]	; 0x28
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
90004916:	f44f 3300 	mov.w	r3, #131072	; 0x20000
9000491a:	f44f 42a0 	mov.w	r2, #20480	; 0x5000
9000491e:	e9c6 230b 	strd	r2, r3, [r6, #44]	; 0x2c
	 hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004922:	2313      	movs	r3, #19
90004924:	606b      	str	r3, [r5, #4]
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
90004926:	2302      	movs	r3, #2
90004928:	6173      	str	r3, [r6, #20]
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
9000492a:	f008 f8fb 	bl	9000cb24 <HAL_MDMA_Init>
9000492e:	2800      	cmp	r0, #0
90004930:	d13a      	bne.n	900049a8 <HAL_JPEG_MspInit+0xe8>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
90004932:	2200      	movs	r2, #0
90004934:	4824      	ldr	r0, [pc, #144]	; (900049c8 <HAL_JPEG_MspInit+0x108>)
90004936:	4611      	mov	r1, r2
90004938:	f008 f992 	bl	9000cc60 <HAL_MDMA_ConfigPostRequestMask>
9000493c:	2800      	cmp	r0, #0
9000493e:	d13c      	bne.n	900049ba <HAL_JPEG_MspInit+0xfa>
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004940:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004942:	2300      	movs	r3, #0
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004944:	6326      	str	r6, [r4, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
90004946:	2013      	movs	r0, #19
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
90004948:	61ea      	str	r2, [r5, #28]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
9000494a:	62aa      	str	r2, [r5, #40]	; 0x28
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
9000494c:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004950:	4920      	ldr	r1, [pc, #128]	; (900049d4 <HAL_JPEG_MspInit+0x114>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
90004952:	60ab      	str	r3, [r5, #8]
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
90004954:	622b      	str	r3, [r5, #32]
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
90004956:	63ab      	str	r3, [r5, #56]	; 0x38
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
90004958:	6434      	str	r4, [r6, #64]	; 0x40
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
9000495a:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
9000495e:	e9c5 3304 	strd	r3, r3, [r5, #16]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
90004962:	2308      	movs	r3, #8
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004964:	22c0      	movs	r2, #192	; 0xc0
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
90004966:	e9c5 1000 	strd	r1, r0, [r5]
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
9000496a:	61ab      	str	r3, [r5, #24]
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
9000496c:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90004970:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
90004974:	4815      	ldr	r0, [pc, #84]	; (900049cc <HAL_JPEG_MspInit+0x10c>)
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
90004976:	62e9      	str	r1, [r5, #44]	; 0x2c
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
90004978:	60ea      	str	r2, [r5, #12]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000497a:	626b      	str	r3, [r5, #36]	; 0x24
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
9000497c:	f008 f8d2 	bl	9000cb24 <HAL_MDMA_Init>
90004980:	b9c0      	cbnz	r0, 900049b4 <HAL_JPEG_MspInit+0xf4>
    {
      Error_Handler();
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
90004982:	2200      	movs	r2, #0
90004984:	4811      	ldr	r0, [pc, #68]	; (900049cc <HAL_JPEG_MspInit+0x10c>)
90004986:	4611      	mov	r1, r2
90004988:	f008 f96a 	bl	9000cc60 <HAL_MDMA_ConfigPostRequestMask>
9000498c:	b978      	cbnz	r0, 900049ae <HAL_JPEG_MspInit+0xee>
    {
      Error_Handler();
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
9000498e:	6365      	str	r5, [r4, #52]	; 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004990:	2079      	movs	r0, #121	; 0x79
90004992:	2200      	movs	r2, #0
90004994:	2105      	movs	r1, #5
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
90004996:	642c      	str	r4, [r5, #64]	; 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
90004998:	f005 f818 	bl	900099cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
9000499c:	2079      	movs	r0, #121	; 0x79
  /* USER CODE BEGIN JPEG_MspInit 1 */

  /* USER CODE END JPEG_MspInit 1 */
  }

}
9000499e:	b002      	add	sp, #8
900049a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
900049a4:	f005 b850 	b.w	90009a48 <HAL_NVIC_EnableIRQ>
      Error_Handler();
900049a8:	f7ff ff32 	bl	90004810 <Error_Handler>
900049ac:	e7c1      	b.n	90004932 <HAL_JPEG_MspInit+0x72>
      Error_Handler();
900049ae:	f7ff ff2f 	bl	90004810 <Error_Handler>
900049b2:	e7ec      	b.n	9000498e <HAL_JPEG_MspInit+0xce>
      Error_Handler();
900049b4:	f7ff ff2c 	bl	90004810 <Error_Handler>
900049b8:	e7e3      	b.n	90004982 <HAL_JPEG_MspInit+0xc2>
      Error_Handler();
900049ba:	f7ff ff29 	bl	90004810 <Error_Handler>
900049be:	e7bf      	b.n	90004940 <HAL_JPEG_MspInit+0x80>
900049c0:	52003000 	.word	0x52003000
900049c4:	58024400 	.word	0x58024400
900049c8:	2400bc54 	.word	0x2400bc54
900049cc:	2400bcc0 	.word	0x2400bcc0
900049d0:	52000200 	.word	0x52000200
900049d4:	520001c0 	.word	0x520001c0

900049d8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
900049d8:	b5d0      	push	{r4, r6, r7, lr}
900049da:	b0bc      	sub	sp, #240	; 0xf0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900049dc:	2100      	movs	r1, #0
{
900049de:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049e0:	22c0      	movs	r2, #192	; 0xc0
900049e2:	a80c      	add	r0, sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
900049e4:	910a      	str	r1, [sp, #40]	; 0x28
900049e6:	e9cd 1106 	strd	r1, r1, [sp, #24]
900049ea:	e9cd 1108 	strd	r1, r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
900049ee:	f022 fbad 	bl	9002714c <memset>
  if(hltdc->Instance==LTDC)
900049f2:	4b4c      	ldr	r3, [pc, #304]	; (90004b24 <HAL_LTDC_MspInit+0x14c>)
900049f4:	6822      	ldr	r2, [r4, #0]
900049f6:	429a      	cmp	r2, r3
900049f8:	d001      	beq.n	900049fe <HAL_LTDC_MspInit+0x26>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
900049fa:	b03c      	add	sp, #240	; 0xf0
900049fc:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
900049fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
90004a02:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a04:	a80c      	add	r0, sp, #48	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
90004a06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    PeriphClkInitStruct.PLL3.PLL3M = 5;
90004a0a:	2205      	movs	r2, #5
90004a0c:	23a0      	movs	r3, #160	; 0xa0
90004a0e:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
90004a12:	2202      	movs	r2, #2
90004a14:	2302      	movs	r3, #2
90004a16:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90004a1a:	2253      	movs	r2, #83	; 0x53
90004a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
90004a20:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004a24:	f009 fa04 	bl	9000de30 <HAL_RCCEx_PeriphCLKConfig>
90004a28:	2800      	cmp	r0, #0
90004a2a:	d178      	bne.n	90004b1e <HAL_LTDC_MspInit+0x146>
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a2c:	4b3e      	ldr	r3, [pc, #248]	; (90004b28 <HAL_LTDC_MspInit+0x150>)
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004a2e:	20fc      	movs	r0, #252	; 0xfc
90004a30:	2102      	movs	r1, #2
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004a32:	240e      	movs	r4, #14
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a34:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004a38:	2600      	movs	r6, #0
90004a3a:	2702      	movs	r7, #2
    __HAL_RCC_LTDC_CLK_ENABLE();
90004a3c:	f042 0208 	orr.w	r2, r2, #8
90004a40:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
90004a44:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
90004a48:	f002 0208 	and.w	r2, r2, #8
90004a4c:	9201      	str	r2, [sp, #4]
90004a4e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
90004a50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
90004a58:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a60:	f402 6280 	and.w	r2, r2, #1024	; 0x400
90004a64:	9202      	str	r2, [sp, #8]
90004a66:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOI_CLK_ENABLE();
90004a68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
90004a70:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a78:	f402 7280 	and.w	r2, r2, #256	; 0x100
90004a7c:	9203      	str	r2, [sp, #12]
90004a7e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
90004a80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
90004a88:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a90:	f402 7200 	and.w	r2, r2, #512	; 0x200
90004a94:	9204      	str	r2, [sp, #16]
90004a96:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004a9c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90004aa0:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004aa8:	940a      	str	r4, [sp, #40]	; 0x28
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004aae:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004ab2:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004ab4:	a906      	add	r1, sp, #24
90004ab6:	481d      	ldr	r0, [pc, #116]	; (90004b2c <HAL_LTDC_MspInit+0x154>)
    __HAL_RCC_GPIOH_CLK_ENABLE();
90004ab8:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
90004aba:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
90004abe:	f005 fc35 	bl	9000a32c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004ac2:	f24d 2203 	movw	r2, #53763	; 0xd203
90004ac6:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004ac8:	a906      	add	r1, sp, #24
90004aca:	4819      	ldr	r0, [pc, #100]	; (90004b30 <HAL_LTDC_MspInit+0x158>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004acc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
90004ace:	e9cd 2306 	strd	r2, r3, [sp, #24]
90004ad2:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
90004ad6:	f005 fc29 	bl	9000a32c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004ada:	f64f 72fb 	movw	r2, #65531	; 0xfffb
90004ade:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004ae0:	a906      	add	r1, sp, #24
90004ae2:	4814      	ldr	r0, [pc, #80]	; (90004b34 <HAL_LTDC_MspInit+0x15c>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004ae4:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
90004ae6:	e9cd 2306 	strd	r2, r3, [sp, #24]
90004aea:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
90004aee:	f005 fc1d 	bl	9000a32c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004af2:	2302      	movs	r3, #2
90004af4:	f44f 7200 	mov.w	r2, #512	; 0x200
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004af8:	a906      	add	r1, sp, #24
90004afa:	480f      	ldr	r0, [pc, #60]	; (90004b38 <HAL_LTDC_MspInit+0x160>)
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
90004afc:	940a      	str	r4, [sp, #40]	; 0x28
    GPIO_InitStruct.Pin = GPIO_PIN_9;
90004afe:	e9cd 2306 	strd	r2, r3, [sp, #24]
90004b02:	e9cd 6708 	strd	r6, r7, [sp, #32]
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004b06:	f005 fc11 	bl	9000a32c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
90004b0a:	2200      	movs	r2, #0
90004b0c:	2105      	movs	r1, #5
90004b0e:	2058      	movs	r0, #88	; 0x58
90004b10:	f004 ff5c 	bl	900099cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
90004b14:	2058      	movs	r0, #88	; 0x58
90004b16:	f004 ff97 	bl	90009a48 <HAL_NVIC_EnableIRQ>
}
90004b1a:	b03c      	add	sp, #240	; 0xf0
90004b1c:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004b1e:	f7ff fe77 	bl	90004810 <Error_Handler>
90004b22:	e783      	b.n	90004a2c <HAL_LTDC_MspInit+0x54>
90004b24:	50001000 	.word	0x50001000
90004b28:	58024400 	.word	0x58024400
90004b2c:	58022800 	.word	0x58022800
90004b30:	58022000 	.word	0x58022000
90004b34:	58022400 	.word	0x58022400
90004b38:	58021c00 	.word	0x58021c00
90004b3c:	00000000 	.word	0x00000000

90004b40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
90004b40:	b530      	push	{r4, r5, lr}
90004b42:	b0b9      	sub	sp, #228	; 0xe4
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004b44:	2100      	movs	r1, #0
{
90004b46:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b48:	22c0      	movs	r2, #192	; 0xc0
90004b4a:	a808      	add	r0, sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
90004b4c:	9106      	str	r1, [sp, #24]
90004b4e:	e9cd 1102 	strd	r1, r1, [sp, #8]
90004b52:	e9cd 1104 	strd	r1, r1, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004b56:	f022 faf9 	bl	9002714c <memset>
  if(huart->Instance==USART1)
90004b5a:	4b29      	ldr	r3, [pc, #164]	; (90004c00 <HAL_UART_MspInit+0xc0>)
90004b5c:	6822      	ldr	r2, [r4, #0]
90004b5e:	429a      	cmp	r2, r3
90004b60:	d001      	beq.n	90004b66 <HAL_UART_MspInit+0x26>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
90004b62:	b039      	add	sp, #228	; 0xe4
90004b64:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
90004b66:	2201      	movs	r2, #1
90004b68:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b6a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
90004b6c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004b70:	f009 f95e 	bl	9000de30 <HAL_RCCEx_PeriphCLKConfig>
90004b74:	2800      	cmp	r0, #0
90004b76:	d13c      	bne.n	90004bf2 <HAL_UART_MspInit+0xb2>
    __HAL_RCC_USART1_CLK_ENABLE();
90004b78:	4b22      	ldr	r3, [pc, #136]	; (90004c04 <HAL_UART_MspInit+0xc4>)
    GPIO_InitStruct.Pin = GPIO_PIN_7;
90004b7a:	2480      	movs	r4, #128	; 0x80
90004b7c:	2502      	movs	r5, #2
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90004b7e:	2107      	movs	r1, #7
    __HAL_RCC_USART1_CLK_ENABLE();
90004b80:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004b84:	4820      	ldr	r0, [pc, #128]	; (90004c08 <HAL_UART_MspInit+0xc8>)
    __HAL_RCC_USART1_CLK_ENABLE();
90004b86:	f042 0210 	orr.w	r2, r2, #16
90004b8a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
90004b8e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
90004b92:	f002 0210 	and.w	r2, r2, #16
90004b96:	9200      	str	r2, [sp, #0]
90004b98:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
90004b9a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90004b9e:	f042 0202 	orr.w	r2, r2, #2
90004ba2:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90004ba6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
90004baa:	9106      	str	r1, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004bac:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
90004bae:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
90004bb2:	e9cd 4502 	strd	r4, r5, [sp, #8]
90004bb6:	2400      	movs	r4, #0
90004bb8:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
90004bba:	9301      	str	r3, [sp, #4]
90004bbc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
90004bbe:	e9cd 4504 	strd	r4, r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004bc2:	f005 fbb3 	bl	9000a32c <HAL_GPIO_Init>
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
90004bc6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004bc8:	a902      	add	r1, sp, #8
90004bca:	480f      	ldr	r0, [pc, #60]	; (90004c08 <HAL_UART_MspInit+0xc8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
90004bcc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
90004bce:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 90004bf8 <HAL_UART_MspInit+0xb8>
90004bd2:	e9cd 4504 	strd	r4, r5, [sp, #16]
90004bd6:	ed8d 7b02 	vstr	d7, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
90004bda:	f005 fba7 	bl	9000a32c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
90004bde:	2200      	movs	r2, #0
90004be0:	2105      	movs	r1, #5
90004be2:	2025      	movs	r0, #37	; 0x25
90004be4:	f004 fef2 	bl	900099cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
90004be8:	2025      	movs	r0, #37	; 0x25
90004bea:	f004 ff2d 	bl	90009a48 <HAL_NVIC_EnableIRQ>
}
90004bee:	b039      	add	sp, #228	; 0xe4
90004bf0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
90004bf2:	f7ff fe0d 	bl	90004810 <Error_Handler>
90004bf6:	e7bf      	b.n	90004b78 <HAL_UART_MspInit+0x38>
90004bf8:	00004000 	.word	0x00004000
90004bfc:	00000002 	.word	0x00000002
90004c00:	40011000 	.word	0x40011000
90004c04:	58024400 	.word	0x58024400
90004c08:	58020400 	.word	0x58020400

90004c0c <HAL_SDRAM_MspInit>:
static void HAL_FMC_MspInit(void){
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
  if (FMC_Initialized) {
90004c0c:	4836      	ldr	r0, [pc, #216]	; (90004ce8 <HAL_SDRAM_MspInit+0xdc>)
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004c0e:	2300      	movs	r3, #0
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004c10:	b5d0      	push	{r4, r6, r7, lr}
  if (FMC_Initialized) {
90004c12:	6801      	ldr	r1, [r0, #0]
void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
90004c14:	b0b8      	sub	sp, #224	; 0xe0
  GPIO_InitTypeDef GPIO_InitStruct ={0};
90004c16:	e9cd 3302 	strd	r3, r3, [sp, #8]
90004c1a:	e9cd 3304 	strd	r3, r3, [sp, #16]
90004c1e:	9306      	str	r3, [sp, #24]
  if (FMC_Initialized) {
90004c20:	b109      	cbz	r1, 90004c26 <HAL_SDRAM_MspInit+0x1a>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
90004c22:	b038      	add	sp, #224	; 0xe0
90004c24:	bdd0      	pop	{r4, r6, r7, pc}
  FMC_Initialized = 1;
90004c26:	2301      	movs	r3, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004c28:	22b8      	movs	r2, #184	; 0xb8
  FMC_Initialized = 1;
90004c2a:	6003      	str	r3, [r0, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
90004c2c:	a80a      	add	r0, sp, #40	; 0x28
90004c2e:	f022 fa8d 	bl	9002714c <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004c32:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
90004c36:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004c38:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
90004c3a:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
90004c3e:	f009 f8f7 	bl	9000de30 <HAL_RCCEx_PeriphCLKConfig>
90004c42:	2800      	cmp	r0, #0
90004c44:	d14c      	bne.n	90004ce0 <HAL_SDRAM_MspInit+0xd4>
  __HAL_RCC_FMC_CLK_ENABLE();
90004c46:	4b29      	ldr	r3, [pc, #164]	; (90004cec <HAL_SDRAM_MspInit+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c48:	f64f 7083 	movw	r0, #65411	; 0xff83
90004c4c:	2102      	movs	r1, #2
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c4e:	240c      	movs	r4, #12
  __HAL_RCC_FMC_CLK_ENABLE();
90004c50:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c54:	2600      	movs	r6, #0
90004c56:	2703      	movs	r7, #3
  __HAL_RCC_FMC_CLK_ENABLE();
90004c58:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
90004c5c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90004c60:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c64:	9406      	str	r4, [sp, #24]
  __HAL_RCC_FMC_CLK_ENABLE();
90004c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
90004c6e:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004c70:	a902      	add	r1, sp, #8
90004c72:	481f      	ldr	r0, [pc, #124]	; (90004cf0 <HAL_SDRAM_MspInit+0xe4>)
  __HAL_RCC_FMC_CLK_ENABLE();
90004c74:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004c76:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
90004c7a:	f005 fb57 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c7e:	f248 1233 	movw	r2, #33075	; 0x8133
90004c82:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c84:	a902      	add	r1, sp, #8
90004c86:	481b      	ldr	r0, [pc, #108]	; (90004cf4 <HAL_SDRAM_MspInit+0xe8>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004c88:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004c8a:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004c8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
90004c92:	f005 fb4b 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004c96:	f24c 7203 	movw	r2, #50947	; 0xc703
90004c9a:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004c9c:	a902      	add	r1, sp, #8
90004c9e:	4816      	ldr	r0, [pc, #88]	; (90004cf8 <HAL_SDRAM_MspInit+0xec>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004ca0:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004ca2:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004ca6:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
90004caa:	f005 fb3f 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004cae:	f64f 023f 	movw	r2, #63551	; 0xf83f
90004cb2:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004cb4:	a902      	add	r1, sp, #8
90004cb6:	4811      	ldr	r0, [pc, #68]	; (90004cfc <HAL_SDRAM_MspInit+0xf0>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004cb8:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004cba:	e9cd 2302 	strd	r2, r3, [sp, #8]
90004cbe:	e9cd 6704 	strd	r6, r7, [sp, #16]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
90004cc2:	f005 fb33 	bl	9000a32c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004cc6:	22e0      	movs	r2, #224	; 0xe0
90004cc8:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004cca:	a902      	add	r1, sp, #8
90004ccc:	480c      	ldr	r0, [pc, #48]	; (90004d00 <HAL_SDRAM_MspInit+0xf4>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
90004cce:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
90004cd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
90004cd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
90004cd8:	f005 fb28 	bl	9000a32c <HAL_GPIO_Init>
}
90004cdc:	b038      	add	sp, #224	; 0xe0
90004cde:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
90004ce0:	f7ff fd96 	bl	90004810 <Error_Handler>
90004ce4:	e7af      	b.n	90004c46 <HAL_SDRAM_MspInit+0x3a>
90004ce6:	bf00      	nop
90004ce8:	2400be04 	.word	0x2400be04
90004cec:	58024400 	.word	0x58024400
90004cf0:	58021000 	.word	0x58021000
90004cf4:	58021800 	.word	0x58021800
90004cf8:	58020c00 	.word	0x58020c00
90004cfc:	58021400 	.word	0x58021400
90004d00:	58021c00 	.word	0x58021c00

90004d04 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
90004d04:	4b13      	ldr	r3, [pc, #76]	; (90004d54 <HAL_SDRAM_MspDeInit+0x50>)
90004d06:	681a      	ldr	r2, [r3, #0]
90004d08:	b102      	cbz	r2, 90004d0c <HAL_SDRAM_MspDeInit+0x8>
90004d0a:	4770      	bx	lr
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
90004d0c:	b510      	push	{r4, lr}
  __HAL_RCC_FMC_CLK_DISABLE();
90004d0e:	4a12      	ldr	r2, [pc, #72]	; (90004d58 <HAL_SDRAM_MspDeInit+0x54>)
  FMC_DeInitialized = 1;
90004d10:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004d12:	f64f 7183 	movw	r1, #65411	; 0xff83
90004d16:	4811      	ldr	r0, [pc, #68]	; (90004d5c <HAL_SDRAM_MspDeInit+0x58>)
  FMC_DeInitialized = 1;
90004d18:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
90004d1a:	f8d2 30d4 	ldr.w	r3, [r2, #212]	; 0xd4
90004d1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
90004d22:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
90004d26:	f005 fc3b 	bl	9000a5a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
90004d2a:	f248 1133 	movw	r1, #33075	; 0x8133
90004d2e:	480c      	ldr	r0, [pc, #48]	; (90004d60 <HAL_SDRAM_MspDeInit+0x5c>)
90004d30:	f005 fc36 	bl	9000a5a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
90004d34:	f24c 7103 	movw	r1, #50947	; 0xc703
90004d38:	480a      	ldr	r0, [pc, #40]	; (90004d64 <HAL_SDRAM_MspDeInit+0x60>)
90004d3a:	f005 fc31 	bl	9000a5a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
90004d3e:	f64f 013f 	movw	r1, #63551	; 0xf83f
90004d42:	4809      	ldr	r0, [pc, #36]	; (90004d68 <HAL_SDRAM_MspDeInit+0x64>)
90004d44:	f005 fc2c 	bl	9000a5a0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004d48:	21e0      	movs	r1, #224	; 0xe0
90004d4a:	4808      	ldr	r0, [pc, #32]	; (90004d6c <HAL_SDRAM_MspDeInit+0x68>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
90004d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
90004d50:	f005 bc26 	b.w	9000a5a0 <HAL_GPIO_DeInit>
90004d54:	2400be00 	.word	0x2400be00
90004d58:	58024400 	.word	0x58024400
90004d5c:	58021000 	.word	0x58021000
90004d60:	58021800 	.word	0x58021800
90004d64:	58020c00 	.word	0x58020c00
90004d68:	58021400 	.word	0x58021400
90004d6c:	58021c00 	.word	0x58021c00

90004d70 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
90004d70:	280f      	cmp	r0, #15
90004d72:	d901      	bls.n	90004d78 <HAL_InitTick+0x8>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
    uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
90004d74:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
90004d76:	4770      	bx	lr
{
90004d78:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d7a:	4601      	mov	r1, r0
{
90004d7c:	b08a      	sub	sp, #40	; 0x28
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
90004d7e:	2200      	movs	r2, #0
90004d80:	4604      	mov	r4, r0
90004d82:	2036      	movs	r0, #54	; 0x36
90004d84:	f004 fe22 	bl	900099cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
90004d88:	2036      	movs	r0, #54	; 0x36
90004d8a:	f004 fe5d 	bl	90009a48 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d8e:	4b1a      	ldr	r3, [pc, #104]	; (90004df8 <HAL_InitTick+0x88>)
    uwTickPrio = TickPriority;
90004d90:	4a1a      	ldr	r2, [pc, #104]	; (90004dfc <HAL_InitTick+0x8c>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004d92:	4669      	mov	r1, sp
90004d94:	a802      	add	r0, sp, #8
    uwTickPrio = TickPriority;
90004d96:	6014      	str	r4, [r2, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
90004d98:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
90004d9c:	f042 0210 	orr.w	r2, r2, #16
90004da0:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
90004da4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
90004da8:	f003 0310 	and.w	r3, r3, #16
90004dac:	9301      	str	r3, [sp, #4]
90004dae:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
90004db0:	f008 ff1e 	bl	9000dbf0 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
90004db4:	9b07      	ldr	r3, [sp, #28]
90004db6:	b9bb      	cbnz	r3, 90004de8 <HAL_InitTick+0x78>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
90004db8:	f008 fe8a 	bl	9000dad0 <HAL_RCC_GetPCLK1Freq>
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004dbc:	4b10      	ldr	r3, [pc, #64]	; (90004e00 <HAL_InitTick+0x90>)
  htim6.Init.ClockDivision = 0;
90004dbe:	2200      	movs	r2, #0
  htim6.Instance = TIM6;
90004dc0:	4c10      	ldr	r4, [pc, #64]	; (90004e04 <HAL_InitTick+0x94>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004dc2:	fba3 0300 	umull	r0, r3, r3, r0
  htim6.Instance = TIM6;
90004dc6:	4910      	ldr	r1, [pc, #64]	; (90004e08 <HAL_InitTick+0x98>)
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004dc8:	4620      	mov	r0, r4
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
90004dca:	60a2      	str	r2, [r4, #8]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004dcc:	0c9b      	lsrs	r3, r3, #18
  htim6.Instance = TIM6;
90004dce:	6021      	str	r1, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004dd0:	f240 31e7 	movw	r1, #999	; 0x3e7
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
90004dd4:	3b01      	subs	r3, #1
  htim6.Init.Period = (1000000U / 1000U) - 1U;
90004dd6:	e9c4 1203 	strd	r1, r2, [r4, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
90004dda:	6063      	str	r3, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
90004ddc:	f00a f824 	bl	9000ee28 <HAL_TIM_Base_Init>
90004de0:	b130      	cbz	r0, 90004df0 <HAL_InitTick+0x80>
    return HAL_ERROR;
90004de2:	2001      	movs	r0, #1
}
90004de4:	b00a      	add	sp, #40	; 0x28
90004de6:	bd10      	pop	{r4, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
90004de8:	f008 fe72 	bl	9000dad0 <HAL_RCC_GetPCLK1Freq>
90004dec:	0040      	lsls	r0, r0, #1
90004dee:	e7e5      	b.n	90004dbc <HAL_InitTick+0x4c>
    return HAL_TIM_Base_Start_IT(&htim6);
90004df0:	4620      	mov	r0, r4
90004df2:	f00a f8cf 	bl	9000ef94 <HAL_TIM_Base_Start_IT>
90004df6:	e7f5      	b.n	90004de4 <HAL_InitTick+0x74>
90004df8:	58024400 	.word	0x58024400
90004dfc:	24000060 	.word	0x24000060
90004e00:	431bde83 	.word	0x431bde83
90004e04:	2400be08 	.word	0x2400be08
90004e08:	40001000 	.word	0x40001000

90004e0c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
90004e0c:	4770      	bx	lr
90004e0e:	bf00      	nop

90004e10 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
90004e10:	e7fe      	b.n	90004e10 <HardFault_Handler>
90004e12:	bf00      	nop

90004e14 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
90004e14:	e7fe      	b.n	90004e14 <MemManage_Handler>
90004e16:	bf00      	nop

90004e18 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
90004e18:	e7fe      	b.n	90004e18 <BusFault_Handler>
90004e1a:	bf00      	nop

90004e1c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
90004e1c:	e7fe      	b.n	90004e1c <UsageFault_Handler>
90004e1e:	bf00      	nop

90004e20 <DebugMon_Handler>:
90004e20:	4770      	bx	lr
90004e22:	bf00      	nop

90004e24 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
90004e24:	4801      	ldr	r0, [pc, #4]	; (90004e2c <USART1_IRQHandler+0x8>)
90004e26:	f00a bb25 	b.w	9000f474 <HAL_UART_IRQHandler>
90004e2a:	bf00      	nop
90004e2c:	2400bd60 	.word	0x2400bd60

90004e30 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
90004e30:	4801      	ldr	r0, [pc, #4]	; (90004e38 <TIM6_DAC_IRQHandler+0x8>)
90004e32:	f00a b913 	b.w	9000f05c <HAL_TIM_IRQHandler>
90004e36:	bf00      	nop
90004e38:	2400be08 	.word	0x2400be08

90004e3c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
90004e3c:	4801      	ldr	r0, [pc, #4]	; (90004e44 <LTDC_IRQHandler+0x8>)
90004e3e:	f007 bd19 	b.w	9000c874 <HAL_LTDC_IRQHandler>
90004e42:	bf00      	nop
90004e44:	2400bbac 	.word	0x2400bbac

90004e48 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
90004e48:	4801      	ldr	r0, [pc, #4]	; (90004e50 <DMA2D_IRQHandler+0x8>)
90004e4a:	f005 b96b 	b.w	9000a124 <HAL_DMA2D_IRQHandler>
90004e4e:	bf00      	nop
90004e50:	2400baec 	.word	0x2400baec

90004e54 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
90004e54:	4801      	ldr	r0, [pc, #4]	; (90004e5c <JPEG_IRQHandler+0x8>)
90004e56:	f007 bbf9 	b.w	9000c64c <HAL_JPEG_IRQHandler>
90004e5a:	bf00      	nop
90004e5c:	2400bb54 	.word	0x2400bb54

90004e60 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004e60:	4804      	ldr	r0, [pc, #16]	; (90004e74 <MDMA_IRQHandler+0x14>)
{
90004e62:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
90004e64:	f007 ffbe 	bl	9000cde4 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004e68:	4803      	ldr	r0, [pc, #12]	; (90004e78 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
90004e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
90004e6e:	f007 bfb9 	b.w	9000cde4 <HAL_MDMA_IRQHandler>
90004e72:	bf00      	nop
90004e74:	2400bcc0 	.word	0x2400bcc0
90004e78:	2400bc54 	.word	0x2400bc54

90004e7c <_getpid>:
}

int _getpid(void)
{
	return 1;
}
90004e7c:	2001      	movs	r0, #1
90004e7e:	4770      	bx	lr

90004e80 <_kill>:

int _kill(int pid, int sig)
{
90004e80:	b508      	push	{r3, lr}
	errno = EINVAL;
90004e82:	f022 f905 	bl	90027090 <__errno>
90004e86:	2216      	movs	r2, #22
90004e88:	4603      	mov	r3, r0
	return -1;
}
90004e8a:	f04f 30ff 	mov.w	r0, #4294967295
	errno = EINVAL;
90004e8e:	601a      	str	r2, [r3, #0]
}
90004e90:	bd08      	pop	{r3, pc}
90004e92:	bf00      	nop

90004e94 <_exit>:

void _exit (int status)
{
90004e94:	b508      	push	{r3, lr}
	errno = EINVAL;
90004e96:	f022 f8fb 	bl	90027090 <__errno>
90004e9a:	2316      	movs	r3, #22
90004e9c:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
90004e9e:	e7fe      	b.n	90004e9e <_exit+0xa>

90004ea0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
90004ea0:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004ea2:	1e16      	subs	r6, r2, #0
90004ea4:	dd07      	ble.n	90004eb6 <_read+0x16>
90004ea6:	460c      	mov	r4, r1
90004ea8:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
90004eaa:	f3af 8000 	nop.w
90004eae:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004eb2:	42a5      	cmp	r5, r4
90004eb4:	d1f9      	bne.n	90004eaa <_read+0xa>
	}

return len;
}
90004eb6:	4630      	mov	r0, r6
90004eb8:	bd70      	pop	{r4, r5, r6, pc}
90004eba:	bf00      	nop

90004ebc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
90004ebc:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004ebe:	1e16      	subs	r6, r2, #0
90004ec0:	dd07      	ble.n	90004ed2 <_write+0x16>
90004ec2:	460c      	mov	r4, r1
90004ec4:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
90004ec6:	f814 0b01 	ldrb.w	r0, [r4], #1
90004eca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
90004ece:	42ac      	cmp	r4, r5
90004ed0:	d1f9      	bne.n	90004ec6 <_write+0xa>
	}
	return len;
}
90004ed2:	4630      	mov	r0, r6
90004ed4:	bd70      	pop	{r4, r5, r6, pc}
90004ed6:	bf00      	nop

90004ed8 <_close>:

int _close(int file)
{
	return -1;
}
90004ed8:	f04f 30ff 	mov.w	r0, #4294967295
90004edc:	4770      	bx	lr
90004ede:	bf00      	nop

90004ee0 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
90004ee0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
90004ee4:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
90004ee6:	604b      	str	r3, [r1, #4]
}
90004ee8:	4770      	bx	lr
90004eea:	bf00      	nop

90004eec <_isatty>:

int _isatty(int file)
{
	return 1;
}
90004eec:	2001      	movs	r0, #1
90004eee:	4770      	bx	lr

90004ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
90004ef0:	2000      	movs	r0, #0
90004ef2:	4770      	bx	lr

90004ef4 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
90004ef4:	490d      	ldr	r1, [pc, #52]	; (90004f2c <_sbrk+0x38>)
90004ef6:	680a      	ldr	r2, [r1, #0]
{
90004ef8:	b508      	push	{r3, lr}
90004efa:	4603      	mov	r3, r0
	if (heap_end == 0)
90004efc:	b132      	cbz	r2, 90004f0c <_sbrk+0x18>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
90004efe:	4413      	add	r3, r2
90004f00:	4668      	mov	r0, sp
90004f02:	4283      	cmp	r3, r0
90004f04:	d809      	bhi.n	90004f1a <_sbrk+0x26>
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
90004f06:	4610      	mov	r0, r2
	heap_end += incr;
90004f08:	600b      	str	r3, [r1, #0]
}
90004f0a:	bd08      	pop	{r3, pc}
		heap_end = &end;
90004f0c:	4808      	ldr	r0, [pc, #32]	; (90004f30 <_sbrk+0x3c>)
90004f0e:	4602      	mov	r2, r0
90004f10:	6008      	str	r0, [r1, #0]
	if (heap_end + incr > stack_ptr)
90004f12:	4668      	mov	r0, sp
90004f14:	4413      	add	r3, r2
90004f16:	4283      	cmp	r3, r0
90004f18:	d9f5      	bls.n	90004f06 <_sbrk+0x12>
		errno = ENOMEM;
90004f1a:	f022 f8b9 	bl	90027090 <__errno>
90004f1e:	230c      	movs	r3, #12
		return (caddr_t) -1;
90004f20:	f04f 32ff 	mov.w	r2, #4294967295
		errno = ENOMEM;
90004f24:	6003      	str	r3, [r0, #0]
}
90004f26:	4610      	mov	r0, r2
90004f28:	bd08      	pop	{r3, pc}
90004f2a:	bf00      	nop
90004f2c:	2400be54 	.word	0x2400be54
90004f30:	24027238 	.word	0x24027238

90004f34 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const touchgfx::FontId MEDIUM = 3;  // verdana_13_4bpp
    static const uint16_t NUMBER_OF_FONTS = 4;
};

class ApplicationFontProvider : public touchgfx::FontProvider
90004f34:	4770      	bx	lr
90004f36:	bf00      	nop

90004f38 <_ZN23ApplicationFontProviderD0Ev>:
90004f38:	b510      	push	{r4, lr}
90004f3a:	4604      	mov	r4, r0
90004f3c:	2104      	movs	r1, #4
90004f3e:	f021 ffd8 	bl	90026ef2 <_ZdlPvj>
90004f42:	4620      	mov	r0, r4
90004f44:	bd10      	pop	{r4, pc}
90004f46:	bf00      	nop

90004f48 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
90004f48:	b508      	push	{r3, lr}
    switch (typography)
90004f4a:	2903      	cmp	r1, #3
90004f4c:	d813      	bhi.n	90004f76 <_ZN23ApplicationFontProvider7getFontEt+0x2e>
90004f4e:	e8df f001 	tbb	[pc, r1]
90004f52:	0e0a      	.short	0x0e0a
90004f54:	0206      	.short	0x0206
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    case Typography::MEDIUM:
        // verdana_13_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[3]);
90004f56:	f002 fa93 	bl	90007480 <_ZN17TypedTextDatabase8getFontsEv>
90004f5a:	68c0      	ldr	r0, [r0, #12]
    default:
        return 0;
    }
}
90004f5c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
90004f5e:	f002 fa8f 	bl	90007480 <_ZN17TypedTextDatabase8getFontsEv>
90004f62:	6880      	ldr	r0, [r0, #8]
}
90004f64:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
90004f66:	f002 fa8b 	bl	90007480 <_ZN17TypedTextDatabase8getFontsEv>
90004f6a:	6800      	ldr	r0, [r0, #0]
}
90004f6c:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
90004f6e:	f002 fa87 	bl	90007480 <_ZN17TypedTextDatabase8getFontsEv>
90004f72:	6840      	ldr	r0, [r0, #4]
}
90004f74:	bd08      	pop	{r3, pc}
    switch (typography)
90004f76:	2000      	movs	r0, #0
}
90004f78:	bd08      	pop	{r3, pc}
90004f7a:	bf00      	nop

90004f7c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
90004f7c:	4800      	ldr	r0, [pc, #0]	; (90004f80 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
90004f7e:	4770      	bx	lr
90004f80:	90029f8c 	.word	0x90029f8c

90004f84 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
90004f84:	2004      	movs	r0, #4
90004f86:	4770      	bx	lr

90004f88 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
    {
        if (unicode == 0)
90004f88:	b169      	cbz	r1, 90004fa6 <_ZNK8touchgfx4Font8getGlyphEt+0x1e>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f8a:	6802      	ldr	r2, [r0, #0]
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
90004f8c:	b530      	push	{r4, r5, lr}
90004f8e:	b083      	sub	sp, #12
        const uint8_t* dummyPixelDataPointer = 0;
90004f90:	2400      	movs	r4, #0
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004f92:	6895      	ldr	r5, [r2, #8]
90004f94:	f10d 0303 	add.w	r3, sp, #3
90004f98:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
90004f9a:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
90004f9c:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
90004fa0:	47a8      	blx	r5
        return glyph;
    }
90004fa2:	b003      	add	sp, #12
90004fa4:	bd30      	pop	{r4, r5, pc}
            return 0;
90004fa6:	4608      	mov	r0, r1
    }
90004fa8:	4770      	bx	lr
90004faa:	bf00      	nop

90004fac <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
90004fac:	89c0      	ldrh	r0, [r0, #14]
90004fae:	4770      	bx	lr

90004fb0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
90004fb0:	8a00      	ldrh	r0, [r0, #16]
90004fb2:	4770      	bx	lr

90004fb4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
90004fb4:	88c0      	ldrh	r0, [r0, #6]
90004fb6:	4770      	bx	lr

90004fb8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
90004fb8:	8880      	ldrh	r0, [r0, #4]
90004fba:	4770      	bx	lr

90004fbc <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
90004fbc:	7a80      	ldrb	r0, [r0, #10]
    }
90004fbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
90004fc2:	4770      	bx	lr

90004fc4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
90004fc4:	7a80      	ldrb	r0, [r0, #10]
    }
90004fc6:	09c0      	lsrs	r0, r0, #7
90004fc8:	4770      	bx	lr
90004fca:	bf00      	nop

90004fcc <_ZN8touchgfx9TypedTextD1Ev>:
    }
90004fcc:	4770      	bx	lr
90004fce:	bf00      	nop

90004fd0 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
90004fd0:	b510      	push	{r4, lr}
90004fd2:	4604      	mov	r4, r0
    }
90004fd4:	2108      	movs	r1, #8
90004fd6:	f021 ff8c 	bl	90026ef2 <_ZdlPvj>
90004fda:	4620      	mov	r0, r4
90004fdc:	bd10      	pop	{r4, pc}
90004fde:	bf00      	nop

90004fe0 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
90004fe0:	4770      	bx	lr
90004fe2:	bf00      	nop

90004fe4 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
90004fe4:	f500 7398 	add.w	r3, r0, #304	; 0x130
90004fe8:	6808      	ldr	r0, [r1, #0]
90004fea:	6849      	ldr	r1, [r1, #4]
90004fec:	c303      	stmia	r3!, {r0, r1}
    }
90004fee:	4770      	bx	lr

90004ff0 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
90004ff0:	4770      	bx	lr
90004ff2:	bf00      	nop

90004ff4 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
90004ff4:	4770      	bx	lr
90004ff6:	bf00      	nop

90004ff8 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
90004ff8:	6041      	str	r1, [r0, #4]
    }
90004ffa:	4770      	bx	lr

90004ffc <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
90004ffc:	4770      	bx	lr
90004ffe:	bf00      	nop

90005000 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005000:	4905      	ldr	r1, [pc, #20]	; (90005018 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x18>)
90005002:	2200      	movs	r2, #0
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
90005004:	f500 73a2 	add.w	r3, r0, #324	; 0x144
90005008:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
9000500c:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005010:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148

    virtual void changeToStartScreen()
    {
        gotoScreen1ScreenNoTransition();
    }
90005014:	4770      	bx	lr
90005016:	bf00      	nop
90005018:	900050a5 	.word	0x900050a5

9000501c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
9000501c:	2301      	movs	r3, #1
9000501e:	7203      	strb	r3, [r0, #8]
    }
90005020:	4770      	bx	lr
90005022:	bf00      	nop

90005024 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
90005024:	4770      	bx	lr
90005026:	bf00      	nop

90005028 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
90005028:	4770      	bx	lr
9000502a:	bf00      	nop

9000502c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
    {
        (pobject->*pmemfun)();
9000502c:	68c2      	ldr	r2, [r0, #12]
    virtual void execute()
9000502e:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
90005030:	6841      	ldr	r1, [r0, #4]
90005032:	ea4f 0c62 	mov.w	ip, r2, asr #1
90005036:	eb01 0062 	add.w	r0, r1, r2, asr #1
9000503a:	07d2      	lsls	r2, r2, #31
9000503c:	d401      	bmi.n	90005042 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x16>
9000503e:	689b      	ldr	r3, [r3, #8]
90005040:	4718      	bx	r3
90005042:	f851 200c 	ldr.w	r2, [r1, ip]
90005046:	689b      	ldr	r3, [r3, #8]
90005048:	58d3      	ldr	r3, [r2, r3]
9000504a:	4718      	bx	r3

9000504c <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
    {
        return (pobject != 0) && (pmemfun != 0);
9000504c:	6843      	ldr	r3, [r0, #4]
9000504e:	b13b      	cbz	r3, 90005060 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
90005050:	6883      	ldr	r3, [r0, #8]
90005052:	b10b      	cbz	r3, 90005058 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0xc>
90005054:	2001      	movs	r0, #1
    }
90005056:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
90005058:	68c0      	ldr	r0, [r0, #12]
9000505a:	f000 0001 	and.w	r0, r0, #1
9000505e:	4770      	bx	lr
90005060:	4618      	mov	r0, r3
90005062:	4770      	bx	lr

90005064 <_ZN8touchgfx12NoTransitionD0Ev>:
90005064:	b510      	push	{r4, lr}
90005066:	4604      	mov	r4, r0
90005068:	210c      	movs	r1, #12
9000506a:	f021 ff42 	bl	90026ef2 <_ZdlPvj>
9000506e:	4620      	mov	r0, r4
90005070:	bd10      	pop	{r4, pc}
90005072:	bf00      	nop

90005074 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005074:	b510      	push	{r4, lr}
90005076:	4604      	mov	r4, r0
90005078:	2110      	movs	r1, #16
9000507a:	f021 ff3a 	bl	90026ef2 <_ZdlPvj>
9000507e:	4620      	mov	r0, r4
90005080:	bd10      	pop	{r4, pc}
90005082:	bf00      	nop

90005084 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
90005084:	b510      	push	{r4, lr}
90005086:	4604      	mov	r4, r0
90005088:	f44f 71ae 	mov.w	r1, #348	; 0x15c
9000508c:	f021 ff31 	bl	90026ef2 <_ZdlPvj>
90005090:	4620      	mov	r0, r4
90005092:	bd10      	pop	{r4, pc}

90005094 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
90005094:	b508      	push	{r3, lr}
        Application::getInstance()->invalidate();
90005096:	f013 f8f7 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
    }
9000509a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        Application::getInstance()->invalidate();
9000509e:	f013 bd3d 	b.w	90018b1c <_ZN8touchgfx11Application10invalidateEv>
900050a2:	bf00      	nop

900050a4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
900050a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
900050a8:	e9d0 4a55 	ldrd	r4, sl, [r0, #340]	; 0x154
{
900050ac:	4607      	mov	r7, r0
900050ae:	b081      	sub	sp, #4
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
900050b0:	68a0      	ldr	r0, [r4, #8]
900050b2:	6803      	ldr	r3, [r0, #0]
900050b4:	6a1b      	ldr	r3, [r3, #32]
900050b6:	4798      	blx	r3
900050b8:	f640 2373 	movw	r3, #2675	; 0xa73
900050bc:	4298      	cmp	r0, r3
900050be:	f240 80a8 	bls.w	90005212 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x16e>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
900050c2:	6860      	ldr	r0, [r4, #4]
900050c4:	6803      	ldr	r3, [r0, #0]
900050c6:	6a1b      	ldr	r3, [r3, #32]
900050c8:	4798      	blx	r3
900050ca:	280f      	cmp	r0, #15
900050cc:	f240 809b 	bls.w	90005206 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x162>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
900050d0:	68e0      	ldr	r0, [r4, #12]
900050d2:	6803      	ldr	r3, [r0, #0]
900050d4:	6a1b      	ldr	r3, [r3, #32]
900050d6:	4798      	blx	r3
900050d8:	280b      	cmp	r0, #11
900050da:	f240 80a0 	bls.w	9000521e <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x17a>
    if (*currentTrans)
900050de:	f8df 9170 	ldr.w	r9, [pc, #368]	; 90005250 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1ac>
    Application::getInstance()->clearAllTimerWidgets();
900050e2:	f013 f8d1 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
900050e6:	3004      	adds	r0, #4
900050e8:	f013 f8f3 	bl	900182d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
900050ec:	f8d9 0000 	ldr.w	r0, [r9]
900050f0:	b130      	cbz	r0, 90005100 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5c>
        (*currentTrans)->tearDown();
900050f2:	6803      	ldr	r3, [r0, #0]
900050f4:	494d      	ldr	r1, [pc, #308]	; (9000522c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x188>)
900050f6:	68da      	ldr	r2, [r3, #12]
900050f8:	428a      	cmp	r2, r1
900050fa:	d17c      	bne.n	900051f6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x152>
        (*currentTrans)->~Transition();
900050fc:	681b      	ldr	r3, [r3, #0]
900050fe:	4798      	blx	r3
    if (*currentScreen)
90005100:	f8df 8150 	ldr.w	r8, [pc, #336]	; 90005254 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1b0>
90005104:	f8d8 0000 	ldr.w	r0, [r8]
90005108:	2800      	cmp	r0, #0
9000510a:	d061      	beq.n	900051d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x12c>
        (*currentScreen)->tearDownScreen();
9000510c:	6803      	ldr	r3, [r0, #0]
9000510e:	695b      	ldr	r3, [r3, #20]
90005110:	4798      	blx	r3
    if (*currentPresenter)
90005112:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90005116:	2800      	cmp	r0, #0
90005118:	d055      	beq.n	900051c6 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x122>
        (*currentPresenter)->deactivate();
9000511a:	6803      	ldr	r3, [r0, #0]
9000511c:	685b      	ldr	r3, [r3, #4]
9000511e:	4798      	blx	r3
    if (*currentScreen)
90005120:	f8d8 0000 	ldr.w	r0, [r8]
90005124:	b110      	cbz	r0, 9000512c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x88>
        (*currentScreen)->~Screen();
90005126:	6803      	ldr	r3, [r0, #0]
90005128:	681b      	ldr	r3, [r3, #0]
9000512a:	4798      	blx	r3
    if (*currentPresenter)
9000512c:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
90005130:	b110      	cbz	r0, 90005138 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x94>
        (*currentPresenter)->~Presenter();
90005132:	6803      	ldr	r3, [r0, #0]
90005134:	689b      	ldr	r3, [r3, #8]
90005136:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
90005138:	68e0      	ldr	r0, [r4, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
9000513a:	2100      	movs	r1, #0
9000513c:	6803      	ldr	r3, [r0, #0]
        : screenContainer(0), done(false)
9000513e:	468b      	mov	fp, r1
90005140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90005142:	4798      	blx	r3
90005144:	4b3a      	ldr	r3, [pc, #232]	; (90005230 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x18c>)
90005146:	4605      	mov	r5, r0
90005148:	f8c0 b004 	str.w	fp, [r0, #4]
9000514c:	f880 b008 	strb.w	fp, [r0, #8]
90005150:	4659      	mov	r1, fp
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
90005152:	68a0      	ldr	r0, [r4, #8]
90005154:	602b      	str	r3, [r5, #0]
90005156:	6803      	ldr	r3, [r0, #0]
90005158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000515a:	4798      	blx	r3
9000515c:	4606      	mov	r6, r0
9000515e:	f002 ff69 	bl	90008034 <_ZN11Screen1ViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
90005162:	6860      	ldr	r0, [r4, #4]
90005164:	4659      	mov	r1, fp
90005166:	6803      	ldr	r3, [r0, #0]
90005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9000516a:	4798      	blx	r3
9000516c:	4604      	mov	r4, r0
9000516e:	4631      	mov	r1, r6
90005170:	f002 feb4 	bl	90007edc <_ZN16Screen1PresenterC1ER11Screen1View>
    *currentTrans = newTransition;
90005174:	f8c9 5000 	str.w	r5, [r9]
    *currentPresenter = newPresenter;
90005178:	f8c7 413c 	str.w	r4, [r7, #316]	; 0x13c
    *currentScreen = newScreen;
9000517c:	f8c8 6000 	str.w	r6, [r8]
    model->bind(newPresenter);
90005180:	b35c      	cbz	r4, 900051da <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x136>
90005182:	1d23      	adds	r3, r4, #4
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
90005184:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
90005188:	4630      	mov	r0, r6
9000518a:	6833      	ldr	r3, [r6, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
9000518c:	f8c4 a008 	str.w	sl, [r4, #8]
90005190:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
90005192:	63f4      	str	r4, [r6, #60]	; 0x3c
90005194:	4798      	blx	r3
    newPresenter->activate();
90005196:	6823      	ldr	r3, [r4, #0]
90005198:	4620      	mov	r0, r4
9000519a:	681b      	ldr	r3, [r3, #0]
9000519c:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
9000519e:	4629      	mov	r1, r5
900051a0:	4630      	mov	r0, r6
900051a2:	f014 fd2d 	bl	90019c00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
900051a6:	682b      	ldr	r3, [r5, #0]
900051a8:	4922      	ldr	r1, [pc, #136]	; (90005234 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x190>)
900051aa:	691a      	ldr	r2, [r3, #16]
900051ac:	428a      	cmp	r2, r1
900051ae:	d116      	bne.n	900051de <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x13a>
    newTransition->invalidate();
900051b0:	695b      	ldr	r3, [r3, #20]
900051b2:	4a21      	ldr	r2, [pc, #132]	; (90005238 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
900051b4:	4293      	cmp	r3, r2
900051b6:	d119      	bne.n	900051ec <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x148>
        Application::getInstance()->invalidate();
900051b8:	f013 f866 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
}
900051bc:	b001      	add	sp, #4
900051be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900051c2:	f013 bcab 	b.w	90018b1c <_ZN8touchgfx11Application10invalidateEv>
    if (*currentScreen)
900051c6:	f8d8 0000 	ldr.w	r0, [r8]
900051ca:	2800      	cmp	r0, #0
900051cc:	d1ab      	bne.n	90005126 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x82>
900051ce:	e7b3      	b.n	90005138 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x94>
    if (*currentPresenter)
900051d0:	f8d7 013c 	ldr.w	r0, [r7, #316]	; 0x13c
900051d4:	2800      	cmp	r0, #0
900051d6:	d1a0      	bne.n	9000511a <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x76>
900051d8:	e7ae      	b.n	90005138 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x94>
    model->bind(newPresenter);
900051da:	4623      	mov	r3, r4
900051dc:	e7d2      	b.n	90005184 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0xe0>
    newTransition->init();
900051de:	4628      	mov	r0, r5
900051e0:	4790      	blx	r2
    newTransition->invalidate();
900051e2:	682b      	ldr	r3, [r5, #0]
900051e4:	4a14      	ldr	r2, [pc, #80]	; (90005238 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x194>)
900051e6:	695b      	ldr	r3, [r3, #20]
900051e8:	4293      	cmp	r3, r2
900051ea:	d0e5      	beq.n	900051b8 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x114>
900051ec:	4628      	mov	r0, r5
900051ee:	b001      	add	sp, #4
900051f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900051f4:	4718      	bx	r3
        (*currentTrans)->tearDown();
900051f6:	4790      	blx	r2
    if (*currentTrans)
900051f8:	f8d9 0000 	ldr.w	r0, [r9]
900051fc:	2800      	cmp	r0, #0
900051fe:	f43f af7f 	beq.w	90005100 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x5c>
        (*currentTrans)->~Transition();
90005202:	6803      	ldr	r3, [r0, #0]
90005204:	e77a      	b.n	900050fc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x58>
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
90005206:	4b0d      	ldr	r3, [pc, #52]	; (9000523c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x198>)
90005208:	21a4      	movs	r1, #164	; 0xa4
9000520a:	4a0d      	ldr	r2, [pc, #52]	; (90005240 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
9000520c:	480d      	ldr	r0, [pc, #52]	; (90005244 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
9000520e:	f021 ff0d 	bl	9002702c <__assert_func>
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
90005212:	4b0d      	ldr	r3, [pc, #52]	; (90005248 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a4>)
90005214:	21a3      	movs	r1, #163	; 0xa3
90005216:	4a0a      	ldr	r2, [pc, #40]	; (90005240 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005218:	480a      	ldr	r0, [pc, #40]	; (90005244 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
9000521a:	f021 ff07 	bl	9002702c <__assert_func>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
9000521e:	4b0b      	ldr	r3, [pc, #44]	; (9000524c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a8>)
90005220:	21a5      	movs	r1, #165	; 0xa5
90005222:	4a07      	ldr	r2, [pc, #28]	; (90005240 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x19c>)
90005224:	4807      	ldr	r0, [pc, #28]	; (90005244 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x1a0>)
90005226:	f021 ff01 	bl	9002702c <__assert_func>
9000522a:	bf00      	nop
9000522c:	90004ff1 	.word	0x90004ff1
90005230:	9002a37c 	.word	0x9002a37c
90005234:	90004ff5 	.word	0x90004ff5
90005238:	90005095 	.word	0x90005095
9000523c:	9002a1c8 	.word	0x9002a1c8
90005240:	9002a07c 	.word	0x9002a07c
90005244:	9002a180 	.word	0x9002a180
90005248:	90029fec 	.word	0x90029fec
9000524c:	9002a26c 	.word	0x9002a26c
90005250:	24026fcc 	.word	0x24026fcc
90005254:	24026fc8 	.word	0x24026fc8

90005258 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005258:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
9000525c:	b1d3      	cbz	r3, 90005294 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3c>
9000525e:	681a      	ldr	r2, [r3, #0]
    virtual void handlePendingScreenTransition()
90005260:	b570      	push	{r4, r5, r6, lr}
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
90005262:	68d1      	ldr	r1, [r2, #12]
90005264:	4604      	mov	r4, r0
90005266:	4818      	ldr	r0, [pc, #96]	; (900052c8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x70>)
90005268:	4281      	cmp	r1, r0
9000526a:	d118      	bne.n	9000529e <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x46>
        return (pobject != 0) && (pmemfun != 0);
9000526c:	6858      	ldr	r0, [r3, #4]
9000526e:	b180      	cbz	r0, 90005292 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
90005270:	6899      	ldr	r1, [r3, #8]
90005272:	b1e1      	cbz	r1, 900052ae <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x56>
            pendingScreenTransitionCallback->execute();
90005274:	6892      	ldr	r2, [r2, #8]
90005276:	4915      	ldr	r1, [pc, #84]	; (900052cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
90005278:	428a      	cmp	r2, r1
9000527a:	d122      	bne.n	900052c2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
9000527c:	68da      	ldr	r2, [r3, #12]
9000527e:	6858      	ldr	r0, [r3, #4]
90005280:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005284:	07d2      	lsls	r2, r2, #31
90005286:	d406      	bmi.n	90005296 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3e>
90005288:	689b      	ldr	r3, [r3, #8]
9000528a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
9000528c:	2300      	movs	r3, #0
9000528e:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    }
90005292:	bd70      	pop	{r4, r5, r6, pc}
90005294:	4770      	bx	lr
90005296:	6899      	ldr	r1, [r3, #8]
90005298:	6803      	ldr	r3, [r0, #0]
9000529a:	585b      	ldr	r3, [r3, r1]
9000529c:	e7f5      	b.n	9000528a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x32>
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
9000529e:	4618      	mov	r0, r3
900052a0:	4788      	blx	r1
900052a2:	2800      	cmp	r0, #0
900052a4:	d0f5      	beq.n	90005292 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
            pendingScreenTransitionCallback->execute();
900052a6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
900052aa:	681a      	ldr	r2, [r3, #0]
900052ac:	e7e2      	b.n	90005274 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x1c>
        return (pobject != 0) && (pmemfun != 0);
900052ae:	68dd      	ldr	r5, [r3, #12]
900052b0:	07ee      	lsls	r6, r5, #31
900052b2:	d5ee      	bpl.n	90005292 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x3a>
900052b4:	6892      	ldr	r2, [r2, #8]
900052b6:	4e05      	ldr	r6, [pc, #20]	; (900052cc <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x74>)
900052b8:	42b2      	cmp	r2, r6
900052ba:	d102      	bne.n	900052c2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x6a>
        (pobject->*pmemfun)();
900052bc:	eb00 0065 	add.w	r0, r0, r5, asr #1
900052c0:	e7ea      	b.n	90005298 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x40>
900052c2:	4618      	mov	r0, r3
900052c4:	4790      	blx	r2
900052c6:	e7e1      	b.n	9000528c <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x34>
900052c8:	9000504d 	.word	0x9000504d
900052cc:	9000502d 	.word	0x9000502d

900052d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
900052d0:	b570      	push	{r4, r5, r6, lr}
900052d2:	4604      	mov	r4, r0
900052d4:	4616      	mov	r6, r2
900052d6:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
900052d8:	f013 f89c 	bl	90018414 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
900052dc:	4a18      	ldr	r2, [pc, #96]	; (90005340 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x70>)
          pendingScreenTransitionCallback(0)
900052de:	2300      	movs	r3, #0
      model(m)
900052e0:	f8c4 6154 	str.w	r6, [r4, #340]	; 0x154
        instance = this;
900052e4:	6014      	str	r4, [r2, #0]
        return instance;
900052e6:	4e17      	ldr	r6, [pc, #92]	; (90005344 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x74>)
900052e8:	4a17      	ldr	r2, [pc, #92]	; (90005348 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x78>)
900052ea:	6830      	ldr	r0, [r6, #0]
900052ec:	6022      	str	r2, [r4, #0]
        : pobject(0), pmemfun(0)
900052ee:	4a17      	ldr	r2, [pc, #92]	; (9000534c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x7c>)
900052f0:	4917      	ldr	r1, [pc, #92]	; (90005350 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x80>)
900052f2:	f8c4 2144 	str.w	r2, [r4, #324]	; 0x144
900052f6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
900052fa:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
900052fe:	e9c4 3353 	strd	r3, r3, [r4, #332]	; 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
90005302:	6802      	ldr	r2, [r0, #0]
90005304:	6892      	ldr	r2, [r2, #8]
90005306:	428a      	cmp	r2, r1
          pendingScreenTransitionCallback(0)
90005308:	e9c4 334f 	strd	r3, r3, [r4, #316]	; 0x13c
9000530c:	d115      	bne.n	9000533a <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x6a>
        requestedOrientation = orientation;
9000530e:	f44f 7380 	mov.w	r3, #256	; 0x100
90005312:	f8a0 3074 	strh.w	r3, [r0, #116]	; 0x74
    touchgfx::Texts::setLanguage(GB);
90005316:	2000      	movs	r0, #0
90005318:	f002 f864 	bl	900073e4 <_ZN8touchgfx5Texts11setLanguageEt>
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
9000531c:	6833      	ldr	r3, [r6, #0]
9000531e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90005322:	b12a      	cbz	r2, 90005330 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
90005324:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90005326:	b118      	cbz	r0, 90005330 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005328:	f01a fedf 	bl	900200ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
9000532c:	4620      	mov	r0, r4
9000532e:	bd70      	pop	{r4, r5, r6, pc}
        return instance->lcdRef;
90005330:	6898      	ldr	r0, [r3, #8]
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
90005332:	f01a feda 	bl	900200ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
90005336:	4620      	mov	r0, r4
90005338:	bd70      	pop	{r4, r5, r6, pc}
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
9000533a:	4619      	mov	r1, r3
9000533c:	4790      	blx	r2
9000533e:	e7ea      	b.n	90005316 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x46>
90005340:	24026fd8 	.word	0x24026fd8
90005344:	24026f8c 	.word	0x24026f8c
90005348:	9002a330 	.word	0x9002a330
9000534c:	9002a318 	.word	0x9002a318
90005350:	90000939 	.word	0x90000939

90005354 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
90005354:	4905      	ldr	r1, [pc, #20]	; (9000536c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x18>)
90005356:	2200      	movs	r2, #0
    pendingScreenTransitionCallback = &transitionCallback;
90005358:	f500 73a2 	add.w	r3, r0, #324	; 0x144
9000535c:	f8c0 2150 	str.w	r2, [r0, #336]	; 0x150
90005360:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
90005364:	e9c0 0152 	strd	r0, r1, [r0, #328]	; 0x148
}
90005368:	4770      	bx	lr
9000536a:	bf00      	nop
9000536c:	900050a5 	.word	0x900050a5

90005370 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
90005370:	6a40      	ldr	r0, [r0, #36]	; 0x24
90005372:	4770      	bx	lr

90005374 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
90005374:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005376:	4770      	bx	lr

90005378 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
90005378:	4770      	bx	lr
9000537a:	bf00      	nop

9000537c <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
9000537c:	888b      	ldrh	r3, [r1, #4]
9000537e:	69c0      	ldr	r0, [r0, #28]
90005380:	0adb      	lsrs	r3, r3, #11
90005382:	680a      	ldr	r2, [r1, #0]
90005384:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
90005388:	4410      	add	r0, r2
9000538a:	4770      	bx	lr

9000538c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
    if (!glyph || glyph->kerningTableSize == 0)
9000538c:	b1da      	cbz	r2, 900053c6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3a>
{
9000538e:	b510      	push	{r4, lr}
    if (!glyph || glyph->kerningTableSize == 0)
90005390:	7b14      	ldrb	r4, [r2, #12]
90005392:	b1b4      	cbz	r4, 900053c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
90005394:	f892 c00d 	ldrb.w	ip, [r2, #13]
90005398:	f892 e00b 	ldrb.w	lr, [r2, #11]
9000539c:	ea4f 220c 	mov.w	r2, ip, lsl #8
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
900053a0:	6a03      	ldr	r3, [r0, #32]
900053a2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
900053a6:	ea4e 0202 	orr.w	r2, lr, r2
900053aa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900053ae:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    {
        if (prevChar == kerndata->unicodePrevChar)
900053b2:	881a      	ldrh	r2, [r3, #0]
900053b4:	428a      	cmp	r2, r1
900053b6:	d008      	beq.n	900053ca <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x3e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900053b8:	f103 0304 	add.w	r3, r3, #4
        {
            return kerndata->distance;
        }
        if (prevChar < kerndata->unicodePrevChar)
900053bc:	d801      	bhi.n	900053c2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
900053be:	4283      	cmp	r3, r0
900053c0:	d1f7      	bne.n	900053b2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
900053c2:	2000      	movs	r0, #0
        {
            break;
        }
    }
    return 0;
}
900053c4:	bd10      	pop	{r4, pc}
        return 0;
900053c6:	4610      	mov	r0, r2
}
900053c8:	4770      	bx	lr
            return kerndata->distance;
900053ca:	f993 0002 	ldrsb.w	r0, [r3, #2]
}
900053ce:	bd10      	pop	{r4, pc}

900053d0 <_ZN8touchgfx13GeneratedFontD0Ev>:
900053d0:	b510      	push	{r4, lr}
900053d2:	4604      	mov	r4, r0
900053d4:	212c      	movs	r1, #44	; 0x2c
900053d6:	f021 fd8c 	bl	90026ef2 <_ZdlPvj>
900053da:	4620      	mov	r0, r4
900053dc:	bd10      	pop	{r4, pc}
900053de:	bf00      	nop

900053e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900053e0:	b530      	push	{r4, r5, lr}
900053e2:	b08b      	sub	sp, #44	; 0x2c
900053e4:	4604      	mov	r4, r0
900053e6:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
      arabicTable(formsTable)
900053ea:	9500      	str	r5, [sp, #0]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900053ec:	f89d 503c 	ldrb.w	r5, [sp, #60]	; 0x3c
      arabicTable(formsTable)
900053f0:	9501      	str	r5, [sp, #4]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900053f2:	f89d 5040 	ldrb.w	r5, [sp, #64]	; 0x40
      arabicTable(formsTable)
900053f6:	9502      	str	r5, [sp, #8]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900053f8:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
      arabicTable(formsTable)
900053fc:	9503      	str	r5, [sp, #12]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
900053fe:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
      arabicTable(formsTable)
90005402:	9504      	str	r5, [sp, #16]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005404:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
      arabicTable(formsTable)
90005408:	9505      	str	r5, [sp, #20]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
9000540a:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
      arabicTable(formsTable)
9000540e:	9506      	str	r5, [sp, #24]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005410:	f8bd 505c 	ldrh.w	r5, [sp, #92]	; 0x5c
      arabicTable(formsTable)
90005414:	9507      	str	r5, [sp, #28]
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
90005416:	f8bd 5060 	ldrh.w	r5, [sp, #96]	; 0x60
      arabicTable(formsTable)
9000541a:	9508      	str	r5, [sp, #32]
9000541c:	f014 f826 	bl	9001946c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
90005420:	9b15      	ldr	r3, [sp, #84]	; 0x54
}
90005422:	4620      	mov	r0, r4
      arabicTable(formsTable)
90005424:	61e3      	str	r3, [r4, #28]
90005426:	9b16      	ldr	r3, [sp, #88]	; 0x58
90005428:	6223      	str	r3, [r4, #32]
9000542a:	9b19      	ldr	r3, [sp, #100]	; 0x64
9000542c:	6263      	str	r3, [r4, #36]	; 0x24
9000542e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90005430:	62a3      	str	r3, [r4, #40]	; 0x28
90005432:	4b02      	ldr	r3, [pc, #8]	; (9000543c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
90005434:	6023      	str	r3, [r4, #0]
}
90005436:	b00b      	add	sp, #44	; 0x2c
90005438:	bd30      	pop	{r4, r5, pc}
9000543a:	bf00      	nop
9000543c:	9002a3a0 	.word	0x9002a3a0

90005440 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
90005440:	6a80      	ldr	r0, [r0, #40]	; 0x28
90005442:	4770      	bx	lr

90005444 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
90005444:	4770      	bx	lr
90005446:	bf00      	nop

90005448 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
90005448:	4770      	bx	lr
9000544a:	bf00      	nop

9000544c <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
9000544c:	4770      	bx	lr
9000544e:	bf00      	nop

90005450 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
90005450:	4770      	bx	lr
90005452:	bf00      	nop

90005454 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
90005454:	b530      	push	{r4, r5, lr}
90005456:	b085      	sub	sp, #20
90005458:	460a      	mov	r2, r1
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
9000545a:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
9000545c:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
9000545e:	466d      	mov	r5, sp
90005460:	4601      	mov	r1, r0
        rect.width = width;
90005462:	8102      	strh	r2, [r0, #8]
90005464:	343c      	adds	r4, #60	; 0x3c
90005466:	4628      	mov	r0, r5
90005468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
9000546c:	4798      	blx	r3
9000546e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90005472:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
90005476:	b005      	add	sp, #20
90005478:	bd30      	pop	{r4, r5, pc}
9000547a:	bf00      	nop

9000547c <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
9000547c:	b530      	push	{r4, r5, lr}
9000547e:	b085      	sub	sp, #20
90005480:	460a      	mov	r2, r1
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
90005482:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
90005484:	4604      	mov	r4, r0
        boundingArea = calculateBoundingArea();
90005486:	466d      	mov	r5, sp
90005488:	4601      	mov	r1, r0
        rect.height = height;
9000548a:	8142      	strh	r2, [r0, #10]
9000548c:	343c      	adds	r4, #60	; 0x3c
9000548e:	4628      	mov	r0, r5
90005490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90005494:	4798      	blx	r3
90005496:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9000549a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
9000549e:	b005      	add	sp, #20
900054a0:	bd30      	pop	{r4, r5, pc}
900054a2:	bf00      	nop

900054a4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
900054a4:	2200      	movs	r2, #0
900054a6:	6002      	str	r2, [r0, #0]
900054a8:	6042      	str	r2, [r0, #4]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
900054aa:	4770      	bx	lr

900054ac <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900054ac:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    }
900054b0:	4770      	bx	lr
900054b2:	bf00      	nop

900054b4 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
900054b4:	2000      	movs	r0, #0
900054b6:	4770      	bx	lr

900054b8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
        if (visible)
900054b8:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900054bc:	b112      	cbz	r2, 900054c4 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv+0xc>
            invalidate();
900054be:	6803      	ldr	r3, [r0, #0]
900054c0:	695b      	ldr	r3, [r3, #20]
900054c2:	4718      	bx	r3
    virtual void draw(const Rect& area) const;

    virtual void invalidateContent() const
    {
        Widget::invalidateContent();
    }
900054c4:	4770      	bx	lr
900054c6:	bf00      	nop

900054c8 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900054c8:	2200      	movs	r2, #0
900054ca:	f04f 31ff 	mov.w	r1, #4294967295
        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
              text(0)
900054ce:	6082      	str	r2, [r0, #8]
900054d0:	e9c0 2100 	strd	r2, r1, [r0]

protected:
    virtual TextArea::BoundingArea calculateBoundingArea() const
    {
        return TextArea::BoundingArea();
    }
900054d4:	4770      	bx	lr
900054d6:	bf00      	nop

900054d8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
900054d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
900054da:	4770      	bx	lr

900054dc <_ZN15Screen1ViewBase7action1Ev>:
     * Custom Actions
     */
    virtual void action1()
    {
        // Override and implement this function in Screen1
    }
900054dc:	4770      	bx	lr
900054de:	bf00      	nop

900054e0 <_ZN15Screen1ViewBase19activateAlarmSystemEv>:
     * Virtual Action Handlers
     */
    virtual void activateAlarmSystem()
    {
        // Override and implement this function in Screen1
    }
900054e0:	4770      	bx	lr
900054e2:	bf00      	nop

900054e4 <_ZN15Screen1ViewBase12clickButton1Ev>:
    virtual void clickButton1()
    {
        // Override and implement this function in Screen1
    }
900054e4:	4770      	bx	lr
900054e6:	bf00      	nop

900054e8 <_ZN15Screen1ViewBase12clickButton2Ev>:
    virtual void clickButton2()
    {
        // Override and implement this function in Screen1
    }
900054e8:	4770      	bx	lr
900054ea:	bf00      	nop

900054ec <_ZN15Screen1ViewBase12clickButton3Ev>:
    virtual void clickButton3()
    {
        // Override and implement this function in Screen1
    }
900054ec:	4770      	bx	lr
900054ee:	bf00      	nop

900054f0 <_ZN15Screen1ViewBase12clickButton4Ev>:
    virtual void clickButton4()
    {
        // Override and implement this function in Screen1
    }
900054f0:	4770      	bx	lr
900054f2:	bf00      	nop

900054f4 <_ZN15Screen1ViewBase12clickButton5Ev>:
    virtual void clickButton5()
    {
        // Override and implement this function in Screen1
    }
900054f4:	4770      	bx	lr
900054f6:	bf00      	nop

900054f8 <_ZN15Screen1ViewBase12clickButton6Ev>:
    virtual void clickButton6()
    {
        // Override and implement this function in Screen1
    }
900054f8:	4770      	bx	lr
900054fa:	bf00      	nop

900054fc <_ZN15Screen1ViewBase12clickButton7Ev>:
    virtual void clickButton7()
    {
        // Override and implement this function in Screen1
    }
900054fc:	4770      	bx	lr
900054fe:	bf00      	nop

90005500 <_ZN15Screen1ViewBase12clickButton8Ev>:
    virtual void clickButton8()
    {
        // Override and implement this function in Screen1
    }
90005500:	4770      	bx	lr
90005502:	bf00      	nop

90005504 <_ZN15Screen1ViewBase12clickButton9Ev>:
    virtual void clickButton9()
    {
        // Override and implement this function in Screen1
    }
90005504:	4770      	bx	lr
90005506:	bf00      	nop

90005508 <_ZN15Screen1ViewBase28preventActivationAlarmSystemEv>:
    virtual void preventActivationAlarmSystem()
    {
        // Override and implement this function in Screen1
    }
90005508:	4770      	bx	lr
9000550a:	bf00      	nop

9000550c <_ZN15Screen1ViewBaseD1Ev>:
}

Screen1ViewBase::~Screen1ViewBase()
{

}
9000550c:	4770      	bx	lr
9000550e:	bf00      	nop

90005510 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{

}
90005510:	4770      	bx	lr
90005512:	bf00      	nop

90005514 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
90005514:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
90005518:	b133      	cbz	r3, 90005528 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>
9000551a:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
9000551c:	f100 0374 	add.w	r3, r0, #116	; 0x74
90005520:	65c2      	str	r2, [r0, #92]	; 0x5c
90005522:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
90005524:	6603      	str	r3, [r0, #96]	; 0x60
        T::handlePressedUpdated();
    }
90005526:	4770      	bx	lr
90005528:	6e82      	ldr	r2, [r0, #104]	; 0x68
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
9000552a:	f100 0370 	add.w	r3, r0, #112	; 0x70
9000552e:	65c2      	str	r2, [r0, #92]	; 0x5c
90005530:	681b      	ldr	r3, [r3, #0]
90005532:	6603      	str	r3, [r0, #96]	; 0x60
    }
90005534:	4770      	bx	lr
90005536:	bf00      	nop

90005538 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv>:
        borderBox.setColor(T::getPressed() ? down : up);
90005538:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000553c:	b133      	cbz	r3, 9000554c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE20handlePressedUpdatedEv+0x14>
9000553e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90005540:	f100 0374 	add.w	r3, r0, #116	; 0x74
90005544:	65c2      	str	r2, [r0, #92]	; 0x5c
90005546:	681b      	ldr	r3, [r3, #0]
90005548:	6603      	str	r3, [r0, #96]	; 0x60
    }
9000554a:	4770      	bx	lr
9000554c:	6e82      	ldr	r2, [r0, #104]	; 0x68
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
9000554e:	f100 0370 	add.w	r3, r0, #112	; 0x70
90005552:	65c2      	str	r2, [r0, #92]	; 0x5c
90005554:	681b      	ldr	r3, [r3, #0]
90005556:	6603      	str	r3, [r0, #96]	; 0x60
    }
90005558:	4770      	bx	lr
9000555a:	bf00      	nop

9000555c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
9000555c:	4770      	bx	lr
9000555e:	bf00      	nop

90005560 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED1Ev>:
class BoxWithBorderButtonStyle : public T
90005560:	4770      	bx	lr
90005562:	bf00      	nop

90005564 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
90005564:	4770      	bx	lr
90005566:	bf00      	nop

90005568 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
90005568:	4770      	bx	lr
9000556a:	bf00      	nop

9000556c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
9000556c:	b410      	push	{r4}
        (pobject->*pmemfun)(t1);
9000556e:	68c2      	ldr	r2, [r0, #12]
    virtual void execute(T1 t1)
90005570:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
90005572:	6844      	ldr	r4, [r0, #4]
90005574:	f012 0f01 	tst.w	r2, #1
90005578:	eb04 0062 	add.w	r0, r4, r2, asr #1
9000557c:	d103      	bne.n	90005586 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x1a>
9000557e:	689b      	ldr	r3, [r3, #8]
    }
90005580:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005584:	4718      	bx	r3
90005586:	ea4f 0c62 	mov.w	ip, r2, asr #1
9000558a:	689b      	ldr	r3, [r3, #8]
9000558c:	f854 200c 	ldr.w	r2, [r4, ip]
    }
90005590:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)(t1);
90005594:	58d3      	ldr	r3, [r2, r3]
90005596:	4718      	bx	r3

90005598 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
        return (pobject != 0) && (pmemfun != 0);
90005598:	6843      	ldr	r3, [r0, #4]
9000559a:	b13b      	cbz	r3, 900055ac <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
9000559c:	6883      	ldr	r3, [r0, #8]
9000559e:	b10b      	cbz	r3, 900055a4 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0xc>
900055a0:	2001      	movs	r0, #1
    }
900055a2:	4770      	bx	lr
        return (pobject != 0) && (pmemfun != 0);
900055a4:	68c0      	ldr	r0, [r0, #12]
900055a6:	f000 0001 	and.w	r0, r0, #1
900055aa:	4770      	bx	lr
900055ac:	4618      	mov	r0, r3
900055ae:	4770      	bx	lr

900055b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
900055b0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
900055b4:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
900055b8:	4770      	bx	lr
900055ba:	bf00      	nop

900055bc <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
900055bc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
900055c0:	f880 305a 	strb.w	r3, [r0, #90]	; 0x5a
900055c4:	4770      	bx	lr
900055c6:	bf00      	nop

900055c8 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
900055c8:	b510      	push	{r4, lr}
900055ca:	4604      	mov	r4, r0
900055cc:	214c      	movs	r1, #76	; 0x4c
900055ce:	f021 fc90 	bl	90026ef2 <_ZdlPvj>
900055d2:	4620      	mov	r0, r4
900055d4:	bd10      	pop	{r4, pc}
900055d6:	bf00      	nop

900055d8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18TouchButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
900055d8:	b510      	push	{r4, lr}
900055da:	4604      	mov	r4, r0
900055dc:	2178      	movs	r1, #120	; 0x78
900055de:	f021 fc88 	bl	90026ef2 <_ZdlPvj>
900055e2:	4620      	mov	r0, r4
900055e4:	bd10      	pop	{r4, pc}
900055e6:	bf00      	nop

900055e8 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
900055e8:	b510      	push	{r4, lr}
900055ea:	4604      	mov	r4, r0
900055ec:	2178      	movs	r1, #120	; 0x78
900055ee:	f021 fc80 	bl	90026ef2 <_ZdlPvj>
900055f2:	4620      	mov	r0, r4
900055f4:	bd10      	pop	{r4, pc}
900055f6:	bf00      	nop

900055f8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
900055f8:	b510      	push	{r4, lr}
900055fa:	4604      	mov	r4, r0
900055fc:	2110      	movs	r1, #16
900055fe:	f021 fc78 	bl	90026ef2 <_ZdlPvj>
90005602:	4620      	mov	r0, r4
90005604:	bd10      	pop	{r4, pc}
90005606:	bf00      	nop

90005608 <_ZN15Screen1ViewBaseD0Ev>:
Screen1ViewBase::~Screen1ViewBase()
90005608:	b510      	push	{r4, lr}
9000560a:	4604      	mov	r4, r0
}
9000560c:	f640 2168 	movw	r1, #2664	; 0xa68
90005610:	f021 fc6f 	bl	90026ef2 <_ZdlPvj>
90005614:	4620      	mov	r0, r4
90005616:	bd10      	pop	{r4, pc}

90005618 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005618:	4b1b      	ldr	r3, [pc, #108]	; (90005688 <_ZN8touchgfx8TextArea12setBaselineYEs+0x70>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000561a:	6802      	ldr	r2, [r0, #0]
9000561c:	681b      	ldr	r3, [r3, #0]
    virtual void setBaselineY(int16_t baselineY)
9000561e:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005620:	6b55      	ldr	r5, [r2, #52]	; 0x34
90005622:	b323      	cbz	r3, 9000566e <_ZN8touchgfx8TextArea12setBaselineYEs+0x56>
90005624:	b28e      	uxth	r6, r1
        return typedTextId < numberOfTypedTexts;
90005626:	4919      	ldr	r1, [pc, #100]	; (9000568c <_ZN8touchgfx8TextArea12setBaselineYEs+0x74>)
90005628:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9000562a:	4604      	mov	r4, r0
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000562c:	8809      	ldrh	r1, [r1, #0]
9000562e:	4291      	cmp	r1, r2
90005630:	d923      	bls.n	9000567a <_ZN8touchgfx8TextArea12setBaselineYEs+0x62>
        return fonts[typedTexts[typedTextId].fontIdx];
90005632:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90005636:	4b16      	ldr	r3, [pc, #88]	; (90005690 <_ZN8touchgfx8TextArea12setBaselineYEs+0x78>)
90005638:	681b      	ldr	r3, [r3, #0]
9000563a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9000563e:	4a15      	ldr	r2, [pc, #84]	; (90005694 <_ZN8touchgfx8TextArea12setBaselineYEs+0x7c>)
90005640:	6803      	ldr	r3, [r0, #0]
90005642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90005644:	4293      	cmp	r3, r2
90005646:	d107      	bne.n	90005658 <_ZN8touchgfx8TextArea12setBaselineYEs+0x40>
        return baselineHeight;
90005648:	88c0      	ldrh	r0, [r0, #6]
9000564a:	4b13      	ldr	r3, [pc, #76]	; (90005698 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
9000564c:	1a31      	subs	r1, r6, r0
9000564e:	429d      	cmp	r5, r3
90005650:	b209      	sxth	r1, r1
90005652:	d107      	bne.n	90005664 <_ZN8touchgfx8TextArea12setBaselineYEs+0x4c>
        rect.y = y;
90005654:	80e1      	strh	r1, [r4, #6]
    }
90005656:	bd70      	pop	{r4, r5, r6, pc}
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005658:	4798      	blx	r3
9000565a:	4b0f      	ldr	r3, [pc, #60]	; (90005698 <_ZN8touchgfx8TextArea12setBaselineYEs+0x80>)
9000565c:	1a31      	subs	r1, r6, r0
9000565e:	429d      	cmp	r5, r3
90005660:	b209      	sxth	r1, r1
90005662:	d0f7      	beq.n	90005654 <_ZN8touchgfx8TextArea12setBaselineYEs+0x3c>
90005664:	4620      	mov	r0, r4
90005666:	462b      	mov	r3, r5
    }
90005668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
9000566c:	4718      	bx	r3
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000566e:	4b0b      	ldr	r3, [pc, #44]	; (9000569c <_ZN8touchgfx8TextArea12setBaselineYEs+0x84>)
90005670:	216c      	movs	r1, #108	; 0x6c
90005672:	4a0b      	ldr	r2, [pc, #44]	; (900056a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005674:	480b      	ldr	r0, [pc, #44]	; (900056a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005676:	f021 fcd9 	bl	9002702c <__assert_func>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
9000567a:	4b0b      	ldr	r3, [pc, #44]	; (900056a8 <_ZN8touchgfx8TextArea12setBaselineYEs+0x90>)
9000567c:	216d      	movs	r1, #109	; 0x6d
9000567e:	4a08      	ldr	r2, [pc, #32]	; (900056a0 <_ZN8touchgfx8TextArea12setBaselineYEs+0x88>)
90005680:	4808      	ldr	r0, [pc, #32]	; (900056a4 <_ZN8touchgfx8TextArea12setBaselineYEs+0x8c>)
90005682:	f021 fcd3 	bl	9002702c <__assert_func>
90005686:	bf00      	nop
90005688:	24026fdc 	.word	0x24026fdc
9000568c:	24026fe0 	.word	0x24026fe0
90005690:	24026fe4 	.word	0x24026fe4
90005694:	90004fb5 	.word	0x90004fb5
90005698:	900025ad 	.word	0x900025ad
9000569c:	9002a3f8 	.word	0x9002a3f8
900056a0:	9002a43c 	.word	0x9002a43c
900056a4:	9002a478 	.word	0x9002a478
900056a8:	9002a4c0 	.word	0x9002a4c0

900056ac <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen1ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &buttonActivate)
900056ac:	f200 43fc 	addw	r3, r0, #1276	; 0x4fc
900056b0:	4299      	cmp	r1, r3
{
900056b2:	b570      	push	{r4, r5, r6, lr}
900056b4:	4604      	mov	r4, r0
900056b6:	460d      	mov	r5, r1
    if (&src == &buttonActivate)
900056b8:	d079      	beq.n	900057ae <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x102>
        //activateAlarmSystem
        //When buttonActivate clicked call virtual function
        //Call activateAlarmSystem
        activateAlarmSystem();
    }
    if (&src == &button1)
900056ba:	f104 03c4 	add.w	r3, r4, #196	; 0xc4
900056be:	429d      	cmp	r5, r3
900056c0:	d06d      	beq.n	9000579e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xf2>
        //clickButton1
        //When button1 clicked call virtual function
        //Call clickButton1
        clickButton1();
    }
    if (&src == &button2)
900056c2:	f504 739e 	add.w	r3, r4, #316	; 0x13c
900056c6:	429d      	cmp	r5, r3
900056c8:	d061      	beq.n	9000578e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xe2>
        //clickButton2
        //When button2 clicked call virtual function
        //Call clickButton2
        clickButton2();
    }
    if (&src == &button3)
900056ca:	f504 73da 	add.w	r3, r4, #436	; 0x1b4
900056ce:	429d      	cmp	r5, r3
900056d0:	d055      	beq.n	9000577e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xd2>
        //clickButton3
        //When button3 clicked call virtual function
        //Call clickButton3
        clickButton3();
    }
    if (&src == &button4)
900056d2:	f504 730b 	add.w	r3, r4, #556	; 0x22c
900056d6:	429d      	cmp	r5, r3
900056d8:	d049      	beq.n	9000576e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xc2>
        //clickButton4
        //When button4 clicked call virtual function
        //Call clickButton4
        clickButton4();
    }
    if (&src == &button5)
900056da:	f504 7329 	add.w	r3, r4, #676	; 0x2a4
900056de:	429d      	cmp	r5, r3
900056e0:	d03d      	beq.n	9000575e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xb2>
        //clickButton5
        //When button5 clicked call virtual function
        //Call clickButton5
        clickButton5();
    }
    if (&src == &button6)
900056e2:	f504 7347 	add.w	r3, r4, #796	; 0x31c
900056e6:	429d      	cmp	r5, r3
900056e8:	d031      	beq.n	9000574e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xa2>
        //clickButton6
        //When button6 clicked call virtual function
        //Call clickButton6
        clickButton6();
    }
    if (&src == &button7)
900056ea:	f504 7365 	add.w	r3, r4, #916	; 0x394
900056ee:	429d      	cmp	r5, r3
900056f0:	d025      	beq.n	9000573e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x92>
        //clickButton7
        //When button7 clicked call virtual function
        //Call clickButton7
        clickButton7();
    }
    if (&src == &button8)
900056f2:	f204 430c 	addw	r3, r4, #1036	; 0x40c
900056f6:	429d      	cmp	r5, r3
900056f8:	d019      	beq.n	9000572e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x82>
        //clickButton8
        //When button8 clicked call virtual function
        //Call clickButton8
        clickButton8();
    }
    if (&src == &button9)
900056fa:	f204 4384 	addw	r3, r4, #1156	; 0x484
900056fe:	429d      	cmp	r5, r3
90005700:	d00d      	beq.n	9000571e <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x72>
        //clickButton9
        //When button9 clicked call virtual function
        //Call clickButton9
        clickButton9();
    }
    if (&src == &buttonPreventActivation)
90005702:	f504 6318 	add.w	r3, r4, #2432	; 0x980
90005706:	429d      	cmp	r5, r3
90005708:	d000      	beq.n	9000570c <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x60>
        //preventActivationAlarmSystem
        //When buttonPreventActivation clicked call virtual function
        //Call preventActivationAlarmSystem
        preventActivationAlarmSystem();
    }
}
9000570a:	bd70      	pop	{r4, r5, r6, pc}
        preventActivationAlarmSystem();
9000570c:	6823      	ldr	r3, [r4, #0]
9000570e:	4a2b      	ldr	r2, [pc, #172]	; (900057bc <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x110>)
90005710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90005712:	4293      	cmp	r3, r2
90005714:	d0f9      	beq.n	9000570a <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x5e>
90005716:	4620      	mov	r0, r4
}
90005718:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        preventActivationAlarmSystem();
9000571c:	4718      	bx	r3
        clickButton9();
9000571e:	6823      	ldr	r3, [r4, #0]
90005720:	4a27      	ldr	r2, [pc, #156]	; (900057c0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x114>)
90005722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90005724:	4293      	cmp	r3, r2
90005726:	d0ec      	beq.n	90005702 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
90005728:	4620      	mov	r0, r4
9000572a:	4798      	blx	r3
9000572c:	e7e9      	b.n	90005702 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x56>
        clickButton8();
9000572e:	6823      	ldr	r3, [r4, #0]
90005730:	4a24      	ldr	r2, [pc, #144]	; (900057c4 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x118>)
90005732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90005734:	4293      	cmp	r3, r2
90005736:	d0e0      	beq.n	900056fa <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x4e>
90005738:	4620      	mov	r0, r4
9000573a:	4798      	blx	r3
9000573c:	e7dd      	b.n	900056fa <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x4e>
        clickButton7();
9000573e:	6823      	ldr	r3, [r4, #0]
90005740:	4a21      	ldr	r2, [pc, #132]	; (900057c8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x11c>)
90005742:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90005744:	4293      	cmp	r3, r2
90005746:	d0d4      	beq.n	900056f2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x46>
90005748:	4620      	mov	r0, r4
9000574a:	4798      	blx	r3
9000574c:	e7d1      	b.n	900056f2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x46>
        clickButton6();
9000574e:	6823      	ldr	r3, [r4, #0]
90005750:	4a1e      	ldr	r2, [pc, #120]	; (900057cc <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x120>)
90005752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90005754:	4293      	cmp	r3, r2
90005756:	d0c8      	beq.n	900056ea <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
90005758:	4620      	mov	r0, r4
9000575a:	4798      	blx	r3
9000575c:	e7c5      	b.n	900056ea <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x3e>
        clickButton5();
9000575e:	6823      	ldr	r3, [r4, #0]
90005760:	4a1b      	ldr	r2, [pc, #108]	; (900057d0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x124>)
90005762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90005764:	4293      	cmp	r3, r2
90005766:	d0bc      	beq.n	900056e2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x36>
90005768:	4620      	mov	r0, r4
9000576a:	4798      	blx	r3
9000576c:	e7b9      	b.n	900056e2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x36>
        clickButton4();
9000576e:	6823      	ldr	r3, [r4, #0]
90005770:	4a18      	ldr	r2, [pc, #96]	; (900057d4 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x128>)
90005772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90005774:	4293      	cmp	r3, r2
90005776:	d0b0      	beq.n	900056da <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
90005778:	4620      	mov	r0, r4
9000577a:	4798      	blx	r3
9000577c:	e7ad      	b.n	900056da <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x2e>
        clickButton3();
9000577e:	6823      	ldr	r3, [r4, #0]
90005780:	4a15      	ldr	r2, [pc, #84]	; (900057d8 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x12c>)
90005782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90005784:	4293      	cmp	r3, r2
90005786:	d0a4      	beq.n	900056d2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x26>
90005788:	4620      	mov	r0, r4
9000578a:	4798      	blx	r3
9000578c:	e7a1      	b.n	900056d2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x26>
        clickButton2();
9000578e:	6823      	ldr	r3, [r4, #0]
90005790:	4a12      	ldr	r2, [pc, #72]	; (900057dc <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x130>)
90005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90005794:	4293      	cmp	r3, r2
90005796:	d098      	beq.n	900056ca <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x1e>
90005798:	4620      	mov	r0, r4
9000579a:	4798      	blx	r3
9000579c:	e795      	b.n	900056ca <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x1e>
        clickButton1();
9000579e:	6823      	ldr	r3, [r4, #0]
900057a0:	4a0f      	ldr	r2, [pc, #60]	; (900057e0 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x134>)
900057a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900057a4:	4293      	cmp	r3, r2
900057a6:	d08c      	beq.n	900056c2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x16>
900057a8:	4620      	mov	r0, r4
900057aa:	4798      	blx	r3
900057ac:	e789      	b.n	900056c2 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x16>
        activateAlarmSystem();
900057ae:	6803      	ldr	r3, [r0, #0]
900057b0:	4a0c      	ldr	r2, [pc, #48]	; (900057e4 <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x138>)
900057b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900057b4:	4293      	cmp	r3, r2
900057b6:	d080      	beq.n	900056ba <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xe>
900057b8:	4798      	blx	r3
900057ba:	e77e      	b.n	900056ba <_ZN15Screen1ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0xe>
900057bc:	90005509 	.word	0x90005509
900057c0:	90005505 	.word	0x90005505
900057c4:	90005501 	.word	0x90005501
900057c8:	900054fd 	.word	0x900054fd
900057cc:	900054f9 	.word	0x900054f9
900057d0:	900054f5 	.word	0x900054f5
900057d4:	900054f1 	.word	0x900054f1
900057d8:	900054ed 	.word	0x900054ed
900057dc:	900054e9 	.word	0x900054e9
900057e0:	900054e5 	.word	0x900054e5
900057e4:	900054e1 	.word	0x900054e1

900057e8 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
     *
     * @see setAction
     */
    virtual void executeAction()
    {
        if (action && action->isValid())
900057e8:	6b03      	ldr	r3, [r0, #48]	; 0x30
900057ea:	b30b      	cbz	r3, 90005830 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x48>
900057ec:	681a      	ldr	r2, [r3, #0]
    virtual void executeAction()
900057ee:	b570      	push	{r4, r5, r6, lr}
        if (action && action->isValid())
900057f0:	68d1      	ldr	r1, [r2, #12]
900057f2:	4604      	mov	r4, r0
900057f4:	481a      	ldr	r0, [pc, #104]	; (90005860 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x78>)
900057f6:	4281      	cmp	r1, r0
900057f8:	d11b      	bne.n	90005832 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x4a>
        return (pobject != 0) && (pmemfun != 0);
900057fa:	6858      	ldr	r0, [r3, #4]
900057fc:	b180      	cbz	r0, 90005820 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
900057fe:	6899      	ldr	r1, [r3, #8]
90005800:	b1f1      	cbz	r1, 90005840 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x58>
        {
            action->execute(*this);
90005802:	6892      	ldr	r2, [r2, #8]
90005804:	4917      	ldr	r1, [pc, #92]	; (90005864 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
90005806:	428a      	cmp	r2, r1
90005808:	d124      	bne.n	90005854 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
9000580a:	68da      	ldr	r2, [r3, #12]
9000580c:	6858      	ldr	r0, [r3, #4]
9000580e:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005812:	07d2      	lsls	r2, r2, #31
90005814:	d405      	bmi.n	90005822 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3a>
90005816:	4621      	mov	r1, r4
90005818:	689b      	ldr	r3, [r3, #8]
        }
    }
9000581a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9000581e:	4718      	bx	r3
90005820:	bd70      	pop	{r4, r5, r6, pc}
90005822:	6899      	ldr	r1, [r3, #8]
90005824:	6803      	ldr	r3, [r0, #0]
90005826:	585b      	ldr	r3, [r3, r1]
90005828:	4621      	mov	r1, r4
9000582a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9000582e:	4718      	bx	r3
90005830:	4770      	bx	lr
        if (action && action->isValid())
90005832:	4618      	mov	r0, r3
90005834:	4788      	blx	r1
90005836:	2800      	cmp	r0, #0
90005838:	d0f2      	beq.n	90005820 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
            action->execute(*this);
9000583a:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000583c:	681a      	ldr	r2, [r3, #0]
9000583e:	e7e0      	b.n	90005802 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1a>
        return (pobject != 0) && (pmemfun != 0);
90005840:	68dd      	ldr	r5, [r3, #12]
90005842:	07ee      	lsls	r6, r5, #31
90005844:	d5ec      	bpl.n	90005820 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x38>
90005846:	6892      	ldr	r2, [r2, #8]
90005848:	4e06      	ldr	r6, [pc, #24]	; (90005864 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x7c>)
9000584a:	42b2      	cmp	r2, r6
9000584c:	d102      	bne.n	90005854 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x6c>
        (pobject->*pmemfun)(t1);
9000584e:	eb00 0065 	add.w	r0, r0, r5, asr #1
90005852:	e7e7      	b.n	90005824 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x3c>
90005854:	4621      	mov	r1, r4
90005856:	4618      	mov	r0, r3
    }
90005858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            action->execute(*this);
9000585c:	4710      	bx	r2
9000585e:	bf00      	nop
90005860:	90005599 	.word	0x90005599
90005864:	9000556d 	.word	0x9000556d

90005868 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
        setX(x);
90005868:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
9000586a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000586e:	4f25      	ldr	r7, [pc, #148]	; (90005904 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x9c>)
90005870:	4605      	mov	r5, r0
        setX(x);
90005872:	6b1e      	ldr	r6, [r3, #48]	; 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
90005874:	4690      	mov	r8, r2
90005876:	42be      	cmp	r6, r7
90005878:	d125      	bne.n	900058c6 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x5e>
        setBaselineY(baselineY);
9000587a:	6e5c      	ldr	r4, [r3, #100]	; 0x64
        rect.x = x;
9000587c:	80a9      	strh	r1, [r5, #4]
9000587e:	4922      	ldr	r1, [pc, #136]	; (90005908 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
90005880:	428c      	cmp	r4, r1
90005882:	d126      	bne.n	900058d2 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x6a>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90005884:	4921      	ldr	r1, [pc, #132]	; (9000590c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa4>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
90005886:	fa1f f888 	uxth.w	r8, r8
9000588a:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000588c:	680b      	ldr	r3, [r1, #0]
9000588e:	2b00      	cmp	r3, #0
90005890:	d032      	beq.n	900058f8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x90>
        return typedTextId < numberOfTypedTexts;
90005892:	491f      	ldr	r1, [pc, #124]	; (90005910 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa8>)
90005894:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90005896:	8809      	ldrh	r1, [r1, #0]
90005898:	4291      	cmp	r1, r2
9000589a:	d927      	bls.n	900058ec <_ZN8touchgfx8TextArea13setXBaselineYEss+0x84>
        return fonts[typedTexts[typedTextId].fontIdx];
9000589c:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
900058a0:	4b1c      	ldr	r3, [pc, #112]	; (90005914 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xac>)
900058a2:	681b      	ldr	r3, [r3, #0]
900058a4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
900058a8:	4a1b      	ldr	r2, [pc, #108]	; (90005918 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb0>)
900058aa:	6803      	ldr	r3, [r0, #0]
900058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900058ae:	4293      	cmp	r3, r2
900058b0:	d11a      	bne.n	900058e8 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x80>
900058b2:	88c0      	ldrh	r0, [r0, #6]
900058b4:	4b19      	ldr	r3, [pc, #100]	; (9000591c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb4>)
900058b6:	eba8 0200 	sub.w	r2, r8, r0
900058ba:	429e      	cmp	r6, r3
900058bc:	b211      	sxth	r1, r2
900058be:	d10e      	bne.n	900058de <_ZN8touchgfx8TextArea13setXBaselineYEss+0x76>
        rect.y = y;
900058c0:	80e9      	strh	r1, [r5, #6]
    }
900058c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        setX(x);
900058c6:	47b0      	blx	r6
        setBaselineY(baselineY);
900058c8:	682b      	ldr	r3, [r5, #0]
900058ca:	490f      	ldr	r1, [pc, #60]	; (90005908 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xa0>)
900058cc:	6e5c      	ldr	r4, [r3, #100]	; 0x64
900058ce:	428c      	cmp	r4, r1
900058d0:	d0d8      	beq.n	90005884 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x1c>
900058d2:	4641      	mov	r1, r8
900058d4:	4628      	mov	r0, r5
900058d6:	4623      	mov	r3, r4
    }
900058d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setBaselineY(baselineY);
900058dc:	4718      	bx	r3
        setY(baselineY - getTypedText().getFont()->getBaseline());
900058de:	4628      	mov	r0, r5
900058e0:	4633      	mov	r3, r6
    }
900058e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
900058e6:	4718      	bx	r3
900058e8:	4798      	blx	r3
900058ea:	e7e3      	b.n	900058b4 <_ZN8touchgfx8TextArea13setXBaselineYEss+0x4c>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
900058ec:	4b0c      	ldr	r3, [pc, #48]	; (90005920 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xb8>)
900058ee:	216d      	movs	r1, #109	; 0x6d
900058f0:	4a0c      	ldr	r2, [pc, #48]	; (90005924 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900058f2:	480d      	ldr	r0, [pc, #52]	; (90005928 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
900058f4:	f021 fb9a 	bl	9002702c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
900058f8:	4b0c      	ldr	r3, [pc, #48]	; (9000592c <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc4>)
900058fa:	216c      	movs	r1, #108	; 0x6c
900058fc:	4a09      	ldr	r2, [pc, #36]	; (90005924 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xbc>)
900058fe:	480a      	ldr	r0, [pc, #40]	; (90005928 <_ZN8touchgfx8TextArea13setXBaselineYEss+0xc0>)
90005900:	f021 fb94 	bl	9002702c <__assert_func>
90005904:	900025a9 	.word	0x900025a9
90005908:	90005619 	.word	0x90005619
9000590c:	24026fdc 	.word	0x24026fdc
90005910:	24026fe0 	.word	0x24026fe0
90005914:	24026fe4 	.word	0x24026fe4
90005918:	90004fb5 	.word	0x90004fb5
9000591c:	900025ad 	.word	0x900025ad
90005920:	9002a4c0 	.word	0x9002a4c0
90005924:	9002a43c 	.word	0x9002a43c
90005928:	9002a478 	.word	0x9002a478
9000592c:	9002a3f8 	.word	0x9002a3f8

90005930 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
90005930:	b570      	push	{r4, r5, r6, lr}
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
90005932:	790d      	ldrb	r5, [r1, #4]
90005934:	4604      	mov	r4, r0
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
90005936:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000593a:	1e2a      	subs	r2, r5, #0
9000593c:	bf18      	it	ne
9000593e:	2201      	movne	r2, #1
90005940:	429a      	cmp	r2, r3
90005942:	d024      	beq.n	9000598e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5e>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (newPressedValue)
90005944:	bb15      	cbnz	r5, 9000598c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
        {
            executeAction();
90005946:	6823      	ldr	r3, [r4, #0]
90005948:	4a25      	ldr	r2, [pc, #148]	; (900059e0 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb0>)
9000594a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
9000594e:	4293      	cmp	r3, r2
90005950:	d12b      	bne.n	900059aa <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x7a>
        if (action && action->isValid())
90005952:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005954:	b1d3      	cbz	r3, 9000598c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
90005956:	681a      	ldr	r2, [r3, #0]
90005958:	4822      	ldr	r0, [pc, #136]	; (900059e4 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb4>)
9000595a:	68d1      	ldr	r1, [r2, #12]
9000595c:	4281      	cmp	r1, r0
9000595e:	d112      	bne.n	90005986 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x56>
        return (pobject != 0) && (pmemfun != 0);
90005960:	6858      	ldr	r0, [r3, #4]
90005962:	b198      	cbz	r0, 9000598c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
90005964:	6899      	ldr	r1, [r3, #8]
90005966:	b339      	cbz	r1, 900059b8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x88>
            action->execute(*this);
90005968:	6892      	ldr	r2, [r2, #8]
9000596a:	491f      	ldr	r1, [pc, #124]	; (900059e8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb8>)
9000596c:	428a      	cmp	r2, r1
9000596e:	d131      	bne.n	900059d4 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa4>
        (pobject->*pmemfun)(t1);
90005970:	68da      	ldr	r2, [r3, #12]
90005972:	6858      	ldr	r0, [r3, #4]
90005974:	eb00 0062 	add.w	r0, r0, r2, asr #1
90005978:	07d2      	lsls	r2, r2, #31
9000597a:	d429      	bmi.n	900059d0 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
9000597c:	689b      	ldr	r3, [r3, #8]
9000597e:	4621      	mov	r1, r4
        }
    }
90005980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005984:	4718      	bx	r3
        if (action && action->isValid())
90005986:	4618      	mov	r0, r3
90005988:	4788      	blx	r1
9000598a:	b990      	cbnz	r0, 900059b2 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x82>
9000598c:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
9000598e:	fab5 f385 	clz	r3, r5
        handlePressedUpdated();
90005992:	6802      	ldr	r2, [r0, #0]
90005994:	095b      	lsrs	r3, r3, #5
90005996:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
9000599a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
9000599e:	4790      	blx	r2
            invalidate();
900059a0:	6823      	ldr	r3, [r4, #0]
900059a2:	4620      	mov	r0, r4
900059a4:	695b      	ldr	r3, [r3, #20]
900059a6:	4798      	blx	r3
900059a8:	e7cc      	b.n	90005944 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x14>
            executeAction();
900059aa:	4620      	mov	r0, r4
    }
900059ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
900059b0:	4718      	bx	r3
            action->execute(*this);
900059b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
900059b4:	681a      	ldr	r2, [r3, #0]
900059b6:	e7d7      	b.n	90005968 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x38>
        return (pobject != 0) && (pmemfun != 0);
900059b8:	68dd      	ldr	r5, [r3, #12]
900059ba:	07ee      	lsls	r6, r5, #31
900059bc:	d5e6      	bpl.n	9000598c <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x5c>
900059be:	6892      	ldr	r2, [r2, #8]
900059c0:	4e09      	ldr	r6, [pc, #36]	; (900059e8 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb8>)
900059c2:	42b2      	cmp	r2, r6
900059c4:	d106      	bne.n	900059d4 <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa4>
        (pobject->*pmemfun)(t1);
900059c6:	eb00 0065 	add.w	r0, r0, r5, asr #1
900059ca:	6803      	ldr	r3, [r0, #0]
900059cc:	585b      	ldr	r3, [r3, r1]
900059ce:	e7d6      	b.n	9000597e <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4e>
900059d0:	6899      	ldr	r1, [r3, #8]
900059d2:	e7fa      	b.n	900059ca <_ZN8touchgfx18TouchButtonTrigger16handleClickEventERKNS_10ClickEventE+0x9a>
900059d4:	4621      	mov	r1, r4
900059d6:	4618      	mov	r0, r3
    }
900059d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900059dc:	4710      	bx	r2
900059de:	bf00      	nop
900059e0:	900057e9 	.word	0x900057e9
900059e4:	90005599 	.word	0x90005599
900059e8:	9000556d 	.word	0x9000556d

900059ec <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
900059ec:	790b      	ldrb	r3, [r1, #4]
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
900059ee:	1e1a      	subs	r2, r3, #0
    virtual void handleClickEvent(const ClickEvent& event)
900059f0:	b570      	push	{r4, r5, r6, lr}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
900059f2:	bf18      	it	ne
900059f4:	2201      	movne	r2, #1
        return pressed;
900059f6:	f890 602c 	ldrb.w	r6, [r0, #44]	; 0x2c
    virtual void handleClickEvent(const ClickEvent& event)
900059fa:	460d      	mov	r5, r1
900059fc:	4604      	mov	r4, r0
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
900059fe:	42b2      	cmp	r2, r6
90005a00:	d004      	beq.n	90005a0c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x20>
        {
            setPressed(newPressedValue);
            invalidate();
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
90005a02:	b116      	cbz	r6, 90005a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005a04:	792b      	ldrb	r3, [r5, #4]
90005a06:	2b01      	cmp	r3, #1
90005a08:	d00e      	beq.n	90005a28 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3c>
        {
            executeAction();
        }
    }
90005a0a:	bd70      	pop	{r4, r5, r6, pc}
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
90005a0c:	fab3 f383 	clz	r3, r3
90005a10:	095b      	lsrs	r3, r3, #5
90005a12:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
        handlePressedUpdated();
90005a16:	6803      	ldr	r3, [r0, #0]
90005a18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
90005a1c:	4798      	blx	r3
            invalidate();
90005a1e:	6823      	ldr	r3, [r4, #0]
90005a20:	4620      	mov	r0, r4
90005a22:	695b      	ldr	r3, [r3, #20]
90005a24:	4798      	blx	r3
90005a26:	e7ec      	b.n	90005a02 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
            executeAction();
90005a28:	6823      	ldr	r3, [r4, #0]
90005a2a:	4a20      	ldr	r2, [pc, #128]	; (90005aac <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc0>)
90005a2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
90005a30:	4293      	cmp	r3, r2
90005a32:	d127      	bne.n	90005a84 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x98>
        if (action && action->isValid())
90005a34:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005a36:	2b00      	cmp	r3, #0
90005a38:	d0e7      	beq.n	90005a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005a3a:	6819      	ldr	r1, [r3, #0]
90005a3c:	481c      	ldr	r0, [pc, #112]	; (90005ab0 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc4>)
90005a3e:	68ca      	ldr	r2, [r1, #12]
90005a40:	4282      	cmp	r2, r0
90005a42:	d123      	bne.n	90005a8c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xa0>
        return (pobject != 0) && (pmemfun != 0);
90005a44:	685a      	ldr	r2, [r3, #4]
90005a46:	2a00      	cmp	r2, #0
90005a48:	d0df      	beq.n	90005a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005a4a:	689d      	ldr	r5, [r3, #8]
90005a4c:	b175      	cbz	r5, 90005a6c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x80>
            action->execute(*this);
90005a4e:	688e      	ldr	r6, [r1, #8]
90005a50:	4a18      	ldr	r2, [pc, #96]	; (90005ab4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005a52:	4296      	cmp	r6, r2
90005a54:	d123      	bne.n	90005a9e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005a56:	68d9      	ldr	r1, [r3, #12]
90005a58:	685a      	ldr	r2, [r3, #4]
90005a5a:	eb02 0061 	add.w	r0, r2, r1, asr #1
90005a5e:	07ca      	lsls	r2, r1, #31
90005a60:	d41b      	bmi.n	90005a9a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xae>
90005a62:	689b      	ldr	r3, [r3, #8]
90005a64:	4621      	mov	r1, r4
    }
90005a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005a6a:	4718      	bx	r3
        return (pobject != 0) && (pmemfun != 0);
90005a6c:	68d8      	ldr	r0, [r3, #12]
90005a6e:	07c6      	lsls	r6, r0, #31
90005a70:	d5cb      	bpl.n	90005a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
90005a72:	688e      	ldr	r6, [r1, #8]
90005a74:	490f      	ldr	r1, [pc, #60]	; (90005ab4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xc8>)
90005a76:	428e      	cmp	r6, r1
90005a78:	d111      	bne.n	90005a9e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb2>
        (pobject->*pmemfun)(t1);
90005a7a:	eb02 0060 	add.w	r0, r2, r0, asr #1
90005a7e:	6803      	ldr	r3, [r0, #0]
90005a80:	595b      	ldr	r3, [r3, r5]
90005a82:	e7ef      	b.n	90005a64 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x78>
            executeAction();
90005a84:	4620      	mov	r0, r4
    }
90005a86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
90005a8a:	4718      	bx	r3
        if (action && action->isValid())
90005a8c:	4618      	mov	r0, r3
90005a8e:	4790      	blx	r2
90005a90:	2800      	cmp	r0, #0
90005a92:	d0ba      	beq.n	90005a0a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x1e>
            action->execute(*this);
90005a94:	6b23      	ldr	r3, [r4, #48]	; 0x30
90005a96:	6819      	ldr	r1, [r3, #0]
90005a98:	e7d9      	b.n	90005a4e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x62>
90005a9a:	689d      	ldr	r5, [r3, #8]
90005a9c:	e7ef      	b.n	90005a7e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x92>
90005a9e:	4621      	mov	r1, r4
90005aa0:	4618      	mov	r0, r3
90005aa2:	4633      	mov	r3, r6
    }
90005aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90005aa8:	4718      	bx	r3
90005aaa:	bf00      	nop
90005aac:	900057e9 	.word	0x900057e9
90005ab0:	90005599 	.word	0x90005599
90005ab4:	9000556d 	.word	0x9000556d

90005ab8 <_ZN15Screen1ViewBaseC1Ev>:
Screen1ViewBase::Screen1ViewBase() :
90005ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90005abc:	ed2d 8b0a 	vpush	{d8-d12}
90005ac0:	b095      	sub	sp, #84	; 0x54
90005ac2:	4604      	mov	r4, r0
        : presenter(0)
90005ac4:	f013 fef0 	bl	900198a8 <_ZN8touchgfx6ScreenC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
90005ac8:	4bea      	ldr	r3, [pc, #936]	; (90005e74 <_ZN15Screen1ViewBaseC1Ev+0x3bc>)
90005aca:	2500      	movs	r5, #0
          visible(true)
90005acc:	f44f 7680 	mov.w	r6, #256	; 0x100
90005ad0:	66e3      	str	r3, [r4, #108]	; 0x6c
        : Widget(), alpha(255), color(0)
90005ad2:	27ff      	movs	r7, #255	; 0xff
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90005ad4:	4be8      	ldr	r3, [pc, #928]	; (90005e78 <_ZN15Screen1ViewBaseC1Ev+0x3c0>)
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
90005ad6:	f64f 78ff 	movw	r8, #65535	; 0xffff
90005ada:	f104 026c 	add.w	r2, r4, #108	; 0x6c
90005ade:	f104 0098 	add.w	r0, r4, #152	; 0x98
90005ae2:	6023      	str	r3, [r4, #0]
    {
        Image::setBitmap(bmp);
90005ae4:	a912      	add	r1, sp, #72	; 0x48
90005ae6:	4be5      	ldr	r3, [pc, #916]	; (90005e7c <_ZN15Screen1ViewBaseC1Ev+0x3c4>)
        : pressed(false), alpha(255), action(0)
90005ae8:	f44f 4a7f 	mov.w	sl, #65280	; 0xff00
90005aec:	f8a4 6064 	strh.w	r6, [r4, #100]	; 0x64
        touchable = touch;
90005af0:	f240 1901 	movw	r9, #257	; 0x101
90005af4:	6423      	str	r3, [r4, #64]	; 0x40
90005af6:	f04f 3bff 	mov.w	fp, #4294967295
          visible(true)
90005afa:	f8a4 6090 	strh.w	r6, [r4, #144]	; 0x90
        : Widget(), bitmap(bmp), alpha(255)
90005afe:	f8a4 8092 	strh.w	r8, [r4, #146]	; 0x92
90005b02:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
90005b06:	9002      	str	r0, [sp, #8]
        Image::setBitmap(bmp);
90005b08:	4610      	mov	r0, r2
90005b0a:	63e5      	str	r5, [r4, #60]	; 0x3c
90005b0c:	f884 7066 	strb.w	r7, [r4, #102]	; 0x66
        : color(col)
90005b10:	66a5      	str	r5, [r4, #104]	; 0x68
90005b12:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
90005b16:	920d      	str	r2, [sp, #52]	; 0x34
        : x(0), y(0), width(0), height(0)
90005b18:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
90005b1c:	e9c4 5513 	strd	r5, r5, [r4, #76]	; 0x4c
90005b20:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
90005b24:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
90005b28:	e9c4 551c 	strd	r5, r5, [r4, #112]	; 0x70
90005b2c:	e9c4 551e 	strd	r5, r5, [r4, #120]	; 0x78
90005b30:	e9c4 5520 	strd	r5, r5, [r4, #128]	; 0x80
90005b34:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
90005b38:	f010 fe66 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90005b3c:	ed9d 8a02 	vldr	s16, [sp, #8]
90005b40:	f104 02c4 	add.w	r2, r4, #196	; 0xc4
90005b44:	a912      	add	r1, sp, #72	; 0x48
90005b46:	ee18 0a10 	vmov	r0, s16
90005b4a:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
90005b4e:	9201      	str	r2, [sp, #4]
90005b50:	f00f ff82 	bl	90015a58 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : T(), up(), down()
90005b54:	4bca      	ldr	r3, [pc, #808]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005b56:	f504 719e 	add.w	r1, r4, #316	; 0x13c
90005b5a:	f8a4 a0f0 	strh.w	sl, [r4, #240]	; 0xf0
90005b5e:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
        : Box(), borderColor(0), borderSize(0)
90005b62:	4bc8      	ldr	r3, [pc, #800]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
        touchable = touch;
90005b64:	f8a4 90e8 	strh.w	r9, [r4, #232]	; 0xe8
90005b68:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
          visible(true)
90005b6c:	f8a4 611c 	strh.w	r6, [r4, #284]	; 0x11c
90005b70:	9102      	str	r1, [sp, #8]
        T::add(borderBox);
90005b72:	f104 01f8 	add.w	r1, r4, #248	; 0xf8
          firstChild(0)
90005b76:	f8c4 50ec 	str.w	r5, [r4, #236]	; 0xec
90005b7a:	f8c4 50f4 	str.w	r5, [r4, #244]	; 0xf4
        : color(col)
90005b7e:	f8c4 5120 	str.w	r5, [r4, #288]	; 0x120
90005b82:	f8c4 5124 	str.w	r5, [r4, #292]	; 0x124
90005b86:	f8a4 5128 	strh.w	r5, [r4, #296]	; 0x128
90005b8a:	f884 711e 	strb.w	r7, [r4, #286]	; 0x11e
        : x(0), y(0), width(0), height(0)
90005b8e:	e9c4 5532 	strd	r5, r5, [r4, #200]	; 0xc8
90005b92:	e9c4 5534 	strd	r5, r5, [r4, #208]	; 0xd0
90005b96:	e9c4 5536 	strd	r5, r5, [r4, #216]	; 0xd8
90005b9a:	e9c4 5538 	strd	r5, r5, [r4, #224]	; 0xe0
        : color(0)
90005b9e:	e9c4 554b 	strd	r5, r5, [r4, #300]	; 0x12c
90005ba2:	e9c4 554d 	strd	r5, r5, [r4, #308]	; 0x134
        : x(0), y(0), width(0), height(0)
90005ba6:	e9c4 553f 	strd	r5, r5, [r4, #252]	; 0xfc
90005baa:	e9c4 5541 	strd	r5, r5, [r4, #260]	; 0x104
90005bae:	e9c4 5543 	strd	r5, r5, [r4, #268]	; 0x10c
90005bb2:	e9c4 5545 	strd	r5, r5, [r4, #276]	; 0x114
90005bb6:	9801      	ldr	r0, [sp, #4]
90005bb8:	f00e fd7e 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005bbc:	f504 7cda 	add.w	ip, r4, #436	; 0x1b4
        : T(), up(), down()
90005bc0:	4aaf      	ldr	r2, [pc, #700]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
        T::add(borderBox);
90005bc2:	f504 71b8 	add.w	r1, r4, #368	; 0x170
90005bc6:	4baf      	ldr	r3, [pc, #700]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005bc8:	f8cd c00c 	str.w	ip, [sp, #12]
        : T(), up(), down()
90005bcc:	f8c4 213c 	str.w	r2, [r4, #316]	; 0x13c
90005bd0:	f8c4 3170 	str.w	r3, [r4, #368]	; 0x170
90005bd4:	f8a4 a168 	strh.w	sl, [r4, #360]	; 0x168
        touchable = touch;
90005bd8:	f8a4 9160 	strh.w	r9, [r4, #352]	; 0x160
          visible(true)
90005bdc:	f8a4 6194 	strh.w	r6, [r4, #404]	; 0x194
90005be0:	f8c4 5164 	str.w	r5, [r4, #356]	; 0x164
90005be4:	f8c4 516c 	str.w	r5, [r4, #364]	; 0x16c
        : color(col)
90005be8:	f8c4 5198 	str.w	r5, [r4, #408]	; 0x198
90005bec:	f8c4 519c 	str.w	r5, [r4, #412]	; 0x19c
90005bf0:	f8a4 51a0 	strh.w	r5, [r4, #416]	; 0x1a0
90005bf4:	f884 7196 	strb.w	r7, [r4, #406]	; 0x196
        : x(0), y(0), width(0), height(0)
90005bf8:	e9c4 5550 	strd	r5, r5, [r4, #320]	; 0x140
90005bfc:	e9c4 5552 	strd	r5, r5, [r4, #328]	; 0x148
90005c00:	e9c4 5554 	strd	r5, r5, [r4, #336]	; 0x150
90005c04:	e9c4 5556 	strd	r5, r5, [r4, #344]	; 0x158
        : color(0)
90005c08:	e9c4 5569 	strd	r5, r5, [r4, #420]	; 0x1a4
90005c0c:	e9c4 556b 	strd	r5, r5, [r4, #428]	; 0x1ac
        : x(0), y(0), width(0), height(0)
90005c10:	e9c4 555d 	strd	r5, r5, [r4, #372]	; 0x174
90005c14:	e9c4 555f 	strd	r5, r5, [r4, #380]	; 0x17c
90005c18:	e9c4 5561 	strd	r5, r5, [r4, #388]	; 0x184
90005c1c:	e9c4 5563 	strd	r5, r5, [r4, #396]	; 0x18c
        T::add(borderBox);
90005c20:	9802      	ldr	r0, [sp, #8]
90005c22:	f00e fd49 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005c26:	4a96      	ldr	r2, [pc, #600]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005c28:	4b96      	ldr	r3, [pc, #600]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005c2a:	f504 710b 	add.w	r1, r4, #556	; 0x22c
90005c2e:	f8c4 21b4 	str.w	r2, [r4, #436]	; 0x1b4
90005c32:	f8c4 31e8 	str.w	r3, [r4, #488]	; 0x1e8
90005c36:	f8a4 a1e0 	strh.w	sl, [r4, #480]	; 0x1e0
        touchable = touch;
90005c3a:	f8a4 91d8 	strh.w	r9, [r4, #472]	; 0x1d8
          visible(true)
90005c3e:	f8a4 620c 	strh.w	r6, [r4, #524]	; 0x20c
90005c42:	9104      	str	r1, [sp, #16]
        T::add(borderBox);
90005c44:	f504 71f4 	add.w	r1, r4, #488	; 0x1e8
90005c48:	f8c4 51dc 	str.w	r5, [r4, #476]	; 0x1dc
90005c4c:	f8c4 51e4 	str.w	r5, [r4, #484]	; 0x1e4
        : color(col)
90005c50:	f8c4 5210 	str.w	r5, [r4, #528]	; 0x210
90005c54:	f8c4 5214 	str.w	r5, [r4, #532]	; 0x214
90005c58:	f8a4 5218 	strh.w	r5, [r4, #536]	; 0x218
90005c5c:	f884 720e 	strb.w	r7, [r4, #526]	; 0x20e
        : x(0), y(0), width(0), height(0)
90005c60:	e9c4 556e 	strd	r5, r5, [r4, #440]	; 0x1b8
90005c64:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
90005c68:	e9c4 5572 	strd	r5, r5, [r4, #456]	; 0x1c8
90005c6c:	e9c4 5574 	strd	r5, r5, [r4, #464]	; 0x1d0
        : color(0)
90005c70:	e9c4 5587 	strd	r5, r5, [r4, #540]	; 0x21c
90005c74:	e9c4 5589 	strd	r5, r5, [r4, #548]	; 0x224
        : x(0), y(0), width(0), height(0)
90005c78:	e9c4 557b 	strd	r5, r5, [r4, #492]	; 0x1ec
90005c7c:	e9c4 557d 	strd	r5, r5, [r4, #500]	; 0x1f4
90005c80:	e9c4 557f 	strd	r5, r5, [r4, #508]	; 0x1fc
90005c84:	e9c4 5581 	strd	r5, r5, [r4, #516]	; 0x204
90005c88:	9803      	ldr	r0, [sp, #12]
90005c8a:	f00e fd15 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005c8e:	4a7c      	ldr	r2, [pc, #496]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005c90:	4b7c      	ldr	r3, [pc, #496]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005c92:	f504 7c29 	add.w	ip, r4, #676	; 0x2a4
90005c96:	f8c4 222c 	str.w	r2, [r4, #556]	; 0x22c
        T::add(borderBox);
90005c9a:	f504 7118 	add.w	r1, r4, #608	; 0x260
90005c9e:	f8c4 3260 	str.w	r3, [r4, #608]	; 0x260
90005ca2:	f8cd c014 	str.w	ip, [sp, #20]
90005ca6:	f8a4 a258 	strh.w	sl, [r4, #600]	; 0x258
        touchable = touch;
90005caa:	f8a4 9250 	strh.w	r9, [r4, #592]	; 0x250
          visible(true)
90005cae:	f8a4 6284 	strh.w	r6, [r4, #644]	; 0x284
90005cb2:	f8c4 5254 	str.w	r5, [r4, #596]	; 0x254
90005cb6:	f8c4 525c 	str.w	r5, [r4, #604]	; 0x25c
        : color(col)
90005cba:	f8c4 5288 	str.w	r5, [r4, #648]	; 0x288
90005cbe:	f8c4 528c 	str.w	r5, [r4, #652]	; 0x28c
90005cc2:	f8a4 5290 	strh.w	r5, [r4, #656]	; 0x290
90005cc6:	f884 7286 	strb.w	r7, [r4, #646]	; 0x286
        : x(0), y(0), width(0), height(0)
90005cca:	e9c4 558c 	strd	r5, r5, [r4, #560]	; 0x230
90005cce:	e9c4 558e 	strd	r5, r5, [r4, #568]	; 0x238
90005cd2:	e9c4 5590 	strd	r5, r5, [r4, #576]	; 0x240
90005cd6:	e9c4 5592 	strd	r5, r5, [r4, #584]	; 0x248
        : color(0)
90005cda:	e9c4 55a5 	strd	r5, r5, [r4, #660]	; 0x294
90005cde:	e9c4 55a7 	strd	r5, r5, [r4, #668]	; 0x29c
        : x(0), y(0), width(0), height(0)
90005ce2:	e9c4 5599 	strd	r5, r5, [r4, #612]	; 0x264
90005ce6:	e9c4 559b 	strd	r5, r5, [r4, #620]	; 0x26c
90005cea:	e9c4 559d 	strd	r5, r5, [r4, #628]	; 0x274
90005cee:	e9c4 559f 	strd	r5, r5, [r4, #636]	; 0x27c
90005cf2:	9804      	ldr	r0, [sp, #16]
90005cf4:	f00e fce0 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005cf8:	4a61      	ldr	r2, [pc, #388]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005cfa:	4b62      	ldr	r3, [pc, #392]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005cfc:	f504 7c47 	add.w	ip, r4, #796	; 0x31c
90005d00:	f8c4 22a4 	str.w	r2, [r4, #676]	; 0x2a4
        T::add(borderBox);
90005d04:	f504 7136 	add.w	r1, r4, #728	; 0x2d8
90005d08:	f8c4 32d8 	str.w	r3, [r4, #728]	; 0x2d8
90005d0c:	f8cd c018 	str.w	ip, [sp, #24]
90005d10:	f8a4 a2d0 	strh.w	sl, [r4, #720]	; 0x2d0
        touchable = touch;
90005d14:	f8a4 92c8 	strh.w	r9, [r4, #712]	; 0x2c8
          visible(true)
90005d18:	f8a4 62fc 	strh.w	r6, [r4, #764]	; 0x2fc
90005d1c:	f8c4 52cc 	str.w	r5, [r4, #716]	; 0x2cc
90005d20:	f8c4 52d4 	str.w	r5, [r4, #724]	; 0x2d4
        : color(col)
90005d24:	f8c4 5300 	str.w	r5, [r4, #768]	; 0x300
90005d28:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
90005d2c:	f8a4 5308 	strh.w	r5, [r4, #776]	; 0x308
90005d30:	f884 72fe 	strb.w	r7, [r4, #766]	; 0x2fe
        : x(0), y(0), width(0), height(0)
90005d34:	e9c4 55aa 	strd	r5, r5, [r4, #680]	; 0x2a8
90005d38:	e9c4 55ac 	strd	r5, r5, [r4, #688]	; 0x2b0
90005d3c:	e9c4 55ae 	strd	r5, r5, [r4, #696]	; 0x2b8
90005d40:	e9c4 55b0 	strd	r5, r5, [r4, #704]	; 0x2c0
        : color(0)
90005d44:	e9c4 55c3 	strd	r5, r5, [r4, #780]	; 0x30c
90005d48:	e9c4 55c5 	strd	r5, r5, [r4, #788]	; 0x314
        : x(0), y(0), width(0), height(0)
90005d4c:	e9c4 55b7 	strd	r5, r5, [r4, #732]	; 0x2dc
90005d50:	e9c4 55b9 	strd	r5, r5, [r4, #740]	; 0x2e4
90005d54:	e9c4 55bb 	strd	r5, r5, [r4, #748]	; 0x2ec
90005d58:	e9c4 55bd 	strd	r5, r5, [r4, #756]	; 0x2f4
90005d5c:	9805      	ldr	r0, [sp, #20]
90005d5e:	f00e fcab 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005d62:	4a47      	ldr	r2, [pc, #284]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005d64:	4b47      	ldr	r3, [pc, #284]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005d66:	f504 7c65 	add.w	ip, r4, #916	; 0x394
90005d6a:	f8c4 231c 	str.w	r2, [r4, #796]	; 0x31c
        T::add(borderBox);
90005d6e:	f504 7154 	add.w	r1, r4, #848	; 0x350
90005d72:	f8c4 3350 	str.w	r3, [r4, #848]	; 0x350
90005d76:	f8cd c01c 	str.w	ip, [sp, #28]
90005d7a:	f8a4 a348 	strh.w	sl, [r4, #840]	; 0x348
        touchable = touch;
90005d7e:	f8a4 9340 	strh.w	r9, [r4, #832]	; 0x340
          visible(true)
90005d82:	f8a4 6374 	strh.w	r6, [r4, #884]	; 0x374
90005d86:	f8c4 5344 	str.w	r5, [r4, #836]	; 0x344
90005d8a:	f8c4 534c 	str.w	r5, [r4, #844]	; 0x34c
        : color(col)
90005d8e:	f8c4 5378 	str.w	r5, [r4, #888]	; 0x378
90005d92:	f8c4 537c 	str.w	r5, [r4, #892]	; 0x37c
90005d96:	f8a4 5380 	strh.w	r5, [r4, #896]	; 0x380
90005d9a:	f884 7376 	strb.w	r7, [r4, #886]	; 0x376
        : x(0), y(0), width(0), height(0)
90005d9e:	e9c4 55c8 	strd	r5, r5, [r4, #800]	; 0x320
90005da2:	e9c4 55ca 	strd	r5, r5, [r4, #808]	; 0x328
90005da6:	e9c4 55cc 	strd	r5, r5, [r4, #816]	; 0x330
90005daa:	e9c4 55ce 	strd	r5, r5, [r4, #824]	; 0x338
        : color(0)
90005dae:	e9c4 55e1 	strd	r5, r5, [r4, #900]	; 0x384
90005db2:	e9c4 55e3 	strd	r5, r5, [r4, #908]	; 0x38c
        : x(0), y(0), width(0), height(0)
90005db6:	e9c4 55d5 	strd	r5, r5, [r4, #852]	; 0x354
90005dba:	e9c4 55d7 	strd	r5, r5, [r4, #860]	; 0x35c
90005dbe:	e9c4 55d9 	strd	r5, r5, [r4, #868]	; 0x364
90005dc2:	e9c4 55db 	strd	r5, r5, [r4, #876]	; 0x36c
90005dc6:	9806      	ldr	r0, [sp, #24]
90005dc8:	f00e fc76 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005dcc:	4a2c      	ldr	r2, [pc, #176]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
90005dce:	4b2d      	ldr	r3, [pc, #180]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005dd0:	f204 4c0c 	addw	ip, r4, #1036	; 0x40c
90005dd4:	f8c4 2394 	str.w	r2, [r4, #916]	; 0x394
        T::add(borderBox);
90005dd8:	f504 7172 	add.w	r1, r4, #968	; 0x3c8
90005ddc:	f8c4 33c8 	str.w	r3, [r4, #968]	; 0x3c8
90005de0:	f8cd c020 	str.w	ip, [sp, #32]
90005de4:	f8a4 a3c0 	strh.w	sl, [r4, #960]	; 0x3c0
        touchable = touch;
90005de8:	f8a4 93b8 	strh.w	r9, [r4, #952]	; 0x3b8
          visible(true)
90005dec:	f8a4 63ec 	strh.w	r6, [r4, #1004]	; 0x3ec
90005df0:	f8c4 53bc 	str.w	r5, [r4, #956]	; 0x3bc
90005df4:	f8c4 53c4 	str.w	r5, [r4, #964]	; 0x3c4
        : color(col)
90005df8:	f8c4 53f0 	str.w	r5, [r4, #1008]	; 0x3f0
90005dfc:	f8c4 53f4 	str.w	r5, [r4, #1012]	; 0x3f4
90005e00:	f8a4 53f8 	strh.w	r5, [r4, #1016]	; 0x3f8
        : color(0)
90005e04:	f8c4 53fc 	str.w	r5, [r4, #1020]	; 0x3fc
90005e08:	f8c4 5400 	str.w	r5, [r4, #1024]	; 0x400
90005e0c:	f8c4 5404 	str.w	r5, [r4, #1028]	; 0x404
90005e10:	f8c4 5408 	str.w	r5, [r4, #1032]	; 0x408
90005e14:	f884 73ee 	strb.w	r7, [r4, #1006]	; 0x3ee
        : x(0), y(0), width(0), height(0)
90005e18:	e9c4 55e6 	strd	r5, r5, [r4, #920]	; 0x398
90005e1c:	e9c4 55e8 	strd	r5, r5, [r4, #928]	; 0x3a0
90005e20:	e9c4 55ea 	strd	r5, r5, [r4, #936]	; 0x3a8
90005e24:	e9c4 55ec 	strd	r5, r5, [r4, #944]	; 0x3b0
90005e28:	e9c4 55f3 	strd	r5, r5, [r4, #972]	; 0x3cc
90005e2c:	e9c4 55f5 	strd	r5, r5, [r4, #980]	; 0x3d4
90005e30:	e9c4 55f7 	strd	r5, r5, [r4, #988]	; 0x3dc
90005e34:	e9c4 55f9 	strd	r5, r5, [r4, #996]	; 0x3e4
90005e38:	9807      	ldr	r0, [sp, #28]
90005e3a:	f00e fc3d 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005e3e:	f204 4c84 	addw	ip, r4, #1156	; 0x484
        : T(), up(), down()
90005e42:	4a0f      	ldr	r2, [pc, #60]	; (90005e80 <_ZN15Screen1ViewBaseC1Ev+0x3c8>)
        T::add(borderBox);
90005e44:	f504 6188 	add.w	r1, r4, #1088	; 0x440
90005e48:	4b0e      	ldr	r3, [pc, #56]	; (90005e84 <_ZN15Screen1ViewBaseC1Ev+0x3cc>)
90005e4a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
        : T(), up(), down()
90005e4e:	f8c4 240c 	str.w	r2, [r4, #1036]	; 0x40c
90005e52:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
90005e56:	f8a4 a438 	strh.w	sl, [r4, #1080]	; 0x438
        touchable = touch;
90005e5a:	f8a4 9430 	strh.w	r9, [r4, #1072]	; 0x430
          visible(true)
90005e5e:	f8a4 6464 	strh.w	r6, [r4, #1124]	; 0x464
90005e62:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
90005e66:	f8c4 543c 	str.w	r5, [r4, #1084]	; 0x43c
90005e6a:	f8c4 5410 	str.w	r5, [r4, #1040]	; 0x410
90005e6e:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
90005e72:	e009      	b.n	90005e88 <_ZN15Screen1ViewBaseC1Ev+0x3d0>
90005e74:	9002b478 	.word	0x9002b478
90005e78:	9002a724 	.word	0x9002a724
90005e7c:	9002b3a8 	.word	0x9002b3a8
90005e80:	9002a5d4 	.word	0x9002a5d4
90005e84:	9002b410 	.word	0x9002b410
90005e88:	f8c4 5418 	str.w	r5, [r4, #1048]	; 0x418
90005e8c:	f8c4 541c 	str.w	r5, [r4, #1052]	; 0x41c
90005e90:	f8c4 5420 	str.w	r5, [r4, #1056]	; 0x420
90005e94:	f8c4 5424 	str.w	r5, [r4, #1060]	; 0x424
90005e98:	f8c4 5428 	str.w	r5, [r4, #1064]	; 0x428
90005e9c:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
        : color(col)
90005ea0:	f8c4 5468 	str.w	r5, [r4, #1128]	; 0x468
90005ea4:	f8c4 546c 	str.w	r5, [r4, #1132]	; 0x46c
90005ea8:	f8a4 5470 	strh.w	r5, [r4, #1136]	; 0x470
        : color(0)
90005eac:	f8c4 5474 	str.w	r5, [r4, #1140]	; 0x474
90005eb0:	f8c4 5478 	str.w	r5, [r4, #1144]	; 0x478
90005eb4:	f8c4 547c 	str.w	r5, [r4, #1148]	; 0x47c
90005eb8:	f8c4 5480 	str.w	r5, [r4, #1152]	; 0x480
        rect.x = x;
90005ebc:	f8c4 5444 	str.w	r5, [r4, #1092]	; 0x444
        : x(0), y(0), width(0), height(0)
90005ec0:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
90005ec4:	f8c4 544c 	str.w	r5, [r4, #1100]	; 0x44c
90005ec8:	f8c4 5450 	str.w	r5, [r4, #1104]	; 0x450
          visible(true)
90005ecc:	f8c4 5454 	str.w	r5, [r4, #1108]	; 0x454
90005ed0:	f8c4 5458 	str.w	r5, [r4, #1112]	; 0x458
90005ed4:	f8c4 545c 	str.w	r5, [r4, #1116]	; 0x45c
90005ed8:	f8c4 5460 	str.w	r5, [r4, #1120]	; 0x460
90005edc:	f884 7466 	strb.w	r7, [r4, #1126]	; 0x466
        T::add(borderBox);
90005ee0:	9808      	ldr	r0, [sp, #32]
90005ee2:	f00e fbe9 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : T(), up(), down()
90005ee6:	4afa      	ldr	r2, [pc, #1000]	; (900062d0 <_ZN15Screen1ViewBaseC1Ev+0x818>)
90005ee8:	4bfa      	ldr	r3, [pc, #1000]	; (900062d4 <_ZN15Screen1ViewBaseC1Ev+0x81c>)
        T::add(borderBox);
90005eea:	f504 6197 	add.w	r1, r4, #1208	; 0x4b8
        : T(), up(), down()
90005eee:	f8c4 2484 	str.w	r2, [r4, #1156]	; 0x484
        T::add(borderBox);
90005ef2:	9809      	ldr	r0, [sp, #36]	; 0x24
90005ef4:	f8a4 a4b0 	strh.w	sl, [r4, #1200]	; 0x4b0
        touchable = touch;
90005ef8:	f8a4 94a8 	strh.w	r9, [r4, #1192]	; 0x4a8
90005efc:	f8c4 34b8 	str.w	r3, [r4, #1208]	; 0x4b8
          visible(true)
90005f00:	f8a4 64dc 	strh.w	r6, [r4, #1244]	; 0x4dc
90005f04:	f8c4 54ac 	str.w	r5, [r4, #1196]	; 0x4ac
90005f08:	f8c4 54b4 	str.w	r5, [r4, #1204]	; 0x4b4
90005f0c:	f8c4 5488 	str.w	r5, [r4, #1160]	; 0x488
90005f10:	f8c4 548c 	str.w	r5, [r4, #1164]	; 0x48c
90005f14:	f8c4 5490 	str.w	r5, [r4, #1168]	; 0x490
90005f18:	f8c4 5494 	str.w	r5, [r4, #1172]	; 0x494
90005f1c:	f8c4 5498 	str.w	r5, [r4, #1176]	; 0x498
90005f20:	f8c4 549c 	str.w	r5, [r4, #1180]	; 0x49c
90005f24:	f8c4 54a0 	str.w	r5, [r4, #1184]	; 0x4a0
90005f28:	f8c4 54a4 	str.w	r5, [r4, #1188]	; 0x4a4
        : color(col)
90005f2c:	f8c4 54e0 	str.w	r5, [r4, #1248]	; 0x4e0
90005f30:	f8c4 54e4 	str.w	r5, [r4, #1252]	; 0x4e4
90005f34:	f8a4 54e8 	strh.w	r5, [r4, #1256]	; 0x4e8
        : color(0)
90005f38:	f8c4 54ec 	str.w	r5, [r4, #1260]	; 0x4ec
90005f3c:	f8c4 54f0 	str.w	r5, [r4, #1264]	; 0x4f0
90005f40:	f8c4 54f4 	str.w	r5, [r4, #1268]	; 0x4f4
90005f44:	f8c4 54f8 	str.w	r5, [r4, #1272]	; 0x4f8
        rect.x = x;
90005f48:	f8c4 54bc 	str.w	r5, [r4, #1212]	; 0x4bc
        : x(0), y(0), width(0), height(0)
90005f4c:	f8c4 54c0 	str.w	r5, [r4, #1216]	; 0x4c0
90005f50:	f8c4 54c4 	str.w	r5, [r4, #1220]	; 0x4c4
90005f54:	f8c4 54c8 	str.w	r5, [r4, #1224]	; 0x4c8
          visible(true)
90005f58:	f8c4 54cc 	str.w	r5, [r4, #1228]	; 0x4cc
90005f5c:	f8c4 54d0 	str.w	r5, [r4, #1232]	; 0x4d0
90005f60:	f8c4 54d4 	str.w	r5, [r4, #1236]	; 0x4d4
90005f64:	f8c4 54d8 	str.w	r5, [r4, #1240]	; 0x4d8
90005f68:	f884 74de 	strb.w	r7, [r4, #1246]	; 0x4de
90005f6c:	f00e fba4 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
90005f70:	4bd8      	ldr	r3, [pc, #864]	; (900062d4 <_ZN15Screen1ViewBaseC1Ev+0x81c>)
90005f72:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
90005f76:	f504 6c09 	add.w	ip, r4, #2192	; 0x890
90005f7a:	f8c4 3530 	str.w	r3, [r4, #1328]	; 0x530
90005f7e:	f504 61a6 	add.w	r1, r4, #1328	; 0x530
        : T(), up(), down()
90005f82:	4bd5      	ldr	r3, [pc, #852]	; (900062d8 <_ZN15Screen1ViewBaseC1Ev+0x820>)
90005f84:	ee08 0a90 	vmov	s17, r0
90005f88:	f8a4 a528 	strh.w	sl, [r4, #1320]	; 0x528
        touchable = touch;
90005f8c:	f8a4 9520 	strh.w	r9, [r4, #1312]	; 0x520
          visible(true)
90005f90:	f8a4 6554 	strh.w	r6, [r4, #1364]	; 0x554
90005f94:	f8c4 34fc 	str.w	r3, [r4, #1276]	; 0x4fc
90005f98:	f8c4 5524 	str.w	r5, [r4, #1316]	; 0x524
90005f9c:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
90005fa0:	f8c4 5500 	str.w	r5, [r4, #1280]	; 0x500
90005fa4:	f8c4 5504 	str.w	r5, [r4, #1284]	; 0x504
90005fa8:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
90005fac:	f8c4 550c 	str.w	r5, [r4, #1292]	; 0x50c
90005fb0:	f8c4 5510 	str.w	r5, [r4, #1296]	; 0x510
90005fb4:	f8c4 5514 	str.w	r5, [r4, #1300]	; 0x514
90005fb8:	f8c4 5518 	str.w	r5, [r4, #1304]	; 0x518
90005fbc:	f8c4 551c 	str.w	r5, [r4, #1308]	; 0x51c
        : color(col)
90005fc0:	f8c4 5558 	str.w	r5, [r4, #1368]	; 0x558
90005fc4:	f8c4 555c 	str.w	r5, [r4, #1372]	; 0x55c
90005fc8:	f8a4 5560 	strh.w	r5, [r4, #1376]	; 0x560
        : color(0)
90005fcc:	f8c4 5564 	str.w	r5, [r4, #1380]	; 0x564
90005fd0:	f8c4 5568 	str.w	r5, [r4, #1384]	; 0x568
90005fd4:	f8c4 556c 	str.w	r5, [r4, #1388]	; 0x56c
90005fd8:	f8c4 5570 	str.w	r5, [r4, #1392]	; 0x570
        rect.x = x;
90005fdc:	f8c4 5534 	str.w	r5, [r4, #1332]	; 0x534
        : x(0), y(0), width(0), height(0)
90005fe0:	f8c4 5538 	str.w	r5, [r4, #1336]	; 0x538
90005fe4:	f8c4 553c 	str.w	r5, [r4, #1340]	; 0x53c
90005fe8:	f8c4 5540 	str.w	r5, [r4, #1344]	; 0x540
          visible(true)
90005fec:	f8c4 5544 	str.w	r5, [r4, #1348]	; 0x544
90005ff0:	f8c4 5548 	str.w	r5, [r4, #1352]	; 0x548
90005ff4:	f8c4 554c 	str.w	r5, [r4, #1356]	; 0x54c
90005ff8:	f8c4 5550 	str.w	r5, [r4, #1360]	; 0x550
90005ffc:	f884 7556 	strb.w	r7, [r4, #1366]	; 0x556
90006000:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
        T::add(borderBox);
90006004:	f00e fb58 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006008:	4bb4      	ldr	r3, [pc, #720]	; (900062dc <_ZN15Screen1ViewBaseC1Ev+0x824>)
9000600a:	f604 1c08 	addw	ip, r4, #2312	; 0x908
        : typedTextId(id)
9000600e:	4ab4      	ldr	r2, [pc, #720]	; (900062e0 <_ZN15Screen1ViewBaseC1Ev+0x828>)
        : TextAreaWithWildcardBase(), wc1(0)
90006010:	49b4      	ldr	r1, [pc, #720]	; (900062e4 <_ZN15Screen1ViewBaseC1Ev+0x82c>)
90006012:	f8c4 3574 	str.w	r3, [r4, #1396]	; 0x574
90006016:	f8c4 35bc 	str.w	r3, [r4, #1468]	; 0x5bc
9000601a:	f8c4 259c 	str.w	r2, [r4, #1436]	; 0x59c
9000601e:	f8c4 25e4 	str.w	r2, [r4, #1508]	; 0x5e4
90006022:	f8a4 6598 	strh.w	r6, [r4, #1432]	; 0x598
90006026:	f8a4 85a0 	strh.w	r8, [r4, #1440]	; 0x5a0
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000602a:	f8c4 b5b4 	str.w	fp, [r4, #1460]	; 0x5b4
9000602e:	f8a4 65e0 	strh.w	r6, [r4, #1504]	; 0x5e0
90006032:	f8a4 b5e8 	strh.w	fp, [r4, #1512]	; 0x5e8
        : x(0), y(0), width(0), height(0)
90006036:	f8c4 5578 	str.w	r5, [r4, #1400]	; 0x578
9000603a:	f8c4 557c 	str.w	r5, [r4, #1404]	; 0x57c
9000603e:	f8c4 5580 	str.w	r5, [r4, #1408]	; 0x580
90006042:	f8c4 5584 	str.w	r5, [r4, #1412]	; 0x584
90006046:	f8c4 5588 	str.w	r5, [r4, #1416]	; 0x588
9000604a:	f8c4 558c 	str.w	r5, [r4, #1420]	; 0x58c
9000604e:	f8c4 5590 	str.w	r5, [r4, #1424]	; 0x590
90006052:	f8c4 5594 	str.w	r5, [r4, #1428]	; 0x594
        : color(col)
90006056:	f8c4 55a4 	str.w	r5, [r4, #1444]	; 0x5a4
9000605a:	f8a4 55a8 	strh.w	r5, [r4, #1448]	; 0x5a8
9000605e:	f8c4 75aa 	str.w	r7, [r4, #1450]	; 0x5aa
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006062:	f8c4 55b0 	str.w	r5, [r4, #1456]	; 0x5b0
              text(0)
90006066:	f8c4 55b8 	str.w	r5, [r4, #1464]	; 0x5b8
        : x(0), y(0), width(0), height(0)
9000606a:	f8c4 55c0 	str.w	r5, [r4, #1472]	; 0x5c0
9000606e:	f8c4 55c4 	str.w	r5, [r4, #1476]	; 0x5c4
90006072:	f8c4 55c8 	str.w	r5, [r4, #1480]	; 0x5c8
90006076:	f8c4 55cc 	str.w	r5, [r4, #1484]	; 0x5cc
9000607a:	f8c4 55d0 	str.w	r5, [r4, #1488]	; 0x5d0
9000607e:	f8c4 55d4 	str.w	r5, [r4, #1492]	; 0x5d4
90006082:	f8c4 55d8 	str.w	r5, [r4, #1496]	; 0x5d8
90006086:	f8c4 55dc 	str.w	r5, [r4, #1500]	; 0x5dc
        : color(col)
9000608a:	f8c4 55ec 	str.w	r5, [r4, #1516]	; 0x5ec
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000608e:	f8a4 55f0 	strh.w	r5, [r4, #1520]	; 0x5f0
90006092:	f8c4 75f2 	str.w	r7, [r4, #1522]	; 0x5f2
90006096:	f8c4 3604 	str.w	r3, [r4, #1540]	; 0x604
9000609a:	f8c4 262c 	str.w	r2, [r4, #1580]	; 0x62c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000609e:	f8c4 b5fc 	str.w	fp, [r4, #1532]	; 0x5fc
900060a2:	f8a4 6628 	strh.w	r6, [r4, #1576]	; 0x628
900060a6:	f8a4 8630 	strh.w	r8, [r4, #1584]	; 0x630
900060aa:	f8a4 8644 	strh.w	r8, [r4, #1604]	; 0x644
900060ae:	f8a4 8646 	strh.w	r8, [r4, #1606]	; 0x646
900060b2:	f8a4 6670 	strh.w	r6, [r4, #1648]	; 0x670
900060b6:	f8c4 55f8 	str.w	r5, [r4, #1528]	; 0x5f8
              text(0)
900060ba:	f8c4 5600 	str.w	r5, [r4, #1536]	; 0x600
        : x(0), y(0), width(0), height(0)
900060be:	f8c4 5608 	str.w	r5, [r4, #1544]	; 0x608
900060c2:	f8c4 560c 	str.w	r5, [r4, #1548]	; 0x60c
900060c6:	f8c4 5610 	str.w	r5, [r4, #1552]	; 0x610
900060ca:	f8c4 5614 	str.w	r5, [r4, #1556]	; 0x614
900060ce:	f8c4 5618 	str.w	r5, [r4, #1560]	; 0x618
900060d2:	f8c4 561c 	str.w	r5, [r4, #1564]	; 0x61c
900060d6:	f8c4 5620 	str.w	r5, [r4, #1568]	; 0x620
900060da:	f8c4 5624 	str.w	r5, [r4, #1572]	; 0x624
        : color(col)
900060de:	f8c4 5634 	str.w	r5, [r4, #1588]	; 0x634
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900060e2:	f8a4 5638 	strh.w	r5, [r4, #1592]	; 0x638
900060e6:	f8c4 763a 	str.w	r7, [r4, #1594]	; 0x63a
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900060ea:	f8a4 5640 	strh.w	r5, [r4, #1600]	; 0x640
900060ee:	f8a4 5642 	strh.w	r5, [r4, #1602]	; 0x642
              text(0)
900060f2:	f8c4 5648 	str.w	r5, [r4, #1608]	; 0x648
        : x(0), y(0), width(0), height(0)
900060f6:	f8c4 5650 	str.w	r5, [r4, #1616]	; 0x650
900060fa:	f8c4 5654 	str.w	r5, [r4, #1620]	; 0x654
900060fe:	f8c4 5658 	str.w	r5, [r4, #1624]	; 0x658
90006102:	f8c4 565c 	str.w	r5, [r4, #1628]	; 0x65c
90006106:	f8c4 5660 	str.w	r5, [r4, #1632]	; 0x660
9000610a:	f8c4 5664 	str.w	r5, [r4, #1636]	; 0x664
9000610e:	f8c4 5668 	str.w	r5, [r4, #1640]	; 0x668
90006112:	f8c4 566c 	str.w	r5, [r4, #1644]	; 0x66c
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006116:	f8c4 364c 	str.w	r3, [r4, #1612]	; 0x64c
9000611a:	f8c4 3694 	str.w	r3, [r4, #1684]	; 0x694
9000611e:	f8c4 2674 	str.w	r2, [r4, #1652]	; 0x674
90006122:	f8c4 26bc 	str.w	r2, [r4, #1724]	; 0x6bc
90006126:	f8a4 8678 	strh.w	r8, [r4, #1656]	; 0x678
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000612a:	f8c4 b68c 	str.w	fp, [r4, #1676]	; 0x68c
9000612e:	f8a4 66b8 	strh.w	r6, [r4, #1720]	; 0x6b8
90006132:	f8a4 86c0 	strh.w	r8, [r4, #1728]	; 0x6c0
90006136:	f8c4 b6d4 	str.w	fp, [r4, #1748]	; 0x6d4
        : color(col)
9000613a:	f8c4 567c 	str.w	r5, [r4, #1660]	; 0x67c
9000613e:	f8a4 5680 	strh.w	r5, [r4, #1664]	; 0x680
90006142:	f8c4 7682 	str.w	r7, [r4, #1666]	; 0x682
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006146:	f8c4 5688 	str.w	r5, [r4, #1672]	; 0x688
              text(0)
9000614a:	f8c4 5690 	str.w	r5, [r4, #1680]	; 0x690
        : x(0), y(0), width(0), height(0)
9000614e:	f8c4 5698 	str.w	r5, [r4, #1688]	; 0x698
90006152:	f8c4 569c 	str.w	r5, [r4, #1692]	; 0x69c
90006156:	f8c4 56a0 	str.w	r5, [r4, #1696]	; 0x6a0
9000615a:	f8c4 56a4 	str.w	r5, [r4, #1700]	; 0x6a4
9000615e:	f8c4 56a8 	str.w	r5, [r4, #1704]	; 0x6a8
90006162:	f8c4 56ac 	str.w	r5, [r4, #1708]	; 0x6ac
90006166:	f8c4 56b0 	str.w	r5, [r4, #1712]	; 0x6b0
9000616a:	f8c4 56b4 	str.w	r5, [r4, #1716]	; 0x6b4
        : color(col)
9000616e:	f8c4 56c4 	str.w	r5, [r4, #1732]	; 0x6c4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006172:	f8a4 56c8 	strh.w	r5, [r4, #1736]	; 0x6c8
90006176:	f8c4 76ca 	str.w	r7, [r4, #1738]	; 0x6ca
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000617a:	f8c4 56d0 	str.w	r5, [r4, #1744]	; 0x6d0
              text(0)
9000617e:	f8c4 56d8 	str.w	r5, [r4, #1752]	; 0x6d8
        : x(0), y(0), width(0), height(0)
90006182:	f8c4 56e0 	str.w	r5, [r4, #1760]	; 0x6e0
90006186:	f8c4 56e4 	str.w	r5, [r4, #1764]	; 0x6e4
9000618a:	f8c4 56e8 	str.w	r5, [r4, #1768]	; 0x6e8
9000618e:	f8c4 56ec 	str.w	r5, [r4, #1772]	; 0x6ec
90006192:	f8c4 56f0 	str.w	r5, [r4, #1776]	; 0x6f0
90006196:	f8c4 56f4 	str.w	r5, [r4, #1780]	; 0x6f4
9000619a:	f8c4 56f8 	str.w	r5, [r4, #1784]	; 0x6f8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000619e:	f8c4 36dc 	str.w	r3, [r4, #1756]	; 0x6dc
900061a2:	f8c4 3724 	str.w	r3, [r4, #1828]	; 0x724
900061a6:	f8c4 2704 	str.w	r2, [r4, #1796]	; 0x704
900061aa:	f8c4 274c 	str.w	r2, [r4, #1868]	; 0x74c
900061ae:	f8a4 6700 	strh.w	r6, [r4, #1792]	; 0x700
900061b2:	f8a4 b708 	strh.w	fp, [r4, #1800]	; 0x708
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900061b6:	f8c4 b71c 	str.w	fp, [r4, #1820]	; 0x71c
900061ba:	f8a4 6748 	strh.w	r6, [r4, #1864]	; 0x748
900061be:	f8a4 8750 	strh.w	r8, [r4, #1872]	; 0x750
900061c2:	f8c4 b764 	str.w	fp, [r4, #1892]	; 0x764
900061c6:	f8c4 56fc 	str.w	r5, [r4, #1788]	; 0x6fc
        : color(col)
900061ca:	f8c4 570c 	str.w	r5, [r4, #1804]	; 0x70c
900061ce:	f8a4 5710 	strh.w	r5, [r4, #1808]	; 0x710
900061d2:	f8c4 7712 	str.w	r7, [r4, #1810]	; 0x712
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900061d6:	f8a4 5718 	strh.w	r5, [r4, #1816]	; 0x718
900061da:	f8a4 571a 	strh.w	r5, [r4, #1818]	; 0x71a
              text(0)
900061de:	f8c4 5720 	str.w	r5, [r4, #1824]	; 0x720
        : x(0), y(0), width(0), height(0)
900061e2:	f8c4 5728 	str.w	r5, [r4, #1832]	; 0x728
900061e6:	f8c4 572c 	str.w	r5, [r4, #1836]	; 0x72c
900061ea:	f8c4 5730 	str.w	r5, [r4, #1840]	; 0x730
900061ee:	f8c4 5734 	str.w	r5, [r4, #1844]	; 0x734
900061f2:	f8c4 5738 	str.w	r5, [r4, #1848]	; 0x738
900061f6:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
900061fa:	f8c4 5740 	str.w	r5, [r4, #1856]	; 0x740
900061fe:	f8c4 5744 	str.w	r5, [r4, #1860]	; 0x744
        : color(col)
90006202:	f8c4 5754 	str.w	r5, [r4, #1876]	; 0x754
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006206:	f8a4 5758 	strh.w	r5, [r4, #1880]	; 0x758
9000620a:	f8c4 775a 	str.w	r7, [r4, #1882]	; 0x75a
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000620e:	f8c4 5760 	str.w	r5, [r4, #1888]	; 0x760
              text(0)
90006212:	f8c4 5768 	str.w	r5, [r4, #1896]	; 0x768
        : x(0), y(0), width(0), height(0)
90006216:	f8c4 5770 	str.w	r5, [r4, #1904]	; 0x770
9000621a:	f8c4 5774 	str.w	r5, [r4, #1908]	; 0x774
9000621e:	f8c4 5778 	str.w	r5, [r4, #1912]	; 0x778
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006222:	f8c4 376c 	str.w	r3, [r4, #1900]	; 0x76c
90006226:	f8c4 37b4 	str.w	r3, [r4, #1972]	; 0x7b4
9000622a:	f8c4 2794 	str.w	r2, [r4, #1940]	; 0x794
9000622e:	f8c4 27dc 	str.w	r2, [r4, #2012]	; 0x7dc
90006232:	f8a4 6790 	strh.w	r6, [r4, #1936]	; 0x790
90006236:	f8a4 8798 	strh.w	r8, [r4, #1944]	; 0x798
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000623a:	f8c4 b7ac 	str.w	fp, [r4, #1964]	; 0x7ac
9000623e:	f8a4 67d8 	strh.w	r6, [r4, #2008]	; 0x7d8
90006242:	f8a4 87e0 	strh.w	r8, [r4, #2016]	; 0x7e0
90006246:	f8c4 b7f4 	str.w	fp, [r4, #2036]	; 0x7f4
        : x(0), y(0), width(0), height(0)
9000624a:	f8c4 577c 	str.w	r5, [r4, #1916]	; 0x77c
9000624e:	f8c4 5780 	str.w	r5, [r4, #1920]	; 0x780
90006252:	f8c4 5784 	str.w	r5, [r4, #1924]	; 0x784
90006256:	f8c4 5788 	str.w	r5, [r4, #1928]	; 0x788
9000625a:	f8c4 578c 	str.w	r5, [r4, #1932]	; 0x78c
        : color(col)
9000625e:	f8c4 579c 	str.w	r5, [r4, #1948]	; 0x79c
90006262:	f8a4 57a0 	strh.w	r5, [r4, #1952]	; 0x7a0
90006266:	f8c4 77a2 	str.w	r7, [r4, #1954]	; 0x7a2
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000626a:	f8c4 57a8 	str.w	r5, [r4, #1960]	; 0x7a8
              text(0)
9000626e:	f8c4 57b0 	str.w	r5, [r4, #1968]	; 0x7b0
        : x(0), y(0), width(0), height(0)
90006272:	f8c4 57b8 	str.w	r5, [r4, #1976]	; 0x7b8
90006276:	f8c4 57bc 	str.w	r5, [r4, #1980]	; 0x7bc
9000627a:	f8c4 57c0 	str.w	r5, [r4, #1984]	; 0x7c0
9000627e:	f8c4 57c4 	str.w	r5, [r4, #1988]	; 0x7c4
90006282:	f8c4 57c8 	str.w	r5, [r4, #1992]	; 0x7c8
90006286:	f8c4 57cc 	str.w	r5, [r4, #1996]	; 0x7cc
9000628a:	f8c4 57d0 	str.w	r5, [r4, #2000]	; 0x7d0
9000628e:	f8c4 57d4 	str.w	r5, [r4, #2004]	; 0x7d4
        : color(col)
90006292:	f8c4 57e4 	str.w	r5, [r4, #2020]	; 0x7e4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006296:	f8a4 57e8 	strh.w	r5, [r4, #2024]	; 0x7e8
9000629a:	f8c4 77ea 	str.w	r7, [r4, #2026]	; 0x7ea
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000629e:	f8c4 57f0 	str.w	r5, [r4, #2032]	; 0x7f0
              text(0)
900062a2:	f8c4 57f8 	str.w	r5, [r4, #2040]	; 0x7f8
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900062a6:	f8c4 37fc 	str.w	r3, [r4, #2044]	; 0x7fc
900062aa:	f8c4 2824 	str.w	r2, [r4, #2084]	; 0x824
900062ae:	f8c4 286c 	str.w	r2, [r4, #2156]	; 0x86c
900062b2:	f8a4 6820 	strh.w	r6, [r4, #2080]	; 0x820
900062b6:	f8a4 8828 	strh.w	r8, [r4, #2088]	; 0x828
900062ba:	f8c4 b83c 	str.w	fp, [r4, #2108]	; 0x83c
900062be:	f8a4 6868 	strh.w	r6, [r4, #2152]	; 0x868
900062c2:	f8a4 8870 	strh.w	r8, [r4, #2160]	; 0x870
        : x(0), y(0), width(0), height(0)
900062c6:	f8c4 5800 	str.w	r5, [r4, #2048]	; 0x800
900062ca:	f8c4 5804 	str.w	r5, [r4, #2052]	; 0x804
900062ce:	e00b      	b.n	900062e8 <_ZN15Screen1ViewBaseC1Ev+0x830>
900062d0:	9002a5d4 	.word	0x9002a5d4
900062d4:	9002b410 	.word	0x9002b410
900062d8:	9002a670 	.word	0x9002a670
900062dc:	9002b318 	.word	0x9002b318
900062e0:	90029fe4 	.word	0x90029fe4
900062e4:	9002a544 	.word	0x9002a544
900062e8:	f8c4 5808 	str.w	r5, [r4, #2056]	; 0x808
900062ec:	f8c4 580c 	str.w	r5, [r4, #2060]	; 0x80c
900062f0:	f8c4 5810 	str.w	r5, [r4, #2064]	; 0x810
900062f4:	f8c4 5814 	str.w	r5, [r4, #2068]	; 0x814
900062f8:	f8c4 5818 	str.w	r5, [r4, #2072]	; 0x818
900062fc:	f8c4 581c 	str.w	r5, [r4, #2076]	; 0x81c
        : color(col)
90006300:	f8c4 582c 	str.w	r5, [r4, #2092]	; 0x82c
90006304:	f8a4 5830 	strh.w	r5, [r4, #2096]	; 0x830
90006308:	f8c4 7832 	str.w	r7, [r4, #2098]	; 0x832
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
9000630c:	f8c4 5838 	str.w	r5, [r4, #2104]	; 0x838
              text(0)
90006310:	f8c4 5840 	str.w	r5, [r4, #2112]	; 0x840
        : x(0), y(0), width(0), height(0)
90006314:	f8c4 5848 	str.w	r5, [r4, #2120]	; 0x848
90006318:	f8c4 584c 	str.w	r5, [r4, #2124]	; 0x84c
9000631c:	f8c4 5850 	str.w	r5, [r4, #2128]	; 0x850
90006320:	f8c4 5854 	str.w	r5, [r4, #2132]	; 0x854
90006324:	f8c4 5858 	str.w	r5, [r4, #2136]	; 0x858
90006328:	f8c4 585c 	str.w	r5, [r4, #2140]	; 0x85c
9000632c:	f8c4 5860 	str.w	r5, [r4, #2144]	; 0x860
90006330:	f8c4 5864 	str.w	r5, [r4, #2148]	; 0x864
        : color(col)
90006334:	f8c4 5874 	str.w	r5, [r4, #2164]	; 0x874
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006338:	f8a4 5878 	strh.w	r5, [r4, #2168]	; 0x878
9000633c:	f8c4 787a 	str.w	r7, [r4, #2170]	; 0x87a
90006340:	f8c4 1844 	str.w	r1, [r4, #2116]	; 0x844
        : Widget(), bitmap(bmp), alpha(255)
90006344:	49ea      	ldr	r1, [pc, #936]	; (900066f0 <_ZN15Screen1ViewBaseC1Ev+0xc38>)
90006346:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
        Image::setBitmap(bmp);
9000634a:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
9000634e:	980a      	ldr	r0, [sp, #40]	; 0x28
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006350:	f8c4 b884 	str.w	fp, [r4, #2180]	; 0x884
90006354:	f8a4 68b4 	strh.w	r6, [r4, #2228]	; 0x8b4
        : Widget(), bitmap(bmp), alpha(255)
90006358:	f8c4 1890 	str.w	r1, [r4, #2192]	; 0x890
        Image::setBitmap(bmp);
9000635c:	4661      	mov	r1, ip
        : Widget(), bitmap(bmp), alpha(255)
9000635e:	f8a4 88b6 	strh.w	r8, [r4, #2230]	; 0x8b6
90006362:	f884 b8b8 	strb.w	fp, [r4, #2232]	; 0x8b8
90006366:	f8c4 5880 	str.w	r5, [r4, #2176]	; 0x880
              text(0)
9000636a:	f8c4 5888 	str.w	r5, [r4, #2184]	; 0x888
9000636e:	f8c4 588c 	str.w	r5, [r4, #2188]	; 0x88c
        : x(0), y(0), width(0), height(0)
90006372:	f8c4 5894 	str.w	r5, [r4, #2196]	; 0x894
90006376:	f8c4 5898 	str.w	r5, [r4, #2200]	; 0x898
9000637a:	f8c4 589c 	str.w	r5, [r4, #2204]	; 0x89c
9000637e:	f8c4 58a0 	str.w	r5, [r4, #2208]	; 0x8a0
90006382:	f8c4 58a4 	str.w	r5, [r4, #2212]	; 0x8a4
90006386:	f8c4 58a8 	str.w	r5, [r4, #2216]	; 0x8a8
9000638a:	f8c4 58ac 	str.w	r5, [r4, #2220]	; 0x8ac
9000638e:	f8c4 58b0 	str.w	r5, [r4, #2224]	; 0x8b0
90006392:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
        Image::setBitmap(bmp);
90006396:	f010 fa37 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        : Widget(), bitmap(bmp), alpha(255)
9000639a:	49d5      	ldr	r1, [pc, #852]	; (900066f0 <_ZN15Screen1ViewBaseC1Ev+0xc38>)
9000639c:	f504 6c18 	add.w	ip, r4, #2432	; 0x980
900063a0:	4ad4      	ldr	r2, [pc, #848]	; (900066f4 <_ZN15Screen1ViewBaseC1Ev+0xc3c>)
900063a2:	f8c4 1908 	str.w	r1, [r4, #2312]	; 0x908
900063a6:	49d4      	ldr	r1, [pc, #848]	; (900066f8 <_ZN15Screen1ViewBaseC1Ev+0xc40>)
900063a8:	f8c4 28e4 	str.w	r2, [r4, #2276]	; 0x8e4
900063ac:	f8a4 68e0 	strh.w	r6, [r4, #2272]	; 0x8e0
900063b0:	f8a4 88e8 	strh.w	r8, [r4, #2280]	; 0x8e8
900063b4:	f8c4 18bc 	str.w	r1, [r4, #2236]	; 0x8bc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900063b8:	f8c4 b8fc 	str.w	fp, [r4, #2300]	; 0x8fc
900063bc:	f8a4 692c 	strh.w	r6, [r4, #2348]	; 0x92c
900063c0:	f8a4 892e 	strh.w	r8, [r4, #2350]	; 0x92e
900063c4:	f8ad 8048 	strh.w	r8, [sp, #72]	; 0x48
        : x(0), y(0), width(0), height(0)
900063c8:	f8c4 58c0 	str.w	r5, [r4, #2240]	; 0x8c0
900063cc:	f8c4 58c4 	str.w	r5, [r4, #2244]	; 0x8c4
900063d0:	f8c4 58c8 	str.w	r5, [r4, #2248]	; 0x8c8
900063d4:	f8c4 58cc 	str.w	r5, [r4, #2252]	; 0x8cc
900063d8:	f8c4 58d0 	str.w	r5, [r4, #2256]	; 0x8d0
900063dc:	f8c4 58d4 	str.w	r5, [r4, #2260]	; 0x8d4
900063e0:	f8c4 58d8 	str.w	r5, [r4, #2264]	; 0x8d8
900063e4:	f8c4 58dc 	str.w	r5, [r4, #2268]	; 0x8dc
        : color(col)
900063e8:	f8c4 58ec 	str.w	r5, [r4, #2284]	; 0x8ec
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
900063ec:	f8a4 58f0 	strh.w	r5, [r4, #2288]	; 0x8f0
900063f0:	f8c4 78f2 	str.w	r7, [r4, #2290]	; 0x8f2
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
900063f4:	f8c4 58f8 	str.w	r5, [r4, #2296]	; 0x8f8
              text(0)
900063f8:	f8c4 5900 	str.w	r5, [r4, #2304]	; 0x900
900063fc:	f8c4 5904 	str.w	r5, [r4, #2308]	; 0x904
        : x(0), y(0), width(0), height(0)
90006400:	f8c4 590c 	str.w	r5, [r4, #2316]	; 0x90c
90006404:	f8c4 5910 	str.w	r5, [r4, #2320]	; 0x910
90006408:	f8c4 5914 	str.w	r5, [r4, #2324]	; 0x914
9000640c:	f8c4 5918 	str.w	r5, [r4, #2328]	; 0x918
90006410:	f8c4 591c 	str.w	r5, [r4, #2332]	; 0x91c
90006414:	f8c4 5920 	str.w	r5, [r4, #2336]	; 0x920
90006418:	f8c4 5924 	str.w	r5, [r4, #2340]	; 0x924
9000641c:	f8c4 5928 	str.w	r5, [r4, #2344]	; 0x928
90006420:	f884 7930 	strb.w	r7, [r4, #2352]	; 0x930
90006424:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
        Image::setBitmap(bmp);
90006428:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
9000642c:	980b      	ldr	r0, [sp, #44]	; 0x2c
9000642e:	4661      	mov	r1, ip
90006430:	f010 f9ea 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90006434:	49b0      	ldr	r1, [pc, #704]	; (900066f8 <_ZN15Screen1ViewBaseC1Ev+0xc40>)
90006436:	4aaf      	ldr	r2, [pc, #700]	; (900066f4 <_ZN15Screen1ViewBaseC1Ev+0xc3c>)
90006438:	4bb0      	ldr	r3, [pc, #704]	; (900066fc <_ZN15Screen1ViewBaseC1Ev+0xc44>)
9000643a:	f8c4 1934 	str.w	r1, [r4, #2356]	; 0x934
        : T(), up(), down()
9000643e:	49b0      	ldr	r1, [pc, #704]	; (90006700 <_ZN15Screen1ViewBaseC1Ev+0xc48>)
90006440:	f8c4 295c 	str.w	r2, [r4, #2396]	; 0x95c
90006444:	f8a4 a9ac 	strh.w	sl, [r4, #2476]	; 0x9ac
90006448:	f204 7afc 	addw	sl, r4, #2044	; 0x7fc
        touchable = touch;
9000644c:	f8a4 99a4 	strh.w	r9, [r4, #2468]	; 0x9a4
90006450:	f204 5974 	addw	r9, r4, #1396	; 0x574
90006454:	f8c4 1980 	str.w	r1, [r4, #2432]	; 0x980
        T::add(borderBox);
90006458:	f604 11b4 	addw	r1, r4, #2484	; 0x9b4
          visible(true)
9000645c:	f8a4 6958 	strh.w	r6, [r4, #2392]	; 0x958
90006460:	f8a4 8960 	strh.w	r8, [r4, #2400]	; 0x960
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006464:	f8c4 b974 	str.w	fp, [r4, #2420]	; 0x974
        : x(0), y(0), width(0), height(0)
90006468:	f8c4 5938 	str.w	r5, [r4, #2360]	; 0x938
9000646c:	f8c4 593c 	str.w	r5, [r4, #2364]	; 0x93c
90006470:	f8c4 5940 	str.w	r5, [r4, #2368]	; 0x940
90006474:	f8c4 5944 	str.w	r5, [r4, #2372]	; 0x944
90006478:	f8c4 5948 	str.w	r5, [r4, #2376]	; 0x948
9000647c:	f8c4 594c 	str.w	r5, [r4, #2380]	; 0x94c
90006480:	f8c4 5950 	str.w	r5, [r4, #2384]	; 0x950
90006484:	f8c4 5954 	str.w	r5, [r4, #2388]	; 0x954
        : color(col)
90006488:	f8c4 5964 	str.w	r5, [r4, #2404]	; 0x964
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
9000648c:	f8a4 5968 	strh.w	r5, [r4, #2408]	; 0x968
90006490:	f8c4 796a 	str.w	r7, [r4, #2410]	; 0x96a
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006494:	f8c4 5970 	str.w	r5, [r4, #2416]	; 0x970
              text(0)
90006498:	f8c4 5978 	str.w	r5, [r4, #2424]	; 0x978
9000649c:	f8c4 597c 	str.w	r5, [r4, #2428]	; 0x97c
900064a0:	f8c4 59a8 	str.w	r5, [r4, #2472]	; 0x9a8
900064a4:	f8c4 59b0 	str.w	r5, [r4, #2480]	; 0x9b0
        : x(0), y(0), width(0), height(0)
900064a8:	f8c4 5984 	str.w	r5, [r4, #2436]	; 0x984
900064ac:	f8c4 5988 	str.w	r5, [r4, #2440]	; 0x988
900064b0:	f8c4 598c 	str.w	r5, [r4, #2444]	; 0x98c
900064b4:	f8c4 5990 	str.w	r5, [r4, #2448]	; 0x990
900064b8:	f8c4 5994 	str.w	r5, [r4, #2452]	; 0x994
900064bc:	f8c4 5998 	str.w	r5, [r4, #2456]	; 0x998
900064c0:	f8c4 599c 	str.w	r5, [r4, #2460]	; 0x99c
900064c4:	f8c4 59a0 	str.w	r5, [r4, #2464]	; 0x9a0
        : color(col)
900064c8:	f8c4 59dc 	str.w	r5, [r4, #2524]	; 0x9dc
900064cc:	980c      	ldr	r0, [sp, #48]	; 0x30
900064ce:	f8c4 39b4 	str.w	r3, [r4, #2484]	; 0x9b4
900064d2:	f8a4 69d8 	strh.w	r6, [r4, #2520]	; 0x9d8
900064d6:	f8c4 59e0 	str.w	r5, [r4, #2528]	; 0x9e0
900064da:	f8a4 59e4 	strh.w	r5, [r4, #2532]	; 0x9e4
        : color(0)
900064de:	f8c4 59e8 	str.w	r5, [r4, #2536]	; 0x9e8
900064e2:	f8c4 59ec 	str.w	r5, [r4, #2540]	; 0x9ec
900064e6:	f8c4 59f0 	str.w	r5, [r4, #2544]	; 0x9f0
900064ea:	f8c4 59f4 	str.w	r5, [r4, #2548]	; 0x9f4
        rect.x = x;
900064ee:	f8c4 59b8 	str.w	r5, [r4, #2488]	; 0x9b8
        : x(0), y(0), width(0), height(0)
900064f2:	f8c4 59bc 	str.w	r5, [r4, #2492]	; 0x9bc
900064f6:	f8c4 59c0 	str.w	r5, [r4, #2496]	; 0x9c0
900064fa:	f8c4 59c4 	str.w	r5, [r4, #2500]	; 0x9c4
          visible(true)
900064fe:	f8c4 59c8 	str.w	r5, [r4, #2504]	; 0x9c8
90006502:	f8c4 59cc 	str.w	r5, [r4, #2508]	; 0x9cc
90006506:	f8c4 59d0 	str.w	r5, [r4, #2512]	; 0x9d0
9000650a:	f8c4 59d4 	str.w	r5, [r4, #2516]	; 0x9d4
9000650e:	f884 79da 	strb.w	r7, [r4, #2522]	; 0x9da
90006512:	f00e f8d1 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
90006516:	4b7b      	ldr	r3, [pc, #492]	; (90006704 <_ZN15Screen1ViewBaseC1Ev+0xc4c>)
90006518:	4a76      	ldr	r2, [pc, #472]	; (900066f4 <_ZN15Screen1ViewBaseC1Ev+0xc3c>)
        setWidth(width);
9000651a:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
9000651e:	f8c4 39f8 	str.w	r3, [r4, #2552]	; 0x9f8
        : pobject(pObject), pmemfun(pmemfun_1)
90006522:	4b79      	ldr	r3, [pc, #484]	; (90006708 <_ZN15Screen1ViewBaseC1Ev+0xc50>)
          visible(true)
90006524:	f8a4 6a1c 	strh.w	r6, [r4, #2588]	; 0xa1c
    __background.setPosition(0, 0, 480, 272);
90006528:	f104 0640 	add.w	r6, r4, #64	; 0x40
9000652c:	f8c4 3a58 	str.w	r3, [r4, #2648]	; 0xa58
90006530:	4b76      	ldr	r3, [pc, #472]	; (9000670c <_ZN15Screen1ViewBaseC1Ev+0xc54>)
        setWidth(width);
90006532:	4630      	mov	r0, r6
90006534:	f8c4 2a20 	str.w	r2, [r4, #2592]	; 0xa20
90006538:	f8c4 3a60 	str.w	r3, [r4, #2656]	; 0xa60
9000653c:	f8a4 8a24 	strh.w	r8, [r4, #2596]	; 0xa24
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
90006540:	f204 58bc 	addw	r8, r4, #1468	; 0x5bc
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006544:	f8c4 ba38 	str.w	fp, [r4, #2616]	; 0xa38
90006548:	f204 6b04 	addw	fp, r4, #1540	; 0x604
9000654c:	f8c4 7a2e 	str.w	r7, [r4, #2606]	; 0xa2e
        : x(0), y(0), width(0), height(0)
90006550:	f8c4 59fc 	str.w	r5, [r4, #2556]	; 0x9fc
90006554:	f8c4 5a00 	str.w	r5, [r4, #2560]	; 0xa00
90006558:	f8c4 5a04 	str.w	r5, [r4, #2564]	; 0xa04
9000655c:	f8c4 5a08 	str.w	r5, [r4, #2568]	; 0xa08
          visible(true)
90006560:	f8c4 5a0c 	str.w	r5, [r4, #2572]	; 0xa0c
90006564:	f8c4 5a10 	str.w	r5, [r4, #2576]	; 0xa10
90006568:	f8c4 5a14 	str.w	r5, [r4, #2580]	; 0xa14
9000656c:	f8c4 5a18 	str.w	r5, [r4, #2584]	; 0xa18
        : color(col)
90006570:	f8c4 5a28 	str.w	r5, [r4, #2600]	; 0xa28
90006574:	f8a4 5a2c 	strh.w	r5, [r4, #2604]	; 0xa2c
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
90006578:	f8c4 5a34 	str.w	r5, [r4, #2612]	; 0xa34
              text(0)
9000657c:	f8c4 5a3c 	str.w	r5, [r4, #2620]	; 0xa3c
90006580:	f8c4 4a5c 	str.w	r4, [r4, #2652]	; 0xa5c
90006584:	f8c4 5a64 	str.w	r5, [r4, #2660]	; 0xa64
        rect.x = x;
90006588:	6465      	str	r5, [r4, #68]	; 0x44
        setWidth(width);
9000658a:	f7fc f811 	bl	900025b0 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
9000658e:	4630      	mov	r0, r6
90006590:	f44f 7188 	mov.w	r1, #272	; 0x110
90006594:	f7fc f80e 	bl	900025b4 <_ZN8touchgfx8Drawable9setHeightEs>
        color = newColor;
90006598:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
9000659c:	4631      	mov	r1, r6
9000659e:	1d26      	adds	r6, r4, #4
900065a0:	66a3      	str	r3, [r4, #104]	; 0x68
900065a2:	4630      	mov	r0, r6
900065a4:	f00e f888 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_BACKGROUNDS_480X272_ASPHALT_ID));
900065a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900065aa:	a912      	add	r1, sp, #72	; 0x48
        rect.x = x;
900065ac:	6725      	str	r5, [r4, #112]	; 0x70
900065ae:	4610      	mov	r0, r2
900065b0:	f8ad 5048 	strh.w	r5, [sp, #72]	; 0x48
900065b4:	f010 f928 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900065b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
900065ba:	4630      	mov	r0, r6
900065bc:	4611      	mov	r1, r2
900065be:	f00e f87b 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
900065c2:	2301      	movs	r3, #1
    scalableImagePin.setBitmap(touchgfx::Bitmap(BITMAP_DARK_THEME_IMAGES_CONTAINERS_LARGE_NARROW_LIGHT_ID));
900065c4:	a912      	add	r1, sp, #72	; 0x48
900065c6:	ee18 0a10 	vmov	r0, s16
900065ca:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
900065ce:	f010 f91b 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
900065d2:	4a4f      	ldr	r2, [pc, #316]	; (90006710 <_ZN15Screen1ViewBaseC1Ev+0xc58>)
    scalableImagePin.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
900065d4:	4629      	mov	r1, r5
900065d6:	4b4f      	ldr	r3, [pc, #316]	; (90006714 <_ZN15Screen1ViewBaseC1Ev+0xc5c>)
900065d8:	ee18 0a10 	vmov	r0, s16
900065dc:	e9c4 2327 	strd	r2, r3, [r4, #156]	; 0x9c
900065e0:	f00f fa01 	bl	900159e6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
900065e4:	ee18 1a10 	vmov	r1, s16
900065e8:	4630      	mov	r0, r6
900065ea:	f00e f865 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    flexButtonCallback(this, &Screen1ViewBase::flexButtonCallbackHandler)
900065ee:	f204 604c 	addw	r0, r4, #1612	; 0x64c
        borderUp = borderColorReleased;
900065f2:	4949      	ldr	r1, [pc, #292]	; (90006718 <_ZN15Screen1ViewBaseC1Ev+0xc60>)
        rect.width = width;
900065f4:	f04f 1332 	mov.w	r3, #3276850	; 0x320032
900065f8:	ee09 0a10 	vmov	s18, r0
900065fc:	f204 6094 	addw	r0, r4, #1684	; 0x694
90006600:	f8c4 1134 	str.w	r1, [r4, #308]	; 0x134
        borderDown = borderColorPressed;
90006604:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
90006608:	ee09 0a90 	vmov	s19, r0
9000660c:	f204 60dc 	addw	r0, r4, #1756	; 0x6dc
90006610:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
90006614:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
90006618:	ee0a 0a10 	vmov	s20, r0
9000661c:	f204 7024 	addw	r0, r4, #1828	; 0x724
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
90006620:	2305      	movs	r3, #5
        down = colorPressed;
90006622:	4a3e      	ldr	r2, [pc, #248]	; (9000671c <_ZN15Screen1ViewBaseC1Ev+0xc64>)
90006624:	ee0a 0a90 	vmov	s21, r0
90006628:	f204 706c 	addw	r0, r4, #1900	; 0x76c
9000662c:	f8a4 3128 	strh.w	r3, [r4, #296]	; 0x128
90006630:	ee0b 0a10 	vmov	s22, r0
90006634:	f204 70b4 	addw	r0, r4, #1972	; 0x7b4
90006638:	4b39      	ldr	r3, [pc, #228]	; (90006720 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
9000663a:	ee0b 0a90 	vmov	s23, r0
        borderDown = borderColorPressed;
9000663e:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
90006642:	f604 10f8 	addw	r0, r4, #2552	; 0x9f8
        borderBox.setColor(T::getPressed() ? down : up);
90006646:	f894 10f0 	ldrb.w	r1, [r4, #240]	; 0xf0
        rect.x = x;
9000664a:	f8c4 50fc 	str.w	r5, [r4, #252]	; 0xfc
9000664e:	ee0c 0a10 	vmov	s24, r0
        down = colorPressed;
90006652:	e9c4 324b 	strd	r3, r2, [r4, #300]	; 0x12c
        borderBox.setColor(T::getPressed() ? down : up);
90006656:	2900      	cmp	r1, #0
90006658:	f000 84e3 	beq.w	90007022 <_ZN15Screen1ViewBaseC1Ev+0x156a>
9000665c:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
9000665e:	f504 729c 	add.w	r2, r4, #312	; 0x138
90006662:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
        rect.width = width;
90006666:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
9000666a:	6813      	ldr	r3, [r2, #0]
9000666c:	4630      	mov	r0, r6
9000666e:	9901      	ldr	r1, [sp, #4]
        borderColor = colorBorder;
90006670:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
    button1.setAction(flexButtonCallback);
90006674:	f604 2358 	addw	r3, r4, #2648	; 0xa58
90006678:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
9000667c:	9301      	str	r3, [sp, #4]
        action = &callback;
9000667e:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
        rect.x = x;
90006682:	4b28      	ldr	r3, [pc, #160]	; (90006724 <_ZN15Screen1ViewBaseC1Ev+0xc6c>)
90006684:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
90006688:	f00e f816 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
9000668c:	4922      	ldr	r1, [pc, #136]	; (90006718 <_ZN15Screen1ViewBaseC1Ev+0xc60>)
9000668e:	2300      	movs	r3, #0
        down = colorPressed;
90006690:	4a22      	ldr	r2, [pc, #136]	; (9000671c <_ZN15Screen1ViewBaseC1Ev+0xc64>)
        borderUp = borderColorReleased;
90006692:	f8c4 11ac 	str.w	r1, [r4, #428]	; 0x1ac
        borderDown = borderColorPressed;
90006696:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
9000669a:	f8c4 3174 	str.w	r3, [r4, #372]	; 0x174
        borderSize = size;
9000669e:	2305      	movs	r3, #5
900066a0:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
900066a4:	f8c4 5178 	str.w	r5, [r4, #376]	; 0x178
900066a8:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
900066ac:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
        down = colorPressed;
900066b0:	4b1b      	ldr	r3, [pc, #108]	; (90006720 <_ZN15Screen1ViewBaseC1Ev+0xc68>)
        borderBox.setColor(T::getPressed() ? down : up);
900066b2:	f894 1168 	ldrb.w	r1, [r4, #360]	; 0x168
        down = colorPressed;
900066b6:	e9c4 3269 	strd	r3, r2, [r4, #420]	; 0x1a4
        borderBox.setColor(T::getPressed() ? down : up);
900066ba:	2900      	cmp	r1, #0
900066bc:	f000 84d0 	beq.w	90007060 <_ZN15Screen1ViewBaseC1Ev+0x15a8>
900066c0:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
900066c2:	f504 72d8 	add.w	r2, r4, #432	; 0x1b0
900066c6:	f8c4 3198 	str.w	r3, [r4, #408]	; 0x198
        rect.x = x;
900066ca:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
900066ce:	6813      	ldr	r3, [r2, #0]
900066d0:	4630      	mov	r0, r6
        borderColor = colorBorder;
900066d2:	f8c4 319c 	str.w	r3, [r4, #412]	; 0x19c
900066d6:	e9dd 3101 	ldrd	r3, r1, [sp, #4]
900066da:	f8c4 316c 	str.w	r3, [r4, #364]	; 0x16c
900066de:	4b12      	ldr	r3, [pc, #72]	; (90006728 <_ZN15Screen1ViewBaseC1Ev+0xc70>)
900066e0:	e9c4 3550 	strd	r3, r5, [r4, #320]	; 0x140
900066e4:	f00d ffe8 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
900066e8:	490b      	ldr	r1, [pc, #44]	; (90006718 <_ZN15Screen1ViewBaseC1Ev+0xc60>)
900066ea:	2300      	movs	r3, #0
900066ec:	e01e      	b.n	9000672c <_ZN15Screen1ViewBaseC1Ev+0xc74>
900066ee:	bf00      	nop
900066f0:	9002b478 	.word	0x9002b478
900066f4:	90029fe4 	.word	0x90029fe4
900066f8:	9002a544 	.word	0x9002a544
900066fc:	9002b410 	.word	0x9002b410
90006700:	9002a5d4 	.word	0x9002a5d4
90006704:	9002b318 	.word	0x9002b318
90006708:	9002a70c 	.word	0x9002a70c
9000670c:	900056ad 	.word	0x900056ad
90006710:	00200082 	.word	0x00200082
90006714:	003400dc 	.word	0x003400dc
90006718:	ff003366 	.word	0xff003366
9000671c:	ff0099cc 	.word	0xff0099cc
90006720:	ff006699 	.word	0xff006699
90006724:	005d0094 	.word	0x005d0094
90006728:	005d00d6 	.word	0x005d00d6
        down = colorPressed;
9000672c:	4ada      	ldr	r2, [pc, #872]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
9000672e:	f8c4 1224 	str.w	r1, [r4, #548]	; 0x224
        borderDown = borderColorPressed;
90006732:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
90006736:	f8c4 31ec 	str.w	r3, [r4, #492]	; 0x1ec
        borderSize = size;
9000673a:	2305      	movs	r3, #5
9000673c:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
90006740:	f8c4 51f0 	str.w	r5, [r4, #496]	; 0x1f0
90006744:	f8a4 3218 	strh.w	r3, [r4, #536]	; 0x218
90006748:	f8c4 1228 	str.w	r1, [r4, #552]	; 0x228
        down = colorPressed;
9000674c:	4bd3      	ldr	r3, [pc, #844]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
9000674e:	f894 11e0 	ldrb.w	r1, [r4, #480]	; 0x1e0
        down = colorPressed;
90006752:	e9c4 3287 	strd	r3, r2, [r4, #540]	; 0x21c
        borderBox.setColor(T::getPressed() ? down : up);
90006756:	2900      	cmp	r1, #0
90006758:	f000 847e 	beq.w	90007058 <_ZN15Screen1ViewBaseC1Ev+0x15a0>
9000675c:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
9000675e:	f504 720a 	add.w	r2, r4, #552	; 0x228
90006762:	f8c4 3210 	str.w	r3, [r4, #528]	; 0x210
        rect.x = x;
90006766:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
9000676a:	6813      	ldr	r3, [r2, #0]
9000676c:	4630      	mov	r0, r6
9000676e:	9903      	ldr	r1, [sp, #12]
        borderColor = colorBorder;
90006770:	f8c4 3214 	str.w	r3, [r4, #532]	; 0x214
90006774:	9b01      	ldr	r3, [sp, #4]
90006776:	f8c4 31e4 	str.w	r3, [r4, #484]	; 0x1e4
9000677a:	4bc9      	ldr	r3, [pc, #804]	; (90006aa0 <_ZN15Screen1ViewBaseC1Ev+0xfe8>)
9000677c:	e9c4 356e 	strd	r3, r5, [r4, #440]	; 0x1b8
90006780:	f00d ff9a 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
90006784:	49c7      	ldr	r1, [pc, #796]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
90006786:	2300      	movs	r3, #0
        down = colorPressed;
90006788:	4ac3      	ldr	r2, [pc, #780]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
9000678a:	f8c4 129c 	str.w	r1, [r4, #668]	; 0x29c
        borderDown = borderColorPressed;
9000678e:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
90006792:	f8c4 3264 	str.w	r3, [r4, #612]	; 0x264
        borderSize = size;
90006796:	2305      	movs	r3, #5
90006798:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
9000679c:	f8c4 5268 	str.w	r5, [r4, #616]	; 0x268
900067a0:	f8a4 3290 	strh.w	r3, [r4, #656]	; 0x290
900067a4:	f8c4 12a0 	str.w	r1, [r4, #672]	; 0x2a0
        down = colorPressed;
900067a8:	4bbc      	ldr	r3, [pc, #752]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
900067aa:	f894 1258 	ldrb.w	r1, [r4, #600]	; 0x258
        down = colorPressed;
900067ae:	e9c4 32a5 	strd	r3, r2, [r4, #660]	; 0x294
        borderBox.setColor(T::getPressed() ? down : up);
900067b2:	2900      	cmp	r1, #0
900067b4:	f000 844c 	beq.w	90007050 <_ZN15Screen1ViewBaseC1Ev+0x1598>
900067b8:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
900067ba:	f504 7228 	add.w	r2, r4, #672	; 0x2a0
900067be:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
        rect.x = x;
900067c2:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
900067c6:	6813      	ldr	r3, [r2, #0]
900067c8:	4630      	mov	r0, r6
900067ca:	9904      	ldr	r1, [sp, #16]
        borderColor = colorBorder;
900067cc:	f8c4 328c 	str.w	r3, [r4, #652]	; 0x28c
900067d0:	9b01      	ldr	r3, [sp, #4]
900067d2:	f8c4 325c 	str.w	r3, [r4, #604]	; 0x25c
900067d6:	4bb4      	ldr	r3, [pc, #720]	; (90006aa8 <_ZN15Screen1ViewBaseC1Ev+0xff0>)
900067d8:	e9c4 358c 	strd	r3, r5, [r4, #560]	; 0x230
900067dc:	f00d ff6c 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
900067e0:	49b0      	ldr	r1, [pc, #704]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
900067e2:	2300      	movs	r3, #0
        down = colorPressed;
900067e4:	4aac      	ldr	r2, [pc, #688]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
900067e6:	f8c4 1314 	str.w	r1, [r4, #788]	; 0x314
        borderDown = borderColorPressed;
900067ea:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
900067ee:	f8c4 32dc 	str.w	r3, [r4, #732]	; 0x2dc
        borderSize = size;
900067f2:	2305      	movs	r3, #5
900067f4:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
900067f8:	f8c4 52e0 	str.w	r5, [r4, #736]	; 0x2e0
900067fc:	f8a4 3308 	strh.w	r3, [r4, #776]	; 0x308
90006800:	f8c4 1318 	str.w	r1, [r4, #792]	; 0x318
        down = colorPressed;
90006804:	4ba5      	ldr	r3, [pc, #660]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
90006806:	f894 12d0 	ldrb.w	r1, [r4, #720]	; 0x2d0
        down = colorPressed;
9000680a:	e9c4 32c3 	strd	r3, r2, [r4, #780]	; 0x30c
        borderBox.setColor(T::getPressed() ? down : up);
9000680e:	2900      	cmp	r1, #0
90006810:	f000 841a 	beq.w	90007048 <_ZN15Screen1ViewBaseC1Ev+0x1590>
90006814:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90006816:	f504 7246 	add.w	r2, r4, #792	; 0x318
9000681a:	f8c4 3300 	str.w	r3, [r4, #768]	; 0x300
        rect.x = x;
9000681e:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
90006822:	6813      	ldr	r3, [r2, #0]
90006824:	4630      	mov	r0, r6
90006826:	9905      	ldr	r1, [sp, #20]
        borderColor = colorBorder;
90006828:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
9000682c:	9b01      	ldr	r3, [sp, #4]
9000682e:	f8c4 32d4 	str.w	r3, [r4, #724]	; 0x2d4
90006832:	4b9e      	ldr	r3, [pc, #632]	; (90006aac <_ZN15Screen1ViewBaseC1Ev+0xff4>)
90006834:	e9c4 35aa 	strd	r3, r5, [r4, #680]	; 0x2a8
90006838:	f00d ff3e 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
9000683c:	4999      	ldr	r1, [pc, #612]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
9000683e:	2300      	movs	r3, #0
        down = colorPressed;
90006840:	4a95      	ldr	r2, [pc, #596]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
90006842:	f8c4 138c 	str.w	r1, [r4, #908]	; 0x38c
        borderDown = borderColorPressed;
90006846:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
9000684a:	f8c4 3354 	str.w	r3, [r4, #852]	; 0x354
        borderSize = size;
9000684e:	2305      	movs	r3, #5
90006850:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
90006854:	f8c4 5358 	str.w	r5, [r4, #856]	; 0x358
90006858:	f8a4 3380 	strh.w	r3, [r4, #896]	; 0x380
9000685c:	f8c4 1390 	str.w	r1, [r4, #912]	; 0x390
        down = colorPressed;
90006860:	4b8e      	ldr	r3, [pc, #568]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
90006862:	f894 1348 	ldrb.w	r1, [r4, #840]	; 0x348
        down = colorPressed;
90006866:	e9c4 32e1 	strd	r3, r2, [r4, #900]	; 0x384
        borderBox.setColor(T::getPressed() ? down : up);
9000686a:	2900      	cmp	r1, #0
9000686c:	f000 83e9 	beq.w	90007042 <_ZN15Screen1ViewBaseC1Ev+0x158a>
90006870:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90006872:	f504 7264 	add.w	r2, r4, #912	; 0x390
90006876:	f8c4 3378 	str.w	r3, [r4, #888]	; 0x378
        rect.x = x;
9000687a:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
9000687e:	6813      	ldr	r3, [r2, #0]
90006880:	4630      	mov	r0, r6
90006882:	9906      	ldr	r1, [sp, #24]
        borderColor = colorBorder;
90006884:	f8c4 337c 	str.w	r3, [r4, #892]	; 0x37c
90006888:	9b01      	ldr	r3, [sp, #4]
9000688a:	f8c4 334c 	str.w	r3, [r4, #844]	; 0x34c
9000688e:	4b88      	ldr	r3, [pc, #544]	; (90006ab0 <_ZN15Screen1ViewBaseC1Ev+0xff8>)
90006890:	e9c4 35c8 	strd	r3, r5, [r4, #800]	; 0x320
90006894:	f00d ff10 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
90006898:	4982      	ldr	r1, [pc, #520]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
9000689a:	2300      	movs	r3, #0
        down = colorPressed;
9000689c:	4a7e      	ldr	r2, [pc, #504]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
9000689e:	f8c4 1404 	str.w	r1, [r4, #1028]	; 0x404
        borderDown = borderColorPressed;
900068a2:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
900068a6:	f8c4 33cc 	str.w	r3, [r4, #972]	; 0x3cc
        borderSize = size;
900068aa:	2305      	movs	r3, #5
900068ac:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
900068b0:	f8c4 53d0 	str.w	r5, [r4, #976]	; 0x3d0
900068b4:	f8a4 33f8 	strh.w	r3, [r4, #1016]	; 0x3f8
900068b8:	f8c4 1408 	str.w	r1, [r4, #1032]	; 0x408
        up = colorReleased;
900068bc:	4b77      	ldr	r3, [pc, #476]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
900068be:	f894 13c0 	ldrb.w	r1, [r4, #960]	; 0x3c0
        up = colorReleased;
900068c2:	f8c4 33fc 	str.w	r3, [r4, #1020]	; 0x3fc
        down = colorPressed;
900068c6:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
        borderBox.setColor(T::getPressed() ? down : up);
900068ca:	2900      	cmp	r1, #0
900068cc:	f000 83b6 	beq.w	9000703c <_ZN15Screen1ViewBaseC1Ev+0x1584>
900068d0:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
900068d2:	f504 6281 	add.w	r2, r4, #1032	; 0x408
900068d6:	f8c4 33f0 	str.w	r3, [r4, #1008]	; 0x3f0
        rect.x = x;
900068da:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
900068de:	6813      	ldr	r3, [r2, #0]
900068e0:	4630      	mov	r0, r6
900068e2:	9907      	ldr	r1, [sp, #28]
        borderColor = colorBorder;
900068e4:	f8c4 33f4 	str.w	r3, [r4, #1012]	; 0x3f4
900068e8:	9b01      	ldr	r3, [sp, #4]
900068ea:	f8c4 33c4 	str.w	r3, [r4, #964]	; 0x3c4
900068ee:	4b71      	ldr	r3, [pc, #452]	; (90006ab4 <_ZN15Screen1ViewBaseC1Ev+0xffc>)
900068f0:	e9c4 35e6 	strd	r3, r5, [r4, #920]	; 0x398
900068f4:	f00d fee0 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
900068f8:	496a      	ldr	r1, [pc, #424]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
900068fa:	2300      	movs	r3, #0
        down = colorPressed;
900068fc:	4a66      	ldr	r2, [pc, #408]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
900068fe:	f8c4 147c 	str.w	r1, [r4, #1148]	; 0x47c
        borderDown = borderColorPressed;
90006902:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
90006906:	f8c4 3444 	str.w	r3, [r4, #1092]	; 0x444
        borderSize = size;
9000690a:	2305      	movs	r3, #5
9000690c:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
90006910:	f8c4 5448 	str.w	r5, [r4, #1096]	; 0x448
90006914:	f8a4 3470 	strh.w	r3, [r4, #1136]	; 0x470
90006918:	f8c4 1480 	str.w	r1, [r4, #1152]	; 0x480
        up = colorReleased;
9000691c:	4b5f      	ldr	r3, [pc, #380]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
9000691e:	f894 1438 	ldrb.w	r1, [r4, #1080]	; 0x438
        up = colorReleased;
90006922:	f8c4 3474 	str.w	r3, [r4, #1140]	; 0x474
        down = colorPressed;
90006926:	f8c4 2478 	str.w	r2, [r4, #1144]	; 0x478
        borderBox.setColor(T::getPressed() ? down : up);
9000692a:	2900      	cmp	r1, #0
9000692c:	f000 8383 	beq.w	90007036 <_ZN15Screen1ViewBaseC1Ev+0x157e>
90006930:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90006932:	f504 6290 	add.w	r2, r4, #1152	; 0x480
90006936:	f8c4 3468 	str.w	r3, [r4, #1128]	; 0x468
9000693a:	f04f 1532 	mov.w	r5, #3276850	; 0x320032
9000693e:	6813      	ldr	r3, [r2, #0]
90006940:	4630      	mov	r0, r6
90006942:	9908      	ldr	r1, [sp, #32]
        borderColor = colorBorder;
90006944:	f8c4 346c 	str.w	r3, [r4, #1132]	; 0x46c
90006948:	9b01      	ldr	r3, [sp, #4]
9000694a:	f8c4 5414 	str.w	r5, [r4, #1044]	; 0x414
9000694e:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
        rect.x = x;
90006952:	4b59      	ldr	r3, [pc, #356]	; (90006ab8 <_ZN15Screen1ViewBaseC1Ev+0x1000>)
90006954:	f8c4 3410 	str.w	r3, [r4, #1040]	; 0x410
90006958:	f00d feae 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderUp = borderColorReleased;
9000695c:	4951      	ldr	r1, [pc, #324]	; (90006aa4 <_ZN15Screen1ViewBaseC1Ev+0xfec>)
9000695e:	2300      	movs	r3, #0
        down = colorPressed;
90006960:	4a4d      	ldr	r2, [pc, #308]	; (90006a98 <_ZN15Screen1ViewBaseC1Ev+0xfe0>)
        borderUp = borderColorReleased;
90006962:	f8c4 14f4 	str.w	r1, [r4, #1268]	; 0x4f4
        borderDown = borderColorPressed;
90006966:	f101 1133 	add.w	r1, r1, #3342387	; 0x330033
9000696a:	f8c4 34bc 	str.w	r3, [r4, #1212]	; 0x4bc
        borderSize = size;
9000696e:	2305      	movs	r3, #5
90006970:	f501 514c 	add.w	r1, r1, #13056	; 0x3300
        rect.width = width;
90006974:	f8c4 54c0 	str.w	r5, [r4, #1216]	; 0x4c0
90006978:	f8a4 34e8 	strh.w	r3, [r4, #1256]	; 0x4e8
9000697c:	f8c4 14f8 	str.w	r1, [r4, #1272]	; 0x4f8
        up = colorReleased;
90006980:	4b46      	ldr	r3, [pc, #280]	; (90006a9c <_ZN15Screen1ViewBaseC1Ev+0xfe4>)
        borderBox.setColor(T::getPressed() ? down : up);
90006982:	f894 14b0 	ldrb.w	r1, [r4, #1200]	; 0x4b0
        up = colorReleased;
90006986:	f8c4 34ec 	str.w	r3, [r4, #1260]	; 0x4ec
        down = colorPressed;
9000698a:	f8c4 24f0 	str.w	r2, [r4, #1264]	; 0x4f0
        borderBox.setColor(T::getPressed() ? down : up);
9000698e:	2900      	cmp	r1, #0
90006990:	f000 834e 	beq.w	90007030 <_ZN15Screen1ViewBaseC1Ev+0x1578>
90006994:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90006996:	f504 629f 	add.w	r2, r4, #1272	; 0x4f8
9000699a:	f8c4 34e0 	str.w	r3, [r4, #1248]	; 0x4e0
9000699e:	4630      	mov	r0, r6
900069a0:	6813      	ldr	r3, [r2, #0]
900069a2:	9909      	ldr	r1, [sp, #36]	; 0x24
        borderColor = colorBorder;
900069a4:	f8c4 34e4 	str.w	r3, [r4, #1252]	; 0x4e4
900069a8:	9b01      	ldr	r3, [sp, #4]
900069aa:	f8c4 34b4 	str.w	r3, [r4, #1204]	; 0x4b4
        rect.x = x;
900069ae:	4b43      	ldr	r3, [pc, #268]	; (90006abc <_ZN15Screen1ViewBaseC1Ev+0x1004>)
900069b0:	f8c4 3488 	str.w	r3, [r4, #1160]	; 0x488
        rect.width = width;
900069b4:	f04f 1332 	mov.w	r3, #3276850	; 0x320032
900069b8:	f8c4 348c 	str.w	r3, [r4, #1164]	; 0x48c
900069bc:	f00d fe7c 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
900069c0:	2300      	movs	r3, #0
        borderUp = borderColorReleased;
900069c2:	493f      	ldr	r1, [pc, #252]	; (90006ac0 <_ZN15Screen1ViewBaseC1Ev+0x1008>)
900069c4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
        rect.width = width;
900069c8:	4b3e      	ldr	r3, [pc, #248]	; (90006ac4 <_ZN15Screen1ViewBaseC1Ev+0x100c>)
900069ca:	f8c4 156c 	str.w	r1, [r4, #1388]	; 0x56c
900069ce:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
        borderSize = size;
900069d2:	2305      	movs	r3, #5
        borderDown = borderColorPressed;
900069d4:	493c      	ldr	r1, [pc, #240]	; (90006ac8 <_ZN15Screen1ViewBaseC1Ev+0x1010>)
        down = colorPressed;
900069d6:	4a3d      	ldr	r2, [pc, #244]	; (90006acc <_ZN15Screen1ViewBaseC1Ev+0x1014>)
900069d8:	f8a4 3560 	strh.w	r3, [r4, #1376]	; 0x560
        borderDown = borderColorPressed;
900069dc:	f8c4 1570 	str.w	r1, [r4, #1392]	; 0x570
        up = colorReleased;
900069e0:	4b3b      	ldr	r3, [pc, #236]	; (90006ad0 <_ZN15Screen1ViewBaseC1Ev+0x1018>)
        borderBox.setColor(T::getPressed() ? down : up);
900069e2:	f894 1528 	ldrb.w	r1, [r4, #1320]	; 0x528
        up = colorReleased;
900069e6:	f8c4 3564 	str.w	r3, [r4, #1380]	; 0x564
        down = colorPressed;
900069ea:	f8c4 2568 	str.w	r2, [r4, #1384]	; 0x568
        borderBox.setColor(T::getPressed() ? down : up);
900069ee:	2900      	cmp	r1, #0
900069f0:	f000 831b 	beq.w	9000702a <_ZN15Screen1ViewBaseC1Ev+0x1572>
900069f4:	4613      	mov	r3, r2
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
900069f6:	f504 62ae 	add.w	r2, r4, #1392	; 0x570
900069fa:	f8c4 3558 	str.w	r3, [r4, #1368]	; 0x558
        visible = vis;
900069fe:	2700      	movs	r7, #0
90006a00:	6813      	ldr	r3, [r2, #0]
90006a02:	ee18 1a90 	vmov	r1, s17
90006a06:	4630      	mov	r0, r6
90006a08:	f884 7521 	strb.w	r7, [r4, #1313]	; 0x521
        borderColor = colorBorder;
90006a0c:	f8c4 355c 	str.w	r3, [r4, #1372]	; 0x55c
        boundingArea = calculateBoundingArea();
90006a10:	ad0e      	add	r5, sp, #56	; 0x38
90006a12:	9b01      	ldr	r3, [sp, #4]
90006a14:	f8c4 352c 	str.w	r3, [r4, #1324]	; 0x52c
        rect.x = x;
90006a18:	4b2e      	ldr	r3, [pc, #184]	; (90006ad4 <_ZN15Screen1ViewBaseC1Ev+0x101c>)
90006a1a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
        rect.width = width;
90006a1e:	4b29      	ldr	r3, [pc, #164]	; (90006ac4 <_ZN15Screen1ViewBaseC1Ev+0x100c>)
90006a20:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
90006a24:	f00d fe48 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006a28:	f04f 33ff 	mov.w	r3, #4294967295
        boundingArea = calculateBoundingArea();
90006a2c:	4649      	mov	r1, r9
90006a2e:	4628      	mov	r0, r5
        color = newColor;
90006a30:	f8c4 35a4 	str.w	r3, [r4, #1444]	; 0x5a4
        rect.x = x;
90006a34:	4b28      	ldr	r3, [pc, #160]	; (90006ad8 <_ZN15Screen1ViewBaseC1Ev+0x1020>)
        linespace = space;
90006a36:	f8a4 75a8 	strh.w	r7, [r4, #1448]	; 0x5a8
90006a3a:	f8c4 3578 	str.w	r3, [r4, #1400]	; 0x578
        boundingArea = calculateBoundingArea();
90006a3e:	f00f fadf 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006a42:	2210      	movs	r2, #16
90006a44:	4b25      	ldr	r3, [pc, #148]	; (90006adc <_ZN15Screen1ViewBaseC1Ev+0x1024>)
90006a46:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
    textAreaCountdownAlarmSet.setXY(208, 45);
90006a4a:	f604 0244 	addw	r2, r4, #2116	; 0x844
90006a4e:	9312      	str	r3, [sp, #72]	; 0x48
90006a50:	f109 033c 	add.w	r3, r9, #60	; 0x3c
90006a54:	ee08 2a10 	vmov	s16, r2
    Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7BTU).getText());
90006a58:	f504 6224 	add.w	r2, r4, #2624	; 0xa40
90006a5c:	9202      	str	r2, [sp, #8]
90006a5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006a62:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaActivate.setTypedText(touchgfx::TypedText(T___SINGLEUSE_E7OF));
90006a66:	a912      	add	r1, sp, #72	; 0x48
90006a68:	4648      	mov	r0, r9
90006a6a:	f00f fd71 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006a6e:	4649      	mov	r1, r9
90006a70:	4630      	mov	r0, r6
        visible = vis;
90006a72:	f884 7599 	strb.w	r7, [r4, #1433]	; 0x599
90006a76:	f00d fe1f 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006a7a:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
        rect.x = x;
90006a7e:	4b18      	ldr	r3, [pc, #96]	; (90006ae0 <_ZN15Screen1ViewBaseC1Ev+0x1028>)
        boundingArea = calculateBoundingArea();
90006a80:	4641      	mov	r1, r8
90006a82:	4628      	mov	r0, r5
        color = newColor;
90006a84:	f8c4 25ec 	str.w	r2, [r4, #1516]	; 0x5ec
90006a88:	f8c4 35c0 	str.w	r3, [r4, #1472]	; 0x5c0
        linespace = space;
90006a8c:	f8a4 75f0 	strh.w	r7, [r4, #1520]	; 0x5f0
        boundingArea = calculateBoundingArea();
90006a90:	f00f fab6 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006a94:	e026      	b.n	90006ae4 <_ZN15Screen1ViewBaseC1Ev+0x102c>
90006a96:	bf00      	nop
90006a98:	ff0099cc 	.word	0xff0099cc
90006a9c:	ff006699 	.word	0xff006699
90006aa0:	005d0118 	.word	0x005d0118
90006aa4:	ff003366 	.word	0xff003366
90006aa8:	009b0095 	.word	0x009b0095
90006aac:	009b00d7 	.word	0x009b00d7
90006ab0:	009b0118 	.word	0x009b0118
90006ab4:	00d60095 	.word	0x00d60095
90006ab8:	00d600d7 	.word	0x00d600d7
90006abc:	00d60118 	.word	0x00d60118
90006ac0:	ff54210b 	.word	0xff54210b
90006ac4:	004d00e8 	.word	0x004d00e8
90006ac8:	ff993608 	.word	0xff993608
90006acc:	ffcc4100 	.word	0xffcc4100
90006ad0:	ff993000 	.word	0xff993000
90006ad4:	008e0075 	.word	0x008e0075
90006ad8:	00a80089 	.word	0x00a80089
90006adc:	90029fe4 	.word	0x90029fe4
90006ae0:	006a00a7 	.word	0x006a00a7
90006ae4:	4bdf      	ldr	r3, [pc, #892]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006ae6:	220f      	movs	r2, #15
90006ae8:	9312      	str	r3, [sp, #72]	; 0x48
90006aea:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006aee:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006af2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006af6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea1.setTypedText(touchgfx::TypedText(T___SINGLEUSE_MFQA));
90006afa:	4640      	mov	r0, r8
90006afc:	a912      	add	r1, sp, #72	; 0x48
90006afe:	f00f fd27 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006b02:	4641      	mov	r1, r8
90006b04:	4630      	mov	r0, r6
90006b06:	ee19 8a10 	vmov	r8, s18
90006b0a:	f00d fdd5 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006b0e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006b12:	4bd5      	ldr	r3, [pc, #852]	; (90006e68 <_ZN15Screen1ViewBaseC1Ev+0x13b0>)
        boundingArea = calculateBoundingArea();
90006b14:	4659      	mov	r1, fp
90006b16:	4628      	mov	r0, r5
        color = newColor;
90006b18:	f8c4 2634 	str.w	r2, [r4, #1588]	; 0x634
90006b1c:	f8c4 3608 	str.w	r3, [r4, #1544]	; 0x608
        linespace = space;
90006b20:	f8a4 7638 	strh.w	r7, [r4, #1592]	; 0x638
        boundingArea = calculateBoundingArea();
90006b24:	f00f fa6c 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006b28:	4bce      	ldr	r3, [pc, #824]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006b2a:	220a      	movs	r2, #10
90006b2c:	9312      	str	r3, [sp, #72]	; 0x48
90006b2e:	f10b 033c 	add.w	r3, fp, #60	; 0x3c
90006b32:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006b36:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006b3a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea6.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QDCW));
90006b3e:	a912      	add	r1, sp, #72	; 0x48
90006b40:	4658      	mov	r0, fp
90006b42:	f00f fd05 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006b46:	4659      	mov	r1, fp
90006b48:	4630      	mov	r0, r6
90006b4a:	f00d fdb5 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006b4e:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006b52:	4bc6      	ldr	r3, [pc, #792]	; (90006e6c <_ZN15Screen1ViewBaseC1Ev+0x13b4>)
        boundingArea = calculateBoundingArea();
90006b54:	ee19 1a10 	vmov	r1, s18
90006b58:	4628      	mov	r0, r5
        color = newColor;
90006b5a:	f8c4 267c 	str.w	r2, [r4, #1660]	; 0x67c
90006b5e:	f8c4 3650 	str.w	r3, [r4, #1616]	; 0x650
        linespace = space;
90006b62:	f8a4 7680 	strh.w	r7, [r4, #1664]	; 0x680
        boundingArea = calculateBoundingArea();
90006b66:	f00f fa4b 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006b6a:	4bbe      	ldr	r3, [pc, #760]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006b6c:	220e      	movs	r2, #14
90006b6e:	9312      	str	r3, [sp, #72]	; 0x48
90006b70:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006b74:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006b78:	ee19 8a90 	vmov	r8, s19
90006b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006b80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea2.setTypedText(touchgfx::TypedText(T___SINGLEUSE_IY11));
90006b84:	a912      	add	r1, sp, #72	; 0x48
90006b86:	ee19 0a10 	vmov	r0, s18
90006b8a:	f00f fce1 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006b8e:	ee19 1a10 	vmov	r1, s18
90006b92:	4630      	mov	r0, r6
90006b94:	f00d fd90 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006b98:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006b9c:	4bb4      	ldr	r3, [pc, #720]	; (90006e70 <_ZN15Screen1ViewBaseC1Ev+0x13b8>)
        boundingArea = calculateBoundingArea();
90006b9e:	ee19 1a90 	vmov	r1, s19
90006ba2:	4628      	mov	r0, r5
        color = newColor;
90006ba4:	f8c4 26c4 	str.w	r2, [r4, #1732]	; 0x6c4
90006ba8:	f8c4 3698 	str.w	r3, [r4, #1688]	; 0x698
        linespace = space;
90006bac:	f8a4 76c8 	strh.w	r7, [r4, #1736]	; 0x6c8
        boundingArea = calculateBoundingArea();
90006bb0:	f00f fa26 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006bb4:	4bab      	ldr	r3, [pc, #684]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006bb6:	220d      	movs	r2, #13
90006bb8:	9312      	str	r3, [sp, #72]	; 0x48
90006bba:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006bbe:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006bc2:	ee1a 8a10 	vmov	r8, s20
90006bc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006bca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea3.setTypedText(touchgfx::TypedText(T___SINGLEUSE_24H2));
90006bce:	a912      	add	r1, sp, #72	; 0x48
90006bd0:	ee19 0a90 	vmov	r0, s19
90006bd4:	f00f fcbc 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006bd8:	ee19 1a90 	vmov	r1, s19
90006bdc:	4630      	mov	r0, r6
90006bde:	f00d fd6b 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006be2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006be6:	4ba3      	ldr	r3, [pc, #652]	; (90006e74 <_ZN15Screen1ViewBaseC1Ev+0x13bc>)
        boundingArea = calculateBoundingArea();
90006be8:	ee1a 1a10 	vmov	r1, s20
90006bec:	4628      	mov	r0, r5
        color = newColor;
90006bee:	f8c4 270c 	str.w	r2, [r4, #1804]	; 0x70c
90006bf2:	f8c4 36e0 	str.w	r3, [r4, #1760]	; 0x6e0
        linespace = space;
90006bf6:	f8a4 7710 	strh.w	r7, [r4, #1808]	; 0x710
        boundingArea = calculateBoundingArea();
90006bfa:	f00f fa01 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006bfe:	4b99      	ldr	r3, [pc, #612]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006c00:	220c      	movs	r2, #12
90006c02:	9312      	str	r3, [sp, #72]	; 0x48
90006c04:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006c08:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006c0c:	ee1a 8a90 	vmov	r8, s21
90006c10:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006c14:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea4.setTypedText(touchgfx::TypedText(T___SINGLEUSE_6Y68));
90006c18:	a912      	add	r1, sp, #72	; 0x48
90006c1a:	ee1a 0a10 	vmov	r0, s20
90006c1e:	f00f fc97 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006c22:	ee1a 1a10 	vmov	r1, s20
90006c26:	4630      	mov	r0, r6
90006c28:	f00d fd46 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006c2c:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006c30:	4b91      	ldr	r3, [pc, #580]	; (90006e78 <_ZN15Screen1ViewBaseC1Ev+0x13c0>)
        boundingArea = calculateBoundingArea();
90006c32:	ee1a 1a90 	vmov	r1, s21
90006c36:	4628      	mov	r0, r5
        color = newColor;
90006c38:	f8c4 2754 	str.w	r2, [r4, #1876]	; 0x754
90006c3c:	f8c4 3728 	str.w	r3, [r4, #1832]	; 0x728
        linespace = space;
90006c40:	f8a4 7758 	strh.w	r7, [r4, #1880]	; 0x758
        boundingArea = calculateBoundingArea();
90006c44:	f00f f9dc 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006c48:	4b86      	ldr	r3, [pc, #536]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006c4a:	220b      	movs	r2, #11
90006c4c:	9312      	str	r3, [sp, #72]	; 0x48
90006c4e:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006c52:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006c56:	ee1b 8a10 	vmov	r8, s22
90006c5a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea5.setTypedText(touchgfx::TypedText(T___SINGLEUSE_979J));
90006c62:	a912      	add	r1, sp, #72	; 0x48
90006c64:	ee1a 0a90 	vmov	r0, s21
90006c68:	f00f fc72 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006c6c:	ee1a 1a90 	vmov	r1, s21
90006c70:	4630      	mov	r0, r6
90006c72:	f00d fd21 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006c76:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006c7a:	4b80      	ldr	r3, [pc, #512]	; (90006e7c <_ZN15Screen1ViewBaseC1Ev+0x13c4>)
        boundingArea = calculateBoundingArea();
90006c7c:	ee1b 1a10 	vmov	r1, s22
90006c80:	4628      	mov	r0, r5
        color = newColor;
90006c82:	f8c4 279c 	str.w	r2, [r4, #1948]	; 0x79c
90006c86:	f8c4 3770 	str.w	r3, [r4, #1904]	; 0x770
        linespace = space;
90006c8a:	f8a4 77a0 	strh.w	r7, [r4, #1952]	; 0x7a0
        boundingArea = calculateBoundingArea();
90006c8e:	f00f f9b7 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006c92:	4b74      	ldr	r3, [pc, #464]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006c94:	2209      	movs	r2, #9
90006c96:	9312      	str	r3, [sp, #72]	; 0x48
90006c98:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006c9c:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006ca0:	ee1b 8a90 	vmov	r8, s23
90006ca4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006ca8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea7.setTypedText(touchgfx::TypedText(T___SINGLEUSE_P3XV));
90006cac:	a912      	add	r1, sp, #72	; 0x48
90006cae:	ee1b 0a10 	vmov	r0, s22
90006cb2:	f00f fc4d 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006cb6:	ee1b 1a10 	vmov	r1, s22
90006cba:	4630      	mov	r0, r6
90006cbc:	f00d fcfc 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006cc0:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006cc4:	4b6e      	ldr	r3, [pc, #440]	; (90006e80 <_ZN15Screen1ViewBaseC1Ev+0x13c8>)
        boundingArea = calculateBoundingArea();
90006cc6:	ee1b 1a90 	vmov	r1, s23
90006cca:	4628      	mov	r0, r5
        color = newColor;
90006ccc:	f8c4 27e4 	str.w	r2, [r4, #2020]	; 0x7e4
90006cd0:	f8c4 37b8 	str.w	r3, [r4, #1976]	; 0x7b8
        linespace = space;
90006cd4:	f8a4 77e8 	strh.w	r7, [r4, #2024]	; 0x7e8
        boundingArea = calculateBoundingArea();
90006cd8:	f00f f992 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006cdc:	4b61      	ldr	r3, [pc, #388]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006cde:	2208      	movs	r2, #8
90006ce0:	9312      	str	r3, [sp, #72]	; 0x48
90006ce2:	f108 033c 	add.w	r3, r8, #60	; 0x3c
90006ce6:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006cea:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006cee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea8.setTypedText(touchgfx::TypedText(T___SINGLEUSE_QZL5));
90006cf2:	a912      	add	r1, sp, #72	; 0x48
90006cf4:	ee1b 0a90 	vmov	r0, s23
90006cf8:	f00f fc2a 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006cfc:	ee1b 1a90 	vmov	r1, s23
90006d00:	4630      	mov	r0, r6
90006d02:	f00d fcd9 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006d06:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
90006d0a:	4b5e      	ldr	r3, [pc, #376]	; (90006e84 <_ZN15Screen1ViewBaseC1Ev+0x13cc>)
        boundingArea = calculateBoundingArea();
90006d0c:	4651      	mov	r1, sl
90006d0e:	4628      	mov	r0, r5
        color = newColor;
90006d10:	f8c4 282c 	str.w	r2, [r4, #2092]	; 0x82c
90006d14:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
        linespace = space;
90006d18:	f8a4 7830 	strh.w	r7, [r4, #2096]	; 0x830
        boundingArea = calculateBoundingArea();
90006d1c:	f00f f970 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006d20:	4b50      	ldr	r3, [pc, #320]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006d22:	2207      	movs	r2, #7
90006d24:	9312      	str	r3, [sp, #72]	; 0x48
90006d26:	f10a 033c 	add.w	r3, sl, #60	; 0x3c
90006d2a:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
90006d2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006d32:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textArea9.setTypedText(touchgfx::TypedText(T___SINGLEUSE_N207));
90006d36:	a912      	add	r1, sp, #72	; 0x48
90006d38:	4650      	mov	r0, sl
90006d3a:	f00f fc09 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006d3e:	4651      	mov	r1, sl
90006d40:	4630      	mov	r0, r6
90006d42:	f00d fcb9 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        color = newColor;
90006d46:	f04f 33ff 	mov.w	r3, #4294967295
        linespace = space;
90006d4a:	f8a4 7878 	strh.w	r7, [r4, #2168]	; 0x878
        color = newColor;
90006d4e:	f8c4 3874 	str.w	r3, [r4, #2164]	; 0x874
        boundingArea = calculateBoundingArea();
90006d52:	f8c4 3884 	str.w	r3, [r4, #2180]	; 0x884
90006d56:	4b4c      	ldr	r3, [pc, #304]	; (90006e88 <_ZN15Screen1ViewBaseC1Ev+0x13d0>)
90006d58:	f8c4 7880 	str.w	r7, [r4, #2176]	; 0x880
90006d5c:	f8c4 3848 	str.w	r3, [r4, #2120]	; 0x848
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006d60:	4b4a      	ldr	r3, [pc, #296]	; (90006e8c <_ZN15Screen1ViewBaseC1Ev+0x13d4>)
90006d62:	f8c4 7888 	str.w	r7, [r4, #2184]	; 0x888
90006d66:	681b      	ldr	r3, [r3, #0]
90006d68:	2b00      	cmp	r3, #0
90006d6a:	f000 8187 	beq.w	9000707c <_ZN15Screen1ViewBaseC1Ev+0x15c4>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006d6e:	4b48      	ldr	r3, [pc, #288]	; (90006e90 <_ZN15Screen1ViewBaseC1Ev+0x13d8>)
90006d70:	881b      	ldrh	r3, [r3, #0]
90006d72:	2b05      	cmp	r3, #5
90006d74:	f240 817c 	bls.w	90007070 <_ZN15Screen1ViewBaseC1Ev+0x15b8>
        return texts->getText(typedTextId);
90006d78:	4b46      	ldr	r3, [pc, #280]	; (90006e94 <_ZN15Screen1ViewBaseC1Ev+0x13dc>)
90006d7a:	2105      	movs	r1, #5
90006d7c:	f04f 0903 	mov.w	r9, #3
    textAreaPin.setPosition(148, 43, 182, 30);
90006d80:	f604 08bc 	addw	r8, r4, #2236	; 0x8bc
90006d84:	6818      	ldr	r0, [r3, #0]
        boundingArea = calculateBoundingArea();
90006d86:	f604 0bf8 	addw	fp, r4, #2296	; 0x8f8
90006d8a:	f000 fb69 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7BTU).getText());
90006d8e:	f8dd a008 	ldr.w	sl, [sp, #8]
90006d92:	4603      	mov	r3, r0
90006d94:	4a40      	ldr	r2, [pc, #256]	; (90006e98 <_ZN15Screen1ViewBaseC1Ev+0x13e0>)
90006d96:	4649      	mov	r1, r9
90006d98:	4650      	mov	r0, sl
90006d9a:	f014 fa0f 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaCountdownAlarmSet.resizeToCurrentText();
90006d9e:	ee18 0a10 	vmov	r0, s16
        wc1 = value;
90006da2:	f8c4 a88c 	str.w	sl, [r4, #2188]	; 0x88c
90006da6:	f00f fbb3 	bl	90016510 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90006daa:	4a2e      	ldr	r2, [pc, #184]	; (90006e64 <_ZN15Screen1ViewBaseC1Ev+0x13ac>)
90006dac:	2306      	movs	r3, #6
    textAreaCountdownAlarmSet.setTypedText(touchgfx::TypedText(T___SINGLEUSE_RS7Z));
90006dae:	a912      	add	r1, sp, #72	; 0x48
90006db0:	ee18 0a10 	vmov	r0, s16
90006db4:	9212      	str	r2, [sp, #72]	; 0x48
90006db6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
90006dba:	f00f fbc9 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006dbe:	ee18 1a10 	vmov	r1, s16
90006dc2:	4630      	mov	r0, r6
        visible = vis;
90006dc4:	f884 7869 	strb.w	r7, [r4, #2153]	; 0x869
90006dc8:	f00d fc76 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
90006dcc:	4b33      	ldr	r3, [pc, #204]	; (90006e9c <_ZN15Screen1ViewBaseC1Ev+0x13e4>)
    imagePolice.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_MAPS_LOCAL_POLICE_48_48_FFD000_SVG_ID));
90006dce:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
90006dd2:	a912      	add	r1, sp, #72	; 0x48
90006dd4:	f8c4 3894 	str.w	r3, [r4, #2196]	; 0x894
90006dd8:	4650      	mov	r0, sl
90006dda:	f8ad 9048 	strh.w	r9, [sp, #72]	; 0x48
90006dde:	f00f fd13 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90006de2:	4651      	mov	r1, sl
90006de4:	4630      	mov	r0, r6
        visible = vis;
90006de6:	f884 78b5 	strb.w	r7, [r4, #2229]	; 0x8b5
90006dea:	f00d fc65 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
90006dee:	4b2c      	ldr	r3, [pc, #176]	; (90006ea0 <_ZN15Screen1ViewBaseC1Ev+0x13e8>)
90006df0:	4641      	mov	r1, r8
90006df2:	4628      	mov	r0, r5
90006df4:	f8c4 38c0 	str.w	r3, [r4, #2240]	; 0x8c0
        rect.width = width;
90006df8:	23b6      	movs	r3, #182	; 0xb6
    Unicode::snprintf(textAreaPinBuffer, TEXTAREAPIN_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7FZJ).getText());
90006dfa:	f604 2a46 	addw	sl, r4, #2630	; 0xa46
90006dfe:	f8a4 38c4 	strh.w	r3, [r4, #2244]	; 0x8c4
90006e02:	f7fe fb61 	bl	900054c8 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>
        rect.height = height;
90006e06:	231e      	movs	r3, #30
90006e08:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006e0c:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
        boundingArea = calculateBoundingArea();
90006e10:	4641      	mov	r1, r8
90006e12:	4628      	mov	r0, r5
90006e14:	f8a4 38c6 	strh.w	r3, [r4, #2246]	; 0x8c6
90006e18:	f7fe fb56 	bl	900054c8 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006e1c:	491b      	ldr	r1, [pc, #108]	; (90006e8c <_ZN15Screen1ViewBaseC1Ev+0x13d4>)
90006e1e:	680b      	ldr	r3, [r1, #0]
90006e20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006e24:	e88b 0007 	stmia.w	fp, {r0, r1, r2}
        color = newColor;
90006e28:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
        linespace = space;
90006e2c:	f8a4 78f0 	strh.w	r7, [r4, #2288]	; 0x8f0
        boundingArea = calculateBoundingArea();
90006e30:	f8c4 78f8 	str.w	r7, [r4, #2296]	; 0x8f8
        color = newColor;
90006e34:	f8c4 08ec 	str.w	r0, [r4, #2284]	; 0x8ec
        boundingArea = calculateBoundingArea();
90006e38:	f04f 30ff 	mov.w	r0, #4294967295
90006e3c:	f8c4 7900 	str.w	r7, [r4, #2304]	; 0x900
90006e40:	f8c4 08fc 	str.w	r0, [r4, #2300]	; 0x8fc
90006e44:	2b00      	cmp	r3, #0
90006e46:	f000 8119 	beq.w	9000707c <_ZN15Screen1ViewBaseC1Ev+0x15c4>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006e4a:	4811      	ldr	r0, [pc, #68]	; (90006e90 <_ZN15Screen1ViewBaseC1Ev+0x13d8>)
90006e4c:	8803      	ldrh	r3, [r0, #0]
90006e4e:	454b      	cmp	r3, r9
90006e50:	f240 810e 	bls.w	90007070 <_ZN15Screen1ViewBaseC1Ev+0x15b8>
        return texts->getText(typedTextId);
90006e54:	4b0f      	ldr	r3, [pc, #60]	; (90006e94 <_ZN15Screen1ViewBaseC1Ev+0x13dc>)
90006e56:	4649      	mov	r1, r9
    Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SLOD).getText());
90006e58:	f504 6b25 	add.w	fp, r4, #2640	; 0xa50
90006e5c:	6818      	ldr	r0, [r3, #0]
90006e5e:	f000 faff 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90006e62:	e01f      	b.n	90006ea4 <_ZN15Screen1ViewBaseC1Ev+0x13ec>
90006e64:	90029fe4 	.word	0x90029fe4
90006e68:	00a8012b 	.word	0x00a8012b
90006e6c:	006a00ea 	.word	0x006a00ea
90006e70:	006a012b 	.word	0x006a012b
90006e74:	00a800a7 	.word	0x00a800a7
90006e78:	00a800ea 	.word	0x00a800ea
90006e7c:	00e300a8 	.word	0x00e300a8
90006e80:	00e300ea 	.word	0x00e300ea
90006e84:	00e3012b 	.word	0x00e3012b
90006e88:	002d00d0 	.word	0x002d00d0
90006e8c:	24026fdc 	.word	0x24026fdc
90006e90:	24026fe0 	.word	0x24026fe0
90006e94:	24026fe8 	.word	0x24026fe8
90006e98:	9002a538 	.word	0x9002a538
90006e9c:	00240187 	.word	0x00240187
90006ea0:	002b0094 	.word	0x002b0094
    Unicode::snprintf(textAreaPinBuffer, TEXTAREAPIN_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_7FZJ).getText());
90006ea4:	4a78      	ldr	r2, [pc, #480]	; (90007088 <_ZN15Screen1ViewBaseC1Ev+0x15d0>)
90006ea6:	4603      	mov	r3, r0
90006ea8:	2105      	movs	r1, #5
90006eaa:	4650      	mov	r0, sl
90006eac:	f014 f986 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaPin.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PDPH));
90006eb0:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
        : typedTextId(id)
90006eb4:	4a75      	ldr	r2, [pc, #468]	; (9000708c <_ZN15Screen1ViewBaseC1Ev+0x15d4>)
90006eb6:	2304      	movs	r3, #4
90006eb8:	4661      	mov	r1, ip
90006eba:	4640      	mov	r0, r8
90006ebc:	f8c4 a904 	str.w	sl, [r4, #2308]	; 0x904
90006ec0:	f04f 0a02 	mov.w	sl, #2
90006ec4:	9212      	str	r2, [sp, #72]	; 0x48
90006ec6:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
90006eca:	f00f fb41 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006ece:	4641      	mov	r1, r8
90006ed0:	4630      	mov	r0, r6
90006ed2:	f00d fbf1 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
90006ed6:	4b6e      	ldr	r3, [pc, #440]	; (90007090 <_ZN15Screen1ViewBaseC1Ev+0x15d8>)
    imageError.setBitmap(touchgfx::Bitmap(BITMAP_ICON_THEME_IMAGES_ALERT_ERROR_OUTLINE_46_46_B84040_SVG_ID));
90006ed8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
90006edc:	f10d 0c48 	add.w	ip, sp, #72	; 0x48
90006ee0:	f8c4 390c 	str.w	r3, [r4, #2316]	; 0x90c
90006ee4:	4661      	mov	r1, ip
90006ee6:	4640      	mov	r0, r8
90006ee8:	f8ad a048 	strh.w	sl, [sp, #72]	; 0x48
90006eec:	f00f fc8c 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90006ef0:	4641      	mov	r1, r8
90006ef2:	4630      	mov	r0, r6
        visible = vis;
90006ef4:	f884 792d 	strb.w	r7, [r4, #2349]	; 0x92d
    textAreaCountdownOngoingAlarmSet.setXY(390, 33);
90006ef8:	f604 1834 	addw	r8, r4, #2356	; 0x934
90006efc:	f00d fbdc 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
90006f00:	4964      	ldr	r1, [pc, #400]	; (90007094 <_ZN15Screen1ViewBaseC1Ev+0x15dc>)
        rect.x = x;
90006f02:	4a65      	ldr	r2, [pc, #404]	; (90007098 <_ZN15Screen1ViewBaseC1Ev+0x15e0>)
90006f04:	680b      	ldr	r3, [r1, #0]
        color = newColor;
90006f06:	f04f 31ff 	mov.w	r1, #4294967295
        linespace = space;
90006f0a:	f8a4 7968 	strh.w	r7, [r4, #2408]	; 0x968
        color = newColor;
90006f0e:	f8c4 1964 	str.w	r1, [r4, #2404]	; 0x964
        boundingArea = calculateBoundingArea();
90006f12:	f8c4 1974 	str.w	r1, [r4, #2420]	; 0x974
90006f16:	f8c4 7970 	str.w	r7, [r4, #2416]	; 0x970
90006f1a:	f8c4 7978 	str.w	r7, [r4, #2424]	; 0x978
90006f1e:	f8c4 2938 	str.w	r2, [r4, #2360]	; 0x938
90006f22:	2b00      	cmp	r3, #0
90006f24:	f000 80aa 	beq.w	9000707c <_ZN15Screen1ViewBaseC1Ev+0x15c4>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90006f28:	485c      	ldr	r0, [pc, #368]	; (9000709c <_ZN15Screen1ViewBaseC1Ev+0x15e4>)
90006f2a:	8803      	ldrh	r3, [r0, #0]
90006f2c:	2b01      	cmp	r3, #1
90006f2e:	f240 809f 	bls.w	90007070 <_ZN15Screen1ViewBaseC1Ev+0x15b8>
        return texts->getText(typedTextId);
90006f32:	4b5b      	ldr	r3, [pc, #364]	; (900070a0 <_ZN15Screen1ViewBaseC1Ev+0x15e8>)
90006f34:	2101      	movs	r1, #1
90006f36:	6818      	ldr	r0, [r3, #0]
90006f38:	f000 fa92 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_SLOD).getText());
90006f3c:	4649      	mov	r1, r9
90006f3e:	4603      	mov	r3, r0
90006f40:	4a51      	ldr	r2, [pc, #324]	; (90007088 <_ZN15Screen1ViewBaseC1Ev+0x15d0>)
90006f42:	4658      	mov	r0, fp
90006f44:	f014 f93a 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textAreaCountdownOngoingAlarmSet.resizeToCurrentText();
90006f48:	4640      	mov	r0, r8
90006f4a:	f8c4 b97c 	str.w	fp, [r4, #2428]	; 0x97c
90006f4e:	f00f fadf 	bl	90016510 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
        : typedTextId(id)
90006f52:	4a4e      	ldr	r2, [pc, #312]	; (9000708c <_ZN15Screen1ViewBaseC1Ev+0x15d4>)
    textAreaCountdownOngoingAlarmSet.setTypedText(touchgfx::TypedText(T___SINGLEUSE_BFLD));
90006f54:	a912      	add	r1, sp, #72	; 0x48
90006f56:	4640      	mov	r0, r8
90006f58:	9212      	str	r2, [sp, #72]	; 0x48
90006f5a:	f8ad a04c 	strh.w	sl, [sp, #76]	; 0x4c
90006f5e:	f00f faf7 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90006f62:	4641      	mov	r1, r8
90006f64:	4630      	mov	r0, r6
        visible = vis;
90006f66:	f884 7959 	strb.w	r7, [r4, #2393]	; 0x959
90006f6a:	f00d fba5 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.width = width;
90006f6e:	4b4d      	ldr	r3, [pc, #308]	; (900070a4 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
        borderUp = borderColorReleased;
90006f70:	494d      	ldr	r1, [pc, #308]	; (900070a8 <_ZN15Screen1ViewBaseC1Ev+0x15f0>)
90006f72:	f8c4 39bc 	str.w	r3, [r4, #2492]	; 0x9bc
        borderSize = size;
90006f76:	2305      	movs	r3, #5
90006f78:	f8c4 19f0 	str.w	r1, [r4, #2544]	; 0x9f0
        borderDown = borderColorPressed;
90006f7c:	494b      	ldr	r1, [pc, #300]	; (900070ac <_ZN15Screen1ViewBaseC1Ev+0x15f4>)
        down = colorPressed;
90006f7e:	4a4c      	ldr	r2, [pc, #304]	; (900070b0 <_ZN15Screen1ViewBaseC1Ev+0x15f8>)
90006f80:	f8a4 39e4 	strh.w	r3, [r4, #2532]	; 0x9e4
        borderDown = borderColorPressed;
90006f84:	f8c4 19f4 	str.w	r1, [r4, #2548]	; 0x9f4
        up = colorReleased;
90006f88:	4b4a      	ldr	r3, [pc, #296]	; (900070b4 <_ZN15Screen1ViewBaseC1Ev+0x15fc>)
        borderBox.setColor(T::getPressed() ? down : up);
90006f8a:	f894 19ac 	ldrb.w	r1, [r4, #2476]	; 0x9ac
        rect.x = x;
90006f8e:	f8c4 79b8 	str.w	r7, [r4, #2488]	; 0x9b8
        up = colorReleased;
90006f92:	f8c4 39e8 	str.w	r3, [r4, #2536]	; 0x9e8
        down = colorPressed;
90006f96:	f8c4 29ec 	str.w	r2, [r4, #2540]	; 0x9ec
        borderBox.setColor(T::getPressed() ? down : up);
90006f9a:	2900      	cmp	r1, #0
90006f9c:	d164      	bne.n	90007068 <_ZN15Screen1ViewBaseC1Ev+0x15b0>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
90006f9e:	f504 621f 	add.w	r2, r4, #2544	; 0x9f0
90006fa2:	f8c4 39dc 	str.w	r3, [r4, #2524]	; 0x9dc
        visible = vis;
90006fa6:	2700      	movs	r7, #0
90006fa8:	6813      	ldr	r3, [r2, #0]
90006faa:	4630      	mov	r0, r6
90006fac:	9a01      	ldr	r2, [sp, #4]
        borderColor = colorBorder;
90006fae:	f8c4 39e0 	str.w	r3, [r4, #2528]	; 0x9e0
        rect.x = x;
90006fb2:	4b41      	ldr	r3, [pc, #260]	; (900070b8 <_ZN15Screen1ViewBaseC1Ev+0x1600>)
90006fb4:	f8c4 29b0 	str.w	r2, [r4, #2480]	; 0x9b0
90006fb8:	f8c4 3984 	str.w	r3, [r4, #2436]	; 0x984
        rect.width = width;
90006fbc:	4b39      	ldr	r3, [pc, #228]	; (900070a4 <_ZN15Screen1ViewBaseC1Ev+0x15ec>)
90006fbe:	990c      	ldr	r1, [sp, #48]	; 0x30
90006fc0:	f8c4 3988 	str.w	r3, [r4, #2440]	; 0x988
        visible = vis;
90006fc4:	f884 79a5 	strb.w	r7, [r4, #2469]	; 0x9a5
90006fc8:	f00d fb76 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
        rect.x = x;
90006fcc:	4b3b      	ldr	r3, [pc, #236]	; (900070bc <_ZN15Screen1ViewBaseC1Ev+0x1604>)
90006fce:	ee1c 1a10 	vmov	r1, s24
90006fd2:	4628      	mov	r0, r5
90006fd4:	f8c4 39fc 	str.w	r3, [r4, #2556]	; 0x9fc
        color = newColor;
90006fd8:	f04f 33ff 	mov.w	r3, #4294967295
        linespace = space;
90006fdc:	f8a4 7a2c 	strh.w	r7, [r4, #2604]	; 0xa2c
        color = newColor;
90006fe0:	f8c4 3a28 	str.w	r3, [r4, #2600]	; 0xa28
        boundingArea = calculateBoundingArea();
90006fe4:	f00f f80c 	bl	90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
90006fe8:	4a28      	ldr	r2, [pc, #160]	; (9000708c <_ZN15Screen1ViewBaseC1Ev+0x15d4>)
90006fea:	ee1c 3a10 	vmov	r3, s24
90006fee:	f8ad 704c 	strh.w	r7, [sp, #76]	; 0x4c
90006ff2:	9212      	str	r2, [sp, #72]	; 0x48
90006ff4:	333c      	adds	r3, #60	; 0x3c
90006ff6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
90006ffa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    textAreaPreventActivation.setTypedText(touchgfx::TypedText(T___SINGLEUSE_W1ZN));
90006ffe:	a912      	add	r1, sp, #72	; 0x48
90007000:	ee1c 0a10 	vmov	r0, s24
90007004:	f00f faa4 	bl	90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
90007008:	4630      	mov	r0, r6
9000700a:	ee1c 1a10 	vmov	r1, s24
        visible = vis;
9000700e:	f884 7a1d 	strb.w	r7, [r4, #2589]	; 0xa1d
90007012:	f00d fb51 	bl	900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
90007016:	4620      	mov	r0, r4
90007018:	b015      	add	sp, #84	; 0x54
9000701a:	ecbd 8b0a 	vpop	{d8-d12}
9000701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90007022:	f504 729a 	add.w	r2, r4, #308	; 0x134
90007026:	f7ff bb1c 	b.w	90006662 <_ZN15Screen1ViewBaseC1Ev+0xbaa>
9000702a:	f204 526c 	addw	r2, r4, #1388	; 0x56c
9000702e:	e4e4      	b.n	900069fa <_ZN15Screen1ViewBaseC1Ev+0xf42>
90007030:	f204 42f4 	addw	r2, r4, #1268	; 0x4f4
90007034:	e4b1      	b.n	9000699a <_ZN15Screen1ViewBaseC1Ev+0xee2>
90007036:	f204 427c 	addw	r2, r4, #1148	; 0x47c
9000703a:	e47c      	b.n	90006936 <_ZN15Screen1ViewBaseC1Ev+0xe7e>
9000703c:	f204 4204 	addw	r2, r4, #1028	; 0x404
90007040:	e449      	b.n	900068d6 <_ZN15Screen1ViewBaseC1Ev+0xe1e>
90007042:	f504 7263 	add.w	r2, r4, #908	; 0x38c
90007046:	e416      	b.n	90006876 <_ZN15Screen1ViewBaseC1Ev+0xdbe>
90007048:	f504 7245 	add.w	r2, r4, #788	; 0x314
9000704c:	f7ff bbe5 	b.w	9000681a <_ZN15Screen1ViewBaseC1Ev+0xd62>
90007050:	f504 7227 	add.w	r2, r4, #668	; 0x29c
90007054:	f7ff bbb3 	b.w	900067be <_ZN15Screen1ViewBaseC1Ev+0xd06>
90007058:	f504 7209 	add.w	r2, r4, #548	; 0x224
9000705c:	f7ff bb81 	b.w	90006762 <_ZN15Screen1ViewBaseC1Ev+0xcaa>
90007060:	f504 72d6 	add.w	r2, r4, #428	; 0x1ac
90007064:	f7ff bb2f 	b.w	900066c6 <_ZN15Screen1ViewBaseC1Ev+0xc0e>
90007068:	4613      	mov	r3, r2
9000706a:	f604 12f4 	addw	r2, r4, #2548	; 0x9f4
9000706e:	e798      	b.n	90006fa2 <_ZN15Screen1ViewBaseC1Ev+0x14ea>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
90007070:	4b13      	ldr	r3, [pc, #76]	; (900070c0 <_ZN15Screen1ViewBaseC1Ev+0x1608>)
90007072:	2161      	movs	r1, #97	; 0x61
90007074:	4a13      	ldr	r2, [pc, #76]	; (900070c4 <_ZN15Screen1ViewBaseC1Ev+0x160c>)
90007076:	4814      	ldr	r0, [pc, #80]	; (900070c8 <_ZN15Screen1ViewBaseC1Ev+0x1610>)
90007078:	f01f ffd8 	bl	9002702c <__assert_func>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
9000707c:	4b13      	ldr	r3, [pc, #76]	; (900070cc <_ZN15Screen1ViewBaseC1Ev+0x1614>)
9000707e:	2160      	movs	r1, #96	; 0x60
90007080:	4a10      	ldr	r2, [pc, #64]	; (900070c4 <_ZN15Screen1ViewBaseC1Ev+0x160c>)
90007082:	4811      	ldr	r0, [pc, #68]	; (900070c8 <_ZN15Screen1ViewBaseC1Ev+0x1610>)
90007084:	f01f ffd2 	bl	9002702c <__assert_func>
90007088:	9002a538 	.word	0x9002a538
9000708c:	90029fe4 	.word	0x90029fe4
90007090:	002300d3 	.word	0x002300d3
90007094:	24026fdc 	.word	0x24026fdc
90007098:	00210186 	.word	0x00210186
9000709c:	24026fe0 	.word	0x24026fe0
900070a0:	24026fe8 	.word	0x24026fe8
900070a4:	004d00e8 	.word	0x004d00e8
900070a8:	ff660000 	.word	0xff660000
900070ac:	ff993434 	.word	0xff993434
900070b0:	ffcc0000 	.word	0xffcc0000
900070b4:	ff990000 	.word	0xff990000
900070b8:	008e0075 	.word	0x008e0075
900070bc:	00a800be 	.word	0x00a800be
900070c0:	9002a4c0 	.word	0x9002a4c0
900070c4:	9002a500 	.word	0x9002a500
900070c8:	9002a478 	.word	0x9002a478
900070cc:	9002a3f8 	.word	0x9002a3f8

900070d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900070d0:	4770      	bx	lr
900070d2:	bf00      	nop

900070d4 <_Z23getFont_verdana_10_4bppv>:
{
900070d4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900070d6:	4d18      	ldr	r5, [pc, #96]	; (90007138 <_Z23getFont_verdana_10_4bppv+0x64>)
{
900070d8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900070da:	782b      	ldrb	r3, [r5, #0]
900070dc:	f3bf 8f5b 	dmb	ish
900070e0:	f013 0401 	ands.w	r4, r3, #1
900070e4:	d002      	beq.n	900070ec <_Z23getFont_verdana_10_4bppv+0x18>
    return verdana_10_4bpp;
}
900070e6:	4815      	ldr	r0, [pc, #84]	; (9000713c <_Z23getFont_verdana_10_4bppv+0x68>)
900070e8:	b00f      	add	sp, #60	; 0x3c
900070ea:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
900070ec:	4628      	mov	r0, r5
900070ee:	f01f ff02 	bl	90026ef6 <__cxa_guard_acquire>
900070f2:	2800      	cmp	r0, #0
900070f4:	d0f7      	beq.n	900070e6 <_Z23getFont_verdana_10_4bppv+0x12>
900070f6:	213f      	movs	r1, #63	; 0x3f
900070f8:	2201      	movs	r2, #1
900070fa:	230a      	movs	r3, #10
900070fc:	2004      	movs	r0, #4
900070fe:	9204      	str	r2, [sp, #16]
90007100:	9300      	str	r3, [sp, #0]
90007102:	9003      	str	r0, [sp, #12]
90007104:	480d      	ldr	r0, [pc, #52]	; (9000713c <_Z23getFont_verdana_10_4bppv+0x68>)
90007106:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000710a:	490d      	ldr	r1, [pc, #52]	; (90007140 <_Z23getFont_verdana_10_4bppv+0x6c>)
9000710c:	9108      	str	r1, [sp, #32]
9000710e:	490d      	ldr	r1, [pc, #52]	; (90007144 <_Z23getFont_verdana_10_4bppv+0x70>)
90007110:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007114:	9107      	str	r1, [sp, #28]
90007116:	490c      	ldr	r1, [pc, #48]	; (90007148 <_Z23getFont_verdana_10_4bppv+0x74>)
90007118:	e9cd 4405 	strd	r4, r4, [sp, #20]
9000711c:	e9cd 4401 	strd	r4, r4, [sp, #4]
90007120:	f7fe f95e 	bl	900053e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007124:	4809      	ldr	r0, [pc, #36]	; (9000714c <_Z23getFont_verdana_10_4bppv+0x78>)
90007126:	f01f ff9f 	bl	90027068 <atexit>
9000712a:	4628      	mov	r0, r5
9000712c:	f01f feef 	bl	90026f0e <__cxa_guard_release>
}
90007130:	4802      	ldr	r0, [pc, #8]	; (9000713c <_Z23getFont_verdana_10_4bppv+0x68>)
90007132:	b00f      	add	sp, #60	; 0x3c
90007134:	bd30      	pop	{r4, r5, pc}
90007136:	bf00      	nop
90007138:	2400be58 	.word	0x2400be58
9000713c:	2400be5c 	.word	0x2400be5c
90007140:	9002b970 	.word	0x9002b970
90007144:	9002be00 	.word	0x9002be00
90007148:	90208600 	.word	0x90208600
9000714c:	900070d1 	.word	0x900070d1

90007150 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_13_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_13_4bpp();

touchgfx::GeneratedFont& getFont_verdana_13_4bpp()
{
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 1, 13, 13, 0, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
90007150:	4770      	bx	lr
90007152:	bf00      	nop

90007154 <_Z23getFont_verdana_13_4bppv>:
{
90007154:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 1, 13, 13, 0, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
90007156:	4d18      	ldr	r5, [pc, #96]	; (900071b8 <_Z23getFont_verdana_13_4bppv+0x64>)
{
90007158:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 1, 13, 13, 0, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
9000715a:	782b      	ldrb	r3, [r5, #0]
9000715c:	f3bf 8f5b 	dmb	ish
90007160:	f013 0401 	ands.w	r4, r3, #1
90007164:	d002      	beq.n	9000716c <_Z23getFont_verdana_13_4bppv+0x18>
    return verdana_13_4bpp;
}
90007166:	4815      	ldr	r0, [pc, #84]	; (900071bc <_Z23getFont_verdana_13_4bppv+0x68>)
90007168:	b00f      	add	sp, #60	; 0x3c
9000716a:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_13_4bpp(glyphs_verdana_13_4bpp, 1, 13, 13, 0, 0, 4, 1, 0, 0, unicodes_verdana_13_4bpp, kerning_verdana_13_4bpp, 63, 0, 0, 0);
9000716c:	4628      	mov	r0, r5
9000716e:	f01f fec2 	bl	90026ef6 <__cxa_guard_acquire>
90007172:	2800      	cmp	r0, #0
90007174:	d0f7      	beq.n	90007166 <_Z23getFont_verdana_13_4bppv+0x12>
90007176:	213f      	movs	r1, #63	; 0x3f
90007178:	2201      	movs	r2, #1
9000717a:	230d      	movs	r3, #13
9000717c:	2004      	movs	r0, #4
9000717e:	9204      	str	r2, [sp, #16]
90007180:	9300      	str	r3, [sp, #0]
90007182:	9003      	str	r0, [sp, #12]
90007184:	480d      	ldr	r0, [pc, #52]	; (900071bc <_Z23getFont_verdana_13_4bppv+0x68>)
90007186:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000718a:	490d      	ldr	r1, [pc, #52]	; (900071c0 <_Z23getFont_verdana_13_4bppv+0x6c>)
9000718c:	9108      	str	r1, [sp, #32]
9000718e:	490d      	ldr	r1, [pc, #52]	; (900071c4 <_Z23getFont_verdana_13_4bppv+0x70>)
90007190:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007194:	9107      	str	r1, [sp, #28]
90007196:	490c      	ldr	r1, [pc, #48]	; (900071c8 <_Z23getFont_verdana_13_4bppv+0x74>)
90007198:	e9cd 4405 	strd	r4, r4, [sp, #20]
9000719c:	e9cd 4401 	strd	r4, r4, [sp, #4]
900071a0:	f7fe f91e 	bl	900053e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900071a4:	4809      	ldr	r0, [pc, #36]	; (900071cc <_Z23getFont_verdana_13_4bppv+0x78>)
900071a6:	f01f ff5f 	bl	90027068 <atexit>
900071aa:	4628      	mov	r0, r5
900071ac:	f01f feaf 	bl	90026f0e <__cxa_guard_release>
}
900071b0:	4802      	ldr	r0, [pc, #8]	; (900071bc <_Z23getFont_verdana_13_4bppv+0x68>)
900071b2:	b00f      	add	sp, #60	; 0x3c
900071b4:	bd30      	pop	{r4, r5, pc}
900071b6:	bf00      	nop
900071b8:	2400be88 	.word	0x2400be88
900071bc:	2400be8c 	.word	0x2400be8c
900071c0:	9002b974 	.word	0x9002b974
900071c4:	9002be04 	.word	0x9002be04
900071c8:	90208610 	.word	0x90208610
900071cc:	90007151 	.word	0x90007151

900071d0 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900071d0:	4770      	bx	lr
900071d2:	bf00      	nop

900071d4 <_Z23getFont_verdana_20_4bppv>:
{
900071d4:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900071d6:	4d19      	ldr	r5, [pc, #100]	; (9000723c <_Z23getFont_verdana_20_4bppv+0x68>)
{
900071d8:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900071da:	782b      	ldrb	r3, [r5, #0]
900071dc:	f3bf 8f5b 	dmb	ish
900071e0:	f013 0401 	ands.w	r4, r3, #1
900071e4:	d002      	beq.n	900071ec <_Z23getFont_verdana_20_4bppv+0x18>
    return verdana_20_4bpp;
}
900071e6:	4816      	ldr	r0, [pc, #88]	; (90007240 <_Z23getFont_verdana_20_4bppv+0x6c>)
900071e8:	b00f      	add	sp, #60	; 0x3c
900071ea:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 95, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
900071ec:	4628      	mov	r0, r5
900071ee:	f01f fe82 	bl	90026ef6 <__cxa_guard_acquire>
900071f2:	2800      	cmp	r0, #0
900071f4:	d0f7      	beq.n	900071e6 <_Z23getFont_verdana_20_4bppv+0x12>
900071f6:	213f      	movs	r1, #63	; 0x3f
900071f8:	4a12      	ldr	r2, [pc, #72]	; (90007244 <_Z23getFont_verdana_20_4bppv+0x70>)
900071fa:	2301      	movs	r3, #1
900071fc:	2014      	movs	r0, #20
900071fe:	9208      	str	r2, [sp, #32]
90007200:	2204      	movs	r2, #4
90007202:	9304      	str	r3, [sp, #16]
90007204:	9000      	str	r0, [sp, #0]
90007206:	9401      	str	r4, [sp, #4]
90007208:	480d      	ldr	r0, [pc, #52]	; (90007240 <_Z23getFont_verdana_20_4bppv+0x6c>)
9000720a:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
9000720e:	490e      	ldr	r1, [pc, #56]	; (90007248 <_Z23getFont_verdana_20_4bppv+0x74>)
90007210:	e9cd 3305 	strd	r3, r3, [sp, #20]
90007214:	9107      	str	r1, [sp, #28]
90007216:	2318      	movs	r3, #24
90007218:	490c      	ldr	r1, [pc, #48]	; (9000724c <_Z23getFont_verdana_20_4bppv+0x78>)
9000721a:	e9cd 4202 	strd	r4, r2, [sp, #8]
9000721e:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
90007222:	225f      	movs	r2, #95	; 0x5f
90007224:	f7fe f8dc 	bl	900053e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
90007228:	4809      	ldr	r0, [pc, #36]	; (90007250 <_Z23getFont_verdana_20_4bppv+0x7c>)
9000722a:	f01f ff1d 	bl	90027068 <atexit>
9000722e:	4628      	mov	r0, r5
90007230:	f01f fe6d 	bl	90026f0e <__cxa_guard_release>
}
90007234:	4802      	ldr	r0, [pc, #8]	; (90007240 <_Z23getFont_verdana_20_4bppv+0x6c>)
90007236:	b00f      	add	sp, #60	; 0x3c
90007238:	bd30      	pop	{r4, r5, pc}
9000723a:	bf00      	nop
9000723c:	2400beb8 	.word	0x2400beb8
90007240:	2400bebc 	.word	0x2400bebc
90007244:	9002b978 	.word	0x9002b978
90007248:	9002be08 	.word	0x9002be08
9000724c:	90208620 	.word	0x90208620
90007250:	900071d1 	.word	0x900071d1

90007254 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007254:	4770      	bx	lr
90007256:	bf00      	nop

90007258 <_Z23getFont_verdana_40_4bppv>:
{
90007258:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000725a:	4d19      	ldr	r5, [pc, #100]	; (900072c0 <_Z23getFont_verdana_40_4bppv+0x68>)
{
9000725c:	b08f      	sub	sp, #60	; 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
9000725e:	782b      	ldrb	r3, [r5, #0]
90007260:	f3bf 8f5b 	dmb	ish
90007264:	f013 0401 	ands.w	r4, r3, #1
90007268:	d002      	beq.n	90007270 <_Z23getFont_verdana_40_4bppv+0x18>
    return verdana_40_4bpp;
}
9000726a:	4816      	ldr	r0, [pc, #88]	; (900072c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
9000726c:	b00f      	add	sp, #60	; 0x3c
9000726e:	bd30      	pop	{r4, r5, pc}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 95, 48, 40, 0, 0, 4, 1, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
90007270:	4628      	mov	r0, r5
90007272:	f01f fe40 	bl	90026ef6 <__cxa_guard_acquire>
90007276:	2800      	cmp	r0, #0
90007278:	d0f7      	beq.n	9000726a <_Z23getFont_verdana_40_4bppv+0x12>
9000727a:	4a13      	ldr	r2, [pc, #76]	; (900072c8 <_Z23getFont_verdana_40_4bppv+0x70>)
9000727c:	213f      	movs	r1, #63	; 0x3f
9000727e:	2302      	movs	r3, #2
90007280:	2028      	movs	r0, #40	; 0x28
90007282:	9208      	str	r2, [sp, #32]
90007284:	2201      	movs	r2, #1
90007286:	9000      	str	r0, [sp, #0]
90007288:	9204      	str	r2, [sp, #16]
9000728a:	2204      	movs	r2, #4
9000728c:	9401      	str	r4, [sp, #4]
9000728e:	480d      	ldr	r0, [pc, #52]	; (900072c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
90007290:	e9cd 1409 	strd	r1, r4, [sp, #36]	; 0x24
90007294:	490d      	ldr	r1, [pc, #52]	; (900072cc <_Z23getFont_verdana_40_4bppv+0x74>)
90007296:	e9cd 3305 	strd	r3, r3, [sp, #20]
9000729a:	9107      	str	r1, [sp, #28]
9000729c:	2330      	movs	r3, #48	; 0x30
9000729e:	490c      	ldr	r1, [pc, #48]	; (900072d0 <_Z23getFont_verdana_40_4bppv+0x78>)
900072a0:	e9cd 4202 	strd	r4, r2, [sp, #8]
900072a4:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
900072a8:	225f      	movs	r2, #95	; 0x5f
900072aa:	f7fe f899 	bl	900053e0 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
900072ae:	4809      	ldr	r0, [pc, #36]	; (900072d4 <_Z23getFont_verdana_40_4bppv+0x7c>)
900072b0:	f01f feda 	bl	90027068 <atexit>
900072b4:	4628      	mov	r0, r5
900072b6:	f01f fe2a 	bl	90026f0e <__cxa_guard_release>
}
900072ba:	4802      	ldr	r0, [pc, #8]	; (900072c4 <_Z23getFont_verdana_40_4bppv+0x6c>)
900072bc:	b00f      	add	sp, #60	; 0x3c
900072be:	bd30      	pop	{r4, r5, pc}
900072c0:	2400bee8 	.word	0x2400bee8
900072c4:	2400beec 	.word	0x2400beec
900072c8:	9002bb1c 	.word	0x9002bb1c
900072cc:	9002be0c 	.word	0x9002be0c
900072d0:	90208b54 	.word	0x90208b54
900072d4:	90007255 	.word	0x90007255

900072d8 <_ZNK8touchgfx4Font12getGSUBTableEv>:
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
    {
        return 0;
    }
900072d8:	2000      	movs	r0, #0
900072da:	4770      	bx	lr

900072dc <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return 0;
    }
900072dc:	2000      	movs	r0, #0
900072de:	4770      	bx	lr

900072e0 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
900072e0:	b40e      	push	{r1, r2, r3}
900072e2:	b500      	push	{lr}
900072e4:	b082      	sub	sp, #8
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900072e6:	2100      	movs	r1, #0
{
900072e8:	ab03      	add	r3, sp, #12
900072ea:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
900072ee:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
900072f0:	f011 fee4 	bl	900190bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
900072f4:	b002      	add	sp, #8
900072f6:	f85d eb04 	ldr.w	lr, [sp], #4
900072fa:	b003      	add	sp, #12
900072fc:	4770      	bx	lr
900072fe:	bf00      	nop

90007300 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
90007300:	b40c      	push	{r2, r3}
90007302:	b500      	push	{lr}
90007304:	b083      	sub	sp, #12
90007306:	ab04      	add	r3, sp, #16
90007308:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
9000730c:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
9000730e:	f011 fed5 	bl	900190bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
90007312:	b003      	add	sp, #12
90007314:	f85d eb04 	ldr.w	lr, [sp], #4
90007318:	b002      	add	sp, #8
9000731a:	4770      	bx	lr

9000731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
9000731c:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
9000731e:	b510      	push	{r4, lr}
90007320:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
90007322:	b133      	cbz	r3, 90007332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
90007324:	8f03      	ldrh	r3, [r0, #56]	; 0x38
90007326:	b39b      	cbz	r3, 90007390 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>
            return buffer[pos];
90007328:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9000732a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9000732e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
90007330:	b923      	cbnz	r3, 9000733c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x20>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
90007332:	4620      	mov	r0, r4
}
90007334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
90007338:	f013 b894 	b.w	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
        substituteGlyphs();
9000733c:	f013 f990 	bl	9001a660 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
90007340:	8f23      	ldrh	r3, [r4, #56]	; 0x38
90007342:	2b01      	cmp	r3, #1
90007344:	d92a      	bls.n	9000739c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>
            const uint16_t index = pos + offset;
90007346:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
90007348:	1c53      	adds	r3, r2, #1
9000734a:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
9000734c:	2b09      	cmp	r3, #9
9000734e:	d812      	bhi.n	90007376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x5a>
90007350:	eb04 0143 	add.w	r1, r4, r3, lsl #1
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
90007354:	f640 103f 	movw	r0, #2367	; 0x93f
90007358:	8c49      	ldrh	r1, [r1, #34]	; 0x22
9000735a:	4281      	cmp	r1, r0
9000735c:	d1e9      	bne.n	90007332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
9000735e:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007362:	0052      	lsls	r2, r2, #1
90007364:	8c49      	ldrh	r1, [r1, #34]	; 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
90007366:	eb04 0343 	add.w	r3, r4, r3, lsl #1
            buffer[pos] = newChar;
9000736a:	4422      	add	r2, r4
9000736c:	f640 103f 	movw	r0, #2367	; 0x93f
            buffer[index < size ? index : 0] = newChar;
90007370:	8459      	strh	r1, [r3, #34]	; 0x22
            buffer[pos] = newChar;
90007372:	8450      	strh	r0, [r2, #34]	; 0x22
        }
90007374:	e7dd      	b.n	90007332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[index < size ? index : index - size];
90007376:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9000737a:	f640 113f 	movw	r1, #2367	; 0x93f
9000737e:	89db      	ldrh	r3, [r3, #14]
90007380:	428b      	cmp	r3, r1
90007382:	d1d6      	bne.n	90007332 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x16>
            return buffer[pos];
90007384:	eb04 0142 	add.w	r1, r4, r2, lsl #1
90007388:	2300      	movs	r3, #0
9000738a:	0052      	lsls	r2, r2, #1
9000738c:	8c49      	ldrh	r1, [r1, #34]	; 0x22
        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
9000738e:	e7ea      	b.n	90007366 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x4a>
            assert(used > 0);
90007390:	4b05      	ldr	r3, [pc, #20]	; (900073a8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x8c>)
90007392:	21c5      	movs	r1, #197	; 0xc5
90007394:	4a05      	ldr	r2, [pc, #20]	; (900073ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x90>)
90007396:	4806      	ldr	r0, [pc, #24]	; (900073b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
90007398:	f01f fe48 	bl	9002702c <__assert_func>
            assert(offset < used);
9000739c:	4b05      	ldr	r3, [pc, #20]	; (900073b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x98>)
9000739e:	21cb      	movs	r1, #203	; 0xcb
900073a0:	4a05      	ldr	r2, [pc, #20]	; (900073b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x9c>)
900073a2:	4803      	ldr	r0, [pc, #12]	; (900073b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x94>)
900073a4:	f01f fe42 	bl	9002702c <__assert_func>
900073a8:	9002a780 	.word	0x9002a780
900073ac:	9002a78c 	.word	0x9002a78c
900073b0:	9002a838 	.word	0x9002a838
900073b4:	9002a884 	.word	0x9002a884
900073b8:	9002a894 	.word	0x9002a894

900073bc <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
900073bc:	f013 b81b 	b.w	9001a3f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

900073c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
900073c0:	b510      	push	{r4, lr}
900073c2:	b086      	sub	sp, #24
900073c4:	f10d 0c08 	add.w	ip, sp, #8
    va_list pArg;
    va_start(pArg, format);
900073c8:	ac0a      	add	r4, sp, #40	; 0x28
{
900073ca:	e88c 0006 	stmia.w	ip, {r1, r2}
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900073ce:	461a      	mov	r2, r3
900073d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900073d2:	4661      	mov	r1, ip
900073d4:	9401      	str	r4, [sp, #4]
900073d6:	9300      	str	r3, [sp, #0]
900073d8:	9b08      	ldr	r3, [sp, #32]
    va_start(pArg, format);
900073da:	9405      	str	r4, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
900073dc:	f010 faf4 	bl	900179c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
900073e0:	b006      	add	sp, #24
900073e2:	bd10      	pop	{r4, pc}

900073e4 <_ZN8touchgfx5Texts11setLanguageEt>:
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
900073e4:	b9e0      	cbnz	r0, 90007420 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
{
900073e6:	b538      	push	{r3, r4, r5, lr}
    {
        if (languagesArray[id] != 0)
900073e8:	4b13      	ldr	r3, [pc, #76]	; (90007438 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
900073ea:	681b      	ldr	r3, [r3, #0]
900073ec:	b1cb      	cbz	r3, 90007422 <_ZN8touchgfx5Texts11setLanguageEt+0x3e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900073ee:	4c13      	ldr	r4, [pc, #76]	; (9000743c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900073f0:	4813      	ldr	r0, [pc, #76]	; (90007440 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
900073f2:	e9d3 1200 	ldrd	r1, r2, [r3]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900073f6:	4419      	add	r1, r3
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900073f8:	441a      	add	r2, r3
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
900073fa:	6021      	str	r1, [r4, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
900073fc:	689c      	ldr	r4, [r3, #8]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
900073fe:	6002      	str	r2, [r0, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
90007400:	441c      	add	r4, r3
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
90007402:	4b10      	ldr	r3, [pc, #64]	; (90007444 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
90007404:	2200      	movs	r2, #0
90007406:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
90007408:	f000 f83a 	bl	90007480 <_ZN17TypedTextDatabase8getFontsEv>
9000740c:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
9000740e:	f000 f835 	bl	9000747c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
90007412:	4b0d      	ldr	r3, [pc, #52]	; (90007448 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
        fonts = f;
90007414:	4a0d      	ldr	r2, [pc, #52]	; (9000744c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
        typedTexts = data;
90007416:	601c      	str	r4, [r3, #0]
        numberOfTypedTexts = n;
90007418:	4b0d      	ldr	r3, [pc, #52]	; (90007450 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
        fonts = f;
9000741a:	6015      	str	r5, [r2, #0]
        numberOfTypedTexts = n;
9000741c:	8018      	strh	r0, [r3, #0]
    }
}
9000741e:	bd38      	pop	{r3, r4, r5, pc}
90007420:	4770      	bx	lr
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007422:	4c0c      	ldr	r4, [pc, #48]	; (90007454 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
            currentLanguagePtr = texts_all_languages;
90007424:	4905      	ldr	r1, [pc, #20]	; (9000743c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
            currentLanguageTypedText = typedTextDatabaseArray[id];
90007426:	6824      	ldr	r4, [r4, #0]
            currentLanguagePtr = texts_all_languages;
90007428:	480b      	ldr	r0, [pc, #44]	; (90007458 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
            currentLanguageIndices = staticLanguageIndices[id];
9000742a:	4b05      	ldr	r3, [pc, #20]	; (90007440 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
9000742c:	4a0b      	ldr	r2, [pc, #44]	; (9000745c <_ZN8touchgfx5Texts11setLanguageEt+0x78>)
            currentLanguagePtr = texts_all_languages;
9000742e:	6008      	str	r0, [r1, #0]
            currentLanguageIndices = staticLanguageIndices[id];
90007430:	601a      	str	r2, [r3, #0]
    if (currentLanguageTypedText)
90007432:	2c00      	cmp	r4, #0
90007434:	d1e5      	bne.n	90007402 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
90007436:	bd38      	pop	{r3, r4, r5, pc}
90007438:	2400bf18 	.word	0x2400bf18
9000743c:	2400bf1c 	.word	0x2400bf1c
90007440:	2400bf20 	.word	0x2400bf20
90007444:	2400bf24 	.word	0x2400bf24
90007448:	24026fdc 	.word	0x24026fdc
9000744c:	24026fe4 	.word	0x24026fe4
90007450:	24026fe0 	.word	0x24026fe0
90007454:	90209150 	.word	0x90209150
90007458:	902090cc 	.word	0x902090cc
9000745c:	90209088 	.word	0x90209088

90007460 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
90007460:	4a04      	ldr	r2, [pc, #16]	; (90007474 <_ZNK8touchgfx5Texts7getTextEt+0x14>)
90007462:	4b05      	ldr	r3, [pc, #20]	; (90007478 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
90007464:	6812      	ldr	r2, [r2, #0]
90007466:	681b      	ldr	r3, [r3, #0]
90007468:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
}
9000746c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
90007470:	4770      	bx	lr
90007472:	bf00      	nop
90007474:	2400bf20 	.word	0x2400bf20
90007478:	2400bf1c 	.word	0x2400bf1c

9000747c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
9000747c:	2011      	movs	r0, #17
9000747e:	4770      	bx	lr

90007480 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
90007480:	4800      	ldr	r0, [pc, #0]	; (90007484 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
90007482:	4770      	bx	lr
90007484:	2400bf28 	.word	0x2400bf28

90007488 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 3:
        touchgfx_fonts[3] = &(getFont_verdana_13_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
90007488:	b510      	push	{r4, lr}
};
9000748a:	4c07      	ldr	r4, [pc, #28]	; (900074a8 <_GLOBAL__sub_I_touchgfx_fonts+0x20>)
    &(getFont_verdana_20_4bpp()),
9000748c:	f7ff fea2 	bl	900071d4 <_Z23getFont_verdana_20_4bppv>
};
90007490:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
90007492:	f7ff fee1 	bl	90007258 <_Z23getFont_verdana_40_4bppv>
};
90007496:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp()),
90007498:	f7ff fe1c 	bl	900070d4 <_Z23getFont_verdana_10_4bppv>
};
9000749c:	60a0      	str	r0, [r4, #8]
    &(getFont_verdana_13_4bpp())
9000749e:	f7ff fe59 	bl	90007154 <_Z23getFont_verdana_13_4bppv>
};
900074a2:	60e0      	str	r0, [r4, #12]
} // namespace TypedTextDatabase
900074a4:	bd10      	pop	{r4, pc}
900074a6:	bf00      	nop
900074a8:	2400bf28 	.word	0x2400bf28

900074ac <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
900074ac:	4770      	bx	lr
900074ae:	bf00      	nop

900074b0 <_ZN19FrontendApplicationD0Ev>:
900074b0:	b510      	push	{r4, lr}
900074b2:	4604      	mov	r4, r0
900074b4:	f44f 71ae 	mov.w	r1, #348	; 0x15c
900074b8:	f01f fd1b 	bl	90026ef2 <_ZdlPvj>
900074bc:	4620      	mov	r0, r4
900074be:	bd10      	pop	{r4, pc}

900074c0 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
900074c0:	b510      	push	{r4, lr}
900074c2:	4604      	mov	r4, r0
    {
        model.tick();
900074c4:	f8d0 0158 	ldr.w	r0, [r0, #344]	; 0x158
900074c8:	f000 f82a 	bl	90007520 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
900074cc:	4620      	mov	r0, r4
    }
900074ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
900074d2:	f010 bf5b 	b.w	9001838c <_ZN8touchgfx11Application15handleTickEventEv>
900074d6:	bf00      	nop

900074d8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
900074d8:	b510      	push	{r4, lr}
900074da:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
900074dc:	f7fd fef8 	bl	900052d0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
900074e0:	4b01      	ldr	r3, [pc, #4]	; (900074e8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
900074e2:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
900074e4:	6023      	str	r3, [r4, #0]
}
900074e6:	bd10      	pop	{r4, pc}
900074e8:	9002a970 	.word	0x9002a970

900074ec <_ZN13ModelListener9setPoliceEb>:
    }

    virtual void uart_Data(char *data);

    virtual void setPolice(bool state) {};
900074ec:	4770      	bx	lr
900074ee:	bf00      	nop

900074f0 <_ZN5ModelC1Ev>:
	extern osMessageQueueId_t uartQueueHandle;
	uartData_t *uartData_r;
}
#endif

Model::Model() :
900074f0:	b510      	push	{r4, lr}
	ongoingAlarmState(false),
	alarmSystemState(false),
	invalidPinWarningState(false),
	countdownAlarmSetState(false),
	countPinDigits(0),
	ADMIN_PASSWORD(1234)  // Perhaps not the best practice to hard-code the password
900074f2:	2200      	movs	r2, #0
Model::Model() :
900074f4:	4604      	mov	r4, r0
	ADMIN_PASSWORD(1234)  // Perhaps not the best practice to hard-code the password
900074f6:	f240 43d2 	movw	r3, #1234	; 0x4d2
{
#ifndef SIMULATOR
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
900074fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	ADMIN_PASSWORD(1234)  // Perhaps not the best practice to hard-code the password
900074fe:	6002      	str	r2, [r0, #0]
90007500:	f8c0 2206 	str.w	r2, [r0, #518]	; 0x206
90007504:	f880 220a 	strb.w	r2, [r0, #522]	; 0x20a
90007508:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
9000750c:	4803      	ldr	r0, [pc, #12]	; (9000751c <_ZN5ModelC1Ev+0x2c>)
	ADMIN_PASSWORD(1234)  // Perhaps not the best practice to hard-code the password
9000750e:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007512:	f003 f913 	bl	9000a73c <HAL_GPIO_WritePin>
#endif
}
90007516:	4620      	mov	r0, r4
90007518:	bd10      	pop	{r4, pc}
9000751a:	bf00      	nop
9000751c:	58020400 	.word	0x58020400

90007520 <_ZN5Model4tickEv>:

void Model::tick()
{
90007520:	b570      	push	{r4, r5, r6, lr}
#ifndef SIMULATOR
	if (osMessageQueueGetCount(uartQueueHandle) > 0)
90007522:	4d26      	ldr	r5, [pc, #152]	; (900075bc <_ZN5Model4tickEv+0x9c>)
{
90007524:	4604      	mov	r4, r0
	if (osMessageQueueGetCount(uartQueueHandle) > 0)
90007526:	6828      	ldr	r0, [r5, #0]
90007528:	f009 fce2 	bl	90010ef0 <osMessageQueueGetCount>
9000752c:	b918      	cbnz	r0, 90007536 <_ZN5Model4tickEv+0x16>
			{
				buttonState = true;
			}
			else
			{
				buttonState = false;
9000752e:	2300      	movs	r3, #0
90007530:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
	if (alarmSystemState && buttonState && !ongoingAlarmState && !countdownOngoingAlarmSetState)
	{
		Model::activateOngoingAlarm();
	}
	// Countdown is ticking down
}
90007534:	bd70      	pop	{r4, r5, r6, pc}
		if (osMessageQueueGet(uartQueueHandle, &uartData_r, 0, 0) == osOK)
90007536:	2300      	movs	r3, #0
90007538:	4e21      	ldr	r6, [pc, #132]	; (900075c0 <_ZN5Model4tickEv+0xa0>)
9000753a:	6828      	ldr	r0, [r5, #0]
9000753c:	461a      	mov	r2, r3
9000753e:	4631      	mov	r1, r6
90007540:	f009 fc98 	bl	90010e74 <osMessageQueueGet>
90007544:	b1d8      	cbz	r0, 9000757e <_ZN5Model4tickEv+0x5e>
	if (alarmSystemState && buttonState && !ongoingAlarmState && !countdownOngoingAlarmSetState)
90007546:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
9000754a:	2b00      	cmp	r3, #0
9000754c:	d0f2      	beq.n	90007534 <_ZN5Model4tickEv+0x14>
9000754e:	f894 3206 	ldrb.w	r3, [r4, #518]	; 0x206
90007552:	2b00      	cmp	r3, #0
90007554:	d0ee      	beq.n	90007534 <_ZN5Model4tickEv+0x14>
90007556:	f894 3209 	ldrb.w	r3, [r4, #521]	; 0x209
9000755a:	2b00      	cmp	r3, #0
9000755c:	d1ea      	bne.n	90007534 <_ZN5Model4tickEv+0x14>
9000755e:	f894 320b 	ldrb.w	r3, [r4, #523]	; 0x20b
90007562:	2b00      	cmp	r3, #0
90007564:	d1e6      	bne.n	90007534 <_ZN5Model4tickEv+0x14>
void Model::activateOngoingAlarm()
{
	// After this, the countdown function continues inside the view under handleTickEvent() function.
	countdownOngoingAlarmSetState = true;
	countdownOngoingAlarmSetSeconds = 30;
	modelListener->activateOngoingAlarm();
90007566:	6820      	ldr	r0, [r4, #0]
	countdownOngoingAlarmSetState = true;
90007568:	2101      	movs	r1, #1
	countdownOngoingAlarmSetSeconds = 30;
9000756a:	221e      	movs	r2, #30
	modelListener->activateOngoingAlarm();
9000756c:	6803      	ldr	r3, [r0, #0]
	countdownOngoingAlarmSetState = true;
9000756e:	f884 120b 	strb.w	r1, [r4, #523]	; 0x20b
	countdownOngoingAlarmSetSeconds = 30;
90007572:	f8c4 2228 	str.w	r2, [r4, #552]	; 0x228
	modelListener->activateOngoingAlarm();
90007576:	699b      	ldr	r3, [r3, #24]
}
90007578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	modelListener->activateOngoingAlarm();
9000757c:	4718      	bx	r3
			strncpy(RData, uartData_r->Data, uartData_r->size);
9000757e:	6831      	ldr	r1, [r6, #0]
90007580:	1d25      	adds	r5, r4, #4
90007582:	f851 2b04 	ldr.w	r2, [r1], #4
90007586:	4628      	mov	r0, r5
90007588:	f020 fa1e 	bl	900279c8 <strncpy>
			modelListener->uart_Data(RData);
9000758c:	6820      	ldr	r0, [r4, #0]
9000758e:	4629      	mov	r1, r5
90007590:	6803      	ldr	r3, [r0, #0]
90007592:	689b      	ldr	r3, [r3, #8]
90007594:	4798      	blx	r3
			if (strcmp(RData, "1111110") == 0 && alarmSystemState)
90007596:	490b      	ldr	r1, [pc, #44]	; (900075c4 <_ZN5Model4tickEv+0xa4>)
90007598:	4628      	mov	r0, r5
9000759a:	f7f8 fef1 	bl	90000380 <strcmp>
9000759e:	b128      	cbz	r0, 900075ac <_ZN5Model4tickEv+0x8c>
			else if (strcmp(RData, "1111101") == 0 && alarmSystemState)
900075a0:	4909      	ldr	r1, [pc, #36]	; (900075c8 <_ZN5Model4tickEv+0xa8>)
900075a2:	4628      	mov	r0, r5
900075a4:	f7f8 feec 	bl	90000380 <strcmp>
900075a8:	2800      	cmp	r0, #0
900075aa:	d1c0      	bne.n	9000752e <_ZN5Model4tickEv+0xe>
			if (strcmp(RData, "1111110") == 0 && alarmSystemState)
900075ac:	f894 3207 	ldrb.w	r3, [r4, #519]	; 0x207
900075b0:	2b00      	cmp	r3, #0
900075b2:	d0bc      	beq.n	9000752e <_ZN5Model4tickEv+0xe>
				buttonState = true;
900075b4:	2301      	movs	r3, #1
900075b6:	f884 3206 	strb.w	r3, [r4, #518]	; 0x206
	if (alarmSystemState && buttonState && !ongoingAlarmState && !countdownOngoingAlarmSetState)
900075ba:	e7cc      	b.n	90007556 <_ZN5Model4tickEv+0x36>
900075bc:	2400bdf8 	.word	0x2400bdf8
900075c0:	2400bf38 	.word	0x2400bf38
900075c4:	9002a9b4 	.word	0x9002a9b4
900075c8:	9002a9bc 	.word	0x9002a9bc

900075cc <_ZN5Model19getAlarmSystemStateEv>:
}
900075cc:	f890 0207 	ldrb.w	r0, [r0, #519]	; 0x207
900075d0:	4770      	bx	lr
900075d2:	bf00      	nop

900075d4 <_ZN5Model25getCountdownAlarmSetStateEv>:
}
900075d4:	f890 020a 	ldrb.w	r0, [r0, #522]	; 0x20a
900075d8:	4770      	bx	lr
900075da:	bf00      	nop

900075dc <_ZN5Model32getCountdownOngoingAlarmSetStateEv>:
}
900075dc:	f890 020b 	ldrb.w	r0, [r0, #523]	; 0x20b
900075e0:	4770      	bx	lr
900075e2:	bf00      	nop

900075e4 <_ZN5Model19activateAlarmSystemEv>:
	countdownAlarmSetState = true;
900075e4:	2201      	movs	r2, #1
	countdownAlarmSetSeconds = 30;
900075e6:	231e      	movs	r3, #30
	countdownAlarmSetState = true;
900075e8:	f880 220a 	strb.w	r2, [r0, #522]	; 0x20a
	countdownAlarmSetSeconds = 30;
900075ec:	f8c0 3224 	str.w	r3, [r0, #548]	; 0x224
}
900075f0:	4770      	bx	lr
900075f2:	bf00      	nop

900075f4 <_ZN5Model21countdownAlarmSetTickEv>:
}

int Model::countdownAlarmSetTick()
{
900075f4:	b510      	push	{r4, lr}
900075f6:	4604      	mov	r4, r0
	countdownAlarmSetSeconds--;
900075f8:	f8d0 0224 	ldr.w	r0, [r0, #548]	; 0x224
900075fc:	3801      	subs	r0, #1
	if (countdownAlarmSetSeconds <= 0)
900075fe:	2800      	cmp	r0, #0
	countdownAlarmSetSeconds--;
90007600:	f8c4 0224 	str.w	r0, [r4, #548]	; 0x224
	if (countdownAlarmSetSeconds <= 0)
90007604:	dd00      	ble.n	90007608 <_ZN5Model21countdownAlarmSetTickEv+0x14>
		countdownAlarmSetState = false;
		alarmSystemState = true;
		Model::sendStartSensingCommPacket();
	}
	return countdownAlarmSetSeconds;
}
90007606:	bd10      	pop	{r4, pc}
	strcpy(TData, "0000001");
90007608:	4a0c      	ldr	r2, [pc, #48]	; (9000763c <_ZN5Model21countdownAlarmSetTickEv+0x48>)
		countdownAlarmSetState = false;
9000760a:	f04f 0e00 	mov.w	lr, #0
		alarmSystemState = true;
9000760e:	f04f 0c01 	mov.w	ip, #1
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		countdownAlarmSetState = false;
90007616:	f884 e20a 	strb.w	lr, [r4, #522]	; 0x20a
		alarmSystemState = true;
9000761a:	f884 c207 	strb.w	ip, [r4, #519]	; 0x207
	strcpy(TData, "0000001");
9000761e:	ca03      	ldmia	r2!, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007620:	2207      	movs	r2, #7
	strcpy(TData, "0000001");
90007622:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007626:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
9000762a:	f204 1105 	addw	r1, r4, #261	; 0x105
9000762e:	4804      	ldr	r0, [pc, #16]	; (90007640 <_ZN5Model21countdownAlarmSetTickEv+0x4c>)
90007630:	f007 fdd2 	bl	9000f1d8 <HAL_UART_Transmit>
	return countdownAlarmSetSeconds;
90007634:	f8d4 0224 	ldr.w	r0, [r4, #548]	; 0x224
}
90007638:	bd10      	pop	{r4, pc}
9000763a:	bf00      	nop
9000763c:	9002a9c4 	.word	0x9002a9c4
90007640:	2400bd60 	.word	0x2400bd60

90007644 <_ZN5Model28countdownOngoingAlarmSetTickEv>:

int Model::countdownOngoingAlarmSetTick()
{
90007644:	b510      	push	{r4, lr}
90007646:	4604      	mov	r4, r0
	countdownOngoingAlarmSetSeconds--;
90007648:	f8d0 0228 	ldr.w	r0, [r0, #552]	; 0x228
9000764c:	3801      	subs	r0, #1
	if (countdownOngoingAlarmSetSeconds <= 0)
9000764e:	2800      	cmp	r0, #0
	countdownOngoingAlarmSetSeconds--;
90007650:	f8c4 0228 	str.w	r0, [r4, #552]	; 0x228
	if (countdownOngoingAlarmSetSeconds <= 0)
90007654:	dd00      	ble.n	90007658 <_ZN5Model28countdownOngoingAlarmSetTickEv+0x14>
		ongoingAlarmState = true;
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
		Model::turnBuzzerOn();
	}
	return countdownOngoingAlarmSetSeconds;
}
90007656:	bd10      	pop	{r4, pc}
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
90007658:	6820      	ldr	r0, [r4, #0]
		countdownOngoingAlarmSetState = false;
9000765a:	2200      	movs	r2, #0
		ongoingAlarmState = true;
9000765c:	2101      	movs	r1, #1
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
9000765e:	6803      	ldr	r3, [r0, #0]
		countdownOngoingAlarmSetState = false;
90007660:	f884 220b 	strb.w	r2, [r4, #523]	; 0x20b
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
90007664:	68db      	ldr	r3, [r3, #12]
90007666:	4a08      	ldr	r2, [pc, #32]	; (90007688 <_ZN5Model28countdownOngoingAlarmSetTickEv+0x44>)
		ongoingAlarmState = true;
90007668:	f884 1209 	strb.w	r1, [r4, #521]	; 0x209
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
9000766c:	4293      	cmp	r3, r2
9000766e:	d108      	bne.n	90007682 <_ZN5Model28countdownOngoingAlarmSetTickEv+0x3e>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_SET);
90007670:	2201      	movs	r2, #1
90007672:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007676:	4805      	ldr	r0, [pc, #20]	; (9000768c <_ZN5Model28countdownOngoingAlarmSetTickEv+0x48>)
90007678:	f003 f860 	bl	9000a73c <HAL_GPIO_WritePin>
	return countdownOngoingAlarmSetSeconds;
9000767c:	f8d4 0228 	ldr.w	r0, [r4, #552]	; 0x228
}
90007680:	bd10      	pop	{r4, pc}
		modelListener->setPolice(true);  // START THE ALARM SOUNDS AND NOTIFICATIONS (in other function)
90007682:	4798      	blx	r3
90007684:	e7f4      	b.n	90007670 <_ZN5Model28countdownOngoingAlarmSetTickEv+0x2c>
90007686:	bf00      	nop
90007688:	900074ed 	.word	0x900074ed
9000768c:	58020400 	.word	0x58020400

90007690 <_ZN5Model21stopCountdownAlarmSetEv>:

void Model::stopCountdownAlarmSet()
{
	countdownAlarmSetState = false;
	// To be sure of the countdown ongoing alarm state is not initated reset it
	countdownOngoingAlarmSetState = false;
90007690:	2300      	movs	r3, #0
90007692:	f880 320b 	strb.w	r3, [r0, #523]	; 0x20b

	alarmSystemState = false;
90007696:	f880 3207 	strb.w	r3, [r0, #519]	; 0x207
	ongoingAlarmState = false;
9000769a:	f8a0 3209 	strh.w	r3, [r0, #521]	; 0x209
}
9000769e:	4770      	bx	lr

900076a0 <_ZN5Model12clickButton1Ev>:
		//modelListener->updatePinNumber(pinNumber, countPinDigits);
	}

}

void Model::clickButton1() { pinNumber[countPinDigits++] = 1; Model::updatePinNumber(); }
900076a0:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
900076a4:	b570      	push	{r4, r5, r6, lr}
900076a6:	2501      	movs	r5, #1
900076a8:	f103 0184 	add.w	r1, r3, #132	; 0x84
900076ac:	4604      	mov	r4, r0
900076ae:	195a      	adds	r2, r3, r5
	for (int i = 0; i < countPinDigits; i++)
900076b0:	2a00      	cmp	r2, #0
void Model::clickButton1() { pinNumber[countPinDigits++] = 1; Model::updatePinNumber(); }
900076b2:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
900076b6:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
900076ba:	dd2d      	ble.n	90007718 <_ZN5Model12clickButton1Ev+0x78>
900076bc:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
900076be:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
900076c2:	dd15      	ble.n	900076f0 <_ZN5Model12clickButton1Ev+0x50>
		pin = pin * 10 + pinNumber[i];
900076c4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900076c8:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
900076cc:	42ab      	cmp	r3, r5
		pin = pin * 10 + pinNumber[i];
900076ce:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
900076d2:	d00d      	beq.n	900076f0 <_ZN5Model12clickButton1Ev+0x50>
		pin = pin * 10 + pinNumber[i];
900076d4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900076d8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
900076dc:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
900076de:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
900076e2:	d005      	beq.n	900076f0 <_ZN5Model12clickButton1Ev+0x50>
		pin = pin * 10 + pinNumber[i];
900076e4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900076e8:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
900076ec:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
900076f0:	2a04      	cmp	r2, #4
900076f2:	d005      	beq.n	90007700 <_ZN5Model12clickButton1Ev+0x60>
		modelListener->updatePinNumber(pin);
900076f4:	6820      	ldr	r0, [r4, #0]
900076f6:	6803      	ldr	r3, [r0, #0]
void Model::clickButton1() { pinNumber[countPinDigits++] = 1; Model::updatePinNumber(); }
900076f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
900076fc:	695b      	ldr	r3, [r3, #20]
900076fe:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007700:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007704:	428b      	cmp	r3, r1
90007706:	d009      	beq.n	9000771c <_ZN5Model12clickButton1Ev+0x7c>
			modelListener->updateInvalidPinNumber();
90007708:	6820      	ldr	r0, [r4, #0]
9000770a:	6803      	ldr	r3, [r0, #0]
9000770c:	69db      	ldr	r3, [r3, #28]
9000770e:	4798      	blx	r3
		countPinDigits = 0;
90007710:	2300      	movs	r3, #0
90007712:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton1() { pinNumber[countPinDigits++] = 1; Model::updatePinNumber(); }
90007716:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007718:	2100      	movs	r1, #0
9000771a:	e7eb      	b.n	900076f4 <_ZN5Model12clickButton1Ev+0x54>
	strcpy(TData, "0000010");
9000771c:	4d0f      	ldr	r5, [pc, #60]	; (9000775c <_ZN5Model12clickButton1Ev+0xbc>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
9000771e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007722:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007724:	cd03      	ldmia	r5!, {r0, r1}
90007726:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
9000772a:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
9000772e:	f204 1105 	addw	r1, r4, #261	; 0x105
90007732:	480b      	ldr	r0, [pc, #44]	; (90007760 <_ZN5Model12clickButton1Ev+0xc0>)
90007734:	f007 fd50 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007738:	2200      	movs	r2, #0
9000773a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
9000773e:	4809      	ldr	r0, [pc, #36]	; (90007764 <_ZN5Model12clickButton1Ev+0xc4>)
90007740:	f002 fffc 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007744:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007746:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007748:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
9000774a:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
9000774e:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007750:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007754:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007758:	4790      	blx	r2
9000775a:	e7d9      	b.n	90007710 <_ZN5Model12clickButton1Ev+0x70>
9000775c:	9002a9cc 	.word	0x9002a9cc
90007760:	2400bd60 	.word	0x2400bd60
90007764:	58020400 	.word	0x58020400

90007768 <_ZN5Model12clickButton2Ev>:

void Model::clickButton2() { pinNumber[countPinDigits++] = 2; Model::updatePinNumber(); }
90007768:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
9000776c:	1c5a      	adds	r2, r3, #1
9000776e:	f103 0184 	add.w	r1, r3, #132	; 0x84
90007772:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007774:	2a00      	cmp	r2, #0
void Model::clickButton2() { pinNumber[countPinDigits++] = 2; Model::updatePinNumber(); }
90007776:	f04f 0502 	mov.w	r5, #2
9000777a:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
9000777e:	4604      	mov	r4, r0
90007780:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007784:	dd2d      	ble.n	900077e2 <_ZN5Model12clickButton2Ev+0x7a>
90007786:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007788:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
9000778c:	dd15      	ble.n	900077ba <_ZN5Model12clickButton2Ev+0x52>
		pin = pin * 10 + pinNumber[i];
9000778e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007792:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007796:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007798:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
9000779c:	d00d      	beq.n	900077ba <_ZN5Model12clickButton2Ev+0x52>
		pin = pin * 10 + pinNumber[i];
9000779e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900077a2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
900077a6:	42ab      	cmp	r3, r5
		pin = pin * 10 + pinNumber[i];
900077a8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
900077ac:	d005      	beq.n	900077ba <_ZN5Model12clickButton2Ev+0x52>
		pin = pin * 10 + pinNumber[i];
900077ae:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900077b2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
900077b6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
900077ba:	2a04      	cmp	r2, #4
900077bc:	d005      	beq.n	900077ca <_ZN5Model12clickButton2Ev+0x62>
		modelListener->updatePinNumber(pin);
900077be:	6820      	ldr	r0, [r4, #0]
900077c0:	6803      	ldr	r3, [r0, #0]
void Model::clickButton2() { pinNumber[countPinDigits++] = 2; Model::updatePinNumber(); }
900077c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
900077c6:	695b      	ldr	r3, [r3, #20]
900077c8:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
900077ca:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
900077ce:	428b      	cmp	r3, r1
900077d0:	d009      	beq.n	900077e6 <_ZN5Model12clickButton2Ev+0x7e>
			modelListener->updateInvalidPinNumber();
900077d2:	6820      	ldr	r0, [r4, #0]
900077d4:	6803      	ldr	r3, [r0, #0]
900077d6:	69db      	ldr	r3, [r3, #28]
900077d8:	4798      	blx	r3
		countPinDigits = 0;
900077da:	2300      	movs	r3, #0
900077dc:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton2() { pinNumber[countPinDigits++] = 2; Model::updatePinNumber(); }
900077e0:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
900077e2:	2100      	movs	r1, #0
900077e4:	e7eb      	b.n	900077be <_ZN5Model12clickButton2Ev+0x56>
	strcpy(TData, "0000010");
900077e6:	4d10      	ldr	r5, [pc, #64]	; (90007828 <_ZN5Model12clickButton2Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
900077e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900077ec:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
900077ee:	cd03      	ldmia	r5!, {r0, r1}
900077f0:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
900077f4:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
900077f8:	f204 1105 	addw	r1, r4, #261	; 0x105
900077fc:	480b      	ldr	r0, [pc, #44]	; (9000782c <_ZN5Model12clickButton2Ev+0xc4>)
900077fe:	f007 fceb 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007802:	2200      	movs	r2, #0
90007804:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007808:	4809      	ldr	r0, [pc, #36]	; (90007830 <_ZN5Model12clickButton2Ev+0xc8>)
9000780a:	f002 ff97 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
9000780e:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007810:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007812:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007814:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007818:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
9000781a:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
9000781e:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007822:	4790      	blx	r2
90007824:	e7d9      	b.n	900077da <_ZN5Model12clickButton2Ev+0x72>
90007826:	bf00      	nop
90007828:	9002a9cc 	.word	0x9002a9cc
9000782c:	2400bd60 	.word	0x2400bd60
90007830:	58020400 	.word	0x58020400

90007834 <_ZN5Model12clickButton3Ev>:

void Model::clickButton3() { pinNumber[countPinDigits++] = 3; Model::updatePinNumber(); }
90007834:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007838:	1c5a      	adds	r2, r3, #1
9000783a:	f103 0184 	add.w	r1, r3, #132	; 0x84
9000783e:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007840:	2a00      	cmp	r2, #0
void Model::clickButton3() { pinNumber[countPinDigits++] = 3; Model::updatePinNumber(); }
90007842:	f04f 0503 	mov.w	r5, #3
90007846:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
9000784a:	4604      	mov	r4, r0
9000784c:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007850:	dd2d      	ble.n	900078ae <_ZN5Model12clickButton3Ev+0x7a>
90007852:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007854:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007858:	dd15      	ble.n	90007886 <_ZN5Model12clickButton3Ev+0x52>
		pin = pin * 10 + pinNumber[i];
9000785a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000785e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007862:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007864:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007868:	d00d      	beq.n	90007886 <_ZN5Model12clickButton3Ev+0x52>
		pin = pin * 10 + pinNumber[i];
9000786a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000786e:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007872:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007874:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007878:	d005      	beq.n	90007886 <_ZN5Model12clickButton3Ev+0x52>
		pin = pin * 10 + pinNumber[i];
9000787a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000787e:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007882:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007886:	2a04      	cmp	r2, #4
90007888:	d005      	beq.n	90007896 <_ZN5Model12clickButton3Ev+0x62>
		modelListener->updatePinNumber(pin);
9000788a:	6820      	ldr	r0, [r4, #0]
9000788c:	6803      	ldr	r3, [r0, #0]
void Model::clickButton3() { pinNumber[countPinDigits++] = 3; Model::updatePinNumber(); }
9000788e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007892:	695b      	ldr	r3, [r3, #20]
90007894:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007896:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
9000789a:	428b      	cmp	r3, r1
9000789c:	d009      	beq.n	900078b2 <_ZN5Model12clickButton3Ev+0x7e>
			modelListener->updateInvalidPinNumber();
9000789e:	6820      	ldr	r0, [r4, #0]
900078a0:	6803      	ldr	r3, [r0, #0]
900078a2:	69db      	ldr	r3, [r3, #28]
900078a4:	4798      	blx	r3
		countPinDigits = 0;
900078a6:	2300      	movs	r3, #0
900078a8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton3() { pinNumber[countPinDigits++] = 3; Model::updatePinNumber(); }
900078ac:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
900078ae:	2100      	movs	r1, #0
900078b0:	e7eb      	b.n	9000788a <_ZN5Model12clickButton3Ev+0x56>
	strcpy(TData, "0000010");
900078b2:	4d10      	ldr	r5, [pc, #64]	; (900078f4 <_ZN5Model12clickButton3Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
900078b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
900078b8:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
900078ba:	cd03      	ldmia	r5!, {r0, r1}
900078bc:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
900078c0:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
900078c4:	f204 1105 	addw	r1, r4, #261	; 0x105
900078c8:	480b      	ldr	r0, [pc, #44]	; (900078f8 <_ZN5Model12clickButton3Ev+0xc4>)
900078ca:	f007 fc85 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
900078ce:	2200      	movs	r2, #0
900078d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
900078d4:	4809      	ldr	r0, [pc, #36]	; (900078fc <_ZN5Model12clickButton3Ev+0xc8>)
900078d6:	f002 ff31 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
900078da:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
900078dc:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
900078de:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
900078e0:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
900078e4:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
900078e6:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
900078ea:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
900078ee:	4790      	blx	r2
900078f0:	e7d9      	b.n	900078a6 <_ZN5Model12clickButton3Ev+0x72>
900078f2:	bf00      	nop
900078f4:	9002a9cc 	.word	0x9002a9cc
900078f8:	2400bd60 	.word	0x2400bd60
900078fc:	58020400 	.word	0x58020400

90007900 <_ZN5Model12clickButton4Ev>:

void Model::clickButton4() { pinNumber[countPinDigits++] = 4; Model::updatePinNumber(); }
90007900:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007904:	1c5a      	adds	r2, r3, #1
90007906:	f103 0184 	add.w	r1, r3, #132	; 0x84
9000790a:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
9000790c:	2a00      	cmp	r2, #0
void Model::clickButton4() { pinNumber[countPinDigits++] = 4; Model::updatePinNumber(); }
9000790e:	f04f 0504 	mov.w	r5, #4
90007912:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
90007916:	4604      	mov	r4, r0
90007918:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
9000791c:	dd2d      	ble.n	9000797a <_ZN5Model12clickButton4Ev+0x7a>
9000791e:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007920:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007924:	dd15      	ble.n	90007952 <_ZN5Model12clickButton4Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007926:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000792a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
9000792e:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007930:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007934:	d00d      	beq.n	90007952 <_ZN5Model12clickButton4Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007936:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000793a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
9000793e:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007940:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007944:	d005      	beq.n	90007952 <_ZN5Model12clickButton4Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007946:	eb01 0181 	add.w	r1, r1, r1, lsl #2
9000794a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
9000794e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007952:	2a04      	cmp	r2, #4
90007954:	d005      	beq.n	90007962 <_ZN5Model12clickButton4Ev+0x62>
		modelListener->updatePinNumber(pin);
90007956:	6820      	ldr	r0, [r4, #0]
90007958:	6803      	ldr	r3, [r0, #0]
void Model::clickButton4() { pinNumber[countPinDigits++] = 4; Model::updatePinNumber(); }
9000795a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
9000795e:	695b      	ldr	r3, [r3, #20]
90007960:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007962:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007966:	428b      	cmp	r3, r1
90007968:	d009      	beq.n	9000797e <_ZN5Model12clickButton4Ev+0x7e>
			modelListener->updateInvalidPinNumber();
9000796a:	6820      	ldr	r0, [r4, #0]
9000796c:	6803      	ldr	r3, [r0, #0]
9000796e:	69db      	ldr	r3, [r3, #28]
90007970:	4798      	blx	r3
		countPinDigits = 0;
90007972:	2300      	movs	r3, #0
90007974:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton4() { pinNumber[countPinDigits++] = 4; Model::updatePinNumber(); }
90007978:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
9000797a:	2100      	movs	r1, #0
9000797c:	e7eb      	b.n	90007956 <_ZN5Model12clickButton4Ev+0x56>
	strcpy(TData, "0000010");
9000797e:	4d10      	ldr	r5, [pc, #64]	; (900079c0 <_ZN5Model12clickButton4Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007980:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007984:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007986:	cd03      	ldmia	r5!, {r0, r1}
90007988:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
9000798c:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007990:	f204 1105 	addw	r1, r4, #261	; 0x105
90007994:	480b      	ldr	r0, [pc, #44]	; (900079c4 <_ZN5Model12clickButton4Ev+0xc4>)
90007996:	f007 fc1f 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
9000799a:	2200      	movs	r2, #0
9000799c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
900079a0:	4809      	ldr	r0, [pc, #36]	; (900079c8 <_ZN5Model12clickButton4Ev+0xc8>)
900079a2:	f002 fecb 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
900079a6:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
900079a8:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
900079aa:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
900079ac:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
900079b0:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
900079b2:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
900079b6:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
900079ba:	4790      	blx	r2
900079bc:	e7d9      	b.n	90007972 <_ZN5Model12clickButton4Ev+0x72>
900079be:	bf00      	nop
900079c0:	9002a9cc 	.word	0x9002a9cc
900079c4:	2400bd60 	.word	0x2400bd60
900079c8:	58020400 	.word	0x58020400

900079cc <_ZN5Model12clickButton5Ev>:

void Model::clickButton5() { pinNumber[countPinDigits++] = 5; Model::updatePinNumber(); }
900079cc:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
900079d0:	1c5a      	adds	r2, r3, #1
900079d2:	f103 0184 	add.w	r1, r3, #132	; 0x84
900079d6:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
900079d8:	2a00      	cmp	r2, #0
void Model::clickButton5() { pinNumber[countPinDigits++] = 5; Model::updatePinNumber(); }
900079da:	f04f 0505 	mov.w	r5, #5
900079de:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
900079e2:	4604      	mov	r4, r0
900079e4:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
900079e8:	dd2d      	ble.n	90007a46 <_ZN5Model12clickButton5Ev+0x7a>
900079ea:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
900079ec:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
900079f0:	dd15      	ble.n	90007a1e <_ZN5Model12clickButton5Ev+0x52>
		pin = pin * 10 + pinNumber[i];
900079f2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
900079f6:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
900079fa:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
900079fc:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007a00:	d00d      	beq.n	90007a1e <_ZN5Model12clickButton5Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007a02:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007a06:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007a0a:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007a0c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007a10:	d005      	beq.n	90007a1e <_ZN5Model12clickButton5Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007a12:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007a16:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007a1a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007a1e:	2a04      	cmp	r2, #4
90007a20:	d005      	beq.n	90007a2e <_ZN5Model12clickButton5Ev+0x62>
		modelListener->updatePinNumber(pin);
90007a22:	6820      	ldr	r0, [r4, #0]
90007a24:	6803      	ldr	r3, [r0, #0]
void Model::clickButton5() { pinNumber[countPinDigits++] = 5; Model::updatePinNumber(); }
90007a26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007a2a:	695b      	ldr	r3, [r3, #20]
90007a2c:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007a2e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007a32:	428b      	cmp	r3, r1
90007a34:	d009      	beq.n	90007a4a <_ZN5Model12clickButton5Ev+0x7e>
			modelListener->updateInvalidPinNumber();
90007a36:	6820      	ldr	r0, [r4, #0]
90007a38:	6803      	ldr	r3, [r0, #0]
90007a3a:	69db      	ldr	r3, [r3, #28]
90007a3c:	4798      	blx	r3
		countPinDigits = 0;
90007a3e:	2300      	movs	r3, #0
90007a40:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton5() { pinNumber[countPinDigits++] = 5; Model::updatePinNumber(); }
90007a44:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007a46:	2100      	movs	r1, #0
90007a48:	e7eb      	b.n	90007a22 <_ZN5Model12clickButton5Ev+0x56>
	strcpy(TData, "0000010");
90007a4a:	4d10      	ldr	r5, [pc, #64]	; (90007a8c <_ZN5Model12clickButton5Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007a4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007a50:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007a52:	cd03      	ldmia	r5!, {r0, r1}
90007a54:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007a58:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007a5c:	f204 1105 	addw	r1, r4, #261	; 0x105
90007a60:	480b      	ldr	r0, [pc, #44]	; (90007a90 <_ZN5Model12clickButton5Ev+0xc4>)
90007a62:	f007 fbb9 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007a66:	2200      	movs	r2, #0
90007a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007a6c:	4809      	ldr	r0, [pc, #36]	; (90007a94 <_ZN5Model12clickButton5Ev+0xc8>)
90007a6e:	f002 fe65 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007a72:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007a74:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007a76:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007a78:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007a7c:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007a7e:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007a82:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007a86:	4790      	blx	r2
90007a88:	e7d9      	b.n	90007a3e <_ZN5Model12clickButton5Ev+0x72>
90007a8a:	bf00      	nop
90007a8c:	9002a9cc 	.word	0x9002a9cc
90007a90:	2400bd60 	.word	0x2400bd60
90007a94:	58020400 	.word	0x58020400

90007a98 <_ZN5Model12clickButton6Ev>:

void Model::clickButton6() { pinNumber[countPinDigits++] = 6; Model::updatePinNumber(); }
90007a98:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007a9c:	1c5a      	adds	r2, r3, #1
90007a9e:	f103 0184 	add.w	r1, r3, #132	; 0x84
90007aa2:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007aa4:	2a00      	cmp	r2, #0
void Model::clickButton6() { pinNumber[countPinDigits++] = 6; Model::updatePinNumber(); }
90007aa6:	f04f 0506 	mov.w	r5, #6
90007aaa:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
90007aae:	4604      	mov	r4, r0
90007ab0:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007ab4:	dd2d      	ble.n	90007b12 <_ZN5Model12clickButton6Ev+0x7a>
90007ab6:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007ab8:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007abc:	dd15      	ble.n	90007aea <_ZN5Model12clickButton6Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007abe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007ac2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007ac6:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007ac8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007acc:	d00d      	beq.n	90007aea <_ZN5Model12clickButton6Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007ace:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007ad2:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007ad6:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007ad8:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007adc:	d005      	beq.n	90007aea <_ZN5Model12clickButton6Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007ade:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007ae2:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007ae6:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007aea:	2a04      	cmp	r2, #4
90007aec:	d005      	beq.n	90007afa <_ZN5Model12clickButton6Ev+0x62>
		modelListener->updatePinNumber(pin);
90007aee:	6820      	ldr	r0, [r4, #0]
90007af0:	6803      	ldr	r3, [r0, #0]
void Model::clickButton6() { pinNumber[countPinDigits++] = 6; Model::updatePinNumber(); }
90007af2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007af6:	695b      	ldr	r3, [r3, #20]
90007af8:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007afa:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007afe:	428b      	cmp	r3, r1
90007b00:	d009      	beq.n	90007b16 <_ZN5Model12clickButton6Ev+0x7e>
			modelListener->updateInvalidPinNumber();
90007b02:	6820      	ldr	r0, [r4, #0]
90007b04:	6803      	ldr	r3, [r0, #0]
90007b06:	69db      	ldr	r3, [r3, #28]
90007b08:	4798      	blx	r3
		countPinDigits = 0;
90007b0a:	2300      	movs	r3, #0
90007b0c:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton6() { pinNumber[countPinDigits++] = 6; Model::updatePinNumber(); }
90007b10:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007b12:	2100      	movs	r1, #0
90007b14:	e7eb      	b.n	90007aee <_ZN5Model12clickButton6Ev+0x56>
	strcpy(TData, "0000010");
90007b16:	4d10      	ldr	r5, [pc, #64]	; (90007b58 <_ZN5Model12clickButton6Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007b18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007b1c:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007b1e:	cd03      	ldmia	r5!, {r0, r1}
90007b20:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007b24:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007b28:	f204 1105 	addw	r1, r4, #261	; 0x105
90007b2c:	480b      	ldr	r0, [pc, #44]	; (90007b5c <_ZN5Model12clickButton6Ev+0xc4>)
90007b2e:	f007 fb53 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007b32:	2200      	movs	r2, #0
90007b34:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007b38:	4809      	ldr	r0, [pc, #36]	; (90007b60 <_ZN5Model12clickButton6Ev+0xc8>)
90007b3a:	f002 fdff 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007b3e:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007b40:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007b42:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007b44:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007b48:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007b4a:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007b4e:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007b52:	4790      	blx	r2
90007b54:	e7d9      	b.n	90007b0a <_ZN5Model12clickButton6Ev+0x72>
90007b56:	bf00      	nop
90007b58:	9002a9cc 	.word	0x9002a9cc
90007b5c:	2400bd60 	.word	0x2400bd60
90007b60:	58020400 	.word	0x58020400

90007b64 <_ZN5Model12clickButton7Ev>:

void Model::clickButton7() { pinNumber[countPinDigits++] = 7; Model::updatePinNumber(); }
90007b64:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007b68:	1c5a      	adds	r2, r3, #1
90007b6a:	f103 0184 	add.w	r1, r3, #132	; 0x84
90007b6e:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007b70:	2a00      	cmp	r2, #0
void Model::clickButton7() { pinNumber[countPinDigits++] = 7; Model::updatePinNumber(); }
90007b72:	f04f 0507 	mov.w	r5, #7
90007b76:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
90007b7a:	4604      	mov	r4, r0
90007b7c:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007b80:	dd2d      	ble.n	90007bde <_ZN5Model12clickButton7Ev+0x7a>
90007b82:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007b84:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007b88:	dd15      	ble.n	90007bb6 <_ZN5Model12clickButton7Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007b8a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007b8e:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007b92:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007b94:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007b98:	d00d      	beq.n	90007bb6 <_ZN5Model12clickButton7Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007b9a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007b9e:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007ba2:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007ba4:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007ba8:	d005      	beq.n	90007bb6 <_ZN5Model12clickButton7Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007baa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007bae:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007bb2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007bb6:	2a04      	cmp	r2, #4
90007bb8:	d005      	beq.n	90007bc6 <_ZN5Model12clickButton7Ev+0x62>
		modelListener->updatePinNumber(pin);
90007bba:	6820      	ldr	r0, [r4, #0]
90007bbc:	6803      	ldr	r3, [r0, #0]
void Model::clickButton7() { pinNumber[countPinDigits++] = 7; Model::updatePinNumber(); }
90007bbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007bc2:	695b      	ldr	r3, [r3, #20]
90007bc4:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007bc6:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007bca:	428b      	cmp	r3, r1
90007bcc:	d009      	beq.n	90007be2 <_ZN5Model12clickButton7Ev+0x7e>
			modelListener->updateInvalidPinNumber();
90007bce:	6820      	ldr	r0, [r4, #0]
90007bd0:	6803      	ldr	r3, [r0, #0]
90007bd2:	69db      	ldr	r3, [r3, #28]
90007bd4:	4798      	blx	r3
		countPinDigits = 0;
90007bd6:	2300      	movs	r3, #0
90007bd8:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton7() { pinNumber[countPinDigits++] = 7; Model::updatePinNumber(); }
90007bdc:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007bde:	2100      	movs	r1, #0
90007be0:	e7eb      	b.n	90007bba <_ZN5Model12clickButton7Ev+0x56>
	strcpy(TData, "0000010");
90007be2:	4d10      	ldr	r5, [pc, #64]	; (90007c24 <_ZN5Model12clickButton7Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007be4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007be8:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007bea:	cd03      	ldmia	r5!, {r0, r1}
90007bec:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007bf0:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007bf4:	f204 1105 	addw	r1, r4, #261	; 0x105
90007bf8:	480b      	ldr	r0, [pc, #44]	; (90007c28 <_ZN5Model12clickButton7Ev+0xc4>)
90007bfa:	f007 faed 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007bfe:	2200      	movs	r2, #0
90007c00:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007c04:	4809      	ldr	r0, [pc, #36]	; (90007c2c <_ZN5Model12clickButton7Ev+0xc8>)
90007c06:	f002 fd99 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007c0a:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007c0c:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007c0e:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007c10:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007c14:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007c16:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007c1a:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007c1e:	4790      	blx	r2
90007c20:	e7d9      	b.n	90007bd6 <_ZN5Model12clickButton7Ev+0x72>
90007c22:	bf00      	nop
90007c24:	9002a9cc 	.word	0x9002a9cc
90007c28:	2400bd60 	.word	0x2400bd60
90007c2c:	58020400 	.word	0x58020400

90007c30 <_ZN5Model12clickButton8Ev>:

void Model::clickButton8() { pinNumber[countPinDigits++] = 8; Model::updatePinNumber(); }
90007c30:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007c34:	1c5a      	adds	r2, r3, #1
90007c36:	f103 0184 	add.w	r1, r3, #132	; 0x84
90007c3a:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007c3c:	2a00      	cmp	r2, #0
void Model::clickButton8() { pinNumber[countPinDigits++] = 8; Model::updatePinNumber(); }
90007c3e:	f04f 0508 	mov.w	r5, #8
90007c42:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
90007c46:	4604      	mov	r4, r0
90007c48:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007c4c:	dd2d      	ble.n	90007caa <_ZN5Model12clickButton8Ev+0x7a>
90007c4e:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007c50:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007c54:	dd15      	ble.n	90007c82 <_ZN5Model12clickButton8Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007c56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007c5a:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007c5e:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007c60:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007c64:	d00d      	beq.n	90007c82 <_ZN5Model12clickButton8Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007c66:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007c6a:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007c6e:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007c70:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007c74:	d005      	beq.n	90007c82 <_ZN5Model12clickButton8Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007c76:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007c7a:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007c7e:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007c82:	2a04      	cmp	r2, #4
90007c84:	d005      	beq.n	90007c92 <_ZN5Model12clickButton8Ev+0x62>
		modelListener->updatePinNumber(pin);
90007c86:	6820      	ldr	r0, [r4, #0]
90007c88:	6803      	ldr	r3, [r0, #0]
void Model::clickButton8() { pinNumber[countPinDigits++] = 8; Model::updatePinNumber(); }
90007c8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007c8e:	695b      	ldr	r3, [r3, #20]
90007c90:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007c92:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007c96:	428b      	cmp	r3, r1
90007c98:	d009      	beq.n	90007cae <_ZN5Model12clickButton8Ev+0x7e>
			modelListener->updateInvalidPinNumber();
90007c9a:	6820      	ldr	r0, [r4, #0]
90007c9c:	6803      	ldr	r3, [r0, #0]
90007c9e:	69db      	ldr	r3, [r3, #28]
90007ca0:	4798      	blx	r3
		countPinDigits = 0;
90007ca2:	2300      	movs	r3, #0
90007ca4:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton8() { pinNumber[countPinDigits++] = 8; Model::updatePinNumber(); }
90007ca8:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007caa:	2100      	movs	r1, #0
90007cac:	e7eb      	b.n	90007c86 <_ZN5Model12clickButton8Ev+0x56>
	strcpy(TData, "0000010");
90007cae:	4d10      	ldr	r5, [pc, #64]	; (90007cf0 <_ZN5Model12clickButton8Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007cb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007cb4:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007cb6:	cd03      	ldmia	r5!, {r0, r1}
90007cb8:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007cbc:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007cc0:	f204 1105 	addw	r1, r4, #261	; 0x105
90007cc4:	480b      	ldr	r0, [pc, #44]	; (90007cf4 <_ZN5Model12clickButton8Ev+0xc4>)
90007cc6:	f007 fa87 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007cca:	2200      	movs	r2, #0
90007ccc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007cd0:	4809      	ldr	r0, [pc, #36]	; (90007cf8 <_ZN5Model12clickButton8Ev+0xc8>)
90007cd2:	f002 fd33 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007cd6:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007cd8:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007cda:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007cdc:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007ce0:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007ce2:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007ce6:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007cea:	4790      	blx	r2
90007cec:	e7d9      	b.n	90007ca2 <_ZN5Model12clickButton8Ev+0x72>
90007cee:	bf00      	nop
90007cf0:	9002a9cc 	.word	0x9002a9cc
90007cf4:	2400bd60 	.word	0x2400bd60
90007cf8:	58020400 	.word	0x58020400

90007cfc <_ZN5Model12clickButton9Ev>:

void Model::clickButton9() { pinNumber[countPinDigits++] = 9; Model::updatePinNumber(); }
90007cfc:	f8d0 320c 	ldr.w	r3, [r0, #524]	; 0x20c
90007d00:	1c5a      	adds	r2, r3, #1
90007d02:	f103 0184 	add.w	r1, r3, #132	; 0x84
90007d06:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < countPinDigits; i++)
90007d08:	2a00      	cmp	r2, #0
void Model::clickButton9() { pinNumber[countPinDigits++] = 9; Model::updatePinNumber(); }
90007d0a:	f04f 0509 	mov.w	r5, #9
90007d0e:	f8c0 220c 	str.w	r2, [r0, #524]	; 0x20c
90007d12:	4604      	mov	r4, r0
90007d14:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
	for (int i = 0; i < countPinDigits; i++)
90007d18:	dd2d      	ble.n	90007d76 <_ZN5Model12clickButton9Ev+0x7a>
90007d1a:	2b00      	cmp	r3, #0
		pin = pin * 10 + pinNumber[i];
90007d1c:	f8d0 1210 	ldr.w	r1, [r0, #528]	; 0x210
	for (int i = 0; i < countPinDigits; i++)
90007d20:	dd15      	ble.n	90007d4e <_ZN5Model12clickButton9Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007d22:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007d26:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
	for (int i = 0; i < countPinDigits; i++)
90007d2a:	2b01      	cmp	r3, #1
		pin = pin * 10 + pinNumber[i];
90007d2c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007d30:	d00d      	beq.n	90007d4e <_ZN5Model12clickButton9Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007d32:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007d36:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
	for (int i = 0; i < countPinDigits; i++)
90007d3a:	2b02      	cmp	r3, #2
		pin = pin * 10 + pinNumber[i];
90007d3c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
	for (int i = 0; i < countPinDigits; i++)
90007d40:	d005      	beq.n	90007d4e <_ZN5Model12clickButton9Ev+0x52>
		pin = pin * 10 + pinNumber[i];
90007d42:	eb01 0181 	add.w	r1, r1, r1, lsl #2
90007d46:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
90007d4a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
	if (countPinDigits == 4)
90007d4e:	2a04      	cmp	r2, #4
90007d50:	d005      	beq.n	90007d5e <_ZN5Model12clickButton9Ev+0x62>
		modelListener->updatePinNumber(pin);
90007d52:	6820      	ldr	r0, [r4, #0]
90007d54:	6803      	ldr	r3, [r0, #0]
void Model::clickButton9() { pinNumber[countPinDigits++] = 9; Model::updatePinNumber(); }
90007d56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		modelListener->updatePinNumber(pin);
90007d5a:	695b      	ldr	r3, [r3, #20]
90007d5c:	4718      	bx	r3
		if (pin == ADMIN_PASSWORD) {
90007d5e:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
90007d62:	428b      	cmp	r3, r1
90007d64:	d009      	beq.n	90007d7a <_ZN5Model12clickButton9Ev+0x7e>
			modelListener->updateInvalidPinNumber();
90007d66:	6820      	ldr	r0, [r4, #0]
90007d68:	6803      	ldr	r3, [r0, #0]
90007d6a:	69db      	ldr	r3, [r3, #28]
90007d6c:	4798      	blx	r3
		countPinDigits = 0;
90007d6e:	2300      	movs	r3, #0
90007d70:	f8c4 320c 	str.w	r3, [r4, #524]	; 0x20c
void Model::clickButton9() { pinNumber[countPinDigits++] = 9; Model::updatePinNumber(); }
90007d74:	bd70      	pop	{r4, r5, r6, pc}
	int pin = 0;
90007d76:	2100      	movs	r1, #0
90007d78:	e7eb      	b.n	90007d52 <_ZN5Model12clickButton9Ev+0x56>
	strcpy(TData, "0000010");
90007d7a:	4d10      	ldr	r5, [pc, #64]	; (90007dbc <_ZN5Model12clickButton9Ev+0xc0>)
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007d7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
90007d80:	2207      	movs	r2, #7
	strcpy(TData, "0000010");
90007d82:	cd03      	ldmia	r5!, {r0, r1}
90007d84:	f8c4 0105 	str.w	r0, [r4, #261]	; 0x105
90007d88:	f8c4 1109 	str.w	r1, [r4, #265]	; 0x109
	HAL_UART_Transmit(&huart1, (uint8_t *) TData, strlen(TData), 1000);
90007d8c:	f204 1105 	addw	r1, r4, #261	; 0x105
90007d90:	480b      	ldr	r0, [pc, #44]	; (90007dc0 <_ZN5Model12clickButton9Ev+0xc4>)
90007d92:	f007 fa21 	bl	9000f1d8 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, GPIO_PIN_RESET);
90007d96:	2200      	movs	r2, #0
90007d98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
90007d9c:	4809      	ldr	r0, [pc, #36]	; (90007dc4 <_ZN5Model12clickButton9Ev+0xc8>)
90007d9e:	f002 fccd 	bl	9000a73c <HAL_GPIO_WritePin>
			modelListener->deactivateAlarmSystem();
90007da2:	6820      	ldr	r0, [r4, #0]
			countdownOngoingAlarmSetState = false;
90007da4:	2300      	movs	r3, #0
			modelListener->deactivateAlarmSystem();
90007da6:	6802      	ldr	r2, [r0, #0]
			countdownOngoingAlarmSetState = false;
90007da8:	f884 320b 	strb.w	r3, [r4, #523]	; 0x20b
			modelListener->deactivateAlarmSystem();
90007dac:	6912      	ldr	r2, [r2, #16]
			alarmSystemState = false;
90007dae:	f884 3207 	strb.w	r3, [r4, #519]	; 0x207
			ongoingAlarmState = false;
90007db2:	f884 3209 	strb.w	r3, [r4, #521]	; 0x209
			modelListener->deactivateAlarmSystem();
90007db6:	4790      	blx	r2
90007db8:	e7d9      	b.n	90007d6e <_ZN5Model12clickButton9Ev+0x72>
90007dba:	bf00      	nop
90007dbc:	9002a9cc 	.word	0x9002a9cc
90007dc0:	2400bd60 	.word	0x2400bd60
90007dc4:	58020400 	.word	0x58020400

90007dc8 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
90007dc8:	4770      	bx	lr
90007dca:	bf00      	nop

90007dcc <_ZThn4_N16Screen1PresenterD1Ev>:
90007dcc:	3804      	subs	r0, #4
90007dce:	4770      	bx	lr

90007dd0 <_ZN16Screen1Presenter10deactivateEv>:
}

void Screen1Presenter::activate()
{

}
90007dd0:	4770      	bx	lr
90007dd2:	bf00      	nop

90007dd4 <_ZN16Screen1Presenter9setPoliceEb>:

bool Screen1Presenter::getCountdownAlarmSetState() { return model->getCountdownAlarmSetState(); }

bool Screen1Presenter::getCountdownOngoingAlarmSetState() { return model->getCountdownOngoingAlarmSetState(); }

void Screen1Presenter::setPolice(bool state) { view.setPolice(state); }
90007dd4:	68c0      	ldr	r0, [r0, #12]
90007dd6:	6803      	ldr	r3, [r0, #0]
90007dd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007dda:	4718      	bx	r3

90007ddc <_ZN16Screen1Presenter20activateOngoingAlarmEv>:

int Screen1Presenter::countdownOngoingAlarmSetTick() { return model->countdownOngoingAlarmSetTick(); }

void Screen1Presenter::activateAlarmSystem() { model->activateAlarmSystem(); }

void Screen1Presenter::activateOngoingAlarm() { view.activateOngoingAlarm(); }
90007ddc:	68c0      	ldr	r0, [r0, #12]
90007dde:	6803      	ldr	r3, [r0, #0]
90007de0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90007de2:	4718      	bx	r3

90007de4 <_ZN16Screen1Presenter21deactivateAlarmSystemEv>:

void Screen1Presenter::deactivateAlarmSystem() { view.deactivateAlarmSystem(); }
90007de4:	68c0      	ldr	r0, [r0, #12]
90007de6:	6803      	ldr	r3, [r0, #0]
90007de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007dea:	4718      	bx	r3

90007dec <_ZN16Screen1Presenter15updatePinNumberEi>:

void Screen1Presenter::stopCountdownAlarmSet() { model->stopCountdownAlarmSet(); }

void Screen1Presenter::updatePinNumber(int pin) { view.updatePinNumber(pin); }
90007dec:	68c0      	ldr	r0, [r0, #12]
90007dee:	6803      	ldr	r3, [r0, #0]
90007df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007df2:	4718      	bx	r3

90007df4 <_ZN16Screen1Presenter22updateInvalidPinNumberEv>:

void Screen1Presenter::updateInvalidPinNumber() { view.updateInvalidPinNumber(); }
90007df4:	68c0      	ldr	r0, [r0, #12]
90007df6:	6803      	ldr	r3, [r0, #0]
90007df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90007dfa:	4718      	bx	r3

90007dfc <_ZN16Screen1Presenter9uart_DataEPc>:
void Screen1Presenter::clickButton9() { model->clickButton9(); }


void Screen1Presenter::uart_Data(char *data)
{
	view.uart_Data(data);
90007dfc:	68c0      	ldr	r0, [r0, #12]
90007dfe:	6803      	ldr	r3, [r0, #0]
90007e00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90007e02:	4718      	bx	r3

90007e04 <_ZN16Screen1PresenterD0Ev>:
90007e04:	b510      	push	{r4, lr}
90007e06:	4604      	mov	r4, r0
90007e08:	2110      	movs	r1, #16
90007e0a:	f01f f872 	bl	90026ef2 <_ZdlPvj>
90007e0e:	4620      	mov	r0, r4
90007e10:	bd10      	pop	{r4, pc}
90007e12:	bf00      	nop

90007e14 <_ZThn4_N16Screen1PresenterD0Ev>:
90007e14:	b500      	push	{lr}
90007e16:	3804      	subs	r0, #4
90007e18:	b083      	sub	sp, #12
90007e1a:	2110      	movs	r1, #16
90007e1c:	9001      	str	r0, [sp, #4]
90007e1e:	f01f f868 	bl	90026ef2 <_ZdlPvj>
90007e22:	9801      	ldr	r0, [sp, #4]
90007e24:	b003      	add	sp, #12
90007e26:	f85d fb04 	ldr.w	pc, [sp], #4
90007e2a:	bf00      	nop

90007e2c <_ZN16Screen1Presenter19getAlarmSystemStateEv>:
bool Screen1Presenter::getAlarmSystemState() { return model->getAlarmSystemState(); }
90007e2c:	6880      	ldr	r0, [r0, #8]
90007e2e:	f7ff bbcd 	b.w	900075cc <_ZN5Model19getAlarmSystemStateEv>
90007e32:	bf00      	nop

90007e34 <_ZN16Screen1Presenter25getCountdownAlarmSetStateEv>:
bool Screen1Presenter::getCountdownAlarmSetState() { return model->getCountdownAlarmSetState(); }
90007e34:	6880      	ldr	r0, [r0, #8]
90007e36:	f7ff bbcd 	b.w	900075d4 <_ZN5Model25getCountdownAlarmSetStateEv>
90007e3a:	bf00      	nop

90007e3c <_ZN16Screen1Presenter32getCountdownOngoingAlarmSetStateEv>:
bool Screen1Presenter::getCountdownOngoingAlarmSetState() { return model->getCountdownOngoingAlarmSetState(); }
90007e3c:	6880      	ldr	r0, [r0, #8]
90007e3e:	f7ff bbcd 	b.w	900075dc <_ZN5Model32getCountdownOngoingAlarmSetStateEv>
90007e42:	bf00      	nop

90007e44 <_ZN16Screen1Presenter21countdownAlarmSetTickEv>:
int Screen1Presenter::countdownAlarmSetTick() { return model->countdownAlarmSetTick(); }
90007e44:	6880      	ldr	r0, [r0, #8]
90007e46:	f7ff bbd5 	b.w	900075f4 <_ZN5Model21countdownAlarmSetTickEv>
90007e4a:	bf00      	nop

90007e4c <_ZN16Screen1Presenter28countdownOngoingAlarmSetTickEv>:
int Screen1Presenter::countdownOngoingAlarmSetTick() { return model->countdownOngoingAlarmSetTick(); }
90007e4c:	6880      	ldr	r0, [r0, #8]
90007e4e:	f7ff bbf9 	b.w	90007644 <_ZN5Model28countdownOngoingAlarmSetTickEv>
90007e52:	bf00      	nop

90007e54 <_ZN16Screen1Presenter19activateAlarmSystemEv>:
void Screen1Presenter::activateAlarmSystem() { model->activateAlarmSystem(); }
90007e54:	6880      	ldr	r0, [r0, #8]
90007e56:	f7ff bbc5 	b.w	900075e4 <_ZN5Model19activateAlarmSystemEv>
90007e5a:	bf00      	nop

90007e5c <_ZN16Screen1Presenter21stopCountdownAlarmSetEv>:
void Screen1Presenter::stopCountdownAlarmSet() { model->stopCountdownAlarmSet(); }
90007e5c:	6880      	ldr	r0, [r0, #8]
90007e5e:	f7ff bc17 	b.w	90007690 <_ZN5Model21stopCountdownAlarmSetEv>
90007e62:	bf00      	nop

90007e64 <_ZN16Screen1Presenter12clickButton1Ev>:
void Screen1Presenter::clickButton1() { model->clickButton1(); }
90007e64:	6880      	ldr	r0, [r0, #8]
90007e66:	f7ff bc1b 	b.w	900076a0 <_ZN5Model12clickButton1Ev>
90007e6a:	bf00      	nop

90007e6c <_ZN16Screen1Presenter12clickButton2Ev>:
void Screen1Presenter::clickButton2() { model->clickButton2(); }
90007e6c:	6880      	ldr	r0, [r0, #8]
90007e6e:	f7ff bc7b 	b.w	90007768 <_ZN5Model12clickButton2Ev>
90007e72:	bf00      	nop

90007e74 <_ZN16Screen1Presenter12clickButton3Ev>:
void Screen1Presenter::clickButton3() { model->clickButton3(); }
90007e74:	6880      	ldr	r0, [r0, #8]
90007e76:	f7ff bcdd 	b.w	90007834 <_ZN5Model12clickButton3Ev>
90007e7a:	bf00      	nop

90007e7c <_ZN16Screen1Presenter12clickButton4Ev>:
void Screen1Presenter::clickButton4() { model->clickButton4(); }
90007e7c:	6880      	ldr	r0, [r0, #8]
90007e7e:	f7ff bd3f 	b.w	90007900 <_ZN5Model12clickButton4Ev>
90007e82:	bf00      	nop

90007e84 <_ZN16Screen1Presenter12clickButton5Ev>:
void Screen1Presenter::clickButton5() { model->clickButton5(); }
90007e84:	6880      	ldr	r0, [r0, #8]
90007e86:	f7ff bda1 	b.w	900079cc <_ZN5Model12clickButton5Ev>
90007e8a:	bf00      	nop

90007e8c <_ZN16Screen1Presenter12clickButton6Ev>:
void Screen1Presenter::clickButton6() { model->clickButton6(); }
90007e8c:	6880      	ldr	r0, [r0, #8]
90007e8e:	f7ff be03 	b.w	90007a98 <_ZN5Model12clickButton6Ev>
90007e92:	bf00      	nop

90007e94 <_ZN16Screen1Presenter12clickButton7Ev>:
void Screen1Presenter::clickButton7() { model->clickButton7(); }
90007e94:	6880      	ldr	r0, [r0, #8]
90007e96:	f7ff be65 	b.w	90007b64 <_ZN5Model12clickButton7Ev>
90007e9a:	bf00      	nop

90007e9c <_ZN16Screen1Presenter12clickButton8Ev>:
void Screen1Presenter::clickButton8() { model->clickButton8(); }
90007e9c:	6880      	ldr	r0, [r0, #8]
90007e9e:	f7ff bec7 	b.w	90007c30 <_ZN5Model12clickButton8Ev>
90007ea2:	bf00      	nop

90007ea4 <_ZN16Screen1Presenter12clickButton9Ev>:
void Screen1Presenter::clickButton9() { model->clickButton9(); }
90007ea4:	6880      	ldr	r0, [r0, #8]
90007ea6:	f7ff bf29 	b.w	90007cfc <_ZN5Model12clickButton9Ev>
90007eaa:	bf00      	nop

90007eac <_ZThn4_N16Screen1Presenter20activateOngoingAlarmEv>:
90007eac:	6880      	ldr	r0, [r0, #8]
90007eae:	6803      	ldr	r3, [r0, #0]
90007eb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90007eb2:	4718      	bx	r3

90007eb4 <_ZThn4_N16Screen1Presenter21deactivateAlarmSystemEv>:
90007eb4:	6880      	ldr	r0, [r0, #8]
90007eb6:	6803      	ldr	r3, [r0, #0]
90007eb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90007eba:	4718      	bx	r3

90007ebc <_ZThn4_N16Screen1Presenter22updateInvalidPinNumberEv>:
90007ebc:	6880      	ldr	r0, [r0, #8]
90007ebe:	6803      	ldr	r3, [r0, #0]
90007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
90007ec2:	4718      	bx	r3

90007ec4 <_ZThn4_N16Screen1Presenter9uart_DataEPc>:
90007ec4:	6880      	ldr	r0, [r0, #8]
90007ec6:	6803      	ldr	r3, [r0, #0]
90007ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90007eca:	4718      	bx	r3

90007ecc <_ZThn4_N16Screen1Presenter9setPoliceEb>:
90007ecc:	6880      	ldr	r0, [r0, #8]
90007ece:	6803      	ldr	r3, [r0, #0]
90007ed0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
90007ed2:	4718      	bx	r3

90007ed4 <_ZThn4_N16Screen1Presenter15updatePinNumberEi>:
90007ed4:	6880      	ldr	r0, [r0, #8]
90007ed6:	6803      	ldr	r3, [r0, #0]
90007ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90007eda:	4718      	bx	r3

90007edc <_ZN16Screen1PresenterC1ER11Screen1View>:
    : view(v)
90007edc:	4a06      	ldr	r2, [pc, #24]	; (90007ef8 <_ZN16Screen1PresenterC1ER11Screen1View+0x1c>)
90007ede:	60c1      	str	r1, [r0, #12]
Screen1Presenter::Screen1Presenter(Screen1View& v)
90007ee0:	b410      	push	{r4}
    ModelListener() : model(0) {}
90007ee2:	2400      	movs	r4, #0
90007ee4:	6084      	str	r4, [r0, #8]
    : view(v)
90007ee6:	f102 0408 	add.w	r4, r2, #8
90007eea:	3278      	adds	r2, #120	; 0x78
90007eec:	e9c0 4200 	strd	r4, r2, [r0]
}
90007ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
90007ef4:	4770      	bx	lr
90007ef6:	bf00      	nop
90007ef8:	9002a9d4 	.word	0x9002a9d4

90007efc <_ZN11Screen1View14tearDownScreenEv>:
}

void Screen1View::tearDownScreen()
{
    Screen1ViewBase::tearDownScreen();
}
90007efc:	4770      	bx	lr
90007efe:	bf00      	nop

90007f00 <_ZN11Screen1View9uart_DataEPc>:
void Screen1View::uart_Data(char *data)
{
	//textArea1.setWideTextAction(touchgfx::WIDE_TEXT_WORDWRAP);
	//Unicode::strncpy(textArea1Buffer, data, TEXTAREA1_SIZE);
	//textArea1.invalidate();
}
90007f00:	4770      	bx	lr
90007f02:	bf00      	nop

90007f04 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
90007f04:	4b03      	ldr	r3, [pc, #12]	; (90007f14 <_ZN11Screen1ViewD1Ev+0x10>)
90007f06:	b510      	push	{r4, lr}
90007f08:	4604      	mov	r4, r0
90007f0a:	6003      	str	r3, [r0, #0]
90007f0c:	f7fd fafe 	bl	9000550c <_ZN15Screen1ViewBaseD1Ev>
90007f10:	4620      	mov	r0, r4
90007f12:	bd10      	pop	{r4, pc}
90007f14:	9002ab44 	.word	0x9002ab44

90007f18 <_ZN11Screen1ViewD0Ev>:
90007f18:	4b06      	ldr	r3, [pc, #24]	; (90007f34 <_ZN11Screen1ViewD0Ev+0x1c>)
90007f1a:	b510      	push	{r4, lr}
90007f1c:	4604      	mov	r4, r0
90007f1e:	6003      	str	r3, [r0, #0]
90007f20:	f7fd faf4 	bl	9000550c <_ZN15Screen1ViewBaseD1Ev>
90007f24:	f640 2174 	movw	r1, #2676	; 0xa74
90007f28:	4620      	mov	r0, r4
90007f2a:	f01e ffe2 	bl	90026ef2 <_ZdlPvj>
90007f2e:	4620      	mov	r0, r4
90007f30:	bd10      	pop	{r4, pc}
90007f32:	bf00      	nop
90007f34:	9002ab44 	.word	0x9002ab44

90007f38 <_ZN11Screen1View12clickButton1Ev>:
void Screen1View::clickButton1() { if (presenter->getAlarmSystemState()) presenter->clickButton1(); }
90007f38:	b510      	push	{r4, lr}
90007f3a:	4604      	mov	r4, r0
90007f3c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007f3e:	6803      	ldr	r3, [r0, #0]
90007f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007f42:	4798      	blx	r3
90007f44:	b128      	cbz	r0, 90007f52 <_ZN11Screen1View12clickButton1Ev+0x1a>
90007f46:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007f48:	6803      	ldr	r3, [r0, #0]
90007f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90007f50:	4718      	bx	r3
90007f52:	bd10      	pop	{r4, pc}

90007f54 <_ZN11Screen1View12clickButton2Ev>:
void Screen1View::clickButton2() { if (presenter->getAlarmSystemState()) presenter->clickButton2(); }
90007f54:	b510      	push	{r4, lr}
90007f56:	4604      	mov	r4, r0
90007f58:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007f5a:	6803      	ldr	r3, [r0, #0]
90007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007f5e:	4798      	blx	r3
90007f60:	b128      	cbz	r0, 90007f6e <_ZN11Screen1View12clickButton2Ev+0x1a>
90007f62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007f64:	6803      	ldr	r3, [r0, #0]
90007f66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90007f6c:	4718      	bx	r3
90007f6e:	bd10      	pop	{r4, pc}

90007f70 <_ZN11Screen1View12clickButton3Ev>:
void Screen1View::clickButton3() { if (presenter->getAlarmSystemState()) presenter->clickButton3(); }
90007f70:	b510      	push	{r4, lr}
90007f72:	4604      	mov	r4, r0
90007f74:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007f76:	6803      	ldr	r3, [r0, #0]
90007f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007f7a:	4798      	blx	r3
90007f7c:	b128      	cbz	r0, 90007f8a <_ZN11Screen1View12clickButton3Ev+0x1a>
90007f7e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007f80:	6803      	ldr	r3, [r0, #0]
90007f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90007f88:	4718      	bx	r3
90007f8a:	bd10      	pop	{r4, pc}

90007f8c <_ZN11Screen1View12clickButton4Ev>:
void Screen1View::clickButton4() { if (presenter->getAlarmSystemState()) presenter->clickButton4(); }
90007f8c:	b510      	push	{r4, lr}
90007f8e:	4604      	mov	r4, r0
90007f90:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007f92:	6803      	ldr	r3, [r0, #0]
90007f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007f96:	4798      	blx	r3
90007f98:	b128      	cbz	r0, 90007fa6 <_ZN11Screen1View12clickButton4Ev+0x1a>
90007f9a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007f9c:	6803      	ldr	r3, [r0, #0]
90007f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007fa2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90007fa4:	4718      	bx	r3
90007fa6:	bd10      	pop	{r4, pc}

90007fa8 <_ZN11Screen1View12clickButton5Ev>:
void Screen1View::clickButton5() { if (presenter->getAlarmSystemState()) presenter->clickButton5(); }
90007fa8:	b510      	push	{r4, lr}
90007faa:	4604      	mov	r4, r0
90007fac:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007fae:	6803      	ldr	r3, [r0, #0]
90007fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007fb2:	4798      	blx	r3
90007fb4:	b128      	cbz	r0, 90007fc2 <_ZN11Screen1View12clickButton5Ev+0x1a>
90007fb6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007fb8:	6803      	ldr	r3, [r0, #0]
90007fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90007fc0:	4718      	bx	r3
90007fc2:	bd10      	pop	{r4, pc}

90007fc4 <_ZN11Screen1View12clickButton6Ev>:
void Screen1View::clickButton6() { if (presenter->getAlarmSystemState()) presenter->clickButton6(); }
90007fc4:	b510      	push	{r4, lr}
90007fc6:	4604      	mov	r4, r0
90007fc8:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007fca:	6803      	ldr	r3, [r0, #0]
90007fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007fce:	4798      	blx	r3
90007fd0:	b128      	cbz	r0, 90007fde <_ZN11Screen1View12clickButton6Ev+0x1a>
90007fd2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007fd4:	6803      	ldr	r3, [r0, #0]
90007fd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007fda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90007fdc:	4718      	bx	r3
90007fde:	bd10      	pop	{r4, pc}

90007fe0 <_ZN11Screen1View12clickButton7Ev>:
void Screen1View::clickButton7() { if (presenter->getAlarmSystemState()) presenter->clickButton7(); }
90007fe0:	b510      	push	{r4, lr}
90007fe2:	4604      	mov	r4, r0
90007fe4:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90007fe6:	6803      	ldr	r3, [r0, #0]
90007fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90007fea:	4798      	blx	r3
90007fec:	b128      	cbz	r0, 90007ffa <_ZN11Screen1View12clickButton7Ev+0x1a>
90007fee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90007ff0:	6803      	ldr	r3, [r0, #0]
90007ff2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90007ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
90007ff8:	4718      	bx	r3
90007ffa:	bd10      	pop	{r4, pc}

90007ffc <_ZN11Screen1View12clickButton8Ev>:
void Screen1View::clickButton8() { if (presenter->getAlarmSystemState()) presenter->clickButton8(); }
90007ffc:	b510      	push	{r4, lr}
90007ffe:	4604      	mov	r4, r0
90008000:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
90008002:	6803      	ldr	r3, [r0, #0]
90008004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008006:	4798      	blx	r3
90008008:	b128      	cbz	r0, 90008016 <_ZN11Screen1View12clickButton8Ev+0x1a>
9000800a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
9000800c:	6803      	ldr	r3, [r0, #0]
9000800e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90008012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90008014:	4718      	bx	r3
90008016:	bd10      	pop	{r4, pc}

90008018 <_ZN11Screen1View12clickButton9Ev>:
void Screen1View::clickButton9() { if (presenter->getAlarmSystemState()) presenter->clickButton9(); }
90008018:	b510      	push	{r4, lr}
9000801a:	4604      	mov	r4, r0
9000801c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9000801e:	6803      	ldr	r3, [r0, #0]
90008020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90008022:	4798      	blx	r3
90008024:	b128      	cbz	r0, 90008032 <_ZN11Screen1View12clickButton9Ev+0x1a>
90008026:	6be0      	ldr	r0, [r4, #60]	; 0x3c
90008028:	6803      	ldr	r3, [r0, #0]
9000802a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9000802e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
90008030:	4718      	bx	r3
90008032:	bd10      	pop	{r4, pc}

90008034 <_ZN11Screen1ViewC1Ev>:
Screen1View::Screen1View(): tickCount(0), seconds(0), MINUTE(60), TEST_TIME(10)
90008034:	b510      	push	{r4, lr}
90008036:	4604      	mov	r4, r0
90008038:	f7fd fd3e 	bl	90005ab8 <_ZN15Screen1ViewBaseC1Ev>
9000803c:	4806      	ldr	r0, [pc, #24]	; (90008058 <_ZN11Screen1ViewC1Ev+0x24>)
9000803e:	2100      	movs	r1, #0
90008040:	223c      	movs	r2, #60	; 0x3c
90008042:	230a      	movs	r3, #10
90008044:	6020      	str	r0, [r4, #0]
}
90008046:	4620      	mov	r0, r4
Screen1View::Screen1View(): tickCount(0), seconds(0), MINUTE(60), TEST_TIME(10)
90008048:	f8c4 1a68 	str.w	r1, [r4, #2664]	; 0xa68
9000804c:	f8c4 2a6c 	str.w	r2, [r4, #2668]	; 0xa6c
90008050:	f8c4 3a70 	str.w	r3, [r4, #2672]	; 0xa70
}
90008054:	bd10      	pop	{r4, pc}
90008056:	bf00      	nop
90008058:	9002ab44 	.word	0x9002ab44

9000805c <_ZN11Screen1View15sceneShowKeypadEv>:
{
9000805c:	b538      	push	{r3, r4, r5, lr}
9000805e:	4604      	mov	r4, r0
90008060:	2501      	movs	r5, #1
	button1.setVisible(true); button1.invalidate();
90008062:	30c4      	adds	r0, #196	; 0xc4
90008064:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
90008068:	f011 f953 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button2.setVisible(true); button2.invalidate();
9000806c:	f504 709e 	add.w	r0, r4, #316	; 0x13c
90008070:	f884 5161 	strb.w	r5, [r4, #353]	; 0x161
90008074:	f011 f94d 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button3.setVisible(true); button3.invalidate();
90008078:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
9000807c:	f884 51d9 	strb.w	r5, [r4, #473]	; 0x1d9
90008080:	f011 f947 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button4.setVisible(true); button4.invalidate();
90008084:	f504 700b 	add.w	r0, r4, #556	; 0x22c
90008088:	f884 5251 	strb.w	r5, [r4, #593]	; 0x251
9000808c:	f011 f941 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button5.setVisible(true); button5.invalidate();
90008090:	f504 7029 	add.w	r0, r4, #676	; 0x2a4
90008094:	f884 52c9 	strb.w	r5, [r4, #713]	; 0x2c9
90008098:	f011 f93b 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button6.setVisible(true); button6.invalidate();
9000809c:	f504 7047 	add.w	r0, r4, #796	; 0x31c
900080a0:	f884 5341 	strb.w	r5, [r4, #833]	; 0x341
900080a4:	f011 f935 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button7.setVisible(true); button7.invalidate();
900080a8:	f504 7065 	add.w	r0, r4, #916	; 0x394
900080ac:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
900080b0:	f011 f92f 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button8.setVisible(true); button8.invalidate();
900080b4:	f204 400c 	addw	r0, r4, #1036	; 0x40c
900080b8:	f884 5431 	strb.w	r5, [r4, #1073]	; 0x431
900080bc:	f011 f929 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button9.setVisible(true); button9.invalidate();
900080c0:	f204 4084 	addw	r0, r4, #1156	; 0x484
900080c4:	f884 54a9 	strb.w	r5, [r4, #1193]	; 0x4a9
900080c8:	f011 f923 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea1.setVisible(true); textArea1.invalidate();
900080cc:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
900080d0:	f884 55e1 	strb.w	r5, [r4, #1505]	; 0x5e1
900080d4:	f011 f91d 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea2.setVisible(true); textArea2.invalidate();
900080d8:	f204 604c 	addw	r0, r4, #1612	; 0x64c
900080dc:	f884 5671 	strb.w	r5, [r4, #1649]	; 0x671
900080e0:	f011 f917 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea3.setVisible(true); textArea3.invalidate();
900080e4:	f204 6094 	addw	r0, r4, #1684	; 0x694
900080e8:	f884 56b9 	strb.w	r5, [r4, #1721]	; 0x6b9
900080ec:	f011 f911 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea4.setVisible(true); textArea4.invalidate();
900080f0:	f204 60dc 	addw	r0, r4, #1756	; 0x6dc
900080f4:	f884 5701 	strb.w	r5, [r4, #1793]	; 0x701
900080f8:	f011 f90b 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea5.setVisible(true); textArea5.invalidate();
900080fc:	f204 7024 	addw	r0, r4, #1828	; 0x724
90008100:	f884 5749 	strb.w	r5, [r4, #1865]	; 0x749
90008104:	f011 f905 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea6.setVisible(true); textArea6.invalidate();
90008108:	f204 6004 	addw	r0, r4, #1540	; 0x604
9000810c:	f884 5629 	strb.w	r5, [r4, #1577]	; 0x629
90008110:	f011 f8ff 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea7.setVisible(true); textArea7.invalidate();
90008114:	f204 706c 	addw	r0, r4, #1900	; 0x76c
90008118:	f884 5791 	strb.w	r5, [r4, #1937]	; 0x791
9000811c:	f011 f8f9 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea8.setVisible(true); textArea8.invalidate();
90008120:	f204 70b4 	addw	r0, r4, #1972	; 0x7b4
90008124:	f884 57d9 	strb.w	r5, [r4, #2009]	; 0x7d9
90008128:	f011 f8f3 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea9.setVisible(true); textArea9.invalidate();
9000812c:	f204 70fc 	addw	r0, r4, #2044	; 0x7fc
90008130:	f884 5821 	strb.w	r5, [r4, #2081]	; 0x821
90008134:	f011 f8ed 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaPin.setVisible(true); textAreaPin.invalidate();
90008138:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
9000813c:	f884 58e1 	strb.w	r5, [r4, #2273]	; 0x8e1
90008140:	f011 f8e7 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	scalableImagePin.setVisible(true); scalableImagePin.invalidate();
90008144:	f104 0098 	add.w	r0, r4, #152	; 0x98
90008148:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
}
9000814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	scalableImagePin.setVisible(true); scalableImagePin.invalidate();
90008150:	f011 b8df 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>

90008154 <_ZN11Screen1View15handleTickEventEv>:
{
90008154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90008156:	4604      	mov	r4, r0
	bool countdownAlarmSetState = presenter->getCountdownAlarmSetState();
90008158:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9000815a:	6803      	ldr	r3, [r0, #0]
9000815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000815e:	4798      	blx	r3
	bool countdownOngoingAlarmSetState = presenter->getCountdownOngoingAlarmSetState();
90008160:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	bool countdownAlarmSetState = presenter->getCountdownAlarmSetState();
90008162:	4605      	mov	r5, r0
	bool countdownOngoingAlarmSetState = presenter->getCountdownOngoingAlarmSetState();
90008164:	681a      	ldr	r2, [r3, #0]
90008166:	4618      	mov	r0, r3
90008168:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000816a:	4798      	blx	r3
	if (countdownAlarmSetState && tickCount == TEST_TIME)
9000816c:	b14d      	cbz	r5, 90008182 <_ZN11Screen1View15handleTickEventEv+0x2e>
9000816e:	f9b4 3a6a 	ldrsh.w	r3, [r4, #2666]	; 0xa6a
90008172:	f8d4 2a70 	ldr.w	r2, [r4, #2672]	; 0xa70
90008176:	4293      	cmp	r3, r2
90008178:	d02a      	beq.n	900081d0 <_ZN11Screen1View15handleTickEventEv+0x7c>
		tickCount++;  // TODO: error in accuracy of the first second is at question here
9000817a:	3301      	adds	r3, #1
9000817c:	f8a4 3a6a 	strh.w	r3, [r4, #2666]	; 0xa6a
}
90008180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (countdownOngoingAlarmSetState && tickCount == TEST_TIME)
90008182:	2800      	cmp	r0, #0
90008184:	d0fc      	beq.n	90008180 <_ZN11Screen1View15handleTickEventEv+0x2c>
90008186:	f9b4 3a6a 	ldrsh.w	r3, [r4, #2666]	; 0xa6a
9000818a:	f8d4 2a70 	ldr.w	r2, [r4, #2672]	; 0xa70
9000818e:	4293      	cmp	r3, r2
90008190:	d1f3      	bne.n	9000817a <_ZN11Screen1View15handleTickEventEv+0x26>
		int seconds = presenter->countdownOngoingAlarmSetTick();  // Get number of seconds
90008192:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%d", seconds);
90008194:	f504 6725 	add.w	r7, r4, #2640	; 0xa50
	    textAreaCountdownOngoingAlarmSet.invalidate();
90008198:	f604 1634 	addw	r6, r4, #2356	; 0x934
		int seconds = presenter->countdownOngoingAlarmSetTick();  // Get number of seconds
9000819c:	6803      	ldr	r3, [r0, #0]
9000819e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900081a0:	4798      	blx	r3
		Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%d", seconds);
900081a2:	4a24      	ldr	r2, [pc, #144]	; (90008234 <_ZN11Screen1View15handleTickEventEv+0xe0>)
		int seconds = presenter->countdownOngoingAlarmSetTick();  // Get number of seconds
900081a4:	4605      	mov	r5, r0
		Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%d", seconds);
900081a6:	4603      	mov	r3, r0
900081a8:	2103      	movs	r1, #3
900081aa:	4638      	mov	r0, r7
900081ac:	f013 f806 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    textAreaCountdownOngoingAlarmSet.invalidate();
900081b0:	4630      	mov	r0, r6
900081b2:	f011 f8ae 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	    if (seconds == 0)
900081b6:	b9f5      	cbnz	r5, 900081f6 <_ZN11Screen1View15handleTickEventEv+0xa2>
	    	Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%d", 30);
900081b8:	231e      	movs	r3, #30
900081ba:	4638      	mov	r0, r7
900081bc:	4a1d      	ldr	r2, [pc, #116]	; (90008234 <_ZN11Screen1View15handleTickEventEv+0xe0>)
900081be:	2103      	movs	r1, #3
900081c0:	f884 5959 	strb.w	r5, [r4, #2393]	; 0x959
900081c4:	f012 fffa 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    	textAreaCountdownOngoingAlarmSet.invalidate();
900081c8:	4630      	mov	r0, r6
900081ca:	f011 f8a2 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
900081ce:	e012      	b.n	900081f6 <_ZN11Screen1View15handleTickEventEv+0xa2>
		int seconds = presenter->countdownAlarmSetTick();  // Get number of seconds
900081d0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
		Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", seconds);
900081d2:	f504 6724 	add.w	r7, r4, #2624	; 0xa40
	    textAreaCountdownAlarmSet.invalidate();
900081d6:	f604 0644 	addw	r6, r4, #2116	; 0x844
		int seconds = presenter->countdownAlarmSetTick();  // Get number of seconds
900081da:	6803      	ldr	r3, [r0, #0]
900081dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900081de:	4798      	blx	r3
		Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", seconds);
900081e0:	4a14      	ldr	r2, [pc, #80]	; (90008234 <_ZN11Screen1View15handleTickEventEv+0xe0>)
		int seconds = presenter->countdownAlarmSetTick();  // Get number of seconds
900081e2:	4605      	mov	r5, r0
		Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", seconds);
900081e4:	4603      	mov	r3, r0
900081e6:	2103      	movs	r1, #3
900081e8:	4638      	mov	r0, r7
900081ea:	f012 ffe7 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    textAreaCountdownAlarmSet.invalidate();
900081ee:	4630      	mov	r0, r6
900081f0:	f011 f88f 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	    if (seconds == 0)
900081f4:	b11d      	cbz	r5, 900081fe <_ZN11Screen1View15handleTickEventEv+0xaa>
	    tickCount = 0;
900081f6:	2300      	movs	r3, #0
900081f8:	f8a4 3a6a 	strh.w	r3, [r4, #2666]	; 0xa6a
}
900081fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    	Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", 30);
900081fe:	231e      	movs	r3, #30
90008200:	4a0c      	ldr	r2, [pc, #48]	; (90008234 <_ZN11Screen1View15handleTickEventEv+0xe0>)
90008202:	2103      	movs	r1, #3
90008204:	4638      	mov	r0, r7
90008206:	f884 5869 	strb.w	r5, [r4, #2153]	; 0x869
9000820a:	f012 ffd7 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	    	textAreaPreventActivation.invalidate();
9000820e:	f604 10f8 	addw	r0, r4, #2552	; 0x9f8
90008212:	f884 5a1d 	strb.w	r5, [r4, #2589]	; 0xa1d
90008216:	f884 59a5 	strb.w	r5, [r4, #2469]	; 0x9a5
9000821a:	f011 f87a 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	    	buttonPreventActivation.invalidate();
9000821e:	f504 6018 	add.w	r0, r4, #2432	; 0x980
90008222:	f011 f876 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	    	Screen1View::sceneShowKeypad();
90008226:	4620      	mov	r0, r4
90008228:	f7ff ff18 	bl	9000805c <_ZN11Screen1View15sceneShowKeypadEv>
	    	textAreaCountdownAlarmSet.invalidate();
9000822c:	4630      	mov	r0, r6
9000822e:	f011 f870 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
90008232:	e7e0      	b.n	900081f6 <_ZN11Screen1View15handleTickEventEv+0xa2>
90008234:	9002aa6c 	.word	0x9002aa6c

90008238 <_ZN11Screen1View15sceneHideKeypadEv>:
{
90008238:	b538      	push	{r3, r4, r5, lr}
9000823a:	4604      	mov	r4, r0
9000823c:	2500      	movs	r5, #0
	button1.setVisible(false); button1.invalidate();
9000823e:	30c4      	adds	r0, #196	; 0xc4
90008240:	f884 50e9 	strb.w	r5, [r4, #233]	; 0xe9
90008244:	f011 f865 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button2.setVisible(false); button2.invalidate();
90008248:	f504 709e 	add.w	r0, r4, #316	; 0x13c
9000824c:	f884 5161 	strb.w	r5, [r4, #353]	; 0x161
90008250:	f011 f85f 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button3.setVisible(false); button3.invalidate();
90008254:	f504 70da 	add.w	r0, r4, #436	; 0x1b4
90008258:	f884 51d9 	strb.w	r5, [r4, #473]	; 0x1d9
9000825c:	f011 f859 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button4.setVisible(false); button4.invalidate();
90008260:	f504 700b 	add.w	r0, r4, #556	; 0x22c
90008264:	f884 5251 	strb.w	r5, [r4, #593]	; 0x251
90008268:	f011 f853 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button5.setVisible(false); button5.invalidate();
9000826c:	f504 7029 	add.w	r0, r4, #676	; 0x2a4
90008270:	f884 52c9 	strb.w	r5, [r4, #713]	; 0x2c9
90008274:	f011 f84d 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button6.setVisible(false); button6.invalidate();
90008278:	f504 7047 	add.w	r0, r4, #796	; 0x31c
9000827c:	f884 5341 	strb.w	r5, [r4, #833]	; 0x341
90008280:	f011 f847 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button7.setVisible(false); button7.invalidate();
90008284:	f504 7065 	add.w	r0, r4, #916	; 0x394
90008288:	f884 53b9 	strb.w	r5, [r4, #953]	; 0x3b9
9000828c:	f011 f841 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button8.setVisible(false); button8.invalidate();
90008290:	f204 400c 	addw	r0, r4, #1036	; 0x40c
90008294:	f884 5431 	strb.w	r5, [r4, #1073]	; 0x431
90008298:	f011 f83b 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	button9.setVisible(false); button9.invalidate();
9000829c:	f204 4084 	addw	r0, r4, #1156	; 0x484
900082a0:	f884 54a9 	strb.w	r5, [r4, #1193]	; 0x4a9
900082a4:	f011 f835 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea1.setVisible(false); textArea1.invalidate();
900082a8:	f204 50bc 	addw	r0, r4, #1468	; 0x5bc
900082ac:	f884 55e1 	strb.w	r5, [r4, #1505]	; 0x5e1
900082b0:	f011 f82f 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea2.setVisible(false); textArea2.invalidate();
900082b4:	f204 604c 	addw	r0, r4, #1612	; 0x64c
900082b8:	f884 5671 	strb.w	r5, [r4, #1649]	; 0x671
900082bc:	f011 f829 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea3.setVisible(false); textArea3.invalidate();
900082c0:	f204 6094 	addw	r0, r4, #1684	; 0x694
900082c4:	f884 56b9 	strb.w	r5, [r4, #1721]	; 0x6b9
900082c8:	f011 f823 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea4.setVisible(false); textArea4.invalidate();
900082cc:	f204 60dc 	addw	r0, r4, #1756	; 0x6dc
900082d0:	f884 5701 	strb.w	r5, [r4, #1793]	; 0x701
900082d4:	f011 f81d 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea5.setVisible(false); textArea5.invalidate();
900082d8:	f204 7024 	addw	r0, r4, #1828	; 0x724
900082dc:	f884 5749 	strb.w	r5, [r4, #1865]	; 0x749
900082e0:	f011 f817 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea6.setVisible(false); textArea6.invalidate();
900082e4:	f204 6004 	addw	r0, r4, #1540	; 0x604
900082e8:	f884 5629 	strb.w	r5, [r4, #1577]	; 0x629
900082ec:	f011 f811 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea7.setVisible(false); textArea7.invalidate();
900082f0:	f204 706c 	addw	r0, r4, #1900	; 0x76c
900082f4:	f884 5791 	strb.w	r5, [r4, #1937]	; 0x791
900082f8:	f011 f80b 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea8.setVisible(false); textArea8.invalidate();
900082fc:	f204 70b4 	addw	r0, r4, #1972	; 0x7b4
90008300:	f884 57d9 	strb.w	r5, [r4, #2009]	; 0x7d9
90008304:	f011 f805 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textArea9.setVisible(false); textArea9.invalidate();
90008308:	f204 70fc 	addw	r0, r4, #2044	; 0x7fc
9000830c:	f884 5821 	strb.w	r5, [r4, #2081]	; 0x821
90008310:	f010 ffff 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaPin.setVisible(false); textAreaPin.invalidate();
90008314:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
90008318:	f884 58e1 	strb.w	r5, [r4, #2273]	; 0x8e1
9000831c:	f010 fff9 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	scalableImagePin.setVisible(false); scalableImagePin.invalidate();
90008320:	f104 0098 	add.w	r0, r4, #152	; 0x98
90008324:	f884 50bd 	strb.w	r5, [r4, #189]	; 0xbd
}
90008328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	scalableImagePin.setVisible(false); scalableImagePin.invalidate();
9000832c:	f010 bff1 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>

90008330 <_ZN11Screen1View12setSceneInitEv>:
{
90008330:	b538      	push	{r3, r4, r5, lr}
90008332:	4604      	mov	r4, r0
90008334:	2501      	movs	r5, #1
	Screen1View::sceneHideKeypad();
90008336:	f7ff ff7f 	bl	90008238 <_ZN11Screen1View15sceneHideKeypadEv>
	buttonActivate.setVisible(true); buttonActivate.invalidate();
9000833a:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
9000833e:	f884 5521 	strb.w	r5, [r4, #1313]	; 0x521
90008342:	f010 ffe6 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaActivate.setVisible(true); textAreaActivate.invalidate();
90008346:	f204 5074 	addw	r0, r4, #1396	; 0x574
9000834a:	f884 5599 	strb.w	r5, [r4, #1433]	; 0x599
}
9000834e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	textAreaActivate.setVisible(true); textAreaActivate.invalidate();
90008352:	f010 bfde 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
90008356:	bf00      	nop

90008358 <_ZN11Screen1View9setPoliceEb>:
{
90008358:	4603      	mov	r3, r0
	imagePolice.invalidate();
9000835a:	f500 6009 	add.w	r0, r0, #2192	; 0x890
9000835e:	f883 18b5 	strb.w	r1, [r3, #2229]	; 0x8b5
90008362:	f010 bfd6 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
90008366:	bf00      	nop

90008368 <_ZN11Screen1View19activateAlarmSystemEv>:
{
90008368:	b570      	push	{r4, r5, r6, lr}
9000836a:	2301      	movs	r3, #1
9000836c:	4604      	mov	r4, r0
9000836e:	2500      	movs	r5, #0
	textAreaActivate.invalidate();
90008370:	f200 5074 	addw	r0, r0, #1396	; 0x574
90008374:	f884 3869 	strb.w	r3, [r4, #2153]	; 0x869
90008378:	f884 3a1d 	strb.w	r3, [r4, #2589]	; 0xa1d
9000837c:	f884 39a5 	strb.w	r3, [r4, #2469]	; 0x9a5
90008380:	f884 5599 	strb.w	r5, [r4, #1433]	; 0x599
90008384:	f884 5521 	strb.w	r5, [r4, #1313]	; 0x521
90008388:	f010 ffc3 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	buttonActivate.invalidate();
9000838c:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
90008390:	f010 ffbf 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaCountdownAlarmSet.invalidate();
90008394:	f604 0044 	addw	r0, r4, #2116	; 0x844
90008398:	f010 ffbb 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaPreventActivation.invalidate();
9000839c:	f604 10f8 	addw	r0, r4, #2552	; 0x9f8
900083a0:	f010 ffb7 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	buttonPreventActivation.invalidate();
900083a4:	f504 6018 	add.w	r0, r4, #2432	; 0x980
900083a8:	f010 ffb3 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	presenter->activateAlarmSystem();
900083ac:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	tickCount = 0;
900083ae:	f8a4 5a6a 	strh.w	r5, [r4, #2666]	; 0xa6a
	presenter->activateAlarmSystem();
900083b2:	6803      	ldr	r3, [r0, #0]
}
900083b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	presenter->activateAlarmSystem();
900083b8:	69db      	ldr	r3, [r3, #28]
900083ba:	4718      	bx	r3

900083bc <_ZN11Screen1View20activateOngoingAlarmEv>:
900083bc:	2301      	movs	r3, #1
{
900083be:	b510      	push	{r4, lr}
900083c0:	4604      	mov	r4, r0
	textAreaCountdownAlarmSet.invalidate();
900083c2:	f600 0044 	addw	r0, r0, #2116	; 0x844
900083c6:	f884 3959 	strb.w	r3, [r4, #2393]	; 0x959
900083ca:	f010 ffa2 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	tickCount = 0;
900083ce:	2300      	movs	r3, #0
900083d0:	f8a4 3a6a 	strh.w	r3, [r4, #2666]	; 0xa6a
}
900083d4:	bd10      	pop	{r4, pc}
900083d6:	bf00      	nop

900083d8 <_ZN11Screen1View21deactivateAlarmSystemEv>:
{
900083d8:	b570      	push	{r4, r5, r6, lr}
900083da:	2101      	movs	r1, #1
900083dc:	2500      	movs	r5, #0
900083de:	4604      	mov	r4, r0
	Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", 30);
900083e0:	4e1e      	ldr	r6, [pc, #120]	; (9000845c <_ZN11Screen1View21deactivateAlarmSystemEv+0x84>)
900083e2:	f880 58b5 	strb.w	r5, [r0, #2229]	; 0x8b5
900083e6:	f880 1521 	strb.w	r1, [r0, #1313]	; 0x521
900083ea:	f880 1599 	strb.w	r1, [r0, #1433]	; 0x599
    Unicode::snprintf(textAreaPinBuffer, TEXTAREAPIN_SIZE, "%s", "");
900083ee:	2105      	movs	r1, #5
900083f0:	4b1b      	ldr	r3, [pc, #108]	; (90008460 <_ZN11Screen1View21deactivateAlarmSystemEv+0x88>)
900083f2:	f600 2046 	addw	r0, r0, #2630	; 0xa46
900083f6:	4a1b      	ldr	r2, [pc, #108]	; (90008464 <_ZN11Screen1View21deactivateAlarmSystemEv+0x8c>)
900083f8:	f012 fee0 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(textAreaCountdownAlarmSetBuffer, TEXTAREACOUNTDOWNALARMSET_SIZE, "%d", 30);
900083fc:	4632      	mov	r2, r6
900083fe:	231e      	movs	r3, #30
90008400:	2103      	movs	r1, #3
90008402:	f504 6024 	add.w	r0, r4, #2624	; 0xa40
90008406:	f884 5869 	strb.w	r5, [r4, #2153]	; 0x869
9000840a:	f012 fed7 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	Unicode::snprintf(textAreaCountdownOngoingAlarmSetBuffer, TEXTAREACOUNTDOWNONGOINGALARMSET_SIZE, "%d", 30);
9000840e:	4632      	mov	r2, r6
90008410:	231e      	movs	r3, #30
90008412:	2103      	movs	r1, #3
90008414:	f504 6025 	add.w	r0, r4, #2640	; 0xa50
90008418:	f884 5959 	strb.w	r5, [r4, #2393]	; 0x959
9000841c:	f012 fece 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	imagePolice.invalidate();
90008420:	f504 6009 	add.w	r0, r4, #2192	; 0x890
90008424:	f010 ff75 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaActivate.invalidate();
90008428:	f204 5074 	addw	r0, r4, #1396	; 0x574
9000842c:	f010 ff71 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	buttonActivate.invalidate();
90008430:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
90008434:	f010 ff6d 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaPin.invalidate();
90008438:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
9000843c:	f010 ff69 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaCountdownAlarmSet.invalidate();
90008440:	f604 0044 	addw	r0, r4, #2116	; 0x844
90008444:	f010 ff65 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaCountdownOngoingAlarmSet.invalidate();
90008448:	f604 1034 	addw	r0, r4, #2356	; 0x934
9000844c:	f010 ff61 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	Screen1View::sceneHideKeypad();
90008450:	4620      	mov	r0, r4
}
90008452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	Screen1View::sceneHideKeypad();
90008456:	f7ff beef 	b.w	90008238 <_ZN11Screen1View15sceneHideKeypadEv>
9000845a:	bf00      	nop
9000845c:	9002aa6c 	.word	0x9002aa6c
90008460:	90028778 	.word	0x90028778
90008464:	9002a538 	.word	0x9002a538

90008468 <_ZN11Screen1View28preventActivationAlarmSystemEv>:
{
90008468:	b510      	push	{r4, lr}
9000846a:	4604      	mov	r4, r0
	presenter->stopCountdownAlarmSet();
9000846c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9000846e:	6803      	ldr	r3, [r0, #0]
90008470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90008472:	4798      	blx	r3
90008474:	2300      	movs	r3, #0
	textAreaPreventActivation.invalidate();
90008476:	f604 10f8 	addw	r0, r4, #2552	; 0x9f8
9000847a:	f884 3a1d 	strb.w	r3, [r4, #2589]	; 0xa1d
9000847e:	f884 39a5 	strb.w	r3, [r4, #2469]	; 0x9a5
90008482:	f010 ff46 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	buttonPreventActivation.invalidate();
90008486:	f504 6018 	add.w	r0, r4, #2432	; 0x980
9000848a:	f010 ff42 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	Screen1View::deactivateAlarmSystem();
9000848e:	4620      	mov	r0, r4
}
90008490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	Screen1View::deactivateAlarmSystem();
90008494:	f7ff bfa0 	b.w	900083d8 <_ZN11Screen1View21deactivateAlarmSystemEv>

90008498 <_ZN11Screen1View15updatePinNumberEi>:
{
90008498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

  inline string
  to_string(int __val)
  {
    const bool __neg = __val < 0;
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
9000849c:	ea81 74e1 	eor.w	r4, r1, r1, asr #31
900084a0:	b086      	sub	sp, #24
900084a2:	4605      	mov	r5, r0
    const bool __neg = __val < 0;
900084a4:	ea4f 78d1 	mov.w	r8, r1, lsr #31
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
900084a8:	eba4 74e1 	sub.w	r4, r4, r1, asr #31
900084ac:	af00      	add	r7, sp, #0
      const unsigned __b2 = __base  * __base;
      const unsigned __b3 = __b2 * __base;
      const unsigned long __b4 = __b3 * __base;
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
900084ae:	2c09      	cmp	r4, #9
900084b0:	f240 80ab 	bls.w	9000860a <_ZN11Screen1View15updatePinNumberEi+0x172>
	  if (__value < __b2) return __n + 1;
900084b4:	2c63      	cmp	r4, #99	; 0x63
900084b6:	f240 8084 	bls.w	900085c2 <_ZN11Screen1View15updatePinNumberEi+0x12a>
	  if (__value < __b3) return __n + 2;
900084ba:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
900084be:	f0c0 80b5 	bcc.w	9000862c <_ZN11Screen1View15updatePinNumberEi+0x194>
	  if (__value < __b4) return __n + 3;
900084c2:	f242 730f 	movw	r3, #9999	; 0x270f
900084c6:	429c      	cmp	r4, r3
900084c8:	f240 80ac 	bls.w	90008624 <_ZN11Screen1View15updatePinNumberEi+0x18c>
900084cc:	4622      	mov	r2, r4
      unsigned __n = 1;
900084ce:	2101      	movs	r1, #1
	  __value /= __b4;
900084d0:	f8df c168 	ldr.w	ip, [pc, #360]	; 9000863c <_ZN11Screen1View15updatePinNumberEi+0x1a4>
	  if (__value < (unsigned)__base) return __n;
900084d4:	4e57      	ldr	r6, [pc, #348]	; (90008634 <_ZN11Screen1View15updatePinNumberEi+0x19c>)
	  if (__value < __b2) return __n + 1;
900084d6:	f8df e168 	ldr.w	lr, [pc, #360]	; 90008640 <_ZN11Screen1View15updatePinNumberEi+0x1a8>
	  if (__value < __b3) return __n + 2;
900084da:	f8df 9168 	ldr.w	r9, [pc, #360]	; 90008644 <_ZN11Screen1View15updatePinNumberEi+0x1ac>
	  if (__value < __b4) return __n + 3;
900084de:	f8df a168 	ldr.w	sl, [pc, #360]	; 90008648 <_ZN11Screen1View15updatePinNumberEi+0x1b0>
900084e2:	e008      	b.n	900084f6 <_ZN11Screen1View15updatePinNumberEi+0x5e>
	  if (__value < __b2) return __n + 1;
900084e4:	4573      	cmp	r3, lr
900084e6:	f240 8081 	bls.w	900085ec <_ZN11Screen1View15updatePinNumberEi+0x154>
	  if (__value < __b3) return __n + 2;
900084ea:	454b      	cmp	r3, r9
900084ec:	f0c0 8085 	bcc.w	900085fa <_ZN11Screen1View15updatePinNumberEi+0x162>
	  if (__value < __b4) return __n + 3;
900084f0:	4553      	cmp	r3, sl
900084f2:	f240 8086 	bls.w	90008602 <_ZN11Screen1View15updatePinNumberEi+0x16a>
900084f6:	4613      	mov	r3, r2
	  __value /= __b4;
900084f8:	fbac 0202 	umull	r0, r2, ip, r2
900084fc:	4608      	mov	r0, r1
	  __n += 4;
900084fe:	3104      	adds	r1, #4
	  if (__value < (unsigned)__base) return __n;
90008500:	42b3      	cmp	r3, r6
	  __value /= __b4;
90008502:	ea4f 3252 	mov.w	r2, r2, lsr #13
	  if (__value < (unsigned)__base) return __n;
90008506:	d8ed      	bhi.n	900084e4 <_ZN11Screen1View15updatePinNumberEi+0x4c>
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
90008508:	f100 0903 	add.w	r9, r0, #3
	: allocator_type(__a), _M_p(__dat) { }
9000850c:	f107 0608 	add.w	r6, r7, #8
      { _M_construct(__n, __c); }
90008510:	4441      	add	r1, r8
90008512:	222d      	movs	r2, #45	; 0x2d
90008514:	4638      	mov	r0, r7
	: allocator_type(__a), _M_p(__dat) { }
90008516:	603e      	str	r6, [r7, #0]
      { _M_construct(__n, __c); }
90008518:	f01e fd33 	bl	90026f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	return _M_data()[__pos];
9000851c:	683b      	ldr	r3, [r7, #0]
      while (__val >= 100)
9000851e:	f242 7e0f 	movw	lr, #9999	; 0x270f
90008522:	4845      	ldr	r0, [pc, #276]	; (90008638 <_ZN11Screen1View15updatePinNumberEi+0x1a0>)
90008524:	eb03 0a08 	add.w	sl, r3, r8
	{
	  auto const __num = (__val % 100) * 2;
90008528:	f04f 0864 	mov.w	r8, #100	; 0x64
9000852c:	eb0a 0209 	add.w	r2, sl, r9
90008530:	f8df 9118 	ldr.w	r9, [pc, #280]	; 9000864c <_ZN11Screen1View15updatePinNumberEi+0x1b4>
90008534:	fba9 1304 	umull	r1, r3, r9, r4
90008538:	46a4      	mov	ip, r4
      while (__val >= 100)
9000853a:	3a02      	subs	r2, #2
	  auto const __num = (__val % 100) * 2;
9000853c:	095b      	lsrs	r3, r3, #5
      while (__val >= 100)
9000853e:	45f4      	cmp	ip, lr
	  auto const __num = (__val % 100) * 2;
90008540:	fb08 4113 	mls	r1, r8, r3, r4
	  __val /= 100;
90008544:	461c      	mov	r4, r3
	  __first[__pos] = __digits[__num + 1];
90008546:	eb00 0341 	add.w	r3, r0, r1, lsl #1
	  __first[__pos - 1] = __digits[__num];
9000854a:	f810 1011 	ldrb.w	r1, [r0, r1, lsl #1]
	  __first[__pos] = __digits[__num + 1];
9000854e:	785b      	ldrb	r3, [r3, #1]
	  __first[__pos - 1] = __digits[__num];
90008550:	7051      	strb	r1, [r2, #1]
	  __first[__pos] = __digits[__num + 1];
90008552:	7093      	strb	r3, [r2, #2]
      while (__val >= 100)
90008554:	d8ee      	bhi.n	90008534 <_ZN11Screen1View15updatePinNumberEi+0x9c>
	  __pos -= 2;
	}
      if (__val >= 10)
90008556:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
9000855a:	d23f      	bcs.n	900085dc <_ZN11Screen1View15updatePinNumberEi+0x144>
	  auto const __num = __val * 2;
	  __first[1] = __digits[__num + 1];
	  __first[0] = __digits[__num];
	}
      else
	__first[0] = '0' + __val;
9000855c:	3430      	adds	r4, #48	; 0x30
9000855e:	b2e4      	uxtb	r4, r4
90008560:	f88a 4000 	strb.w	r4, [sl]
      { return _M_string_length; }
90008564:	e9d7 0400 	ldrd	r0, r4, [r7]
	if (!_M_is_local())
90008568:	42b0      	cmp	r0, r6
9000856a:	d003      	beq.n	90008574 <_ZN11Screen1View15updatePinNumberEi+0xdc>
      { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
9000856c:	68b9      	ldr	r1, [r7, #8]
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
9000856e:	3101      	adds	r1, #1
90008570:	f01e fcbf 	bl	90026ef2 <_ZdlPvj>
	char asterisks[length + 1];
90008574:	f104 0308 	add.w	r3, r4, #8
	for	(int i = 0; i < length; i++)
90008578:	2c00      	cmp	r4, #0
	char asterisks[length + 1];
9000857a:	f023 0307 	bic.w	r3, r3, #7
9000857e:	ebad 0d03 	sub.w	sp, sp, r3
90008582:	466e      	mov	r6, sp
	for	(int i = 0; i < length; i++)
90008584:	dd04      	ble.n	90008590 <_ZN11Screen1View15updatePinNumberEi+0xf8>
		asterisks[i] = '*';
90008586:	4622      	mov	r2, r4
90008588:	212a      	movs	r1, #42	; 0x2a
9000858a:	4668      	mov	r0, sp
9000858c:	f01e fdde 	bl	9002714c <memset>
	asterisks[length] = '\0';
90008590:	f04f 0800 	mov.w	r8, #0
	Unicode::strncpy(textAreaPinBuffer, asterisks, length + 1);
90008594:	1c62      	adds	r2, r4, #1
90008596:	4631      	mov	r1, r6
90008598:	f605 2046 	addw	r0, r5, #2630	; 0xa46
9000859c:	b292      	uxth	r2, r2
	asterisks[length] = '\0';
9000859e:	f806 8004 	strb.w	r8, [r6, r4]
	Unicode::strncpy(textAreaPinBuffer, asterisks, length + 1);
900085a2:	f012 faa6 	bl	9001aaf2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
	textAreaPin.invalidate();
900085a6:	f605 00bc 	addw	r0, r5, #2236	; 0x8bc
900085aa:	f010 feb2 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	imageError.invalidate();
900085ae:	f605 1008 	addw	r0, r5, #2312	; 0x908
900085b2:	f885 892d 	strb.w	r8, [r5, #2349]	; 0x92d
900085b6:	f010 feac 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
}
900085ba:	3718      	adds	r7, #24
900085bc:	46bd      	mov	sp, r7
900085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	: allocator_type(__a), _M_p(__dat) { }
900085c2:	f107 0608 	add.w	r6, r7, #8
      { _M_construct(__n, __c); }
900085c6:	4638      	mov	r0, r7
900085c8:	222d      	movs	r2, #45	; 0x2d
900085ca:	f108 0102 	add.w	r1, r8, #2
	: allocator_type(__a), _M_p(__dat) { }
900085ce:	603e      	str	r6, [r7, #0]
      { _M_construct(__n, __c); }
900085d0:	f01e fcd7 	bl	90026f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	return _M_data()[__pos];
900085d4:	683b      	ldr	r3, [r7, #0]
900085d6:	4818      	ldr	r0, [pc, #96]	; (90008638 <_ZN11Screen1View15updatePinNumberEi+0x1a0>)
900085d8:	eb03 0a08 	add.w	sl, r3, r8
	  __first[1] = __digits[__num + 1];
900085dc:	eb00 0344 	add.w	r3, r0, r4, lsl #1
	  __first[0] = __digits[__num];
900085e0:	f810 4014 	ldrb.w	r4, [r0, r4, lsl #1]
	  __first[1] = __digits[__num + 1];
900085e4:	785b      	ldrb	r3, [r3, #1]
900085e6:	f88a 3001 	strb.w	r3, [sl, #1]
900085ea:	e7b9      	b.n	90008560 <_ZN11Screen1View15updatePinNumberEi+0xc8>
	  if (__value < __b2) return __n + 1;
900085ec:	3005      	adds	r0, #5
	  __n += 4;
900085ee:	4689      	mov	r9, r1
	: allocator_type(__a), _M_p(__dat) { }
900085f0:	f107 0608 	add.w	r6, r7, #8
      { _M_construct(__n, __c); }
900085f4:	eb00 0108 	add.w	r1, r0, r8
900085f8:	e78b      	b.n	90008512 <_ZN11Screen1View15updatePinNumberEi+0x7a>
	  if (__value < __b3) return __n + 2;
900085fa:	1d81      	adds	r1, r0, #6
      unsigned __pos = __len - 1;
900085fc:	f100 0905 	add.w	r9, r0, #5
90008600:	e784      	b.n	9000850c <_ZN11Screen1View15updatePinNumberEi+0x74>
	  if (__value < __b4) return __n + 3;
90008602:	1dc1      	adds	r1, r0, #7
      unsigned __pos = __len - 1;
90008604:	f100 0906 	add.w	r9, r0, #6
90008608:	e780      	b.n	9000850c <_ZN11Screen1View15updatePinNumberEi+0x74>
	: allocator_type(__a), _M_p(__dat) { }
9000860a:	f107 0608 	add.w	r6, r7, #8
      { _M_construct(__n, __c); }
9000860e:	222d      	movs	r2, #45	; 0x2d
90008610:	f108 0101 	add.w	r1, r8, #1
90008614:	4638      	mov	r0, r7
	: allocator_type(__a), _M_p(__dat) { }
90008616:	603e      	str	r6, [r7, #0]
      { _M_construct(__n, __c); }
90008618:	f01e fcb3 	bl	90026f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
	return _M_data()[__pos];
9000861c:	683b      	ldr	r3, [r7, #0]
9000861e:	eb03 0a08 	add.w	sl, r3, r8
      while (__val >= 100)
90008622:	e79b      	b.n	9000855c <_ZN11Screen1View15updatePinNumberEi+0xc4>
	  if (__value < __b4) return __n + 3;
90008624:	f04f 0903 	mov.w	r9, #3
90008628:	2104      	movs	r1, #4
9000862a:	e76f      	b.n	9000850c <_ZN11Screen1View15updatePinNumberEi+0x74>
	  if (__value < __b3) return __n + 2;
9000862c:	f04f 0902 	mov.w	r9, #2
90008630:	2103      	movs	r1, #3
90008632:	e76b      	b.n	9000850c <_ZN11Screen1View15updatePinNumberEi+0x74>
90008634:	0001869f 	.word	0x0001869f
90008638:	9002aa70 	.word	0x9002aa70
9000863c:	d1b71759 	.word	0xd1b71759
90008640:	000f423f 	.word	0x000f423f
90008644:	00989680 	.word	0x00989680
90008648:	05f5e0ff 	.word	0x05f5e0ff
9000864c:	51eb851f 	.word	0x51eb851f

90008650 <_ZN11Screen1View22updateInvalidPinNumberEv>:
{
90008650:	b510      	push	{r4, lr}
    Unicode::snprintf(textAreaPinBuffer, TEXTAREAPIN_SIZE, "%s", "");
90008652:	4b0a      	ldr	r3, [pc, #40]	; (9000867c <_ZN11Screen1View22updateInvalidPinNumberEv+0x2c>)
{
90008654:	4604      	mov	r4, r0
    Unicode::snprintf(textAreaPinBuffer, TEXTAREAPIN_SIZE, "%s", "");
90008656:	4a0a      	ldr	r2, [pc, #40]	; (90008680 <_ZN11Screen1View22updateInvalidPinNumberEv+0x30>)
90008658:	2105      	movs	r1, #5
9000865a:	f600 2046 	addw	r0, r0, #2630	; 0xa46
9000865e:	f012 fdad 	bl	9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
90008662:	2301      	movs	r3, #1
    textAreaPin.invalidate();
90008664:	f604 00bc 	addw	r0, r4, #2236	; 0x8bc
90008668:	f884 392d 	strb.w	r3, [r4, #2349]	; 0x92d
9000866c:	f010 fe51 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	imageError.invalidate();
90008670:	f604 1008 	addw	r0, r4, #2312	; 0x908
}
90008674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	imageError.invalidate();
90008678:	f010 be4b 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
9000867c:	90028778 	.word	0x90028778
90008680:	9002a538 	.word	0x9002a538

90008684 <_ZN11Screen1View11setupScreenEv>:
{
90008684:	b538      	push	{r3, r4, r5, lr}
90008686:	4604      	mov	r4, r0
90008688:	2501      	movs	r5, #1
    Screen1ViewBase::setupScreen();
9000868a:	f7fc ff41 	bl	90005510 <_ZN15Screen1ViewBase11setupScreenEv>
	Screen1View::sceneHideKeypad();
9000868e:	4620      	mov	r0, r4
90008690:	f7ff fdd2 	bl	90008238 <_ZN11Screen1View15sceneHideKeypadEv>
	buttonActivate.setVisible(true); buttonActivate.invalidate();
90008694:	f204 40fc 	addw	r0, r4, #1276	; 0x4fc
90008698:	f884 5521 	strb.w	r5, [r4, #1313]	; 0x521
9000869c:	f010 fe39 	bl	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>
	textAreaActivate.setVisible(true); textAreaActivate.invalidate();
900086a0:	f204 5074 	addw	r0, r4, #1396	; 0x574
900086a4:	f884 5599 	strb.w	r5, [r4, #1433]	; 0x599
}
900086a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	textAreaActivate.setVisible(true); textAreaActivate.invalidate();
900086ac:	f010 be31 	b.w	90019312 <_ZNK8touchgfx8Drawable10invalidateEv>

900086b0 <FT5336_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
900086b0:	f240 1c01 	movw	ip, #257	; 0x101
  Capabilities->Gesture    = 1;
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
900086b4:	2005      	movs	r0, #5
  Capabilities->MaxXl      = FT5336_MAX_X_LENGTH;
900086b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
900086ba:	f44f 7388 	mov.w	r3, #272	; 0x110
  Capabilities->MaxTouch   = FT5336_MAX_NB_TOUCH;
900086be:	7088      	strb	r0, [r1, #2]

  return FT5336_OK;
}
900086c0:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
900086c2:	f8a1 c000 	strh.w	ip, [r1]
  Capabilities->MaxYl      = FT5336_MAX_Y_LENGTH;
900086c6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
900086ca:	4770      	bx	lr

900086cc <FT5336_DeInit>:
  */
int32_t FT5336_DeInit(FT5336_Object_t *pObj)
{
  int32_t ret = FT5336_OK;

  if(pObj->IsInitialized == 1U)
900086cc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900086d0:	2b01      	cmp	r3, #1
900086d2:	d102      	bne.n	900086da <FT5336_DeInit+0xe>
  {
    pObj->IsInitialized = 0;
900086d4:	2300      	movs	r3, #0
900086d6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  }

  return ret;
}
900086da:	2000      	movs	r0, #0
900086dc:	4770      	bx	lr
900086de:	bf00      	nop

900086e0 <FT5336_ITStatus>:
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  /* Always return FT5336_OK as feature not applicable to FT5336 */
  return FT5336_OK;
}
900086e0:	2000      	movs	r0, #0
900086e2:	4770      	bx	lr

900086e4 <ReadRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900086e4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900086e6:	6904      	ldr	r4, [r0, #16]
900086e8:	8900      	ldrh	r0, [r0, #8]
900086ea:	46a4      	mov	ip, r4
}
900086ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
900086f0:	4760      	bx	ip
900086f2:	bf00      	nop

900086f4 <WriteRegWrap>:
  * @param  pData: The target register value to be written
  * @param  Length: buffer size to be written
  * @retval error status
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
900086f4:	b410      	push	{r4}
  FT5336_Object_t *pObj = (FT5336_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
900086f6:	68c4      	ldr	r4, [r0, #12]
900086f8:	8900      	ldrh	r0, [r0, #8]
900086fa:	46a4      	mov	ip, r4
}
900086fc:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
90008700:	4760      	bx	ip
90008702:	bf00      	nop

90008704 <FT5336_GestureConfig>:
{
90008704:	e92d 41b8 	stmdb	sp!, {r3, r4, r5, r7, r8, lr}
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
90008708:	f100 0718 	add.w	r7, r0, #24
{
9000870c:	4688      	mov	r8, r1
  ret = ft5336_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
9000870e:	7809      	ldrb	r1, [r1, #0]
90008710:	4638      	mov	r0, r7
90008712:	f000 f975 	bl	90008a00 <ft5336_radian_value>
90008716:	4605      	mov	r5, r0
  ret += ft5336_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
90008718:	f898 1004 	ldrb.w	r1, [r8, #4]
9000871c:	4638      	mov	r0, r7
9000871e:	f000 f97d 	bl	90008a1c <ft5336_offset_left_right>
90008722:	4405      	add	r5, r0
  ret += ft5336_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
90008724:	f898 1008 	ldrb.w	r1, [r8, #8]
90008728:	4638      	mov	r0, r7
9000872a:	f000 f985 	bl	90008a38 <ft5336_offset_up_down>
9000872e:	4405      	add	r5, r0
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
90008730:	f898 100c 	ldrb.w	r1, [r8, #12]
90008734:	4638      	mov	r0, r7
90008736:	f000 f98d 	bl	90008a54 <ft5336_disatnce_left_right>
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000873a:	f898 1010 	ldrb.w	r1, [r8, #16]
  ret += ft5336_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
9000873e:	4405      	add	r5, r0
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
90008740:	4638      	mov	r0, r7
90008742:	f000 f995 	bl	90008a70 <ft5336_distance_up_down>
90008746:	4604      	mov	r4, r0
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008748:	f898 1014 	ldrb.w	r1, [r8, #20]
9000874c:	4638      	mov	r0, r7
  ret += ft5336_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
9000874e:	442c      	add	r4, r5
  ret += ft5336_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
90008750:	f000 f99c 	bl	90008a8c <ft5336_distance_zoom>
  if(ret != FT5336_OK)
90008754:	42c4      	cmn	r4, r0
}
90008756:	bf14      	ite	ne
90008758:	f04f 30ff 	movne.w	r0, #4294967295
9000875c:	2000      	moveq	r0, #0
9000875e:	e8bd 81b8 	ldmia.w	sp!, {r3, r4, r5, r7, r8, pc}
90008762:	bf00      	nop

90008764 <FT5336_ReadID>:
  return ft5336_chip_id(&pObj->Ctx, (uint8_t *)Id);
90008764:	3018      	adds	r0, #24
90008766:	f000 b9ad 	b.w	90008ac4 <ft5336_chip_id>
9000876a:	bf00      	nop

9000876c <FT5336_GetState>:
{
9000876c:	b530      	push	{r4, r5, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
9000876e:	f100 0518 	add.w	r5, r0, #24
{
90008772:	b083      	sub	sp, #12
90008774:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
90008776:	4628      	mov	r0, r5
90008778:	a901      	add	r1, sp, #4
9000877a:	f000 f933 	bl	900089e4 <ft5336_td_status>
9000877e:	bb10      	cbnz	r0, 900087c6 <FT5336_GetState+0x5a>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
90008780:	f89d 3004 	ldrb.w	r3, [sp, #4]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
90008784:	2b05      	cmp	r3, #5
90008786:	bf94      	ite	ls
90008788:	4619      	movls	r1, r3
9000878a:	2100      	movhi	r1, #0
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
9000878c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
9000878e:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
90008790:	4628      	mov	r0, r5
90008792:	2103      	movs	r1, #3
90008794:	eb0d 0203 	add.w	r2, sp, r3
90008798:	f000 f912 	bl	900089c0 <ft5336_read_reg>
9000879c:	b9b0      	cbnz	r0, 900087cc <FT5336_GetState+0x60>
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
9000879e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087a6:	0212      	lsls	r2, r2, #8
900087a8:	f89d 1005 	ldrb.w	r1, [sp, #5]
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087ac:	021b      	lsls	r3, r3, #8
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087ae:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX = (((uint32_t)data[0] & FT5336_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT5336_P1_XL_TP_BIT_MASK);
900087b6:	430a      	orrs	r2, r1
    State->TouchY = (((uint32_t)data[2] & FT5336_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT5336_P1_YL_TP_BIT_MASK);
900087b8:	f89d 1007 	ldrb.w	r1, [sp, #7]
900087bc:	430b      	orrs	r3, r1
900087be:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900087c2:	b003      	add	sp, #12
900087c4:	bd30      	pop	{r4, r5, pc}
900087c6:	f04f 31ff 	mov.w	r1, #4294967295
900087ca:	e7df      	b.n	9000878c <FT5336_GetState+0x20>
    ret = FT5336_ERROR;
900087cc:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
900087d0:	e7f7      	b.n	900087c2 <FT5336_GetState+0x56>
900087d2:	bf00      	nop

900087d4 <FT5336_GetMultiTouchState>:
{
900087d4:	b570      	push	{r4, r5, r6, lr}
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900087d6:	f100 0518 	add.w	r5, r0, #24
{
900087da:	b088      	sub	sp, #32
900087dc:	460c      	mov	r4, r1
  if(ft5336_td_status(&pObj->Ctx, &nb_touch) != FT5336_OK)
900087de:	4628      	mov	r0, r5
900087e0:	4669      	mov	r1, sp
900087e2:	f000 f8ff 	bl	900089e4 <ft5336_td_status>
900087e6:	2800      	cmp	r0, #0
900087e8:	f040 809a 	bne.w	90008920 <FT5336_GetMultiTouchState+0x14c>
    if(nb_touch > FT5336_MAX_NB_TOUCH)
900087ec:	f89d 3000 	ldrb.w	r3, [sp]
  State->TouchDetected = (uint32_t)FT5336_DetectTouch(pObj);
900087f0:	2b05      	cmp	r3, #5
900087f2:	bf94      	ite	ls
900087f4:	4619      	movls	r1, r3
900087f6:	2100      	movhi	r1, #0
900087f8:	6021      	str	r1, [r4, #0]
  if(ft5336_read_reg(&pObj->Ctx, FT5336_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT5336_OK)
900087fa:	231e      	movs	r3, #30
900087fc:	466a      	mov	r2, sp
900087fe:	4628      	mov	r0, r5
90008800:	2103      	movs	r1, #3
90008802:	f000 f8dd 	bl	900089c0 <ft5336_read_reg>
90008806:	2800      	cmp	r0, #0
90008808:	f040 808d 	bne.w	90008926 <FT5336_GetMultiTouchState+0x152>
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000880c:	f89d 1000 	ldrb.w	r1, [sp]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008810:	f89d 3002 	ldrb.w	r3, [sp, #2]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008814:	020a      	lsls	r2, r1, #8
90008816:	f89d 5001 	ldrb.w	r5, [sp, #1]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000881a:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000881c:	f89d c007 	ldrb.w	ip, [sp, #7]
90008820:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008824:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008826:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000882a:	f89d 6011 	ldrb.w	r6, [sp, #17]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000882e:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008830:	f89d 5003 	ldrb.w	r5, [sp, #3]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008834:	6421      	str	r1, [r4, #64]	; 0x40
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008836:	0936      	lsrs	r6, r6, #4
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008838:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000883a:	6062      	str	r2, [r4, #4]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000883c:	f89d 2004 	ldrb.w	r2, [sp, #4]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008840:	61a3      	str	r3, [r4, #24]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008842:	f89d 3005 	ldrb.w	r3, [sp, #5]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008846:	f89d 1006 	ldrb.w	r1, [sp, #6]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000884a:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000884c:	62e2      	str	r2, [r4, #44]	; 0x2c
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000884e:	f89d 200b 	ldrb.w	r2, [sp, #11]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008852:	020d      	lsls	r5, r1, #8
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008854:	6563      	str	r3, [r4, #84]	; 0x54
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008856:	0989      	lsrs	r1, r1, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008858:	f89d 300c 	ldrb.w	r3, [sp, #12]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
9000885c:	0912      	lsrs	r2, r2, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000885e:	6461      	str	r1, [r4, #68]	; 0x44
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008860:	f405 6570 	and.w	r5, r5, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008864:	f89d 100a 	ldrb.w	r1, [sp, #10]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
90008868:	65a2      	str	r2, [r4, #88]	; 0x58
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000886a:	021a      	lsls	r2, r3, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000886c:	6321      	str	r1, [r4, #48]	; 0x30
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000886e:	ea45 050c 	orr.w	r5, r5, ip
90008872:	f402 6170 	and.w	r1, r2, #3840	; 0xf00
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008876:	f89d 2008 	ldrb.w	r2, [sp, #8]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
9000887a:	099b      	lsrs	r3, r3, #6
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000887c:	60a5      	str	r5, [r4, #8]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000887e:	0212      	lsls	r2, r2, #8
90008880:	f89d 5009 	ldrb.w	r5, [sp, #9]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
90008884:	64a3      	str	r3, [r4, #72]	; 0x48
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008886:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
9000888a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000888e:	432a      	orrs	r2, r5
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008890:	6363      	str	r3, [r4, #52]	; 0x34
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008892:	f89d 300e 	ldrb.w	r3, [sp, #14]
90008896:	61e2      	str	r2, [r4, #28]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008898:	f89d 200d 	ldrb.w	r2, [sp, #13]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
9000889c:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
9000889e:	430a      	orrs	r2, r1
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088a4:	60e2      	str	r2, [r4, #12]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088a6:	f89d 200f 	ldrb.w	r2, [sp, #15]
900088aa:	4313      	orrs	r3, r2
900088ac:	6223      	str	r3, [r4, #32]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088ae:	65e6      	str	r6, [r4, #92]	; 0x5c
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088b0:	f89d 1012 	ldrb.w	r1, [sp, #18]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088b4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088b8:	020a      	lsls	r2, r1, #8
900088ba:	f89d 5013 	ldrb.w	r5, [sp, #19]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088be:	021b      	lsls	r3, r3, #8
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088c0:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088c4:	0989      	lsrs	r1, r1, #6
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088ca:	432a      	orrs	r2, r5
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088cc:	f89d 5015 	ldrb.w	r5, [sp, #21]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088d0:	64e1      	str	r1, [r4, #76]	; 0x4c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088d2:	432b      	orrs	r3, r5
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088d4:	f89d 1018 	ldrb.w	r1, [sp, #24]
900088d8:	6122      	str	r2, [r4, #16]
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
900088da:	6263      	str	r3, [r4, #36]	; 0x24
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088dc:	020b      	lsls	r3, r1, #8
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088de:	f89d 2016 	ldrb.w	r2, [sp, #22]
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088e2:	0989      	lsrs	r1, r1, #6
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088e4:	f89d 5017 	ldrb.w	r5, [sp, #23]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088e8:	63a2      	str	r2, [r4, #56]	; 0x38
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
900088ea:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088ee:	f89d 301d 	ldrb.w	r3, [sp, #29]
900088f2:	092d      	lsrs	r5, r5, #4
    State->TouchEvent[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_EF_BIT_MASK) >> FT5336_P1_XH_EF_BIT_POSITION);
900088f4:	6521      	str	r1, [r4, #80]	; 0x50
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088f6:	091b      	lsrs	r3, r3, #4
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
900088f8:	f89d 101c 	ldrb.w	r1, [sp, #28]
    State->TouchArea[i] = ((uint32_t)data[(i*6U) + 5U] & FT5336_P1_MISC_BIT_MASK) >> FT5336_P1_MISC_BIT_POSITION;
900088fc:	6625      	str	r5, [r4, #96]	; 0x60
900088fe:	6663      	str	r3, [r4, #100]	; 0x64
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008900:	f89d 301a 	ldrb.w	r3, [sp, #26]
    State->TouchWeight[i] = ((uint32_t)data[(i*6U) + 4U] & FT5336_P1_WEIGHT_BIT_MASK);
90008904:	63e1      	str	r1, [r4, #60]	; 0x3c
    State->TouchY[i] = (((uint32_t)data[(i*6U) + 2U] & FT5336_P1_YH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 3U] & FT5336_P1_YL_TP_BIT_MASK);
90008906:	021b      	lsls	r3, r3, #8
90008908:	f89d 101b 	ldrb.w	r1, [sp, #27]
9000890c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
90008910:	430b      	orrs	r3, r1
90008912:	62a3      	str	r3, [r4, #40]	; 0x28
    State->TouchX[i] = (((uint32_t)data[i*6U] & FT5336_P1_XH_TP_BIT_MASK) << 8U) | ((uint32_t)data[(i*6U) + 1U] & FT5336_P1_XL_TP_BIT_MASK);
90008914:	f89d 3019 	ldrb.w	r3, [sp, #25]
90008918:	4313      	orrs	r3, r2
9000891a:	6163      	str	r3, [r4, #20]
}
9000891c:	b008      	add	sp, #32
9000891e:	bd70      	pop	{r4, r5, r6, pc}
90008920:	f04f 31ff 	mov.w	r1, #4294967295
90008924:	e768      	b.n	900087f8 <FT5336_GetMultiTouchState+0x24>
    ret = FT5336_ERROR;
90008926:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
9000892a:	e7f7      	b.n	9000891c <FT5336_GetMultiTouchState+0x148>

9000892c <FT5336_GetGesture>:
  return ft5336_gest_id(&pObj->Ctx, GestureId);
9000892c:	3018      	adds	r0, #24
9000892e:	f000 b84f 	b.w	900089d0 <ft5336_gest_id>
90008932:	bf00      	nop

90008934 <FT5336_EnableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_TRIGGER);
90008934:	2101      	movs	r1, #1
90008936:	3018      	adds	r0, #24
90008938:	f000 b8b6 	b.w	90008aa8 <ft5336_g_mode>

9000893c <FT5336_DisableIT>:
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
9000893c:	2100      	movs	r1, #0
9000893e:	3018      	adds	r0, #24
90008940:	f000 b8b2 	b.w	90008aa8 <ft5336_g_mode>

90008944 <FT5336_Init>:
{
90008944:	b570      	push	{r4, r5, r6, lr}
  if(pObj->IsInitialized == 0U)
90008946:	f890 5024 	ldrb.w	r5, [r0, #36]	; 0x24
9000894a:	b98d      	cbnz	r5, 90008970 <FT5336_Init+0x2c>
    pObj->IO.Init();
9000894c:	4606      	mov	r6, r0
9000894e:	4604      	mov	r4, r0
90008950:	f856 3b18 	ldr.w	r3, [r6], #24
90008954:	4798      	blx	r3
  return ft5336_g_mode(&pObj->Ctx, FT5336_G_MODE_INTERRUPT_POLLING);
90008956:	4629      	mov	r1, r5
90008958:	4630      	mov	r0, r6
9000895a:	f000 f8a5 	bl	90008aa8 <ft5336_g_mode>
  if(ret != FT5336_OK)
9000895e:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
90008960:	f04f 0301 	mov.w	r3, #1
  if(ret != FT5336_OK)
90008964:	bf18      	it	ne
90008966:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
90008968:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  if(ret != FT5336_OK)
9000896c:	4240      	negs	r0, r0
}
9000896e:	bd70      	pop	{r4, r5, r6, pc}
  int32_t ret = FT5336_OK;
90008970:	2000      	movs	r0, #0
}
90008972:	bd70      	pop	{r4, r5, r6, pc}

90008974 <FT5336_ClearIT>:
90008974:	2000      	movs	r0, #0
90008976:	4770      	bx	lr

90008978 <FT5336_RegisterBusIO>:
  if (pObj == NULL)
90008978:	b1d0      	cbz	r0, 900089b0 <FT5336_RegisterBusIO+0x38>
    pObj->IO.Address   = pIO->Address;
9000897a:	890a      	ldrh	r2, [r1, #8]
{
9000897c:	b410      	push	{r4}
    pObj->IO.DeInit    = pIO->DeInit;
9000897e:	e9d1 3400 	ldrd	r3, r4, [r1]
    pObj->IO.Address   = pIO->Address;
90008982:	8102      	strh	r2, [r0, #8]
    pObj->IO.DeInit    = pIO->DeInit;
90008984:	e9c0 3400 	strd	r3, r4, [r0]
    pObj->IO.ReadReg   = pIO->ReadReg;
90008988:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
    pObj->IO.GetTick   = pIO->GetTick;
9000898c:	6949      	ldr	r1, [r1, #20]
    pObj->IO.ReadReg   = pIO->ReadReg;
9000898e:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
90008990:	6141      	str	r1, [r0, #20]
    pObj->Ctx.WriteReg = WriteRegWrap;
90008992:	4a09      	ldr	r2, [pc, #36]	; (900089b8 <FT5336_RegisterBusIO+0x40>)
    pObj->Ctx.ReadReg  = ReadRegWrap;
90008994:	4909      	ldr	r1, [pc, #36]	; (900089bc <FT5336_RegisterBusIO+0x44>)
    pObj->IO.WriteReg  = pIO->WriteReg;
90008996:	60c4      	str	r4, [r0, #12]
    pObj->Ctx.handle   = pObj;
90008998:	6200      	str	r0, [r0, #32]
    pObj->Ctx.WriteReg = WriteRegWrap;
9000899a:	e9c0 2106 	strd	r2, r1, [r0, #24]
    if(pObj->IO.Init != NULL)
9000899e:	b113      	cbz	r3, 900089a6 <FT5336_RegisterBusIO+0x2e>
}
900089a0:	f85d 4b04 	ldr.w	r4, [sp], #4
      ret = pObj->IO.Init();
900089a4:	4718      	bx	r3
}
900089a6:	f04f 30ff 	mov.w	r0, #4294967295
900089aa:	f85d 4b04 	ldr.w	r4, [sp], #4
900089ae:	4770      	bx	lr
900089b0:	f04f 30ff 	mov.w	r0, #4294967295
900089b4:	4770      	bx	lr
900089b6:	bf00      	nop
900089b8:	900086f5 	.word	0x900086f5
900089bc:	900086e5 	.word	0x900086e5

900089c0 <ft5336_read_reg>:
  * @param  pdata pointer to data to be read
  * @param  length Length of data to read   
  * @retval Component status
  */
int32_t ft5336_read_reg(ft5336_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
900089c0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089c2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900089c6:	46a4      	mov	ip, r4
}
900089c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089cc:	4760      	bx	ip
900089ce:	bf00      	nop

900089d0 <ft5336_gest_id>:
  * @param  ctx Component context 
  * @param  value pointer to the value of FT5336_GEST_ID_REG register
  * @retval Component status
  */
int32_t  ft5336_gest_id(ft5336_ctx_t *ctx, uint8_t *value)
{
900089d0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089d2:	2301      	movs	r3, #1
{
900089d4:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089d6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
900089da:	4619      	mov	r1, r3
900089dc:	46a4      	mov	ip, r4
  return ft5336_read_reg(ctx, FT5336_GEST_ID_REG, (uint8_t *)value, 1);
}
900089de:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089e2:	4760      	bx	ip

900089e4 <ft5336_td_status>:
  * @param  ctx Component context 
  * @param  value pointer to the value of Touch Data Status register
  * @retval Component status
  */
int32_t  ft5336_td_status(ft5336_ctx_t *ctx, uint8_t *value)
{
900089e4:	b538      	push	{r3, r4, r5, lr}
900089e6:	460c      	mov	r4, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
900089e8:	2301      	movs	r3, #1
900089ea:	2102      	movs	r1, #2
900089ec:	4622      	mov	r2, r4
900089ee:	e9d0 5001 	ldrd	r5, r0, [r0, #4]
900089f2:	47a8      	blx	r5
  int32_t ret;
  
  ret = ft5336_read_reg(ctx, FT5336_TD_STAT_REG, (uint8_t *)value, 1);
  
  if(ret == 0)
900089f4:	b918      	cbnz	r0, 900089fe <ft5336_td_status+0x1a>
  {
    *value &= FT5336_TD_STATUS_BIT_MASK; 
900089f6:	7823      	ldrb	r3, [r4, #0]
900089f8:	f003 030f 	and.w	r3, r3, #15
900089fc:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT5336_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
900089fe:	bd38      	pop	{r3, r4, r5, pc}

90008a00 <ft5336_radian_value>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_RADIAN_VALUE_REG register
  * @retval Component status
  */
int32_t  ft5336_radian_value(ft5336_ctx_t *ctx, uint8_t value)
{
90008a00:	b510      	push	{r4, lr}
90008a02:	460c      	mov	r4, r1
90008a04:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a06:	2301      	movs	r3, #1
90008a08:	2191      	movs	r1, #145	; 0x91
{
90008a0a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a0e:	f10d 0207 	add.w	r2, sp, #7
90008a12:	6804      	ldr	r4, [r0, #0]
90008a14:	6880      	ldr	r0, [r0, #8]
90008a16:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_RADIAN_VALUE_REG, &value, 1);
}
90008a18:	b002      	add	sp, #8
90008a1a:	bd10      	pop	{r4, pc}

90008a1c <ft5336_offset_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008a1c:	b510      	push	{r4, lr}
90008a1e:	460c      	mov	r4, r1
90008a20:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a22:	2301      	movs	r3, #1
90008a24:	2192      	movs	r1, #146	; 0x92
{
90008a26:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a2a:	f10d 0207 	add.w	r2, sp, #7
90008a2e:	6804      	ldr	r4, [r0, #0]
90008a30:	6880      	ldr	r0, [r0, #8]
90008a32:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_LR_REG, &value, 1);
}
90008a34:	b002      	add	sp, #8
90008a36:	bd10      	pop	{r4, pc}

90008a38 <ft5336_offset_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_OFFSET_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_offset_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008a38:	b510      	push	{r4, lr}
90008a3a:	460c      	mov	r4, r1
90008a3c:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a3e:	2301      	movs	r3, #1
90008a40:	2193      	movs	r1, #147	; 0x93
{
90008a42:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a46:	f10d 0207 	add.w	r2, sp, #7
90008a4a:	6804      	ldr	r4, [r0, #0]
90008a4c:	6880      	ldr	r0, [r0, #8]
90008a4e:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_OFFSET_UD_REG, &value, 1);
}
90008a50:	b002      	add	sp, #8
90008a52:	bd10      	pop	{r4, pc}

90008a54 <ft5336_disatnce_left_right>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_LR_REG register
  * @retval Component status
  */
int32_t  ft5336_disatnce_left_right(ft5336_ctx_t *ctx, uint8_t value)
{
90008a54:	b510      	push	{r4, lr}
90008a56:	460c      	mov	r4, r1
90008a58:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a5a:	2301      	movs	r3, #1
90008a5c:	2194      	movs	r1, #148	; 0x94
{
90008a5e:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a62:	f10d 0207 	add.w	r2, sp, #7
90008a66:	6804      	ldr	r4, [r0, #0]
90008a68:	6880      	ldr	r0, [r0, #8]
90008a6a:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_LR_REG, &value, 1);
}
90008a6c:	b002      	add	sp, #8
90008a6e:	bd10      	pop	{r4, pc}

90008a70 <ft5336_distance_up_down>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_UD_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_up_down(ft5336_ctx_t *ctx, uint8_t value)
{
90008a70:	b510      	push	{r4, lr}
90008a72:	460c      	mov	r4, r1
90008a74:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a76:	2301      	movs	r3, #1
90008a78:	2195      	movs	r1, #149	; 0x95
{
90008a7a:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a7e:	f10d 0207 	add.w	r2, sp, #7
90008a82:	6804      	ldr	r4, [r0, #0]
90008a84:	6880      	ldr	r0, [r0, #8]
90008a86:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_UD_REG, &value, 1);
}
90008a88:	b002      	add	sp, #8
90008a8a:	bd10      	pop	{r4, pc}

90008a8c <ft5336_distance_zoom>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_DISTANCE_ZOOM_REG register
  * @retval Component status
  */
int32_t  ft5336_distance_zoom(ft5336_ctx_t *ctx, uint8_t value)
{
90008a8c:	b510      	push	{r4, lr}
90008a8e:	460c      	mov	r4, r1
90008a90:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a92:	2301      	movs	r3, #1
90008a94:	2196      	movs	r1, #150	; 0x96
{
90008a96:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008a9a:	f10d 0207 	add.w	r2, sp, #7
90008a9e:	6804      	ldr	r4, [r0, #0]
90008aa0:	6880      	ldr	r0, [r0, #8]
90008aa2:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_DISTANCE_ZOOM_REG, &value, 1);
}
90008aa4:	b002      	add	sp, #8
90008aa6:	bd10      	pop	{r4, pc}

90008aa8 <ft5336_g_mode>:
  * @param  ctx Component context 
  * @param  value Value to write to FT5336_GMODE_REG register
  * @retval Component status
  */
int32_t  ft5336_g_mode(ft5336_ctx_t *ctx, uint8_t value)
{
90008aa8:	b510      	push	{r4, lr}
90008aaa:	460c      	mov	r4, r1
90008aac:	b082      	sub	sp, #8
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008aae:	2301      	movs	r3, #1
90008ab0:	21a4      	movs	r1, #164	; 0xa4
{
90008ab2:	f88d 4007 	strb.w	r4, [sp, #7]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
90008ab6:	f10d 0207 	add.w	r2, sp, #7
90008aba:	6804      	ldr	r4, [r0, #0]
90008abc:	6880      	ldr	r0, [r0, #8]
90008abe:	47a0      	blx	r4
  return ft5336_write_reg(ctx, FT5336_GMODE_REG, &value, 1);
}
90008ac0:	b002      	add	sp, #8
90008ac2:	bd10      	pop	{r4, pc}

90008ac4 <ft5336_chip_id>:
  * @param  ctx Component context 
  * @param  value Pointer to FT5336_CHIP_ID_REG register value
  * @retval Component status
  */
int32_t  ft5336_chip_id(ft5336_ctx_t *ctx, uint8_t *value)
{
90008ac4:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008ac6:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
{
90008aca:	460a      	mov	r2, r1
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008acc:	2301      	movs	r3, #1
90008ace:	46a4      	mov	ip, r4
90008ad0:	21a8      	movs	r1, #168	; 0xa8
    *value &= FT5336_CHIP_ID_BIT_MASK; 
    *value = *value >> FT5336_CHIP_ID_BIT_POSITION; 
  }
  
  return ret;
}
90008ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
90008ad6:	4760      	bx	ip

90008ad8 <MT48LC4M32B2_Init>:
  * @param  Ctx : Component object pointer
  * @param  pRegMode : Pointer to Register Mode stucture
  * @retval error status
  */
int32_t MT48LC4M32B2_Init(SDRAM_HandleTypeDef *Ctx, MT48LC4M32B2_Context_t *pRegMode) 
{
90008ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  int32_t ret = MT48LC4M32B2_ERROR;
  
  /* Step 1: Configure a clock configuration enable command */
  if(MT48LC4M32B2_ClockEnable(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008ada:	680b      	ldr	r3, [r1, #0]
{
90008adc:	460d      	mov	r5, r1
  * @param  Interface : Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t MT48LC4M32B2_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008ade:	4c2b      	ldr	r4, [pc, #172]	; (90008b8c <MT48LC4M32B2_Init+0xb4>)
  Command.CommandTarget          = Interface;
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
{
90008ae4:	4607      	mov	r7, r0
  Command.CommandTarget          = Interface;
90008ae6:	6063      	str	r3, [r4, #4]
  Command.ModeRegisterDefinition = 0;
90008ae8:	2300      	movs	r3, #0
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008aea:	4621      	mov	r1, r4
  Command.ModeRegisterDefinition = 0;
90008aec:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_CLK_ENABLE_CMD;
90008aee:	2301      	movs	r3, #1
90008af0:	6023      	str	r3, [r4, #0]
  Command.AutoRefreshNumber      = 1;
90008af2:	60a3      	str	r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008af4:	f006 f95e 	bl	9000edb4 <HAL_SDRAM_SendCommand>
90008af8:	2800      	cmp	r0, #0
90008afa:	d143      	bne.n	90008b84 <MT48LC4M32B2_Init+0xac>
  * @retval MT48LC4M32B2_OK
  */
static int32_t MT48LC4M32B2_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
90008afc:	f000 ff48 	bl	90009990 <HAL_GetTick>
90008b00:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
90008b02:	f000 ff45 	bl	90009990 <HAL_GetTick>
90008b06:	4286      	cmp	r6, r0
90008b08:	d0fb      	beq.n	90008b02 <MT48LC4M32B2_Init+0x2a>
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008b0a:	2302      	movs	r3, #2
    if(MT48LC4M32B2_Precharge(Ctx, pRegMode->TargetBank) == MT48LC4M32B2_OK)
90008b0c:	682a      	ldr	r2, [r5, #0]
  Command.AutoRefreshNumber      = 1;
90008b0e:	2601      	movs	r6, #1
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b10:	491e      	ldr	r1, [pc, #120]	; (90008b8c <MT48LC4M32B2_Init+0xb4>)
  Command.CommandMode            = MT48LC4M32B2_PALL_CMD;
90008b12:	6023      	str	r3, [r4, #0]
  Command.ModeRegisterDefinition = 0;
90008b14:	2300      	movs	r3, #0
  Command.CommandTarget          = Interface;
90008b16:	6062      	str	r2, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b18:	4638      	mov	r0, r7
90008b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.AutoRefreshNumber      = 1;
90008b1e:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition = 0;
90008b20:	60e3      	str	r3, [r4, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b22:	f006 f947 	bl	9000edb4 <HAL_SDRAM_SendCommand>
90008b26:	bb68      	cbnz	r0, 90008b84 <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b28:	4918      	ldr	r1, [pc, #96]	; (90008b8c <MT48LC4M32B2_Init+0xb4>)
90008b2a:	4638      	mov	r0, r7
  Command.CommandMode            = RefreshMode;
90008b2c:	e9d5 2300 	ldrd	r2, r3, [r5]
90008b30:	e9c4 3200 	strd	r3, r2, [r4]
  Command.AutoRefreshNumber      = 8;
90008b34:	2208      	movs	r2, #8
90008b36:	2300      	movs	r3, #0
90008b38:	e9c4 2302 	strd	r2, r3, [r4, #8]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
90008b40:	f006 f938 	bl	9000edb4 <HAL_SDRAM_SendCommand>
90008b44:	b9f0      	cbnz	r0, 90008b84 <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b46:	4911      	ldr	r1, [pc, #68]	; (90008b8c <MT48LC4M32B2_Init+0xb4>)
90008b48:	4638      	mov	r0, r7
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008b4a:	e9d5 3203 	ldrd	r3, r2, [r5, #12]
90008b4e:	4313      	orrs	r3, r2
                     pRegMode->BurstType     |\
90008b50:	696a      	ldr	r2, [r5, #20]
90008b52:	4313      	orrs	r3, r2
                     pRegMode->CASLatency    |\
90008b54:	69aa      	ldr	r2, [r5, #24]
90008b56:	4313      	orrs	r3, r2
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
90008b58:	69ea      	ldr	r2, [r5, #28]
90008b5a:	4313      	orrs	r3, r2
  Command.CommandTarget          = pRegMode->TargetBank;
90008b5c:	682a      	ldr	r2, [r5, #0]
  Command.ModeRegisterDefinition = tmpmrd;
90008b5e:	60e3      	str	r3, [r4, #12]
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b60:	2304      	movs	r3, #4
  Command.CommandTarget          = pRegMode->TargetBank;
90008b62:	e9c4 2601 	strd	r2, r6, [r4, #4]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b66:	f64f 72ff 	movw	r2, #65535	; 0xffff
  Command.CommandMode            = MT48LC4M32B2_LOAD_MODE_CMD;
90008b6a:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, MT48LC4M32B2_TIMEOUT) != HAL_OK)
90008b6c:	f006 f922 	bl	9000edb4 <HAL_SDRAM_SendCommand>
90008b70:	b940      	cbnz	r0, 90008b84 <MT48LC4M32B2_Init+0xac>
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
90008b72:	68a9      	ldr	r1, [r5, #8]
90008b74:	4638      	mov	r0, r7
90008b76:	f006 f93d 	bl	9000edf4 <HAL_SDRAM_ProgramRefreshRate>
90008b7a:	3800      	subs	r0, #0
90008b7c:	bf18      	it	ne
90008b7e:	2001      	movne	r0, #1
90008b80:	4240      	negs	r0, r0
}
90008b82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  int32_t ret = MT48LC4M32B2_ERROR;
90008b84:	f04f 30ff 	mov.w	r0, #4294967295
}
90008b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90008b8a:	bf00      	nop
90008b8c:	2400bf40 	.word	0x2400bf40

90008b90 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
90008b90:	4a10      	ldr	r2, [pc, #64]	; (90008bd4 <BSP_I2C4_DeInit+0x44>)
{
90008b92:	b508      	push	{r3, lr}
  I2c4InitCounter--;
90008b94:	6813      	ldr	r3, [r2, #0]
90008b96:	3b01      	subs	r3, #1
90008b98:	6013      	str	r3, [r2, #0]

  if (I2c4InitCounter == 0U)
90008b9a:	b10b      	cbz	r3, 90008ba0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
90008b9c:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
90008b9e:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
90008ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
90008ba4:	480c      	ldr	r0, [pc, #48]	; (90008bd8 <BSP_I2C4_DeInit+0x48>)
90008ba6:	f001 fcfb 	bl	9000a5a0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
90008baa:	480b      	ldr	r0, [pc, #44]	; (90008bd8 <BSP_I2C4_DeInit+0x48>)
90008bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
90008bb0:	f001 fcf6 	bl	9000a5a0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
90008bb4:	4a09      	ldr	r2, [pc, #36]	; (90008bdc <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008bb6:	480a      	ldr	r0, [pc, #40]	; (90008be0 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
90008bb8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	; 0xf4
90008bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008bc0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
90008bc4:	f001 ff8c 	bl	9000aae0 <HAL_I2C_DeInit>
90008bc8:	2800      	cmp	r0, #0
90008bca:	d0e7      	beq.n	90008b9c <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
90008bcc:	f06f 0007 	mvn.w	r0, #7
}
90008bd0:	bd08      	pop	{r3, pc}
90008bd2:	bf00      	nop
90008bd4:	2400bf50 	.word	0x2400bf50
90008bd8:	58020c00 	.word	0x58020c00
90008bdc:	58024400 	.word	0x58024400
90008be0:	2400c958 	.word	0x2400c958

90008be4 <MX_I2C4_Init>:
  hI2c->Init.OwnAddress1      = 0;
90008be4:	2300      	movs	r3, #0
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
90008be6:	2201      	movs	r2, #1
{
90008be8:	b510      	push	{r4, lr}
  hI2c->Init.OwnAddress1      = 0;
90008bea:	e9c0 1301 	strd	r1, r3, [r0, #4]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
90008bee:	e9c0 2303 	strd	r2, r3, [r0, #12]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
90008bf2:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
90008bf6:	e9c0 3307 	strd	r3, r3, [r0, #28]
{
90008bfa:	4604      	mov	r4, r0
  if (HAL_I2C_Init(hI2c) != HAL_OK)
90008bfc:	f001 ff18 	bl	9000aa30 <HAL_I2C_Init>
90008c00:	b108      	cbz	r0, 90008c06 <MX_I2C4_Init+0x22>
    status = HAL_ERROR;
90008c02:	2001      	movs	r0, #1
}
90008c04:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
90008c06:	4601      	mov	r1, r0
90008c08:	4620      	mov	r0, r4
90008c0a:	f002 fa23 	bl	9000b054 <HAL_I2CEx_ConfigAnalogFilter>
90008c0e:	2800      	cmp	r0, #0
90008c10:	d1f7      	bne.n	90008c02 <MX_I2C4_Init+0x1e>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
90008c12:	4601      	mov	r1, r0
90008c14:	4620      	mov	r0, r4
90008c16:	f002 fa47 	bl	9000b0a8 <HAL_I2CEx_ConfigDigitalFilter>
    status = HAL_ERROR;
90008c1a:	3800      	subs	r0, #0
90008c1c:	bf18      	it	ne
90008c1e:	2001      	movne	r0, #1
}
90008c20:	bd10      	pop	{r4, pc}
90008c22:	bf00      	nop

90008c24 <BSP_I2C4_Init>:
  if (I2c4InitCounter == 0U)
90008c24:	4b99      	ldr	r3, [pc, #612]	; (90008e8c <BSP_I2C4_Init+0x268>)
  hbus_i2c4.Instance = BUS_I2C4;
90008c26:	489a      	ldr	r0, [pc, #616]	; (90008e90 <BSP_I2C4_Init+0x26c>)
90008c28:	4a9a      	ldr	r2, [pc, #616]	; (90008e94 <BSP_I2C4_Init+0x270>)
  if (I2c4InitCounter == 0U)
90008c2a:	6819      	ldr	r1, [r3, #0]
{
90008c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90008c30:	b09f      	sub	sp, #124	; 0x7c
  hbus_i2c4.Instance = BUS_I2C4;
90008c32:	6002      	str	r2, [r0, #0]
  if (I2c4InitCounter == 0U)
90008c34:	9103      	str	r1, [sp, #12]
90008c36:	b119      	cbz	r1, 90008c40 <BSP_I2C4_Init+0x1c>
  int32_t ret = BSP_ERROR_NONE;
90008c38:	2000      	movs	r0, #0
}
90008c3a:	b01f      	add	sp, #124	; 0x7c
90008c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
90008c40:	2201      	movs	r2, #1
90008c42:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
90008c44:	f002 fa00 	bl	9000b048 <HAL_I2C_GetState>
90008c48:	2800      	cmp	r0, #0
90008c4a:	d1f5      	bne.n	90008c38 <BSP_I2C4_Init+0x14>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c4c:	4c92      	ldr	r4, [pc, #584]	; (90008e98 <BSP_I2C4_Init+0x274>)
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c4e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
90008c52:	2112      	movs	r1, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008c54:	2504      	movs	r5, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c56:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c5a:	2600      	movs	r6, #0
90008c5c:	2702      	movs	r7, #2
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
90008c5e:	f043 0308 	orr.w	r3, r3, #8
90008c62:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008c66:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008c6a:	f003 0308 	and.w	r3, r3, #8
90008c6e:	9315      	str	r3, [sp, #84]	; 0x54
90008c70:	9b15      	ldr	r3, [sp, #84]	; 0x54
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c72:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
90008c76:	f043 0308 	orr.w	r3, r3, #8
90008c7a:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
90008c7e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
90008c82:	951c      	str	r5, [sp, #112]	; 0x70
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c84:	f003 0308 	and.w	r3, r3, #8
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c88:	e9cd 0118 	strd	r0, r1, [sp, #96]	; 0x60
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c8c:	9316      	str	r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008c8e:	a918      	add	r1, sp, #96	; 0x60
90008c90:	4882      	ldr	r0, [pc, #520]	; (90008e9c <BSP_I2C4_Init+0x278>)
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
90008c92:	9b16      	ldr	r3, [sp, #88]	; 0x58
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
90008c94:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
90008c98:	f001 fb48 	bl	9000a32c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008c9c:	2312      	movs	r3, #18
90008c9e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008ca2:	a918      	add	r1, sp, #96	; 0x60
90008ca4:	487d      	ldr	r0, [pc, #500]	; (90008e9c <BSP_I2C4_Init+0x278>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
90008ca6:	951c      	str	r5, [sp, #112]	; 0x70
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
90008ca8:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
90008cac:	e9cd 671a 	strd	r6, r7, [sp, #104]	; 0x68
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
90008cb0:	f001 fb3c 	bl	9000a32c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
90008cb4:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008cb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008cbc:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
90008cc0:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
90008cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
90008cc8:	9317      	str	r3, [sp, #92]	; 0x5c
90008cca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  BUS_I2C4_FORCE_RESET();
90008ccc:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008cd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
90008cd4:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
  BUS_I2C4_RELEASE_RESET();
90008cd8:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
90008cdc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
90008ce0:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
90008ce4:	f004 ff3c 	bl	9000db60 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
90008ce8:	2800      	cmp	r0, #0
90008cea:	f000 81ed 	beq.w	900090c8 <BSP_I2C4_Init+0x4a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008cee:	4b6c      	ldr	r3, [pc, #432]	; (90008ea0 <BSP_I2C4_Init+0x27c>)
  uint32_t prev_presc = I2C_PRESC_MAX;
90008cf0:	f04f 0b10 	mov.w	fp, #16
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008cf4:	9e03      	ldr	r6, [sp, #12]
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008cf6:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008cfa:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 90008ea8 <BSP_I2C4_Init+0x284>
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008cfe:	4635      	mov	r5, r6
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d00:	fbb3 f7f0 	udiv	r7, r3, r0
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
90008d04:	00bb      	lsls	r3, r7, #2
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
90008d06:	9702      	str	r7, [sp, #8]
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008d08:	eb07 0247 	add.w	r2, r7, r7, lsl #1
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d0c:	f5c3 73c3 	rsb	r3, r3, #390	; 0x186
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008d10:	0079      	lsls	r1, r7, #1
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
90008d12:	f1c2 0232 	rsb	r2, r2, #50	; 0x32
  if (tsdadel_min <= 0)
90008d16:	ea23 7ce3 	bic.w	ip, r3, r3, asr #31
90008d1a:	4b62      	ldr	r3, [pc, #392]	; (90008ea4 <BSP_I2C4_Init+0x280>)
90008d1c:	ea22 74e2 	bic.w	r4, r2, r2, asr #31
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
90008d20:	9113      	str	r1, [sp, #76]	; 0x4c
90008d22:	681b      	ldr	r3, [r3, #0]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
90008d24:	4699      	mov	r9, r3
90008d26:	930a      	str	r3, [sp, #40]	; 0x28
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d28:	ebb4 0f47 	cmp.w	r4, r7, lsl #1
90008d2c:	46b8      	mov	r8, r7
90008d2e:	eb07 0347 	add.w	r3, r7, r7, lsl #1
90008d32:	bf94      	ite	ls
90008d34:	2101      	movls	r1, #1
90008d36:	2100      	movhi	r1, #0
90008d38:	ebbc 0f47 	cmp.w	ip, r7, lsl #1
90008d3c:	f001 0101 	and.w	r1, r1, #1
90008d40:	eb07 0287 	add.w	r2, r7, r7, lsl #2
90008d44:	bf38      	it	cc
90008d46:	2100      	movcc	r1, #0
90008d48:	429c      	cmp	r4, r3
90008d4a:	ebc7 00c7 	rsb	r0, r7, r7, lsl #3
90008d4e:	9105      	str	r1, [sp, #20]
90008d50:	bf8c      	ite	hi
90008d52:	2100      	movhi	r1, #0
90008d54:	2101      	movls	r1, #1
90008d56:	459c      	cmp	ip, r3
90008d58:	bf38      	it	cc
90008d5a:	2100      	movcc	r1, #0
90008d5c:	ebb4 0f87 	cmp.w	r4, r7, lsl #2
90008d60:	9106      	str	r1, [sp, #24]
90008d62:	eb07 0142 	add.w	r1, r7, r2, lsl #1
90008d66:	9104      	str	r1, [sp, #16]
90008d68:	eb07 0183 	add.w	r1, r7, r3, lsl #2
90008d6c:	9111      	str	r1, [sp, #68]	; 0x44
90008d6e:	bf94      	ite	ls
90008d70:	2101      	movls	r1, #1
90008d72:	2100      	movhi	r1, #0
90008d74:	ebbc 0f87 	cmp.w	ip, r7, lsl #2
90008d78:	f001 0e01 	and.w	lr, r1, #1
90008d7c:	bf38      	it	cc
90008d7e:	f04f 0e00 	movcc.w	lr, #0
90008d82:	4294      	cmp	r4, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008d84:	f04f 0100 	mov.w	r1, #0
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d88:	f8cd e01c 	str.w	lr, [sp, #28]
90008d8c:	bf8c      	ite	hi
90008d8e:	f04f 0e00 	movhi.w	lr, #0
90008d92:	f04f 0e01 	movls.w	lr, #1
90008d96:	4594      	cmp	ip, r2
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008d98:	9101      	str	r1, [sp, #4]
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008d9a:	bf38      	it	cc
90008d9c:	f04f 0e00 	movcc.w	lr, #0
90008da0:	ebb4 0f43 	cmp.w	r4, r3, lsl #1
90008da4:	bf98      	it	ls
90008da6:	2101      	movls	r1, #1
90008da8:	ebbc 0f43 	cmp.w	ip, r3, lsl #1
90008dac:	f8cd e020 	str.w	lr, [sp, #32]
90008db0:	f001 0101 	and.w	r1, r1, #1
90008db4:	bf38      	it	cc
90008db6:	2100      	movcc	r1, #0
90008db8:	4284      	cmp	r4, r0
90008dba:	9109      	str	r1, [sp, #36]	; 0x24
90008dbc:	4601      	mov	r1, r0
90008dbe:	bf8c      	ite	hi
90008dc0:	2000      	movhi	r0, #0
90008dc2:	2001      	movls	r0, #1
90008dc4:	458c      	cmp	ip, r1
90008dc6:	bf38      	it	cc
90008dc8:	2000      	movcc	r0, #0
90008dca:	ebb4 0fc7 	cmp.w	r4, r7, lsl #3
90008dce:	900b      	str	r0, [sp, #44]	; 0x2c
90008dd0:	bf94      	ite	ls
90008dd2:	2001      	movls	r0, #1
90008dd4:	2000      	movhi	r0, #0
90008dd6:	ebbc 0fc7 	cmp.w	ip, r7, lsl #3
90008dda:	f000 0001 	and.w	r0, r0, #1
90008dde:	bf38      	it	cc
90008de0:	2000      	movcc	r0, #0
90008de2:	900c      	str	r0, [sp, #48]	; 0x30
90008de4:	eb07 00c7 	add.w	r0, r7, r7, lsl #3
90008de8:	4284      	cmp	r4, r0
90008dea:	bf8c      	ite	hi
90008dec:	f04f 0e00 	movhi.w	lr, #0
90008df0:	f04f 0e01 	movls.w	lr, #1
90008df4:	4584      	cmp	ip, r0
90008df6:	bf38      	it	cc
90008df8:	f04f 0e00 	movcc.w	lr, #0
90008dfc:	ebb4 0f42 	cmp.w	r4, r2, lsl #1
90008e00:	4670      	mov	r0, lr
90008e02:	bf94      	ite	ls
90008e04:	2001      	movls	r0, #1
90008e06:	2000      	movhi	r0, #0
90008e08:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
90008e0c:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
90008e10:	f04f 0e00 	mov.w	lr, #0
90008e14:	f000 0001 	and.w	r0, r0, #1
90008e18:	bf38      	it	cc
90008e1a:	2000      	movcc	r0, #0
90008e1c:	900e      	str	r0, [sp, #56]	; 0x38
90008e1e:	9804      	ldr	r0, [sp, #16]
90008e20:	4284      	cmp	r4, r0
90008e22:	4602      	mov	r2, r0
90008e24:	bf8c      	ite	hi
90008e26:	2200      	movhi	r2, #0
90008e28:	2201      	movls	r2, #1
90008e2a:	4584      	cmp	ip, r0
90008e2c:	bf38      	it	cc
90008e2e:	2200      	movcc	r2, #0
90008e30:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
90008e34:	920f      	str	r2, [sp, #60]	; 0x3c
90008e36:	bf94      	ite	ls
90008e38:	2201      	movls	r2, #1
90008e3a:	2200      	movhi	r2, #0
90008e3c:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
90008e40:	f002 0201 	and.w	r2, r2, #1
90008e44:	bf38      	it	cc
90008e46:	2200      	movcc	r2, #0
90008e48:	9210      	str	r2, [sp, #64]	; 0x40
90008e4a:	9a11      	ldr	r2, [sp, #68]	; 0x44
90008e4c:	4294      	cmp	r4, r2
90008e4e:	4613      	mov	r3, r2
90008e50:	bf8c      	ite	hi
90008e52:	2300      	movhi	r3, #0
90008e54:	2301      	movls	r3, #1
90008e56:	4594      	cmp	ip, r2
90008e58:	bf38      	it	cc
90008e5a:	2300      	movcc	r3, #0
90008e5c:	ebb4 0f41 	cmp.w	r4, r1, lsl #1
90008e60:	9311      	str	r3, [sp, #68]	; 0x44
90008e62:	bf94      	ite	ls
90008e64:	2301      	movls	r3, #1
90008e66:	2300      	movhi	r3, #0
90008e68:	ebbc 0f41 	cmp.w	ip, r1, lsl #1
90008e6c:	f003 0301 	and.w	r3, r3, #1
90008e70:	bf38      	it	cc
90008e72:	2300      	movcc	r3, #0
90008e74:	9312      	str	r3, [sp, #72]	; 0x48
90008e76:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
90008e7a:	429c      	cmp	r4, r3
90008e7c:	bf8c      	ite	hi
90008e7e:	2200      	movhi	r2, #0
90008e80:	2201      	movls	r2, #1
90008e82:	459c      	cmp	ip, r3
90008e84:	bf38      	it	cc
90008e86:	2200      	movcc	r2, #0
90008e88:	9204      	str	r2, [sp, #16]
90008e8a:	e014      	b.n	90008eb6 <BSP_I2C4_Init+0x292>
90008e8c:	2400bf50 	.word	0x2400bf50
90008e90:	2400c958 	.word	0x2400c958
90008e94:	58001c00 	.word	0x58001c00
90008e98:	58024400 	.word	0x58024400
90008e9c:	58020c00 	.word	0x58020c00
90008ea0:	3b9aca00 	.word	0x3b9aca00
90008ea4:	2400c954 	.word	0x2400c954
90008ea8:	2400bf54 	.word	0x2400bf54
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
90008eac:	f1be 0f10 	cmp.w	lr, #16
90008eb0:	44b8      	add	r8, r7
90008eb2:	f000 826b 	beq.w	9000938c <BSP_I2C4_Init+0x768>
      if (tscldel >= (uint32_t)tscldel_min)
90008eb6:	f5b8 7faf 	cmp.w	r8, #350	; 0x15e
90008eba:	4673      	mov	r3, lr
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
90008ebc:	f10e 0e01 	add.w	lr, lr, #1
      if (tscldel >= (uint32_t)tscldel_min)
90008ec0:	d3f4      	bcc.n	90008eac <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
90008ec2:	ebbb 0105 	subs.w	r1, fp, r5
90008ec6:	bf18      	it	ne
90008ec8:	2101      	movne	r1, #1
90008eca:	2c00      	cmp	r4, #0
90008ecc:	bf18      	it	ne
90008ece:	2100      	movne	r1, #0
90008ed0:	2900      	cmp	r1, #0
90008ed2:	f040 8249 	bne.w	90009368 <BSP_I2C4_Init+0x744>
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
90008ed6:	42bc      	cmp	r4, r7
90008ed8:	bf8c      	ite	hi
90008eda:	2100      	movhi	r1, #0
90008edc:	2101      	movls	r1, #1
90008ede:	45bc      	cmp	ip, r7
90008ee0:	bf38      	it	cc
90008ee2:	2100      	movcc	r1, #0
            if(presc != prev_presc)
90008ee4:	45ab      	cmp	fp, r5
90008ee6:	bf0c      	ite	eq
90008ee8:	2100      	moveq	r1, #0
90008eea:	f001 0101 	andne.w	r1, r1, #1
90008eee:	2900      	cmp	r1, #0
90008ef0:	f000 821e 	beq.w	90009330 <BSP_I2C4_Init+0x70c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ef4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008ef8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008efc:	2001      	movs	r0, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008efe:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f02:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f06:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f0a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f0c:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f0e:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f10:	f200 8116 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90008f14:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f16:	9e06      	ldr	r6, [sp, #24]
90008f18:	45ab      	cmp	fp, r5
90008f1a:	bf0c      	ite	eq
90008f1c:	2600      	moveq	r6, #0
90008f1e:	f006 0601 	andne.w	r6, r6, #1
90008f22:	2e00      	cmp	r6, #0
90008f24:	f000 81cc 	beq.w	900092c0 <BSP_I2C4_Init+0x69c>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f28:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f2c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f30:	2103      	movs	r1, #3
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f32:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f36:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f3a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f3e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f40:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f42:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f44:	f200 80fc 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90008f48:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f4a:	9808      	ldr	r0, [sp, #32]
90008f4c:	455d      	cmp	r5, fp
90008f4e:	bf0c      	ite	eq
90008f50:	2000      	moveq	r0, #0
90008f52:	f000 0001 	andne.w	r0, r0, #1
90008f56:	2800      	cmp	r0, #0
90008f58:	f000 81e8 	beq.w	9000932c <BSP_I2C4_Init+0x708>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f5c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f60:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f64:	2105      	movs	r1, #5
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f66:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f6a:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f6e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008f72:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f74:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f76:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f78:	f200 80e2 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90008f7c:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008f7e:	990b      	ldr	r1, [sp, #44]	; 0x2c
90008f80:	455d      	cmp	r5, fp
90008f82:	bf0c      	ite	eq
90008f84:	2100      	moveq	r1, #0
90008f86:	f001 0101 	andne.w	r1, r1, #1
90008f8a:	2900      	cmp	r1, #0
90008f8c:	f000 817c 	beq.w	90009288 <BSP_I2C4_Init+0x664>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f90:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008f94:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008f98:	2007      	movs	r0, #7
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008f9a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008f9e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fa2:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008fa6:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fa8:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008faa:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fac:	f200 80c8 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90008fb0:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008fb2:	980d      	ldr	r0, [sp, #52]	; 0x34
90008fb4:	455d      	cmp	r5, fp
90008fb6:	bf0c      	ite	eq
90008fb8:	2000      	moveq	r0, #0
90008fba:	f000 0001 	andne.w	r0, r0, #1
90008fbe:	2800      	cmp	r0, #0
90008fc0:	f000 8144 	beq.w	9000924c <BSP_I2C4_Init+0x628>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fc4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008fc8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fcc:	2109      	movs	r1, #9
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fce:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fd2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fd6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90008fda:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008fdc:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008fde:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90008fe0:	f200 80ae 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90008fe4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90008fe6:	990f      	ldr	r1, [sp, #60]	; 0x3c
90008fe8:	455d      	cmp	r5, fp
90008fea:	bf0c      	ite	eq
90008fec:	2100      	moveq	r1, #0
90008fee:	f001 0101 	andne.w	r1, r1, #1
90008ff2:	2900      	cmp	r1, #0
90008ff4:	d072      	beq.n	900090dc <BSP_I2C4_Init+0x4b8>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90008ff6:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90008ffa:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90008ffe:	200b      	movs	r0, #11
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009000:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009004:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009008:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000900c:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000900e:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009010:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009012:	f200 8095 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90009016:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009018:	9811      	ldr	r0, [sp, #68]	; 0x44
9000901a:	455d      	cmp	r5, fp
9000901c:	bf0c      	ite	eq
9000901e:	2000      	moveq	r0, #0
90009020:	f000 0001 	andne.w	r0, r0, #1
90009024:	2800      	cmp	r0, #0
90009026:	d073      	beq.n	90009110 <BSP_I2C4_Init+0x4ec>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009028:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000902c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009030:	210d      	movs	r1, #13
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009032:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009036:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000903a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000903e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009040:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009042:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009044:	d87c      	bhi.n	90009140 <BSP_I2C4_Init+0x51c>
90009046:	4601      	mov	r1, r0
90009048:	46ab      	mov	fp, r5
            if(presc != prev_presc)
9000904a:	9e04      	ldr	r6, [sp, #16]
9000904c:	455d      	cmp	r5, fp
9000904e:	bf0c      	ite	eq
90009050:	2600      	moveq	r6, #0
90009052:	f006 0601 	andne.w	r6, r6, #1
90009056:	2e00      	cmp	r6, #0
90009058:	f000 80f6 	beq.w	90009248 <BSP_I2C4_Init+0x624>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000905c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009060:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009064:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
90009068:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000906c:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009070:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009072:	f04f 030f 	mov.w	r3, #15
90009076:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009078:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000907a:	d861      	bhi.n	90009140 <BSP_I2C4_Init+0x51c>
9000907c:	46ab      	mov	fp, r5
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
9000907e:	e715      	b.n	90008eac <BSP_I2C4_Init+0x288>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
90009080:	9a07      	ldr	r2, [sp, #28]
90009082:	9b08      	ldr	r3, [sp, #32]
90009084:	3214      	adds	r2, #20
90009086:	3301      	adds	r3, #1
90009088:	9207      	str	r2, [sp, #28]
9000908a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9000908c:	9308      	str	r3, [sp, #32]
9000908e:	4293      	cmp	r3, r2
90009090:	d178      	bne.n	90009184 <BSP_I2C4_Init+0x560>
        if (idx < I2C_VALID_TIMING_NBR)
90009092:	297f      	cmp	r1, #127	; 0x7f
90009094:	d818      	bhi.n	900090c8 <BSP_I2C4_Init+0x4a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
90009096:	eb01 0381 	add.w	r3, r1, r1, lsl #2
9000909a:	990b      	ldr	r1, [sp, #44]	; 0x2c
9000909c:	eb01 0283 	add.w	r2, r1, r3, lsl #2
900090a0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090a4:	6850      	ldr	r0, [r2, #4]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
900090a6:	7c13      	ldrb	r3, [r2, #16]
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090a8:	0500      	lsls	r0, r0, #20
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090aa:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
900090ae:	f400 0070 	and.w	r0, r0, #15728640	; 0xf00000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900090b2:	e9d2 1202 	ldrd	r1, r2, [r2, #8]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090b6:	4303      	orrs	r3, r0
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900090b8:	0409      	lsls	r1, r1, #16
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900090ba:	0212      	lsls	r2, r2, #8
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
900090bc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
900090c0:	b292      	uxth	r2, r2
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
900090c2:	430b      	orrs	r3, r1
900090c4:	4313      	orrs	r3, r2
900090c6:	9303      	str	r3, [sp, #12]
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
900090c8:	9903      	ldr	r1, [sp, #12]
900090ca:	48ba      	ldr	r0, [pc, #744]	; (900093b4 <BSP_I2C4_Init+0x790>)
900090cc:	f7ff fd8a 	bl	90008be4 <MX_I2C4_Init>
900090d0:	2800      	cmp	r0, #0
900090d2:	f43f adb1 	beq.w	90008c38 <BSP_I2C4_Init+0x14>
          ret = BSP_ERROR_BUS_FAILURE;
900090d6:	f06f 0007 	mvn.w	r0, #7
  return ret;
900090da:	e5ae      	b.n	90008c3a <BSP_I2C4_Init+0x16>
            if(presc != prev_presc)
900090dc:	4606      	mov	r6, r0
900090de:	9910      	ldr	r1, [sp, #64]	; 0x40
900090e0:	455d      	cmp	r5, fp
900090e2:	bf0c      	ite	eq
900090e4:	2100      	moveq	r1, #0
900090e6:	f001 0101 	andne.w	r1, r1, #1
900090ea:	2900      	cmp	r1, #0
900090ec:	f000 80ca 	beq.w	90009284 <BSP_I2C4_Init+0x660>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090f0:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900090f4:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900090f8:	200c      	movs	r0, #12
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900090fa:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900090fe:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009102:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009106:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009108:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000910a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000910c:	d818      	bhi.n	90009140 <BSP_I2C4_Init+0x51c>
9000910e:	46ab      	mov	fp, r5
            if(presc != prev_presc)
90009110:	9e12      	ldr	r6, [sp, #72]	; 0x48
90009112:	455d      	cmp	r5, fp
90009114:	bf0c      	ite	eq
90009116:	2600      	moveq	r6, #0
90009118:	f006 0601 	andne.w	r6, r6, #1
9000911c:	2e00      	cmp	r6, #0
9000911e:	d094      	beq.n	9000904a <BSP_I2C4_Init+0x426>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009120:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009124:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009128:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
9000912c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009130:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009134:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009136:	f04f 030e 	mov.w	r3, #14
9000913a:	6093      	str	r3, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000913c:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000913e:	d99d      	bls.n	9000907c <BSP_I2C4_Init+0x458>
90009140:	4b9d      	ldr	r3, [pc, #628]	; (900093b8 <BSP_I2C4_Init+0x794>)
90009142:	920b      	str	r2, [sp, #44]	; 0x2c
90009144:	f8c3 9000 	str.w	r9, [r3]
              I2c_valid_timing_nbr ++;
90009148:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9000914c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9000914e:	f240 4201 	movw	r2, #1025	; 0x401
90009152:	f240 2657 	movw	r6, #599	; 0x257
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
90009156:	f640 1ac4 	movw	sl, #2500	; 0x9c4
9000915a:	1ad2      	subs	r2, r2, r3
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
9000915c:	f240 4b12 	movw	fp, #1042	; 0x412
90009160:	920d      	str	r2, [sp, #52]	; 0x34
90009162:	9a02      	ldr	r2, [sp, #8]
90009164:	4296      	cmp	r6, r2
90009166:	bf38      	it	cc
90009168:	4616      	movcc	r6, r2
9000916a:	4a94      	ldr	r2, [pc, #592]	; (900093bc <BSP_I2C4_Init+0x798>)
9000916c:	9207      	str	r2, [sp, #28]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
9000916e:	2200      	movs	r2, #0
90009170:	9208      	str	r2, [sp, #32]
90009172:	f04f 32ff 	mov.w	r2, #4294967295
90009176:	4611      	mov	r1, r2
90009178:	f103 0232 	add.w	r2, r3, #50	; 0x32
9000917c:	f6a3 0334 	subw	r3, r3, #2100	; 0x834
90009180:	920c      	str	r2, [sp, #48]	; 0x30
90009182:	930e      	str	r3, [sp, #56]	; 0x38
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
90009184:	9b07      	ldr	r3, [sp, #28]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90009186:	f04f 0800 	mov.w	r8, #0
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
9000918a:	6818      	ldr	r0, [r3, #0]
9000918c:	9b02      	ldr	r3, [sp, #8]
9000918e:	fb00 3003 	mla	r0, r0, r3, r3
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
90009192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90009194:	1a1b      	subs	r3, r3, r0
90009196:	ea4f 0943 	mov.w	r9, r3, lsl #1
9000919a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9000919c:	eb03 0e00 	add.w	lr, r3, r0
900091a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900091a2:	4403      	add	r3, r0
900091a4:	9309      	str	r3, [sp, #36]	; 0x24
900091a6:	e006      	b.n	900091b6 <BSP_I2C4_Init+0x592>
900091a8:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
900091ac:	4486      	add	lr, r0
900091ae:	eba9 0900 	sub.w	r9, r9, r0
900091b2:	f43f af65 	beq.w	90009080 <BSP_I2C4_Init+0x45c>
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900091b6:	f240 5214 	movw	r2, #1300	; 0x514
900091ba:	f8cd 8004 	str.w	r8, [sp, #4]
900091be:	f1ae 0332 	sub.w	r3, lr, #50	; 0x32
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
900091c2:	f108 0801 	add.w	r8, r8, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
900091c6:	4596      	cmp	lr, r2
900091c8:	d9ee      	bls.n	900091a8 <BSP_I2C4_Init+0x584>
900091ca:	9a02      	ldr	r2, [sp, #8]
900091cc:	ebb2 0f93 	cmp.w	r2, r3, lsr #2
900091d0:	d2ea      	bcs.n	900091a8 <BSP_I2C4_Init+0x584>
900091d2:	f640 0c34 	movw	ip, #2100	; 0x834
900091d6:	464c      	mov	r4, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
900091d8:	f8cd 8010 	str.w	r8, [sp, #16]
900091dc:	2200      	movs	r2, #0
900091de:	ebac 0c03 	sub.w	ip, ip, r3
900091e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900091e4:	f8cd e014 	str.w	lr, [sp, #20]
900091e8:	4473      	add	r3, lr
900091ea:	f8cd 9018 	str.w	r9, [sp, #24]
900091ee:	f8dd 801c 	ldr.w	r8, [sp, #28]
900091f2:	468e      	mov	lr, r1
900091f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
900091f8:	e005      	b.n	90009206 <BSP_I2C4_Init+0x5e2>
900091fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
900091fe:	eba4 0400 	sub.w	r4, r4, r0
90009202:	4403      	add	r3, r0
90009204:	d01a      	beq.n	9000923c <BSP_I2C4_Init+0x618>
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90009206:	eb0c 0103 	add.w	r1, ip, r3
9000920a:	4617      	mov	r7, r2
9000920c:	f203 15a1 	addw	r5, r3, #417	; 0x1a1
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
90009210:	3201      	adds	r2, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
90009212:	42b1      	cmp	r1, r6
90009214:	d9f1      	bls.n	900091fa <BSP_I2C4_Init+0x5d6>
90009216:	455d      	cmp	r5, fp
90009218:	d8ef      	bhi.n	900091fa <BSP_I2C4_Init+0x5d6>
            if (error < 0)
9000921a:	ea33 0123 	bics.w	r1, r3, r3, asr #32
9000921e:	bf28      	it	cs
90009220:	4621      	movcs	r1, r4
            if ((uint32_t)error < prev_error)
90009222:	458a      	cmp	sl, r1
90009224:	d9e9      	bls.n	900091fa <BSP_I2C4_Init+0x5d6>
              I2c_valid_timing[count].sclh = sclh;
90009226:	468a      	mov	sl, r1
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009228:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
              I2c_valid_timing[count].scll = scll;
9000922c:	9901      	ldr	r1, [sp, #4]
              I2c_valid_timing[count].sclh = sclh;
9000922e:	46ce      	mov	lr, r9
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
90009230:	eba4 0400 	sub.w	r4, r4, r0
90009234:	4403      	add	r3, r0
              I2c_valid_timing[count].sclh = sclh;
90009236:	e9c8 7103 	strd	r7, r1, [r8, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
9000923a:	d1e4      	bne.n	90009206 <BSP_I2C4_Init+0x5e2>
9000923c:	4671      	mov	r1, lr
9000923e:	f8dd 8010 	ldr.w	r8, [sp, #16]
90009242:	e9dd e905 	ldrd	lr, r9, [sp, #20]
90009246:	e7af      	b.n	900091a8 <BSP_I2C4_Init+0x584>
90009248:	460e      	mov	r6, r1
9000924a:	e62f      	b.n	90008eac <BSP_I2C4_Init+0x288>
            if(presc != prev_presc)
9000924c:	4608      	mov	r0, r1
9000924e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
90009250:	455d      	cmp	r5, fp
90009252:	bf0c      	ite	eq
90009254:	2600      	moveq	r6, #0
90009256:	f006 0601 	andne.w	r6, r6, #1
9000925a:	2e00      	cmp	r6, #0
9000925c:	f43f aec3 	beq.w	90008fe6 <BSP_I2C4_Init+0x3c2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009260:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009264:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009268:	210a      	movs	r1, #10
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000926a:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000926e:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009272:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
90009276:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009278:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000927a:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
9000927c:	f63f af60 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90009280:	46ab      	mov	fp, r5
90009282:	e72c      	b.n	900090de <BSP_I2C4_Init+0x4ba>
            if(presc != prev_presc)
90009284:	4631      	mov	r1, r6
90009286:	e6c7      	b.n	90009018 <BSP_I2C4_Init+0x3f4>
90009288:	4601      	mov	r1, r0
9000928a:	980c      	ldr	r0, [sp, #48]	; 0x30
9000928c:	455d      	cmp	r5, fp
9000928e:	bf0c      	ite	eq
90009290:	2000      	moveq	r0, #0
90009292:	f000 0001 	andne.w	r0, r0, #1
90009296:	2800      	cmp	r0, #0
90009298:	f43f ae8b 	beq.w	90008fb2 <BSP_I2C4_Init+0x38e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000929c:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900092a0:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900092a4:	2108      	movs	r1, #8
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092a6:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900092aa:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092ae:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900092b2:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900092b4:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092b6:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900092b8:	f63f af42 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
900092bc:	46ab      	mov	fp, r5
900092be:	e7c6      	b.n	9000924e <BSP_I2C4_Init+0x62a>
            if(presc != prev_presc)
900092c0:	460e      	mov	r6, r1
900092c2:	9807      	ldr	r0, [sp, #28]
900092c4:	455d      	cmp	r5, fp
900092c6:	bf0c      	ite	eq
900092c8:	2000      	moveq	r0, #0
900092ca:	f000 0001 	andne.w	r0, r0, #1
900092ce:	2800      	cmp	r0, #0
900092d0:	f43f ae3b 	beq.w	90008f4a <BSP_I2C4_Init+0x326>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092d4:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
900092d8:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900092dc:	2104      	movs	r1, #4
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092de:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900092e2:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092e6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
900092ea:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
900092ec:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
900092ee:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
900092f0:	f63f af26 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
900092f4:	46ab      	mov	fp, r5
            if(presc != prev_presc)
900092f6:	9909      	ldr	r1, [sp, #36]	; 0x24
900092f8:	455d      	cmp	r5, fp
900092fa:	bf0c      	ite	eq
900092fc:	2100      	moveq	r1, #0
900092fe:	f001 0101 	andne.w	r1, r1, #1
90009302:	2900      	cmp	r1, #0
90009304:	f43f ae3b 	beq.w	90008f7e <BSP_I2C4_Init+0x35a>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009308:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000930c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009310:	2006      	movs	r0, #6
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009312:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009316:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000931a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000931e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009320:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009322:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009324:	f63f af0c 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90009328:	46ab      	mov	fp, r5
9000932a:	e7ae      	b.n	9000928a <BSP_I2C4_Init+0x666>
            if(presc != prev_presc)
9000932c:	4630      	mov	r0, r6
9000932e:	e7e2      	b.n	900092f6 <BSP_I2C4_Init+0x6d2>
90009330:	4631      	mov	r1, r6
90009332:	9e05      	ldr	r6, [sp, #20]
90009334:	45ab      	cmp	fp, r5
90009336:	bf0c      	ite	eq
90009338:	2600      	moveq	r6, #0
9000933a:	f006 0601 	andne.w	r6, r6, #1
9000933e:	2e00      	cmp	r6, #0
90009340:	f43f ade9 	beq.w	90008f16 <BSP_I2C4_Init+0x2f2>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009344:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
90009348:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000934c:	2102      	movs	r1, #2
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000934e:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009352:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009356:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000935a:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
9000935c:	6091      	str	r1, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000935e:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009360:	f63f aeee 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90009364:	46ab      	mov	fp, r5
90009366:	e7ac      	b.n	900092c2 <BSP_I2C4_Init+0x69e>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009368:	eb09 0289 	add.w	r2, r9, r9, lsl #2
              I2c_valid_timing_nbr ++;
9000936c:	f109 0901 	add.w	r9, r9, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009370:	2000      	movs	r0, #0
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009372:	f84a 5022 	str.w	r5, [sl, r2, lsl #2]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009376:	f1b9 0f7f 	cmp.w	r9, #127	; 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
9000937a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
9000937e:	6053      	str	r3, [r2, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
90009380:	6090      	str	r0, [r2, #8]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
90009382:	4652      	mov	r2, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
90009384:	f63f aedc 	bhi.w	90009140 <BSP_I2C4_Init+0x51c>
90009388:	46ab      	mov	fp, r5
9000938a:	e7d2      	b.n	90009332 <BSP_I2C4_Init+0x70e>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
9000938c:	3501      	adds	r5, #1
9000938e:	9b02      	ldr	r3, [sp, #8]
90009390:	2d10      	cmp	r5, #16
90009392:	441f      	add	r7, r3
90009394:	f47f acc8 	bne.w	90008d28 <BSP_I2C4_Init+0x104>
90009398:	b126      	cbz	r6, 900093a4 <BSP_I2C4_Init+0x780>
9000939a:	4b07      	ldr	r3, [pc, #28]	; (900093b8 <BSP_I2C4_Init+0x794>)
9000939c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
900093a0:	f8c3 9000 	str.w	r9, [r3]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
900093a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900093a6:	2b00      	cmp	r3, #0
900093a8:	f43f ae8e 	beq.w	900090c8 <BSP_I2C4_Init+0x4a4>
900093ac:	4b03      	ldr	r3, [pc, #12]	; (900093bc <BSP_I2C4_Init+0x798>)
900093ae:	930b      	str	r3, [sp, #44]	; 0x2c
900093b0:	e6cc      	b.n	9000914c <BSP_I2C4_Init+0x528>
900093b2:	bf00      	nop
900093b4:	2400c958 	.word	0x2400c958
900093b8:	2400c954 	.word	0x2400c954
900093bc:	2400bf54 	.word	0x2400bf54

900093c0 <BSP_I2C4_WriteReg>:
{
900093c0:	b530      	push	{r4, r5, lr}
900093c2:	4614      	mov	r4, r2
900093c4:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
900093c6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
900093ca:	460a      	mov	r2, r1
900093cc:	9301      	str	r3, [sp, #4]
900093ce:	4601      	mov	r1, r0
900093d0:	2301      	movs	r3, #1
900093d2:	4809      	ldr	r0, [pc, #36]	; (900093f8 <BSP_I2C4_WriteReg+0x38>)
900093d4:	9502      	str	r5, [sp, #8]
900093d6:	9400      	str	r4, [sp, #0]
900093d8:	f001 fb9c 	bl	9000ab14 <HAL_I2C_Mem_Write>
900093dc:	b908      	cbnz	r0, 900093e2 <BSP_I2C4_WriteReg+0x22>
}
900093de:	b005      	add	sp, #20
900093e0:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
900093e2:	4805      	ldr	r0, [pc, #20]	; (900093f8 <BSP_I2C4_WriteReg+0x38>)
900093e4:	f001 fe34 	bl	9000b050 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
900093e8:	2804      	cmp	r0, #4
900093ea:	bf0c      	ite	eq
900093ec:	f06f 0065 	mvneq.w	r0, #101	; 0x65
900093f0:	f06f 0003 	mvnne.w	r0, #3
900093f4:	e7f3      	b.n	900093de <BSP_I2C4_WriteReg+0x1e>
900093f6:	bf00      	nop
900093f8:	2400c958 	.word	0x2400c958

900093fc <BSP_I2C4_ReadReg>:
{
900093fc:	b530      	push	{r4, r5, lr}
900093fe:	4614      	mov	r4, r2
90009400:	b085      	sub	sp, #20
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
90009402:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
90009406:	460a      	mov	r2, r1
90009408:	9301      	str	r3, [sp, #4]
9000940a:	4601      	mov	r1, r0
9000940c:	2301      	movs	r3, #1
9000940e:	4809      	ldr	r0, [pc, #36]	; (90009434 <BSP_I2C4_ReadReg+0x38>)
90009410:	9502      	str	r5, [sp, #8]
90009412:	9400      	str	r4, [sp, #0]
90009414:	f001 fcb2 	bl	9000ad7c <HAL_I2C_Mem_Read>
90009418:	b908      	cbnz	r0, 9000941e <BSP_I2C4_ReadReg+0x22>
}
9000941a:	b005      	add	sp, #20
9000941c:	bd30      	pop	{r4, r5, pc}
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
9000941e:	4805      	ldr	r0, [pc, #20]	; (90009434 <BSP_I2C4_ReadReg+0x38>)
90009420:	f001 fe16 	bl	9000b050 <HAL_I2C_GetError>
      ret =  BSP_ERROR_PERIPH_FAILURE;
90009424:	2804      	cmp	r0, #4
90009426:	bf0c      	ite	eq
90009428:	f06f 0065 	mvneq.w	r0, #101	; 0x65
9000942c:	f06f 0003 	mvnne.w	r0, #3
90009430:	e7f3      	b.n	9000941a <BSP_I2C4_ReadReg+0x1e>
90009432:	bf00      	nop
90009434:	2400c958 	.word	0x2400c958

90009438 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
90009438:	f000 baaa 	b.w	90009990 <HAL_GetTick>

9000943c <BSP_SDRAM_DeInit>:
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >= SDRAM_INSTANCES_NBR)
9000943c:	b970      	cbnz	r0, 9000945c <BSP_SDRAM_DeInit+0x20>
{
9000943e:	b510      	push	{r4, lr}
90009440:	4604      	mov	r4, r0
  {
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
90009442:	4808      	ldr	r0, [pc, #32]	; (90009464 <BSP_SDRAM_DeInit+0x28>)
90009444:	f005 fca8 	bl	9000ed98 <HAL_SDRAM_DeInit>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hSdram);

  /* Disable NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
90009448:	207a      	movs	r0, #122	; 0x7a
9000944a:	f000 fb0b 	bl	90009a64 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
9000944e:	4b06      	ldr	r3, [pc, #24]	; (90009468 <BSP_SDRAM_DeInit+0x2c>)
90009450:	4806      	ldr	r0, [pc, #24]	; (9000946c <BSP_SDRAM_DeInit+0x30>)
90009452:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
90009454:	f003 fbe0 	bl	9000cc18 <HAL_MDMA_DeInit>
  int32_t ret = BSP_ERROR_NONE;
90009458:	4620      	mov	r0, r4
}
9000945a:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
9000945c:	f06f 0001 	mvn.w	r0, #1
}
90009460:	4770      	bx	lr
90009462:	bf00      	nop
90009464:	2400c9ac 	.word	0x2400c9ac
90009468:	52000040 	.word	0x52000040
9000946c:	2400c9e0 	.word	0x2400c9e0

90009470 <MX_SDRAM_BANK2_Init>:
{
90009470:	b530      	push	{r4, r5, lr}
  hSdram->Init.MemoryDataWidth    = MemoryDataWidth;
90009472:	6102      	str	r2, [r0, #16]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
90009474:	2200      	movs	r2, #0
  hsdram->Instance = FMC_SDRAM_DEVICE;
90009476:	4c15      	ldr	r4, [pc, #84]	; (900094cc <MX_SDRAM_BANK2_Init+0x5c>)
{
90009478:	b089      	sub	sp, #36	; 0x24
  hSdram->Init.RowBitsNumber      = RowBitsNumber;
9000947a:	60c1      	str	r1, [r0, #12]
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
9000947c:	2140      	movs	r1, #64	; 0x40
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
9000947e:	6082      	str	r2, [r0, #8]
  sdram_timing.LoadToActiveDelay    = 2;
90009480:	2307      	movs	r3, #7
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
90009482:	61c2      	str	r2, [r0, #28]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
90009484:	f44f 75c0 	mov.w	r5, #384	; 0x180
  hSdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
90009488:	6282      	str	r2, [r0, #40]	; 0x28
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
9000948a:	2201      	movs	r2, #1
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
9000948c:	6185      	str	r5, [r0, #24]
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
9000948e:	6042      	str	r2, [r0, #4]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90009490:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  hsdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
90009494:	6161      	str	r1, [r4, #20]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
90009496:	f44f 6100 	mov.w	r1, #2048	; 0x800
9000949a:	e9c0 1208 	strd	r1, r2, [r0, #32]
  sdram_timing.LoadToActiveDelay    = 2;
9000949e:	2202      	movs	r2, #2
  sdram_timing.RCDDelay             = 2;
900094a0:	2102      	movs	r1, #2
  sdram_timing.LoadToActiveDelay    = 2;
900094a2:	e9cd 2300 	strd	r2, r3, [sp]
900094a6:	2204      	movs	r2, #4
900094a8:	2307      	movs	r3, #7
  sdram_timing.RCDDelay             = 2;
900094aa:	9106      	str	r1, [sp, #24]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900094ac:	4669      	mov	r1, sp
  sdram_timing.LoadToActiveDelay    = 2;
900094ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
900094b2:	2202      	movs	r2, #2
900094b4:	2302      	movs	r3, #2
900094b6:	e9cd 2304 	strd	r2, r3, [sp, #16]
  hsdram->Instance = FMC_SDRAM_DEVICE;
900094ba:	4b05      	ldr	r3, [pc, #20]	; (900094d0 <MX_SDRAM_BANK2_Init+0x60>)
900094bc:	6023      	str	r3, [r4, #0]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
900094be:	f005 fc41 	bl	9000ed44 <HAL_SDRAM_Init>
}
900094c2:	3800      	subs	r0, #0
900094c4:	bf18      	it	ne
900094c6:	2001      	movne	r0, #1
900094c8:	b009      	add	sp, #36	; 0x24
900094ca:	bd30      	pop	{r4, r5, pc}
900094cc:	2400c9ac 	.word	0x2400c9ac
900094d0:	52004140 	.word	0x52004140

900094d4 <BSP_SDRAM_Init>:
  if(Instance >=SDRAM_INSTANCES_NBR)
900094d4:	2800      	cmp	r0, #0
900094d6:	f040 80d2 	bne.w	9000967e <BSP_SDRAM_Init+0x1aa>
  __HAL_RCC_FMC_CLK_ENABLE();
900094da:	4b6c      	ldr	r3, [pc, #432]	; (9000968c <BSP_SDRAM_Init+0x1b8>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
900094dc:	210c      	movs	r1, #12
  __HAL_RCC_FMC_CLK_ENABLE();
900094de:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900094e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
{
900094e6:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_FMC_CLK_ENABLE();
900094e8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
{
900094ec:	b08e      	sub	sp, #56	; 0x38
  __HAL_RCC_FMC_CLK_ENABLE();
900094ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
900094f2:	4605      	mov	r5, r0
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900094f4:	f24c 7003 	movw	r0, #50947	; 0xc703
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900094f8:	4c65      	ldr	r4, [pc, #404]	; (90009690 <BSP_SDRAM_Init+0x1bc>)
  __HAL_RCC_FMC_CLK_ENABLE();
900094fa:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900094fe:	4e65      	ldr	r6, [pc, #404]	; (90009694 <BSP_SDRAM_Init+0x1c0>)
  __HAL_RCC_FMC_CLK_ENABLE();
90009500:	9201      	str	r2, [sp, #4]
90009502:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
90009504:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90009508:	f042 0201 	orr.w	r2, r2, #1
9000950c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
90009510:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
90009514:	f002 0201 	and.w	r2, r2, #1
90009518:	9202      	str	r2, [sp, #8]
9000951a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
9000951c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009520:	f042 0208 	orr.w	r2, r2, #8
90009524:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009528:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000952c:	f002 0208 	and.w	r2, r2, #8
90009530:	9203      	str	r2, [sp, #12]
90009532:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
90009534:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009538:	f042 0210 	orr.w	r2, r2, #16
9000953c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009540:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009544:	f002 0210 	and.w	r2, r2, #16
90009548:	9204      	str	r2, [sp, #16]
9000954a:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
9000954c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009550:	f042 0220 	orr.w	r2, r2, #32
90009554:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009558:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
9000955c:	f002 0220 	and.w	r2, r2, #32
90009560:	9205      	str	r2, [sp, #20]
90009562:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
90009564:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009568:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000956c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009570:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009574:	f002 0240 	and.w	r2, r2, #64	; 0x40
90009578:	9206      	str	r2, [sp, #24]
9000957a:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000957c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
90009580:	f042 0280 	orr.w	r2, r2, #128	; 0x80
90009584:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
90009588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
9000958c:	910c      	str	r1, [sp, #48]	; 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
9000958e:	2102      	movs	r1, #2
  __HAL_RCC_GPIOH_CLK_ENABLE();
90009590:	f003 0380 	and.w	r3, r3, #128	; 0x80
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
90009594:	e9cd 0108 	strd	r0, r1, [sp, #32]
90009598:	2001      	movs	r0, #1
9000959a:	2103      	movs	r1, #3
  __HAL_RCC_GPIOH_CLK_ENABLE();
9000959c:	9307      	str	r3, [sp, #28]
9000959e:	9b07      	ldr	r3, [sp, #28]
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
900095a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
900095a4:	a908      	add	r1, sp, #32
900095a6:	483c      	ldr	r0, [pc, #240]	; (90009698 <BSP_SDRAM_Init+0x1c4>)
900095a8:	f000 fec0 	bl	9000a32c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900095ac:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900095b0:	a908      	add	r1, sp, #32
900095b2:	483a      	ldr	r0, [pc, #232]	; (9000969c <BSP_SDRAM_Init+0x1c8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
900095b4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
900095b6:	f000 feb9 	bl	9000a32c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900095ba:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900095be:	a908      	add	r1, sp, #32
900095c0:	4837      	ldr	r0, [pc, #220]	; (900096a0 <BSP_SDRAM_Init+0x1cc>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
900095c2:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
900095c4:	f000 feb2 	bl	9000a32c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900095c8:	f248 1333 	movw	r3, #33075	; 0x8133
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900095cc:	a908      	add	r1, sp, #32
900095ce:	4835      	ldr	r0, [pc, #212]	; (900096a4 <BSP_SDRAM_Init+0x1d0>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
900095d0:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
900095d2:	f000 feab 	bl	9000a32c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900095d6:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900095d8:	a908      	add	r1, sp, #32
900095da:	4833      	ldr	r0, [pc, #204]	; (900096a8 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 ;
900095dc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
900095de:	f000 fea5 	bl	9000a32c <HAL_GPIO_Init>
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
900095e2:	2380      	movs	r3, #128	; 0x80
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900095e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900095e8:	f240 2102 	movw	r1, #514	; 0x202
  HAL_MDMA_DeInit(&mdma_handle);
900095ec:	4620      	mov	r0, r4
  mdma_handle.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
900095ee:	6223      	str	r3, [r4, #32]
  mdma_handle.Init.BufferTransferLength = 128;
900095f0:	62a3      	str	r3, [r4, #40]	; 0x28
  mdma_handle.Init.Request = MDMA_REQUEST_SW;
900095f2:	6062      	str	r2, [r4, #4]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900095f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  mdma_handle.Init.SourceInc = MDMA_SRC_INC_WORD;
900095f8:	6161      	str	r1, [r4, #20]
  mdma_handle.Init.TransferTriggerMode = MDMA_BLOCK_TRANSFER;
900095fa:	60a2      	str	r2, [r4, #8]
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
900095fc:	4a2b      	ldr	r2, [pc, #172]	; (900096ac <BSP_SDRAM_Init+0x1d8>)
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
900095fe:	6334      	str	r4, [r6, #48]	; 0x30
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
90009600:	6022      	str	r2, [r4, #0]
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
90009602:	6426      	str	r6, [r4, #64]	; 0x40
  mdma_handle.Init.Priority = MDMA_PRIORITY_HIGH;
90009604:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DestinationInc = MDMA_DEST_INC_WORD;
90009608:	f640 0308 	movw	r3, #2056	; 0x808
9000960c:	61a3      	str	r3, [r4, #24]
  mdma_handle.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
9000960e:	2320      	movs	r3, #32
90009610:	61e3      	str	r3, [r4, #28]
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
90009612:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  mdma_handle.Init.DestBurst = MDMA_DEST_BURST_SINGLE;
90009616:	e9c4 550b 	strd	r5, r5, [r4, #44]	; 0x2c
  mdma_handle.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
9000961a:	6263      	str	r3, [r4, #36]	; 0x24
  mdma_handle.Init.DestBlockAddressOffset = 0;
9000961c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
  HAL_MDMA_DeInit(&mdma_handle);
90009620:	f003 fafa 	bl	9000cc18 <HAL_MDMA_DeInit>
  HAL_MDMA_Init(&mdma_handle);
90009624:	4620      	mov	r0, r4
90009626:	f003 fa7d 	bl	9000cb24 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, 0x0F, 0);
9000962a:	462a      	mov	r2, r5
9000962c:	210f      	movs	r1, #15
9000962e:	207a      	movs	r0, #122	; 0x7a
90009630:	f000 f9cc 	bl	900099cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
90009634:	207a      	movs	r0, #122	; 0x7a
90009636:	f000 fa07 	bl	90009a48 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_BANK2_Init(&hsdram[Instance],FMC_SDRAM_ROW_BITS_NUM_12, FMC_SDRAM_MEM_BUS_WIDTH_16) != HAL_OK)
9000963a:	2210      	movs	r2, #16
9000963c:	2104      	movs	r1, #4
9000963e:	4630      	mov	r0, r6
90009640:	f7ff ff16 	bl	90009470 <MX_SDRAM_BANK2_Init>
90009644:	b9f0      	cbnz	r0, 90009684 <BSP_SDRAM_Init+0x1b0>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
90009646:	491a      	ldr	r1, [pc, #104]	; (900096b0 <BSP_SDRAM_Init+0x1dc>)
90009648:	2208      	movs	r2, #8
9000964a:	2303      	movs	r3, #3
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000964c:	4630      	mov	r0, r6
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
9000964e:	e9c1 2300 	strd	r2, r3, [r1]
90009652:	f240 6203 	movw	r2, #1539	; 0x603
90009656:	2300      	movs	r3, #0
90009658:	e9c1 2302 	strd	r2, r3, [r1, #8]
9000965c:	2200      	movs	r2, #0
9000965e:	2330      	movs	r3, #48	; 0x30
90009660:	e9c1 2304 	strd	r2, r3, [r1, #16]
90009664:	2200      	movs	r2, #0
90009666:	f44f 7300 	mov.w	r3, #512	; 0x200
9000966a:	e9c1 2306 	strd	r2, r3, [r1, #24]
      if(MT48LC4M32B2_Init(&hsdram[Instance], &pRegMode) != MT48LC4M32B2_OK)
9000966e:	f7ff fa33 	bl	90008ad8 <MT48LC4M32B2_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
90009672:	2800      	cmp	r0, #0
90009674:	bf18      	it	ne
90009676:	f06f 0004 	mvnne.w	r0, #4
}
9000967a:	b00e      	add	sp, #56	; 0x38
9000967c:	bd70      	pop	{r4, r5, r6, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
9000967e:	f06f 0001 	mvn.w	r0, #1
}
90009682:	4770      	bx	lr
      ret = BSP_ERROR_NO_INIT;
90009684:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
90009688:	e7f7      	b.n	9000967a <BSP_SDRAM_Init+0x1a6>
9000968a:	bf00      	nop
9000968c:	58024400 	.word	0x58024400
90009690:	2400ca4c 	.word	0x2400ca4c
90009694:	2400c9ac 	.word	0x2400c9ac
90009698:	58020c00 	.word	0x58020c00
9000969c:	58021000 	.word	0x58021000
900096a0:	58021400 	.word	0x58021400
900096a4:	58021800 	.word	0x58021800
900096a8:	58021c00 	.word	0x58021c00
900096ac:	52000040 	.word	0x52000040
900096b0:	2400cab8 	.word	0x2400cab8

900096b4 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
900096b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900096b8:	b088      	sub	sp, #32
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
900096ba:	2800      	cmp	r0, #0
900096bc:	d16b      	bne.n	90009796 <BSP_TS_Init+0xe2>
900096be:	680b      	ldr	r3, [r1, #0]
900096c0:	460c      	mov	r4, r1
900096c2:	1e5a      	subs	r2, r3, #1
900096c4:	f5b2 7ff0 	cmp.w	r2, #480	; 0x1e0
900096c8:	d265      	bcs.n	90009796 <BSP_TS_Init+0xe2>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
900096ca:	684a      	ldr	r2, [r1, #4]
900096cc:	1e51      	subs	r1, r2, #1
900096ce:	f5b1 7f88 	cmp.w	r1, #272	; 0x110
900096d2:	d260      	bcs.n	90009796 <BSP_TS_Init+0xe2>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
900096d4:	4293      	cmp	r3, r2
900096d6:	bf28      	it	cs
900096d8:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
900096da:	68e2      	ldr	r2, [r4, #12]
900096dc:	429a      	cmp	r2, r3
900096de:	d85a      	bhi.n	90009796 <BSP_TS_Init+0xe2>
  FT5336_IO_t              IOCtx;
  static FT5336_Object_t   FT5336Obj;
  uint32_t ft5336_id       = 0;

  /* Configure the touch screen driver */
  IOCtx.Address     = TS_I2C_ADDRESS;
900096e0:	2270      	movs	r2, #112	; 0x70
  IOCtx.Init        = BSP_I2C4_Init;
900096e2:	4b31      	ldr	r3, [pc, #196]	; (900097a8 <BSP_TS_Init+0xf4>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
  IOCtx.GetTick     = BSP_GetTick;

  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900096e4:	4d31      	ldr	r5, [pc, #196]	; (900097ac <BSP_TS_Init+0xf8>)
900096e6:	a902      	add	r1, sp, #8
  IOCtx.Address     = TS_I2C_ADDRESS;
900096e8:	f8ad 2010 	strh.w	r2, [sp, #16]
  IOCtx.Init        = BSP_I2C4_Init;
900096ec:	9302      	str	r3, [sp, #8]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900096ee:	4a30      	ldr	r2, [pc, #192]	; (900097b0 <BSP_TS_Init+0xfc>)
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900096f0:	4b30      	ldr	r3, [pc, #192]	; (900097b4 <BSP_TS_Init+0x100>)
  IOCtx.DeInit      = BSP_I2C4_DeInit;
900096f2:	9203      	str	r2, [sp, #12]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
900096f4:	9306      	str	r3, [sp, #24]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900096f6:	4a30      	ldr	r2, [pc, #192]	; (900097b8 <BSP_TS_Init+0x104>)
  IOCtx.GetTick     = BSP_GetTick;
900096f8:	4b30      	ldr	r3, [pc, #192]	; (900097bc <BSP_TS_Init+0x108>)
  uint32_t ft5336_id       = 0;
900096fa:	9001      	str	r0, [sp, #4]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
900096fc:	4628      	mov	r0, r5
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
900096fe:	9205      	str	r2, [sp, #20]
  IOCtx.GetTick     = BSP_GetTick;
90009700:	9307      	str	r3, [sp, #28]
  if(FT5336_RegisterBusIO (&FT5336Obj, &IOCtx) != FT5336_OK)
90009702:	f7ff f939 	bl	90008978 <FT5336_RegisterBusIO>
90009706:	2800      	cmp	r0, #0
90009708:	d14b      	bne.n	900097a2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_BUS_FAILURE;
  }
  else if(FT5336_ReadID(&FT5336Obj, &ft5336_id) != FT5336_OK)
9000970a:	a901      	add	r1, sp, #4
9000970c:	4628      	mov	r0, r5
9000970e:	f7ff f829 	bl	90008764 <FT5336_ReadID>
90009712:	2800      	cmp	r0, #0
90009714:	d145      	bne.n	900097a2 <BSP_TS_Init+0xee>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else if(ft5336_id != FT5336_ID)
90009716:	9b01      	ldr	r3, [sp, #4]
90009718:	2b51      	cmp	r3, #81	; 0x51
9000971a:	d142      	bne.n	900097a2 <BSP_TS_Init+0xee>
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
  }
  else
  {
    Ts_CompObj[Instance] = &FT5336Obj;
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
9000971c:	4b28      	ldr	r3, [pc, #160]	; (900097c0 <BSP_TS_Init+0x10c>)

    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000971e:	4628      	mov	r0, r5
    Ts_CompObj[Instance] = &FT5336Obj;
90009720:	4f28      	ldr	r7, [pc, #160]	; (900097c4 <BSP_TS_Init+0x110>)
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009722:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 900097cc <BSP_TS_Init+0x118>
    Ts_CompObj[Instance] = &FT5336Obj;
90009726:	603d      	str	r5, [r7, #0]
    Ts_Drv = (TS_Drv_t *) &FT5336_TS_Driver;
90009728:	f8c8 3000 	str.w	r3, [r8]
    if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT5336_OK)
9000972c:	681b      	ldr	r3, [r3, #0]
9000972e:	4798      	blx	r3
90009730:	4606      	mov	r6, r0
90009732:	2800      	cmp	r0, #0
90009734:	d135      	bne.n	900097a2 <BSP_TS_Init+0xee>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009736:	4d24      	ldr	r5, [pc, #144]	; (900097c8 <BSP_TS_Init+0x114>)
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009738:	a902      	add	r1, sp, #8
9000973a:	6838      	ldr	r0, [r7, #0]
9000973c:	f8d8 3000 	ldr.w	r3, [r8]
90009740:	e9d4 7200 	ldrd	r7, r2, [r4]
90009744:	69db      	ldr	r3, [r3, #28]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
90009746:	e9c5 7200 	strd	r7, r2, [r5]
9000974a:	68a2      	ldr	r2, [r4, #8]
9000974c:	60aa      	str	r2, [r5, #8]
9000974e:	68e2      	ldr	r2, [r4, #12]
90009750:	60ea      	str	r2, [r5, #12]
        if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
90009752:	4798      	blx	r3
90009754:	2800      	cmp	r0, #0
90009756:	db18      	blt.n	9000978a <BSP_TS_Init+0xd6>
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009758:	68e3      	ldr	r3, [r4, #12]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
9000975a:	9803      	ldr	r0, [sp, #12]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000975c:	e9d4 2100 	ldrd	r2, r1, [r4]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
90009760:	6128      	str	r0, [r5, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009762:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
90009764:	440b      	add	r3, r1
90009766:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009768:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
9000976a:	e9c5 330b 	strd	r3, r3, [r5, #44]	; 0x2c
9000976e:	636b      	str	r3, [r5, #52]	; 0x34
90009770:	63ab      	str	r3, [r5, #56]	; 0x38
90009772:	63eb      	str	r3, [r5, #60]	; 0x3c
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
90009774:	9b04      	ldr	r3, [sp, #16]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
90009776:	622a      	str	r2, [r5, #32]
90009778:	626a      	str	r2, [r5, #36]	; 0x24
9000977a:	62aa      	str	r2, [r5, #40]	; 0x28
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
9000977c:	616b      	str	r3, [r5, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
9000977e:	e9c5 2206 	strd	r2, r2, [r5, #24]
}
90009782:	4630      	mov	r0, r6
90009784:	b008      	add	sp, #32
90009786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = BSP_ERROR_COMPONENT_FAILURE;
9000978a:	f06f 0604 	mvn.w	r6, #4
}
9000978e:	4630      	mov	r0, r6
90009790:	b008      	add	sp, #32
90009792:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = BSP_ERROR_WRONG_PARAM;
90009796:	f06f 0601 	mvn.w	r6, #1
}
9000979a:	4630      	mov	r0, r6
9000979c:	b008      	add	sp, #32
9000979e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      ret = BSP_ERROR_NO_INIT;
900097a2:	f04f 36ff 	mov.w	r6, #4294967295
900097a6:	e7ec      	b.n	90009782 <BSP_TS_Init+0xce>
900097a8:	90008c25 	.word	0x90008c25
900097ac:	2400cad8 	.word	0x2400cad8
900097b0:	90008b91 	.word	0x90008b91
900097b4:	900093fd 	.word	0x900093fd
900097b8:	900093c1 	.word	0x900093c1
900097bc:	90009439 	.word	0x90009439
900097c0:	24000024 	.word	0x24000024
900097c4:	2400cb00 	.word	0x2400cb00
900097c8:	2400cb04 	.word	0x2400cb04
900097cc:	2400cb44 	.word	0x2400cb44

900097d0 <BSP_TS_GetState>:
  if(Instance >= TS_INSTANCES_NBR)
900097d0:	2800      	cmp	r0, #0
900097d2:	d156      	bne.n	90009882 <BSP_TS_GetState+0xb2>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
900097d4:	4b2c      	ldr	r3, [pc, #176]	; (90009888 <BSP_TS_GetState+0xb8>)
900097d6:	4a2d      	ldr	r2, [pc, #180]	; (9000988c <BSP_TS_GetState+0xbc>)
900097d8:	681b      	ldr	r3, [r3, #0]
900097da:	6810      	ldr	r0, [r2, #0]
900097dc:	691b      	ldr	r3, [r3, #16]
{
900097de:	b5f0      	push	{r4, r5, r6, r7, lr}
900097e0:	b085      	sub	sp, #20
900097e2:	460c      	mov	r4, r1
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
900097e4:	a901      	add	r1, sp, #4
900097e6:	4798      	blx	r3
900097e8:	2800      	cmp	r0, #0
900097ea:	db40      	blt.n	9000986e <BSP_TS_GetState+0x9e>
    else if(state.TouchDetected != 0U)
900097ec:	9d01      	ldr	r5, [sp, #4]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
900097ee:	4b28      	ldr	r3, [pc, #160]	; (90009890 <BSP_TS_GetState+0xc0>)
    else if(state.TouchDetected != 0U)
900097f0:	b93d      	cbnz	r5, 90009802 <BSP_TS_GetState+0x32>
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
900097f2:	699a      	ldr	r2, [r3, #24]
  int32_t ret = BSP_ERROR_NONE;
900097f4:	4628      	mov	r0, r5
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900097f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      TS_State->TouchDetected = 0U;
900097f8:	6025      	str	r5, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
900097fa:	e9c4 2301 	strd	r2, r3, [r4, #4]
}
900097fe:	b005      	add	sp, #20
90009800:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
90009802:	6899      	ldr	r1, [r3, #8]
90009804:	0708      	lsls	r0, r1, #28
      y_oriented = state.TouchY;
90009806:	e9dd 6202 	ldrd	r6, r2, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
9000980a:	d434      	bmi.n	90009876 <BSP_TS_GetState+0xa6>
      y_oriented = state.TouchY;
9000980c:	4610      	mov	r0, r2
      x_oriented = state.TouchX;
9000980e:	46b4      	mov	ip, r6
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90009810:	691f      	ldr	r7, [r3, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
90009812:	f011 0f02 	tst.w	r1, #2
        x_oriented = Ts_Ctx[Instance].MaxX - state.TouchX - 1UL;
90009816:	bf1c      	itt	ne
90009818:	f107 3cff 	addne.w	ip, r7, #4294967295
9000981c:	ebac 0c06 	subne.w	ip, ip, r6
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90009820:	695e      	ldr	r6, [r3, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
90009822:	0749      	lsls	r1, r1, #29
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009824:	6859      	ldr	r1, [r3, #4]
        y_oriented = Ts_Ctx[Instance].MaxY - state.TouchY;
90009826:	bf48      	it	mi
90009828:	1ab0      	submi	r0, r6, r2
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000982a:	681a      	ldr	r2, [r3, #0]
      TS_State->TouchDetected = state.TouchDetected;
9000982c:	6025      	str	r5, [r4, #0]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
9000982e:	fb02 f20c 	mul.w	r2, r2, ip
        y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
90009832:	6add      	ldr	r5, [r3, #44]	; 0x2c
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009834:	fb00 f101 	mul.w	r1, r0, r1
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90009838:	fbb2 f2f7 	udiv	r2, r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
9000983c:	fbb1 f1f6 	udiv	r1, r1, r6
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
90009840:	699e      	ldr	r6, [r3, #24]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
90009842:	6062      	str	r2, [r4, #4]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90009844:	42b2      	cmp	r2, r6
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
90009846:	60a1      	str	r1, [r4, #8]
        (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
90009848:	bf8c      	ite	hi
9000984a:	1b90      	subhi	r0, r2, r6
9000984c:	1ab0      	subls	r0, r6, r2
          (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
9000984e:	42a9      	cmp	r1, r5
90009850:	bf8c      	ite	hi
90009852:	1b4f      	subhi	r7, r1, r5
90009854:	1a6f      	subls	r7, r5, r1
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009856:	42b8      	cmp	r0, r7
90009858:	bf38      	it	cc
9000985a:	4638      	movcc	r0, r7
9000985c:	68df      	ldr	r7, [r3, #12]
9000985e:	4287      	cmp	r7, r0
  int32_t ret = BSP_ERROR_NONE;
90009860:	f04f 0000 	mov.w	r0, #0
          if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
90009864:	d20a      	bcs.n	9000987c <BSP_TS_GetState+0xac>
            Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
90009866:	619a      	str	r2, [r3, #24]
            Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
90009868:	62d9      	str	r1, [r3, #44]	; 0x2c
}
9000986a:	b005      	add	sp, #20
9000986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      ret = BSP_ERROR_COMPONENT_FAILURE;
9000986e:	f06f 0004 	mvn.w	r0, #4
}
90009872:	b005      	add	sp, #20
90009874:	bdf0      	pop	{r4, r5, r6, r7, pc}
        y_oriented = state.TouchX;
90009876:	4630      	mov	r0, r6
        x_oriented = state.TouchY;
90009878:	4694      	mov	ip, r2
9000987a:	e7c9      	b.n	90009810 <BSP_TS_GetState+0x40>
            TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
9000987c:	e9c4 6501 	strd	r6, r5, [r4, #4]
90009880:	e7bd      	b.n	900097fe <BSP_TS_GetState+0x2e>
    ret = BSP_ERROR_WRONG_PARAM;
90009882:	f06f 0001 	mvn.w	r0, #1
}
90009886:	4770      	bx	lr
90009888:	2400cb44 	.word	0x2400cb44
9000988c:	2400cb00 	.word	0x2400cb00
90009890:	2400cb04 	.word	0x2400cb04

90009894 <SystemInit>:
#endif

extern unsigned int VECTOR_TABLE_LOCATION;

void SystemInit (void)
{
90009894:	b410      	push	{r4}
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
90009896:	4c19      	ldr	r4, [pc, #100]	; (900098fc <SystemInit+0x68>)
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
90009898:	2200      	movs	r2, #0
  RCC->CR |= RCC_CR_HSION;
9000989a:	4b19      	ldr	r3, [pc, #100]	; (90009900 <SystemInit+0x6c>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
9000989c:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
900098a0:	4818      	ldr	r0, [pc, #96]	; (90009904 <SystemInit+0x70>)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
900098a2:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
900098a6:	f8c4 1088 	str.w	r1, [r4, #136]	; 0x88
  RCC->CR |= RCC_CR_HSION;
900098aa:	6819      	ldr	r1, [r3, #0]
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif /* VECT_TAB_SRAM */

#else
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900098ac:	4c16      	ldr	r4, [pc, #88]	; (90009908 <SystemInit+0x74>)
  RCC->CR |= RCC_CR_HSION;
900098ae:	f041 0101 	orr.w	r1, r1, #1
900098b2:	6019      	str	r1, [r3, #0]
  RCC->CFGR = 0x00000000;
900098b4:	611a      	str	r2, [r3, #16]
  RCC->CR &= 0xEAF6ED7FU;
900098b6:	6819      	ldr	r1, [r3, #0]
900098b8:	4008      	ands	r0, r1
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900098ba:	4914      	ldr	r1, [pc, #80]	; (9000990c <SystemInit+0x78>)
  RCC->CR &= 0xEAF6ED7FU;
900098bc:	6018      	str	r0, [r3, #0]
  RCC->D1CFGR = 0x00000000;
900098be:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
900098c0:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
900098c2:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x00000000;
900098c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC->PLLCFGR = 0x00000000;
900098c6:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC->PLL1DIVR = 0x00000000;
900098c8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC->PLL1FRACR = 0x00000000;
900098ca:	635a      	str	r2, [r3, #52]	; 0x34
  RCC->PLL2DIVR = 0x00000000;
900098cc:	639a      	str	r2, [r3, #56]	; 0x38
  RCC->PLL2FRACR = 0x00000000;
900098ce:	63da      	str	r2, [r3, #60]	; 0x3c
  RCC->PLL3DIVR = 0x00000000;
900098d0:	641a      	str	r2, [r3, #64]	; 0x40
  RCC->PLL3FRACR = 0x00000000;
900098d2:	645a      	str	r2, [r3, #68]	; 0x44
  RCC->CR &= 0xFFFBFFFFU;
900098d4:	6818      	ldr	r0, [r3, #0]
900098d6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
900098da:	6018      	str	r0, [r3, #0]
  RCC->CIER = 0x00000000;
900098dc:	661a      	str	r2, [r3, #96]	; 0x60
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
900098de:	6823      	ldr	r3, [r4, #0]
900098e0:	4019      	ands	r1, r3
900098e2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
900098e6:	d203      	bcs.n	900098f0 <SystemInit+0x5c>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
900098e8:	4b09      	ldr	r3, [pc, #36]	; (90009910 <SystemInit+0x7c>)
900098ea:	2201      	movs	r2, #1
900098ec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#elif defined(VECT_TAB_QSPI)
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900098f0:	4a08      	ldr	r2, [pc, #32]	; (90009914 <SystemInit+0x80>)
900098f2:	4b02      	ldr	r3, [pc, #8]	; (900098fc <SystemInit+0x68>)
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
900098f4:	f85d 4b04 	ldr.w	r4, [sp], #4
  SCB->VTOR = (unsigned int)&VECTOR_TABLE_LOCATION; /* Vector Table Relocation in External FLASH */
900098f8:	609a      	str	r2, [r3, #8]
}
900098fa:	4770      	bx	lr
900098fc:	e000ed00 	.word	0xe000ed00
90009900:	58024400 	.word	0x58024400
90009904:	eaf6ed7f 	.word	0xeaf6ed7f
90009908:	5c001000 	.word	0x5c001000
9000990c:	ffff0000 	.word	0xffff0000
90009910:	51008000 	.word	0x51008000
90009914:	90000000 	.word	0x90000000

90009918 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
90009918:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000991a:	2003      	movs	r0, #3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000991c:	4c12      	ldr	r4, [pc, #72]	; (90009968 <HAL_Init+0x50>)
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
9000991e:	f000 f843 	bl	900099a8 <HAL_NVIC_SetPriorityGrouping>
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009922:	f003 fecd 	bl	9000d6c0 <HAL_RCC_GetSysClockFreq>
90009926:	4b11      	ldr	r3, [pc, #68]	; (9000996c <HAL_Init+0x54>)
90009928:	4911      	ldr	r1, [pc, #68]	; (90009970 <HAL_Init+0x58>)
9000992a:	699a      	ldr	r2, [r3, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000992c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000992e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009932:	f003 030f 	and.w	r3, r3, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009936:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009938:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000993a:	f002 021f 	and.w	r2, r2, #31
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000993e:	490d      	ldr	r1, [pc, #52]	; (90009974 <HAL_Init+0x5c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009940:	f003 031f 	and.w	r3, r3, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
90009944:	40d0      	lsrs	r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
90009946:	fa20 f303 	lsr.w	r3, r0, r3
  SystemCoreClock = common_system_clock;
9000994a:	6008      	str	r0, [r1, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
9000994c:	2000      	movs	r0, #0
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000994e:	6023      	str	r3, [r4, #0]
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
90009950:	f7fb fa0e 	bl	90004d70 <HAL_InitTick>
90009954:	b110      	cbz	r0, 9000995c <HAL_Init+0x44>
  {
    return HAL_ERROR;
90009956:	2401      	movs	r4, #1
  /* Init the low level hardware */
  HAL_MspInit();

  /* Return function status */
  return HAL_OK;
}
90009958:	4620      	mov	r0, r4
9000995a:	bd10      	pop	{r4, pc}
9000995c:	4604      	mov	r4, r0
  HAL_MspInit();
9000995e:	f7fa ff59 	bl	90004814 <HAL_MspInit>
}
90009962:	4620      	mov	r0, r4
90009964:	bd10      	pop	{r4, pc}
90009966:	bf00      	nop
90009968:	24000058 	.word	0x24000058
9000996c:	58024400 	.word	0x58024400
90009970:	9002abc4 	.word	0x9002abc4
90009974:	24000054 	.word	0x24000054

90009978 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
90009978:	4a03      	ldr	r2, [pc, #12]	; (90009988 <HAL_IncTick+0x10>)
9000997a:	4b04      	ldr	r3, [pc, #16]	; (9000998c <HAL_IncTick+0x14>)
9000997c:	6811      	ldr	r1, [r2, #0]
9000997e:	781b      	ldrb	r3, [r3, #0]
90009980:	440b      	add	r3, r1
90009982:	6013      	str	r3, [r2, #0]
}
90009984:	4770      	bx	lr
90009986:	bf00      	nop
90009988:	2400cb48 	.word	0x2400cb48
9000998c:	2400005c 	.word	0x2400005c

90009990 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
90009990:	4b01      	ldr	r3, [pc, #4]	; (90009998 <HAL_GetTick+0x8>)
90009992:	6818      	ldr	r0, [r3, #0]
}
90009994:	4770      	bx	lr
90009996:	bf00      	nop
90009998:	2400cb48 	.word	0x2400cb48

9000999c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
9000999c:	4b01      	ldr	r3, [pc, #4]	; (900099a4 <HAL_GetREVID+0x8>)
9000999e:	6818      	ldr	r0, [r3, #0]
}
900099a0:	0c00      	lsrs	r0, r0, #16
900099a2:	4770      	bx	lr
900099a4:	5c001000 	.word	0x5c001000

900099a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900099a8:	4906      	ldr	r1, [pc, #24]	; (900099c4 <HAL_NVIC_SetPriorityGrouping+0x1c>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900099aa:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900099ae:	0200      	lsls	r0, r0, #8
  reg_value  =  (reg_value                                   |
900099b0:	4b05      	ldr	r3, [pc, #20]	; (900099c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
900099b2:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
900099b4:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
900099b8:	ea02 020c 	and.w	r2, r2, ip
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
900099bc:	4310      	orrs	r0, r2
  reg_value  =  (reg_value                                   |
900099be:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
900099c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
900099c2:	4770      	bx	lr
900099c4:	e000ed00 	.word	0xe000ed00
900099c8:	05fa0000 	.word	0x05fa0000

900099cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
900099cc:	4b1b      	ldr	r3, [pc, #108]	; (90009a3c <HAL_NVIC_SetPriority+0x70>)
900099ce:	68db      	ldr	r3, [r3, #12]
900099d0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
900099d4:	b500      	push	{lr}
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900099d6:	f1c3 0e07 	rsb	lr, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900099da:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
900099de:	f1be 0f04 	cmp.w	lr, #4
900099e2:	bf28      	it	cs
900099e4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
900099e8:	f1bc 0f06 	cmp.w	ip, #6
900099ec:	d91a      	bls.n	90009a24 <HAL_NVIC_SetPriority+0x58>
900099ee:	3b03      	subs	r3, #3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
900099f0:	f04f 3cff 	mov.w	ip, #4294967295
900099f4:	fa0c fc03 	lsl.w	ip, ip, r3
900099f8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
900099fc:	f04f 3cff 	mov.w	ip, #4294967295
  if ((int32_t)(IRQn) >= 0)
90009a00:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
90009a02:	fa0c fc0e 	lsl.w	ip, ip, lr
90009a06:	ea21 010c 	bic.w	r1, r1, ip
90009a0a:	fa01 f103 	lsl.w	r1, r1, r3
90009a0e:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
90009a12:	db0a      	blt.n	90009a2a <HAL_NVIC_SetPriority+0x5e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90009a14:	0109      	lsls	r1, r1, #4
90009a16:	4b0a      	ldr	r3, [pc, #40]	; (90009a40 <HAL_NVIC_SetPriority+0x74>)
90009a18:	b2c9      	uxtb	r1, r1
90009a1a:	4403      	add	r3, r0
90009a1c:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
90009a20:	f85d fb04 	ldr.w	pc, [sp], #4
90009a24:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
90009a26:	4613      	mov	r3, r2
90009a28:	e7e8      	b.n	900099fc <HAL_NVIC_SetPriority+0x30>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90009a2a:	f000 000f 	and.w	r0, r0, #15
90009a2e:	0109      	lsls	r1, r1, #4
90009a30:	4b04      	ldr	r3, [pc, #16]	; (90009a44 <HAL_NVIC_SetPriority+0x78>)
90009a32:	b2c9      	uxtb	r1, r1
90009a34:	4403      	add	r3, r0
90009a36:	7619      	strb	r1, [r3, #24]
90009a38:	f85d fb04 	ldr.w	pc, [sp], #4
90009a3c:	e000ed00 	.word	0xe000ed00
90009a40:	e000e100 	.word	0xe000e100
90009a44:	e000ecfc 	.word	0xe000ecfc

90009a48 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009a48:	2800      	cmp	r0, #0
90009a4a:	db07      	blt.n	90009a5c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009a4c:	2301      	movs	r3, #1
90009a4e:	f000 011f 	and.w	r1, r0, #31
90009a52:	4a03      	ldr	r2, [pc, #12]	; (90009a60 <HAL_NVIC_EnableIRQ+0x18>)
90009a54:	0940      	lsrs	r0, r0, #5
90009a56:	408b      	lsls	r3, r1
90009a58:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
90009a5c:	4770      	bx	lr
90009a5e:	bf00      	nop
90009a60:	e000e100 	.word	0xe000e100

90009a64 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
90009a64:	2800      	cmp	r0, #0
90009a66:	db0d      	blt.n	90009a84 <HAL_NVIC_DisableIRQ+0x20>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
90009a68:	0943      	lsrs	r3, r0, #5
90009a6a:	2201      	movs	r2, #1
90009a6c:	f000 001f 	and.w	r0, r0, #31
90009a70:	4905      	ldr	r1, [pc, #20]	; (90009a88 <HAL_NVIC_DisableIRQ+0x24>)
90009a72:	3320      	adds	r3, #32
90009a74:	fa02 f000 	lsl.w	r0, r2, r0
90009a78:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
90009a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009a80:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
90009a84:	4770      	bx	lr
90009a86:	bf00      	nop
90009a88:	e000e100 	.word	0xe000e100

90009a8c <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
90009a8c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009a90:	4b04      	ldr	r3, [pc, #16]	; (90009aa4 <HAL_MPU_Disable+0x18>)

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
90009a92:	2100      	movs	r1, #0
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
90009a94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009a96:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90009a9a:	625a      	str	r2, [r3, #36]	; 0x24
  MPU->CTRL = 0;
90009a9c:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
}
90009aa0:	4770      	bx	lr
90009aa2:	bf00      	nop
90009aa4:	e000ed00 	.word	0xe000ed00

90009aa8 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
90009aa8:	4b06      	ldr	r3, [pc, #24]	; (90009ac4 <HAL_MPU_Enable+0x1c>)
90009aaa:	f040 0001 	orr.w	r0, r0, #1
90009aae:	f8c3 0094 	str.w	r0, [r3, #148]	; 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
90009ab2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90009ab4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
90009ab8:	625a      	str	r2, [r3, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
90009aba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
90009abe:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
90009ac2:	4770      	bx	lr
90009ac4:	e000ed00 	.word	0xe000ed00

90009ac8 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
90009ac8:	4a17      	ldr	r2, [pc, #92]	; (90009b28 <HAL_MPU_ConfigRegion+0x60>)
90009aca:	7843      	ldrb	r3, [r0, #1]
90009acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

  if ((MPU_Init->Enable) != 0UL)
90009ad0:	7801      	ldrb	r1, [r0, #0]
90009ad2:	b321      	cbz	r1, 90009b1e <HAL_MPU_ConfigRegion+0x56>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
90009ad4:	6843      	ldr	r3, [r0, #4]
{
90009ad6:	b500      	push	{lr}
    MPU->RBAR = MPU_Init->BaseAddress;
90009ad8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009adc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009ade:	f890 c00c 	ldrb.w	ip, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
90009ae2:	061b      	lsls	r3, r3, #24
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
90009ae4:	f890 e00f 	ldrb.w	lr, [r0, #15]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009ae8:	ea43 730c 	orr.w	r3, r3, ip, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
90009aec:	f890 c00a 	ldrb.w	ip, [r0, #10]
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009af0:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
90009af2:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009af4:	ea43 43cc 	orr.w	r3, r3, ip, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
90009af8:	f890 c00d 	ldrb.w	ip, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009afc:	ea43 438c 	orr.w	r3, r3, ip, lsl #18
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
90009b00:	f890 c009 	ldrb.w	ip, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
90009b04:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
90009b08:	7a01      	ldrb	r1, [r0, #8]
90009b0a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
90009b0e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
90009b12:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
90009b16:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
90009b1a:	f85d fb04 	ldr.w	pc, [sp], #4
    MPU->RBAR = 0x00;
90009b1e:	f8c2 109c 	str.w	r1, [r2, #156]	; 0x9c
    MPU->RASR = 0x00;
90009b22:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
90009b26:	4770      	bx	lr
90009b28:	e000ed00 	.word	0xe000ed00

90009b2c <HAL_CRC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
90009b2c:	2800      	cmp	r0, #0
90009b2e:	d036      	beq.n	90009b9e <HAL_CRC_Init+0x72>
{
90009b30:	b510      	push	{r4, lr}
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
90009b32:	7f43      	ldrb	r3, [r0, #29]
90009b34:	4604      	mov	r4, r0
90009b36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
90009b3a:	b363      	cbz	r3, 90009b96 <HAL_CRC_Init+0x6a>
    hcrc->Lock = HAL_UNLOCKED;
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
90009b3c:	2202      	movs	r2, #2

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009b3e:	7923      	ldrb	r3, [r4, #4]
  hcrc->State = HAL_CRC_STATE_BUSY;
90009b40:	7762      	strb	r2, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
90009b42:	b9f3      	cbnz	r3, 90009b82 <HAL_CRC_Init+0x56>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
90009b44:	6823      	ldr	r3, [r4, #0]
90009b46:	4a17      	ldr	r2, [pc, #92]	; (90009ba4 <HAL_CRC_Init+0x78>)
90009b48:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
90009b4a:	689a      	ldr	r2, [r3, #8]
90009b4c:	f022 0218 	bic.w	r2, r2, #24
90009b50:	609a      	str	r2, [r3, #8]
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
90009b52:	7962      	ldrb	r2, [r4, #5]
90009b54:	b18a      	cbz	r2, 90009b7a <HAL_CRC_Init+0x4e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
90009b56:	6922      	ldr	r2, [r4, #16]
90009b58:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009b5a:	6899      	ldr	r1, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b5c:	e9d4 2005 	ldrd	r2, r0, [r4, #20]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
90009b60:	f021 0160 	bic.w	r1, r1, #96	; 0x60
90009b64:	4311      	orrs	r1, r2
90009b66:	6099      	str	r1, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
90009b68:	2101      	movs	r1, #1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b6a:	689a      	ldr	r2, [r3, #8]
90009b6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
90009b70:	4302      	orrs	r2, r0

  /* Return function status */
  return HAL_OK;
90009b72:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
90009b74:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
90009b76:	7761      	strb	r1, [r4, #29]
}
90009b78:	bd10      	pop	{r4, pc}
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009b7a:	f04f 32ff 	mov.w	r2, #4294967295
90009b7e:	611a      	str	r2, [r3, #16]
90009b80:	e7eb      	b.n	90009b5a <HAL_CRC_Init+0x2e>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
90009b82:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
90009b86:	4620      	mov	r0, r4
90009b88:	f000 f80e 	bl	90009ba8 <HAL_CRCEx_Polynomial_Set>
90009b8c:	b908      	cbnz	r0, 90009b92 <HAL_CRC_Init+0x66>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
90009b8e:	6823      	ldr	r3, [r4, #0]
90009b90:	e7df      	b.n	90009b52 <HAL_CRC_Init+0x26>
    return HAL_ERROR;
90009b92:	2001      	movs	r0, #1
}
90009b94:	bd10      	pop	{r4, pc}
    hcrc->Lock = HAL_UNLOCKED;
90009b96:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
90009b98:	f7fa fe56 	bl	90004848 <HAL_CRC_MspInit>
90009b9c:	e7ce      	b.n	90009b3c <HAL_CRC_Init+0x10>
    return HAL_ERROR;
90009b9e:	2001      	movs	r0, #1
}
90009ba0:	4770      	bx	lr
90009ba2:	bf00      	nop
90009ba4:	04c11db7 	.word	0x04c11db7

90009ba8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
90009ba8:	07cb      	lsls	r3, r1, #31
90009baa:	d51a      	bpl.n	90009be2 <HAL_CRCEx_Polynomial_Set+0x3a>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009bac:	231e      	movs	r3, #30
{
90009bae:	b410      	push	{r4}
90009bb0:	e001      	b.n	90009bb6 <HAL_CRCEx_Polynomial_Set+0xe>
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
90009bb2:	3b01      	subs	r3, #1
90009bb4:	d317      	bcc.n	90009be6 <HAL_CRCEx_Polynomial_Set+0x3e>
90009bb6:	fa21 fc03 	lsr.w	ip, r1, r3
90009bba:	f01c 0f01 	tst.w	ip, #1
90009bbe:	d0f8      	beq.n	90009bb2 <HAL_CRCEx_Polynomial_Set+0xa>
    {
    }

    switch (PolyLength)
90009bc0:	2a18      	cmp	r2, #24
90009bc2:	d811      	bhi.n	90009be8 <HAL_CRCEx_Polynomial_Set+0x40>
90009bc4:	e8df f002 	tbb	[pc, r2]
90009bc8:	10101016 	.word	0x10101016
90009bcc:	10101010 	.word	0x10101010
90009bd0:	10101024 	.word	0x10101024
90009bd4:	10101010 	.word	0x10101010
90009bd8:	10101021 	.word	0x10101021
90009bdc:	10101010 	.word	0x10101010
90009be0:	14          	.byte	0x14
90009be1:	00          	.byte	0x00
    status =  HAL_ERROR;
90009be2:	2001      	movs	r0, #1
    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
}
90009be4:	4770      	bx	lr
    switch (PolyLength)
90009be6:	b12a      	cbz	r2, 90009bf4 <HAL_CRCEx_Polynomial_Set+0x4c>
        status =  HAL_ERROR;
90009be8:	2001      	movs	r0, #1
}
90009bea:	f85d 4b04 	ldr.w	r4, [sp], #4
90009bee:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_7B)
90009bf0:	2b06      	cmp	r3, #6
90009bf2:	d8f9      	bhi.n	90009be8 <HAL_CRCEx_Polynomial_Set+0x40>
    WRITE_REG(hcrc->Instance->POL, Pol);
90009bf4:	6804      	ldr	r4, [r0, #0]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009bf6:	2000      	movs	r0, #0
    WRITE_REG(hcrc->Instance->POL, Pol);
90009bf8:	6161      	str	r1, [r4, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
90009bfa:	68a3      	ldr	r3, [r4, #8]
90009bfc:	f023 0318 	bic.w	r3, r3, #24
90009c00:	431a      	orrs	r2, r3
90009c02:	60a2      	str	r2, [r4, #8]
}
90009c04:	f85d 4b04 	ldr.w	r4, [sp], #4
90009c08:	4770      	bx	lr
        if (msb >= HAL_CRC_LENGTH_8B)
90009c0a:	2b07      	cmp	r3, #7
90009c0c:	d9f2      	bls.n	90009bf4 <HAL_CRCEx_Polynomial_Set+0x4c>
90009c0e:	e7eb      	b.n	90009be8 <HAL_CRCEx_Polynomial_Set+0x40>
        if (msb >= HAL_CRC_LENGTH_16B)
90009c10:	2b0f      	cmp	r3, #15
90009c12:	d9ef      	bls.n	90009bf4 <HAL_CRCEx_Polynomial_Set+0x4c>
90009c14:	e7e8      	b.n	90009be8 <HAL_CRCEx_Polynomial_Set+0x40>
90009c16:	bf00      	nop

90009c18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
90009c18:	b570      	push	{r4, r5, r6, lr}
90009c1a:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
90009c1c:	f7ff feb8 	bl	90009990 <HAL_GetTick>

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
90009c20:	2d00      	cmp	r5, #0
90009c22:	f000 8124 	beq.w	90009e6e <HAL_DMA_Abort+0x256>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
90009c26:	f895 3035 	ldrb.w	r3, [r5, #53]	; 0x35
90009c2a:	2b02      	cmp	r3, #2
90009c2c:	f040 80dd 	bne.w	90009dea <HAL_DMA_Abort+0x1d2>
    return HAL_ERROR;
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90009c30:	682c      	ldr	r4, [r5, #0]
90009c32:	4606      	mov	r6, r0
90009c34:	4b8f      	ldr	r3, [pc, #572]	; (90009e74 <HAL_DMA_Abort+0x25c>)
90009c36:	4890      	ldr	r0, [pc, #576]	; (90009e78 <HAL_DMA_Abort+0x260>)
90009c38:	4a90      	ldr	r2, [pc, #576]	; (90009e7c <HAL_DMA_Abort+0x264>)
90009c3a:	4284      	cmp	r4, r0
90009c3c:	bf18      	it	ne
90009c3e:	429c      	cmpne	r4, r3
90009c40:	f100 0030 	add.w	r0, r0, #48	; 0x30
90009c44:	498e      	ldr	r1, [pc, #568]	; (90009e80 <HAL_DMA_Abort+0x268>)
90009c46:	bf0c      	ite	eq
90009c48:	2301      	moveq	r3, #1
90009c4a:	2300      	movne	r3, #0
90009c4c:	4284      	cmp	r4, r0
90009c4e:	bf08      	it	eq
90009c50:	f043 0301 	orreq.w	r3, r3, #1
90009c54:	3018      	adds	r0, #24
90009c56:	4284      	cmp	r4, r0
90009c58:	bf08      	it	eq
90009c5a:	f043 0301 	orreq.w	r3, r3, #1
90009c5e:	3018      	adds	r0, #24
90009c60:	4284      	cmp	r4, r0
90009c62:	bf08      	it	eq
90009c64:	f043 0301 	orreq.w	r3, r3, #1
90009c68:	3018      	adds	r0, #24
90009c6a:	4284      	cmp	r4, r0
90009c6c:	bf08      	it	eq
90009c6e:	f043 0301 	orreq.w	r3, r3, #1
90009c72:	f500 7056 	add.w	r0, r0, #856	; 0x358
90009c76:	4284      	cmp	r4, r0
90009c78:	bf08      	it	eq
90009c7a:	f043 0301 	orreq.w	r3, r3, #1
90009c7e:	3018      	adds	r0, #24
90009c80:	4284      	cmp	r4, r0
90009c82:	bf08      	it	eq
90009c84:	f043 0301 	orreq.w	r3, r3, #1
90009c88:	3018      	adds	r0, #24
90009c8a:	4284      	cmp	r4, r0
90009c8c:	bf08      	it	eq
90009c8e:	f043 0301 	orreq.w	r3, r3, #1
90009c92:	3018      	adds	r0, #24
90009c94:	4284      	cmp	r4, r0
90009c96:	bf08      	it	eq
90009c98:	f043 0301 	orreq.w	r3, r3, #1
90009c9c:	3018      	adds	r0, #24
90009c9e:	4284      	cmp	r4, r0
90009ca0:	bf08      	it	eq
90009ca2:	f043 0301 	orreq.w	r3, r3, #1
90009ca6:	3018      	adds	r0, #24
90009ca8:	4284      	cmp	r4, r0
90009caa:	bf08      	it	eq
90009cac:	f043 0301 	orreq.w	r3, r3, #1
90009cb0:	3018      	adds	r0, #24
90009cb2:	4284      	cmp	r4, r0
90009cb4:	bf08      	it	eq
90009cb6:	f043 0301 	orreq.w	r3, r3, #1
90009cba:	3018      	adds	r0, #24
90009cbc:	4284      	cmp	r4, r0
90009cbe:	bf08      	it	eq
90009cc0:	f043 0301 	orreq.w	r3, r3, #1
90009cc4:	428c      	cmp	r4, r1
90009cc6:	bf18      	it	ne
90009cc8:	4294      	cmpne	r4, r2
90009cca:	bf0c      	ite	eq
90009ccc:	2201      	moveq	r2, #1
90009cce:	2200      	movne	r2, #0
90009cd0:	d002      	beq.n	90009cd8 <HAL_DMA_Abort+0xc0>
90009cd2:	2b00      	cmp	r3, #0
90009cd4:	f000 8090 	beq.w	90009df8 <HAL_DMA_Abort+0x1e0>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
90009cd8:	6821      	ldr	r1, [r4, #0]
90009cda:	f021 011e 	bic.w	r1, r1, #30
90009cde:	6021      	str	r1, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
90009ce0:	6961      	ldr	r1, [r4, #20]
90009ce2:	f021 0180 	bic.w	r1, r1, #128	; 0x80
90009ce6:	6161      	str	r1, [r4, #20]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009ce8:	2a00      	cmp	r2, #0
90009cea:	f000 80b0 	beq.w	90009e4e <HAL_DMA_Abort+0x236>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
90009cee:	6e2a      	ldr	r2, [r5, #96]	; 0x60
90009cf0:	6813      	ldr	r3, [r2, #0]
90009cf2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
90009cf6:	6013      	str	r3, [r2, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
90009cf8:	6823      	ldr	r3, [r4, #0]
90009cfa:	f023 0301 	bic.w	r3, r3, #1
90009cfe:	6023      	str	r3, [r4, #0]
90009d00:	e005      	b.n	90009d0e <HAL_DMA_Abort+0xf6>

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
90009d02:	f7ff fe45 	bl	90009990 <HAL_GetTick>
90009d06:	1b83      	subs	r3, r0, r6
90009d08:	2b05      	cmp	r3, #5
90009d0a:	f200 80a6 	bhi.w	90009e5a <HAL_DMA_Abort+0x242>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
90009d0e:	6823      	ldr	r3, [r4, #0]
90009d10:	07db      	lsls	r3, r3, #31
90009d12:	d4f6      	bmi.n	90009d02 <HAL_DMA_Abort+0xea>
        return HAL_ERROR;
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90009d14:	682a      	ldr	r2, [r5, #0]
90009d16:	4b57      	ldr	r3, [pc, #348]	; (90009e74 <HAL_DMA_Abort+0x25c>)
90009d18:	4857      	ldr	r0, [pc, #348]	; (90009e78 <HAL_DMA_Abort+0x260>)
90009d1a:	495a      	ldr	r1, [pc, #360]	; (90009e84 <HAL_DMA_Abort+0x26c>)
90009d1c:	4282      	cmp	r2, r0
90009d1e:	bf18      	it	ne
90009d20:	429a      	cmpne	r2, r3
90009d22:	f100 0048 	add.w	r0, r0, #72	; 0x48
90009d26:	bf0c      	ite	eq
90009d28:	2301      	moveq	r3, #1
90009d2a:	2300      	movne	r3, #0
90009d2c:	428a      	cmp	r2, r1
90009d2e:	bf08      	it	eq
90009d30:	f043 0301 	orreq.w	r3, r3, #1
90009d34:	3130      	adds	r1, #48	; 0x30
90009d36:	4282      	cmp	r2, r0
90009d38:	bf08      	it	eq
90009d3a:	f043 0301 	orreq.w	r3, r3, #1
90009d3e:	3030      	adds	r0, #48	; 0x30
90009d40:	428a      	cmp	r2, r1
90009d42:	bf08      	it	eq
90009d44:	f043 0301 	orreq.w	r3, r3, #1
90009d48:	f501 715c 	add.w	r1, r1, #880	; 0x370
90009d4c:	4282      	cmp	r2, r0
90009d4e:	bf08      	it	eq
90009d50:	f043 0301 	orreq.w	r3, r3, #1
90009d54:	f500 705c 	add.w	r0, r0, #880	; 0x370
90009d58:	428a      	cmp	r2, r1
90009d5a:	bf08      	it	eq
90009d5c:	f043 0301 	orreq.w	r3, r3, #1
90009d60:	3130      	adds	r1, #48	; 0x30
90009d62:	4282      	cmp	r2, r0
90009d64:	bf08      	it	eq
90009d66:	f043 0301 	orreq.w	r3, r3, #1
90009d6a:	3030      	adds	r0, #48	; 0x30
90009d6c:	428a      	cmp	r2, r1
90009d6e:	bf08      	it	eq
90009d70:	f043 0301 	orreq.w	r3, r3, #1
90009d74:	3130      	adds	r1, #48	; 0x30
90009d76:	4282      	cmp	r2, r0
90009d78:	bf08      	it	eq
90009d7a:	f043 0301 	orreq.w	r3, r3, #1
90009d7e:	3030      	adds	r0, #48	; 0x30
90009d80:	428a      	cmp	r2, r1
90009d82:	bf08      	it	eq
90009d84:	f043 0301 	orreq.w	r3, r3, #1
90009d88:	3130      	adds	r1, #48	; 0x30
90009d8a:	4282      	cmp	r2, r0
90009d8c:	bf08      	it	eq
90009d8e:	f043 0301 	orreq.w	r3, r3, #1
90009d92:	428a      	cmp	r2, r1
90009d94:	bf08      	it	eq
90009d96:	f043 0301 	orreq.w	r3, r3, #1
90009d9a:	3118      	adds	r1, #24
90009d9c:	428a      	cmp	r2, r1
90009d9e:	bf08      	it	eq
90009da0:	f043 0301 	orreq.w	r3, r3, #1
90009da4:	b933      	cbnz	r3, 90009db4 <HAL_DMA_Abort+0x19c>
90009da6:	f5a1 6195 	sub.w	r1, r1, #1192	; 0x4a8
90009daa:	4b35      	ldr	r3, [pc, #212]	; (90009e80 <HAL_DMA_Abort+0x268>)
90009dac:	429a      	cmp	r2, r3
90009dae:	bf18      	it	ne
90009db0:	428a      	cmpne	r2, r1
90009db2:	d16f      	bne.n	90009e94 <HAL_DMA_Abort+0x27c>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90009db4:	6dea      	ldr	r2, [r5, #92]	; 0x5c
90009db6:	233f      	movs	r3, #63	; 0x3f
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
90009db8:	6da9      	ldr	r1, [r5, #88]	; 0x58
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
90009dba:	f002 021f 	and.w	r2, r2, #31
90009dbe:	4093      	lsls	r3, r2
90009dc0:	608b      	str	r3, [r1, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;

      if(hdma->DMAmuxRequestGen != 0U)
90009dc2:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
90009dc4:	e9d5 2119 	ldrd	r2, r1, [r5, #100]	; 0x64
90009dc8:	6051      	str	r1, [r2, #4]
      if(hdma->DMAmuxRequestGen != 0U)
90009dca:	b133      	cbz	r3, 90009dda <HAL_DMA_Abort+0x1c2>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
90009dcc:	681a      	ldr	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90009dce:	e9d5 101c 	ldrd	r1, r0, [r5, #112]	; 0x70
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
90009dd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90009dd6:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
90009dd8:	6048      	str	r0, [r1, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
90009dda:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_READY;
90009ddc:	2201      	movs	r2, #1
  }

  return HAL_OK;
90009dde:	4618      	mov	r0, r3
    hdma->State = HAL_DMA_STATE_READY;
90009de0:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
    __HAL_UNLOCK(hdma);
90009de4:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
90009de8:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90009dea:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
90009dec:	2300      	movs	r3, #0
    return HAL_ERROR;
90009dee:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90009df0:	656a      	str	r2, [r5, #84]	; 0x54
    __HAL_UNLOCK(hdma);
90009df2:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
}
90009df6:	bd70      	pop	{r4, r5, r6, pc}
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90009df8:	6822      	ldr	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009dfa:	4923      	ldr	r1, [pc, #140]	; (90009e88 <HAL_DMA_Abort+0x270>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90009dfc:	f022 020e 	bic.w	r2, r2, #14
90009e00:	6022      	str	r2, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009e02:	4a22      	ldr	r2, [pc, #136]	; (90009e8c <HAL_DMA_Abort+0x274>)
90009e04:	428c      	cmp	r4, r1
90009e06:	bf18      	it	ne
90009e08:	4294      	cmpne	r4, r2
90009e0a:	f101 0128 	add.w	r1, r1, #40	; 0x28
90009e0e:	bf0c      	ite	eq
90009e10:	2201      	moveq	r2, #1
90009e12:	2200      	movne	r2, #0
90009e14:	428c      	cmp	r4, r1
90009e16:	bf08      	it	eq
90009e18:	f042 0201 	orreq.w	r2, r2, #1
90009e1c:	3114      	adds	r1, #20
90009e1e:	428c      	cmp	r4, r1
90009e20:	bf08      	it	eq
90009e22:	f042 0201 	orreq.w	r2, r2, #1
90009e26:	3114      	adds	r1, #20
90009e28:	428c      	cmp	r4, r1
90009e2a:	bf08      	it	eq
90009e2c:	f042 0201 	orreq.w	r2, r2, #1
90009e30:	3114      	adds	r1, #20
90009e32:	428c      	cmp	r4, r1
90009e34:	bf08      	it	eq
90009e36:	f042 0201 	orreq.w	r2, r2, #1
90009e3a:	3114      	adds	r1, #20
90009e3c:	428c      	cmp	r4, r1
90009e3e:	bf08      	it	eq
90009e40:	f042 0201 	orreq.w	r2, r2, #1
90009e44:	b91a      	cbnz	r2, 90009e4e <HAL_DMA_Abort+0x236>
90009e46:	4a12      	ldr	r2, [pc, #72]	; (90009e90 <HAL_DMA_Abort+0x278>)
90009e48:	4294      	cmp	r4, r2
90009e4a:	f47f af55 	bne.w	90009cf8 <HAL_DMA_Abort+0xe0>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
90009e4e:	6e29      	ldr	r1, [r5, #96]	; 0x60
90009e50:	680a      	ldr	r2, [r1, #0]
90009e52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
90009e56:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
90009e58:	e74e      	b.n	90009cf8 <HAL_DMA_Abort+0xe0>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90009e5a:	2120      	movs	r1, #32
        hdma->State = HAL_DMA_STATE_ERROR;
90009e5c:	2203      	movs	r2, #3
        __HAL_UNLOCK(hdma);
90009e5e:	2300      	movs	r3, #0
        return HAL_ERROR;
90009e60:	2001      	movs	r0, #1
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
90009e62:	6569      	str	r1, [r5, #84]	; 0x54
        __HAL_UNLOCK(hdma);
90009e64:	f885 3034 	strb.w	r3, [r5, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_ERROR;
90009e68:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
}
90009e6c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
90009e6e:	2001      	movs	r0, #1
}
90009e70:	bd70      	pop	{r4, r5, r6, pc}
90009e72:	bf00      	nop
90009e74:	40020058 	.word	0x40020058
90009e78:	40020040 	.word	0x40020040
90009e7c:	40020010 	.word	0x40020010
90009e80:	40020028 	.word	0x40020028
90009e84:	40020070 	.word	0x40020070
90009e88:	58025408 	.word	0x58025408
90009e8c:	5802541c 	.word	0x5802541c
90009e90:	58025494 	.word	0x58025494
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90009e94:	6de8      	ldr	r0, [r5, #92]	; 0x5c
90009e96:	2101      	movs	r1, #1
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009e98:	4b16      	ldr	r3, [pc, #88]	; (90009ef4 <HAL_DMA_Abort+0x2dc>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90009e9a:	f000 001f 	and.w	r0, r0, #31
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009e9e:	4c16      	ldr	r4, [pc, #88]	; (90009ef8 <HAL_DMA_Abort+0x2e0>)
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90009ea0:	4081      	lsls	r1, r0
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009ea2:	42a2      	cmp	r2, r4
90009ea4:	bf18      	it	ne
90009ea6:	429a      	cmpne	r2, r3
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
90009ea8:	6da8      	ldr	r0, [r5, #88]	; 0x58
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009eaa:	bf0c      	ite	eq
90009eac:	2301      	moveq	r3, #1
90009eae:	2300      	movne	r3, #0
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
90009eb0:	6041      	str	r1, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009eb2:	4812      	ldr	r0, [pc, #72]	; (90009efc <HAL_DMA_Abort+0x2e4>)
90009eb4:	4912      	ldr	r1, [pc, #72]	; (90009f00 <HAL_DMA_Abort+0x2e8>)
90009eb6:	4282      	cmp	r2, r0
90009eb8:	bf08      	it	eq
90009eba:	f043 0301 	orreq.w	r3, r3, #1
90009ebe:	3028      	adds	r0, #40	; 0x28
90009ec0:	428a      	cmp	r2, r1
90009ec2:	bf08      	it	eq
90009ec4:	f043 0301 	orreq.w	r3, r3, #1
90009ec8:	3128      	adds	r1, #40	; 0x28
90009eca:	4282      	cmp	r2, r0
90009ecc:	bf08      	it	eq
90009ece:	f043 0301 	orreq.w	r3, r3, #1
90009ed2:	428a      	cmp	r2, r1
90009ed4:	bf08      	it	eq
90009ed6:	f043 0301 	orreq.w	r3, r3, #1
90009eda:	3114      	adds	r1, #20
90009edc:	428a      	cmp	r2, r1
90009ede:	bf08      	it	eq
90009ee0:	f043 0301 	orreq.w	r3, r3, #1
90009ee4:	2b00      	cmp	r3, #0
90009ee6:	f47f af6c 	bne.w	90009dc2 <HAL_DMA_Abort+0x1aa>
90009eea:	4b06      	ldr	r3, [pc, #24]	; (90009f04 <HAL_DMA_Abort+0x2ec>)
90009eec:	429a      	cmp	r2, r3
90009eee:	f43f af68 	beq.w	90009dc2 <HAL_DMA_Abort+0x1aa>
90009ef2:	e772      	b.n	90009dda <HAL_DMA_Abort+0x1c2>
90009ef4:	5802541c 	.word	0x5802541c
90009ef8:	58025408 	.word	0x58025408
90009efc:	58025430 	.word	0x58025430
90009f00:	58025444 	.word	0x58025444
90009f04:	58025494 	.word	0x58025494

90009f08 <HAL_DMA_Abort_IT>:
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
90009f08:	2800      	cmp	r0, #0
90009f0a:	d05f      	beq.n	90009fcc <HAL_DMA_Abort_IT+0xc4>
{
90009f0c:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
90009f0e:	f890 2035 	ldrb.w	r2, [r0, #53]	; 0x35
90009f12:	4603      	mov	r3, r0
90009f14:	2a02      	cmp	r2, #2
90009f16:	d155      	bne.n	90009fc4 <HAL_DMA_Abort_IT+0xbc>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
90009f18:	6801      	ldr	r1, [r0, #0]
90009f1a:	4a57      	ldr	r2, [pc, #348]	; (9000a078 <HAL_DMA_Abort_IT+0x170>)
90009f1c:	4291      	cmp	r1, r2
90009f1e:	d048      	beq.n	90009fb2 <HAL_DMA_Abort_IT+0xaa>
90009f20:	3218      	adds	r2, #24
90009f22:	4291      	cmp	r1, r2
90009f24:	d045      	beq.n	90009fb2 <HAL_DMA_Abort_IT+0xaa>
90009f26:	3230      	adds	r2, #48	; 0x30
90009f28:	4c54      	ldr	r4, [pc, #336]	; (9000a07c <HAL_DMA_Abort_IT+0x174>)
90009f2a:	4855      	ldr	r0, [pc, #340]	; (9000a080 <HAL_DMA_Abort_IT+0x178>)
90009f2c:	42a1      	cmp	r1, r4
90009f2e:	bf18      	it	ne
90009f30:	4291      	cmpne	r1, r2
90009f32:	f104 0448 	add.w	r4, r4, #72	; 0x48
90009f36:	bf0c      	ite	eq
90009f38:	2201      	moveq	r2, #1
90009f3a:	2200      	movne	r2, #0
90009f3c:	4281      	cmp	r1, r0
90009f3e:	bf08      	it	eq
90009f40:	f042 0201 	orreq.w	r2, r2, #1
90009f44:	3030      	adds	r0, #48	; 0x30
90009f46:	42a1      	cmp	r1, r4
90009f48:	bf08      	it	eq
90009f4a:	f042 0201 	orreq.w	r2, r2, #1
90009f4e:	3430      	adds	r4, #48	; 0x30
90009f50:	4281      	cmp	r1, r0
90009f52:	bf08      	it	eq
90009f54:	f042 0201 	orreq.w	r2, r2, #1
90009f58:	f500 705c 	add.w	r0, r0, #880	; 0x370
90009f5c:	42a1      	cmp	r1, r4
90009f5e:	bf08      	it	eq
90009f60:	f042 0201 	orreq.w	r2, r2, #1
90009f64:	f504 745c 	add.w	r4, r4, #880	; 0x370
90009f68:	4281      	cmp	r1, r0
90009f6a:	bf08      	it	eq
90009f6c:	f042 0201 	orreq.w	r2, r2, #1
90009f70:	3030      	adds	r0, #48	; 0x30
90009f72:	42a1      	cmp	r1, r4
90009f74:	bf08      	it	eq
90009f76:	f042 0201 	orreq.w	r2, r2, #1
90009f7a:	3430      	adds	r4, #48	; 0x30
90009f7c:	4281      	cmp	r1, r0
90009f7e:	bf08      	it	eq
90009f80:	f042 0201 	orreq.w	r2, r2, #1
90009f84:	3030      	adds	r0, #48	; 0x30
90009f86:	42a1      	cmp	r1, r4
90009f88:	bf08      	it	eq
90009f8a:	f042 0201 	orreq.w	r2, r2, #1
90009f8e:	3430      	adds	r4, #48	; 0x30
90009f90:	4281      	cmp	r1, r0
90009f92:	bf08      	it	eq
90009f94:	f042 0201 	orreq.w	r2, r2, #1
90009f98:	3030      	adds	r0, #48	; 0x30
90009f9a:	42a1      	cmp	r1, r4
90009f9c:	bf08      	it	eq
90009f9e:	f042 0201 	orreq.w	r2, r2, #1
90009fa2:	4281      	cmp	r1, r0
90009fa4:	bf08      	it	eq
90009fa6:	f042 0201 	orreq.w	r2, r2, #1
90009faa:	b912      	cbnz	r2, 90009fb2 <HAL_DMA_Abort_IT+0xaa>
90009fac:	4a35      	ldr	r2, [pc, #212]	; (9000a084 <HAL_DMA_Abort_IT+0x17c>)
90009fae:	4291      	cmp	r1, r2
90009fb0:	d10e      	bne.n	90009fd0 <HAL_DMA_Abort_IT+0xc8>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
90009fb2:	2204      	movs	r2, #4
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
90009fb4:	2000      	movs	r0, #0
      hdma->State = HAL_DMA_STATE_ABORT;
90009fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
90009fba:	680b      	ldr	r3, [r1, #0]
90009fbc:	f023 0301 	bic.w	r3, r3, #1
90009fc0:	600b      	str	r3, [r1, #0]
}
90009fc2:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90009fc4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
90009fc6:	2001      	movs	r0, #1
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
90009fc8:	655a      	str	r2, [r3, #84]	; 0x54
}
90009fca:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
90009fcc:	2001      	movs	r0, #1
}
90009fce:	4770      	bx	lr
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009fd0:	4a2d      	ldr	r2, [pc, #180]	; (9000a088 <HAL_DMA_Abort_IT+0x180>)
90009fd2:	4d2e      	ldr	r5, [pc, #184]	; (9000a08c <HAL_DMA_Abort_IT+0x184>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90009fd4:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009fd6:	42a9      	cmp	r1, r5
90009fd8:	bf18      	it	ne
90009fda:	4291      	cmpne	r1, r2
90009fdc:	4c2c      	ldr	r4, [pc, #176]	; (9000a090 <HAL_DMA_Abort_IT+0x188>)
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90009fde:	f020 000e 	bic.w	r0, r0, #14
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009fe2:	f105 053c 	add.w	r5, r5, #60	; 0x3c
90009fe6:	bf0c      	ite	eq
90009fe8:	2201      	moveq	r2, #1
90009fea:	2200      	movne	r2, #0
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
90009fec:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009fee:	42a1      	cmp	r1, r4
90009ff0:	bf08      	it	eq
90009ff2:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
90009ff6:	6808      	ldr	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
90009ff8:	3428      	adds	r4, #40	; 0x28
90009ffa:	42a9      	cmp	r1, r5
90009ffc:	bf08      	it	eq
90009ffe:	f042 0201 	orreq.w	r2, r2, #1
      __HAL_DMA_DISABLE(hdma);
9000a002:	f020 0001 	bic.w	r0, r0, #1
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000a006:	42a1      	cmp	r1, r4
9000a008:	bf08      	it	eq
9000a00a:	f042 0201 	orreq.w	r2, r2, #1
9000a00e:	3414      	adds	r4, #20
      __HAL_DMA_DISABLE(hdma);
9000a010:	6008      	str	r0, [r1, #0]
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
9000a012:	42a1      	cmp	r1, r4
9000a014:	bf08      	it	eq
9000a016:	f042 0201 	orreq.w	r2, r2, #1
9000a01a:	481e      	ldr	r0, [pc, #120]	; (9000a094 <HAL_DMA_Abort_IT+0x18c>)
9000a01c:	4281      	cmp	r1, r0
9000a01e:	bf08      	it	eq
9000a020:	f042 0201 	orreq.w	r2, r2, #1
9000a024:	b912      	cbnz	r2, 9000a02c <HAL_DMA_Abort_IT+0x124>
9000a026:	4a1c      	ldr	r2, [pc, #112]	; (9000a098 <HAL_DMA_Abort_IT+0x190>)
9000a028:	4291      	cmp	r1, r2
9000a02a:	d117      	bne.n	9000a05c <HAL_DMA_Abort_IT+0x154>
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000a02c:	2201      	movs	r2, #1
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
9000a02e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000a030:	e9d3 0417 	ldrd	r0, r4, [r3, #92]	; 0x5c
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000a034:	6821      	ldr	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000a036:	f000 001f 	and.w	r0, r0, #31
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000a03a:	f421 7180 	bic.w	r1, r1, #256	; 0x100
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000a03e:	4082      	lsls	r2, r0
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
9000a040:	6021      	str	r1, [r4, #0]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
9000a042:	606a      	str	r2, [r5, #4]
        if(hdma->DMAmuxRequestGen != 0U)
9000a044:	6eda      	ldr	r2, [r3, #108]	; 0x6c
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
9000a046:	e9d3 1019 	ldrd	r1, r0, [r3, #100]	; 0x64
9000a04a:	6048      	str	r0, [r1, #4]
        if(hdma->DMAmuxRequestGen != 0U)
9000a04c:	b132      	cbz	r2, 9000a05c <HAL_DMA_Abort_IT+0x154>
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
9000a04e:	6811      	ldr	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
9000a050:	e9d3 041c 	ldrd	r0, r4, [r3, #112]	; 0x70
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
9000a054:	f421 7180 	bic.w	r1, r1, #256	; 0x100
9000a058:	6011      	str	r1, [r2, #0]
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
9000a05a:	6044      	str	r4, [r0, #4]
      hdma->State = HAL_DMA_STATE_READY;
9000a05c:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma);
9000a05e:	2400      	movs	r4, #0
      if(hdma->XferAbortCallback != NULL)
9000a060:	6d1a      	ldr	r2, [r3, #80]	; 0x50
      hdma->State = HAL_DMA_STATE_READY;
9000a062:	f883 1035 	strb.w	r1, [r3, #53]	; 0x35
      __HAL_UNLOCK(hdma);
9000a066:	f883 4034 	strb.w	r4, [r3, #52]	; 0x34
      if(hdma->XferAbortCallback != NULL)
9000a06a:	b11a      	cbz	r2, 9000a074 <HAL_DMA_Abort_IT+0x16c>
        hdma->XferAbortCallback(hdma);
9000a06c:	4618      	mov	r0, r3
9000a06e:	4790      	blx	r2
  return HAL_OK;
9000a070:	4620      	mov	r0, r4
}
9000a072:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
9000a074:	4610      	mov	r0, r2
}
9000a076:	bd38      	pop	{r3, r4, r5, pc}
9000a078:	40020010 	.word	0x40020010
9000a07c:	40020040 	.word	0x40020040
9000a080:	40020070 	.word	0x40020070
9000a084:	400204b8 	.word	0x400204b8
9000a088:	5802541c 	.word	0x5802541c
9000a08c:	58025408 	.word	0x58025408
9000a090:	58025430 	.word	0x58025430
9000a094:	58025480 	.word	0x58025480
9000a098:	58025494 	.word	0x58025494

9000a09c <HAL_DMA2D_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
9000a09c:	2800      	cmp	r0, #0
9000a09e:	d035      	beq.n	9000a10c <HAL_DMA2D_Init+0x70>
{
9000a0a0:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
9000a0a2:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
9000a0a6:	4604      	mov	r4, r0
9000a0a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000a0ac:	b34b      	cbz	r3, 9000a102 <HAL_DMA2D_Init+0x66>

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0ae:	6823      	ldr	r3, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000a0b0:	2002      	movs	r0, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0b2:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000a0b4:	f884 0061 	strb.w	r0, [r4, #97]	; 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0b8:	69e1      	ldr	r1, [r4, #28]
9000a0ba:	681d      	ldr	r5, [r3, #0]
9000a0bc:	4814      	ldr	r0, [pc, #80]	; (9000a110 <HAL_DMA2D_Init+0x74>)
9000a0be:	4311      	orrs	r1, r2

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000a0c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0c2:	4028      	ands	r0, r5
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000a0c4:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0c6:	4301      	orrs	r1, r0
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000a0c8:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
9000a0ca:	6019      	str	r1, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000a0cc:	4302      	orrs	r2, r0
9000a0ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000a0d0:	4810      	ldr	r0, [pc, #64]	; (9000a114 <HAL_DMA2D_Init+0x78>)
9000a0d2:	4008      	ands	r0, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000a0d4:	4910      	ldr	r1, [pc, #64]	; (9000a118 <HAL_DMA2D_Init+0x7c>)
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
9000a0d6:	4302      	orrs	r2, r0
9000a0d8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000a0da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
9000a0dc:	4011      	ands	r1, r2
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000a0de:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000a0e2:	4329      	orrs	r1, r5
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000a0e4:	0552      	lsls	r2, r2, #21
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
9000a0e6:	6419      	str	r1, [r3, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000a0e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
9000a0ea:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000a0ee:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
9000a0f0:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000a0f4:	430a      	orrs	r2, r1
9000a0f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000a0f8:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
9000a0fa:	6660      	str	r0, [r4, #100]	; 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
9000a0fc:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61

  return HAL_OK;
}
9000a100:	bd38      	pop	{r3, r4, r5, pc}
    hdma2d->Lock = HAL_UNLOCKED;
9000a102:	f880 2060 	strb.w	r2, [r0, #96]	; 0x60
    HAL_DMA2D_MspInit(hdma2d);
9000a106:	f7fa fbb7 	bl	90004878 <HAL_DMA2D_MspInit>
9000a10a:	e7d0      	b.n	9000a0ae <HAL_DMA2D_Init+0x12>
    return HAL_ERROR;
9000a10c:	2001      	movs	r0, #1
}
9000a10e:	4770      	bx	lr
9000a110:	fff8ffbf 	.word	0xfff8ffbf
9000a114:	fffffef8 	.word	0xfffffef8
9000a118:	ffff0000 	.word	0xffff0000

9000a11c <HAL_DMA2D_LineEventCallback>:
9000a11c:	4770      	bx	lr
9000a11e:	bf00      	nop

9000a120 <HAL_DMA2D_CLUTLoadingCpltCallback>:
9000a120:	4770      	bx	lr
9000a122:	bf00      	nop

9000a124 <HAL_DMA2D_IRQHandler>:
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
9000a124:	6803      	ldr	r3, [r0, #0]
{
9000a126:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
9000a128:	685d      	ldr	r5, [r3, #4]
{
9000a12a:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
9000a12c:	681e      	ldr	r6, [r3, #0]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
9000a12e:	07ea      	lsls	r2, r5, #31
9000a130:	d501      	bpl.n	9000a136 <HAL_DMA2D_IRQHandler+0x12>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
9000a132:	05f1      	lsls	r1, r6, #23
9000a134:	d456      	bmi.n	9000a1e4 <HAL_DMA2D_IRQHandler+0xc0>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
9000a136:	06aa      	lsls	r2, r5, #26
9000a138:	d501      	bpl.n	9000a13e <HAL_DMA2D_IRQHandler+0x1a>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
9000a13a:	04b3      	lsls	r3, r6, #18
9000a13c:	d43b      	bmi.n	9000a1b6 <HAL_DMA2D_IRQHandler+0x92>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
9000a13e:	0728      	lsls	r0, r5, #28
9000a140:	d501      	bpl.n	9000a146 <HAL_DMA2D_IRQHandler+0x22>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
9000a142:	0531      	lsls	r1, r6, #20
9000a144:	d421      	bmi.n	9000a18a <HAL_DMA2D_IRQHandler+0x66>
        hdma2d->XferErrorCallback(hdma2d);
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
9000a146:	076a      	lsls	r2, r5, #29
9000a148:	d501      	bpl.n	9000a14e <HAL_DMA2D_IRQHandler+0x2a>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
9000a14a:	0573      	lsls	r3, r6, #21
9000a14c:	d472      	bmi.n	9000a234 <HAL_DMA2D_IRQHandler+0x110>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
9000a14e:	07a8      	lsls	r0, r5, #30
9000a150:	d501      	bpl.n	9000a156 <HAL_DMA2D_IRQHandler+0x32>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
9000a152:	05b1      	lsls	r1, r6, #22
9000a154:	d404      	bmi.n	9000a160 <HAL_DMA2D_IRQHandler+0x3c>
        hdma2d->XferCpltCallback(hdma2d);
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
9000a156:	06ea      	lsls	r2, r5, #27
9000a158:	d501      	bpl.n	9000a15e <HAL_DMA2D_IRQHandler+0x3a>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
9000a15a:	04f3      	lsls	r3, r6, #19
9000a15c:	d457      	bmi.n	9000a20e <HAL_DMA2D_IRQHandler+0xea>
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
9000a15e:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
9000a160:	6823      	ldr	r3, [r4, #0]
9000a162:	681a      	ldr	r2, [r3, #0]
9000a164:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000a168:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
9000a16a:	2202      	movs	r2, #2
9000a16c:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000a16e:	2201      	movs	r2, #1
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000a170:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000a172:	6663      	str	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
9000a174:	2300      	movs	r3, #0
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000a176:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000a17a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      if (hdma2d->XferCpltCallback != NULL)
9000a17e:	6a23      	ldr	r3, [r4, #32]
9000a180:	2b00      	cmp	r3, #0
9000a182:	d0e8      	beq.n	9000a156 <HAL_DMA2D_IRQHandler+0x32>
        hdma2d->XferCpltCallback(hdma2d);
9000a184:	4620      	mov	r0, r4
9000a186:	4798      	blx	r3
9000a188:	e7e5      	b.n	9000a156 <HAL_DMA2D_IRQHandler+0x32>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
9000a18a:	6823      	ldr	r3, [r4, #0]
9000a18c:	681a      	ldr	r2, [r3, #0]
9000a18e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
9000a192:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
9000a194:	2208      	movs	r2, #8
9000a196:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000a198:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
9000a19a:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000a19c:	4313      	orrs	r3, r2
9000a19e:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000a1a0:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000a1a4:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
9000a1a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
9000a1a8:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000a1ac:	2b00      	cmp	r3, #0
9000a1ae:	d0ca      	beq.n	9000a146 <HAL_DMA2D_IRQHandler+0x22>
        hdma2d->XferErrorCallback(hdma2d);
9000a1b0:	4620      	mov	r0, r4
9000a1b2:	4798      	blx	r3
9000a1b4:	e7c7      	b.n	9000a146 <HAL_DMA2D_IRQHandler+0x22>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
9000a1b6:	6823      	ldr	r3, [r4, #0]
9000a1b8:	681a      	ldr	r2, [r3, #0]
9000a1ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
9000a1be:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
9000a1c0:	2220      	movs	r2, #32
9000a1c2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000a1c4:	2204      	movs	r2, #4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
9000a1c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
9000a1c8:	f043 0302 	orr.w	r3, r3, #2
9000a1cc:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000a1ce:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000a1d2:	2200      	movs	r2, #0
      if (hdma2d->XferErrorCallback != NULL)
9000a1d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
      __HAL_UNLOCK(hdma2d);
9000a1d6:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000a1da:	2b00      	cmp	r3, #0
9000a1dc:	d0af      	beq.n	9000a13e <HAL_DMA2D_IRQHandler+0x1a>
        hdma2d->XferErrorCallback(hdma2d);
9000a1de:	4620      	mov	r0, r4
9000a1e0:	4798      	blx	r3
9000a1e2:	e7ac      	b.n	9000a13e <HAL_DMA2D_IRQHandler+0x1a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
9000a1e4:	681a      	ldr	r2, [r3, #0]
9000a1e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000a1ea:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
9000a1ec:	6e42      	ldr	r2, [r0, #100]	; 0x64
9000a1ee:	f042 0201 	orr.w	r2, r2, #1
9000a1f2:	6642      	str	r2, [r0, #100]	; 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
9000a1f4:	2201      	movs	r2, #1
9000a1f6:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
9000a1f8:	2304      	movs	r3, #4
9000a1fa:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
      __HAL_UNLOCK(hdma2d);
9000a1fe:	2300      	movs	r3, #0
9000a200:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      if (hdma2d->XferErrorCallback != NULL)
9000a204:	6a43      	ldr	r3, [r0, #36]	; 0x24
9000a206:	2b00      	cmp	r3, #0
9000a208:	d095      	beq.n	9000a136 <HAL_DMA2D_IRQHandler+0x12>
        hdma2d->XferErrorCallback(hdma2d);
9000a20a:	4798      	blx	r3
9000a20c:	e793      	b.n	9000a136 <HAL_DMA2D_IRQHandler+0x12>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000a20e:	6823      	ldr	r3, [r4, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
9000a210:	2010      	movs	r0, #16
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000a212:	2101      	movs	r1, #1
      __HAL_UNLOCK(hdma2d);
9000a214:	2500      	movs	r5, #0
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
9000a216:	681a      	ldr	r2, [r3, #0]
9000a218:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
9000a21c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
9000a21e:	6098      	str	r0, [r3, #8]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
9000a220:	4620      	mov	r0, r4
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000a222:	6e63      	ldr	r3, [r4, #100]	; 0x64
      __HAL_UNLOCK(hdma2d);
9000a224:	f884 5060 	strb.w	r5, [r4, #96]	; 0x60
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
9000a228:	6663      	str	r3, [r4, #100]	; 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
9000a22a:	f884 1061 	strb.w	r1, [r4, #97]	; 0x61
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
9000a22e:	f7ff ff77 	bl	9000a120 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
9000a232:	bd70      	pop	{r4, r5, r6, pc}
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
9000a234:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
9000a236:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
9000a238:	681a      	ldr	r2, [r3, #0]
9000a23a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
9000a23e:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
9000a240:	2204      	movs	r2, #4
9000a242:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
9000a244:	f7ff ff6a 	bl	9000a11c <HAL_DMA2D_LineEventCallback>
9000a248:	e781      	b.n	9000a14e <HAL_DMA2D_IRQHandler+0x2a>
9000a24a:	bf00      	nop

9000a24c <HAL_DMA2D_ConfigLayer>:
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
9000a24c:	f890 2060 	ldrb.w	r2, [r0, #96]	; 0x60
9000a250:	2a01      	cmp	r2, #1
9000a252:	d065      	beq.n	9000a320 <HAL_DMA2D_ConfigLayer+0xd4>
9000a254:	4603      	mov	r3, r0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000a256:	ebc1 00c1 	rsb	r0, r1, r1, lsl #3
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000a25a:	2202      	movs	r2, #2
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000a25c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
{
9000a260:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma2d);
9000a262:	2401      	movs	r4, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
9000a264:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  __HAL_LOCK(hdma2d);
9000a268:	f883 4060 	strb.w	r4, [r3, #96]	; 0x60
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000a26c:	6b82      	ldr	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000a26e:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
9000a270:	6b05      	ldr	r5, [r0, #48]	; 0x30
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
9000a272:	0512      	lsls	r2, r2, #20
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000a274:	f1a4 0c09 	sub.w	ip, r4, #9
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000a278:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
9000a27c:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000a27e:	f1bc 0f01 	cmp.w	ip, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
9000a282:	ea42 0204 	orr.w	r2, r2, r4
9000a286:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000a28a:	d922      	bls.n	9000a2d2 <HAL_DMA2D_ConfigLayer+0x86>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
9000a28c:	6b45      	ldr	r5, [r0, #52]	; 0x34
9000a28e:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000a292:	b981      	cbnz	r1, 9000a2b6 <HAL_DMA2D_ConfigLayer+0x6a>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000a294:	6818      	ldr	r0, [r3, #0]
9000a296:	4923      	ldr	r1, [pc, #140]	; (9000a324 <HAL_DMA2D_ConfigLayer+0xd8>)
9000a298:	6a45      	ldr	r5, [r0, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000a29a:	6a9c      	ldr	r4, [r3, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000a29c:	4029      	ands	r1, r5
9000a29e:	430a      	orrs	r2, r1
9000a2a0:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000a2a2:	6184      	str	r4, [r0, #24]
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
9000a2a4:	2200      	movs	r2, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000a2a6:	2101      	movs	r1, #1

  return HAL_OK;
9000a2a8:	4610      	mov	r0, r2
  hdma2d->State = HAL_DMA2D_STATE_READY;
9000a2aa:	f883 1061 	strb.w	r1, [r3, #97]	; 0x61
  __HAL_UNLOCK(hdma2d);
9000a2ae:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
}
9000a2b2:	bc70      	pop	{r4, r5, r6}
9000a2b4:	4770      	bx	lr
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000a2b6:	2c0b      	cmp	r4, #11
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a2b8:	681c      	ldr	r4, [r3, #0]
    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
9000a2ba:	d129      	bne.n	9000a310 <HAL_DMA2D_ConfigLayer+0xc4>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a2bc:	69e5      	ldr	r5, [r4, #28]
9000a2be:	491a      	ldr	r1, [pc, #104]	; (9000a328 <HAL_DMA2D_ConfigLayer+0xdc>)
9000a2c0:	4029      	ands	r1, r5
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
9000a2c2:	6c05      	ldr	r5, [r0, #64]	; 0x40
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a2c4:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a2c6:	ea41 4185 	orr.w	r1, r1, r5, lsl #18
9000a2ca:	430a      	orrs	r2, r1
9000a2cc:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a2ce:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000a2d0:	e7e8      	b.n	9000a2a4 <HAL_DMA2D_ConfigLayer+0x58>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
9000a2d2:	6b44      	ldr	r4, [r0, #52]	; 0x34
9000a2d4:	f004 447f 	and.w	r4, r4, #4278190080	; 0xff000000
9000a2d8:	4322      	orrs	r2, r4
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
9000a2da:	b961      	cbnz	r1, 9000a2f6 <HAL_DMA2D_ConfigLayer+0xaa>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000a2dc:	6818      	ldr	r0, [r3, #0]
9000a2de:	4911      	ldr	r1, [pc, #68]	; (9000a324 <HAL_DMA2D_ConfigLayer+0xd8>)
9000a2e0:	6a46      	ldr	r6, [r0, #36]	; 0x24
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000a2e2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000a2e4:	4031      	ands	r1, r6
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000a2e6:	6a9d      	ldr	r5, [r3, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000a2e8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
9000a2ec:	430a      	orrs	r2, r1
9000a2ee:	6242      	str	r2, [r0, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
9000a2f0:	6185      	str	r5, [r0, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
9000a2f2:	6284      	str	r4, [r0, #40]	; 0x28
9000a2f4:	e7d6      	b.n	9000a2a4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a2f6:	681c      	ldr	r4, [r3, #0]
9000a2f8:	490a      	ldr	r1, [pc, #40]	; (9000a324 <HAL_DMA2D_ConfigLayer+0xd8>)
9000a2fa:	69e5      	ldr	r5, [r4, #28]
9000a2fc:	4029      	ands	r1, r5
9000a2fe:	430a      	orrs	r2, r1
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000a300:	6b41      	ldr	r1, [r0, #52]	; 0x34
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a302:	6a80      	ldr	r0, [r0, #40]	; 0x28
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000a304:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a308:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a30a:	6120      	str	r0, [r4, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
9000a30c:	6221      	str	r1, [r4, #32]
9000a30e:	e7c9      	b.n	9000a2a4 <HAL_DMA2D_ConfigLayer+0x58>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a310:	69e5      	ldr	r5, [r4, #28]
9000a312:	4904      	ldr	r1, [pc, #16]	; (9000a324 <HAL_DMA2D_ConfigLayer+0xd8>)
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a314:	6a80      	ldr	r0, [r0, #40]	; 0x28
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
9000a316:	4029      	ands	r1, r5
9000a318:	430a      	orrs	r2, r1
9000a31a:	61e2      	str	r2, [r4, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
9000a31c:	6120      	str	r0, [r4, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
9000a31e:	e7c1      	b.n	9000a2a4 <HAL_DMA2D_ConfigLayer+0x58>
  __HAL_LOCK(hdma2d);
9000a320:	2002      	movs	r0, #2
}
9000a322:	4770      	bx	lr
9000a324:	00ccfff0 	.word	0x00ccfff0
9000a328:	00c0fff0 	.word	0x00c0fff0

9000a32c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
9000a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000a330:	680c      	ldr	r4, [r1, #0]
{
9000a332:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000a334:	2c00      	cmp	r4, #0
9000a336:	f000 80a6 	beq.w	9000a486 <HAL_GPIO_Init+0x15a>
9000a33a:	f04f 0c00 	mov.w	ip, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000a33e:	4f8e      	ldr	r7, [pc, #568]	; (9000a578 <HAL_GPIO_Init+0x24c>)
  uint32_t position = 0x00U;
9000a340:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
9000a342:	2201      	movs	r2, #1
9000a344:	409a      	lsls	r2, r3
    if (iocurrent != 0x00U)
9000a346:	ea12 0e04 	ands.w	lr, r2, r4
9000a34a:	f000 8095 	beq.w	9000a478 <HAL_GPIO_Init+0x14c>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
9000a34e:	684d      	ldr	r5, [r1, #4]
9000a350:	f005 0903 	and.w	r9, r5, #3
9000a354:	f109 36ff 	add.w	r6, r9, #4294967295
9000a358:	2e01      	cmp	r6, #1
9000a35a:	f240 8097 	bls.w	9000a48c <HAL_GPIO_Init+0x160>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
9000a35e:	f1b9 0f03 	cmp.w	r9, #3
9000a362:	f040 80d1 	bne.w	9000a508 <HAL_GPIO_Init+0x1dc>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a366:	fa09 f20c 	lsl.w	r2, r9, ip
9000a36a:	ea6f 0802 	mvn.w	r8, r2
      temp = GPIOx->MODER;
9000a36e:	6806      	ldr	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000a370:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
9000a374:	ea06 0808 	and.w	r8, r6, r8
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
9000a378:	ea42 0208 	orr.w	r2, r2, r8
      GPIOx->MODER = temp;
9000a37c:	6002      	str	r2, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
9000a37e:	d07b      	beq.n	9000a478 <HAL_GPIO_Init+0x14c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000a380:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
9000a384:	f023 0803 	bic.w	r8, r3, #3

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000a388:	f003 0903 	and.w	r9, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000a38c:	f042 0202 	orr.w	r2, r2, #2
9000a390:	f108 48b0 	add.w	r8, r8, #1476395008	; 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000a394:	ea4f 0989 	mov.w	r9, r9, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
9000a398:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
9000a39c:	f508 6880 	add.w	r8, r8, #1024	; 0x400
9000a3a0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
9000a3a4:	f002 0202 	and.w	r2, r2, #2
9000a3a8:	9201      	str	r2, [sp, #4]
9000a3aa:	9a01      	ldr	r2, [sp, #4]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000a3ac:	220f      	movs	r2, #15
        temp = SYSCFG->EXTICR[position >> 2U];
9000a3ae:	f8d8 6008 	ldr.w	r6, [r8, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
9000a3b2:	fa02 f209 	lsl.w	r2, r2, r9
9000a3b6:	ea26 0202 	bic.w	r2, r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000a3ba:	4e70      	ldr	r6, [pc, #448]	; (9000a57c <HAL_GPIO_Init+0x250>)
9000a3bc:	42b0      	cmp	r0, r6
9000a3be:	d029      	beq.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a3c0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
9000a3c4:	42b0      	cmp	r0, r6
9000a3c6:	f000 80ac 	beq.w	9000a522 <HAL_GPIO_Init+0x1f6>
9000a3ca:	4e6d      	ldr	r6, [pc, #436]	; (9000a580 <HAL_GPIO_Init+0x254>)
9000a3cc:	42b0      	cmp	r0, r6
9000a3ce:	f000 80ae 	beq.w	9000a52e <HAL_GPIO_Init+0x202>
9000a3d2:	4e6c      	ldr	r6, [pc, #432]	; (9000a584 <HAL_GPIO_Init+0x258>)
9000a3d4:	42b0      	cmp	r0, r6
9000a3d6:	f000 809e 	beq.w	9000a516 <HAL_GPIO_Init+0x1ea>
9000a3da:	4e6b      	ldr	r6, [pc, #428]	; (9000a588 <HAL_GPIO_Init+0x25c>)
9000a3dc:	42b0      	cmp	r0, r6
9000a3de:	f000 80b2 	beq.w	9000a546 <HAL_GPIO_Init+0x21a>
9000a3e2:	4e6a      	ldr	r6, [pc, #424]	; (9000a58c <HAL_GPIO_Init+0x260>)
9000a3e4:	42b0      	cmp	r0, r6
9000a3e6:	f000 80b4 	beq.w	9000a552 <HAL_GPIO_Init+0x226>
9000a3ea:	4e69      	ldr	r6, [pc, #420]	; (9000a590 <HAL_GPIO_Init+0x264>)
9000a3ec:	42b0      	cmp	r0, r6
9000a3ee:	f000 80a4 	beq.w	9000a53a <HAL_GPIO_Init+0x20e>
9000a3f2:	4e68      	ldr	r6, [pc, #416]	; (9000a594 <HAL_GPIO_Init+0x268>)
9000a3f4:	42b0      	cmp	r0, r6
9000a3f6:	f000 80b2 	beq.w	9000a55e <HAL_GPIO_Init+0x232>
9000a3fa:	4e67      	ldr	r6, [pc, #412]	; (9000a598 <HAL_GPIO_Init+0x26c>)
9000a3fc:	42b0      	cmp	r0, r6
9000a3fe:	f000 80b4 	beq.w	9000a56a <HAL_GPIO_Init+0x23e>
9000a402:	4e66      	ldr	r6, [pc, #408]	; (9000a59c <HAL_GPIO_Init+0x270>)
9000a404:	42b0      	cmp	r0, r6
9000a406:	bf0c      	ite	eq
9000a408:	2609      	moveq	r6, #9
9000a40a:	260a      	movne	r6, #10
9000a40c:	fa06 f909 	lsl.w	r9, r6, r9
9000a410:	ea42 0209 	orr.w	r2, r2, r9
        SYSCFG->EXTICR[position >> 2U] = temp;
9000a414:	f8c8 2008 	str.w	r2, [r8, #8]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
9000a418:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
9000a41c:	02ee      	lsls	r6, r5, #11
        temp &= ~(iocurrent);
9000a41e:	ea6f 080e 	mvn.w	r8, lr
        temp = EXTI->RTSR1;
9000a422:	6812      	ldr	r2, [r2, #0]
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
9000a424:	f04f 46b0 	mov.w	r6, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000a428:	bf54      	ite	pl
9000a42a:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
9000a42e:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI->RTSR1 = temp;
9000a432:	6032      	str	r2, [r6, #0]

        temp = EXTI->FTSR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
9000a434:	02aa      	lsls	r2, r5, #10
        temp = EXTI->FTSR1;
9000a436:	6876      	ldr	r6, [r6, #4]
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
9000a438:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000a43c:	bf54      	ite	pl
9000a43e:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
9000a442:	ea4e 0606 	orrmi.w	r6, lr, r6
        EXTI->FTSR1 = temp;
9000a446:	6056      	str	r6, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
9000a448:	f8d2 6084 	ldr.w	r6, [r2, #132]	; 0x84
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
9000a44c:	03aa      	lsls	r2, r5, #14
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->EMR1 = temp;
9000a44e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
        temp &= ~(iocurrent);
9000a452:	bf54      	ite	pl
9000a454:	ea08 0606 	andpl.w	r6, r8, r6
          temp |= iocurrent;
9000a458:	ea4e 0606 	orrmi.w	r6, lr, r6

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
9000a45c:	03ed      	lsls	r5, r5, #15
        {
          temp |= iocurrent;
        }
        EXTI_CurrentCPU->IMR1 = temp;
9000a45e:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
        EXTI_CurrentCPU->EMR1 = temp;
9000a462:	f8c2 6084 	str.w	r6, [r2, #132]	; 0x84
        temp = EXTI_CurrentCPU->IMR1;
9000a466:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
        temp &= ~(iocurrent);
9000a46a:	bf54      	ite	pl
9000a46c:	ea08 0202 	andpl.w	r2, r8, r2
          temp |= iocurrent;
9000a470:	ea4e 0202 	orrmi.w	r2, lr, r2
        EXTI_CurrentCPU->IMR1 = temp;
9000a474:	f8c5 2080 	str.w	r2, [r5, #128]	; 0x80
      }
    }

    position++;
9000a478:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00U)
9000a47a:	f10c 0c02 	add.w	ip, ip, #2
9000a47e:	fa34 f203 	lsrs.w	r2, r4, r3
9000a482:	f47f af5e 	bne.w	9000a342 <HAL_GPIO_Init+0x16>
  }
}
9000a486:	b003      	add	sp, #12
9000a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a48c:	f04f 0803 	mov.w	r8, #3
        temp = GPIOx->OSPEEDR;
9000a490:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a492:	fa08 f80c 	lsl.w	r8, r8, ip
9000a496:	ea26 0a08 	bic.w	sl, r6, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
9000a49a:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a49c:	ea6f 0808 	mvn.w	r8, r8
        temp |= (GPIO_Init->Speed << (position * 2U));
9000a4a0:	fa06 f60c 	lsl.w	r6, r6, ip
9000a4a4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
9000a4a8:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a4aa:	f3c5 1600 	ubfx	r6, r5, #4, #1
        temp = GPIOx->OTYPER;
9000a4ae:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a4b2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
9000a4b4:	ea2a 0202 	bic.w	r2, sl, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
9000a4b8:	4332      	orrs	r2, r6
        GPIOx->OTYPER = temp;
9000a4ba:	6042      	str	r2, [r0, #4]
      temp = GPIOx->PUPDR;
9000a4bc:	68c2      	ldr	r2, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000a4be:	f1b9 0f02 	cmp.w	r9, #2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000a4c2:	688e      	ldr	r6, [r1, #8]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000a4c4:	ea02 0208 	and.w	r2, r2, r8
      temp |= ((GPIO_Init->Pull) << (position * 2U));
9000a4c8:	fa06 f60c 	lsl.w	r6, r6, ip
9000a4cc:	ea46 0602 	orr.w	r6, r6, r2
      GPIOx->PUPDR = temp;
9000a4d0:	fa09 f20c 	lsl.w	r2, r9, ip
9000a4d4:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
9000a4d6:	f47f af4a 	bne.w	9000a36e <HAL_GPIO_Init+0x42>
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a4da:	f003 0607 	and.w	r6, r3, #7
        temp = GPIOx->AFR[position >> 3U];
9000a4de:	ea4f 09d3 	mov.w	r9, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a4e2:	ea4f 0b86 	mov.w	fp, r6, lsl #2
9000a4e6:	260f      	movs	r6, #15
9000a4e8:	eb00 0989 	add.w	r9, r0, r9, lsl #2
9000a4ec:	fa06 f60b 	lsl.w	r6, r6, fp
        temp = GPIOx->AFR[position >> 3U];
9000a4f0:	f8d9 a020 	ldr.w	sl, [r9, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
9000a4f4:	ea2a 0a06 	bic.w	sl, sl, r6
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
9000a4f8:	690e      	ldr	r6, [r1, #16]
9000a4fa:	fa06 f60b 	lsl.w	r6, r6, fp
9000a4fe:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->AFR[position >> 3U] = temp;
9000a502:	f8c9 6020 	str.w	r6, [r9, #32]
9000a506:	e732      	b.n	9000a36e <HAL_GPIO_Init+0x42>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a508:	f04f 0803 	mov.w	r8, #3
9000a50c:	fa08 f80c 	lsl.w	r8, r8, ip
9000a510:	ea6f 0808 	mvn.w	r8, r8
9000a514:	e7d2      	b.n	9000a4bc <HAL_GPIO_Init+0x190>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
9000a516:	2603      	movs	r6, #3
9000a518:	fa06 f909 	lsl.w	r9, r6, r9
9000a51c:	ea42 0209 	orr.w	r2, r2, r9
9000a520:	e778      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a522:	2601      	movs	r6, #1
9000a524:	fa06 f909 	lsl.w	r9, r6, r9
9000a528:	ea42 0209 	orr.w	r2, r2, r9
9000a52c:	e772      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a52e:	2602      	movs	r6, #2
9000a530:	fa06 f909 	lsl.w	r9, r6, r9
9000a534:	ea42 0209 	orr.w	r2, r2, r9
9000a538:	e76c      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a53a:	2606      	movs	r6, #6
9000a53c:	fa06 f909 	lsl.w	r9, r6, r9
9000a540:	ea42 0209 	orr.w	r2, r2, r9
9000a544:	e766      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a546:	2604      	movs	r6, #4
9000a548:	fa06 f909 	lsl.w	r9, r6, r9
9000a54c:	ea42 0209 	orr.w	r2, r2, r9
9000a550:	e760      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a552:	2605      	movs	r6, #5
9000a554:	fa06 f909 	lsl.w	r9, r6, r9
9000a558:	ea42 0209 	orr.w	r2, r2, r9
9000a55c:	e75a      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a55e:	2607      	movs	r6, #7
9000a560:	fa06 f909 	lsl.w	r9, r6, r9
9000a564:	ea42 0209 	orr.w	r2, r2, r9
9000a568:	e754      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a56a:	2608      	movs	r6, #8
9000a56c:	fa06 f909 	lsl.w	r9, r6, r9
9000a570:	ea42 0209 	orr.w	r2, r2, r9
9000a574:	e74e      	b.n	9000a414 <HAL_GPIO_Init+0xe8>
9000a576:	bf00      	nop
9000a578:	58024400 	.word	0x58024400
9000a57c:	58020000 	.word	0x58020000
9000a580:	58020800 	.word	0x58020800
9000a584:	58020c00 	.word	0x58020c00
9000a588:	58021000 	.word	0x58021000
9000a58c:	58021400 	.word	0x58021400
9000a590:	58021800 	.word	0x58021800
9000a594:	58021c00 	.word	0x58021c00
9000a598:	58022000 	.word	0x58022000
9000a59c:	58022400 	.word	0x58022400

9000a5a0 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
9000a5a0:	2900      	cmp	r1, #0
9000a5a2:	f000 80a8 	beq.w	9000a6f6 <HAL_GPIO_DeInit+0x156>
  uint32_t position = 0x00U;
9000a5a6:	2300      	movs	r3, #0
{
9000a5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000a5ac:	f8df 9168 	ldr.w	r9, [pc, #360]	; 9000a718 <HAL_GPIO_DeInit+0x178>
9000a5b0:	b083      	sub	sp, #12
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a5b2:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9000a71c <HAL_GPIO_DeInit+0x17c>
9000a5b6:	f8df a168 	ldr.w	sl, [pc, #360]	; 9000a720 <HAL_GPIO_DeInit+0x180>
9000a5ba:	f8df b168 	ldr.w	fp, [pc, #360]	; 9000a724 <HAL_GPIO_DeInit+0x184>
    iocurrent = GPIO_Pin & (1UL << position) ;
9000a5be:	f04f 0e01 	mov.w	lr, #1
9000a5c2:	fa0e f203 	lsl.w	r2, lr, r3
    if (iocurrent != 0x00U)
9000a5c6:	ea12 0c01 	ands.w	ip, r2, r1
9000a5ca:	d06f      	beq.n	9000a6ac <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a5cc:	f023 0503 	bic.w	r5, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a5d0:	f003 0403 	and.w	r4, r3, #3
9000a5d4:	260f      	movs	r6, #15
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a5d6:	4540      	cmp	r0, r8
9000a5d8:	444d      	add	r5, r9
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a5da:	ea4f 0484 	mov.w	r4, r4, lsl #2
      tmp = SYSCFG->EXTICR[position >> 2U];
9000a5de:	68af      	ldr	r7, [r5, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
9000a5e0:	fa06 f604 	lsl.w	r6, r6, r4
9000a5e4:	ea07 0706 	and.w	r7, r7, r6
9000a5e8:	9701      	str	r7, [sp, #4]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a5ea:	d021      	beq.n	9000a630 <HAL_GPIO_DeInit+0x90>
9000a5ec:	4550      	cmp	r0, sl
9000a5ee:	d066      	beq.n	9000a6be <HAL_GPIO_DeInit+0x11e>
9000a5f0:	4558      	cmp	r0, fp
9000a5f2:	d067      	beq.n	9000a6c4 <HAL_GPIO_DeInit+0x124>
9000a5f4:	4f43      	ldr	r7, [pc, #268]	; (9000a704 <HAL_GPIO_DeInit+0x164>)
9000a5f6:	42b8      	cmp	r0, r7
9000a5f8:	d06e      	beq.n	9000a6d8 <HAL_GPIO_DeInit+0x138>
9000a5fa:	4f43      	ldr	r7, [pc, #268]	; (9000a708 <HAL_GPIO_DeInit+0x168>)
9000a5fc:	42b8      	cmp	r0, r7
9000a5fe:	d070      	beq.n	9000a6e2 <HAL_GPIO_DeInit+0x142>
9000a600:	4f42      	ldr	r7, [pc, #264]	; (9000a70c <HAL_GPIO_DeInit+0x16c>)
9000a602:	42b8      	cmp	r0, r7
9000a604:	d063      	beq.n	9000a6ce <HAL_GPIO_DeInit+0x12e>
9000a606:	4f42      	ldr	r7, [pc, #264]	; (9000a710 <HAL_GPIO_DeInit+0x170>)
9000a608:	42b8      	cmp	r0, r7
9000a60a:	d056      	beq.n	9000a6ba <HAL_GPIO_DeInit+0x11a>
9000a60c:	4f41      	ldr	r7, [pc, #260]	; (9000a714 <HAL_GPIO_DeInit+0x174>)
9000a60e:	42b8      	cmp	r0, r7
9000a610:	d072      	beq.n	9000a6f8 <HAL_GPIO_DeInit+0x158>
9000a612:	f8df e114 	ldr.w	lr, [pc, #276]	; 9000a728 <HAL_GPIO_DeInit+0x188>
9000a616:	4570      	cmp	r0, lr
9000a618:	d068      	beq.n	9000a6ec <HAL_GPIO_DeInit+0x14c>
9000a61a:	f8df e110 	ldr.w	lr, [pc, #272]	; 9000a72c <HAL_GPIO_DeInit+0x18c>
9000a61e:	4570      	cmp	r0, lr
9000a620:	bf14      	ite	ne
9000a622:	f04f 0e0a 	movne.w	lr, #10
9000a626:	f04f 0e09 	moveq.w	lr, #9
9000a62a:	fa0e f404 	lsl.w	r4, lr, r4
9000a62e:	e000      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a630:	2400      	movs	r4, #0
9000a632:	9f01      	ldr	r7, [sp, #4]
9000a634:	42a7      	cmp	r7, r4
9000a636:	d119      	bne.n	9000a66c <HAL_GPIO_DeInit+0xcc>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
9000a638:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
9000a63c:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
9000a640:	ea27 070c 	bic.w	r7, r7, ip
9000a644:	f8c4 7080 	str.w	r7, [r4, #128]	; 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
9000a648:	f8d4 7084 	ldr.w	r7, [r4, #132]	; 0x84
9000a64c:	ea27 070c 	bic.w	r7, r7, ip
9000a650:	f8c4 7084 	str.w	r7, [r4, #132]	; 0x84

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
9000a654:	6867      	ldr	r7, [r4, #4]
9000a656:	ea27 070c 	bic.w	r7, r7, ip
9000a65a:	6067      	str	r7, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
9000a65c:	6827      	ldr	r7, [r4, #0]
9000a65e:	ea27 070c 	bic.w	r7, r7, ip
9000a662:	6027      	str	r7, [r4, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
9000a664:	68ac      	ldr	r4, [r5, #8]
9000a666:	ea24 0606 	bic.w	r6, r4, r6
9000a66a:	60ae      	str	r6, [r5, #8]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a66c:	2503      	movs	r5, #3
9000a66e:	005c      	lsls	r4, r3, #1

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a670:	f003 0707 	and.w	r7, r3, #7
9000a674:	260f      	movs	r6, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a676:	fa05 f404 	lsl.w	r4, r5, r4
9000a67a:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a67c:	00bf      	lsls	r7, r7, #2
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a67e:	4325      	orrs	r5, r4
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a680:	fa06 f707 	lsl.w	r7, r6, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
9000a684:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
9000a686:	08dd      	lsrs	r5, r3, #3
9000a688:	eb00 0585 	add.w	r5, r0, r5, lsl #2
9000a68c:	6a2e      	ldr	r6, [r5, #32]
9000a68e:	ea26 0607 	bic.w	r6, r6, r7
9000a692:	622e      	str	r6, [r5, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
9000a694:	68c5      	ldr	r5, [r0, #12]
9000a696:	ea25 0504 	bic.w	r5, r5, r4
9000a69a:	60c5      	str	r5, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
9000a69c:	6845      	ldr	r5, [r0, #4]
9000a69e:	ea25 0202 	bic.w	r2, r5, r2
9000a6a2:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
9000a6a4:	6882      	ldr	r2, [r0, #8]
9000a6a6:	ea22 0404 	bic.w	r4, r2, r4
9000a6aa:	6084      	str	r4, [r0, #8]
    }

    position++;
9000a6ac:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00U)
9000a6ae:	fa31 f203 	lsrs.w	r2, r1, r3
9000a6b2:	d184      	bne.n	9000a5be <HAL_GPIO_DeInit+0x1e>
  }
}
9000a6b4:	b003      	add	sp, #12
9000a6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
9000a6ba:	f04f 0e06 	mov.w	lr, #6
9000a6be:	fa0e f404 	lsl.w	r4, lr, r4
9000a6c2:	e7b6      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6c4:	f04f 0e02 	mov.w	lr, #2
9000a6c8:	fa0e f404 	lsl.w	r4, lr, r4
9000a6cc:	e7b1      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6ce:	f04f 0e05 	mov.w	lr, #5
9000a6d2:	fa0e f404 	lsl.w	r4, lr, r4
9000a6d6:	e7ac      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6d8:	f04f 0e03 	mov.w	lr, #3
9000a6dc:	fa0e f404 	lsl.w	r4, lr, r4
9000a6e0:	e7a7      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6e2:	f04f 0e04 	mov.w	lr, #4
9000a6e6:	fa0e f404 	lsl.w	r4, lr, r4
9000a6ea:	e7a2      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6ec:	f04f 0e08 	mov.w	lr, #8
9000a6f0:	fa0e f404 	lsl.w	r4, lr, r4
9000a6f4:	e79d      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a6f6:	4770      	bx	lr
9000a6f8:	f04f 0e07 	mov.w	lr, #7
9000a6fc:	fa0e f404 	lsl.w	r4, lr, r4
9000a700:	e797      	b.n	9000a632 <HAL_GPIO_DeInit+0x92>
9000a702:	bf00      	nop
9000a704:	58020c00 	.word	0x58020c00
9000a708:	58021000 	.word	0x58021000
9000a70c:	58021400 	.word	0x58021400
9000a710:	58021800 	.word	0x58021800
9000a714:	58021c00 	.word	0x58021c00
9000a718:	58000400 	.word	0x58000400
9000a71c:	58020000 	.word	0x58020000
9000a720:	58020400 	.word	0x58020400
9000a724:	58020800 	.word	0x58020800
9000a728:	58022000 	.word	0x58022000
9000a72c:	58022400 	.word	0x58022400

9000a730 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
9000a730:	6903      	ldr	r3, [r0, #16]
9000a732:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
9000a734:	bf14      	ite	ne
9000a736:	2001      	movne	r0, #1
9000a738:	2000      	moveq	r0, #0
9000a73a:	4770      	bx	lr

9000a73c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
9000a73c:	b902      	cbnz	r2, 9000a740 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
9000a73e:	0409      	lsls	r1, r1, #16
9000a740:	6181      	str	r1, [r0, #24]
  }
}
9000a742:	4770      	bx	lr

9000a744 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
9000a744:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
9000a746:	ea01 0203 	and.w	r2, r1, r3
9000a74a:	ea21 0103 	bic.w	r1, r1, r3
9000a74e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000a752:	6181      	str	r1, [r0, #24]
}
9000a754:	4770      	bx	lr
9000a756:	bf00      	nop

9000a758 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
9000a758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a75c:	6803      	ldr	r3, [r0, #0]
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a75e:	f04f 0820 	mov.w	r8, #32
{
9000a762:	4605      	mov	r5, r0
9000a764:	460e      	mov	r6, r1
9000a766:	4617      	mov	r7, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
9000a768:	6998      	ldr	r0, [r3, #24]
9000a76a:	f010 0902 	ands.w	r9, r0, #2
9000a76e:	f040 809e 	bne.w	9000a8ae <I2C_WaitOnTXISFlagUntilTimeout+0x156>
  uint32_t itflag   = hi2c->Instance->ISR;
9000a772:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a774:	f014 0410 	ands.w	r4, r4, #16
9000a778:	d068      	beq.n	9000a84c <I2C_WaitOnTXISFlagUntilTimeout+0xf4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a77a:	2210      	movs	r2, #16
  uint32_t tickstart = Tickstart;
9000a77c:	463c      	mov	r4, r7
  HAL_StatusTypeDef status = HAL_OK;
9000a77e:	46ca      	mov	sl, r9
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a780:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a782:	1c71      	adds	r1, r6, #1
9000a784:	699a      	ldr	r2, [r3, #24]
9000a786:	d163      	bne.n	9000a850 <I2C_WaitOnTXISFlagUntilTimeout+0xf8>
9000a788:	0690      	lsls	r0, r2, #26
9000a78a:	f100 8093 	bmi.w	9000a8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a78e:	f1ba 0f00 	cmp.w	sl, #0
9000a792:	d104      	bne.n	9000a79e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a794:	699c      	ldr	r4, [r3, #24]
9000a796:	06a1      	lsls	r1, r4, #26
9000a798:	d5fc      	bpl.n	9000a794 <I2C_WaitOnTXISFlagUntilTimeout+0x3c>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a79a:	f8c3 801c 	str.w	r8, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
9000a79e:	f049 0404 	orr.w	r4, r9, #4

    status = HAL_ERROR;
9000a7a2:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
9000a7a4:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a7a6:	05d0      	lsls	r0, r2, #23
9000a7a8:	d530      	bpl.n	9000a80c <I2C_WaitOnTXISFlagUntilTimeout+0xb4>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a7aa:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a7ae:	0556      	lsls	r6, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a7b0:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a7b4:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a7b6:	d504      	bpl.n	9000a7c2 <I2C_WaitOnTXISFlagUntilTimeout+0x6a>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a7b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a7bc:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a7c0:	61d9      	str	r1, [r3, #28]

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a7c2:	0591      	lsls	r1, r2, #22
9000a7c4:	d504      	bpl.n	9000a7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a7c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a7ca:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a7ce:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a7d0:	699a      	ldr	r2, [r3, #24]
9000a7d2:	0790      	lsls	r0, r2, #30
9000a7d4:	d501      	bpl.n	9000a7da <I2C_WaitOnTXISFlagUntilTimeout+0x82>
    hi2c->Instance->TXDR = 0x00U;
9000a7d6:	2200      	movs	r2, #0
9000a7d8:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a7da:	699a      	ldr	r2, [r3, #24]
9000a7dc:	07d1      	lsls	r1, r2, #31
9000a7de:	d403      	bmi.n	9000a7e8 <I2C_WaitOnTXISFlagUntilTimeout+0x90>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a7e0:	699a      	ldr	r2, [r3, #24]
9000a7e2:	f042 0201 	orr.w	r2, r2, #1
9000a7e6:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
9000a7e8:	685a      	ldr	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a7ea:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a7ec:	4834      	ldr	r0, [pc, #208]	; (9000a8c0 <I2C_WaitOnTXISFlagUntilTimeout+0x168>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a7ee:	2620      	movs	r6, #32
    I2C_RESET_CR2(hi2c);
9000a7f0:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a7f2:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a7f4:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a7f6:	6c6b      	ldr	r3, [r5, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000a7f8:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a7fc:	431c      	orrs	r4, r3
9000a7fe:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a800:	f885 6041 	strb.w	r6, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a804:	f885 1042 	strb.w	r1, [r5, #66]	; 0x42
}
9000a808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a80c:	0550      	lsls	r0, r2, #21
9000a80e:	d4d3      	bmi.n	9000a7b8 <I2C_WaitOnTXISFlagUntilTimeout+0x60>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a810:	0592      	lsls	r2, r2, #22
9000a812:	d4d8      	bmi.n	9000a7c6 <I2C_WaitOnTXISFlagUntilTimeout+0x6e>
  if (status != HAL_OK)
9000a814:	2900      	cmp	r1, #0
9000a816:	d1db      	bne.n	9000a7d0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    if (Timeout != HAL_MAX_DELAY)
9000a818:	1c72      	adds	r2, r6, #1
9000a81a:	d0a5      	beq.n	9000a768 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a81c:	f7ff f8b8 	bl	90009990 <HAL_GetTick>
9000a820:	1bc0      	subs	r0, r0, r7
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a822:	682b      	ldr	r3, [r5, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a824:	42b0      	cmp	r0, r6
9000a826:	d801      	bhi.n	9000a82c <I2C_WaitOnTXISFlagUntilTimeout+0xd4>
9000a828:	2e00      	cmp	r6, #0
9000a82a:	d19d      	bne.n	9000a768 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
9000a82c:	699a      	ldr	r2, [r3, #24]
9000a82e:	f012 0202 	ands.w	r2, r2, #2
9000a832:	d199      	bne.n	9000a768 <I2C_WaitOnTXISFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a834:	6c6b      	ldr	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a836:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000a838:	2001      	movs	r0, #1
9000a83a:	f885 2040 	strb.w	r2, [r5, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a83e:	430b      	orrs	r3, r1
9000a840:	646b      	str	r3, [r5, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a842:	f885 1041 	strb.w	r1, [r5, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000a846:	f885 2042 	strb.w	r2, [r5, #66]	; 0x42
          return HAL_ERROR;
9000a84a:	e7dd      	b.n	9000a808 <I2C_WaitOnTXISFlagUntilTimeout+0xb0>
  HAL_StatusTypeDef status = HAL_OK;
9000a84c:	4621      	mov	r1, r4
9000a84e:	e7a9      	b.n	9000a7a4 <I2C_WaitOnTXISFlagUntilTimeout+0x4c>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a850:	0692      	lsls	r2, r2, #26
9000a852:	d42f      	bmi.n	9000a8b4 <I2C_WaitOnTXISFlagUntilTimeout+0x15c>
9000a854:	f1ba 0f00 	cmp.w	sl, #0
9000a858:	d1a1      	bne.n	9000a79e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a85a:	f7ff f899 	bl	90009990 <HAL_GetTick>
9000a85e:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a860:	682b      	ldr	r3, [r5, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a862:	4286      	cmp	r6, r0
9000a864:	d301      	bcc.n	9000a86a <I2C_WaitOnTXISFlagUntilTimeout+0x112>
9000a866:	2e00      	cmp	r6, #0
9000a868:	d18b      	bne.n	9000a782 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a86a:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a86c:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a870:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a872:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a874:	0409      	lsls	r1, r1, #16
9000a876:	d50b      	bpl.n	9000a890 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              (tmp1 != I2C_CR2_STOP) && \
9000a878:	0441      	lsls	r1, r0, #17
9000a87a:	d409      	bmi.n	9000a890 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
9000a87c:	2a20      	cmp	r2, #32
9000a87e:	d007      	beq.n	9000a890 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000a880:	685a      	ldr	r2, [r3, #4]
9000a882:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000a886:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000a888:	f7ff f882 	bl	90009990 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a88c:	682b      	ldr	r3, [r5, #0]
            tickstart = HAL_GetTick();
9000a88e:	4604      	mov	r4, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a890:	699a      	ldr	r2, [r3, #24]
9000a892:	0690      	lsls	r0, r2, #26
9000a894:	f53f af75 	bmi.w	9000a782 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a898:	f7ff f87a 	bl	90009990 <HAL_GetTick>
9000a89c:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a89e:	682b      	ldr	r3, [r5, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a8a0:	2819      	cmp	r0, #25
9000a8a2:	d9f5      	bls.n	9000a890 <I2C_WaitOnTXISFlagUntilTimeout+0x138>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a8a4:	f04f 0920 	mov.w	r9, #32
              status = HAL_ERROR;
9000a8a8:	f04f 0a01 	mov.w	sl, #1
9000a8ac:	e769      	b.n	9000a782 <I2C_WaitOnTXISFlagUntilTimeout+0x2a>
  return HAL_OK;
9000a8ae:	2000      	movs	r0, #0
}
9000a8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (status == HAL_OK)
9000a8b4:	f1ba 0f00 	cmp.w	sl, #0
9000a8b8:	f43f af6f 	beq.w	9000a79a <I2C_WaitOnTXISFlagUntilTimeout+0x42>
9000a8bc:	e76f      	b.n	9000a79e <I2C_WaitOnTXISFlagUntilTimeout+0x46>
9000a8be:	bf00      	nop
9000a8c0:	fe00e800 	.word	0xfe00e800

9000a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a8c4:	6803      	ldr	r3, [r0, #0]
{
9000a8c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000a8ca:	4690      	mov	r8, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a8cc:	699a      	ldr	r2, [r3, #24]
9000a8ce:	0694      	lsls	r4, r2, #26
9000a8d0:	d465      	bmi.n	9000a99e <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
9000a8d2:	4606      	mov	r6, r0
9000a8d4:	460f      	mov	r7, r1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a8d6:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
9000a8da:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
9000a8dc:	f014 0410 	ands.w	r4, r4, #16
9000a8e0:	d060      	beq.n	9000a9a4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe0>
  uint32_t error_code = 0;
9000a8e2:	2500      	movs	r5, #0
  uint32_t tickstart = Tickstart;
9000a8e4:	4644      	mov	r4, r8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
9000a8e6:	f8c3 901c 	str.w	r9, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
9000a8ea:	46aa      	mov	sl, r5
9000a8ec:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a8ee:	699a      	ldr	r2, [r3, #24]
9000a8f0:	d15a      	bne.n	9000a9a8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe4>
9000a8f2:	0690      	lsls	r0, r2, #26
9000a8f4:	d47d      	bmi.n	9000a9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
9000a8f6:	f1ba 0f00 	cmp.w	sl, #0
9000a8fa:	d104      	bne.n	9000a906 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
9000a8fc:	699c      	ldr	r4, [r3, #24]
9000a8fe:	06a1      	lsls	r1, r4, #26
9000a900:	d5fc      	bpl.n	9000a8fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000a902:	2220      	movs	r2, #32
9000a904:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
9000a906:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
9000a90a:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
9000a90c:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
9000a90e:	05d0      	lsls	r0, r2, #23
9000a910:	d530      	bpl.n	9000a974 <I2C_WaitOnSTOPFlagUntilTimeout+0xb0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a912:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a916:	0555      	lsls	r5, r2, #21
    error_code |= HAL_I2C_ERROR_BERR;
9000a918:	f044 0401 	orr.w	r4, r4, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
9000a91c:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a91e:	d504      	bpl.n	9000a92a <I2C_WaitOnSTOPFlagUntilTimeout+0x66>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a920:	f44f 6180 	mov.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
9000a924:	f044 0408 	orr.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
9000a928:	61d9      	str	r1, [r3, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a92a:	0597      	lsls	r7, r2, #22
9000a92c:	d504      	bpl.n	9000a938 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a92e:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
9000a932:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
9000a936:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
9000a938:	699a      	ldr	r2, [r3, #24]
9000a93a:	0790      	lsls	r0, r2, #30
9000a93c:	d501      	bpl.n	9000a942 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    hi2c->Instance->TXDR = 0x00U;
9000a93e:	2200      	movs	r2, #0
9000a940:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
9000a942:	699a      	ldr	r2, [r3, #24]
9000a944:	07d1      	lsls	r1, r2, #31
9000a946:	d403      	bmi.n	9000a950 <I2C_WaitOnSTOPFlagUntilTimeout+0x8c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
9000a948:	699a      	ldr	r2, [r3, #24]
9000a94a:	f042 0201 	orr.w	r2, r2, #1
9000a94e:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
9000a950:	685a      	ldr	r2, [r3, #4]
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a952:	2100      	movs	r1, #0
    I2C_RESET_CR2(hi2c);
9000a954:	4834      	ldr	r0, [pc, #208]	; (9000aa28 <I2C_WaitOnSTOPFlagUntilTimeout+0x164>)
    hi2c->State = HAL_I2C_STATE_READY;
9000a956:	2520      	movs	r5, #32
    I2C_RESET_CR2(hi2c);
9000a958:	4002      	ands	r2, r0
      return HAL_ERROR;
9000a95a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
9000a95c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
9000a95e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
9000a960:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->ErrorCode |= error_code;
9000a964:	431c      	orrs	r4, r3
9000a966:	6474      	str	r4, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
9000a968:	f886 5041 	strb.w	r5, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
9000a96c:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
}
9000a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
9000a974:	0550      	lsls	r0, r2, #21
9000a976:	d4d3      	bmi.n	9000a920 <I2C_WaitOnSTOPFlagUntilTimeout+0x5c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
9000a978:	0595      	lsls	r5, r2, #22
9000a97a:	d4d8      	bmi.n	9000a92e <I2C_WaitOnSTOPFlagUntilTimeout+0x6a>
  if (status != HAL_OK)
9000a97c:	2900      	cmp	r1, #0
9000a97e:	d1db      	bne.n	9000a938 <I2C_WaitOnSTOPFlagUntilTimeout+0x74>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a980:	f7ff f806 	bl	90009990 <HAL_GetTick>
9000a984:	eba0 0008 	sub.w	r0, r0, r8
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a988:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000a98a:	42b8      	cmp	r0, r7
9000a98c:	d800      	bhi.n	9000a990 <I2C_WaitOnSTOPFlagUntilTimeout+0xcc>
9000a98e:	b91f      	cbnz	r7, 9000a998 <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
9000a990:	699a      	ldr	r2, [r3, #24]
9000a992:	f012 0220 	ands.w	r2, r2, #32
9000a996:	d030      	beq.n	9000a9fa <I2C_WaitOnSTOPFlagUntilTimeout+0x136>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a998:	699a      	ldr	r2, [r3, #24]
9000a99a:	0692      	lsls	r2, r2, #26
9000a99c:	d59d      	bpl.n	9000a8da <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
9000a99e:	2000      	movs	r0, #0
}
9000a9a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
9000a9a4:	4621      	mov	r1, r4
9000a9a6:	e7b1      	b.n	9000a90c <I2C_WaitOnSTOPFlagUntilTimeout+0x48>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a9a8:	0692      	lsls	r2, r2, #26
9000a9aa:	d422      	bmi.n	9000a9f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
9000a9ac:	f1ba 0f00 	cmp.w	sl, #0
9000a9b0:	d1a9      	bne.n	9000a906 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a9b2:	f7fe ffed 	bl	90009990 <HAL_GetTick>
9000a9b6:	1b00      	subs	r0, r0, r4
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a9b8:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
9000a9ba:	4287      	cmp	r7, r0
9000a9bc:	d301      	bcc.n	9000a9c2 <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
9000a9be:	2f00      	cmp	r7, #0
9000a9c0:	d194      	bne.n	9000a8ec <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
9000a9c2:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
9000a9c4:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a9c8:	6999      	ldr	r1, [r3, #24]
          tmp2 = hi2c->Mode;
9000a9ca:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
9000a9cc:	0409      	lsls	r1, r1, #16
9000a9ce:	d503      	bpl.n	9000a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              (tmp1 != I2C_CR2_STOP) && \
9000a9d0:	0441      	lsls	r1, r0, #17
9000a9d2:	d401      	bmi.n	9000a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
9000a9d4:	2a20      	cmp	r2, #32
9000a9d6:	d11d      	bne.n	9000aa14 <I2C_WaitOnSTOPFlagUntilTimeout+0x150>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000a9d8:	699a      	ldr	r2, [r3, #24]
9000a9da:	0690      	lsls	r0, r2, #26
9000a9dc:	d486      	bmi.n	9000a8ec <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a9de:	f7fe ffd7 	bl	90009990 <HAL_GetTick>
9000a9e2:	1b00      	subs	r0, r0, r4
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
9000a9e4:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
9000a9e6:	2819      	cmp	r0, #25
9000a9e8:	d9f6      	bls.n	9000a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
9000a9ea:	2520      	movs	r5, #32
              status = HAL_ERROR;
9000a9ec:	f04f 0a01 	mov.w	sl, #1
9000a9f0:	e77c      	b.n	9000a8ec <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
    if (status == HAL_OK)
9000a9f2:	f1ba 0f00 	cmp.w	sl, #0
9000a9f6:	d084      	beq.n	9000a902 <I2C_WaitOnSTOPFlagUntilTimeout+0x3e>
9000a9f8:	e785      	b.n	9000a906 <I2C_WaitOnSTOPFlagUntilTimeout+0x42>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000a9fa:	6c73      	ldr	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000a9fc:	2120      	movs	r1, #32
          __HAL_UNLOCK(hi2c);
9000a9fe:	2001      	movs	r0, #1
9000aa00:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000aa04:	430b      	orrs	r3, r1
9000aa06:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000aa08:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000aa0c:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
}
9000aa10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
9000aa14:	685a      	ldr	r2, [r3, #4]
9000aa16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000aa1a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
9000aa1c:	f7fe ffb8 	bl	90009990 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
9000aa20:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
9000aa22:	4604      	mov	r4, r0
9000aa24:	e7d8      	b.n	9000a9d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x114>
9000aa26:	bf00      	nop
9000aa28:	fe00e800 	.word	0xfe00e800

9000aa2c <HAL_I2C_MspInit>:
}
9000aa2c:	4770      	bx	lr
9000aa2e:	bf00      	nop

9000aa30 <HAL_I2C_Init>:
  if (hi2c == NULL)
9000aa30:	2800      	cmp	r0, #0
9000aa32:	d04e      	beq.n	9000aad2 <HAL_I2C_Init+0xa2>
{
9000aa34:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
9000aa36:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
9000aa3a:	4604      	mov	r4, r0
9000aa3c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000aa40:	2b00      	cmp	r3, #0
9000aa42:	d041      	beq.n	9000aac8 <HAL_I2C_Init+0x98>
  __HAL_I2C_DISABLE(hi2c);
9000aa44:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000aa46:	2124      	movs	r1, #36	; 0x24
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000aa48:	6862      	ldr	r2, [r4, #4]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000aa4a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
9000aa4e:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000aa50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000aa54:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
9000aa56:	f021 0101 	bic.w	r1, r1, #1
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000aa5a:	2801      	cmp	r0, #1
  __HAL_I2C_DISABLE(hi2c);
9000aa5c:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
9000aa5e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
9000aa60:	689a      	ldr	r2, [r3, #8]
9000aa62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
9000aa66:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000aa68:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
9000aa6a:	d029      	beq.n	9000aac0 <HAL_I2C_Init+0x90>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000aa6c:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000aa70:	2802      	cmp	r0, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
9000aa72:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000aa74:	d102      	bne.n	9000aa7c <HAL_I2C_Init+0x4c>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
9000aa76:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000aa7a:	605a      	str	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000aa7c:	6858      	ldr	r0, [r3, #4]
  hi2c->State = HAL_I2C_STATE_READY;
9000aa7e:	f04f 0c20 	mov.w	ip, #32
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000aa82:	4915      	ldr	r1, [pc, #84]	; (9000aad8 <HAL_I2C_Init+0xa8>)
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000aa84:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
9000aa86:	4301      	orrs	r1, r0
9000aa88:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
9000aa8a:	68d9      	ldr	r1, [r3, #12]
9000aa8c:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
9000aa90:	60d9      	str	r1, [r3, #12]
                          (hi2c->Init.OwnAddress2Masks << 8));
9000aa92:	e9d4 0105 	ldrd	r0, r1, [r4, #20]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000aa96:	4302      	orrs	r2, r0
9000aa98:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000aa9c:	e9d4 1007 	ldrd	r1, r0, [r4, #28]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
9000aaa0:	60da      	str	r2, [r3, #12]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000aaa2:	2200      	movs	r2, #0
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000aaa4:	4301      	orrs	r1, r0
  return HAL_OK;
9000aaa6:	4610      	mov	r0, r2
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
9000aaa8:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
9000aaaa:	6819      	ldr	r1, [r3, #0]
9000aaac:	f041 0101 	orr.w	r1, r1, #1
9000aab0:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000aab2:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
9000aab4:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
9000aab8:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000aaba:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000aabe:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
9000aac0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000aac4:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
9000aac6:	e7d9      	b.n	9000aa7c <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
9000aac8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
9000aacc:	f7ff ffae 	bl	9000aa2c <HAL_I2C_MspInit>
9000aad0:	e7b8      	b.n	9000aa44 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
9000aad2:	2001      	movs	r0, #1
}
9000aad4:	4770      	bx	lr
9000aad6:	bf00      	nop
9000aad8:	02008000 	.word	0x02008000

9000aadc <HAL_I2C_MspDeInit>:
9000aadc:	4770      	bx	lr
9000aade:	bf00      	nop

9000aae0 <HAL_I2C_DeInit>:
  if (hi2c == NULL)
9000aae0:	b1b0      	cbz	r0, 9000ab10 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
9000aae2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
9000aae4:	2324      	movs	r3, #36	; 0x24
{
9000aae6:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
9000aae8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
9000aaec:	4604      	mov	r4, r0
  __HAL_I2C_DISABLE(hi2c);
9000aaee:	6813      	ldr	r3, [r2, #0]
9000aaf0:	f023 0301 	bic.w	r3, r3, #1
9000aaf4:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
9000aaf6:	f7ff fff1 	bl	9000aadc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000aafa:	2300      	movs	r3, #0
9000aafc:	6463      	str	r3, [r4, #68]	; 0x44
  return HAL_OK;
9000aafe:	4618      	mov	r0, r3
  hi2c->State = HAL_I2C_STATE_RESET;
9000ab00:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UNLOCK(hi2c);
9000ab04:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  hi2c->PreviousState = I2C_STATE_NONE;
9000ab08:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
9000ab0a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
}
9000ab0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
9000ab10:	2001      	movs	r0, #1
}
9000ab12:	4770      	bx	lr

9000ab14 <HAL_I2C_Mem_Write>:
{
9000ab14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ab18:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ab1a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000ab1e:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ab22:	2b20      	cmp	r3, #32
{
9000ab24:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ab26:	d132      	bne.n	9000ab8e <HAL_I2C_Mem_Write+0x7a>
    if ((pData == NULL) || (Size == 0U))
9000ab28:	9b08      	ldr	r3, [sp, #32]
9000ab2a:	4604      	mov	r4, r0
9000ab2c:	b34b      	cbz	r3, 9000ab82 <HAL_I2C_Mem_Write+0x6e>
9000ab2e:	f1ba 0f00 	cmp.w	sl, #0
9000ab32:	d026      	beq.n	9000ab82 <HAL_I2C_Mem_Write+0x6e>
    __HAL_LOCK(hi2c);
9000ab34:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000ab38:	2b01      	cmp	r3, #1
9000ab3a:	d028      	beq.n	9000ab8e <HAL_I2C_Mem_Write+0x7a>
9000ab3c:	2301      	movs	r3, #1
9000ab3e:	460e      	mov	r6, r1
9000ab40:	4691      	mov	r9, r2
9000ab42:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000ab46:	f7fe ff23 	bl	90009990 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ab4a:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
9000ab4c:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ab4e:	699a      	ldr	r2, [r3, #24]
9000ab50:	0411      	lsls	r1, r2, #16
9000ab52:	d51f      	bpl.n	9000ab94 <HAL_I2C_Mem_Write+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab54:	f7fe ff1c 	bl	90009990 <HAL_GetTick>
9000ab58:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab5a:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ab5c:	2819      	cmp	r0, #25
9000ab5e:	d9f6      	bls.n	9000ab4e <HAL_I2C_Mem_Write+0x3a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ab60:	699a      	ldr	r2, [r3, #24]
9000ab62:	0412      	lsls	r2, r2, #16
9000ab64:	d5f3      	bpl.n	9000ab4e <HAL_I2C_Mem_Write+0x3a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ab66:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000ab68:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000ab6a:	2200      	movs	r2, #0
      return HAL_ERROR;
9000ab6c:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ab6e:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000ab70:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ab74:	6463      	str	r3, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000ab76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000ab7a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
}
9000ab7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000ab82:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000ab86:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000ab88:	6463      	str	r3, [r4, #68]	; 0x44
}
9000ab8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000ab8e:	2002      	movs	r0, #2
}
9000ab90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000ab94:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000ab96:	2121      	movs	r1, #33	; 0x21
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000ab98:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ab9c:	4620      	mov	r0, r4
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
9000ab9e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000aba2:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000aba4:	6262      	str	r2, [r4, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000aba6:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000aba8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000abac:	6362      	str	r2, [r4, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000abae:	6462      	str	r2, [r4, #68]	; 0x44
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
9000abb0:	496d      	ldr	r1, [pc, #436]	; (9000ad68 <HAL_I2C_Mem_Write+0x254>)
    hi2c->XferCount = Size;
9000abb2:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000abb6:	685a      	ldr	r2, [r3, #4]
9000abb8:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000abba:	fa5f f188 	uxtb.w	r1, r8
  MODIFY_REG(hi2c->Instance->CR2, \
9000abbe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
9000abc2:	496a      	ldr	r1, [pc, #424]	; (9000ad6c <HAL_I2C_Mem_Write+0x258>)
9000abc4:	4332      	orrs	r2, r6
9000abc6:	4311      	orrs	r1, r2
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000abc8:	462a      	mov	r2, r5
  MODIFY_REG(hi2c->Instance->CR2, \
9000abca:	6059      	str	r1, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000abcc:	4639      	mov	r1, r7
9000abce:	f7ff fdc3 	bl	9000a758 <I2C_WaitOnTXISFlagUntilTimeout>
9000abd2:	2800      	cmp	r0, #0
9000abd4:	d175      	bne.n	9000acc2 <HAL_I2C_Mem_Write+0x1ae>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000abd6:	f1b8 0f01 	cmp.w	r8, #1
9000abda:	d00a      	beq.n	9000abf2 <HAL_I2C_Mem_Write+0xde>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000abdc:	ea4f 2219 	mov.w	r2, r9, lsr #8
9000abe0:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000abe2:	4639      	mov	r1, r7
9000abe4:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000abe6:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000abe8:	462a      	mov	r2, r5
9000abea:	f7ff fdb5 	bl	9000a758 <I2C_WaitOnTXISFlagUntilTimeout>
9000abee:	2800      	cmp	r0, #0
9000abf0:	d167      	bne.n	9000acc2 <HAL_I2C_Mem_Write+0x1ae>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000abf2:	fa5f f389 	uxtb.w	r3, r9
9000abf6:	6822      	ldr	r2, [r4, #0]
9000abf8:	6293      	str	r3, [r2, #40]	; 0x28
9000abfa:	1c78      	adds	r0, r7, #1
9000abfc:	d14a      	bne.n	9000ac94 <HAL_I2C_Mem_Write+0x180>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000abfe:	6993      	ldr	r3, [r2, #24]
9000ac00:	0619      	lsls	r1, r3, #24
9000ac02:	d5fc      	bpl.n	9000abfe <HAL_I2C_Mem_Write+0xea>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000ac04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000ac06:	b29b      	uxth	r3, r3
9000ac08:	2bff      	cmp	r3, #255	; 0xff
9000ac0a:	f240 808a 	bls.w	9000ad22 <HAL_I2C_Mem_Write+0x20e>
  MODIFY_REG(hi2c->Instance->CR2, \
9000ac0e:	6853      	ldr	r3, [r2, #4]
9000ac10:	4957      	ldr	r1, [pc, #348]	; (9000ad70 <HAL_I2C_Mem_Write+0x25c>)
9000ac12:	400b      	ands	r3, r1
9000ac14:	4957      	ldr	r1, [pc, #348]	; (9000ad74 <HAL_I2C_Mem_Write+0x260>)
9000ac16:	4333      	orrs	r3, r6
9000ac18:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000ac1a:	23ff      	movs	r3, #255	; 0xff
9000ac1c:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ac1e:	6051      	str	r1, [r2, #4]
9000ac20:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9000ad70 <HAL_I2C_Mem_Write+0x25c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000ac24:	f04f 0aff 	mov.w	sl, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000ac28:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9000ad74 <HAL_I2C_Mem_Write+0x260>
9000ac2c:	e004      	b.n	9000ac38 <HAL_I2C_Mem_Write+0x124>
    } while (hi2c->XferCount > 0U);
9000ac2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000ac30:	b29b      	uxth	r3, r3
9000ac32:	2b00      	cmp	r3, #0
9000ac34:	f000 8083 	beq.w	9000ad3e <HAL_I2C_Mem_Write+0x22a>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000ac38:	462a      	mov	r2, r5
9000ac3a:	4639      	mov	r1, r7
9000ac3c:	4620      	mov	r0, r4
9000ac3e:	f7ff fd8b 	bl	9000a758 <I2C_WaitOnTXISFlagUntilTimeout>
9000ac42:	2800      	cmp	r0, #0
9000ac44:	d16b      	bne.n	9000ad1e <HAL_I2C_Mem_Write+0x20a>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000ac46:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000ac48:	6821      	ldr	r1, [r4, #0]
9000ac4a:	f812 0b01 	ldrb.w	r0, [r2], #1
      hi2c->XferSize--;
9000ac4e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
9000ac50:	6288      	str	r0, [r1, #40]	; 0x28
      hi2c->pBuffPtr++;
9000ac52:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferSize--;
9000ac54:	3b01      	subs	r3, #1
      hi2c->XferCount--;
9000ac56:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
9000ac58:	b29b      	uxth	r3, r3
      hi2c->XferCount--;
9000ac5a:	3a01      	subs	r2, #1
      hi2c->XferSize--;
9000ac5c:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
9000ac5e:	b292      	uxth	r2, r2
9000ac60:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000ac62:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
9000ac64:	b292      	uxth	r2, r2
9000ac66:	2a00      	cmp	r2, #0
9000ac68:	d0e1      	beq.n	9000ac2e <HAL_I2C_Mem_Write+0x11a>
9000ac6a:	2b00      	cmp	r3, #0
9000ac6c:	d1df      	bne.n	9000ac2e <HAL_I2C_Mem_Write+0x11a>
9000ac6e:	1c78      	adds	r0, r7, #1
9000ac70:	d12c      	bne.n	9000accc <HAL_I2C_Mem_Write+0x1b8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ac72:	698b      	ldr	r3, [r1, #24]
9000ac74:	061a      	lsls	r2, r3, #24
9000ac76:	d5fc      	bpl.n	9000ac72 <HAL_I2C_Mem_Write+0x15e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000ac78:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000ac7a:	b29b      	uxth	r3, r3
9000ac7c:	2bff      	cmp	r3, #255	; 0xff
9000ac7e:	d940      	bls.n	9000ad02 <HAL_I2C_Mem_Write+0x1ee>
  MODIFY_REG(hi2c->Instance->CR2, \
9000ac80:	684b      	ldr	r3, [r1, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000ac82:	f8a4 a028 	strh.w	sl, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ac86:	ea03 0308 	and.w	r3, r3, r8
9000ac8a:	4333      	orrs	r3, r6
9000ac8c:	ea43 0309 	orr.w	r3, r3, r9
9000ac90:	604b      	str	r3, [r1, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
9000ac92:	e7cc      	b.n	9000ac2e <HAL_I2C_Mem_Write+0x11a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ac94:	6993      	ldr	r3, [r2, #24]
9000ac96:	061b      	lsls	r3, r3, #24
9000ac98:	d4b4      	bmi.n	9000ac04 <HAL_I2C_Mem_Write+0xf0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000ac9a:	f7fe fe79 	bl	90009990 <HAL_GetTick>
9000ac9e:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000aca0:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000aca2:	4287      	cmp	r7, r0
9000aca4:	d301      	bcc.n	9000acaa <HAL_I2C_Mem_Write+0x196>
9000aca6:	2f00      	cmp	r7, #0
9000aca8:	d1a7      	bne.n	9000abfa <HAL_I2C_Mem_Write+0xe6>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000acaa:	6993      	ldr	r3, [r2, #24]
9000acac:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000acb0:	d1a3      	bne.n	9000abfa <HAL_I2C_Mem_Write+0xe6>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000acb2:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000acb4:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000acb6:	430a      	orrs	r2, r1
9000acb8:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000acba:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000acbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000acc2:	2300      	movs	r3, #0
      return HAL_ERROR;
9000acc4:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000acc6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
9000acca:	e75e      	b.n	9000ab8a <HAL_I2C_Mem_Write+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000accc:	698b      	ldr	r3, [r1, #24]
9000acce:	061b      	lsls	r3, r3, #24
9000acd0:	d4d2      	bmi.n	9000ac78 <HAL_I2C_Mem_Write+0x164>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000acd2:	f7fe fe5d 	bl	90009990 <HAL_GetTick>
9000acd6:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000acd8:	6821      	ldr	r1, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000acda:	4287      	cmp	r7, r0
9000acdc:	d301      	bcc.n	9000ace2 <HAL_I2C_Mem_Write+0x1ce>
9000acde:	2f00      	cmp	r7, #0
9000ace0:	d1c5      	bne.n	9000ac6e <HAL_I2C_Mem_Write+0x15a>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000ace2:	698b      	ldr	r3, [r1, #24]
9000ace4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000ace8:	d1c1      	bne.n	9000ac6e <HAL_I2C_Mem_Write+0x15a>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000acea:	6c62      	ldr	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000acec:	2120      	movs	r1, #32
          return HAL_ERROR;
9000acee:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000acf0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000acf4:	430a      	orrs	r2, r1
9000acf6:	6462      	str	r2, [r4, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000acf8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000acfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
9000ad00:	e743      	b.n	9000ab8a <HAL_I2C_Mem_Write+0x76>
          hi2c->XferSize = hi2c->XferCount;
9000ad02:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
9000ad04:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000ad06:	b2da      	uxtb	r2, r3
          hi2c->XferSize = hi2c->XferCount;
9000ad08:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ad0a:	684b      	ldr	r3, [r1, #4]
9000ad0c:	ea03 0308 	and.w	r3, r3, r8
9000ad10:	4333      	orrs	r3, r6
9000ad12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000ad16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000ad1a:	604b      	str	r3, [r1, #4]
}
9000ad1c:	e787      	b.n	9000ac2e <HAL_I2C_Mem_Write+0x11a>
        return HAL_ERROR;
9000ad1e:	2001      	movs	r0, #1
9000ad20:	e733      	b.n	9000ab8a <HAL_I2C_Mem_Write+0x76>
      hi2c->XferSize = hi2c->XferCount;
9000ad22:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000ad24:	4812      	ldr	r0, [pc, #72]	; (9000ad70 <HAL_I2C_Mem_Write+0x25c>)
      hi2c->XferSize = hi2c->XferCount;
9000ad26:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000ad28:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000ad2a:	8523      	strh	r3, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ad2c:	6853      	ldr	r3, [r2, #4]
9000ad2e:	4003      	ands	r3, r0
9000ad30:	4333      	orrs	r3, r6
9000ad32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000ad36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000ad3a:	6053      	str	r3, [r2, #4]
}
9000ad3c:	e770      	b.n	9000ac20 <HAL_I2C_Mem_Write+0x10c>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000ad3e:	462a      	mov	r2, r5
9000ad40:	4639      	mov	r1, r7
9000ad42:	4620      	mov	r0, r4
9000ad44:	f7ff fdbe 	bl	9000a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>
9000ad48:	2800      	cmp	r0, #0
9000ad4a:	d1e8      	bne.n	9000ad1e <HAL_I2C_Mem_Write+0x20a>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000ad4c:	6823      	ldr	r3, [r4, #0]
9000ad4e:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000ad50:	4d09      	ldr	r5, [pc, #36]	; (9000ad78 <HAL_I2C_Mem_Write+0x264>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000ad52:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000ad54:	685a      	ldr	r2, [r3, #4]
9000ad56:	402a      	ands	r2, r5
9000ad58:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000ad5a:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000ad5e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000ad62:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
9000ad66:	e710      	b.n	9000ab8a <HAL_I2C_Mem_Write+0x76>
9000ad68:	fc009800 	.word	0xfc009800
9000ad6c:	01002000 	.word	0x01002000
9000ad70:	fc009c00 	.word	0xfc009c00
9000ad74:	01ff0000 	.word	0x01ff0000
9000ad78:	fe00e800 	.word	0xfe00e800

9000ad7c <HAL_I2C_Mem_Read>:
{
9000ad7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000ad80:	461f      	mov	r7, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ad82:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
9000ad86:	f8bd 9024 	ldrh.w	r9, [sp, #36]	; 0x24
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ad8a:	2b20      	cmp	r3, #32
{
9000ad8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
9000ad8e:	d137      	bne.n	9000ae00 <HAL_I2C_Mem_Read+0x84>
    if ((pData == NULL) || (Size == 0U))
9000ad90:	9b08      	ldr	r3, [sp, #32]
9000ad92:	4682      	mov	sl, r0
9000ad94:	b36b      	cbz	r3, 9000adf2 <HAL_I2C_Mem_Read+0x76>
9000ad96:	f1b9 0f00 	cmp.w	r9, #0
9000ad9a:	d02a      	beq.n	9000adf2 <HAL_I2C_Mem_Read+0x76>
    __HAL_LOCK(hi2c);
9000ad9c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
9000ada0:	2b01      	cmp	r3, #1
9000ada2:	d02d      	beq.n	9000ae00 <HAL_I2C_Mem_Read+0x84>
9000ada4:	2301      	movs	r3, #1
9000ada6:	460e      	mov	r6, r1
9000ada8:	4690      	mov	r8, r2
9000adaa:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
9000adae:	f7fe fdef 	bl	90009990 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000adb2:	f8da 3000 	ldr.w	r3, [sl]
    tickstart = HAL_GetTick();
9000adb6:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000adb8:	699a      	ldr	r2, [r3, #24]
9000adba:	0412      	lsls	r2, r2, #16
9000adbc:	d523      	bpl.n	9000ae06 <HAL_I2C_Mem_Read+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000adbe:	f7fe fde7 	bl	90009990 <HAL_GetTick>
9000adc2:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000adc4:	f8da 3000 	ldr.w	r3, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000adc8:	2819      	cmp	r0, #25
9000adca:	d9f5      	bls.n	9000adb8 <HAL_I2C_Mem_Read+0x3c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000adcc:	699a      	ldr	r2, [r3, #24]
9000adce:	0410      	lsls	r0, r2, #16
9000add0:	d5f2      	bpl.n	9000adb8 <HAL_I2C_Mem_Read+0x3c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000add2:	f8da 3044 	ldr.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000add6:	2120      	movs	r1, #32
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000add8:	2200      	movs	r2, #0
      return HAL_ERROR;
9000adda:	2001      	movs	r0, #1
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000addc:	430b      	orrs	r3, r1
          __HAL_UNLOCK(hi2c);
9000adde:	f88a 2040 	strb.w	r2, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000ade2:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000ade6:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000adea:	f88a 2042 	strb.w	r2, [sl, #66]	; 0x42
}
9000adee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000adf2:	f44f 7300 	mov.w	r3, #512	; 0x200
      return  HAL_ERROR;
9000adf6:	2001      	movs	r0, #1
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
9000adf8:	f8ca 3044 	str.w	r3, [sl, #68]	; 0x44
}
9000adfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
9000ae00:	2002      	movs	r0, #2
}
9000ae02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->pBuffPtr  = pData;
9000ae06:	9a08      	ldr	r2, [sp, #32]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000ae08:	2122      	movs	r1, #34	; 0x22
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
9000ae0a:	f3c6 0609 	ubfx	r6, r6, #0, #10
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ae0e:	4650      	mov	r0, sl
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
9000ae10:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000ae14:	2140      	movs	r1, #64	; 0x40
    hi2c->pBuffPtr  = pData;
9000ae16:	f8ca 2024 	str.w	r2, [sl, #36]	; 0x24
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000ae1a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
9000ae1c:	f88a 1042 	strb.w	r1, [sl, #66]	; 0x42
    hi2c->XferISR   = NULL;
9000ae20:	f8ca 2034 	str.w	r2, [sl, #52]	; 0x34
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
9000ae24:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae28:	4981      	ldr	r1, [pc, #516]	; (9000b030 <HAL_I2C_Mem_Read+0x2b4>)
    hi2c->XferCount = Size;
9000ae2a:	f8aa 902a 	strh.w	r9, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae2e:	685a      	ldr	r2, [r3, #4]
9000ae30:	400a      	ands	r2, r1
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000ae32:	b2f9      	uxtb	r1, r7
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae34:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ae38:	4621      	mov	r1, r4
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae3a:	4332      	orrs	r2, r6
9000ae3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000ae40:	605a      	str	r2, [r3, #4]
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ae42:	462a      	mov	r2, r5
9000ae44:	f7ff fc88 	bl	9000a758 <I2C_WaitOnTXISFlagUntilTimeout>
9000ae48:	2800      	cmp	r0, #0
9000ae4a:	f040 8090 	bne.w	9000af6e <HAL_I2C_Mem_Read+0x1f2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
9000ae4e:	2f01      	cmp	r7, #1
9000ae50:	d00c      	beq.n	9000ae6c <HAL_I2C_Mem_Read+0xf0>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000ae52:	ea4f 2218 	mov.w	r2, r8, lsr #8
9000ae56:	f8da 3000 	ldr.w	r3, [sl]
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ae5a:	4621      	mov	r1, r4
9000ae5c:	4650      	mov	r0, sl
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
9000ae5e:	629a      	str	r2, [r3, #40]	; 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
9000ae60:	462a      	mov	r2, r5
9000ae62:	f7ff fc79 	bl	9000a758 <I2C_WaitOnTXISFlagUntilTimeout>
9000ae66:	2800      	cmp	r0, #0
9000ae68:	f040 8081 	bne.w	9000af6e <HAL_I2C_Mem_Read+0x1f2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
9000ae6c:	fa5f f388 	uxtb.w	r3, r8
9000ae70:	f8da 2000 	ldr.w	r2, [sl]
9000ae74:	6293      	str	r3, [r2, #40]	; 0x28
9000ae76:	1c61      	adds	r1, r4, #1
9000ae78:	d15f      	bne.n	9000af3a <HAL_I2C_Mem_Read+0x1be>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000ae7a:	6993      	ldr	r3, [r2, #24]
9000ae7c:	065b      	lsls	r3, r3, #25
9000ae7e:	d5fc      	bpl.n	9000ae7a <HAL_I2C_Mem_Read+0xfe>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000ae80:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
9000ae84:	b29b      	uxth	r3, r3
9000ae86:	2bff      	cmp	r3, #255	; 0xff
9000ae88:	f240 80ab 	bls.w	9000afe2 <HAL_I2C_Mem_Read+0x266>
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae8c:	6853      	ldr	r3, [r2, #4]
9000ae8e:	4968      	ldr	r1, [pc, #416]	; (9000b030 <HAL_I2C_Mem_Read+0x2b4>)
9000ae90:	400b      	ands	r3, r1
9000ae92:	4968      	ldr	r1, [pc, #416]	; (9000b034 <HAL_I2C_Mem_Read+0x2b8>)
9000ae94:	4333      	orrs	r3, r6
9000ae96:	4319      	orrs	r1, r3
      hi2c->XferSize = MAX_NBYTE_SIZE;
9000ae98:	23ff      	movs	r3, #255	; 0xff
9000ae9a:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000ae9e:	6051      	str	r1, [r2, #4]
9000aea0:	4f65      	ldr	r7, [pc, #404]	; (9000b038 <HAL_I2C_Mem_Read+0x2bc>)
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000aea2:	f04f 09ff 	mov.w	r9, #255	; 0xff
  MODIFY_REG(hi2c->Instance->CR2, \
9000aea6:	f8df 819c 	ldr.w	r8, [pc, #412]	; 9000b044 <HAL_I2C_Mem_Read+0x2c8>
9000aeaa:	1c60      	adds	r0, r4, #1
9000aeac:	d127      	bne.n	9000aefe <HAL_I2C_Mem_Read+0x182>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aeae:	6993      	ldr	r3, [r2, #24]
9000aeb0:	0759      	lsls	r1, r3, #29
9000aeb2:	d5fc      	bpl.n	9000aeae <HAL_I2C_Mem_Read+0x132>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
9000aeb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
9000aeb6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
9000aeba:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
9000aebc:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->pBuffPtr++;
9000aec0:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
      hi2c->XferCount--;
9000aec4:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
9000aec6:	3301      	adds	r3, #1
      hi2c->XferCount--;
9000aec8:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
9000aeca:	f8ca 3024 	str.w	r3, [sl, #36]	; 0x24
      hi2c->XferSize--;
9000aece:	f8ba 3028 	ldrh.w	r3, [sl, #40]	; 0x28
      hi2c->XferCount--;
9000aed2:	f8aa 202a 	strh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
9000aed6:	3b01      	subs	r3, #1
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aed8:	f8ba 202a 	ldrh.w	r2, [sl, #42]	; 0x2a
      hi2c->XferSize--;
9000aedc:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aede:	b292      	uxth	r2, r2
      hi2c->XferSize--;
9000aee0:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
9000aee4:	b10a      	cbz	r2, 9000aeea <HAL_I2C_Mem_Read+0x16e>
9000aee6:	2b00      	cmp	r3, #0
9000aee8:	d046      	beq.n	9000af78 <HAL_I2C_Mem_Read+0x1fc>
    } while (hi2c->XferCount > 0U);
9000aeea:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
9000aeee:	b29b      	uxth	r3, r3
9000aef0:	2b00      	cmp	r3, #0
9000aef2:	f000 8086 	beq.w	9000b002 <HAL_I2C_Mem_Read+0x286>
9000aef6:	1c60      	adds	r0, r4, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000aef8:	f8da 2000 	ldr.w	r2, [sl]
9000aefc:	d0d7      	beq.n	9000aeae <HAL_I2C_Mem_Read+0x132>
9000aefe:	6993      	ldr	r3, [r2, #24]
9000af00:	075b      	lsls	r3, r3, #29
9000af02:	d4d7      	bmi.n	9000aeb4 <HAL_I2C_Mem_Read+0x138>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000af04:	f7fe fd44 	bl	90009990 <HAL_GetTick>
9000af08:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000af0a:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000af0e:	4284      	cmp	r4, r0
9000af10:	d301      	bcc.n	9000af16 <HAL_I2C_Mem_Read+0x19a>
9000af12:	2c00      	cmp	r4, #0
9000af14:	d1c9      	bne.n	9000aeaa <HAL_I2C_Mem_Read+0x12e>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000af16:	6993      	ldr	r3, [r2, #24]
9000af18:	f013 0304 	ands.w	r3, r3, #4
9000af1c:	d1c5      	bne.n	9000aeaa <HAL_I2C_Mem_Read+0x12e>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000af1e:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000af22:	2120      	movs	r1, #32
          return HAL_ERROR;
9000af24:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
9000af26:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000af2a:	430a      	orrs	r2, r1
9000af2c:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000af30:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000af34:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
          return HAL_ERROR;
9000af38:	e760      	b.n	9000adfc <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000af3a:	6993      	ldr	r3, [r2, #24]
9000af3c:	065f      	lsls	r7, r3, #25
9000af3e:	d49f      	bmi.n	9000ae80 <HAL_I2C_Mem_Read+0x104>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000af40:	f7fe fd26 	bl	90009990 <HAL_GetTick>
9000af44:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000af46:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000af4a:	4284      	cmp	r4, r0
9000af4c:	d301      	bcc.n	9000af52 <HAL_I2C_Mem_Read+0x1d6>
9000af4e:	2c00      	cmp	r4, #0
9000af50:	d191      	bne.n	9000ae76 <HAL_I2C_Mem_Read+0xfa>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000af52:	6993      	ldr	r3, [r2, #24]
9000af54:	f013 0340 	ands.w	r3, r3, #64	; 0x40
9000af58:	d18d      	bne.n	9000ae76 <HAL_I2C_Mem_Read+0xfa>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000af5a:	f8da 2044 	ldr.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000af5e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
9000af60:	430a      	orrs	r2, r1
9000af62:	f8ca 2044 	str.w	r2, [sl, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
9000af66:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
9000af6a:	f88a 3042 	strb.w	r3, [sl, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
9000af6e:	2300      	movs	r3, #0
      return HAL_ERROR;
9000af70:	2001      	movs	r0, #1
      __HAL_UNLOCK(hi2c);
9000af72:	f88a 3040 	strb.w	r3, [sl, #64]	; 0x40
      return HAL_ERROR;
9000af76:	e741      	b.n	9000adfc <HAL_I2C_Mem_Read+0x80>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000af78:	f8da 2000 	ldr.w	r2, [sl]
9000af7c:	1c60      	adds	r0, r4, #1
9000af7e:	d110      	bne.n	9000afa2 <HAL_I2C_Mem_Read+0x226>
9000af80:	6993      	ldr	r3, [r2, #24]
9000af82:	0619      	lsls	r1, r3, #24
9000af84:	d5fc      	bpl.n	9000af80 <HAL_I2C_Mem_Read+0x204>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
9000af86:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
9000af8a:	b29b      	uxth	r3, r3
9000af8c:	2bff      	cmp	r3, #255	; 0xff
9000af8e:	d919      	bls.n	9000afc4 <HAL_I2C_Mem_Read+0x248>
  MODIFY_REG(hi2c->Instance->CR2, \
9000af90:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
9000af92:	f8aa 9028 	strh.w	r9, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000af96:	403b      	ands	r3, r7
9000af98:	4333      	orrs	r3, r6
9000af9a:	ea43 0308 	orr.w	r3, r3, r8
9000af9e:	6053      	str	r3, [r2, #4]
}
9000afa0:	e7a3      	b.n	9000aeea <HAL_I2C_Mem_Read+0x16e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
9000afa2:	6993      	ldr	r3, [r2, #24]
9000afa4:	061b      	lsls	r3, r3, #24
9000afa6:	d4ee      	bmi.n	9000af86 <HAL_I2C_Mem_Read+0x20a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000afa8:	f7fe fcf2 	bl	90009990 <HAL_GetTick>
9000afac:	1b40      	subs	r0, r0, r5
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000afae:	f8da 2000 	ldr.w	r2, [sl]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000afb2:	4284      	cmp	r4, r0
9000afb4:	d301      	bcc.n	9000afba <HAL_I2C_Mem_Read+0x23e>
9000afb6:	2c00      	cmp	r4, #0
9000afb8:	d1e0      	bne.n	9000af7c <HAL_I2C_Mem_Read+0x200>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
9000afba:	6993      	ldr	r3, [r2, #24]
9000afbc:	f013 0380 	ands.w	r3, r3, #128	; 0x80
9000afc0:	d1dc      	bne.n	9000af7c <HAL_I2C_Mem_Read+0x200>
9000afc2:	e7ac      	b.n	9000af1e <HAL_I2C_Mem_Read+0x1a2>
          hi2c->XferSize = hi2c->XferCount;
9000afc4:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
9000afc8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000afca:	b2d9      	uxtb	r1, r3
          hi2c->XferSize = hi2c->XferCount;
9000afcc:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000afd0:	6853      	ldr	r3, [r2, #4]
9000afd2:	403b      	ands	r3, r7
9000afd4:	4333      	orrs	r3, r6
9000afd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000afda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
9000afde:	6053      	str	r3, [r2, #4]
}
9000afe0:	e783      	b.n	9000aeea <HAL_I2C_Mem_Read+0x16e>
      hi2c->XferSize = hi2c->XferCount;
9000afe2:	f8ba 302a 	ldrh.w	r3, [sl, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
9000afe6:	4812      	ldr	r0, [pc, #72]	; (9000b030 <HAL_I2C_Mem_Read+0x2b4>)
      hi2c->XferSize = hi2c->XferCount;
9000afe8:	b29b      	uxth	r3, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
9000afea:	b2d9      	uxtb	r1, r3
      hi2c->XferSize = hi2c->XferCount;
9000afec:	f8aa 3028 	strh.w	r3, [sl, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
9000aff0:	6853      	ldr	r3, [r2, #4]
9000aff2:	4003      	ands	r3, r0
9000aff4:	4333      	orrs	r3, r6
9000aff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
9000affa:	4910      	ldr	r1, [pc, #64]	; (9000b03c <HAL_I2C_Mem_Read+0x2c0>)
9000affc:	4319      	orrs	r1, r3
9000affe:	6051      	str	r1, [r2, #4]
}
9000b000:	e74e      	b.n	9000aea0 <HAL_I2C_Mem_Read+0x124>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
9000b002:	462a      	mov	r2, r5
9000b004:	4621      	mov	r1, r4
9000b006:	4650      	mov	r0, sl
9000b008:	f7ff fc5c 	bl	9000a8c4 <I2C_WaitOnSTOPFlagUntilTimeout>
9000b00c:	b970      	cbnz	r0, 9000b02c <HAL_I2C_Mem_Read+0x2b0>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000b00e:	f8da 3000 	ldr.w	r3, [sl]
9000b012:	2120      	movs	r1, #32
    I2C_RESET_CR2(hi2c);
9000b014:	4c0a      	ldr	r4, [pc, #40]	; (9000b040 <HAL_I2C_Mem_Read+0x2c4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
9000b016:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
9000b018:	685a      	ldr	r2, [r3, #4]
9000b01a:	4022      	ands	r2, r4
9000b01c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
9000b01e:	f88a 1041 	strb.w	r1, [sl, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000b022:	f88a 0040 	strb.w	r0, [sl, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
9000b026:	f88a 0042 	strb.w	r0, [sl, #66]	; 0x42
    return HAL_OK;
9000b02a:	e6e7      	b.n	9000adfc <HAL_I2C_Mem_Read+0x80>
      return HAL_ERROR;
9000b02c:	2001      	movs	r0, #1
9000b02e:	e6e5      	b.n	9000adfc <HAL_I2C_Mem_Read+0x80>
9000b030:	fc009800 	.word	0xfc009800
9000b034:	01ff2400 	.word	0x01ff2400
9000b038:	fc009c00 	.word	0xfc009c00
9000b03c:	02002400 	.word	0x02002400
9000b040:	fe00e800 	.word	0xfe00e800
9000b044:	01ff0000 	.word	0x01ff0000

9000b048 <HAL_I2C_GetState>:
  return hi2c->State;
9000b048:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
9000b04c:	4770      	bx	lr
9000b04e:	bf00      	nop

9000b050 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
9000b050:	6c40      	ldr	r0, [r0, #68]	; 0x44
}
9000b052:	4770      	bx	lr

9000b054 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000b054:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000b058:	2a20      	cmp	r2, #32
9000b05a:	d123      	bne.n	9000b0a4 <HAL_I2CEx_ConfigAnalogFilter+0x50>
9000b05c:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000b060:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000b064:	4603      	mov	r3, r0
9000b066:	2a01      	cmp	r2, #1
9000b068:	d01c      	beq.n	9000b0a4 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000b06a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000b06c:	2024      	movs	r0, #36	; 0x24
{
9000b06e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
9000b070:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000b074:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_DISABLE(hi2c);
9000b078:	6810      	ldr	r0, [r2, #0]
9000b07a:	f020 0001 	bic.w	r0, r0, #1
9000b07e:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
9000b080:	6810      	ldr	r0, [r2, #0]
9000b082:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
9000b086:	6010      	str	r0, [r2, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
9000b088:	6810      	ldr	r0, [r2, #0]
9000b08a:	4301      	orrs	r1, r0

    return HAL_OK;
9000b08c:	4670      	mov	r0, lr
    hi2c->Instance->CR1 |= AnalogFilter;
9000b08e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000b090:	6811      	ldr	r1, [r2, #0]
9000b092:	f041 0101 	orr.w	r1, r1, #1
9000b096:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000b098:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000b09c:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000b0a0:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000b0a4:	2002      	movs	r0, #2
}
9000b0a6:	4770      	bx	lr

9000b0a8 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
9000b0a8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
9000b0ac:	2a20      	cmp	r2, #32
9000b0ae:	d122      	bne.n	9000b0f6 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
9000b0b0:	4603      	mov	r3, r0
{
9000b0b2:	b500      	push	{lr}
9000b0b4:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
9000b0b8:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
9000b0bc:	2a01      	cmp	r2, #1
9000b0be:	d01c      	beq.n	9000b0fa <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
9000b0c0:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
9000b0c2:	2024      	movs	r0, #36	; 0x24
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
9000b0c4:	f04f 0c00 	mov.w	ip, #0
    hi2c->State = HAL_I2C_STATE_BUSY;
9000b0c8:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
9000b0cc:	6810      	ldr	r0, [r2, #0]
9000b0ce:	f020 0001 	bic.w	r0, r0, #1
9000b0d2:	6010      	str	r0, [r2, #0]
    tmpreg = hi2c->Instance->CR1;
9000b0d4:	6810      	ldr	r0, [r2, #0]
    tmpreg &= ~(I2C_CR1_DNF);
9000b0d6:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
    tmpreg |= DigitalFilter << 8U;
9000b0da:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    return HAL_OK;
9000b0de:	4660      	mov	r0, ip
    hi2c->Instance->CR1 = tmpreg;
9000b0e0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
9000b0e2:	6811      	ldr	r1, [r2, #0]
9000b0e4:	f041 0101 	orr.w	r1, r1, #1
9000b0e8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
9000b0ea:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
9000b0ee:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
9000b0f2:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
9000b0f6:	2002      	movs	r0, #2
}
9000b0f8:	4770      	bx	lr
    return HAL_BUSY;
9000b0fa:	2002      	movs	r0, #2
}
9000b0fc:	f85d fb04 	ldr.w	pc, [sp], #4

9000b100 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
9000b100:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9000b104:	460d      	mov	r5, r1
9000b106:	4614      	mov	r4, r2
9000b108:	469a      	mov	sl, r3

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
9000b10a:	7806      	ldrb	r6, [r0, #0]
    if ((p + i) > 256UL)
9000b10c:	4681      	mov	r9, r0
    i = (uint32_t)Bits[l];
9000b10e:	2701      	movs	r7, #1
  p = 0;
9000b110:	f04f 0800 	mov.w	r8, #0
9000b114:	e006      	b.n	9000b124 <JPEG_Bits_To_SizeCodes+0x24>
    i = (uint32_t)Bits[l];
9000b116:	f819 6f01 	ldrb.w	r6, [r9, #1]!
    if ((p + i) > 256UL)
9000b11a:	eb06 0308 	add.w	r3, r6, r8
9000b11e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000b122:	d837      	bhi.n	9000b194 <JPEG_Bits_To_SizeCodes+0x94>
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
    {
      Huffsize[p] = (uint8_t) l + 1U;
9000b124:	eb05 0008 	add.w	r0, r5, r8
9000b128:	4632      	mov	r2, r6
9000b12a:	4639      	mov	r1, r7
    while (i != 0UL)
9000b12c:	b116      	cbz	r6, 9000b134 <JPEG_Bits_To_SizeCodes+0x34>
      p++;
9000b12e:	44b0      	add	r8, r6
      Huffsize[p] = (uint8_t) l + 1U;
9000b130:	f01c f80c 	bl	9002714c <memset>
  for (l = 0; l < 16UL; l++)
9000b134:	2f10      	cmp	r7, #16
    if ((p + i) > 256UL)
9000b136:	f107 0701 	add.w	r7, r7, #1
  for (l = 0; l < 16UL; l++)
9000b13a:	d1ec      	bne.n	9000b116 <JPEG_Bits_To_SizeCodes+0x16>
      i--;
    }
  }
  Huffsize[p] = 0;
9000b13c:	2300      	movs	r3, #0
9000b13e:	f805 3008 	strb.w	r3, [r5, r8]
  *LastK = p;
9000b142:	f8ca 8000 	str.w	r8, [sl]

  /* Figure C.2: Generation of table of Huffman codes */
  code = 0;
  si = Huffsize[0];
9000b146:	7828      	ldrb	r0, [r5, #0]
9000b148:	4601      	mov	r1, r0
  p = 0;
  while (Huffsize[p] != 0U)
9000b14a:	b300      	cbz	r0, 9000b18e <JPEG_Bits_To_SizeCodes+0x8e>
9000b14c:	f06f 4840 	mvn.w	r8, #3221225472	; 0xc0000000
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000b150:	2701      	movs	r7, #1
  p = 0;
9000b152:	461a      	mov	r2, r3
    while (((uint32_t) Huffsize[p]) == si)
9000b154:	4288      	cmp	r0, r1
9000b156:	d10f      	bne.n	9000b178 <JPEG_Bits_To_SizeCodes+0x78>
9000b158:	eb02 0008 	add.w	r0, r2, r8
9000b15c:	1c56      	adds	r6, r2, #1
9000b15e:	eb05 0c02 	add.w	ip, r5, r2
9000b162:	eb04 0080 	add.w	r0, r4, r0, lsl #2
9000b166:	1af6      	subs	r6, r6, r3
      Huffcode[p] = code;
9000b168:	f840 3f04 	str.w	r3, [r0, #4]!
      p++;
9000b16c:	18f2      	adds	r2, r6, r3
    while (((uint32_t) Huffsize[p]) == si)
9000b16e:	f81c ef01 	ldrb.w	lr, [ip, #1]!
      code++;
9000b172:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
9000b174:	458e      	cmp	lr, r1
9000b176:	d0f7      	beq.n	9000b168 <JPEG_Bits_To_SizeCodes+0x68>
    if(si > 31UL)
9000b178:	291f      	cmp	r1, #31
9000b17a:	d80b      	bhi.n	9000b194 <JPEG_Bits_To_SizeCodes+0x94>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
9000b17c:	fa07 f001 	lsl.w	r0, r7, r1
9000b180:	4298      	cmp	r0, r3
9000b182:	d907      	bls.n	9000b194 <JPEG_Bits_To_SizeCodes+0x94>
  while (Huffsize[p] != 0U)
9000b184:	5ca8      	ldrb	r0, [r5, r2]
    {
      return HAL_ERROR;
    }
    code <<= 1;
9000b186:	005b      	lsls	r3, r3, #1
    si++;
9000b188:	3101      	adds	r1, #1
  while (Huffsize[p] != 0U)
9000b18a:	2800      	cmp	r0, #0
9000b18c:	d1e2      	bne.n	9000b154 <JPEG_Bits_To_SizeCodes+0x54>
  }
  /* Return function status */
  return HAL_OK;
9000b18e:	2000      	movs	r0, #0
}
9000b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return HAL_ERROR;
9000b194:	2001      	movs	r0, #1
}
9000b196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9000b19a:	bf00      	nop

9000b19c <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
9000b19c:	b5f0      	push	{r4, r5, r6, r7, lr}
9000b19e:	f2ad 5d14 	subw	sp, sp, #1300	; 0x514
9000b1a2:	460d      	mov	r5, r1
9000b1a4:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000b1a6:	ab01      	add	r3, sp, #4
9000b1a8:	aa43      	add	r2, sp, #268	; 0x10c
9000b1aa:	a902      	add	r1, sp, #8
9000b1ac:	f7ff ffa8 	bl	9000b100 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000b1b0:	b9d0      	cbnz	r0, 9000b1e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
9000b1b2:	9f01      	ldr	r7, [sp, #4]
9000b1b4:	b1c7      	cbz	r7, 9000b1e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
9000b1b6:	370f      	adds	r7, #15
9000b1b8:	f50d 7e86 	add.w	lr, sp, #268	; 0x10c
9000b1bc:	a902      	add	r1, sp, #8
9000b1be:	f104 0c0f 	add.w	ip, r4, #15
9000b1c2:	4427      	add	r7, r4
9000b1c4:	e009      	b.n	9000b1da <JPEG_DCHuff_BitsVals_To_SizeCodes+0x3e>
      return HAL_ERROR; /* Huffman Table overflow error*/
    }
    else
    {
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b1c6:	f811 2b01 	ldrb.w	r2, [r1], #1
  while (k < lastK)
9000b1ca:	45bc      	cmp	ip, r7
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b1cc:	f85e 6b04 	ldr.w	r6, [lr], #4
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b1d0:	f102 32ff 	add.w	r2, r2, #4294967295
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b1d4:	60e6      	str	r6, [r4, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b1d6:	54ea      	strb	r2, [r5, r3]
  while (k < lastK)
9000b1d8:	d006      	beq.n	9000b1e8 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4c>
    l = DC_BitsValsTable->HuffVal[k];
9000b1da:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000b1de:	2b0b      	cmp	r3, #11
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b1e0:	eb05 0483 	add.w	r4, r5, r3, lsl #2
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
9000b1e4:	d9ef      	bls.n	9000b1c6 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2a>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000b1e6:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000b1e8:	f20d 5d14 	addw	sp, sp, #1300	; 0x514
9000b1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
9000b1ee:	bf00      	nop

9000b1f0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
9000b1f0:	b510      	push	{r4, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000b1f2:	6804      	ldr	r4, [r0, #0]
{
9000b1f4:	4608      	mov	r0, r1
9000b1f6:	b090      	sub	sp, #64	; 0x40
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
9000b1f8:	f504 61f8 	add.w	r1, r4, #1984	; 0x7c0
9000b1fc:	428a      	cmp	r2, r1
9000b1fe:	f000 808c 	beq.w	9000b31a <JPEG_Set_HuffDC_Mem+0x12a>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
9000b202:	f504 61fc 	add.w	r1, r4, #2016	; 0x7e0
9000b206:	428a      	cmp	r2, r1
9000b208:	d002      	beq.n	9000b210 <JPEG_Set_HuffDC_Mem+0x20>
  {
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
  }
  else
  {
    return HAL_ERROR;
9000b20a:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000b20c:	b010      	add	sp, #64	; 0x40
9000b20e:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000b210:	f504 64ff 	add.w	r4, r4, #2040	; 0x7f8
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
9000b214:	a901      	add	r1, sp, #4
9000b216:	f7ff ffc1 	bl	9000b19c <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
9000b21a:	2800      	cmp	r0, #0
9000b21c:	d1f6      	bne.n	9000b20c <JPEG_Set_HuffDC_Mem+0x1c>
    *addressDef = 0x0FFF0FFF;
9000b21e:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
9000b222:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
9000b224:	6063      	str	r3, [r4, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b226:	f89d 200f 	ldrb.w	r2, [sp, #15]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b22a:	f89d 300e 	ldrb.w	r3, [sp, #14]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b22e:	0212      	lsls	r2, r2, #8
9000b230:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b234:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b236:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b23a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b23e:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b240:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
9000b244:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b246:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b24a:	f844 3c04 	str.w	r3, [r4, #-4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b24e:	f89d 200d 	ldrb.w	r2, [sp, #13]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b252:	f89d 300c 	ldrb.w	r3, [sp, #12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b256:	0212      	lsls	r2, r2, #8
9000b258:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b25c:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b25e:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b262:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b266:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b268:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
9000b26c:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b26e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b272:	f844 3c08 	str.w	r3, [r4, #-8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b276:	f89d 200b 	ldrb.w	r2, [sp, #11]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b27a:	f89d 300a 	ldrb.w	r3, [sp, #10]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b27e:	0212      	lsls	r2, r2, #8
9000b280:	f89d 102c 	ldrb.w	r1, [sp, #44]	; 0x2c
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b284:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b286:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b28a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b28e:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b290:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
9000b294:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b296:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b29a:	f844 3c0c 	str.w	r3, [r4, #-12]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b29e:	f89d 2009 	ldrb.w	r2, [sp, #9]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2a6:	0212      	lsls	r2, r2, #8
9000b2a8:	f89d 1024 	ldrb.w	r1, [sp, #36]	; 0x24
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2ac:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2ae:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2b6:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2b8:	f89d 1020 	ldrb.w	r1, [sp, #32]
9000b2bc:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b2be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b2c2:	f844 3c10 	str.w	r3, [r4, #-16]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2c6:	f89d 2007 	ldrb.w	r2, [sp, #7]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2ce:	0212      	lsls	r2, r2, #8
9000b2d0:	f89d 101c 	ldrb.w	r1, [sp, #28]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2d4:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2d6:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2da:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2de:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2e0:	f89d 1018 	ldrb.w	r1, [sp, #24]
9000b2e4:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b2e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b2ea:	f844 3c14 	str.w	r3, [r4, #-20]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2ee:	f89d 2005 	ldrb.w	r2, [sp, #5]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2f2:	f89d 3004 	ldrb.w	r3, [sp, #4]
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2f6:	0212      	lsls	r2, r2, #8
9000b2f8:	f89d 1014 	ldrb.w	r1, [sp, #20]
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2fc:	021b      	lsls	r3, r3, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b2fe:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b302:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b306:	430a      	orrs	r2, r1
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
9000b308:	f89d 1010 	ldrb.w	r1, [sp, #16]
9000b30c:	430b      	orrs	r3, r1
      *address = lsb | (msb << 16);
9000b30e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b312:	f844 3c18 	str.w	r3, [r4, #-24]
}
9000b316:	b010      	add	sp, #64	; 0x40
9000b318:	bd10      	pop	{r4, pc}
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
9000b31a:	f504 64fb 	add.w	r4, r4, #2008	; 0x7d8
9000b31e:	e779      	b.n	9000b214 <JPEG_Set_HuffDC_Mem+0x24>

9000b320 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
9000b320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000b324:	6804      	ldr	r4, [r0, #0]
{
9000b326:	f6ad 0d3c 	subw	sp, sp, #2108	; 0x83c
9000b32a:	460d      	mov	r5, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
9000b32c:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
9000b330:	429a      	cmp	r2, r3
9000b332:	d041      	beq.n	9000b3b8 <JPEG_Set_HuffAC_Mem+0x98>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
  }
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
9000b334:	f504 63cc 	add.w	r3, r4, #1632	; 0x660
9000b338:	429a      	cmp	r2, r3
9000b33a:	d004      	beq.n	9000b346 <JPEG_Set_HuffAC_Mem+0x26>
      return HAL_ERROR; /* Huffman Table overflow error*/
9000b33c:	2001      	movs	r0, #1
    }
  }

  /* Return function status */
  return HAL_OK;
}
9000b33e:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000b342:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000b346:	f204 74a4 	addw	r4, r4, #1956	; 0x7a4
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
9000b34a:	4628      	mov	r0, r5
9000b34c:	466b      	mov	r3, sp
9000b34e:	f20d 4234 	addw	r2, sp, #1076	; 0x434
9000b352:	a901      	add	r1, sp, #4
9000b354:	f7ff fed4 	bl	9000b100 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
9000b358:	2800      	cmp	r0, #0
9000b35a:	d1f0      	bne.n	9000b33e <JPEG_Set_HuffAC_Mem+0x1e>
  while (k < lastK)
9000b35c:	9b00      	ldr	r3, [sp, #0]
9000b35e:	b373      	cbz	r3, 9000b3be <JPEG_Set_HuffAC_Mem+0x9e>
9000b360:	330f      	adds	r3, #15
9000b362:	f20d 4734 	addw	r7, sp, #1076	; 0x434
9000b366:	f10d 0c04 	add.w	ip, sp, #4
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b36a:	ae42      	add	r6, sp, #264	; 0x108
9000b36c:	eb05 0e03 	add.w	lr, r5, r3
9000b370:	350f      	adds	r5, #15
9000b372:	e011      	b.n	9000b398 <JPEG_Set_HuffAC_Mem+0x78>
      l = (msb * 10UL) + lsb - 1UL;
9000b374:	eb02 0343 	add.w	r3, r2, r3, lsl #1
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
9000b378:	2ba1      	cmp	r3, #161	; 0xa1
9000b37a:	d8df      	bhi.n	9000b33c <JPEG_Set_HuffAC_Mem+0x1c>
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b37c:	f81c 2b01 	ldrb.w	r2, [ip], #1
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b380:	eb06 0883 	add.w	r8, r6, r3, lsl #2
9000b384:	f857 9b04 	ldr.w	r9, [r7], #4
  while (k < lastK)
9000b388:	45ae      	cmp	lr, r5
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b38a:	f102 32ff 	add.w	r2, r2, #4294967295
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
9000b38e:	4631      	mov	r1, r6
9000b390:	f8c8 90a4 	str.w	r9, [r8, #164]	; 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
9000b394:	54f2      	strb	r2, [r6, r3]
  while (k < lastK)
9000b396:	d013      	beq.n	9000b3c0 <JPEG_Set_HuffAC_Mem+0xa0>
    l = AC_BitsValsTable->HuffVal[k];
9000b398:	f815 1f01 	ldrb.w	r1, [r5, #1]!
      l = 160; /*l = 0x00 EOB code*/
9000b39c:	23a0      	movs	r3, #160	; 0xa0
    if (l == 0UL)
9000b39e:	2900      	cmp	r1, #0
9000b3a0:	d0ec      	beq.n	9000b37c <JPEG_Set_HuffAC_Mem+0x5c>
      msb = (l & 0xF0UL) >> 4;
9000b3a2:	090b      	lsrs	r3, r1, #4
      lsb = (l & 0x0FUL);
9000b3a4:	f001 020f 	and.w	r2, r1, #15
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000b3a8:	29f0      	cmp	r1, #240	; 0xf0
      l = (msb * 10UL) + lsb - 1UL;
9000b3aa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9000b3ae:	f102 32ff 	add.w	r2, r2, #4294967295
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
9000b3b2:	d1df      	bne.n	9000b374 <JPEG_Set_HuffAC_Mem+0x54>
      l = 161;
9000b3b4:	23a1      	movs	r3, #161	; 0xa1
9000b3b6:	e7e1      	b.n	9000b37c <JPEG_Set_HuffAC_Mem+0x5c>
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
9000b3b8:	f204 6444 	addw	r4, r4, #1604	; 0x644
9000b3bc:	e7c5      	b.n	9000b34a <JPEG_Set_HuffAC_Mem+0x2a>
9000b3be:	a942      	add	r1, sp, #264	; 0x108
      *addressDef = 0x0FFF0FFF;
9000b3c0:	f06f 23f0 	mvn.w	r3, #4026593280	; 0xf000f000
    *addressDef = 0x0FD10FD0;
9000b3c4:	4a19      	ldr	r2, [pc, #100]	; (9000b42c <JPEG_Set_HuffAC_Mem+0x10c>)
9000b3c6:	eba1 0c81 	sub.w	ip, r1, r1, lsl #2
9000b3ca:	f10d 0566 	add.w	r5, sp, #102	; 0x66
      *addressDef = 0x0FFF0FFF;
9000b3ce:	6023      	str	r3, [r4, #0]
9000b3d0:	6063      	str	r3, [r4, #4]
9000b3d2:	f50c 7e4a 	add.w	lr, ip, #808	; 0x328
9000b3d6:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD30FD2;
9000b3d8:	f103 33d3 	add.w	r3, r3, #3553874899	; 0xd3d3d3d3
    *addressDef = 0x0FD10FD0;
9000b3dc:	60e2      	str	r2, [r4, #12]
    *addressDef = 0x0FD30FD2;
9000b3de:	f50c 7c49 	add.w	ip, ip, #804	; 0x324
9000b3e2:	f103 232c 	add.w	r3, r3, #738208768	; 0x2c002c00
9000b3e6:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
9000b3e8:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000b3ec:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
9000b3ee:	f103 1302 	add.w	r3, r3, #131074	; 0x20002
9000b3f2:	61a3      	str	r3, [r4, #24]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b3f4:	f891 20a1 	ldrb.w	r2, [r1, #161]	; 0xa1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b3f8:	f891 30a0 	ldrb.w	r3, [r1, #160]	; 0xa0
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b3fc:	0212      	lsls	r2, r2, #8
9000b3fe:	f81e 7021 	ldrb.w	r7, [lr, r1, lsl #2]
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b402:	021b      	lsls	r3, r3, #8
9000b404:	f81c 6021 	ldrb.w	r6, [ip, r1, lsl #2]
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b408:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
    while (i > 1UL)
9000b40c:	3902      	subs	r1, #2
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b40e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b412:	433a      	orrs	r2, r7
    while (i > 1UL)
9000b414:	428d      	cmp	r5, r1
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
9000b416:	ea43 0306 	orr.w	r3, r3, r6
      *address = lsb | (msb << 16);
9000b41a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
9000b41e:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
9000b422:	d1e7      	bne.n	9000b3f4 <JPEG_Set_HuffAC_Mem+0xd4>
}
9000b424:	f60d 0d3c 	addw	sp, sp, #2108	; 0x83c
9000b428:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000b42c:	0fd10fd0 	.word	0x0fd10fd0

9000b430 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
9000b430:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b432:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
9000b436:	6543      	str	r3, [r0, #84]	; 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000b438:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b43a:	f003 0303 	and.w	r3, r3, #3
9000b43e:	2b02      	cmp	r3, #2
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
9000b440:	6803      	ldr	r3, [r0, #0]
9000b442:	685a      	ldr	r2, [r3, #4]
9000b444:	bf0c      	ite	eq
9000b446:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
9000b44a:	f022 0208 	bicne.w	r2, r2, #8
9000b44e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b450:	681a      	ldr	r2, [r3, #0]
9000b452:	f022 0201 	bic.w	r2, r2, #1
9000b456:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b458:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b45a:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000b45e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000b460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b462:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
9000b466:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000b468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b46a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
9000b46e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000b472:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b476:	639a      	str	r2, [r3, #56]	; 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
9000b478:	681a      	ldr	r2, [r3, #0]
9000b47a:	f042 0201 	orr.w	r2, r2, #1
9000b47e:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b480:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000b482:	f002 020c 	and.w	r2, r2, #12
9000b486:	2a08      	cmp	r2, #8
9000b488:	d00a      	beq.n	9000b4a0 <JPEG_Init_Process+0x70>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b48a:	6d42      	ldr	r2, [r0, #84]	; 0x54
9000b48c:	f002 020c 	and.w	r2, r2, #12
9000b490:	2a0c      	cmp	r2, #12
9000b492:	d000      	beq.n	9000b496 <JPEG_Init_Process+0x66>
  }
  else
  {
    /* Nothing to do */
  }
}
9000b494:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000b496:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b498:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000b49c:	631a      	str	r2, [r3, #48]	; 0x30
}
9000b49e:	4770      	bx	lr
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
9000b4a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000b4a2:	f042 026e 	orr.w	r2, r2, #110	; 0x6e
9000b4a6:	631a      	str	r2, [r3, #48]	; 0x30
9000b4a8:	4770      	bx	lr
9000b4aa:	bf00      	nop

9000b4ac <JPEG_DMA_StartProcess>:
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b4ac:	6b01      	ldr	r1, [r0, #48]	; 0x30
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b4ae:	6a82      	ldr	r2, [r0, #40]	; 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000b4b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b4b2:	429a      	cmp	r2, r3
9000b4b4:	d332      	bcc.n	9000b51c <JPEG_DMA_StartProcess+0x70>
{
9000b4b6:	b5f0      	push	{r4, r5, r6, r7, lr}
9000b4b8:	4604      	mov	r4, r0
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b4ba:	6b40      	ldr	r0, [r0, #52]	; 0x34
{
9000b4bc:	b083      	sub	sp, #12
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b4be:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000b4c0:	6a86      	ldr	r6, [r0, #40]	; 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
9000b4c2:	42b5      	cmp	r5, r6
9000b4c4:	d327      	bcc.n	9000b516 <JPEG_DMA_StartProcess+0x6a>
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b4c6:	4f1c      	ldr	r7, [pc, #112]	; (9000b538 <JPEG_DMA_StartProcess+0x8c>)
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b4c8:	f8df c078 	ldr.w	ip, [pc, #120]	; 9000b544 <JPEG_DMA_StartProcess+0x98>
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b4cc:	654f      	str	r7, [r1, #84]	; 0x54
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
9000b4ce:	f8c1 c044 	str.w	ip, [r1, #68]	; 0x44

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b4d2:	491a      	ldr	r1, [pc, #104]	; (9000b53c <JPEG_DMA_StartProcess+0x90>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
9000b4d4:	6547      	str	r7, [r0, #84]	; 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
9000b4d6:	6441      	str	r1, [r0, #68]	; 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
9000b4d8:	4919      	ldr	r1, [pc, #100]	; (9000b540 <JPEG_DMA_StartProcess+0x94>)
9000b4da:	6581      	str	r1, [r0, #88]	; 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
9000b4dc:	b1a3      	cbz	r3, 9000b508 <JPEG_DMA_StartProcess+0x5c>
9000b4de:	b19e      	cbz	r6, 9000b508 <JPEG_DMA_StartProcess+0x5c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b4e0:	fbb2 f1f3 	udiv	r1, r2, r3
9000b4e4:	fb03 2311 	mls	r3, r3, r1, r2
  /*MDMA transfer size (BNDTR) must be a multiple of MDMA buffer size (TLEN)*/
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);


  /* Start MDMA FIFO Out transfer */
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b4e8:	6821      	ldr	r1, [r4, #0]
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b4ea:	1ad2      	subs	r2, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b4ec:	3144      	adds	r1, #68	; 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000b4ee:	fbb5 f3f6 	udiv	r3, r5, r6
9000b4f2:	fb06 5313 	mls	r3, r6, r3, r5
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000b4f6:	62a2      	str	r2, [r4, #40]	; 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000b4f8:	1aeb      	subs	r3, r5, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b4fa:	2501      	movs	r5, #1
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
9000b4fc:	62e3      	str	r3, [r4, #44]	; 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000b4fe:	9500      	str	r5, [sp, #0]
9000b500:	69e2      	ldr	r2, [r4, #28]
9000b502:	f001 fbdd 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000b506:	b158      	cbz	r0, 9000b520 <JPEG_DMA_StartProcess+0x74>
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b508:	6d23      	ldr	r3, [r4, #80]	; 0x50
    return HAL_ERROR;
9000b50a:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000b50c:	f043 0304 	orr.w	r3, r3, #4
9000b510:	6523      	str	r3, [r4, #80]	; 0x50
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
9000b512:	b003      	add	sp, #12
9000b514:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b516:	2001      	movs	r0, #1
}
9000b518:	b003      	add	sp, #12
9000b51a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000b51c:	2001      	movs	r0, #1
}
9000b51e:	4770      	bx	lr
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000b520:	6822      	ldr	r2, [r4, #0]
9000b522:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000b524:	69a1      	ldr	r1, [r4, #24]
9000b526:	3240      	adds	r2, #64	; 0x40
9000b528:	9500      	str	r5, [sp, #0]
9000b52a:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000b52c:	f001 fbc8 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000b530:	2800      	cmp	r0, #0
9000b532:	d0f1      	beq.n	9000b518 <JPEG_DMA_StartProcess+0x6c>
9000b534:	e7e8      	b.n	9000b508 <JPEG_DMA_StartProcess+0x5c>
9000b536:	bf00      	nop
9000b538:	9000ba71 	.word	0x9000ba71
9000b53c:	9000bced 	.word	0x9000bced
9000b540:	9000bd71 	.word	0x9000bd71
9000b544:	9000ba9d 	.word	0x9000ba9d

9000b548 <HAL_JPEG_GetInfo.part.0>:
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b548:	6803      	ldr	r3, [r0, #0]
9000b54a:	685a      	ldr	r2, [r3, #4]
9000b54c:	f002 0203 	and.w	r2, r2, #3
9000b550:	2a02      	cmp	r2, #2
HAL_StatusTypeDef HAL_JPEG_GetInfo(JPEG_HandleTypeDef *hjpeg, JPEG_ConfTypeDef *pInfo)
9000b552:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9000b556:	4689      	mov	r9, r1
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
9000b558:	f000 809d 	beq.w	9000b696 <HAL_JPEG_GetInfo.part.0+0x14e>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
9000b55c:	685a      	ldr	r2, [r3, #4]
9000b55e:	f012 0203 	ands.w	r2, r2, #3
9000b562:	d174      	bne.n	9000b64e <HAL_JPEG_GetInfo.part.0+0x106>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b564:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_GRAYSCALE_COLORSPACE;
9000b566:	600a      	str	r2, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b568:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b56a:	0c24      	lsrs	r4, r4, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b56c:	0c12      	lsrs	r2, r2, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b56e:	608c      	str	r4, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b570:	60ca      	str	r2, [r1, #12]
      pInfo->ChromaSubsampling = JPEG_444_SUBSAMPLING;
9000b572:	2200      	movs	r2, #0
9000b574:	f8c9 2004 	str.w	r2, [r9, #4]
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;
9000b578:	4a5f      	ldr	r2, [pc, #380]	; (9000b6f8 <HAL_JPEG_GetInfo.part.0+0x1b0>)
9000b57a:	f103 0c50 	add.w	ip, r3, #80	; 0x50
  uint32_t quality = 0;
9000b57e:	2600      	movs	r6, #0
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b580:	f04f 0e64 	mov.w	lr, #100	; 0x64
9000b584:	f102 0540 	add.w	r5, r2, #64	; 0x40
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
9000b588:	f241 3488 	movw	r4, #5000	; 0x1388
9000b58c:	e033      	b.n	9000b5f6 <HAL_JPEG_GetInfo.part.0+0xae>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b58e:	f892 8001 	ldrb.w	r8, [r2, #1]
9000b592:	fb0e f707 	mul.w	r7, lr, r7
9000b596:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b598:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b59c:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b5a0:	2f64      	cmp	r7, #100	; 0x64
9000b5a2:	d969      	bls.n	9000b678 <HAL_JPEG_GetInfo.part.0+0x130>
          quality += 5000UL / scale;
9000b5a4:	fbb4 f7f7 	udiv	r7, r4, r7
9000b5a8:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b5aa:	f3c3 4707 	ubfx	r7, r3, #16, #8
      if (quantVal == 1UL)
9000b5ae:	2f01      	cmp	r7, #1
9000b5b0:	d03d      	beq.n	9000b62e <HAL_JPEG_GetInfo.part.0+0xe6>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b5b2:	f892 8002 	ldrb.w	r8, [r2, #2]
9000b5b6:	fb0e f707 	mul.w	r7, lr, r7
9000b5ba:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b5bc:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b5c0:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b5c4:	2f64      	cmp	r7, #100	; 0x64
9000b5c6:	d952      	bls.n	9000b66e <HAL_JPEG_GetInfo.part.0+0x126>
          quality += 5000UL / scale;
9000b5c8:	fbb4 f7f7 	udiv	r7, r4, r7
9000b5cc:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b5ce:	0e1b      	lsrs	r3, r3, #24
      if (quantVal == 1UL)
9000b5d0:	2b01      	cmp	r3, #1
9000b5d2:	d030      	beq.n	9000b636 <HAL_JPEG_GetInfo.part.0+0xee>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b5d4:	78d7      	ldrb	r7, [r2, #3]
9000b5d6:	fb0e f303 	mul.w	r3, lr, r3
9000b5da:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b5dc:	5dcf      	ldrb	r7, [r1, r7]
9000b5de:	fbb3 f3f7 	udiv	r3, r3, r7
        if (scale <= 100UL)
9000b5e2:	2b64      	cmp	r3, #100	; 0x64
9000b5e4:	d952      	bls.n	9000b68c <HAL_JPEG_GetInfo.part.0+0x144>
          quality += 5000UL / scale;
9000b5e6:	fbb4 f3f3 	udiv	r3, r4, r3
9000b5ea:	441e      	add	r6, r3
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b5ec:	3204      	adds	r2, #4
        }
      }
    }

    i += 4UL;
    tableAddress ++;
9000b5ee:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b5f2:	4295      	cmp	r5, r2
9000b5f4:	d025      	beq.n	9000b642 <HAL_JPEG_GetInfo.part.0+0xfa>
    quantRow = *tableAddress;
9000b5f6:	f8dc 3000 	ldr.w	r3, [ip]
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b5fa:	b2df      	uxtb	r7, r3
      if (quantVal == 1UL)
9000b5fc:	2f01      	cmp	r7, #1
9000b5fe:	d034      	beq.n	9000b66a <HAL_JPEG_GetInfo.part.0+0x122>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
9000b600:	f892 8000 	ldrb.w	r8, [r2]
9000b604:	fb0e f707 	mul.w	r7, lr, r7
9000b608:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
9000b60a:	f811 8008 	ldrb.w	r8, [r1, r8]
9000b60e:	fbb7 f7f8 	udiv	r7, r7, r8
        if (scale <= 100UL)
9000b612:	2f64      	cmp	r7, #100	; 0x64
9000b614:	d935      	bls.n	9000b682 <HAL_JPEG_GetInfo.part.0+0x13a>
          quality += 5000UL / scale;
9000b616:	fbb4 f7f7 	udiv	r7, r4, r7
9000b61a:	443e      	add	r6, r7
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b61c:	f3c3 2707 	ubfx	r7, r3, #8, #8
      if (quantVal == 1UL)
9000b620:	2f01      	cmp	r7, #1
9000b622:	d1b4      	bne.n	9000b58e <HAL_JPEG_GetInfo.part.0+0x46>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b624:	f3c3 4707 	ubfx	r7, r3, #16, #8
        quality += 100UL;
9000b628:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b62a:	2f01      	cmp	r7, #1
9000b62c:	d1c1      	bne.n	9000b5b2 <HAL_JPEG_GetInfo.part.0+0x6a>
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
9000b62e:	0e1b      	lsrs	r3, r3, #24
        quality += 100UL;
9000b630:	3664      	adds	r6, #100	; 0x64
      if (quantVal == 1UL)
9000b632:	2b01      	cmp	r3, #1
9000b634:	d1ce      	bne.n	9000b5d4 <HAL_JPEG_GetInfo.part.0+0x8c>
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b636:	3204      	adds	r2, #4
        quality += 100UL;
9000b638:	3664      	adds	r6, #100	; 0x64
    tableAddress ++;
9000b63a:	f10c 0c04 	add.w	ip, ip, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
9000b63e:	4295      	cmp	r5, r2
9000b640:	d1d9      	bne.n	9000b5f6 <HAL_JPEG_GetInfo.part.0+0xae>
  }

  return (quality / 64UL);
9000b642:	09b6      	lsrs	r6, r6, #6
  return HAL_OK;
9000b644:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
9000b646:	f8c9 6010 	str.w	r6, [r9, #16]
}
9000b64a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
9000b64e:	685a      	ldr	r2, [r3, #4]
9000b650:	f002 0203 	and.w	r2, r2, #3
9000b654:	2a03      	cmp	r2, #3
9000b656:	d14b      	bne.n	9000b6f0 <HAL_JPEG_GetInfo.part.0+0x1a8>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b658:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
9000b65a:	2530      	movs	r5, #48	; 0x30
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b65c:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b65e:	0c24      	lsrs	r4, r4, #16
    pInfo->ColorSpace = JPEG_CMYK_COLORSPACE;
9000b660:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b662:	0c12      	lsrs	r2, r2, #16
9000b664:	e9c1 4202 	strd	r4, r2, [r1, #8]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
9000b668:	e01d      	b.n	9000b6a6 <HAL_JPEG_GetInfo.part.0+0x15e>
        quality += 100UL;
9000b66a:	3664      	adds	r6, #100	; 0x64
9000b66c:	e7d6      	b.n	9000b61c <HAL_JPEG_GetInfo.part.0+0xd4>
          quality += (200UL - scale) / 2UL;
9000b66e:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b672:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b676:	e7aa      	b.n	9000b5ce <HAL_JPEG_GetInfo.part.0+0x86>
9000b678:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b67c:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b680:	e793      	b.n	9000b5aa <HAL_JPEG_GetInfo.part.0+0x62>
9000b682:	f1c7 07c8 	rsb	r7, r7, #200	; 0xc8
9000b686:	eb06 0657 	add.w	r6, r6, r7, lsr #1
9000b68a:	e7c7      	b.n	9000b61c <HAL_JPEG_GetInfo.part.0+0xd4>
9000b68c:	f1c3 03c8 	rsb	r3, r3, #200	; 0xc8
9000b690:	eb06 0653 	add.w	r6, r6, r3, lsr #1
9000b694:	e7aa      	b.n	9000b5ec <HAL_JPEG_GetInfo.part.0+0xa4>
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b696:	685c      	ldr	r4, [r3, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b698:	2510      	movs	r5, #16
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b69a:	68da      	ldr	r2, [r3, #12]
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
9000b69c:	40ec      	lsrs	r4, r5
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
9000b69e:	600d      	str	r5, [r1, #0]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
9000b6a0:	40ea      	lsrs	r2, r5
9000b6a2:	e9c1 4202 	strd	r4, r2, [r1, #8]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b6a6:	691a      	ldr	r2, [r3, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b6a8:	695d      	ldr	r5, [r3, #20]
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b6aa:	699c      	ldr	r4, [r3, #24]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b6ac:	0916      	lsrs	r6, r2, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b6ae:	f015 0ff0 	tst.w	r5, #240	; 0xf0
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
9000b6b2:	f3c2 1203 	ubfx	r2, r2, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
9000b6b6:	ea4f 1414 	mov.w	r4, r4, lsr #4
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
9000b6ba:	ea4f 1715 	mov.w	r7, r5, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b6be:	d108      	bne.n	9000b6d2 <HAL_JPEG_GetInfo.part.0+0x18a>
9000b6c0:	2a01      	cmp	r2, #1
9000b6c2:	d106      	bne.n	9000b6d2 <HAL_JPEG_GetInfo.part.0+0x18a>
9000b6c4:	0726      	lsls	r6, r4, #28
9000b6c6:	f47f af54 	bne.w	9000b572 <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
9000b6ca:	2202      	movs	r2, #2
9000b6cc:	f8c9 2004 	str.w	r2, [r9, #4]
9000b6d0:	e752      	b.n	9000b578 <HAL_JPEG_GetInfo.part.0+0x30>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b6d2:	433e      	orrs	r6, r7
9000b6d4:	0735      	lsls	r5, r6, #28
9000b6d6:	f43f af4c 	beq.w	9000b572 <HAL_JPEG_GetInfo.part.0+0x2a>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
9000b6da:	433c      	orrs	r4, r7
9000b6dc:	0721      	lsls	r1, r4, #28
9000b6de:	f47f af48 	bne.w	9000b572 <HAL_JPEG_GetInfo.part.0+0x2a>
9000b6e2:	2a03      	cmp	r2, #3
9000b6e4:	f47f af45 	bne.w	9000b572 <HAL_JPEG_GetInfo.part.0+0x2a>
      pInfo->ChromaSubsampling = JPEG_420_SUBSAMPLING;
9000b6e8:	2201      	movs	r2, #1
9000b6ea:	f8c9 2004 	str.w	r2, [r9, #4]
9000b6ee:	e743      	b.n	9000b578 <HAL_JPEG_GetInfo.part.0+0x30>
    return HAL_ERROR;
9000b6f0:	2001      	movs	r0, #1
}
9000b6f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9000b6f6:	bf00      	nop
9000b6f8:	9002adf4 	.word	0x9002adf4

9000b6fc <HAL_JPEG_Init>:
  if (hjpeg == NULL)
9000b6fc:	2800      	cmp	r0, #0
9000b6fe:	f000 810b 	beq.w	9000b918 <HAL_JPEG_Init+0x21c>
{
9000b702:	b570      	push	{r4, r5, r6, lr}
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
9000b704:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000b708:	4604      	mov	r4, r0
9000b70a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000b70e:	2b00      	cmp	r3, #0
9000b710:	f000 80fd 	beq.w	9000b90e <HAL_JPEG_Init+0x212>
  __HAL_JPEG_ENABLE(hjpeg);
9000b714:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b716:	2102      	movs	r1, #2
  hjpeg->QuantTable2 = NULL;
9000b718:	2300      	movs	r3, #0
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b71a:	4880      	ldr	r0, [pc, #512]	; (9000b91c <HAL_JPEG_Init+0x220>)
  hjpeg->State = HAL_JPEG_STATE_BUSY;
9000b71c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  __HAL_JPEG_ENABLE(hjpeg);
9000b720:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b722:	f041 0101 	orr.w	r1, r1, #1
9000b726:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000b728:	6811      	ldr	r1, [r2, #0]
9000b72a:	f021 0101 	bic.w	r1, r1, #1
9000b72e:	6011      	str	r1, [r2, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000b730:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b732:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000b736:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
9000b738:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b73a:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
9000b73e:	6311      	str	r1, [r2, #48]	; 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
9000b740:	6b11      	ldr	r1, [r2, #48]	; 0x30
9000b742:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
9000b746:	6311      	str	r1, [r2, #48]	; 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000b748:	6b91      	ldr	r1, [r2, #56]	; 0x38
9000b74a:	f041 0160 	orr.w	r1, r1, #96	; 0x60
9000b74e:	6391      	str	r1, [r2, #56]	; 0x38
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b750:	4973      	ldr	r1, [pc, #460]	; (9000b920 <HAL_JPEG_Init+0x224>)
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
9000b752:	63e0      	str	r0, [r4, #60]	; 0x3c
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b754:	2001      	movs	r0, #1
  hjpeg->QuantTable3 = NULL;
9000b756:	64a3      	str	r3, [r4, #72]	; 0x48
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
9000b758:	e9c4 1310 	strd	r1, r3, [r4, #64]	; 0x40
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b75c:	f8c2 336c 	str.w	r3, [r2, #876]	; 0x36c
9000b760:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
9000b764:	4b6f      	ldr	r3, [pc, #444]	; (9000b924 <HAL_JPEG_Init+0x228>)
9000b766:	f8c2 0368 	str.w	r0, [r2, #872]	; 0x368
9000b76a:	f8c2 1364 	str.w	r1, [r2, #868]	; 0x364
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b76e:	486e      	ldr	r0, [pc, #440]	; (9000b928 <HAL_JPEG_Init+0x22c>)
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b770:	f8c2 3360 	str.w	r3, [r2, #864]	; 0x360
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b774:	4b6d      	ldr	r3, [pc, #436]	; (9000b92c <HAL_JPEG_Init+0x230>)
9000b776:	f8c2 0378 	str.w	r0, [r2, #888]	; 0x378
9000b77a:	496d      	ldr	r1, [pc, #436]	; (9000b930 <HAL_JPEG_Init+0x234>)
9000b77c:	f8c2 3374 	str.w	r3, [r2, #884]	; 0x374
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b780:	4b6c      	ldr	r3, [pc, #432]	; (9000b934 <HAL_JPEG_Init+0x238>)
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b782:	f8c2 1370 	str.w	r1, [r2, #880]	; 0x370
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
9000b786:	486c      	ldr	r0, [pc, #432]	; (9000b938 <HAL_JPEG_Init+0x23c>)
9000b788:	f8c2 3388 	str.w	r3, [r2, #904]	; 0x388
9000b78c:	496b      	ldr	r1, [pc, #428]	; (9000b93c <HAL_JPEG_Init+0x240>)
9000b78e:	4b6c      	ldr	r3, [pc, #432]	; (9000b940 <HAL_JPEG_Init+0x244>)
9000b790:	f8c2 0384 	str.w	r0, [r2, #900]	; 0x384
9000b794:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
9000b798:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b79c:	f64f 23f9 	movw	r3, #64249	; 0xfaf9
  value = *address & 0xFFFF0000U;
9000b7a0:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
9000b7a4:	4967      	ldr	r1, [pc, #412]	; (9000b944 <HAL_JPEG_Init+0x248>)
9000b7a6:	4001      	ands	r1, r0
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
9000b7a8:	f502 6085 	add.w	r0, r2, #1064	; 0x428
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
9000b7ac:	430b      	orrs	r3, r1
  *address = value;
9000b7ae:	4966      	ldr	r1, [pc, #408]	; (9000b948 <HAL_JPEG_Init+0x24c>)
9000b7b0:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
9000b7b4:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b7b8:	f891 30ae 	ldrb.w	r3, [r1, #174]	; 0xae
  while (index > 3UL)
9000b7bc:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b7be:	f891 e0b3 	ldrb.w	lr, [r1, #179]	; 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
9000b7c2:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
9000b7c4:	f891 c0b0 	ldrb.w	ip, [r1, #176]	; 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b7c8:	f891 50b1 	ldrb.w	r5, [r1, #177]	; 0xb1
  while (index > 3UL)
9000b7cc:	428e      	cmp	r6, r1
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b7ce:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
9000b7d2:	ea43 030c 	orr.w	r3, r3, ip
9000b7d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
9000b7da:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b7de:	d1eb      	bne.n	9000b7b8 <HAL_JPEG_Init+0xbc>
  value = *address & 0x0000FFFFU;
9000b7e0:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b7e4:	f04f 3101 	mov.w	r1, #16843009	; 0x1010101
  value = *address & 0xFFFF0000U;
9000b7e8:	4856      	ldr	r0, [pc, #344]	; (9000b944 <HAL_JPEG_Init+0x248>)
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b7ea:	2501      	movs	r5, #1
  value = *address & 0x0000FFFFU;
9000b7ec:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
9000b7ee:	f043 7340 	orr.w	r3, r3, #50331648	; 0x3000000
  *address = value;
9000b7f2:	f8c2 342c 	str.w	r3, [r2, #1068]	; 0x42c
  value = *address & 0xFFFF0000U;
9000b7f6:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b7fa:	4003      	ands	r3, r0
  *address = value;
9000b7fc:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b800:	f8c2 5438 	str.w	r5, [r2, #1080]	; 0x438
9000b804:	f8c2 1434 	str.w	r1, [r2, #1076]	; 0x434
9000b808:	f8c2 1430 	str.w	r1, [r2, #1072]	; 0x430
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b80c:	f640 310a 	movw	r1, #2826	; 0xb0a
  value = *address & 0x0000FFFFUL;
9000b810:	f8d2 343c 	ldr.w	r3, [r2, #1084]	; 0x43c
9000b814:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
9000b816:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b81a:	f8c2 343c 	str.w	r3, [r2, #1084]	; 0x43c
  value = *address & 0xFFFF0000UL;
9000b81e:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b822:	4003      	ands	r3, r0
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
9000b824:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b826:	4b49      	ldr	r3, [pc, #292]	; (9000b94c <HAL_JPEG_Init+0x250>)
  *address = value;
9000b828:	f8c2 1448 	str.w	r1, [r2, #1096]	; 0x448
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b82c:	f247 7102 	movw	r1, #30466	; 0x7702
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b830:	f8c2 3444 	str.w	r3, [r2, #1092]	; 0x444
9000b834:	f1a3 3304 	sub.w	r3, r3, #67372036	; 0x4040404
9000b838:	f8c2 3440 	str.w	r3, [r2, #1088]	; 0x440
  value = *address & 0x0000FFFFU;
9000b83c:	f8d2 3448 	ldr.w	r3, [r2, #1096]	; 0x448
9000b840:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
9000b842:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
  *address = value;
9000b846:	f8c2 3448 	str.w	r3, [r2, #1096]	; 0x448
  value = *address & 0xFFFF0000U;
9000b84a:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
9000b84e:	4003      	ands	r3, r0
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b850:	483f      	ldr	r0, [pc, #252]	; (9000b950 <HAL_JPEG_Init+0x254>)
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
9000b852:	4319      	orrs	r1, r3
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b854:	4b3f      	ldr	r3, [pc, #252]	; (9000b954 <HAL_JPEG_Init+0x258>)
  *address = value;
9000b856:	f8c2 1458 	str.w	r1, [r2, #1112]	; 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b85a:	493f      	ldr	r1, [pc, #252]	; (9000b958 <HAL_JPEG_Init+0x25c>)
9000b85c:	f8c2 0454 	str.w	r0, [r2, #1108]	; 0x454
  address = (hjpeg->Instance->DHTMEM + 102);
9000b860:	f502 609f 	add.w	r0, r2, #1272	; 0x4f8
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
9000b864:	f8c2 1450 	str.w	r1, [r2, #1104]	; 0x450
9000b868:	f8c2 344c 	str.w	r3, [r2, #1100]	; 0x44c
  value = *address & 0x0000FFFFUL;
9000b86c:	f8d2 3458 	ldr.w	r3, [r2, #1112]	; 0x458
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b870:	493a      	ldr	r1, [pc, #232]	; (9000b95c <HAL_JPEG_Init+0x260>)
  value = *address & 0x0000FFFFUL;
9000b872:	b29b      	uxth	r3, r3
9000b874:	f1a1 06a0 	sub.w	r6, r1, #160	; 0xa0
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
9000b878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  *address = value;
9000b87c:	f8c2 3458 	str.w	r3, [r2, #1112]	; 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b880:	f891 30b0 	ldrb.w	r3, [r1, #176]	; 0xb0
  while (index > 3UL)
9000b884:	3904      	subs	r1, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b886:	f891 50b5 	ldrb.w	r5, [r1, #181]	; 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
9000b88a:	041b      	lsls	r3, r3, #16
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
9000b88c:	f891 e0b2 	ldrb.w	lr, [r1, #178]	; 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b890:	f891 c0b3 	ldrb.w	ip, [r1, #179]	; 0xb3
  while (index > 3UL)
9000b894:	42b1      	cmp	r1, r6
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
9000b896:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
9000b89a:	ea43 030e 	orr.w	r3, r3, lr
9000b89e:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
9000b8a2:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
9000b8a6:	d1eb      	bne.n	9000b880 <HAL_JPEG_Init+0x184>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
9000b8a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
9000b8ac:	4926      	ldr	r1, [pc, #152]	; (9000b948 <HAL_JPEG_Init+0x24c>)
9000b8ae:	4620      	mov	r0, r4
9000b8b0:	f7ff fd36 	bl	9000b320 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b8b4:	b118      	cbz	r0, 9000b8be <HAL_JPEG_Init+0x1c2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b8b6:	2301      	movs	r3, #1
    return HAL_ERROR;
9000b8b8:	4618      	mov	r0, r3
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
9000b8ba:	6523      	str	r3, [r4, #80]	; 0x50
}
9000b8bc:	bd70      	pop	{r4, r5, r6, pc}
                              (hjpeg->Instance->HUFFENC_AC1));
9000b8be:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
9000b8c0:	4620      	mov	r0, r4
9000b8c2:	4926      	ldr	r1, [pc, #152]	; (9000b95c <HAL_JPEG_Init+0x260>)
9000b8c4:	f502 62cc 	add.w	r2, r2, #1632	; 0x660
9000b8c8:	f7ff fd2a 	bl	9000b320 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
9000b8cc:	2800      	cmp	r0, #0
9000b8ce:	d1f2      	bne.n	9000b8b6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC0);
9000b8d0:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
9000b8d2:	4620      	mov	r0, r4
9000b8d4:	4922      	ldr	r1, [pc, #136]	; (9000b960 <HAL_JPEG_Init+0x264>)
9000b8d6:	f502 62f8 	add.w	r2, r2, #1984	; 0x7c0
9000b8da:	f7ff fc89 	bl	9000b1f0 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
9000b8de:	2800      	cmp	r0, #0
9000b8e0:	d1e9      	bne.n	9000b8b6 <HAL_JPEG_Init+0x1ba>
                              hjpeg->Instance->HUFFENC_DC1);
9000b8e2:	6822      	ldr	r2, [r4, #0]
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
9000b8e4:	4620      	mov	r0, r4
9000b8e6:	491f      	ldr	r1, [pc, #124]	; (9000b964 <HAL_JPEG_Init+0x268>)
9000b8e8:	f502 62fc 	add.w	r2, r2, #2016	; 0x7e0
9000b8ec:	f7ff fc80 	bl	9000b1f0 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
9000b8f0:	2800      	cmp	r0, #0
9000b8f2:	d1e0      	bne.n	9000b8b6 <HAL_JPEG_Init+0x1ba>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b8f4:	6822      	ldr	r2, [r4, #0]
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b8f6:	2101      	movs	r1, #1
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
9000b8f8:	6853      	ldr	r3, [r2, #4]
9000b8fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000b8fe:	6053      	str	r3, [r2, #4]
  hjpeg->JpegInCount = 0;
9000b900:	6220      	str	r0, [r4, #32]
  hjpeg->JpegOutCount = 0;
9000b902:	6260      	str	r0, [r4, #36]	; 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
9000b904:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
9000b908:	6520      	str	r0, [r4, #80]	; 0x50
  hjpeg->Context = 0;
9000b90a:	6560      	str	r0, [r4, #84]	; 0x54
}
9000b90c:	bd70      	pop	{r4, r5, r6, pc}
    hjpeg->Lock = HAL_UNLOCKED;
9000b90e:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
    HAL_JPEG_MspInit(hjpeg);
9000b912:	f7f8 ffd5 	bl	900048c0 <HAL_JPEG_MspInit>
9000b916:	e6fd      	b.n	9000b714 <HAL_JPEG_Init+0x18>
    return HAL_ERROR;
9000b918:	2001      	movs	r0, #1
}
9000b91a:	4770      	bx	lr
9000b91c:	9002adb4 	.word	0x9002adb4
9000b920:	9002ad3c 	.word	0x9002ad3c
9000b924:	01050100 	.word	0x01050100
9000b928:	0b0a0908 	.word	0x0b0a0908
9000b92c:	07060504 	.word	0x07060504
9000b930:	03020100 	.word	0x03020100
9000b934:	7d010000 	.word	0x7d010000
9000b938:	04040505 	.word	0x04040505
9000b93c:	03040203 	.word	0x03040203
9000b940:	03010200 	.word	0x03010200
9000b944:	ffff0000 	.word	0xffff0000
9000b948:	9002ac88 	.word	0x9002ac88
9000b94c:	09080706 	.word	0x09080706
9000b950:	01000404 	.word	0x01000404
9000b954:	04040201 	.word	0x04040201
9000b958:	05070403 	.word	0x05070403
9000b95c:	9002abd4 	.word	0x9002abd4
9000b960:	9002ad98 	.word	0x9002ad98
9000b964:	9002ad7c 	.word	0x9002ad7c

9000b968 <HAL_JPEG_Decode_DMA>:
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b968:	2b00      	cmp	r3, #0
9000b96a:	bf18      	it	ne
9000b96c:	2900      	cmpne	r1, #0
9000b96e:	d03b      	beq.n	9000b9e8 <HAL_JPEG_Decode_DMA+0x80>
{
9000b970:	b570      	push	{r4, r5, r6, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
9000b972:	fab0 f580 	clz	r5, r0
9000b976:	4604      	mov	r4, r0
9000b978:	096d      	lsrs	r5, r5, #5
9000b97a:	b330      	cbz	r0, 9000b9ca <HAL_JPEG_Decode_DMA+0x62>
  __HAL_LOCK(hjpeg);
9000b97c:	f890 c04c 	ldrb.w	ip, [r0, #76]	; 0x4c
9000b980:	f1bc 0f01 	cmp.w	ip, #1
9000b984:	d02e      	beq.n	9000b9e4 <HAL_JPEG_Decode_DMA+0x7c>
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b986:	f890 c04d 	ldrb.w	ip, [r0, #77]	; 0x4d
  __HAL_LOCK(hjpeg);
9000b98a:	f04f 0e01 	mov.w	lr, #1
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b98e:	45f4      	cmp	ip, lr
9000b990:	fa5f f68c 	uxtb.w	r6, ip
  __HAL_LOCK(hjpeg);
9000b994:	f880 e04c 	strb.w	lr, [r0, #76]	; 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
9000b998:	d119      	bne.n	9000b9ce <HAL_JPEG_Decode_DMA+0x66>
    hjpeg->InDataLength = InDataLength;
9000b99a:	6282      	str	r2, [r0, #40]	; 0x28
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
9000b99c:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->OutDataLength = OutDataLength;
9000b9a0:	9b04      	ldr	r3, [sp, #16]
9000b9a2:	62c3      	str	r3, [r0, #44]	; 0x2c
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
9000b9a4:	2304      	movs	r3, #4
9000b9a6:	f880 304d 	strb.w	r3, [r0, #77]	; 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
9000b9aa:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b9ac:	f023 030f 	bic.w	r3, r3, #15
9000b9b0:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
9000b9b2:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b9b4:	f043 030e 	orr.w	r3, r3, #14
9000b9b8:	6543      	str	r3, [r0, #84]	; 0x54
    hjpeg->JpegInCount = 0;
9000b9ba:	6205      	str	r5, [r0, #32]
    hjpeg->JpegOutCount = 0;
9000b9bc:	6245      	str	r5, [r0, #36]	; 0x24
    JPEG_Init_Process(hjpeg);
9000b9be:	f7ff fd37 	bl	9000b430 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
9000b9c2:	f7ff fd73 	bl	9000b4ac <JPEG_DMA_StartProcess>
9000b9c6:	b930      	cbnz	r0, 9000b9d6 <HAL_JPEG_Decode_DMA+0x6e>
}
9000b9c8:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b9ca:	2001      	movs	r0, #1
}
9000b9cc:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
9000b9ce:	2002      	movs	r0, #2
    __HAL_UNLOCK(hjpeg);
9000b9d0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
9000b9d4:	bd70      	pop	{r4, r5, r6, pc}
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b9d6:	2306      	movs	r3, #6
      return HAL_ERROR;
9000b9d8:	4630      	mov	r0, r6
      __HAL_UNLOCK(hjpeg);
9000b9da:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
9000b9de:	f884 304d 	strb.w	r3, [r4, #77]	; 0x4d
}
9000b9e2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hjpeg);
9000b9e4:	2002      	movs	r0, #2
}
9000b9e6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
9000b9e8:	2001      	movs	r0, #1
}
9000b9ea:	4770      	bx	lr

9000b9ec <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000b9ec:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b9ee:	f003 030c 	and.w	r3, r3, #12
9000b9f2:	2b0c      	cmp	r3, #12
9000b9f4:	d01a      	beq.n	9000ba2c <HAL_JPEG_Pause+0x40>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000b9f6:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000b9f8:	f003 030c 	and.w	r3, r3, #12
9000b9fc:	2b08      	cmp	r3, #8
9000b9fe:	d001      	beq.n	9000ba04 <HAL_JPEG_Pause+0x18>
}
9000ba00:	2000      	movs	r0, #0
9000ba02:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000ba04:	07ca      	lsls	r2, r1, #31
9000ba06:	d41f      	bmi.n	9000ba48 <HAL_JPEG_Pause+0x5c>
9000ba08:	f06f 0228 	mvn.w	r2, #40	; 0x28
9000ba0c:	f04f 3cff 	mov.w	ip, #4294967295
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000ba10:	078b      	lsls	r3, r1, #30
9000ba12:	d504      	bpl.n	9000ba1e <HAL_JPEG_Pause+0x32>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000ba14:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000ba16:	4694      	mov	ip, r2
9000ba18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000ba1c:	6543      	str	r3, [r0, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000ba1e:	6802      	ldr	r2, [r0, #0]
}
9000ba20:	2000      	movs	r0, #0
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000ba22:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000ba24:	ea03 030c 	and.w	r3, r3, ip
9000ba28:	6313      	str	r3, [r2, #48]	; 0x30
}
9000ba2a:	4770      	bx	lr
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000ba2c:	07cb      	lsls	r3, r1, #31
9000ba2e:	d503      	bpl.n	9000ba38 <HAL_JPEG_Pause+0x4c>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000ba30:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000ba32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ba36:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000ba38:	0789      	lsls	r1, r1, #30
9000ba3a:	d5e1      	bpl.n	9000ba00 <HAL_JPEG_Pause+0x14>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
9000ba3c:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000ba3e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
9000ba42:	6543      	str	r3, [r0, #84]	; 0x54
}
9000ba44:	2000      	movs	r0, #0
9000ba46:	4770      	bx	lr
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000ba48:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000ba4a:	f06f 022e 	mvn.w	r2, #46	; 0x2e
9000ba4e:	f06f 0c06 	mvn.w	ip, #6
9000ba52:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000ba56:	6543      	str	r3, [r0, #84]	; 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000ba58:	e7da      	b.n	9000ba10 <HAL_JPEG_Pause+0x24>
9000ba5a:	bf00      	nop

9000ba5c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
9000ba5c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
9000ba5e:	6282      	str	r2, [r0, #40]	; 0x28
}
9000ba60:	4770      	bx	lr
9000ba62:	bf00      	nop

9000ba64 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
9000ba64:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
9000ba66:	62c2      	str	r2, [r0, #44]	; 0x2c
}
9000ba68:	4770      	bx	lr
9000ba6a:	bf00      	nop

9000ba6c <HAL_JPEG_EncodeCpltCallback>:
9000ba6c:	4770      	bx	lr
9000ba6e:	bf00      	nop

9000ba70 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000ba70:	6c00      	ldr	r0, [r0, #64]	; 0x40
  hjpeg->State = HAL_JPEG_STATE_READY;
9000ba72:	2101      	movs	r1, #1
{
9000ba74:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000ba76:	6803      	ldr	r3, [r0, #0]
9000ba78:	681a      	ldr	r2, [r3, #0]
9000ba7a:	f022 0201 	bic.w	r2, r2, #1
9000ba7e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000ba80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000ba82:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000ba86:	631a      	str	r2, [r3, #48]	; 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
9000ba88:	f880 104d 	strb.w	r1, [r0, #77]	; 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000ba8c:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000ba8e:	f043 0304 	orr.w	r3, r3, #4
9000ba92:	6503      	str	r3, [r0, #80]	; 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
9000ba94:	f7f6 f848 	bl	90001b28 <HAL_JPEG_ErrorCallback>
}
9000ba98:	bd08      	pop	{r3, pc}
9000ba9a:	bf00      	nop

9000ba9c <JPEG_MDMAInCpltCallback>:
{
9000ba9c:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000ba9e:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000baa0:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
9000baa4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000baa6:	6821      	ldr	r1, [r4, #0]
9000baa8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
9000baaa:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000baae:	630a      	str	r2, [r1, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
9000bab0:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bab2:	ea03 030c 	and.w	r3, r3, ip
9000bab6:	2b0c      	cmp	r3, #12
9000bab8:	d001      	beq.n	9000babe <JPEG_MDMAInCpltCallback+0x22>
}
9000baba:	b003      	add	sp, #12
9000babc:	bd30      	pop	{r4, r5, pc}
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000babe:	6802      	ldr	r2, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bac0:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bac2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000bac4:	6952      	ldr	r2, [r2, #20]
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000bac6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bac8:	f3c2 0210 	ubfx	r2, r2, #0, #17
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000bacc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bace:	1a9b      	subs	r3, r3, r2
9000bad0:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000bad2:	6a21      	ldr	r1, [r4, #32]
9000bad4:	f7f5 ffc0 	bl	90001a58 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
9000bad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000bada:	42ab      	cmp	r3, r5
9000badc:	d311      	bcc.n	9000bb02 <JPEG_MDMAInCpltCallback+0x66>
      if (inXfrSize == 0UL)
9000bade:	b305      	cbz	r5, 9000bb22 <JPEG_MDMAInCpltCallback+0x86>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
9000bae0:	fbb3 f2f5 	udiv	r2, r3, r5
9000bae4:	fb05 3512 	mls	r5, r5, r2, r3
9000bae8:	1b5b      	subs	r3, r3, r5
9000baea:	62a3      	str	r3, [r4, #40]	; 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000baec:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000baee:	04d1      	lsls	r1, r2, #19
9000baf0:	d400      	bmi.n	9000baf4 <JPEG_MDMAInCpltCallback+0x58>
9000baf2:	b963      	cbnz	r3, 9000bb0e <JPEG_MDMAInCpltCallback+0x72>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000baf4:	6822      	ldr	r2, [r4, #0]
9000baf6:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000baf8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
9000bafc:	6313      	str	r3, [r2, #48]	; 0x30
}
9000bafe:	b003      	add	sp, #12
9000bb00:	bd30      	pop	{r4, r5, pc}
    else if (hjpeg->InDataLength > 0UL)
9000bb02:	b1cb      	cbz	r3, 9000bb38 <JPEG_MDMAInCpltCallback+0x9c>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
9000bb04:	0798      	lsls	r0, r3, #30
9000bb06:	d119      	bne.n	9000bb3c <JPEG_MDMAInCpltCallback+0xa0>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000bb08:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bb0a:	04d2      	lsls	r2, r2, #19
9000bb0c:	d4f2      	bmi.n	9000baf4 <JPEG_MDMAInCpltCallback+0x58>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000bb0e:	6822      	ldr	r2, [r4, #0]
9000bb10:	2501      	movs	r5, #1
9000bb12:	69a1      	ldr	r1, [r4, #24]
9000bb14:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000bb16:	3240      	adds	r2, #64	; 0x40
9000bb18:	9500      	str	r5, [sp, #0]
9000bb1a:	f001 f8d1 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000bb1e:	2800      	cmp	r0, #0
9000bb20:	d0e8      	beq.n	9000baf4 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bb22:	6d23      	ldr	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bb24:	2206      	movs	r2, #6
        HAL_JPEG_ErrorCallback(hjpeg);
9000bb26:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bb28:	f043 0304 	orr.w	r3, r3, #4
9000bb2c:	6523      	str	r3, [r4, #80]	; 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bb2e:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
9000bb32:	f7f5 fff9 	bl	90001b28 <HAL_JPEG_ErrorCallback>
        return;
9000bb36:	e7c0      	b.n	9000baba <JPEG_MDMAInCpltCallback+0x1e>
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
9000bb38:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bb3a:	e7db      	b.n	9000baf4 <JPEG_MDMAInCpltCallback+0x58>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
9000bb3c:	f023 0303 	bic.w	r3, r3, #3
9000bb40:	3304      	adds	r3, #4
9000bb42:	62a3      	str	r3, [r4, #40]	; 0x28
9000bb44:	e7d2      	b.n	9000baec <JPEG_MDMAInCpltCallback+0x50>
9000bb46:	bf00      	nop

9000bb48 <JPEG_DMA_PollResidualData>:
{
9000bb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000bb4a:	6802      	ldr	r2, [r0, #0]
9000bb4c:	2610      	movs	r6, #16
{
9000bb4e:	4604      	mov	r4, r0
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000bb50:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000bb52:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000bb56:	d11d      	bne.n	9000bb94 <JPEG_DMA_PollResidualData+0x4c>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000bb58:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000bb5a:	06df      	lsls	r7, r3, #27
9000bb5c:	d51a      	bpl.n	9000bb94 <JPEG_DMA_PollResidualData+0x4c>
        dataOut = hjpeg->Instance->DOR;
9000bb5e:	6c53      	ldr	r3, [r2, #68]	; 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000bb60:	69e7      	ldr	r7, [r4, #28]
9000bb62:	6a62      	ldr	r2, [r4, #36]	; 0x24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000bb64:	0a18      	lsrs	r0, r3, #8
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000bb66:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
9000bb68:	54bb      	strb	r3, [r7, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000bb6a:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
9000bb6c:	6a67      	ldr	r7, [r4, #36]	; 0x24
9000bb6e:	69e2      	ldr	r2, [r4, #28]
9000bb70:	443a      	add	r2, r7
9000bb72:	7050      	strb	r0, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
9000bb74:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000bb76:	69e2      	ldr	r2, [r4, #28]
9000bb78:	4402      	add	r2, r0
9000bb7a:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
9000bb7c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bb7e:	69e2      	ldr	r2, [r4, #28]
9000bb80:	440a      	add	r2, r1
9000bb82:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
9000bb84:	6a63      	ldr	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000bb86:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        hjpeg->JpegOutCount += 4UL;
9000bb88:	3304      	adds	r3, #4
9000bb8a:	6263      	str	r3, [r4, #36]	; 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000bb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bb8e:	4293      	cmp	r3, r2
9000bb90:	d021      	beq.n	9000bbd6 <JPEG_DMA_PollResidualData+0x8e>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000bb92:	6822      	ldr	r2, [r4, #0]
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
9000bb94:	3e01      	subs	r6, #1
9000bb96:	d1db      	bne.n	9000bb50 <JPEG_DMA_PollResidualData+0x8>
  tmpContext = hjpeg->Context;
9000bb98:	6d61      	ldr	r1, [r4, #84]	; 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000bb9a:	6b53      	ldr	r3, [r2, #52]	; 0x34
9000bb9c:	06d8      	lsls	r0, r3, #27
9000bb9e:	d501      	bpl.n	9000bba4 <JPEG_DMA_PollResidualData+0x5c>
9000bba0:	048b      	lsls	r3, r1, #18
9000bba2:	d417      	bmi.n	9000bbd4 <JPEG_DMA_PollResidualData+0x8c>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bba4:	6813      	ldr	r3, [r2, #0]
9000bba6:	f023 0301 	bic.w	r3, r3, #1
9000bbaa:	6013      	str	r3, [r2, #0]
    if (hjpeg->JpegOutCount > 0UL)
9000bbac:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bbae:	b9eb      	cbnz	r3, 9000bbec <JPEG_DMA_PollResidualData+0xa4>
    tmpContext = hjpeg->Context;
9000bbb0:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000bbb2:	2000      	movs	r0, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bbb4:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bbb6:	2101      	movs	r1, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bbb8:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000bbbc:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bbc0:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bbc4:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bbc6:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bbc8:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bbca:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bbce:	d00a      	beq.n	9000bbe6 <JPEG_DMA_PollResidualData+0x9e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000bbd0:	f7ff ff4c 	bl	9000ba6c <HAL_JPEG_EncodeCpltCallback>
}
9000bbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bbd6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bbd8:	4620      	mov	r0, r4
9000bbda:	69e1      	ldr	r1, [r4, #28]
9000bbdc:	f7f5 ff5c 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
9000bbe0:	6822      	ldr	r2, [r4, #0]
          hjpeg->JpegOutCount = 0;
9000bbe2:	6265      	str	r5, [r4, #36]	; 0x24
9000bbe4:	e7d6      	b.n	9000bb94 <JPEG_DMA_PollResidualData+0x4c>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bbe6:	f7f5 ffa1 	bl	90001b2c <HAL_JPEG_DecodeCpltCallback>
}
9000bbea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bbec:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bbee:	4620      	mov	r0, r4
9000bbf0:	69e1      	ldr	r1, [r4, #28]
9000bbf2:	f7f5 ff51 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000bbf6:	2300      	movs	r3, #0
9000bbf8:	6263      	str	r3, [r4, #36]	; 0x24
9000bbfa:	e7d9      	b.n	9000bbb0 <JPEG_DMA_PollResidualData+0x68>

9000bbfc <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
9000bbfc:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bbfe:	f413 5f40 	tst.w	r3, #12288	; 0x3000
9000bc02:	d028      	beq.n	9000bc56 <HAL_JPEG_Resume+0x5a>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bc04:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc06:	f003 030c 	and.w	r3, r3, #12
9000bc0a:	2b0c      	cmp	r3, #12
{
9000bc0c:	b570      	push	{r4, r5, r6, lr}
9000bc0e:	4604      	mov	r4, r0
9000bc10:	b082      	sub	sp, #8
9000bc12:	460d      	mov	r5, r1
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000bc14:	d007      	beq.n	9000bc26 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000bc16:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc18:	f003 030c 	and.w	r3, r3, #12
9000bc1c:	2b08      	cmp	r3, #8
9000bc1e:	d037      	beq.n	9000bc90 <HAL_JPEG_Resume+0x94>
  return HAL_OK;
9000bc20:	2000      	movs	r0, #0
}
9000bc22:	b002      	add	sp, #8
9000bc24:	bd70      	pop	{r4, r5, r6, pc}
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000bc26:	07c8      	lsls	r0, r1, #31
9000bc28:	d417      	bmi.n	9000bc5a <HAL_JPEG_Resume+0x5e>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000bc2a:	07a9      	lsls	r1, r5, #30
9000bc2c:	d5f8      	bpl.n	9000bc20 <HAL_JPEG_Resume+0x24>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000bc2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bc30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000bc34:	6563      	str	r3, [r4, #84]	; 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000bc36:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bc38:	041a      	lsls	r2, r3, #16
9000bc3a:	d453      	bmi.n	9000bce4 <HAL_JPEG_Resume+0xe8>
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
9000bc3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000bc3e:	6a82      	ldr	r2, [r0, #40]	; 0x28
        if (xfrSize == 0UL)
9000bc40:	2a00      	cmp	r2, #0
9000bc42:	d13e      	bne.n	9000bcc2 <HAL_JPEG_Resume+0xc6>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bc44:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bc46:	2206      	movs	r2, #6
          return HAL_ERROR;
9000bc48:	2001      	movs	r0, #1
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bc4a:	f043 0304 	orr.w	r3, r3, #4
9000bc4e:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bc50:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          return HAL_ERROR;
9000bc54:	e7e5      	b.n	9000bc22 <HAL_JPEG_Resume+0x26>
    return HAL_ERROR;
9000bc56:	2001      	movs	r0, #1
}
9000bc58:	4770      	bx	lr
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000bc5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000bc5c:	6b20      	ldr	r0, [r4, #48]	; 0x30
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000bc5e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
9000bc62:	6a81      	ldr	r1, [r0, #40]	; 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000bc64:	6562      	str	r2, [r4, #84]	; 0x54
      if (xfrSize == 0UL)
9000bc66:	2900      	cmp	r1, #0
9000bc68:	d0ec      	beq.n	9000bc44 <HAL_JPEG_Resume+0x48>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
9000bc6a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000bc6c:	fbb3 f2f1 	udiv	r2, r3, r1
9000bc70:	fb01 3112 	mls	r1, r1, r2, r3
9000bc74:	1a5b      	subs	r3, r3, r1
9000bc76:	62a3      	str	r3, [r4, #40]	; 0x28
      if (hjpeg->InDataLength > 0UL)
9000bc78:	2b00      	cmp	r3, #0
9000bc7a:	d0d6      	beq.n	9000bc2a <HAL_JPEG_Resume+0x2e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
9000bc7c:	6822      	ldr	r2, [r4, #0]
9000bc7e:	2601      	movs	r6, #1
9000bc80:	3240      	adds	r2, #64	; 0x40
9000bc82:	9600      	str	r6, [sp, #0]
9000bc84:	69a1      	ldr	r1, [r4, #24]
9000bc86:	f001 f81b 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000bc8a:	2800      	cmp	r0, #0
9000bc8c:	d0cd      	beq.n	9000bc2a <HAL_JPEG_Resume+0x2e>
9000bc8e:	e7d9      	b.n	9000bc44 <HAL_JPEG_Resume+0x48>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
9000bc90:	f011 0101 	ands.w	r1, r1, #1
9000bc94:	d013      	beq.n	9000bcbe <HAL_JPEG_Resume+0xc2>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000bc96:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000bc98:	222e      	movs	r2, #46	; 0x2e
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
9000bc9a:	2106      	movs	r1, #6
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
9000bc9c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000bca0:	6543      	str	r3, [r0, #84]	; 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
9000bca2:	07ab      	lsls	r3, r5, #30
9000bca4:	d504      	bpl.n	9000bcb0 <HAL_JPEG_Resume+0xb4>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000bca6:	6d63      	ldr	r3, [r4, #84]	; 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
9000bca8:	4611      	mov	r1, r2
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
9000bcaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
9000bcae:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000bcb0:	6822      	ldr	r2, [r4, #0]
  return HAL_OK;
9000bcb2:	2000      	movs	r0, #0
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
9000bcb4:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000bcb6:	430b      	orrs	r3, r1
9000bcb8:	6313      	str	r3, [r2, #48]	; 0x30
}
9000bcba:	b002      	add	sp, #8
9000bcbc:	bd70      	pop	{r4, r5, r6, pc}
9000bcbe:	2228      	movs	r2, #40	; 0x28
9000bcc0:	e7ef      	b.n	9000bca2 <HAL_JPEG_Resume+0xa6>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000bcc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000bcc4:	2501      	movs	r5, #1
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000bcc6:	fbb3 f1f2 	udiv	r1, r3, r2
9000bcca:	fb02 3211 	mls	r2, r2, r1, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000bcce:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000bcd0:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000bcd2:	3144      	adds	r1, #68	; 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
9000bcd4:	62e3      	str	r3, [r4, #44]	; 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000bcd6:	9500      	str	r5, [sp, #0]
9000bcd8:	69e2      	ldr	r2, [r4, #28]
9000bcda:	f000 fff1 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000bcde:	2800      	cmp	r0, #0
9000bce0:	d09e      	beq.n	9000bc20 <HAL_JPEG_Resume+0x24>
9000bce2:	e7af      	b.n	9000bc44 <HAL_JPEG_Resume+0x48>
        JPEG_DMA_PollResidualData(hjpeg);
9000bce4:	4620      	mov	r0, r4
9000bce6:	f7ff ff2f 	bl	9000bb48 <JPEG_DMA_PollResidualData>
9000bcea:	e799      	b.n	9000bc20 <HAL_JPEG_Resume+0x24>

9000bcec <JPEG_MDMAOutCpltCallback>:
{
9000bcec:	b530      	push	{r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000bcee:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000bcf0:	f248 0c0c 	movw	ip, #32780	; 0x800c
{
9000bcf4:	b083      	sub	sp, #12
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000bcf6:	6823      	ldr	r3, [r4, #0]
9000bcf8:	6b19      	ldr	r1, [r3, #48]	; 0x30
9000bcfa:	f021 017e 	bic.w	r1, r1, #126	; 0x7e
9000bcfe:	6319      	str	r1, [r3, #48]	; 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
9000bd00:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000bd02:	ea02 020c 	and.w	r2, r2, ip
9000bd06:	2a0c      	cmp	r2, #12
9000bd08:	d001      	beq.n	9000bd0e <JPEG_MDMAOutCpltCallback+0x22>
}
9000bd0a:	b003      	add	sp, #12
9000bd0c:	bd30      	pop	{r4, r5, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
9000bd0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000bd10:	0692      	lsls	r2, r2, #26
9000bd12:	d505      	bpl.n	9000bd20 <JPEG_MDMAOutCpltCallback+0x34>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000bd14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000bd16:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000bd1a:	631a      	str	r2, [r3, #48]	; 0x30
}
9000bd1c:	b003      	add	sp, #12
9000bd1e:	bd30      	pop	{r4, r5, pc}
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bd20:	6802      	ldr	r2, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd22:	4620      	mov	r0, r4
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bd24:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000bd26:	6952      	ldr	r2, [r2, #20]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd28:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bd2a:	f3c2 0210 	ubfx	r2, r2, #0, #17
9000bd2e:	1a9b      	subs	r3, r3, r2
9000bd30:	6263      	str	r3, [r4, #36]	; 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bd32:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bd34:	f7f5 feb0 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000bd38:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bd3a:	049b      	lsls	r3, r3, #18
9000bd3c:	d501      	bpl.n	9000bd42 <JPEG_MDMAOutCpltCallback+0x56>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
9000bd3e:	6823      	ldr	r3, [r4, #0]
9000bd40:	e7e8      	b.n	9000bd14 <JPEG_MDMAOutCpltCallback+0x28>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
9000bd42:	6821      	ldr	r1, [r4, #0]
9000bd44:	2501      	movs	r5, #1
9000bd46:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000bd48:	69e2      	ldr	r2, [r4, #28]
9000bd4a:	3144      	adds	r1, #68	; 0x44
9000bd4c:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000bd4e:	9500      	str	r5, [sp, #0]
9000bd50:	f000 ffb6 	bl	9000ccc0 <HAL_MDMA_Start_IT>
9000bd54:	2800      	cmp	r0, #0
9000bd56:	d0f2      	beq.n	9000bd3e <JPEG_MDMAOutCpltCallback+0x52>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bd58:	6d23      	ldr	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bd5a:	2206      	movs	r2, #6
          HAL_JPEG_ErrorCallback(hjpeg);
9000bd5c:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
9000bd5e:	f043 0304 	orr.w	r3, r3, #4
9000bd62:	6523      	str	r3, [r4, #80]	; 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
9000bd64:	f884 204d 	strb.w	r2, [r4, #77]	; 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
9000bd68:	f7f5 fede 	bl	90001b28 <HAL_JPEG_ErrorCallback>
          return;
9000bd6c:	e7cd      	b.n	9000bd0a <JPEG_MDMAOutCpltCallback+0x1e>
9000bd6e:	bf00      	nop

9000bd70 <JPEG_MDMAOutAbortCallback>:
{
9000bd70:	b538      	push	{r3, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
9000bd72:	6c04      	ldr	r4, [r0, #64]	; 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
9000bd74:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bd76:	041a      	lsls	r2, r3, #16
9000bd78:	d400      	bmi.n	9000bd7c <JPEG_MDMAOutAbortCallback+0xc>
}
9000bd7a:	bd38      	pop	{r3, r4, r5, pc}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000bd7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000bd7e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000bd80:	681b      	ldr	r3, [r3, #0]
9000bd82:	695b      	ldr	r3, [r3, #20]
9000bd84:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000bd88:	1ad3      	subs	r3, r2, r3
9000bd8a:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000bd8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bd8e:	429a      	cmp	r2, r3
9000bd90:	d025      	beq.n	9000bdde <JPEG_MDMAOutAbortCallback+0x6e>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000bd92:	6822      	ldr	r2, [r4, #0]
9000bd94:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000bd96:	f015 0510 	ands.w	r5, r5, #16
9000bd9a:	d118      	bne.n	9000bdce <JPEG_MDMAOutAbortCallback+0x5e>
    if (hjpeg->JpegOutCount > 0UL)
9000bd9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bd9e:	bb4b      	cbnz	r3, 9000bdf4 <JPEG_MDMAOutAbortCallback+0x84>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bda0:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000bda2:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bda4:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bda6:	f023 0301 	bic.w	r3, r3, #1
9000bdaa:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000bdac:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bdae:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bdb0:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000bdb4:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bdb8:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bdbc:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bdbe:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bdc0:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bdc2:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bdc6:	d012      	beq.n	9000bdee <JPEG_MDMAOutAbortCallback+0x7e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000bdc8:	f7ff fe50 	bl	9000ba6c <HAL_JPEG_EncodeCpltCallback>
}
9000bdcc:	bd38      	pop	{r3, r4, r5, pc}
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000bdce:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000bdd0:	049b      	lsls	r3, r3, #18
9000bdd2:	d4d2      	bmi.n	9000bd7a <JPEG_MDMAOutAbortCallback+0xa>
    JPEG_DMA_PollResidualData(hjpeg);
9000bdd4:	4620      	mov	r0, r4
}
9000bdd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000bdda:	f7ff beb5 	b.w	9000bb48 <JPEG_DMA_PollResidualData>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bdde:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bde0:	4620      	mov	r0, r4
9000bde2:	69e1      	ldr	r1, [r4, #28]
9000bde4:	f7f5 fe58 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000bde8:	2300      	movs	r3, #0
9000bdea:	6263      	str	r3, [r4, #36]	; 0x24
9000bdec:	e7d1      	b.n	9000bd92 <JPEG_MDMAOutAbortCallback+0x22>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000bdee:	f7f5 fe9d 	bl	90001b2c <HAL_JPEG_DecodeCpltCallback>
}
9000bdf2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000bdf4:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bdf6:	4620      	mov	r0, r4
9000bdf8:	69e1      	ldr	r1, [r4, #28]
9000bdfa:	f7f5 fe4d 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000bdfe:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000be00:	6265      	str	r5, [r4, #36]	; 0x24
9000be02:	e7cd      	b.n	9000bda0 <JPEG_MDMAOutAbortCallback+0x30>

9000be04 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000be04:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000be06:	f003 0303 	and.w	r3, r3, #3
9000be0a:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000be0c:	6803      	ldr	r3, [r0, #0]
{
9000be0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000be12:	4604      	mov	r4, r0
9000be14:	b082      	sub	sp, #8
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000be16:	d01f      	beq.n	9000be58 <JPEG_Process+0x54>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
9000be18:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000be1a:	04d7      	lsls	r7, r2, #19
9000be1c:	d407      	bmi.n	9000be2e <JPEG_Process+0x2a>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
9000be1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be20:	0796      	lsls	r6, r2, #30
9000be22:	f100 811d 	bmi.w	9000c060 <JPEG_Process+0x25c>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
9000be26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be28:	0750      	lsls	r0, r2, #29
9000be2a:	f100 81b1 	bmi.w	9000c190 <JPEG_Process+0x38c>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000be2e:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000be30:	f415 5500 	ands.w	r5, r5, #8192	; 0x2000
9000be34:	d107      	bne.n	9000be46 <JPEG_Process+0x42>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
9000be36:	6b5e      	ldr	r6, [r3, #52]	; 0x34
9000be38:	f016 0608 	ands.w	r6, r6, #8
9000be3c:	d14c      	bne.n	9000bed8 <JPEG_Process+0xd4>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
9000be3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be40:	06d2      	lsls	r2, r2, #27
9000be42:	f100 81e3 	bmi.w	9000c20c <JPEG_Process+0x408>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000be46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be48:	f002 0238 	and.w	r2, r2, #56	; 0x38
9000be4c:	2a20      	cmp	r2, #32
9000be4e:	d01a      	beq.n	9000be86 <JPEG_Process+0x82>
  return JPEG_PROCESS_ONGOING;
9000be50:	2000      	movs	r0, #0
}
9000be52:	b002      	add	sp, #8
9000be54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000be58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000be5a:	0652      	lsls	r2, r2, #25
9000be5c:	d5dc      	bpl.n	9000be18 <JPEG_Process+0x14>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000be5e:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000be60:	9101      	str	r1, [sp, #4]
9000be62:	f7ff fb71 	bl	9000b548 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000be66:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000be68:	9901      	ldr	r1, [sp, #4]
9000be6a:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000be6c:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000be6e:	f7f5 fda1 	bl	900019b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000be72:	6823      	ldr	r3, [r4, #0]
9000be74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000be76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000be7a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000be7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000be7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000be82:	639a      	str	r2, [r3, #56]	; 0x38
9000be84:	e7c8      	b.n	9000be18 <JPEG_Process+0x14>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000be86:	681a      	ldr	r2, [r3, #0]
9000be88:	f022 0201 	bic.w	r2, r2, #1
9000be8c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000be8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000be90:	f002 020c 	and.w	r2, r2, #12
9000be94:	2a08      	cmp	r2, #8
9000be96:	f000 81e6 	beq.w	9000c266 <JPEG_Process+0x462>
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000be9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000be9c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000bea0:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->JpegOutCount > 0UL)
9000bea2:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000bea4:	2b00      	cmp	r3, #0
9000bea6:	f040 81e3 	bne.w	9000c270 <JPEG_Process+0x46c>
    tmpContext = hjpeg->Context;
9000beaa:	6d63      	ldr	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hjpeg);
9000beac:	2100      	movs	r1, #0
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000beae:	6d62      	ldr	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000beb0:	2501      	movs	r5, #1
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000beb2:	f003 0303 	and.w	r3, r3, #3
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000beb6:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000beb8:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
    __HAL_UNLOCK(hjpeg);
9000bebc:	f884 104c 	strb.w	r1, [r4, #76]	; 0x4c
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bec0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000bec2:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000bec4:	f884 504d 	strb.w	r5, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000bec8:	f000 81c9 	beq.w	9000c25e <JPEG_Process+0x45a>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000becc:	f7ff fdce 	bl	9000ba6c <HAL_JPEG_EncodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000bed0:	4628      	mov	r0, r5
}
9000bed2:	b002      	add	sp, #8
9000bed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000bed8:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000beda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000bedc:	3220      	adds	r2, #32
9000bede:	4296      	cmp	r6, r2
9000bee0:	f0c0 81e4 	bcc.w	9000c2ac <JPEG_Process+0x4a8>
      dataword = hjpeg->Instance->DOR;
9000bee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bee6:	69e1      	ldr	r1, [r4, #28]
9000bee8:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000beea:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000beec:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000beee:	69e2      	ldr	r2, [r4, #28]
9000bef0:	440a      	add	r2, r1
9000bef2:	0a19      	lsrs	r1, r3, #8
9000bef4:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bef6:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bef8:	69e2      	ldr	r2, [r4, #28]
9000befa:	440a      	add	r2, r1
9000befc:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000befe:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf00:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf02:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf04:	69e2      	ldr	r2, [r4, #28]
9000bf06:	440a      	add	r2, r1
9000bf08:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bf0a:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf0c:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bf0e:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf10:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bf12:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf14:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf16:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf18:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bf1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf1c:	69e2      	ldr	r2, [r4, #28]
9000bf1e:	440a      	add	r2, r1
9000bf20:	0a19      	lsrs	r1, r3, #8
9000bf22:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf24:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf26:	69e2      	ldr	r2, [r4, #28]
9000bf28:	440a      	add	r2, r1
9000bf2a:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf2c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf2e:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf30:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf32:	69e2      	ldr	r2, [r4, #28]
9000bf34:	440a      	add	r2, r1
9000bf36:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bf38:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf3a:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bf3c:	3304      	adds	r3, #4
9000bf3e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf40:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf42:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf44:	69e1      	ldr	r1, [r4, #28]
9000bf46:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bf48:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf4a:	69e2      	ldr	r2, [r4, #28]
9000bf4c:	440a      	add	r2, r1
9000bf4e:	0a19      	lsrs	r1, r3, #8
9000bf50:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf52:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf54:	69e2      	ldr	r2, [r4, #28]
9000bf56:	440a      	add	r2, r1
9000bf58:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf5a:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf5c:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf60:	69e2      	ldr	r2, [r4, #28]
9000bf62:	440a      	add	r2, r1
9000bf64:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bf66:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf68:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bf6a:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf6c:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bf6e:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf70:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf72:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bf74:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bf76:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf78:	69e2      	ldr	r2, [r4, #28]
9000bf7a:	440a      	add	r2, r1
9000bf7c:	0a19      	lsrs	r1, r3, #8
9000bf7e:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf80:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf82:	69e2      	ldr	r2, [r4, #28]
9000bf84:	440a      	add	r2, r1
9000bf86:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf88:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bf8a:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bf8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bf8e:	69e2      	ldr	r2, [r4, #28]
9000bf90:	440a      	add	r2, r1
9000bf92:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bf94:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf96:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bf98:	3304      	adds	r3, #4
9000bf9a:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bf9c:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bf9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bfa0:	69e1      	ldr	r1, [r4, #28]
9000bfa2:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bfa4:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfa6:	69e2      	ldr	r2, [r4, #28]
9000bfa8:	440a      	add	r2, r1
9000bfaa:	0a19      	lsrs	r1, r3, #8
9000bfac:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfae:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfb0:	69e2      	ldr	r2, [r4, #28]
9000bfb2:	440a      	add	r2, r1
9000bfb4:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfb6:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfb8:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfba:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfbc:	69e2      	ldr	r2, [r4, #28]
9000bfbe:	440a      	add	r2, r1
9000bfc0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bfc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bfc4:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bfc6:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bfc8:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000bfca:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bfcc:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bfce:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bfd0:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000bfd2:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfd4:	69e2      	ldr	r2, [r4, #28]
9000bfd6:	440a      	add	r2, r1
9000bfd8:	0a19      	lsrs	r1, r3, #8
9000bfda:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfdc:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfde:	69e2      	ldr	r2, [r4, #28]
9000bfe0:	440a      	add	r2, r1
9000bfe2:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfe4:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000bfe6:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000bfe8:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000bfea:	69e2      	ldr	r2, [r4, #28]
9000bfec:	440a      	add	r2, r1
9000bfee:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000bff0:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bff2:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000bff4:	3304      	adds	r3, #4
9000bff6:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000bff8:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000bffa:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000bffc:	69e1      	ldr	r1, [r4, #28]
9000bffe:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000c000:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c002:	69e2      	ldr	r2, [r4, #28]
9000c004:	440a      	add	r2, r1
9000c006:	0a19      	lsrs	r1, r3, #8
9000c008:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c00a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c00c:	69e2      	ldr	r2, [r4, #28]
9000c00e:	440a      	add	r2, r1
9000c010:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c012:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c014:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c016:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c018:	69e2      	ldr	r2, [r4, #28]
9000c01a:	440a      	add	r2, r1
9000c01c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000c01e:	6a63      	ldr	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000c020:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount += 4UL;
9000c022:	3304      	adds	r3, #4
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c024:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount += 4UL;
9000c026:	6263      	str	r3, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000c028:	6c53      	ldr	r3, [r2, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c02a:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c02c:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000c02e:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c030:	69e2      	ldr	r2, [r4, #28]
9000c032:	440a      	add	r2, r1
9000c034:	0a19      	lsrs	r1, r3, #8
9000c036:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c038:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c03a:	69e2      	ldr	r2, [r4, #28]
9000c03c:	440a      	add	r2, r1
9000c03e:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c040:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c042:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c044:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c046:	69e2      	ldr	r2, [r4, #28]
9000c048:	440a      	add	r2, r1
9000c04a:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000c04c:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c04e:	3304      	adds	r3, #4
9000c050:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000c052:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c054:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000c056:	429a      	cmp	r2, r3
9000c058:	f000 82c7 	beq.w	9000c5ea <JPEG_Process+0x7e6>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c05c:	6823      	ldr	r3, [r4, #0]
9000c05e:	e6f2      	b.n	9000be46 <JPEG_Process+0x42>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000c060:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c062:	2a00      	cmp	r2, #0
9000c064:	f000 810c 	beq.w	9000c280 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000c068:	6a21      	ldr	r1, [r4, #32]
9000c06a:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000c06c:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000c06e:	f240 81a1 	bls.w	9000c3b4 <JPEG_Process+0x5b0>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000c072:	1a52      	subs	r2, r2, r1
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c074:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000c076:	04cd      	lsls	r5, r1, #19
9000c078:	f53f aed9 	bmi.w	9000be2e <JPEG_Process+0x2a>
9000c07c:	2a00      	cmp	r2, #0
9000c07e:	f43f aed6 	beq.w	9000be2e <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000c082:	2a1f      	cmp	r2, #31
    nb_words = nb_bytes / 4UL;
9000c084:	ea4f 0192 	mov.w	r1, r2, lsr #2
    if (nb_words >= nbRequestWords)
9000c088:	f240 821d 	bls.w	9000c4c6 <JPEG_Process+0x6c2>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c08c:	69a2      	ldr	r2, [r4, #24]
        input_count = hjpeg->JpegInCount;
9000c08e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c090:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c092:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c094:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c096:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c098:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c09a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c09c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c0a0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0a2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0a6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c0a8:	6a21      	ldr	r1, [r4, #32]
9000c0aa:	3104      	adds	r1, #4
9000c0ac:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c0ae:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0b0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0b2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0b4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0b6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0b8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0ba:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0bc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c0c0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0c2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0c6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c0c8:	6a21      	ldr	r1, [r4, #32]
9000c0ca:	3104      	adds	r1, #4
9000c0cc:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c0ce:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0d0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0d2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0d4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0d6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0d8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0da:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0dc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c0e0:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0e2:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0e6:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c0e8:	6a21      	ldr	r1, [r4, #32]
9000c0ea:	3104      	adds	r1, #4
9000c0ec:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c0ee:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0f0:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c0f2:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0f4:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0f6:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c0f8:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c0fa:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c0fc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c100:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c102:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c106:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c108:	6a21      	ldr	r1, [r4, #32]
9000c10a:	3104      	adds	r1, #4
9000c10c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c10e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c110:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c112:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c114:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c116:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c118:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c11a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c11c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c120:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c122:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c126:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c128:	6a21      	ldr	r1, [r4, #32]
9000c12a:	3104      	adds	r1, #4
9000c12c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c12e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c130:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c132:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c134:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c136:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c138:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c13a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c13c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c140:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c142:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c146:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c148:	6a21      	ldr	r1, [r4, #32]
9000c14a:	3104      	adds	r1, #4
9000c14c:	6221      	str	r1, [r4, #32]
        input_count = hjpeg->JpegInCount;
9000c14e:	6a21      	ldr	r1, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c150:	1850      	adds	r0, r2, r1
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c152:	5c55      	ldrb	r5, [r2, r1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c154:	7881      	ldrb	r1, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c156:	7846      	ldrb	r6, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c158:	0409      	lsls	r1, r1, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c15a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c15c:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
9000c160:	4329      	orrs	r1, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c162:	ea41 6100 	orr.w	r1, r1, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c166:	6419      	str	r1, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c168:	6a21      	ldr	r1, [r4, #32]
9000c16a:	3104      	adds	r1, #4
9000c16c:	6221      	str	r1, [r4, #32]
          input_count = hjpeg->JpegInCount;
9000c16e:	6a20      	ldr	r0, [r4, #32]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c170:	1881      	adds	r1, r0, r2
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c172:	5c85      	ldrb	r5, [r0, r2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c174:	788a      	ldrb	r2, [r1, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c176:	78c8      	ldrb	r0, [r1, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c178:	0412      	lsls	r2, r2, #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c17a:	7849      	ldrb	r1, [r1, #1]
9000c17c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
9000c180:	432a      	orrs	r2, r5
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c182:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c186:	641a      	str	r2, [r3, #64]	; 0x40
        hjpeg->JpegInCount += 4UL;
9000c188:	6a22      	ldr	r2, [r4, #32]
9000c18a:	3204      	adds	r2, #4
9000c18c:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
9000c18e:	e64e      	b.n	9000be2e <JPEG_Process+0x2a>
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
9000c190:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c192:	2a00      	cmp	r2, #0
9000c194:	d074      	beq.n	9000c280 <JPEG_Process+0x47c>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000c196:	6a21      	ldr	r1, [r4, #32]
9000c198:	428a      	cmp	r2, r1
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000c19a:	6a21      	ldr	r1, [r4, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
9000c19c:	f200 817e 	bhi.w	9000c49c <JPEG_Process+0x698>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000c1a0:	428a      	cmp	r2, r1
9000c1a2:	f040 8109 	bne.w	9000c3b8 <JPEG_Process+0x5b4>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000c1a6:	6a21      	ldr	r1, [r4, #32]
9000c1a8:	4620      	mov	r0, r4
9000c1aa:	f7f5 fc55 	bl	90001a58 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000c1ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c1b0:	2a04      	cmp	r2, #4
9000c1b2:	d902      	bls.n	9000c1ba <JPEG_Process+0x3b6>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000c1b4:	f022 0203 	bic.w	r2, r2, #3
9000c1b8:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000c1ba:	2100      	movs	r1, #0
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c1bc:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000c1be:	6221      	str	r1, [r4, #32]
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c1c0:	6d61      	ldr	r1, [r4, #84]	; 0x54
9000c1c2:	04c9      	lsls	r1, r1, #19
9000c1c4:	f53f ae33 	bmi.w	9000be2e <JPEG_Process+0x2a>
9000c1c8:	2a00      	cmp	r2, #0
9000c1ca:	f43f ae30 	beq.w	9000be2e <JPEG_Process+0x2a>
    if (nb_words >= nbRequestWords)
9000c1ce:	0891      	lsrs	r1, r2, #2
9000c1d0:	f040 821c 	bne.w	9000c60c <JPEG_Process+0x808>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1d4:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1d6:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000c1d8:	6a21      	ldr	r1, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1da:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000c1dc:	f101 0101 	add.w	r1, r1, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1e0:	5c28      	ldrb	r0, [r5, r0]
          hjpeg->JpegInCount++;
9000c1e2:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1e4:	d010      	beq.n	9000c208 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1e6:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1e8:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1ea:	5c69      	ldrb	r1, [r5, r1]
9000c1ec:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
          hjpeg->JpegInCount++;
9000c1f0:	6a21      	ldr	r1, [r4, #32]
9000c1f2:	f101 0101 	add.w	r1, r1, #1
9000c1f6:	6221      	str	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c1f8:	d106      	bne.n	9000c208 <JPEG_Process+0x404>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c1fa:	6a22      	ldr	r2, [r4, #32]
9000c1fc:	5ca9      	ldrb	r1, [r5, r2]
          hjpeg->JpegInCount++;
9000c1fe:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c200:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
          hjpeg->JpegInCount++;
9000c204:	3201      	adds	r2, #1
9000c206:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000c208:	6418      	str	r0, [r3, #64]	; 0x40
9000c20a:	e610      	b.n	9000be2e <JPEG_Process+0x2a>
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
9000c20c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c20e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000c210:	3204      	adds	r2, #4
9000c212:	4295      	cmp	r5, r2
9000c214:	f0c0 80d2 	bcc.w	9000c3bc <JPEG_Process+0x5b8>
      dataword = hjpeg->Instance->DOR;
9000c218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c21a:	69e1      	ldr	r1, [r4, #28]
9000c21c:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c21e:	548b      	strb	r3, [r1, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000c220:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c222:	69e2      	ldr	r2, [r4, #28]
9000c224:	440a      	add	r2, r1
9000c226:	0a19      	lsrs	r1, r3, #8
9000c228:	7051      	strb	r1, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c22a:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c22c:	69e2      	ldr	r2, [r4, #28]
9000c22e:	440a      	add	r2, r1
9000c230:	0c19      	lsrs	r1, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c232:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c234:	7091      	strb	r1, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c236:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c238:	69e2      	ldr	r2, [r4, #28]
9000c23a:	440a      	add	r2, r1
9000c23c:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000c23e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000c240:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
      hjpeg->JpegOutCount += 4UL;
9000c242:	3304      	adds	r3, #4
9000c244:	6263      	str	r3, [r4, #36]	; 0x24
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000c246:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c248:	429a      	cmp	r2, r3
9000c24a:	f47f af07 	bne.w	9000c05c <JPEG_Process+0x258>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c24e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c250:	4620      	mov	r0, r4
9000c252:	69e1      	ldr	r1, [r4, #28]
9000c254:	f7f5 fc20 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c258:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c25a:	6266      	str	r6, [r4, #36]	; 0x24
9000c25c:	e5f3      	b.n	9000be46 <JPEG_Process+0x42>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c25e:	f7f5 fc65 	bl	90001b2c <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
9000c262:	4628      	mov	r0, r5
9000c264:	e5f5      	b.n	9000be52 <JPEG_Process+0x4e>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000c266:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c268:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000c26c:	631a      	str	r2, [r3, #48]	; 0x30
9000c26e:	e614      	b.n	9000be9a <JPEG_Process+0x96>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c270:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c272:	4620      	mov	r0, r4
9000c274:	69e1      	ldr	r1, [r4, #28]
9000c276:	f7f5 fc0f 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c27a:	2300      	movs	r3, #0
9000c27c:	6263      	str	r3, [r4, #36]	; 0x24
9000c27e:	e614      	b.n	9000beaa <JPEG_Process+0xa6>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000c280:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000c282:	f002 020c 	and.w	r2, r2, #12
9000c286:	2a0c      	cmp	r2, #12
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000c288:	6d62      	ldr	r2, [r4, #84]	; 0x54
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000c28a:	f000 8117 	beq.w	9000c4bc <JPEG_Process+0x6b8>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c28e:	f002 020c 	and.w	r2, r2, #12
9000c292:	2a08      	cmp	r2, #8
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000c294:	6d62      	ldr	r2, [r4, #84]	; 0x54
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c296:	f47f adca 	bne.w	9000be2e <JPEG_Process+0x2a>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000c29a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000c29e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
9000c2a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c2a2:	f022 0206 	bic.w	r2, r2, #6
9000c2a6:	631a      	str	r2, [r3, #48]	; 0x30
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c2a8:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000c2aa:	e5c0      	b.n	9000be2e <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000c2ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c2ae:	4296      	cmp	r6, r2
9000c2b0:	f67f adc9 	bls.w	9000be46 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000c2b4:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c2b6:	1a30      	subs	r0, r6, r0
    for (index = 0; index < nb_words; index++)
9000c2b8:	0880      	lsrs	r0, r0, #2
9000c2ba:	d020      	beq.n	9000c2fe <JPEG_Process+0x4fa>
9000c2bc:	4629      	mov	r1, r5
9000c2be:	e000      	b.n	9000c2c2 <JPEG_Process+0x4be>
      dataword = hjpeg->Instance->DOR;
9000c2c0:	6823      	ldr	r3, [r4, #0]
9000c2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000c2c4:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c2c6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c2c8:	69e6      	ldr	r6, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000c2ca:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c2cc:	54b3      	strb	r3, [r6, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000c2ce:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000c2d0:	69e2      	ldr	r2, [r4, #28]
9000c2d2:	4432      	add	r2, r6
9000c2d4:	ea4f 2613 	mov.w	r6, r3, lsr #8
9000c2d8:	7056      	strb	r6, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c2da:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000c2dc:	69e2      	ldr	r2, [r4, #28]
9000c2de:	4432      	add	r2, r6
9000c2e0:	ea4f 4613 	mov.w	r6, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c2e4:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c2e8:	7096      	strb	r6, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c2ea:	6a66      	ldr	r6, [r4, #36]	; 0x24
9000c2ec:	69e2      	ldr	r2, [r4, #28]
9000c2ee:	4432      	add	r2, r6
9000c2f0:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000c2f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c2f4:	f103 0304 	add.w	r3, r3, #4
9000c2f8:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000c2fa:	d1e1      	bne.n	9000c2c0 <JPEG_Process+0x4bc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000c2fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
9000c2fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c300:	42b3      	cmp	r3, r6
9000c302:	f000 817a 	beq.w	9000c5fa <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000c306:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000c30a:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000c30c:	ebb6 0008 	subs.w	r0, r6, r8
      dataword = hjpeg->Instance->DOR;
9000c310:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000c312:	d00e      	beq.n	9000c332 <JPEG_Process+0x52e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c314:	f005 0303 	and.w	r3, r5, #3
9000c318:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c31a:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000c31c:	3501      	adds	r5, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c31e:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000c320:	42a8      	cmp	r0, r5
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c322:	fa27 f303 	lsr.w	r3, r7, r3
9000c326:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000c328:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c32a:	f103 0301 	add.w	r3, r3, #1
9000c32e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000c330:	d1f0      	bne.n	9000c314 <JPEG_Process+0x510>
      nb_bytes = 4UL - nb_bytes;
9000c332:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c336:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c338:	69e1      	ldr	r1, [r4, #28]
9000c33a:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000c33c:	eba8 0606 	sub.w	r6, r8, r6
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c340:	f7f5 fbaa 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c344:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000c346:	2e03      	cmp	r6, #3
      hjpeg->JpegOutCount = 0;
9000c348:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c34a:	f63f ae87 	bhi.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c34e:	00f3      	lsls	r3, r6, #3
9000c350:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c352:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000c354:	2e03      	cmp	r6, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c356:	fa27 f303 	lsr.w	r3, r7, r3
9000c35a:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
9000c35c:	f106 0301 	add.w	r3, r6, #1
        hjpeg->JpegOutCount++;
9000c360:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c362:	f102 0201 	add.w	r2, r2, #1
9000c366:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c368:	f43f ae78 	beq.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c36c:	00db      	lsls	r3, r3, #3
9000c36e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c370:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000c372:	2e02      	cmp	r6, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c374:	fa27 f303 	lsr.w	r3, r7, r3
9000c378:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
9000c37a:	f106 0202 	add.w	r2, r6, #2
        hjpeg->JpegOutCount++;
9000c37e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c380:	f103 0301 	add.w	r3, r3, #1
9000c384:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c386:	f43f ae69 	beq.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c38a:	00d3      	lsls	r3, r2, #3
9000c38c:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000c38e:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000c390:	2a02      	cmp	r2, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c392:	fa27 f303 	lsr.w	r3, r7, r3
9000c396:	5443      	strb	r3, [r0, r1]
        hjpeg->JpegOutCount++;
9000c398:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c39a:	f103 0301 	add.w	r3, r3, #1
9000c39e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c3a0:	f47f ae5c 	bne.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c3a4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c3a6:	0e3f      	lsrs	r7, r7, #24
9000c3a8:	69e2      	ldr	r2, [r4, #28]
9000c3aa:	54d7      	strb	r7, [r2, r3]
        hjpeg->JpegOutCount++;
9000c3ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c3ae:	3301      	adds	r3, #1
9000c3b0:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c3b2:	e653      	b.n	9000c05c <JPEG_Process+0x258>
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
9000c3b4:	428a      	cmp	r2, r1
9000c3b6:	d073      	beq.n	9000c4a0 <JPEG_Process+0x69c>
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c3b8:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000c3ba:	e538      	b.n	9000be2e <JPEG_Process+0x2a>
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
9000c3bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c3be:	4295      	cmp	r5, r2
9000c3c0:	f67f ad41 	bls.w	9000be46 <JPEG_Process+0x42>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
9000c3c4:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000c3c6:	1a28      	subs	r0, r5, r0
    for (index = 0; index < nb_words; index++)
9000c3c8:	0880      	lsrs	r0, r0, #2
9000c3ca:	d020      	beq.n	9000c40e <JPEG_Process+0x60a>
9000c3cc:	4631      	mov	r1, r6
9000c3ce:	e000      	b.n	9000c3d2 <JPEG_Process+0x5ce>
      dataword = hjpeg->Instance->DOR;
9000c3d0:	6823      	ldr	r3, [r4, #0]
9000c3d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    for (index = 0; index < nb_words; index++)
9000c3d4:	3101      	adds	r1, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c3d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c3d8:	69e5      	ldr	r5, [r4, #28]
    for (index = 0; index < nb_words; index++)
9000c3da:	4288      	cmp	r0, r1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
9000c3dc:	54ab      	strb	r3, [r5, r2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
9000c3de:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000c3e0:	69e2      	ldr	r2, [r4, #28]
9000c3e2:	442a      	add	r2, r5
9000c3e4:	ea4f 2513 	mov.w	r5, r3, lsr #8
9000c3e8:	7055      	strb	r5, [r2, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c3ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000c3ec:	69e2      	ldr	r2, [r4, #28]
9000c3ee:	442a      	add	r2, r5
9000c3f0:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c3f4:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
9000c3f8:	7095      	strb	r5, [r2, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
9000c3fa:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000c3fc:	69e2      	ldr	r2, [r4, #28]
9000c3fe:	442a      	add	r2, r5
9000c400:	70d3      	strb	r3, [r2, #3]
      hjpeg->JpegOutCount += 4UL;
9000c402:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c404:	f103 0304 	add.w	r3, r3, #4
9000c408:	6263      	str	r3, [r4, #36]	; 0x24
    for (index = 0; index < nb_words; index++)
9000c40a:	d1e1      	bne.n	9000c3d0 <JPEG_Process+0x5cc>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
9000c40c:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
9000c40e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c410:	429d      	cmp	r5, r3
9000c412:	f000 80f2 	beq.w	9000c5fa <JPEG_Process+0x7f6>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
9000c416:	f8d4 8024 	ldr.w	r8, [r4, #36]	; 0x24
      dataword = hjpeg->Instance->DOR;
9000c41a:	6823      	ldr	r3, [r4, #0]
      for (index = 0; index < nb_bytes; index++)
9000c41c:	ebb5 0008 	subs.w	r0, r5, r8
      dataword = hjpeg->Instance->DOR;
9000c420:	6c5f      	ldr	r7, [r3, #68]	; 0x44
      for (index = 0; index < nb_bytes; index++)
9000c422:	d00e      	beq.n	9000c442 <JPEG_Process+0x63e>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c424:	f006 0303 	and.w	r3, r6, #3
9000c428:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c42a:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
9000c42c:	3601      	adds	r6, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c42e:	00db      	lsls	r3, r3, #3
      for (index = 0; index < nb_bytes; index++)
9000c430:	42b0      	cmp	r0, r6
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
9000c432:	fa27 f303 	lsr.w	r3, r7, r3
9000c436:	548b      	strb	r3, [r1, r2]
        hjpeg->JpegOutCount++;
9000c438:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c43a:	f103 0301 	add.w	r3, r3, #1
9000c43e:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = 0; index < nb_bytes; index++)
9000c440:	d1f0      	bne.n	9000c424 <JPEG_Process+0x620>
      nb_bytes = 4UL - nb_bytes;
9000c442:	f108 0804 	add.w	r8, r8, #4
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c446:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c448:	69e1      	ldr	r1, [r4, #28]
9000c44a:	4620      	mov	r0, r4
      nb_bytes = 4UL - nb_bytes;
9000c44c:	eba8 0505 	sub.w	r5, r8, r5
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c450:	f7f5 fb22 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c454:	2300      	movs	r3, #0
      for (index = nb_bytes; index < 4UL; index++)
9000c456:	2d03      	cmp	r5, #3
      hjpeg->JpegOutCount = 0;
9000c458:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c45a:	f63f adff 	bhi.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c45e:	00eb      	lsls	r3, r5, #3
9000c460:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c462:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000c464:	2d03      	cmp	r5, #3
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c466:	fa27 f303 	lsr.w	r3, r7, r3
9000c46a:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
9000c46c:	f105 0301 	add.w	r3, r5, #1
        hjpeg->JpegOutCount++;
9000c470:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c472:	f102 0201 	add.w	r2, r2, #1
9000c476:	6262      	str	r2, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c478:	f43f adf0 	beq.w	9000c05c <JPEG_Process+0x258>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c47c:	00db      	lsls	r3, r3, #3
9000c47e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c480:	69e1      	ldr	r1, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
9000c482:	2d02      	cmp	r5, #2
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
9000c484:	fa27 f303 	lsr.w	r3, r7, r3
9000c488:	548b      	strb	r3, [r1, r2]
      for (index = nb_bytes; index < 4UL; index++)
9000c48a:	f105 0202 	add.w	r2, r5, #2
        hjpeg->JpegOutCount++;
9000c48e:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c490:	f103 0301 	add.w	r3, r3, #1
9000c494:	6263      	str	r3, [r4, #36]	; 0x24
      for (index = nb_bytes; index < 4UL; index++)
9000c496:	f47f af78 	bne.w	9000c38a <JPEG_Process+0x586>
9000c49a:	e5df      	b.n	9000c05c <JPEG_Process+0x258>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
9000c49c:	1a52      	subs	r2, r2, r1
9000c49e:	e68f      	b.n	9000c1c0 <JPEG_Process+0x3bc>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
9000c4a0:	6a21      	ldr	r1, [r4, #32]
9000c4a2:	4620      	mov	r0, r4
9000c4a4:	f7f5 fad8 	bl	90001a58 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
9000c4a8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c4aa:	2a04      	cmp	r2, #4
9000c4ac:	d902      	bls.n	9000c4b4 <JPEG_Process+0x6b0>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
9000c4ae:	f022 0203 	bic.w	r2, r2, #3
9000c4b2:	62a2      	str	r2, [r4, #40]	; 0x28
    hjpeg->JpegInCount = 0;
9000c4b4:	2100      	movs	r1, #0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c4b6:	6823      	ldr	r3, [r4, #0]
    hjpeg->JpegInCount = 0;
9000c4b8:	6221      	str	r1, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
9000c4ba:	e5db      	b.n	9000c074 <JPEG_Process+0x270>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
9000c4bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
9000c4c0:	6562      	str	r2, [r4, #84]	; 0x54
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
9000c4c2:	6d62      	ldr	r2, [r4, #84]	; 0x54
9000c4c4:	e4b3      	b.n	9000be2e <JPEG_Process+0x2a>
      if (nb_words > 0UL)
9000c4c6:	2a03      	cmp	r2, #3
9000c4c8:	f240 80a3 	bls.w	9000c612 <JPEG_Process+0x80e>
        for (index = 0; index < nb_words; index++)
9000c4cc:	2900      	cmp	r1, #0
9000c4ce:	f43f acae 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c4d2:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c4d4:	2901      	cmp	r1, #1
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c4d6:	69a2      	ldr	r2, [r4, #24]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c4d8:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c4dc:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c4de:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c4e0:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c4e2:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c4e6:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c4e8:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c4ec:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c4f0:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c4f4:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c4f6:	6a20      	ldr	r0, [r4, #32]
9000c4f8:	f100 0004 	add.w	r0, r0, #4
9000c4fc:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c4fe:	f43f ac96 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c502:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c504:	2902      	cmp	r1, #2
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c506:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c50a:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c50c:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c50e:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c510:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c514:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c516:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c51a:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c51e:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c522:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c524:	6a20      	ldr	r0, [r4, #32]
9000c526:	f100 0004 	add.w	r0, r0, #4
9000c52a:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c52c:	f43f ac7f 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c530:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c532:	2903      	cmp	r1, #3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c534:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c538:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c53a:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c53c:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c53e:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c542:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c544:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c548:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c54c:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c550:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c552:	6a20      	ldr	r0, [r4, #32]
9000c554:	f100 0004 	add.w	r0, r0, #4
9000c558:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c55a:	f43f ac68 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c55e:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c560:	2904      	cmp	r1, #4
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c562:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c566:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c568:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c56a:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c56c:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c570:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c572:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c576:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c57a:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c57e:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c580:	6a20      	ldr	r0, [r4, #32]
9000c582:	f100 0004 	add.w	r0, r0, #4
9000c586:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c588:	f43f ac51 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c58c:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c58e:	2905      	cmp	r1, #5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c590:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c594:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c596:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c598:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c59a:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c59e:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c5a0:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c5a4:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c5a8:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c5ac:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c5ae:	6a20      	ldr	r0, [r4, #32]
9000c5b0:	f100 0004 	add.w	r0, r0, #4
9000c5b4:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c5b6:	f43f ac3a 	beq.w	9000be2e <JPEG_Process+0x2a>
          input_count = hjpeg->JpegInCount;
9000c5ba:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c5bc:	2907      	cmp	r1, #7
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c5be:	eb02 0500 	add.w	r5, r2, r0
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c5c2:	5c16      	ldrb	r6, [r2, r0]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c5c4:	78a8      	ldrb	r0, [r5, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c5c6:	786f      	ldrb	r7, [r5, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c5c8:	ea4f 4000 	mov.w	r0, r0, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
9000c5cc:	78ed      	ldrb	r5, [r5, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
9000c5ce:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
9000c5d2:	ea40 0006 	orr.w	r0, r0, r6
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
9000c5d6:	ea40 6005 	orr.w	r0, r0, r5, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c5da:	6418      	str	r0, [r3, #64]	; 0x40
          hjpeg->JpegInCount += 4UL;
9000c5dc:	6a20      	ldr	r0, [r4, #32]
9000c5de:	f100 0004 	add.w	r0, r0, #4
9000c5e2:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_words; index++)
9000c5e4:	f43f adc3 	beq.w	9000c16e <JPEG_Process+0x36a>
9000c5e8:	e421      	b.n	9000be2e <JPEG_Process+0x2a>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c5ea:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c5ec:	4620      	mov	r0, r4
9000c5ee:	69e1      	ldr	r1, [r4, #28]
9000c5f0:	f7f5 fa52 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c5f4:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c5f6:	6265      	str	r5, [r4, #36]	; 0x24
9000c5f8:	e425      	b.n	9000be46 <JPEG_Process+0x42>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c5fa:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c5fc:	4620      	mov	r0, r4
9000c5fe:	69e1      	ldr	r1, [r4, #28]
9000c600:	f7f5 fa4a 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
9000c604:	2200      	movs	r2, #0
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
9000c606:	6823      	ldr	r3, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c608:	6262      	str	r2, [r4, #36]	; 0x24
9000c60a:	e41c      	b.n	9000be46 <JPEG_Process+0x42>
        input_count = hjpeg->JpegInCount;
9000c60c:	6a22      	ldr	r2, [r4, #32]
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
9000c60e:	69a0      	ldr	r0, [r4, #24]
9000c610:	e5ae      	b.n	9000c170 <JPEG_Process+0x36c>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c612:	6a21      	ldr	r1, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c614:	2a01      	cmp	r2, #1
          hjpeg->JpegInCount++;
9000c616:	6a20      	ldr	r0, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c618:	69a5      	ldr	r5, [r4, #24]
          hjpeg->JpegInCount++;
9000c61a:	f100 0001 	add.w	r0, r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c61e:	5c69      	ldrb	r1, [r5, r1]
          hjpeg->JpegInCount++;
9000c620:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c622:	d010      	beq.n	9000c646 <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c624:	6a20      	ldr	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c626:	2a03      	cmp	r2, #3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c628:	5c28      	ldrb	r0, [r5, r0]
9000c62a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
          hjpeg->JpegInCount++;
9000c62e:	6a20      	ldr	r0, [r4, #32]
9000c630:	f100 0001 	add.w	r0, r0, #1
9000c634:	6220      	str	r0, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
9000c636:	d106      	bne.n	9000c646 <JPEG_Process+0x842>
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c638:	6a22      	ldr	r2, [r4, #32]
9000c63a:	5ca8      	ldrb	r0, [r5, r2]
          hjpeg->JpegInCount++;
9000c63c:	6a22      	ldr	r2, [r4, #32]
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
9000c63e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
          hjpeg->JpegInCount++;
9000c642:	3201      	adds	r2, #1
9000c644:	6222      	str	r2, [r4, #32]
        hjpeg->Instance->DIR = dataword;
9000c646:	6419      	str	r1, [r3, #64]	; 0x40
9000c648:	f7ff bbf1 	b.w	9000be2e <JPEG_Process+0x2a>

9000c64c <HAL_JPEG_IRQHandler>:
  switch (hjpeg->State)
9000c64c:	f890 304d 	ldrb.w	r3, [r0, #77]	; 0x4d
9000c650:	3b03      	subs	r3, #3
9000c652:	2b01      	cmp	r3, #1
9000c654:	d900      	bls.n	9000c658 <HAL_JPEG_IRQHandler+0xc>
9000c656:	4770      	bx	lr
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c658:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c65a:	f003 030c 	and.w	r3, r3, #12
9000c65e:	2b08      	cmp	r3, #8
{
9000c660:	b530      	push	{r4, r5, lr}
9000c662:	4604      	mov	r4, r0
9000c664:	b083      	sub	sp, #12
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
9000c666:	d006      	beq.n	9000c676 <HAL_JPEG_IRQHandler+0x2a>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
9000c668:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c66a:	f003 030c 	and.w	r3, r3, #12
9000c66e:	2b0c      	cmp	r3, #12
9000c670:	d006      	beq.n	9000c680 <HAL_JPEG_IRQHandler+0x34>
}
9000c672:	b003      	add	sp, #12
9000c674:	bd30      	pop	{r4, r5, pc}
9000c676:	b003      	add	sp, #12
9000c678:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        (void) JPEG_Process(hjpeg);
9000c67c:	f7ff bbc2 	b.w	9000be04 <JPEG_Process>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c680:	6d43      	ldr	r3, [r0, #84]	; 0x54
9000c682:	f003 0303 	and.w	r3, r3, #3
9000c686:	2b02      	cmp	r3, #2
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c688:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c68a:	d045      	beq.n	9000c718 <HAL_JPEG_IRQHandler+0xcc>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
9000c68c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c68e:	0692      	lsls	r2, r2, #26
9000c690:	d5ef      	bpl.n	9000c672 <HAL_JPEG_IRQHandler+0x26>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c692:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c694:	6b20      	ldr	r0, [r4, #48]	; 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
9000c696:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
9000c69a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c69c:	681a      	ldr	r2, [r3, #0]
9000c69e:	f022 0201 	bic.w	r2, r2, #1
9000c6a2:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
9000c6a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c6a6:	f022 027e 	bic.w	r2, r2, #126	; 0x7e
9000c6aa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
9000c6ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c6ae:	f042 0260 	orr.w	r2, r2, #96	; 0x60
9000c6b2:	639a      	str	r2, [r3, #56]	; 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
9000c6b4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c6b8:	2b02      	cmp	r3, #2
9000c6ba:	d052      	beq.n	9000c762 <HAL_JPEG_IRQHandler+0x116>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
9000c6bc:	6b60      	ldr	r0, [r4, #52]	; 0x34
9000c6be:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000c6c2:	2b02      	cmp	r3, #2
9000c6c4:	d03f      	beq.n	9000c746 <HAL_JPEG_IRQHandler+0xfa>
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
9000c6c6:	6803      	ldr	r3, [r0, #0]
9000c6c8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000c6ca:	695b      	ldr	r3, [r3, #20]
9000c6cc:	f3c3 0310 	ubfx	r3, r3, #0, #17
9000c6d0:	1ad3      	subs	r3, r2, r3
9000c6d2:	6263      	str	r3, [r4, #36]	; 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
9000c6d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c6d6:	429a      	cmp	r2, r3
9000c6d8:	d046      	beq.n	9000c768 <HAL_JPEG_IRQHandler+0x11c>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
9000c6da:	6822      	ldr	r2, [r4, #0]
9000c6dc:	6b55      	ldr	r5, [r2, #52]	; 0x34
9000c6de:	f015 0510 	ands.w	r5, r5, #16
9000c6e2:	d135      	bne.n	9000c750 <HAL_JPEG_IRQHandler+0x104>
    if (hjpeg->JpegOutCount > 0UL)
9000c6e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
9000c6e6:	2b00      	cmp	r3, #0
9000c6e8:	d149      	bne.n	9000c77e <HAL_JPEG_IRQHandler+0x132>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c6ea:	6813      	ldr	r3, [r2, #0]
    __HAL_UNLOCK(hjpeg);
9000c6ec:	2000      	movs	r0, #0
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c6ee:	2101      	movs	r1, #1
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c6f0:	f023 0301 	bic.w	r3, r3, #1
9000c6f4:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
9000c6f6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c6f8:	6d62      	ldr	r2, [r4, #84]	; 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c6fa:	f003 0303 	and.w	r3, r3, #3
    __HAL_UNLOCK(hjpeg);
9000c6fe:	f884 004c 	strb.w	r0, [r4, #76]	; 0x4c
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c702:	f402 4282 	and.w	r2, r2, #16640	; 0x4100
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c706:	4620      	mov	r0, r4
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c708:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
9000c70a:	6562      	str	r2, [r4, #84]	; 0x54
    hjpeg->State = HAL_JPEG_STATE_READY;
9000c70c:	f884 104d 	strb.w	r1, [r4, #77]	; 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
9000c710:	d032      	beq.n	9000c778 <HAL_JPEG_IRQHandler+0x12c>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
9000c712:	f7ff f9ab 	bl	9000ba6c <HAL_JPEG_EncodeCpltCallback>
9000c716:	e7ac      	b.n	9000c672 <HAL_JPEG_IRQHandler+0x26>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
9000c718:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c71a:	0651      	lsls	r1, r2, #25
9000c71c:	d5b6      	bpl.n	9000c68c <HAL_JPEG_IRQHandler+0x40>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
9000c71e:	1d01      	adds	r1, r0, #4
  if ((hjpeg == NULL) || (pInfo == NULL))
9000c720:	9101      	str	r1, [sp, #4]
9000c722:	f7fe ff11 	bl	9000b548 <HAL_JPEG_GetInfo.part.0>
      hjpeg->Conf.ImageQuality = 0;
9000c726:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c728:	9901      	ldr	r1, [sp, #4]
9000c72a:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
9000c72c:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
9000c72e:	f7f5 f941 	bl	900019b4 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
9000c732:	6823      	ldr	r3, [r4, #0]
9000c734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
9000c736:	f022 0240 	bic.w	r2, r2, #64	; 0x40
9000c73a:	631a      	str	r2, [r3, #48]	; 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
9000c73c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
9000c73e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
9000c742:	639a      	str	r2, [r3, #56]	; 0x38
9000c744:	e7a2      	b.n	9000c68c <HAL_JPEG_IRQHandler+0x40>
}
9000c746:	b003      	add	sp, #12
9000c748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
9000c74c:	f000 bb34 	b.w	9000cdb8 <HAL_MDMA_Abort_IT>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
9000c750:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000c752:	049b      	lsls	r3, r3, #18
9000c754:	d48d      	bmi.n	9000c672 <HAL_JPEG_IRQHandler+0x26>
    JPEG_DMA_PollResidualData(hjpeg);
9000c756:	4620      	mov	r0, r4
}
9000c758:	b003      	add	sp, #12
9000c75a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
9000c75e:	f7ff b9f3 	b.w	9000bb48 <JPEG_DMA_PollResidualData>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
9000c762:	f000 fb29 	bl	9000cdb8 <HAL_MDMA_Abort_IT>
9000c766:	e7a9      	b.n	9000c6bc <HAL_JPEG_IRQHandler+0x70>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c768:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c76a:	4620      	mov	r0, r4
9000c76c:	69e1      	ldr	r1, [r4, #28]
9000c76e:	f7f5 f993 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
9000c772:	2300      	movs	r3, #0
9000c774:	6263      	str	r3, [r4, #36]	; 0x24
9000c776:	e7b0      	b.n	9000c6da <HAL_JPEG_IRQHandler+0x8e>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
9000c778:	f7f5 f9d8 	bl	90001b2c <HAL_JPEG_DecodeCpltCallback>
9000c77c:	e779      	b.n	9000c672 <HAL_JPEG_IRQHandler+0x26>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
9000c77e:	6a62      	ldr	r2, [r4, #36]	; 0x24
9000c780:	4620      	mov	r0, r4
9000c782:	69e1      	ldr	r1, [r4, #28]
9000c784:	f7f5 f988 	bl	90001a98 <HAL_JPEG_DataReadyCallback>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
9000c788:	6822      	ldr	r2, [r4, #0]
      hjpeg->JpegOutCount = 0;
9000c78a:	6265      	str	r5, [r4, #36]	; 0x24
9000c78c:	e7ad      	b.n	9000c6ea <HAL_JPEG_IRQHandler+0x9e>
9000c78e:	bf00      	nop

9000c790 <HAL_LTDC_Init>:
{
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
9000c790:	2800      	cmp	r0, #0
9000c792:	d067      	beq.n	9000c864 <HAL_LTDC_Init+0xd4>
{
9000c794:	b538      	push	{r3, r4, r5, lr}
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
9000c796:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
9000c79a:	4604      	mov	r4, r0
9000c79c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000c7a0:	2b00      	cmp	r3, #0
9000c7a2:	d05a      	beq.n	9000c85a <HAL_LTDC_Init+0xca>
  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7a4:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c7a6:	2102      	movs	r1, #2
  tmp = (hltdc->Init.HorizontalSync << 16U);
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
9000c7a8:	69e5      	ldr	r5, [r4, #28]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c7aa:	f884 10a1 	strb.w	r1, [r4, #161]	; 0xa1
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7ae:	e9d4 3200 	ldrd	r3, r2, [r4]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c7b2:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7b4:	4302      	orrs	r2, r0
9000c7b6:	68e0      	ldr	r0, [r4, #12]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c7b8:	f021 4170 	bic.w	r1, r1, #4026531840	; 0xf0000000
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7bc:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c7be:	6920      	ldr	r0, [r4, #16]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
9000c7c0:	6199      	str	r1, [r3, #24]
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
9000c7c2:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7c4:	6999      	ldr	r1, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c7c6:	4828      	ldr	r0, [pc, #160]	; (9000c868 <HAL_LTDC_Init+0xd8>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
9000c7c8:	430a      	orrs	r2, r1
9000c7ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
9000c7cc:	689a      	ldr	r2, [r3, #8]
9000c7ce:	4002      	ands	r2, r0
9000c7d0:	609a      	str	r2, [r3, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
9000c7d2:	6962      	ldr	r2, [r4, #20]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
9000c7d4:	6899      	ldr	r1, [r3, #8]
9000c7d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
9000c7da:	69a2      	ldr	r2, [r4, #24]
9000c7dc:	4311      	orrs	r1, r2
9000c7de:	6099      	str	r1, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
9000c7e0:	68d9      	ldr	r1, [r3, #12]
9000c7e2:	4001      	ands	r1, r0
9000c7e4:	60d9      	str	r1, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c7e6:	68da      	ldr	r2, [r3, #12]
9000c7e8:	6a21      	ldr	r1, [r4, #32]
9000c7ea:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
9000c7ee:	6a65      	ldr	r5, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
9000c7f0:	430a      	orrs	r2, r1
9000c7f2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
9000c7f4:	691a      	ldr	r2, [r3, #16]
9000c7f6:	4002      	ands	r2, r0
9000c7f8:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c7fa:	6919      	ldr	r1, [r3, #16]
9000c7fc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000c7fe:	ea41 4105 	orr.w	r1, r1, r5, lsl #16

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
  tmp = (hltdc->Init.TotalWidth << 16U);
9000c802:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
9000c804:	4311      	orrs	r1, r2
9000c806:	6119      	str	r1, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
9000c808:	6959      	ldr	r1, [r3, #20]
9000c80a:	4008      	ands	r0, r1
9000c80c:	6158      	str	r0, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
9000c80e:	695a      	ldr	r2, [r3, #20]
9000c810:	6b21      	ldr	r1, [r4, #48]	; 0x30
9000c812:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
9000c816:	430a      	orrs	r2, r1
9000c818:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c81a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
9000c81c:	f894 0035 	ldrb.w	r0, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c820:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
9000c824:	f894 c036 	ldrb.w	ip, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
9000c828:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c82a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
9000c82c:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
9000c830:	430a      	orrs	r2, r1
9000c832:	ea42 2200 	orr.w	r2, r2, r0, lsl #8

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c836:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
9000c838:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
9000c83c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
9000c83e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c840:	f042 0206 	orr.w	r2, r2, #6
9000c844:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
9000c846:	699a      	ldr	r2, [r3, #24]
9000c848:	f042 0201 	orr.w	r2, r2, #1
9000c84c:	619a      	str	r2, [r3, #24]

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
9000c84e:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
9000c850:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
9000c854:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1

  return HAL_OK;
}
9000c858:	bd38      	pop	{r3, r4, r5, pc}
    hltdc->Lock = HAL_UNLOCKED;
9000c85a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
9000c85e:	f7f8 f8bb 	bl	900049d8 <HAL_LTDC_MspInit>
9000c862:	e79f      	b.n	9000c7a4 <HAL_LTDC_Init+0x14>
    return HAL_ERROR;
9000c864:	2001      	movs	r0, #1
}
9000c866:	4770      	bx	lr
9000c868:	f000f800 	.word	0xf000f800

9000c86c <HAL_LTDC_ErrorCallback>:
9000c86c:	4770      	bx	lr
9000c86e:	bf00      	nop

9000c870 <HAL_LTDC_ReloadEventCallback>:
9000c870:	4770      	bx	lr
9000c872:	bf00      	nop

9000c874 <HAL_LTDC_IRQHandler>:
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c874:	6803      	ldr	r3, [r0, #0]
{
9000c876:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
9000c878:	6b9d      	ldr	r5, [r3, #56]	; 0x38
{
9000c87a:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
9000c87c:	6b5e      	ldr	r6, [r3, #52]	; 0x34

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
9000c87e:	076a      	lsls	r2, r5, #29
9000c880:	d501      	bpl.n	9000c886 <HAL_LTDC_IRQHandler+0x12>
9000c882:	0771      	lsls	r1, r6, #29
9000c884:	d41d      	bmi.n	9000c8c2 <HAL_LTDC_IRQHandler+0x4e>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
9000c886:	07aa      	lsls	r2, r5, #30
9000c888:	d501      	bpl.n	9000c88e <HAL_LTDC_IRQHandler+0x1a>
9000c88a:	07b3      	lsls	r3, r6, #30
9000c88c:	d42d      	bmi.n	9000c8ea <HAL_LTDC_IRQHandler+0x76>
    HAL_LTDC_ErrorCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
9000c88e:	07e8      	lsls	r0, r5, #31
9000c890:	d501      	bpl.n	9000c896 <HAL_LTDC_IRQHandler+0x22>
9000c892:	07f1      	lsls	r1, r6, #31
9000c894:	d440      	bmi.n	9000c918 <HAL_LTDC_IRQHandler+0xa4>
    HAL_LTDC_LineEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
9000c896:	072a      	lsls	r2, r5, #28
9000c898:	d501      	bpl.n	9000c89e <HAL_LTDC_IRQHandler+0x2a>
9000c89a:	0733      	lsls	r3, r6, #28
9000c89c:	d400      	bmi.n	9000c8a0 <HAL_LTDC_IRQHandler+0x2c>
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
9000c89e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c8a0:	6823      	ldr	r3, [r4, #0]
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c8a2:	2008      	movs	r0, #8
    hltdc->State = HAL_LTDC_STATE_READY;
9000c8a4:	2501      	movs	r5, #1
    __HAL_UNLOCK(hltdc);
9000c8a6:	2100      	movs	r1, #0
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
9000c8a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c8aa:	f022 0208 	bic.w	r2, r2, #8
9000c8ae:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
9000c8b0:	63d8      	str	r0, [r3, #60]	; 0x3c
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c8b2:	4620      	mov	r0, r4
    hltdc->State = HAL_LTDC_STATE_READY;
9000c8b4:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c8b8:	f884 10a0 	strb.w	r1, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
9000c8bc:	f7ff ffd8 	bl	9000c870 <HAL_LTDC_ReloadEventCallback>
}
9000c8c0:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
9000c8c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c8c4:	f022 0204 	bic.w	r2, r2, #4
9000c8c8:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
9000c8ca:	2204      	movs	r2, #4
9000c8cc:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
9000c8ce:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
9000c8d2:	f043 0301 	orr.w	r3, r3, #1
9000c8d6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c8da:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c8dc:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c8e0:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c8e4:	f7ff ffc2 	bl	9000c86c <HAL_LTDC_ErrorCallback>
9000c8e8:	e7cd      	b.n	9000c886 <HAL_LTDC_IRQHandler+0x12>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c8ea:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
9000c8ec:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
9000c8ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c8f0:	f022 0202 	bic.w	r2, r2, #2
9000c8f4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
9000c8f6:	2202      	movs	r2, #2
9000c8f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c8fa:	2204      	movs	r2, #4
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
9000c8fc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
9000c900:	f043 0302 	orr.w	r3, r3, #2
9000c904:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
9000c908:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
9000c90a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c90e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
9000c912:	f7ff ffab 	bl	9000c86c <HAL_LTDC_ErrorCallback>
9000c916:	e7ba      	b.n	9000c88e <HAL_LTDC_IRQHandler+0x1a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c918:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
9000c91a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000c91c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
9000c91e:	f022 0201 	bic.w	r2, r2, #1
9000c922:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
9000c924:	2201      	movs	r2, #1
9000c926:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
9000c928:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
9000c92a:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
9000c92e:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
9000c932:	f7f6 f8d7 	bl	90002ae4 <HAL_LTDC_LineEventCallback>
9000c936:	e7ae      	b.n	9000c896 <HAL_LTDC_IRQHandler+0x22>

9000c938 <HAL_LTDC_ConfigLayer>:
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
9000c938:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
9000c93c:	2b01      	cmp	r3, #1
9000c93e:	f000 80c6 	beq.w	9000cace <HAL_LTDC_ConfigLayer+0x196>

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c942:	2302      	movs	r3, #2
{
9000c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c948:	f04f 0e34 	mov.w	lr, #52	; 0x34
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c94c:	f8d0 9000 	ldr.w	r9, [r0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000c950:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
{
9000c954:	b083      	sub	sp, #12
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c956:	fb0e 0e02 	mla	lr, lr, r2, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c95a:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c95c:	f8d9 300c 	ldr.w	r3, [r9, #12]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c960:	460c      	mov	r4, r1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c962:	f102 0684 	add.w	r6, r2, #132	; 0x84
9000c966:	460d      	mov	r5, r1
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c968:	f3c3 4b0b 	ubfx	fp, r3, #16, #12
9000c96c:	4680      	mov	r8, r0
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c96e:	eb09 0c06 	add.w	ip, r9, r6
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c972:	f10e 0e38 	add.w	lr, lr, #56	; 0x38
  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000c976:	f8df a164 	ldr.w	sl, [pc, #356]	; 9000cadc <HAL_LTDC_ConfigLayer+0x1a4>
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c97a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9000c97e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
9000c982:	9301      	str	r3, [sp, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c984:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c986:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c98a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c98c:	686f      	ldr	r7, [r5, #4]
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c98e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c992:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
9000c994:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
9000c998:	6823      	ldr	r3, [r4, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
9000c99a:	44bb      	add	fp, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
9000c99c:	f8ce 3000 	str.w	r3, [lr]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c9a0:	9b01      	ldr	r3, [sp, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c9a2:	682a      	ldr	r2, [r5, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
9000c9a4:	f8cc 3004 	str.w	r3, [ip, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c9a8:	f8d9 300c 	ldr.w	r3, [r9, #12]
9000c9ac:	1c51      	adds	r1, r2, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
9000c9ae:	f8d5 e018 	ldr.w	lr, [r5, #24]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c9b2:	f3c3 430b 	ubfx	r3, r3, #16, #12
9000c9b6:	440b      	add	r3, r1
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c9b8:	68e9      	ldr	r1, [r5, #12]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
9000c9ba:	ea43 430b 	orr.w	r3, r3, fp, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
9000c9be:	f8cc 3004 	str.w	r3, [ip, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c9c2:	f8d9 300c 	ldr.w	r3, [r9, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c9c6:	f8dc 0008 	ldr.w	r0, [ip, #8]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c9ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c9ce:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
9000c9d2:	4419      	add	r1, r3
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c9d4:	68ab      	ldr	r3, [r5, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
9000c9d6:	f8cc 0008 	str.w	r0, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c9da:	f8d9 000c 	ldr.w	r0, [r9, #12]
9000c9de:	3301      	adds	r3, #1
9000c9e0:	f3c0 000a 	ubfx	r0, r0, #0, #11
9000c9e4:	4403      	add	r3, r0
9000c9e6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c9ea:	6929      	ldr	r1, [r5, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
9000c9ec:	f8cc 3008 	str.w	r3, [ip, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
9000c9f0:	f8dc 3010 	ldr.w	r3, [ip, #16]
9000c9f4:	f023 0307 	bic.w	r3, r3, #7
9000c9f8:	f8cc 3010 	str.w	r3, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
9000c9fc:	f8cc 1010 	str.w	r1, [ip, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000ca00:	f8dc 3018 	ldr.w	r3, [ip, #24]
9000ca04:	2300      	movs	r3, #0
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
9000ca06:	f895 0032 	ldrb.w	r0, [r5, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
9000ca0a:	f895 4031 	ldrb.w	r4, [r5, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
9000ca0e:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
9000ca12:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
9000ca16:	ea43 630e 	orr.w	r3, r3, lr, lsl #24
9000ca1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
9000ca1e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
9000ca22:	f8cc 3018 	str.w	r3, [ip, #24]
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
9000ca26:	f8dc 3014 	ldr.w	r3, [ip, #20]
9000ca2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
9000ca2e:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
9000ca32:	696b      	ldr	r3, [r5, #20]
9000ca34:	f8cc 3014 	str.w	r3, [ip, #20]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000ca38:	f8dc 001c 	ldr.w	r0, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000ca3c:	69eb      	ldr	r3, [r5, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000ca3e:	ea00 0a0a 	and.w	sl, r0, sl
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000ca42:	6a28      	ldr	r0, [r5, #32]
9000ca44:	4303      	orrs	r3, r0
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
9000ca46:	f8cc a01c 	str.w	sl, [ip, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
9000ca4a:	f8cc 301c 	str.w	r3, [ip, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
9000ca4e:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
9000ca52:	2300      	movs	r3, #0
9000ca54:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
9000ca58:	6a6b      	ldr	r3, [r5, #36]	; 0x24
9000ca5a:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
9000ca5e:	bb59      	cbnz	r1, 9000cab8 <HAL_LTDC_ConfigLayer+0x180>
  {
    tmp = 4U;
9000ca60:	2304      	movs	r3, #4
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000ca62:	1abf      	subs	r7, r7, r2
9000ca64:	6aaa      	ldr	r2, [r5, #40]	; 0x28
9000ca66:	fb03 f707 	mul.w	r7, r3, r7
9000ca6a:	fb02 f303 	mul.w	r3, r2, r3
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000ca6e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000ca70:	3707      	adds	r7, #7
9000ca72:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
9000ca76:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
9000ca7a:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
9000ca7e:	f8cc 302c 	str.w	r3, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
9000ca82:	f8cc 702c 	str.w	r7, [ip, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
9000ca86:	4b14      	ldr	r3, [pc, #80]	; (9000cad8 <HAL_LTDC_ConfigLayer+0x1a0>)
9000ca88:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
9000ca8c:	400b      	ands	r3, r1
9000ca8e:	f8cc 3030 	str.w	r3, [ip, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
9000ca92:	f8cc 2030 	str.w	r2, [ip, #48]	; 0x30
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000ca96:	2201      	movs	r2, #1

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
9000ca98:	f859 3006 	ldr.w	r3, [r9, r6]
9000ca9c:	4313      	orrs	r3, r2
9000ca9e:	f849 3006 	str.w	r3, [r9, r6]
  __HAL_UNLOCK(hltdc);
9000caa2:	2300      	movs	r3, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
9000caa4:	f8c9 2024 	str.w	r2, [r9, #36]	; 0x24
  return HAL_OK;
9000caa8:	4618      	mov	r0, r3
  hltdc->State  = HAL_LTDC_STATE_READY;
9000caaa:	f888 20a1 	strb.w	r2, [r8, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
9000caae:	f888 30a0 	strb.w	r3, [r8, #160]	; 0xa0
}
9000cab2:	b003      	add	sp, #12
9000cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
9000cab8:	2901      	cmp	r1, #1
9000caba:	d00a      	beq.n	9000cad2 <HAL_LTDC_ConfigLayer+0x19a>
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
9000cabc:	1e8b      	subs	r3, r1, #2
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
9000cabe:	2b02      	cmp	r3, #2
9000cac0:	d903      	bls.n	9000caca <HAL_LTDC_ConfigLayer+0x192>
9000cac2:	2907      	cmp	r1, #7
9000cac4:	d001      	beq.n	9000caca <HAL_LTDC_ConfigLayer+0x192>
    tmp = 1U;
9000cac6:	2301      	movs	r3, #1
9000cac8:	e7cb      	b.n	9000ca62 <HAL_LTDC_ConfigLayer+0x12a>
    tmp = 2U;
9000caca:	2302      	movs	r3, #2
9000cacc:	e7c9      	b.n	9000ca62 <HAL_LTDC_ConfigLayer+0x12a>
  __HAL_LOCK(hltdc);
9000cace:	2002      	movs	r0, #2
}
9000cad0:	4770      	bx	lr
    tmp = 3U;
9000cad2:	2303      	movs	r3, #3
9000cad4:	e7c5      	b.n	9000ca62 <HAL_LTDC_ConfigLayer+0x12a>
9000cad6:	bf00      	nop
9000cad8:	fffff800 	.word	0xfffff800
9000cadc:	fffff8f8 	.word	0xfffff8f8

9000cae0 <HAL_LTDC_ProgramLineEvent>:
  __HAL_LOCK(hltdc);
9000cae0:	f890 20a0 	ldrb.w	r2, [r0, #160]	; 0xa0
9000cae4:	2a01      	cmp	r2, #1
9000cae6:	d019      	beq.n	9000cb1c <HAL_LTDC_ProgramLineEvent+0x3c>
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000cae8:	6802      	ldr	r2, [r0, #0]
9000caea:	4603      	mov	r3, r0
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000caec:	2002      	movs	r0, #2
  __HAL_UNLOCK(hltdc);
9000caee:	f04f 0c00 	mov.w	ip, #0
{
9000caf2:	b410      	push	{r4}
  hltdc->State = HAL_LTDC_STATE_BUSY;
9000caf4:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000caf8:	6b50      	ldr	r0, [r2, #52]	; 0x34
  LTDC->LIPCR = (uint32_t)Line;
9000cafa:	4c09      	ldr	r4, [pc, #36]	; (9000cb20 <HAL_LTDC_ProgramLineEvent+0x40>)
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
9000cafc:	f020 0001 	bic.w	r0, r0, #1
9000cb00:	6350      	str	r0, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000cb02:	2001      	movs	r0, #1
  LTDC->LIPCR = (uint32_t)Line;
9000cb04:	6421      	str	r1, [r4, #64]	; 0x40
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
9000cb06:	6b51      	ldr	r1, [r2, #52]	; 0x34
9000cb08:	4301      	orrs	r1, r0
9000cb0a:	6351      	str	r1, [r2, #52]	; 0x34
  hltdc->State = HAL_LTDC_STATE_READY;
9000cb0c:	f883 00a1 	strb.w	r0, [r3, #161]	; 0xa1
  return HAL_OK;
9000cb10:	4660      	mov	r0, ip
  __HAL_UNLOCK(hltdc);
9000cb12:	f883 c0a0 	strb.w	ip, [r3, #160]	; 0xa0
}
9000cb16:	f85d 4b04 	ldr.w	r4, [sp], #4
9000cb1a:	4770      	bx	lr
  __HAL_LOCK(hltdc);
9000cb1c:	2002      	movs	r0, #2
}
9000cb1e:	4770      	bx	lr
9000cb20:	50001000 	.word	0x50001000

9000cb24 <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
9000cb24:	b538      	push	{r3, r4, r5, lr}
9000cb26:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
9000cb28:	f7fc ff32 	bl	90009990 <HAL_GetTick>

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
9000cb2c:	2c00      	cmp	r4, #0
9000cb2e:	d05a      	beq.n	9000cbe6 <HAL_MDMA_Init+0xc2>

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
9000cb30:	6823      	ldr	r3, [r4, #0]
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000cb32:	2202      	movs	r2, #2
  __HAL_UNLOCK(hmdma);
9000cb34:	2100      	movs	r1, #0
9000cb36:	4605      	mov	r5, r0
  hmdma->State = HAL_MDMA_STATE_BUSY;
9000cb38:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UNLOCK(hmdma);
9000cb3c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
  __HAL_MDMA_DISABLE(hmdma);
9000cb40:	68da      	ldr	r2, [r3, #12]
9000cb42:	f022 0201 	bic.w	r2, r2, #1
9000cb46:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000cb48:	e005      	b.n	9000cb56 <HAL_MDMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
9000cb4a:	f7fc ff21 	bl	90009990 <HAL_GetTick>
9000cb4e:	1b43      	subs	r3, r0, r5
9000cb50:	2b05      	cmp	r3, #5
9000cb52:	d841      	bhi.n	9000cbd8 <HAL_MDMA_Init+0xb4>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000cb54:	6823      	ldr	r3, [r4, #0]
9000cb56:	68da      	ldr	r2, [r3, #12]
9000cb58:	07d2      	lsls	r2, r2, #31
9000cb5a:	d4f6      	bmi.n	9000cb4a <HAL_MDMA_Init+0x26>
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000cb5c:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
9000cb60:	69e0      	ldr	r0, [r4, #28]
9000cb62:	432a      	orrs	r2, r5
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000cb64:	68e1      	ldr	r1, [r4, #12]
9000cb66:	6925      	ldr	r5, [r4, #16]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000cb68:	4302      	orrs	r2, r0
9000cb6a:	6a20      	ldr	r0, [r4, #32]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000cb6c:	4329      	orrs	r1, r5
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
9000cb6e:	4302      	orrs	r2, r0
9000cb70:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000cb72:	4302      	orrs	r2, r0
9000cb74:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
9000cb76:	4302      	orrs	r2, r0
9000cb78:	6b20      	ldr	r0, [r4, #48]	; 0x30
9000cb7a:	4302      	orrs	r2, r0
9000cb7c:	68a0      	ldr	r0, [r4, #8]
9000cb7e:	4302      	orrs	r2, r0
9000cb80:	6aa0      	ldr	r0, [r4, #40]	; 0x28
9000cb82:	3801      	subs	r0, #1
9000cb84:	ea42 4280 	orr.w	r2, r2, r0, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cb88:	6860      	ldr	r0, [r4, #4]
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
9000cb8a:	60d9      	str	r1, [r3, #12]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cb8c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
9000cb90:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cb92:	d103      	bne.n	9000cb9c <HAL_MDMA_Init+0x78>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
9000cb94:	691a      	ldr	r2, [r3, #16]
9000cb96:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
9000cb9a:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
9000cb9c:	2100      	movs	r1, #0

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000cb9e:	6b62      	ldr	r2, [r4, #52]	; 0x34
9000cba0:	428a      	cmp	r2, r1
  hmdma->Instance->CBNDTR = 0;
9000cba2:	6159      	str	r1, [r3, #20]
  if(hmdma->Init.SourceBlockAddressOffset < 0)
9000cba4:	db30      	blt.n	9000cc08 <HAL_MDMA_Init+0xe4>
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
9000cba6:	b292      	uxth	r2, r2
9000cba8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
9000cbaa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9000cbac:	2a00      	cmp	r2, #0
9000cbae:	db1c      	blt.n	9000cbea <HAL_MDMA_Init+0xc6>
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000cbb0:	6a19      	ldr	r1, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000cbb2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000cbb6:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000cbba:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000cbbc:	d021      	beq.n	9000cc02 <HAL_MDMA_Init+0xde>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
9000cbbe:	b2c0      	uxtb	r0, r0
9000cbc0:	6298      	str	r0, [r3, #40]	; 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
9000cbc2:	2200      	movs	r2, #0
  hmdma->State = HAL_MDMA_STATE_READY;
9000cbc4:	2101      	movs	r1, #1
  hmdma->Instance->CLAR =  0;
9000cbc6:	625a      	str	r2, [r3, #36]	; 0x24
  return HAL_OK;
9000cbc8:	4610      	mov	r0, r2
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000cbca:	66a2      	str	r2, [r4, #104]	; 0x68
  hmdma->LinkedListNodeCounter  = 0;
9000cbcc:	6662      	str	r2, [r4, #100]	; 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
9000cbce:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
9000cbd2:	e9c4 2217 	strd	r2, r2, [r4, #92]	; 0x5c
}
9000cbd6:	bd38      	pop	{r3, r4, r5, pc}
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000cbd8:	2240      	movs	r2, #64	; 0x40
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000cbda:	2303      	movs	r3, #3
      return HAL_ERROR;
9000cbdc:	2001      	movs	r0, #1
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
9000cbde:	66a2      	str	r2, [r4, #104]	; 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000cbe0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000cbe4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
9000cbe6:	2001      	movs	r0, #1
}
9000cbe8:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000cbea:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
9000cbec:	4252      	negs	r2, r2
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000cbee:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
9000cbf2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
9000cbf6:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
9000cbf8:	6a19      	ldr	r1, [r3, #32]
9000cbfa:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
9000cbfe:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
9000cc00:	d1dd      	bne.n	9000cbbe <HAL_MDMA_Init+0x9a>
    hmdma->Instance->CTBR = 0;
9000cc02:	2200      	movs	r2, #0
9000cc04:	629a      	str	r2, [r3, #40]	; 0x28
9000cc06:	e7dc      	b.n	9000cbc2 <HAL_MDMA_Init+0x9e>
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000cc08:	6959      	ldr	r1, [r3, #20]
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
9000cc0a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000cc0c:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000cc10:	b292      	uxth	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
9000cc12:	6159      	str	r1, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
9000cc14:	621a      	str	r2, [r3, #32]
9000cc16:	e7c8      	b.n	9000cbaa <HAL_MDMA_Init+0x86>

9000cc18 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
9000cc18:	b1f8      	cbz	r0, 9000cc5a <HAL_MDMA_DeInit+0x42>
  __HAL_MDMA_DISABLE(hmdma);
9000cc1a:	6802      	ldr	r2, [r0, #0]
9000cc1c:	4601      	mov	r1, r0
  hmdma->Instance->CCR  = 0;
9000cc1e:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
9000cc20:	68d0      	ldr	r0, [r2, #12]
{
9000cc22:	b410      	push	{r4}
  __HAL_MDMA_DISABLE(hmdma);
9000cc24:	f020 0001 	bic.w	r0, r0, #1
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000cc28:	241f      	movs	r4, #31
  __HAL_MDMA_DISABLE(hmdma);
9000cc2a:	60d0      	str	r0, [r2, #12]
  return HAL_OK;
9000cc2c:	4618      	mov	r0, r3
  hmdma->Instance->CCR  = 0;
9000cc2e:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
9000cc30:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
9000cc32:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
9000cc34:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
9000cc36:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
9000cc38:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
9000cc3a:	6253      	str	r3, [r2, #36]	; 0x24
  hmdma->Instance->CTBR = 0;
9000cc3c:	6293      	str	r3, [r2, #40]	; 0x28
  hmdma->Instance->CMAR = 0;
9000cc3e:	6313      	str	r3, [r2, #48]	; 0x30
  hmdma->Instance->CMDR = 0;
9000cc40:	6353      	str	r3, [r2, #52]	; 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
9000cc42:	6054      	str	r4, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000cc44:	668b      	str	r3, [r1, #104]	; 0x68
  __HAL_UNLOCK(hmdma);
9000cc46:	f881 303c 	strb.w	r3, [r1, #60]	; 0x3c
  hmdma->State = HAL_MDMA_STATE_RESET;
9000cc4a:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
}
9000cc4e:	f85d 4b04 	ldr.w	r4, [sp], #4
  hmdma->LinkedListNodeCounter  = 0;
9000cc52:	664b      	str	r3, [r1, #100]	; 0x64
  hmdma->LastLinkedListNodeAddress   = 0;
9000cc54:	e9c1 3317 	strd	r3, r3, [r1, #92]	; 0x5c
}
9000cc58:	4770      	bx	lr
    return HAL_ERROR;
9000cc5a:	2001      	movs	r0, #1
}
9000cc5c:	4770      	bx	lr
9000cc5e:	bf00      	nop

9000cc60 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
9000cc60:	b310      	cbz	r0, 9000cca8 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
9000cc62:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
9000cc66:	2b01      	cmp	r3, #1
9000cc68:	d021      	beq.n	9000ccae <HAL_MDMA_ConfigPostRequestMask+0x4e>
{
9000cc6a:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hmdma);
9000cc6c:	f04f 0e01 	mov.w	lr, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000cc70:	f890 c03d 	ldrb.w	ip, [r0, #61]	; 0x3d
9000cc74:	45f4      	cmp	ip, lr
9000cc76:	fa5f f38c 	uxtb.w	r3, ip
  __HAL_LOCK(hmdma);
9000cc7a:	f880 e03c 	strb.w	lr, [r0, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000cc7e:	d005      	beq.n	9000cc8c <HAL_MDMA_ConfigPostRequestMask+0x2c>
    status =  HAL_ERROR;
9000cc80:	4673      	mov	r3, lr
  __HAL_UNLOCK(hmdma);
9000cc82:	2200      	movs	r2, #0
9000cc84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
9000cc88:	4618      	mov	r0, r3
9000cc8a:	bd30      	pop	{r4, r5, pc}
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
9000cc8c:	6805      	ldr	r5, [r0, #0]
9000cc8e:	692c      	ldr	r4, [r5, #16]
9000cc90:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
9000cc94:	d1f5      	bne.n	9000cc82 <HAL_MDMA_ConfigPostRequestMask+0x22>
      hmdma->Instance->CMAR = MaskAddress;
9000cc96:	6329      	str	r1, [r5, #48]	; 0x30
      hmdma->Instance->CMDR = MaskData;
9000cc98:	636a      	str	r2, [r5, #52]	; 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000cc9a:	692a      	ldr	r2, [r5, #16]
      if(MaskAddress == 0U)
9000cc9c:	b951      	cbnz	r1, 9000ccb4 <HAL_MDMA_ConfigPostRequestMask+0x54>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000cc9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000cca2:	460b      	mov	r3, r1
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
9000cca4:	612a      	str	r2, [r5, #16]
9000cca6:	e7ec      	b.n	9000cc82 <HAL_MDMA_ConfigPostRequestMask+0x22>
    return HAL_ERROR;
9000cca8:	2301      	movs	r3, #1
}
9000ccaa:	4618      	mov	r0, r3
9000ccac:	4770      	bx	lr
  __HAL_LOCK(hmdma);
9000ccae:	2302      	movs	r3, #2
}
9000ccb0:	4618      	mov	r0, r3
9000ccb2:	4770      	bx	lr
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000ccb4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
9000ccb8:	4623      	mov	r3, r4
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
9000ccba:	612a      	str	r2, [r5, #16]
9000ccbc:	e7e1      	b.n	9000cc82 <HAL_MDMA_ConfigPostRequestMask+0x22>
9000ccbe:	bf00      	nop

9000ccc0 <HAL_MDMA_Start_IT>:
  if(hmdma == NULL)
9000ccc0:	2800      	cmp	r0, #0
9000ccc2:	d06e      	beq.n	9000cda2 <HAL_MDMA_Start_IT+0xe2>
9000ccc4:	4684      	mov	ip, r0
  __HAL_LOCK(hmdma);
9000ccc6:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
9000ccca:	2801      	cmp	r0, #1
9000cccc:	d071      	beq.n	9000cdb2 <HAL_MDMA_Start_IT+0xf2>
9000ccce:	2001      	movs	r0, #1
9000ccd0:	f88c 003c 	strb.w	r0, [ip, #60]	; 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
9000ccd4:	f89c 003d 	ldrb.w	r0, [ip, #61]	; 0x3d
9000ccd8:	2801      	cmp	r0, #1
9000ccda:	d004      	beq.n	9000cce6 <HAL_MDMA_Start_IT+0x26>
    __HAL_UNLOCK(hmdma);
9000ccdc:	2300      	movs	r3, #0
    return HAL_BUSY;
9000ccde:	2002      	movs	r0, #2
    __HAL_UNLOCK(hmdma);
9000cce0:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
    return HAL_BUSY;
9000cce4:	4770      	bx	lr
{
9000cce6:	b530      	push	{r4, r5, lr}
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000cce8:	f3c3 0010 	ubfx	r0, r3, #0, #17
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000ccec:	2402      	movs	r4, #2
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000ccee:	2300      	movs	r3, #0
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000ccf0:	9d03      	ldr	r5, [sp, #12]
    hmdma->State = HAL_MDMA_STATE_BUSY;
9000ccf2:	f88c 403d 	strb.w	r4, [ip, #61]	; 0x3d
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000ccf6:	f1a4 1402 	sub.w	r4, r4, #131074	; 0x20002
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
9000ccfa:	f8cc 3068 	str.w	r3, [ip, #104]	; 0x68
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000ccfe:	f105 3eff 	add.w	lr, r5, #4294967295
    __HAL_MDMA_DISABLE(hmdma);
9000cd02:	f8dc 3000 	ldr.w	r3, [ip]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000cd06:	f011 4f5f 	tst.w	r1, #3741319168	; 0xdf000000
    __HAL_MDMA_DISABLE(hmdma);
9000cd0a:	68dd      	ldr	r5, [r3, #12]
9000cd0c:	f025 0501 	bic.w	r5, r5, #1
9000cd10:	60dd      	str	r5, [r3, #12]
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
9000cd12:	695d      	ldr	r5, [r3, #20]
9000cd14:	ea04 0405 	and.w	r4, r4, r5
9000cd18:	ea44 0400 	orr.w	r4, r4, r0
9000cd1c:	615c      	str	r4, [r3, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
9000cd1e:	6958      	ldr	r0, [r3, #20]
9000cd20:	f3c0 0013 	ubfx	r0, r0, #0, #20
9000cd24:	ea40 500e 	orr.w	r0, r0, lr, lsl #20
9000cd28:	6158      	str	r0, [r3, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
9000cd2a:	f04f 001f 	mov.w	r0, #31
9000cd2e:	6058      	str	r0, [r3, #4]
  hmdma->Instance->CDAR = DstAddress;
9000cd30:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CSAR = SrcAddress;
9000cd32:	6199      	str	r1, [r3, #24]
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
9000cd34:	6a99      	ldr	r1, [r3, #40]	; 0x28
9000cd36:	bf0c      	ite	eq
9000cd38:	f441 3180 	orreq.w	r1, r1, #65536	; 0x10000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000cd3c:	f421 3180 	bicne.w	r1, r1, #65536	; 0x10000
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
9000cd40:	f012 4f5f 	tst.w	r2, #3741319168	; 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
9000cd44:	6299      	str	r1, [r3, #40]	; 0x28
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000cd46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    if(hmdma->XferBlockCpltCallback != NULL)
9000cd48:	f8dc 104c 	ldr.w	r1, [ip, #76]	; 0x4c
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
9000cd4c:	bf0c      	ite	eq
9000cd4e:	f442 3200 	orreq.w	r2, r2, #131072	; 0x20000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
9000cd52:	f422 3200 	bicne.w	r2, r2, #131072	; 0x20000
9000cd56:	629a      	str	r2, [r3, #40]	; 0x28
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
9000cd58:	f8dc 205c 	ldr.w	r2, [ip, #92]	; 0x5c
9000cd5c:	625a      	str	r2, [r3, #36]	; 0x24
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
9000cd5e:	68da      	ldr	r2, [r3, #12]
9000cd60:	f042 0206 	orr.w	r2, r2, #6
9000cd64:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
9000cd66:	b119      	cbz	r1, 9000cd70 <HAL_MDMA_Start_IT+0xb0>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
9000cd68:	68da      	ldr	r2, [r3, #12]
9000cd6a:	f042 0210 	orr.w	r2, r2, #16
9000cd6e:	60da      	str	r2, [r3, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000cd70:	f8dc 2050 	ldr.w	r2, [ip, #80]	; 0x50
9000cd74:	b11a      	cbz	r2, 9000cd7e <HAL_MDMA_Start_IT+0xbe>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
9000cd76:	68da      	ldr	r2, [r3, #12]
9000cd78:	f042 0208 	orr.w	r2, r2, #8
9000cd7c:	60da      	str	r2, [r3, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
9000cd7e:	f8dc 2048 	ldr.w	r2, [ip, #72]	; 0x48
9000cd82:	b11a      	cbz	r2, 9000cd8c <HAL_MDMA_Start_IT+0xcc>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
9000cd84:	68da      	ldr	r2, [r3, #12]
9000cd86:	f042 0220 	orr.w	r2, r2, #32
9000cd8a:	60da      	str	r2, [r3, #12]
    __HAL_MDMA_ENABLE(hmdma);
9000cd8c:	68da      	ldr	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cd8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
    __HAL_MDMA_ENABLE(hmdma);
9000cd92:	f042 0201 	orr.w	r2, r2, #1
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cd96:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
    __HAL_MDMA_ENABLE(hmdma);
9000cd9a:	60da      	str	r2, [r3, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
9000cd9c:	d003      	beq.n	9000cda6 <HAL_MDMA_Start_IT+0xe6>
  return HAL_OK;
9000cd9e:	2000      	movs	r0, #0
}
9000cda0:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
9000cda2:	2001      	movs	r0, #1
9000cda4:	4770      	bx	lr
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000cda6:	68da      	ldr	r2, [r3, #12]
  return HAL_OK;
9000cda8:	2000      	movs	r0, #0
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
9000cdaa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000cdae:	60da      	str	r2, [r3, #12]
}
9000cdb0:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hmdma);
9000cdb2:	2002      	movs	r0, #2
}
9000cdb4:	4770      	bx	lr
9000cdb6:	bf00      	nop

9000cdb8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
9000cdb8:	4603      	mov	r3, r0
9000cdba:	b188      	cbz	r0, 9000cde0 <HAL_MDMA_Abort_IT+0x28>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
9000cdbc:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
9000cdc0:	2a02      	cmp	r2, #2
9000cdc2:	d003      	beq.n	9000cdcc <HAL_MDMA_Abort_IT+0x14>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000cdc4:	2280      	movs	r2, #128	; 0x80
    return HAL_ERROR;
9000cdc6:	2001      	movs	r0, #1
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
9000cdc8:	669a      	str	r2, [r3, #104]	; 0x68
    return HAL_ERROR;
9000cdca:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
9000cdcc:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000cdce:	2104      	movs	r1, #4
  return HAL_OK;
9000cdd0:	2000      	movs	r0, #0
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000cdd2:	f883 103d 	strb.w	r1, [r3, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000cdd6:	68d3      	ldr	r3, [r2, #12]
9000cdd8:	f023 0301 	bic.w	r3, r3, #1
9000cddc:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
9000cdde:	4770      	bx	lr
    return HAL_ERROR;
9000cde0:	2001      	movs	r0, #1
}
9000cde2:	4770      	bx	lr

9000cde4 <HAL_MDMA_IRQHandler>:
{
9000cde4:	b530      	push	{r4, r5, lr}
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000cde6:	f04f 43a4 	mov.w	r3, #1375731712	; 0x52000000
{
9000cdea:	4604      	mov	r4, r0
9000cdec:	b083      	sub	sp, #12
  __IO uint32_t count = 0;
9000cdee:	2500      	movs	r5, #0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000cdf0:	4a58      	ldr	r2, [pc, #352]	; (9000cf54 <HAL_MDMA_IRQHandler+0x170>)
9000cdf2:	2101      	movs	r1, #1
  __IO uint32_t count = 0;
9000cdf4:	9501      	str	r5, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000cdf6:	6818      	ldr	r0, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
9000cdf8:	6823      	ldr	r3, [r4, #0]
9000cdfa:	441a      	add	r2, r3
9000cdfc:	f3c2 1284 	ubfx	r2, r2, #6, #5
9000ce00:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
9000ce04:	4202      	tst	r2, r0
9000ce06:	f000 80a2 	beq.w	9000cf4e <HAL_MDMA_IRQHandler+0x16a>
  uint32_t timeout = SystemCoreClock / 9600U;
9000ce0a:	4953      	ldr	r1, [pc, #332]	; (9000cf58 <HAL_MDMA_IRQHandler+0x174>)
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000ce0c:	681a      	ldr	r2, [r3, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
9000ce0e:	680d      	ldr	r5, [r1, #0]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
9000ce10:	07d1      	lsls	r1, r2, #31
9000ce12:	d529      	bpl.n	9000ce68 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
9000ce14:	68da      	ldr	r2, [r3, #12]
9000ce16:	0792      	lsls	r2, r2, #30
9000ce18:	d526      	bpl.n	9000ce68 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
9000ce1a:	68da      	ldr	r2, [r3, #12]
9000ce1c:	f022 0202 	bic.w	r2, r2, #2
9000ce20:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
9000ce22:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000ce24:	6ea1      	ldr	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
9000ce26:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
9000ce28:	bf54      	ite	pl
9000ce2a:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
9000ce2e:	f041 0102 	orrmi.w	r1, r1, #2
9000ce32:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
9000ce34:	0591      	lsls	r1, r2, #22
9000ce36:	d503      	bpl.n	9000ce40 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
9000ce38:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000ce3a:	f041 0104 	orr.w	r1, r1, #4
9000ce3e:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
9000ce40:	05d0      	lsls	r0, r2, #23
9000ce42:	d503      	bpl.n	9000ce4c <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
9000ce44:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000ce46:	f041 0108 	orr.w	r1, r1, #8
9000ce4a:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
9000ce4c:	0551      	lsls	r1, r2, #21
9000ce4e:	d503      	bpl.n	9000ce58 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
9000ce50:	6ea1      	ldr	r1, [r4, #104]	; 0x68
9000ce52:	f041 0110 	orr.w	r1, r1, #16
9000ce56:	66a1      	str	r1, [r4, #104]	; 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
9000ce58:	0510      	lsls	r0, r2, #20
9000ce5a:	d503      	bpl.n	9000ce64 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
9000ce5c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
9000ce5e:	f042 0220 	orr.w	r2, r2, #32
9000ce62:	66a2      	str	r2, [r4, #104]	; 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
9000ce64:	2201      	movs	r2, #1
9000ce66:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
9000ce68:	681a      	ldr	r2, [r3, #0]
9000ce6a:	06d1      	lsls	r1, r2, #27
9000ce6c:	d509      	bpl.n	9000ce82 <HAL_MDMA_IRQHandler+0x9e>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
9000ce6e:	68da      	ldr	r2, [r3, #12]
9000ce70:	0692      	lsls	r2, r2, #26
9000ce72:	d506      	bpl.n	9000ce82 <HAL_MDMA_IRQHandler+0x9e>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000ce74:	2110      	movs	r1, #16
      if(hmdma->XferBufferCpltCallback != NULL)
9000ce76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
9000ce78:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
9000ce7a:	b112      	cbz	r2, 9000ce82 <HAL_MDMA_IRQHandler+0x9e>
        hmdma->XferBufferCpltCallback(hmdma);
9000ce7c:	4620      	mov	r0, r4
9000ce7e:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
9000ce80:	6823      	ldr	r3, [r4, #0]
9000ce82:	681a      	ldr	r2, [r3, #0]
9000ce84:	0710      	lsls	r0, r2, #28
9000ce86:	d509      	bpl.n	9000ce9c <HAL_MDMA_IRQHandler+0xb8>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
9000ce88:	68da      	ldr	r2, [r3, #12]
9000ce8a:	06d1      	lsls	r1, r2, #27
9000ce8c:	d506      	bpl.n	9000ce9c <HAL_MDMA_IRQHandler+0xb8>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ce8e:	2108      	movs	r1, #8
      if(hmdma->XferBlockCpltCallback != NULL)
9000ce90:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
9000ce92:	6059      	str	r1, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
9000ce94:	b112      	cbz	r2, 9000ce9c <HAL_MDMA_IRQHandler+0xb8>
        hmdma->XferBlockCpltCallback(hmdma);
9000ce96:	4620      	mov	r0, r4
9000ce98:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
9000ce9a:	6823      	ldr	r3, [r4, #0]
9000ce9c:	681a      	ldr	r2, [r3, #0]
9000ce9e:	0752      	lsls	r2, r2, #29
9000cea0:	d509      	bpl.n	9000ceb6 <HAL_MDMA_IRQHandler+0xd2>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
9000cea2:	68da      	ldr	r2, [r3, #12]
9000cea4:	0710      	lsls	r0, r2, #28
9000cea6:	d506      	bpl.n	9000ceb6 <HAL_MDMA_IRQHandler+0xd2>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000cea8:	2104      	movs	r1, #4
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ceaa:	6d22      	ldr	r2, [r4, #80]	; 0x50
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
9000ceac:	6059      	str	r1, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
9000ceae:	b112      	cbz	r2, 9000ceb6 <HAL_MDMA_IRQHandler+0xd2>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
9000ceb0:	4620      	mov	r0, r4
9000ceb2:	4790      	blx	r2
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
9000ceb4:	6823      	ldr	r3, [r4, #0]
9000ceb6:	681a      	ldr	r2, [r3, #0]
9000ceb8:	0791      	lsls	r1, r2, #30
9000ceba:	d516      	bpl.n	9000ceea <HAL_MDMA_IRQHandler+0x106>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
9000cebc:	68da      	ldr	r2, [r3, #12]
9000cebe:	0752      	lsls	r2, r2, #29
9000cec0:	d513      	bpl.n	9000ceea <HAL_MDMA_IRQHandler+0x106>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
9000cec2:	68da      	ldr	r2, [r3, #12]
9000cec4:	f022 023e 	bic.w	r2, r2, #62	; 0x3e
9000cec8:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
9000ceca:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
9000cece:	2a04      	cmp	r2, #4
9000ced0:	d034      	beq.n	9000cf3c <HAL_MDMA_IRQHandler+0x158>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ced2:	2202      	movs	r2, #2
      __HAL_UNLOCK(hmdma);
9000ced4:	2100      	movs	r1, #0
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
9000ced6:	605a      	str	r2, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
9000ced8:	2201      	movs	r2, #1
      if(hmdma->XferCpltCallback != NULL)
9000ceda:	6c63      	ldr	r3, [r4, #68]	; 0x44
      __HAL_UNLOCK(hmdma);
9000cedc:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
9000cee0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if(hmdma->XferCpltCallback != NULL)
9000cee4:	b10b      	cbz	r3, 9000ceea <HAL_MDMA_IRQHandler+0x106>
        hmdma->XferCpltCallback(hmdma);
9000cee6:	4620      	mov	r0, r4
9000cee8:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
9000ceea:	6ea3      	ldr	r3, [r4, #104]	; 0x68
9000ceec:	2b00      	cmp	r3, #0
9000ceee:	d02e      	beq.n	9000cf4e <HAL_MDMA_IRQHandler+0x16a>
    __HAL_MDMA_DISABLE(hmdma);
9000cef0:	6821      	ldr	r1, [r4, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000cef2:	2304      	movs	r3, #4
  uint32_t timeout = SystemCoreClock / 9600U;
9000cef4:	4a19      	ldr	r2, [pc, #100]	; (9000cf5c <HAL_MDMA_IRQHandler+0x178>)
    hmdma->State = HAL_MDMA_STATE_ABORT;
9000cef6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_MDMA_DISABLE(hmdma);
9000cefa:	68cb      	ldr	r3, [r1, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
9000cefc:	fba2 0205 	umull	r0, r2, r2, r5
    __HAL_MDMA_DISABLE(hmdma);
9000cf00:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
9000cf04:	0a92      	lsrs	r2, r2, #10
    __HAL_MDMA_DISABLE(hmdma);
9000cf06:	60cb      	str	r3, [r1, #12]
9000cf08:	e002      	b.n	9000cf10 <HAL_MDMA_IRQHandler+0x12c>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
9000cf0a:	68cb      	ldr	r3, [r1, #12]
9000cf0c:	07d8      	lsls	r0, r3, #31
9000cf0e:	d504      	bpl.n	9000cf1a <HAL_MDMA_IRQHandler+0x136>
      if (++count > timeout)
9000cf10:	9b01      	ldr	r3, [sp, #4]
9000cf12:	3301      	adds	r3, #1
9000cf14:	4293      	cmp	r3, r2
9000cf16:	9301      	str	r3, [sp, #4]
9000cf18:	d9f7      	bls.n	9000cf0a <HAL_MDMA_IRQHandler+0x126>
    __HAL_UNLOCK(hmdma);
9000cf1a:	2300      	movs	r3, #0
9000cf1c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
9000cf20:	68cb      	ldr	r3, [r1, #12]
9000cf22:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
9000cf24:	bf4c      	ite	mi
9000cf26:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
9000cf28:	2301      	movpl	r3, #1
9000cf2a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    if (hmdma->XferErrorCallback != NULL)
9000cf2e:	6d63      	ldr	r3, [r4, #84]	; 0x54
9000cf30:	b16b      	cbz	r3, 9000cf4e <HAL_MDMA_IRQHandler+0x16a>
      hmdma->XferErrorCallback(hmdma);
9000cf32:	4620      	mov	r0, r4
}
9000cf34:	b003      	add	sp, #12
9000cf36:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
9000cf3a:	4718      	bx	r3
        __HAL_UNLOCK(hmdma);
9000cf3c:	2100      	movs	r1, #0
        hmdma->State = HAL_MDMA_STATE_READY;
9000cf3e:	2201      	movs	r2, #1
        if(hmdma->XferAbortCallback != NULL)
9000cf40:	6da3      	ldr	r3, [r4, #88]	; 0x58
        __HAL_UNLOCK(hmdma);
9000cf42:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
9000cf46:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        if(hmdma->XferAbortCallback != NULL)
9000cf4a:	2b00      	cmp	r3, #0
9000cf4c:	d1f1      	bne.n	9000cf32 <HAL_MDMA_IRQHandler+0x14e>
}
9000cf4e:	b003      	add	sp, #12
9000cf50:	bd30      	pop	{r4, r5, pc}
9000cf52:	bf00      	nop
9000cf54:	adffffc0 	.word	0xadffffc0
9000cf58:	24000054 	.word	0x24000054
9000cf5c:	1b4e81b5 	.word	0x1b4e81b5

9000cf60 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
9000cf60:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000cf62:	4c10      	ldr	r4, [pc, #64]	; (9000cfa4 <HAL_PWREx_ConfigSupply+0x44>)
9000cf64:	68e3      	ldr	r3, [r4, #12]
9000cf66:	f013 0f04 	tst.w	r3, #4
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000cf6a:	68e3      	ldr	r3, [r4, #12]
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
9000cf6c:	d105      	bne.n	9000cf7a <HAL_PWREx_ConfigSupply+0x1a>
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
9000cf6e:	f003 0307 	and.w	r3, r3, #7
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
9000cf72:	1a18      	subs	r0, r3, r0
9000cf74:	bf18      	it	ne
9000cf76:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
9000cf78:	bd38      	pop	{r3, r4, r5, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
9000cf7a:	f023 0307 	bic.w	r3, r3, #7
9000cf7e:	4318      	orrs	r0, r3
9000cf80:	60e0      	str	r0, [r4, #12]
  tickstart = HAL_GetTick ();
9000cf82:	f7fc fd05 	bl	90009990 <HAL_GetTick>
9000cf86:	4605      	mov	r5, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000cf88:	e005      	b.n	9000cf96 <HAL_PWREx_ConfigSupply+0x36>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
9000cf8a:	f7fc fd01 	bl	90009990 <HAL_GetTick>
9000cf8e:	1b40      	subs	r0, r0, r5
9000cf90:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
9000cf94:	d804      	bhi.n	9000cfa0 <HAL_PWREx_ConfigSupply+0x40>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
9000cf96:	6863      	ldr	r3, [r4, #4]
9000cf98:	049b      	lsls	r3, r3, #18
9000cf9a:	d5f6      	bpl.n	9000cf8a <HAL_PWREx_ConfigSupply+0x2a>
  return HAL_OK;
9000cf9c:	2000      	movs	r0, #0
}
9000cf9e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
9000cfa0:	2001      	movs	r0, #1
}
9000cfa2:	bd38      	pop	{r3, r4, r5, pc}
9000cfa4:	58024800 	.word	0x58024800

9000cfa8 <HAL_RCC_GetSysClockFreq.part.0>:
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cfa8:	4b45      	ldr	r3, [pc, #276]	; (9000d0c0 <HAL_RCC_GetSysClockFreq.part.0+0x118>)
uint32_t HAL_RCC_GetSysClockFreq(void)
9000cfaa:	b430      	push	{r4, r5}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cfac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cfae:	6a9c      	ldr	r4, [r3, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cfb0:	6add      	ldr	r5, [r3, #44]	; 0x2c
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));

      if (pllm != 0U)
9000cfb2:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cfb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000cfb8:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000cfbc:	d038      	beq.n	9000d030 <HAL_RCC_GetSysClockFreq.part.0+0x88>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cfbe:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000cfc2:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000cfc6:	f002 0203 	and.w	r2, r2, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000cfca:	fb05 f101 	mul.w	r1, r5, r1
9000cfce:	2a01      	cmp	r2, #1
9000cfd0:	ee07 1a90 	vmov	s15, r1
9000cfd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
      {
        switch (pllsource)
9000cfd8:	d002      	beq.n	9000cfe0 <HAL_RCC_GetSysClockFreq.part.0+0x38>
9000cfda:	2a02      	cmp	r2, #2
9000cfdc:	d04e      	beq.n	9000d07c <HAL_RCC_GetSysClockFreq.part.0+0xd4>
9000cfde:	b34a      	cbz	r2, 9000d034 <HAL_RCC_GetSysClockFreq.part.0+0x8c>
          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            break;

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000cfe0:	ee07 0a90 	vmov	s15, r0
9000cfe4:	eddf 6a37 	vldr	s13, [pc, #220]	; 9000d0c4 <HAL_RCC_GetSysClockFreq.part.0+0x11c>
9000cfe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000cfec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000cfee:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000cff2:	ed9f 5a35 	vldr	s10, [pc, #212]	; 9000d0c8 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000cff6:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000cffa:	ee06 3a90 	vmov	s13, r3
9000cffe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000d002:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000d006:	eee7 6a05 	vfma.f32	s13, s14, s10
9000d00a:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000d00e:	ee66 6a26 	vmul.f32	s13, s12, s13
            break;
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000d012:	4b2b      	ldr	r3, [pc, #172]	; (9000d0c0 <HAL_RCC_GetSysClockFreq.part.0+0x118>)
9000d014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d016:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000d01a:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000d01c:	ee07 3a90 	vmov	s15, r3
9000d020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000d024:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000d028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000d02c:	ee17 0a90 	vmov	r0, s15
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
9000d030:	bc30      	pop	{r4, r5}
9000d032:	4770      	bx	lr
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d034:	681a      	ldr	r2, [r3, #0]
9000d036:	0692      	lsls	r2, r2, #26
9000d038:	d527      	bpl.n	9000d08a <HAL_RCC_GetSysClockFreq.part.0+0xe2>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d03a:	6819      	ldr	r1, [r3, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d03c:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d040:	4a22      	ldr	r2, [pc, #136]	; (9000d0cc <HAL_RCC_GetSysClockFreq.part.0+0x124>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d042:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000d046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d048:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d04c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d050:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000d0c8 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000d054:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d058:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d05a:	ee06 3a90 	vmov	s13, r3
9000d05e:	ee06 2a10 	vmov	s12, r2
9000d062:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000d066:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000d06a:	eee7 6a05 	vfma.f32	s13, s14, s10
9000d06e:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000d072:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000d076:	ee66 6a87 	vmul.f32	s13, s13, s14
9000d07a:	e7ca      	b.n	9000d012 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d07c:	ee07 0a90 	vmov	s15, r0
9000d080:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000d0d0 <HAL_RCC_GetSysClockFreq.part.0+0x128>
9000d084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d088:	e7b0      	b.n	9000cfec <HAL_RCC_GetSysClockFreq.part.0+0x44>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d08a:	ee07 0a90 	vmov	s15, r0
9000d08e:	ed9f 5a11 	vldr	s10, [pc, #68]	; 9000d0d4 <HAL_RCC_GetSysClockFreq.part.0+0x12c>
9000d092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d094:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000d098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d09c:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000d0c8 <HAL_RCC_GetSysClockFreq.part.0+0x120>
9000d0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000d0a4:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000d0a8:	ee07 3a90 	vmov	s15, r3
9000d0ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d0b0:	eee7 7a25 	vfma.f32	s15, s14, s11
9000d0b4:	ee77 7a86 	vadd.f32	s15, s15, s12
9000d0b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000d0bc:	e7a9      	b.n	9000d012 <HAL_RCC_GetSysClockFreq.part.0+0x6a>
9000d0be:	bf00      	nop
9000d0c0:	58024400 	.word	0x58024400
9000d0c4:	4a742400 	.word	0x4a742400
9000d0c8:	39000000 	.word	0x39000000
9000d0cc:	03d09000 	.word	0x03d09000
9000d0d0:	4bbebc20 	.word	0x4bbebc20
9000d0d4:	4c742400 	.word	0x4c742400

9000d0d8 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
9000d0d8:	2800      	cmp	r0, #0
9000d0da:	f000 81e8 	beq.w	9000d4ae <HAL_RCC_OscConfig+0x3d6>
{
9000d0de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
9000d0e0:	6803      	ldr	r3, [r0, #0]
9000d0e2:	4604      	mov	r4, r0
9000d0e4:	07d9      	lsls	r1, r3, #31
9000d0e6:	d52e      	bpl.n	9000d146 <HAL_RCC_OscConfig+0x6e>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000d0e8:	49a4      	ldr	r1, [pc, #656]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d0ea:	690a      	ldr	r2, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000d0ec:	6a89      	ldr	r1, [r1, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000d0ee:	f002 0238 	and.w	r2, r2, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000d0f2:	2a10      	cmp	r2, #16
9000d0f4:	f000 8107 	beq.w	9000d306 <HAL_RCC_OscConfig+0x22e>
9000d0f8:	2a18      	cmp	r2, #24
9000d0fa:	f000 80ff 	beq.w	9000d2fc <HAL_RCC_OscConfig+0x224>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d0fe:	6863      	ldr	r3, [r4, #4]
9000d100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000d104:	f000 812a 	beq.w	9000d35c <HAL_RCC_OscConfig+0x284>
9000d108:	2b00      	cmp	r3, #0
9000d10a:	f000 8168 	beq.w	9000d3de <HAL_RCC_OscConfig+0x306>
9000d10e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
9000d112:	4b9a      	ldr	r3, [pc, #616]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d114:	681a      	ldr	r2, [r3, #0]
9000d116:	f000 8289 	beq.w	9000d62c <HAL_RCC_OscConfig+0x554>
9000d11a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
9000d11e:	601a      	str	r2, [r3, #0]
9000d120:	681a      	ldr	r2, [r3, #0]
9000d122:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
9000d126:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
9000d128:	f7fc fc32 	bl	90009990 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d12c:	4e93      	ldr	r6, [pc, #588]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
        tickstart = HAL_GetTick();
9000d12e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d130:	e005      	b.n	9000d13e <HAL_RCC_OscConfig+0x66>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000d132:	f7fc fc2d 	bl	90009990 <HAL_GetTick>
9000d136:	1b40      	subs	r0, r0, r5
9000d138:	2864      	cmp	r0, #100	; 0x64
9000d13a:	f200 814e 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d13e:	6833      	ldr	r3, [r6, #0]
9000d140:	039b      	lsls	r3, r3, #14
9000d142:	d5f6      	bpl.n	9000d132 <HAL_RCC_OscConfig+0x5a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
9000d144:	6823      	ldr	r3, [r4, #0]
9000d146:	079d      	lsls	r5, r3, #30
9000d148:	f100 808a 	bmi.w	9000d260 <HAL_RCC_OscConfig+0x188>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d14c:	06d9      	lsls	r1, r3, #27
9000d14e:	d533      	bpl.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000d150:	4a8a      	ldr	r2, [pc, #552]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d152:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000d154:	6a92      	ldr	r2, [r2, #40]	; 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000d156:	f003 0338 	and.w	r3, r3, #56	; 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000d15a:	2b08      	cmp	r3, #8
9000d15c:	f000 80e3 	beq.w	9000d326 <HAL_RCC_OscConfig+0x24e>
9000d160:	2b18      	cmp	r3, #24
9000d162:	f000 80db 	beq.w	9000d31c <HAL_RCC_OscConfig+0x244>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000d166:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_CSI_ENABLE();
9000d168:	4d84      	ldr	r5, [pc, #528]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
9000d16a:	2b00      	cmp	r3, #0
9000d16c:	f000 816f 	beq.w	9000d44e <HAL_RCC_OscConfig+0x376>
        __HAL_RCC_CSI_ENABLE();
9000d170:	682b      	ldr	r3, [r5, #0]
9000d172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9000d176:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d178:	f7fc fc0a 	bl	90009990 <HAL_GetTick>
9000d17c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000d17e:	e005      	b.n	9000d18c <HAL_RCC_OscConfig+0xb4>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000d180:	f7fc fc06 	bl	90009990 <HAL_GetTick>
9000d184:	1b80      	subs	r0, r0, r6
9000d186:	2802      	cmp	r0, #2
9000d188:	f200 8127 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000d18c:	682b      	ldr	r3, [r5, #0]
9000d18e:	05db      	lsls	r3, r3, #23
9000d190:	d5f6      	bpl.n	9000d180 <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d192:	f7fc fc03 	bl	9000999c <HAL_GetREVID>
9000d196:	f241 0303 	movw	r3, #4099	; 0x1003
9000d19a:	4298      	cmp	r0, r3
9000d19c:	f200 826d 	bhi.w	9000d67a <HAL_RCC_OscConfig+0x5a2>
9000d1a0:	6a22      	ldr	r2, [r4, #32]
9000d1a2:	686b      	ldr	r3, [r5, #4]
9000d1a4:	2a20      	cmp	r2, #32
9000d1a6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000d1aa:	bf0c      	ite	eq
9000d1ac:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
9000d1b0:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
9000d1b4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d1b6:	6823      	ldr	r3, [r4, #0]
9000d1b8:	071d      	lsls	r5, r3, #28
9000d1ba:	d516      	bpl.n	9000d1ea <HAL_RCC_OscConfig+0x112>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000d1bc:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
9000d1be:	4d6f      	ldr	r5, [pc, #444]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
9000d1c0:	2b00      	cmp	r3, #0
9000d1c2:	f000 8122 	beq.w	9000d40a <HAL_RCC_OscConfig+0x332>
      __HAL_RCC_LSI_ENABLE();
9000d1c6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000d1c8:	f043 0301 	orr.w	r3, r3, #1
9000d1cc:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000d1ce:	f7fc fbdf 	bl	90009990 <HAL_GetTick>
9000d1d2:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000d1d4:	e005      	b.n	9000d1e2 <HAL_RCC_OscConfig+0x10a>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000d1d6:	f7fc fbdb 	bl	90009990 <HAL_GetTick>
9000d1da:	1b80      	subs	r0, r0, r6
9000d1dc:	2802      	cmp	r0, #2
9000d1de:	f200 80fc 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
9000d1e2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000d1e4:	0798      	lsls	r0, r3, #30
9000d1e6:	d5f6      	bpl.n	9000d1d6 <HAL_RCC_OscConfig+0xfe>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
9000d1e8:	6823      	ldr	r3, [r4, #0]
9000d1ea:	069a      	lsls	r2, r3, #26
9000d1ec:	d516      	bpl.n	9000d21c <HAL_RCC_OscConfig+0x144>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000d1ee:	69a3      	ldr	r3, [r4, #24]
      __HAL_RCC_HSI48_ENABLE();
9000d1f0:	4d62      	ldr	r5, [pc, #392]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
9000d1f2:	2b00      	cmp	r3, #0
9000d1f4:	f000 811a 	beq.w	9000d42c <HAL_RCC_OscConfig+0x354>
      __HAL_RCC_HSI48_ENABLE();
9000d1f8:	682b      	ldr	r3, [r5, #0]
9000d1fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
9000d1fe:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000d200:	f7fc fbc6 	bl	90009990 <HAL_GetTick>
9000d204:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000d206:	e005      	b.n	9000d214 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000d208:	f7fc fbc2 	bl	90009990 <HAL_GetTick>
9000d20c:	1b80      	subs	r0, r0, r6
9000d20e:	2802      	cmp	r0, #2
9000d210:	f200 80e3 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
9000d214:	682b      	ldr	r3, [r5, #0]
9000d216:	049f      	lsls	r7, r3, #18
9000d218:	d5f6      	bpl.n	9000d208 <HAL_RCC_OscConfig+0x130>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
9000d21a:	6823      	ldr	r3, [r4, #0]
9000d21c:	0759      	lsls	r1, r3, #29
9000d21e:	f100 80a3 	bmi.w	9000d368 <HAL_RCC_OscConfig+0x290>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
9000d222:	6a60      	ldr	r0, [r4, #36]	; 0x24
9000d224:	b1d0      	cbz	r0, 9000d25c <HAL_RCC_OscConfig+0x184>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
9000d226:	4d55      	ldr	r5, [pc, #340]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d228:	692b      	ldr	r3, [r5, #16]
9000d22a:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d22e:	2b18      	cmp	r3, #24
9000d230:	f000 81ae 	beq.w	9000d590 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
9000d234:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000d236:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
9000d238:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
9000d23c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
9000d23e:	f000 8142 	beq.w	9000d4c6 <HAL_RCC_OscConfig+0x3ee>
        tickstart = HAL_GetTick();
9000d242:	f7fc fba5 	bl	90009990 <HAL_GetTick>
9000d246:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d248:	e005      	b.n	9000d256 <HAL_RCC_OscConfig+0x17e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d24a:	f7fc fba1 	bl	90009990 <HAL_GetTick>
9000d24e:	1b00      	subs	r0, r0, r4
9000d250:	2802      	cmp	r0, #2
9000d252:	f200 80c2 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d256:	682b      	ldr	r3, [r5, #0]
9000d258:	019b      	lsls	r3, r3, #6
9000d25a:	d4f6      	bmi.n	9000d24a <HAL_RCC_OscConfig+0x172>
  return HAL_OK;
9000d25c:	2000      	movs	r0, #0
}
9000d25e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
9000d260:	4a46      	ldr	r2, [pc, #280]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d262:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
9000d264:	6a92      	ldr	r2, [r2, #40]	; 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000d266:	f013 0338 	ands.w	r3, r3, #56	; 0x38
9000d26a:	d12d      	bne.n	9000d2c8 <HAL_RCC_OscConfig+0x1f0>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
9000d26c:	4b43      	ldr	r3, [pc, #268]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d26e:	68e2      	ldr	r2, [r4, #12]
9000d270:	681b      	ldr	r3, [r3, #0]
9000d272:	0759      	lsls	r1, r3, #29
9000d274:	d501      	bpl.n	9000d27a <HAL_RCC_OscConfig+0x1a2>
9000d276:	2a00      	cmp	r2, #0
9000d278:	d04e      	beq.n	9000d318 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000d27a:	4d40      	ldr	r5, [pc, #256]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d27c:	682b      	ldr	r3, [r5, #0]
9000d27e:	f023 0319 	bic.w	r3, r3, #25
9000d282:	4313      	orrs	r3, r2
9000d284:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d286:	f7fc fb83 	bl	90009990 <HAL_GetTick>
9000d28a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d28c:	e005      	b.n	9000d29a <HAL_RCC_OscConfig+0x1c2>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000d28e:	f7fc fb7f 	bl	90009990 <HAL_GetTick>
9000d292:	1b80      	subs	r0, r0, r6
9000d294:	2802      	cmp	r0, #2
9000d296:	f200 80a0 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d29a:	682b      	ldr	r3, [r5, #0]
9000d29c:	075b      	lsls	r3, r3, #29
9000d29e:	d5f6      	bpl.n	9000d28e <HAL_RCC_OscConfig+0x1b6>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000d2a0:	f7fc fb7c 	bl	9000999c <HAL_GetREVID>
9000d2a4:	f241 0303 	movw	r3, #4099	; 0x1003
9000d2a8:	4298      	cmp	r0, r3
9000d2aa:	f200 80f7 	bhi.w	9000d49c <HAL_RCC_OscConfig+0x3c4>
9000d2ae:	6922      	ldr	r2, [r4, #16]
9000d2b0:	686b      	ldr	r3, [r5, #4]
9000d2b2:	2a40      	cmp	r2, #64	; 0x40
9000d2b4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000d2b8:	bf0c      	ite	eq
9000d2ba:	f443 3300 	orreq.w	r3, r3, #131072	; 0x20000
9000d2be:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
9000d2c2:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d2c4:	6823      	ldr	r3, [r4, #0]
9000d2c6:	e741      	b.n	9000d14c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000d2c8:	2b18      	cmp	r3, #24
9000d2ca:	f000 80e3 	beq.w	9000d494 <HAL_RCC_OscConfig+0x3bc>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000d2ce:	4d2b      	ldr	r5, [pc, #172]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000d2d0:	68e2      	ldr	r2, [r4, #12]
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000d2d2:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
9000d2d4:	2a00      	cmp	r2, #0
9000d2d6:	f000 80cc 	beq.w	9000d472 <HAL_RCC_OscConfig+0x39a>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
9000d2da:	f023 0319 	bic.w	r3, r3, #25
9000d2de:	4313      	orrs	r3, r2
9000d2e0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d2e2:	f7fc fb55 	bl	90009990 <HAL_GetTick>
9000d2e6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d2e8:	e004      	b.n	9000d2f4 <HAL_RCC_OscConfig+0x21c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000d2ea:	f7fc fb51 	bl	90009990 <HAL_GetTick>
9000d2ee:	1b80      	subs	r0, r0, r6
9000d2f0:	2802      	cmp	r0, #2
9000d2f2:	d872      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d2f4:	682b      	ldr	r3, [r5, #0]
9000d2f6:	075f      	lsls	r7, r3, #29
9000d2f8:	d5f7      	bpl.n	9000d2ea <HAL_RCC_OscConfig+0x212>
9000d2fa:	e7d1      	b.n	9000d2a0 <HAL_RCC_OscConfig+0x1c8>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
9000d2fc:	f001 0103 	and.w	r1, r1, #3
9000d300:	2902      	cmp	r1, #2
9000d302:	f47f aefc 	bne.w	9000d0fe <HAL_RCC_OscConfig+0x26>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
9000d306:	4a1d      	ldr	r2, [pc, #116]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d308:	6812      	ldr	r2, [r2, #0]
9000d30a:	0392      	lsls	r2, r2, #14
9000d30c:	f57f af1b 	bpl.w	9000d146 <HAL_RCC_OscConfig+0x6e>
9000d310:	6862      	ldr	r2, [r4, #4]
9000d312:	2a00      	cmp	r2, #0
9000d314:	f47f af17 	bne.w	9000d146 <HAL_RCC_OscConfig+0x6e>
        return HAL_ERROR;
9000d318:	2001      	movs	r0, #1
}
9000d31a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
9000d31c:	f002 0203 	and.w	r2, r2, #3
9000d320:	2a01      	cmp	r2, #1
9000d322:	f47f af20 	bne.w	9000d166 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
9000d326:	4b15      	ldr	r3, [pc, #84]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d328:	681b      	ldr	r3, [r3, #0]
9000d32a:	05da      	lsls	r2, r3, #23
9000d32c:	d502      	bpl.n	9000d334 <HAL_RCC_OscConfig+0x25c>
9000d32e:	69e3      	ldr	r3, [r4, #28]
9000d330:	2b80      	cmp	r3, #128	; 0x80
9000d332:	d1f1      	bne.n	9000d318 <HAL_RCC_OscConfig+0x240>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d334:	f7fc fb32 	bl	9000999c <HAL_GetREVID>
9000d338:	f241 0303 	movw	r3, #4099	; 0x1003
9000d33c:	4298      	cmp	r0, r3
9000d33e:	f200 80b8 	bhi.w	9000d4b2 <HAL_RCC_OscConfig+0x3da>
9000d342:	6a22      	ldr	r2, [r4, #32]
9000d344:	2a20      	cmp	r2, #32
9000d346:	f000 81a7 	beq.w	9000d698 <HAL_RCC_OscConfig+0x5c0>
9000d34a:	490c      	ldr	r1, [pc, #48]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d34c:	684b      	ldr	r3, [r1, #4]
9000d34e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000d352:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
9000d356:	604b      	str	r3, [r1, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d358:	6823      	ldr	r3, [r4, #0]
9000d35a:	e72d      	b.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d35c:	4a07      	ldr	r2, [pc, #28]	; (9000d37c <HAL_RCC_OscConfig+0x2a4>)
9000d35e:	6813      	ldr	r3, [r2, #0]
9000d360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000d364:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
9000d366:	e6df      	b.n	9000d128 <HAL_RCC_OscConfig+0x50>
    PWR->CR1 |= PWR_CR1_DBP;
9000d368:	4d05      	ldr	r5, [pc, #20]	; (9000d380 <HAL_RCC_OscConfig+0x2a8>)
9000d36a:	682b      	ldr	r3, [r5, #0]
9000d36c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000d370:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
9000d372:	f7fc fb0d 	bl	90009990 <HAL_GetTick>
9000d376:	4606      	mov	r6, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000d378:	e009      	b.n	9000d38e <HAL_RCC_OscConfig+0x2b6>
9000d37a:	bf00      	nop
9000d37c:	58024400 	.word	0x58024400
9000d380:	58024800 	.word	0x58024800
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000d384:	f7fc fb04 	bl	90009990 <HAL_GetTick>
9000d388:	1b80      	subs	r0, r0, r6
9000d38a:	2864      	cmp	r0, #100	; 0x64
9000d38c:	d825      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000d38e:	682b      	ldr	r3, [r5, #0]
9000d390:	05da      	lsls	r2, r3, #23
9000d392:	d5f7      	bpl.n	9000d384 <HAL_RCC_OscConfig+0x2ac>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d394:	68a3      	ldr	r3, [r4, #8]
9000d396:	2b01      	cmp	r3, #1
9000d398:	f000 8178 	beq.w	9000d68c <HAL_RCC_OscConfig+0x5b4>
9000d39c:	2b00      	cmp	r3, #0
9000d39e:	f000 8153 	beq.w	9000d648 <HAL_RCC_OscConfig+0x570>
9000d3a2:	2b05      	cmp	r3, #5
9000d3a4:	4ba5      	ldr	r3, [pc, #660]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
9000d3a6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000d3a8:	f000 817f 	beq.w	9000d6aa <HAL_RCC_OscConfig+0x5d2>
9000d3ac:	f022 0201 	bic.w	r2, r2, #1
9000d3b0:	671a      	str	r2, [r3, #112]	; 0x70
9000d3b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000d3b4:	f022 0204 	bic.w	r2, r2, #4
9000d3b8:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
9000d3ba:	f7fc fae9 	bl	90009990 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000d3be:	4e9f      	ldr	r6, [pc, #636]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d3c0:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
9000d3c4:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000d3c6:	e004      	b.n	9000d3d2 <HAL_RCC_OscConfig+0x2fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d3c8:	f7fc fae2 	bl	90009990 <HAL_GetTick>
9000d3cc:	1b40      	subs	r0, r0, r5
9000d3ce:	42b8      	cmp	r0, r7
9000d3d0:	d803      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000d3d2:	6f33      	ldr	r3, [r6, #112]	; 0x70
9000d3d4:	079b      	lsls	r3, r3, #30
9000d3d6:	d5f7      	bpl.n	9000d3c8 <HAL_RCC_OscConfig+0x2f0>
9000d3d8:	e723      	b.n	9000d222 <HAL_RCC_OscConfig+0x14a>
            return HAL_TIMEOUT;
9000d3da:	2003      	movs	r0, #3
}
9000d3dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d3de:	4d97      	ldr	r5, [pc, #604]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
9000d3e0:	682b      	ldr	r3, [r5, #0]
9000d3e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
9000d3e6:	602b      	str	r3, [r5, #0]
9000d3e8:	682b      	ldr	r3, [r5, #0]
9000d3ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
9000d3ee:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d3f0:	f7fc face 	bl	90009990 <HAL_GetTick>
9000d3f4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000d3f6:	e004      	b.n	9000d402 <HAL_RCC_OscConfig+0x32a>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
9000d3f8:	f7fc faca 	bl	90009990 <HAL_GetTick>
9000d3fc:	1b80      	subs	r0, r0, r6
9000d3fe:	2864      	cmp	r0, #100	; 0x64
9000d400:	d8eb      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
9000d402:	682b      	ldr	r3, [r5, #0]
9000d404:	039f      	lsls	r7, r3, #14
9000d406:	d4f7      	bmi.n	9000d3f8 <HAL_RCC_OscConfig+0x320>
9000d408:	e69c      	b.n	9000d144 <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_LSI_DISABLE();
9000d40a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000d40c:	f023 0301 	bic.w	r3, r3, #1
9000d410:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
9000d412:	f7fc fabd 	bl	90009990 <HAL_GetTick>
9000d416:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000d418:	e004      	b.n	9000d424 <HAL_RCC_OscConfig+0x34c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
9000d41a:	f7fc fab9 	bl	90009990 <HAL_GetTick>
9000d41e:	1b80      	subs	r0, r0, r6
9000d420:	2802      	cmp	r0, #2
9000d422:	d8da      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
9000d424:	6f6b      	ldr	r3, [r5, #116]	; 0x74
9000d426:	0799      	lsls	r1, r3, #30
9000d428:	d4f7      	bmi.n	9000d41a <HAL_RCC_OscConfig+0x342>
9000d42a:	e6dd      	b.n	9000d1e8 <HAL_RCC_OscConfig+0x110>
      __HAL_RCC_HSI48_DISABLE();
9000d42c:	682b      	ldr	r3, [r5, #0]
9000d42e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
9000d432:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
9000d434:	f7fc faac 	bl	90009990 <HAL_GetTick>
9000d438:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000d43a:	e004      	b.n	9000d446 <HAL_RCC_OscConfig+0x36e>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
9000d43c:	f7fc faa8 	bl	90009990 <HAL_GetTick>
9000d440:	1b80      	subs	r0, r0, r6
9000d442:	2802      	cmp	r0, #2
9000d444:	d8c9      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
9000d446:	682b      	ldr	r3, [r5, #0]
9000d448:	0498      	lsls	r0, r3, #18
9000d44a:	d4f7      	bmi.n	9000d43c <HAL_RCC_OscConfig+0x364>
9000d44c:	e6e5      	b.n	9000d21a <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_CSI_DISABLE();
9000d44e:	682b      	ldr	r3, [r5, #0]
9000d450:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000d454:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d456:	f7fc fa9b 	bl	90009990 <HAL_GetTick>
9000d45a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000d45c:	e004      	b.n	9000d468 <HAL_RCC_OscConfig+0x390>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
9000d45e:	f7fc fa97 	bl	90009990 <HAL_GetTick>
9000d462:	1b80      	subs	r0, r0, r6
9000d464:	2802      	cmp	r0, #2
9000d466:	d8b8      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
9000d468:	682b      	ldr	r3, [r5, #0]
9000d46a:	05df      	lsls	r7, r3, #23
9000d46c:	d4f7      	bmi.n	9000d45e <HAL_RCC_OscConfig+0x386>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d46e:	6823      	ldr	r3, [r4, #0]
9000d470:	e6a2      	b.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
        __HAL_RCC_HSI_DISABLE();
9000d472:	f023 0301 	bic.w	r3, r3, #1
9000d476:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d478:	f7fc fa8a 	bl	90009990 <HAL_GetTick>
9000d47c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000d47e:	e004      	b.n	9000d48a <HAL_RCC_OscConfig+0x3b2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
9000d480:	f7fc fa86 	bl	90009990 <HAL_GetTick>
9000d484:	1b80      	subs	r0, r0, r6
9000d486:	2802      	cmp	r0, #2
9000d488:	d8a7      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
9000d48a:	682b      	ldr	r3, [r5, #0]
9000d48c:	0758      	lsls	r0, r3, #29
9000d48e:	d4f7      	bmi.n	9000d480 <HAL_RCC_OscConfig+0x3a8>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d490:	6823      	ldr	r3, [r4, #0]
9000d492:	e65b      	b.n	9000d14c <HAL_RCC_OscConfig+0x74>
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
9000d494:	0790      	lsls	r0, r2, #30
9000d496:	f47f af1a 	bne.w	9000d2ce <HAL_RCC_OscConfig+0x1f6>
9000d49a:	e6e7      	b.n	9000d26c <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
9000d49c:	686b      	ldr	r3, [r5, #4]
9000d49e:	6922      	ldr	r2, [r4, #16]
9000d4a0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
9000d4a4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000d4a8:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
9000d4aa:	6823      	ldr	r3, [r4, #0]
9000d4ac:	e64e      	b.n	9000d14c <HAL_RCC_OscConfig+0x74>
    return HAL_ERROR;
9000d4ae:	2001      	movs	r0, #1
}
9000d4b0:	4770      	bx	lr
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d4b2:	4a62      	ldr	r2, [pc, #392]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
9000d4b4:	6a21      	ldr	r1, [r4, #32]
9000d4b6:	68d3      	ldr	r3, [r2, #12]
9000d4b8:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000d4bc:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
9000d4c0:	60d3      	str	r3, [r2, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d4c2:	6823      	ldr	r3, [r4, #0]
9000d4c4:	e678      	b.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
        tickstart = HAL_GetTick();
9000d4c6:	f7fc fa63 	bl	90009990 <HAL_GetTick>
9000d4ca:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d4cc:	e004      	b.n	9000d4d8 <HAL_RCC_OscConfig+0x400>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d4ce:	f7fc fa5f 	bl	90009990 <HAL_GetTick>
9000d4d2:	1b80      	subs	r0, r0, r6
9000d4d4:	2802      	cmp	r0, #2
9000d4d6:	d880      	bhi.n	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
9000d4d8:	682b      	ldr	r3, [r5, #0]
9000d4da:	0199      	lsls	r1, r3, #6
9000d4dc:	d4f7      	bmi.n	9000d4ce <HAL_RCC_OscConfig+0x3f6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000d4de:	6aa9      	ldr	r1, [r5, #40]	; 0x28
9000d4e0:	4b57      	ldr	r3, [pc, #348]	; (9000d640 <HAL_RCC_OscConfig+0x568>)
9000d4e2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
9000d4e4:	400b      	ands	r3, r1
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d4e6:	4957      	ldr	r1, [pc, #348]	; (9000d644 <HAL_RCC_OscConfig+0x56c>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d4e8:	4e54      	ldr	r6, [pc, #336]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
9000d4ea:	4313      	orrs	r3, r2
9000d4ec:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000d4ee:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
9000d4f2:	62ab      	str	r3, [r5, #40]	; 0x28
9000d4f4:	e9d4 320d 	ldrd	r3, r2, [r4, #52]	; 0x34
9000d4f8:	3b01      	subs	r3, #1
9000d4fa:	3a01      	subs	r2, #1
9000d4fc:	025b      	lsls	r3, r3, #9
9000d4fe:	0412      	lsls	r2, r2, #16
9000d500:	b29b      	uxth	r3, r3
9000d502:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000d506:	4313      	orrs	r3, r2
9000d508:	6b22      	ldr	r2, [r4, #48]	; 0x30
9000d50a:	3a01      	subs	r2, #1
9000d50c:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000d510:	4313      	orrs	r3, r2
9000d512:	6be2      	ldr	r2, [r4, #60]	; 0x3c
9000d514:	3a01      	subs	r2, #1
9000d516:	0612      	lsls	r2, r2, #24
9000d518:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000d51c:	4313      	orrs	r3, r2
9000d51e:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
9000d520:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d522:	f023 0301 	bic.w	r3, r3, #1
9000d526:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d528:	6b6a      	ldr	r2, [r5, #52]	; 0x34
9000d52a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
9000d52c:	4011      	ands	r1, r2
9000d52e:	ea41 01c3 	orr.w	r1, r1, r3, lsl #3
9000d532:	6369      	str	r1, [r5, #52]	; 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
9000d534:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d536:	6c22      	ldr	r2, [r4, #64]	; 0x40
9000d538:	f023 030c 	bic.w	r3, r3, #12
9000d53c:	4313      	orrs	r3, r2
9000d53e:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
9000d540:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d542:	6c62      	ldr	r2, [r4, #68]	; 0x44
9000d544:	f023 0302 	bic.w	r3, r3, #2
9000d548:	4313      	orrs	r3, r2
9000d54a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
9000d54c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d54e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
9000d552:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000d554:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d556:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
9000d55a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
9000d55c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d55e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
9000d562:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
9000d564:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9000d566:	f043 0301 	orr.w	r3, r3, #1
9000d56a:	62eb      	str	r3, [r5, #44]	; 0x2c
        __HAL_RCC_PLL_ENABLE();
9000d56c:	682b      	ldr	r3, [r5, #0]
9000d56e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
9000d572:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
9000d574:	f7fc fa0c 	bl	90009990 <HAL_GetTick>
9000d578:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d57a:	e005      	b.n	9000d588 <HAL_RCC_OscConfig+0x4b0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
9000d57c:	f7fc fa08 	bl	90009990 <HAL_GetTick>
9000d580:	1b00      	subs	r0, r0, r4
9000d582:	2802      	cmp	r0, #2
9000d584:	f63f af29 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000d588:	6833      	ldr	r3, [r6, #0]
9000d58a:	019a      	lsls	r2, r3, #6
9000d58c:	d5f6      	bpl.n	9000d57c <HAL_RCC_OscConfig+0x4a4>
9000d58e:	e665      	b.n	9000d25c <HAL_RCC_OscConfig+0x184>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d590:	2801      	cmp	r0, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
9000d592:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
9000d594:	6b2e      	ldr	r6, [r5, #48]	; 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d596:	f43f ae62 	beq.w	9000d25e <HAL_RCC_OscConfig+0x186>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d59a:	f002 0303 	and.w	r3, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
9000d59e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
9000d5a0:	428b      	cmp	r3, r1
9000d5a2:	f47f aeb9 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d5a6:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
9000d5aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000d5ac:	429a      	cmp	r2, r3
9000d5ae:	f47f aeb3 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d5b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
9000d5b4:	f3c6 0208 	ubfx	r2, r6, #0, #9
9000d5b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
9000d5ba:	429a      	cmp	r2, r3
9000d5bc:	f47f aeac 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d5c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
9000d5c2:	f3c6 2246 	ubfx	r2, r6, #9, #7
9000d5c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
9000d5c8:	429a      	cmp	r2, r3
9000d5ca:	f47f aea5 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d5ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9000d5d0:	f3c6 4206 	ubfx	r2, r6, #16, #7
9000d5d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
9000d5d6:	429a      	cmp	r2, r3
9000d5d8:	f47f ae9e 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
9000d5dc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9000d5de:	f3c6 6606 	ubfx	r6, r6, #24, #7
9000d5e2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
9000d5e4:	429e      	cmp	r6, r3
9000d5e6:	f47f ae97 	bne.w	9000d318 <HAL_RCC_OscConfig+0x240>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d5ea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d5ec:	6ca2      	ldr	r2, [r4, #72]	; 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
9000d5ee:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
9000d5f2:	429a      	cmp	r2, r3
9000d5f4:	f43f ae32 	beq.w	9000d25c <HAL_RCC_OscConfig+0x184>
          __HAL_RCC_PLLFRACN_DISABLE();
9000d5f8:	4a10      	ldr	r2, [pc, #64]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
9000d5fa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d5fc:	f023 0301 	bic.w	r3, r3, #1
9000d600:	62d3      	str	r3, [r2, #44]	; 0x2c
          tickstart = HAL_GetTick();
9000d602:	f7fc f9c5 	bl	90009990 <HAL_GetTick>
9000d606:	4605      	mov	r5, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
9000d608:	f7fc f9c2 	bl	90009990 <HAL_GetTick>
9000d60c:	42a8      	cmp	r0, r5
9000d60e:	d0fb      	beq.n	9000d608 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d610:	4a0a      	ldr	r2, [pc, #40]	; (9000d63c <HAL_RCC_OscConfig+0x564>)
  return HAL_OK;
9000d612:	2000      	movs	r0, #0
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
9000d614:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000d616:	4b0b      	ldr	r3, [pc, #44]	; (9000d644 <HAL_RCC_OscConfig+0x56c>)
9000d618:	6b54      	ldr	r4, [r2, #52]	; 0x34
9000d61a:	4023      	ands	r3, r4
9000d61c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
9000d620:	6353      	str	r3, [r2, #52]	; 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
9000d622:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
9000d624:	f043 0301 	orr.w	r3, r3, #1
9000d628:	62d3      	str	r3, [r2, #44]	; 0x2c
}
9000d62a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
9000d62c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
9000d630:	601a      	str	r2, [r3, #0]
9000d632:	681a      	ldr	r2, [r3, #0]
9000d634:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
9000d638:	601a      	str	r2, [r3, #0]
9000d63a:	e575      	b.n	9000d128 <HAL_RCC_OscConfig+0x50>
9000d63c:	58024400 	.word	0x58024400
9000d640:	fffffc0c 	.word	0xfffffc0c
9000d644:	ffff0007 	.word	0xffff0007
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d648:	4d1c      	ldr	r5, [pc, #112]	; (9000d6bc <HAL_RCC_OscConfig+0x5e4>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d64a:	f241 3788 	movw	r7, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d64e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d650:	f023 0301 	bic.w	r3, r3, #1
9000d654:	672b      	str	r3, [r5, #112]	; 0x70
9000d656:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d658:	f023 0304 	bic.w	r3, r3, #4
9000d65c:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
9000d65e:	f7fc f997 	bl	90009990 <HAL_GetTick>
9000d662:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d664:	e005      	b.n	9000d672 <HAL_RCC_OscConfig+0x59a>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000d666:	f7fc f993 	bl	90009990 <HAL_GetTick>
9000d66a:	1b80      	subs	r0, r0, r6
9000d66c:	42b8      	cmp	r0, r7
9000d66e:	f63f aeb4 	bhi.w	9000d3da <HAL_RCC_OscConfig+0x302>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
9000d672:	6f2b      	ldr	r3, [r5, #112]	; 0x70
9000d674:	0798      	lsls	r0, r3, #30
9000d676:	d4f6      	bmi.n	9000d666 <HAL_RCC_OscConfig+0x58e>
9000d678:	e5d3      	b.n	9000d222 <HAL_RCC_OscConfig+0x14a>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d67a:	68eb      	ldr	r3, [r5, #12]
9000d67c:	6a22      	ldr	r2, [r4, #32]
9000d67e:	f023 537c 	bic.w	r3, r3, #1056964608	; 0x3f000000
9000d682:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
9000d686:	60eb      	str	r3, [r5, #12]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d688:	6823      	ldr	r3, [r4, #0]
9000d68a:	e595      	b.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d68c:	4a0b      	ldr	r2, [pc, #44]	; (9000d6bc <HAL_RCC_OscConfig+0x5e4>)
9000d68e:	6f13      	ldr	r3, [r2, #112]	; 0x70
9000d690:	f043 0301 	orr.w	r3, r3, #1
9000d694:	6713      	str	r3, [r2, #112]	; 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
9000d696:	e690      	b.n	9000d3ba <HAL_RCC_OscConfig+0x2e2>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
9000d698:	4a08      	ldr	r2, [pc, #32]	; (9000d6bc <HAL_RCC_OscConfig+0x5e4>)
9000d69a:	6853      	ldr	r3, [r2, #4]
9000d69c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
9000d6a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
9000d6a4:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
9000d6a6:	6823      	ldr	r3, [r4, #0]
9000d6a8:	e586      	b.n	9000d1b8 <HAL_RCC_OscConfig+0xe0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
9000d6aa:	f042 0204 	orr.w	r2, r2, #4
9000d6ae:	671a      	str	r2, [r3, #112]	; 0x70
9000d6b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
9000d6b2:	f042 0201 	orr.w	r2, r2, #1
9000d6b6:	671a      	str	r2, [r3, #112]	; 0x70
9000d6b8:	e67f      	b.n	9000d3ba <HAL_RCC_OscConfig+0x2e2>
9000d6ba:	bf00      	nop
9000d6bc:	58024400 	.word	0x58024400

9000d6c0 <HAL_RCC_GetSysClockFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d6c0:	4a47      	ldr	r2, [pc, #284]	; (9000d7e0 <HAL_RCC_GetSysClockFreq+0x120>)
9000d6c2:	6913      	ldr	r3, [r2, #16]
9000d6c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d6c8:	2b10      	cmp	r3, #16
9000d6ca:	d004      	beq.n	9000d6d6 <HAL_RCC_GetSysClockFreq+0x16>
9000d6cc:	2b18      	cmp	r3, #24
9000d6ce:	d00d      	beq.n	9000d6ec <HAL_RCC_GetSysClockFreq+0x2c>
9000d6d0:	b11b      	cbz	r3, 9000d6da <HAL_RCC_GetSysClockFreq+0x1a>
      sysclockfreq = CSI_VALUE;
9000d6d2:	4844      	ldr	r0, [pc, #272]	; (9000d7e4 <HAL_RCC_GetSysClockFreq+0x124>)
9000d6d4:	4770      	bx	lr
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000d6d6:	4844      	ldr	r0, [pc, #272]	; (9000d7e8 <HAL_RCC_GetSysClockFreq+0x128>)
9000d6d8:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d6da:	6813      	ldr	r3, [r2, #0]
9000d6dc:	0699      	lsls	r1, r3, #26
9000d6de:	d54a      	bpl.n	9000d776 <HAL_RCC_GetSysClockFreq+0xb6>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d6e0:	6813      	ldr	r3, [r2, #0]
9000d6e2:	4842      	ldr	r0, [pc, #264]	; (9000d7ec <HAL_RCC_GetSysClockFreq+0x12c>)
9000d6e4:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000d6e8:	40d8      	lsrs	r0, r3
9000d6ea:	4770      	bx	lr
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d6ec:	6a93      	ldr	r3, [r2, #40]	; 0x28
{
9000d6ee:	b430      	push	{r4, r5}
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d6f0:	6a94      	ldr	r4, [r2, #40]	; 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d6f2:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
      if (pllm != 0U)
9000d6f4:	f414 7f7c 	tst.w	r4, #1008	; 0x3f0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d6f8:	6b51      	ldr	r1, [r2, #52]	; 0x34
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
9000d6fa:	f3c4 1005 	ubfx	r0, r4, #4, #6
      if (pllm != 0U)
9000d6fe:	d038      	beq.n	9000d772 <HAL_RCC_GetSysClockFreq+0xb2>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d700:	f3c1 01cc 	ubfx	r1, r1, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
9000d704:	f005 0501 	and.w	r5, r5, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000d708:	f003 0303 	and.w	r3, r3, #3
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
9000d70c:	fb05 f101 	mul.w	r1, r5, r1
9000d710:	2b01      	cmp	r3, #1
9000d712:	ee07 1a90 	vmov	s15, r1
9000d716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
        switch (pllsource)
9000d71a:	d002      	beq.n	9000d722 <HAL_RCC_GetSysClockFreq+0x62>
9000d71c:	2b02      	cmp	r3, #2
9000d71e:	d02c      	beq.n	9000d77a <HAL_RCC_GetSysClockFreq+0xba>
9000d720:	b393      	cbz	r3, 9000d788 <HAL_RCC_GetSysClockFreq+0xc8>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d722:	ee07 0a90 	vmov	s15, r0
9000d726:	ed9f 5a32 	vldr	s10, [pc, #200]	; 9000d7f0 <HAL_RCC_GetSysClockFreq+0x130>
9000d72a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d72e:	6b13      	ldr	r3, [r2, #48]	; 0x30
9000d730:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000d734:	eddf 5a2f 	vldr	s11, [pc, #188]	; 9000d7f4 <HAL_RCC_GetSysClockFreq+0x134>
9000d738:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000d73c:	ee07 3a90 	vmov	s15, r3
9000d740:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000d744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d748:	eee7 7a25 	vfma.f32	s15, s14, s11
9000d74c:	ee77 7a86 	vadd.f32	s15, s15, s12
9000d750:	ee66 6aa7 	vmul.f32	s13, s13, s15
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
9000d754:	4b22      	ldr	r3, [pc, #136]	; (9000d7e0 <HAL_RCC_GetSysClockFreq+0x120>)
9000d756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9000d758:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000d75c:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
9000d75e:	ee07 3a90 	vmov	s15, r3
9000d762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
9000d766:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000d76a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000d76e:	ee17 0a90 	vmov	r0, s15
}
9000d772:	bc30      	pop	{r4, r5}
9000d774:	4770      	bx	lr
        sysclockfreq = (uint32_t) HSI_VALUE;
9000d776:	481d      	ldr	r0, [pc, #116]	; (9000d7ec <HAL_RCC_GetSysClockFreq+0x12c>)
}
9000d778:	4770      	bx	lr
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d77a:	ee07 0a90 	vmov	s15, r0
9000d77e:	ed9f 5a1e 	vldr	s10, [pc, #120]	; 9000d7f8 <HAL_RCC_GetSysClockFreq+0x138>
9000d782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d786:	e7d2      	b.n	9000d72e <HAL_RCC_GetSysClockFreq+0x6e>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000d788:	6813      	ldr	r3, [r2, #0]
9000d78a:	069b      	lsls	r3, r3, #26
9000d78c:	d520      	bpl.n	9000d7d0 <HAL_RCC_GetSysClockFreq+0x110>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d78e:	6814      	ldr	r4, [r2, #0]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d790:	ee07 0a90 	vmov	s15, r0
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d794:	4915      	ldr	r1, [pc, #84]	; (9000d7ec <HAL_RCC_GetSysClockFreq+0x12c>)
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d796:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000d79a:	6b13      	ldr	r3, [r2, #48]	; 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d79c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d7a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d7a4:	ed9f 5a13 	vldr	s10, [pc, #76]	; 9000d7f4 <HAL_RCC_GetSysClockFreq+0x134>
9000d7a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000d7ac:	40e1      	lsrs	r1, r4
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d7ae:	ee06 3a90 	vmov	s13, r3
9000d7b2:	ee06 1a10 	vmov	s12, r1
9000d7b6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000d7ba:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000d7be:	eee7 6a05 	vfma.f32	s13, s14, s10
9000d7c2:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000d7c6:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000d7ca:	ee66 6a87 	vmul.f32	s13, s13, s14
9000d7ce:	e7c1      	b.n	9000d754 <HAL_RCC_GetSysClockFreq+0x94>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
9000d7d0:	ee07 0a90 	vmov	s15, r0
9000d7d4:	ed9f 5a09 	vldr	s10, [pc, #36]	; 9000d7fc <HAL_RCC_GetSysClockFreq+0x13c>
9000d7d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000d7dc:	e7a7      	b.n	9000d72e <HAL_RCC_GetSysClockFreq+0x6e>
9000d7de:	bf00      	nop
9000d7e0:	58024400 	.word	0x58024400
9000d7e4:	003d0900 	.word	0x003d0900
9000d7e8:	017d7840 	.word	0x017d7840
9000d7ec:	03d09000 	.word	0x03d09000
9000d7f0:	4a742400 	.word	0x4a742400
9000d7f4:	39000000 	.word	0x39000000
9000d7f8:	4bbebc20 	.word	0x4bbebc20
9000d7fc:	4c742400 	.word	0x4c742400

9000d800 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
9000d800:	2800      	cmp	r0, #0
9000d802:	f000 810c 	beq.w	9000da1e <HAL_RCC_ClockConfig+0x21e>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d806:	4a8c      	ldr	r2, [pc, #560]	; (9000da38 <HAL_RCC_ClockConfig+0x238>)
9000d808:	6813      	ldr	r3, [r2, #0]
9000d80a:	f003 030f 	and.w	r3, r3, #15
9000d80e:	428b      	cmp	r3, r1
{
9000d810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9000d814:	4604      	mov	r4, r0
9000d816:	460d      	mov	r5, r1
  if (FLatency > __HAL_FLASH_GET_LATENCY())
9000d818:	d20c      	bcs.n	9000d834 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d81a:	6813      	ldr	r3, [r2, #0]
9000d81c:	f023 030f 	bic.w	r3, r3, #15
9000d820:	430b      	orrs	r3, r1
9000d822:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d824:	6813      	ldr	r3, [r2, #0]
9000d826:	f003 030f 	and.w	r3, r3, #15
9000d82a:	428b      	cmp	r3, r1
9000d82c:	d002      	beq.n	9000d834 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
9000d82e:	2001      	movs	r0, #1
}
9000d830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d834:	6823      	ldr	r3, [r4, #0]
9000d836:	075f      	lsls	r7, r3, #29
9000d838:	d50b      	bpl.n	9000d852 <HAL_RCC_ClockConfig+0x52>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d83a:	4980      	ldr	r1, [pc, #512]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d83c:	6920      	ldr	r0, [r4, #16]
9000d83e:	698a      	ldr	r2, [r1, #24]
9000d840:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d844:	4290      	cmp	r0, r2
9000d846:	d904      	bls.n	9000d852 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d848:	698a      	ldr	r2, [r1, #24]
9000d84a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d84e:	4302      	orrs	r2, r0
9000d850:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d852:	071e      	lsls	r6, r3, #28
9000d854:	d50b      	bpl.n	9000d86e <HAL_RCC_ClockConfig+0x6e>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d856:	4979      	ldr	r1, [pc, #484]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d858:	6960      	ldr	r0, [r4, #20]
9000d85a:	69ca      	ldr	r2, [r1, #28]
9000d85c:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d860:	4290      	cmp	r0, r2
9000d862:	d904      	bls.n	9000d86e <HAL_RCC_ClockConfig+0x6e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d864:	69ca      	ldr	r2, [r1, #28]
9000d866:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d86a:	4302      	orrs	r2, r0
9000d86c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d86e:	06d8      	lsls	r0, r3, #27
9000d870:	d50b      	bpl.n	9000d88a <HAL_RCC_ClockConfig+0x8a>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d872:	4972      	ldr	r1, [pc, #456]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d874:	69a0      	ldr	r0, [r4, #24]
9000d876:	69ca      	ldr	r2, [r1, #28]
9000d878:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d87c:	4290      	cmp	r0, r2
9000d87e:	d904      	bls.n	9000d88a <HAL_RCC_ClockConfig+0x8a>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d880:	69ca      	ldr	r2, [r1, #28]
9000d882:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d886:	4302      	orrs	r2, r0
9000d888:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d88a:	0699      	lsls	r1, r3, #26
9000d88c:	d50b      	bpl.n	9000d8a6 <HAL_RCC_ClockConfig+0xa6>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d88e:	496b      	ldr	r1, [pc, #428]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d890:	69e0      	ldr	r0, [r4, #28]
9000d892:	6a0a      	ldr	r2, [r1, #32]
9000d894:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d898:	4290      	cmp	r0, r2
9000d89a:	d904      	bls.n	9000d8a6 <HAL_RCC_ClockConfig+0xa6>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d89c:	6a0a      	ldr	r2, [r1, #32]
9000d89e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d8a2:	4302      	orrs	r2, r0
9000d8a4:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d8a6:	079a      	lsls	r2, r3, #30
9000d8a8:	f140 80ab 	bpl.w	9000da02 <HAL_RCC_ClockConfig+0x202>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d8ac:	4863      	ldr	r0, [pc, #396]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d8ae:	68e1      	ldr	r1, [r4, #12]
9000d8b0:	6982      	ldr	r2, [r0, #24]
9000d8b2:	f002 020f 	and.w	r2, r2, #15
9000d8b6:	4291      	cmp	r1, r2
9000d8b8:	d904      	bls.n	9000d8c4 <HAL_RCC_ClockConfig+0xc4>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000d8ba:	6982      	ldr	r2, [r0, #24]
9000d8bc:	f022 020f 	bic.w	r2, r2, #15
9000d8c0:	430a      	orrs	r2, r1
9000d8c2:	6182      	str	r2, [r0, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000d8c4:	07d8      	lsls	r0, r3, #31
9000d8c6:	d530      	bpl.n	9000d92a <HAL_RCC_ClockConfig+0x12a>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
9000d8c8:	4a5c      	ldr	r2, [pc, #368]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d8ca:	68a1      	ldr	r1, [r4, #8]
9000d8cc:	6993      	ldr	r3, [r2, #24]
9000d8ce:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
9000d8d2:	430b      	orrs	r3, r1
9000d8d4:	6193      	str	r3, [r2, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d8d6:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000d8d8:	6813      	ldr	r3, [r2, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
9000d8da:	2902      	cmp	r1, #2
9000d8dc:	f000 80a1 	beq.w	9000da22 <HAL_RCC_ClockConfig+0x222>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
9000d8e0:	2903      	cmp	r1, #3
9000d8e2:	f000 8098 	beq.w	9000da16 <HAL_RCC_ClockConfig+0x216>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
9000d8e6:	2901      	cmp	r1, #1
9000d8e8:	f000 80a1 	beq.w	9000da2e <HAL_RCC_ClockConfig+0x22e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
9000d8ec:	0758      	lsls	r0, r3, #29
9000d8ee:	d59e      	bpl.n	9000d82e <HAL_RCC_ClockConfig+0x2e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d8f0:	4e52      	ldr	r6, [pc, #328]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d8f2:	f241 3888 	movw	r8, #5000	; 0x1388
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
9000d8f6:	6933      	ldr	r3, [r6, #16]
9000d8f8:	f023 0307 	bic.w	r3, r3, #7
9000d8fc:	430b      	orrs	r3, r1
9000d8fe:	6133      	str	r3, [r6, #16]
    tickstart = HAL_GetTick();
9000d900:	f7fc f846 	bl	90009990 <HAL_GetTick>
9000d904:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d906:	e005      	b.n	9000d914 <HAL_RCC_ClockConfig+0x114>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
9000d908:	f7fc f842 	bl	90009990 <HAL_GetTick>
9000d90c:	1bc0      	subs	r0, r0, r7
9000d90e:	4540      	cmp	r0, r8
9000d910:	f200 808b 	bhi.w	9000da2a <HAL_RCC_ClockConfig+0x22a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
9000d914:	6933      	ldr	r3, [r6, #16]
9000d916:	6862      	ldr	r2, [r4, #4]
9000d918:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000d91c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
9000d920:	d1f2      	bne.n	9000d908 <HAL_RCC_ClockConfig+0x108>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
9000d922:	6823      	ldr	r3, [r4, #0]
9000d924:	0799      	lsls	r1, r3, #30
9000d926:	d506      	bpl.n	9000d936 <HAL_RCC_ClockConfig+0x136>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
9000d928:	68e1      	ldr	r1, [r4, #12]
9000d92a:	4844      	ldr	r0, [pc, #272]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d92c:	6982      	ldr	r2, [r0, #24]
9000d92e:	f002 020f 	and.w	r2, r2, #15
9000d932:	428a      	cmp	r2, r1
9000d934:	d869      	bhi.n	9000da0a <HAL_RCC_ClockConfig+0x20a>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
9000d936:	4940      	ldr	r1, [pc, #256]	; (9000da38 <HAL_RCC_ClockConfig+0x238>)
9000d938:	680a      	ldr	r2, [r1, #0]
9000d93a:	f002 020f 	and.w	r2, r2, #15
9000d93e:	42aa      	cmp	r2, r5
9000d940:	d90a      	bls.n	9000d958 <HAL_RCC_ClockConfig+0x158>
    __HAL_FLASH_SET_LATENCY(FLatency);
9000d942:	680a      	ldr	r2, [r1, #0]
9000d944:	f022 020f 	bic.w	r2, r2, #15
9000d948:	432a      	orrs	r2, r5
9000d94a:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
9000d94c:	680a      	ldr	r2, [r1, #0]
9000d94e:	f002 020f 	and.w	r2, r2, #15
9000d952:	42aa      	cmp	r2, r5
9000d954:	f47f af6b 	bne.w	9000d82e <HAL_RCC_ClockConfig+0x2e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
9000d958:	075a      	lsls	r2, r3, #29
9000d95a:	d50b      	bpl.n	9000d974 <HAL_RCC_ClockConfig+0x174>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
9000d95c:	4937      	ldr	r1, [pc, #220]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d95e:	6920      	ldr	r0, [r4, #16]
9000d960:	698a      	ldr	r2, [r1, #24]
9000d962:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d966:	4290      	cmp	r0, r2
9000d968:	d204      	bcs.n	9000d974 <HAL_RCC_ClockConfig+0x174>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
9000d96a:	698a      	ldr	r2, [r1, #24]
9000d96c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d970:	4302      	orrs	r2, r0
9000d972:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
9000d974:	071f      	lsls	r7, r3, #28
9000d976:	d50b      	bpl.n	9000d990 <HAL_RCC_ClockConfig+0x190>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
9000d978:	4930      	ldr	r1, [pc, #192]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d97a:	6960      	ldr	r0, [r4, #20]
9000d97c:	69ca      	ldr	r2, [r1, #28]
9000d97e:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000d982:	4290      	cmp	r0, r2
9000d984:	d204      	bcs.n	9000d990 <HAL_RCC_ClockConfig+0x190>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
9000d986:	69ca      	ldr	r2, [r1, #28]
9000d988:	f022 0270 	bic.w	r2, r2, #112	; 0x70
9000d98c:	4302      	orrs	r2, r0
9000d98e:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
9000d990:	06de      	lsls	r6, r3, #27
9000d992:	d50b      	bpl.n	9000d9ac <HAL_RCC_ClockConfig+0x1ac>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
9000d994:	4929      	ldr	r1, [pc, #164]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d996:	69a0      	ldr	r0, [r4, #24]
9000d998:	69ca      	ldr	r2, [r1, #28]
9000d99a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000d99e:	4290      	cmp	r0, r2
9000d9a0:	d204      	bcs.n	9000d9ac <HAL_RCC_ClockConfig+0x1ac>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
9000d9a2:	69ca      	ldr	r2, [r1, #28]
9000d9a4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
9000d9a8:	4302      	orrs	r2, r0
9000d9aa:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
9000d9ac:	069d      	lsls	r5, r3, #26
9000d9ae:	d50b      	bpl.n	9000d9c8 <HAL_RCC_ClockConfig+0x1c8>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
9000d9b0:	4a22      	ldr	r2, [pc, #136]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d9b2:	69e1      	ldr	r1, [r4, #28]
9000d9b4:	6a13      	ldr	r3, [r2, #32]
9000d9b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
9000d9ba:	4299      	cmp	r1, r3
9000d9bc:	d204      	bcs.n	9000d9c8 <HAL_RCC_ClockConfig+0x1c8>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
9000d9be:	6a13      	ldr	r3, [r2, #32]
9000d9c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
9000d9c4:	430b      	orrs	r3, r1
9000d9c6:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d9c8:	f7ff fe7a 	bl	9000d6c0 <HAL_RCC_GetSysClockFreq>
9000d9cc:	4a1b      	ldr	r2, [pc, #108]	; (9000da3c <HAL_RCC_ClockConfig+0x23c>)
9000d9ce:	4603      	mov	r3, r0
9000d9d0:	481b      	ldr	r0, [pc, #108]	; (9000da40 <HAL_RCC_ClockConfig+0x240>)
9000d9d2:	6991      	ldr	r1, [r2, #24]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d9d4:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d9d6:	f3c1 2103 	ubfx	r1, r1, #8, #4
  SystemCoreClock = common_system_clock;
9000d9da:	4d1a      	ldr	r5, [pc, #104]	; (9000da44 <HAL_RCC_ClockConfig+0x244>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d9dc:	f002 020f 	and.w	r2, r2, #15
9000d9e0:	4c19      	ldr	r4, [pc, #100]	; (9000da48 <HAL_RCC_ClockConfig+0x248>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d9e2:	5c41      	ldrb	r1, [r0, r1]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d9e4:	5c82      	ldrb	r2, [r0, r2]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d9e6:	f001 011f 	and.w	r1, r1, #31
  halstatus = HAL_InitTick(uwTickPrio);
9000d9ea:	4818      	ldr	r0, [pc, #96]	; (9000da4c <HAL_RCC_ClockConfig+0x24c>)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d9ec:	f002 021f 	and.w	r2, r2, #31
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
9000d9f0:	40cb      	lsrs	r3, r1
  halstatus = HAL_InitTick(uwTickPrio);
9000d9f2:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = common_system_clock;
9000d9f4:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000d9f6:	40d3      	lsrs	r3, r2
9000d9f8:	6023      	str	r3, [r4, #0]
}
9000d9fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
9000d9fe:	f7f7 b9b7 	b.w	90004d70 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
9000da02:	07da      	lsls	r2, r3, #31
9000da04:	f53f af60 	bmi.w	9000d8c8 <HAL_RCC_ClockConfig+0xc8>
9000da08:	e795      	b.n	9000d936 <HAL_RCC_ClockConfig+0x136>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
9000da0a:	6982      	ldr	r2, [r0, #24]
9000da0c:	f022 020f 	bic.w	r2, r2, #15
9000da10:	4311      	orrs	r1, r2
9000da12:	6181      	str	r1, [r0, #24]
9000da14:	e78f      	b.n	9000d936 <HAL_RCC_ClockConfig+0x136>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
9000da16:	019f      	lsls	r7, r3, #6
9000da18:	f53f af6a 	bmi.w	9000d8f0 <HAL_RCC_ClockConfig+0xf0>
9000da1c:	e707      	b.n	9000d82e <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
9000da1e:	2001      	movs	r0, #1
}
9000da20:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
9000da22:	039b      	lsls	r3, r3, #14
9000da24:	f53f af64 	bmi.w	9000d8f0 <HAL_RCC_ClockConfig+0xf0>
9000da28:	e701      	b.n	9000d82e <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
9000da2a:	2003      	movs	r0, #3
9000da2c:	e700      	b.n	9000d830 <HAL_RCC_ClockConfig+0x30>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
9000da2e:	05de      	lsls	r6, r3, #23
9000da30:	f53f af5e 	bmi.w	9000d8f0 <HAL_RCC_ClockConfig+0xf0>
9000da34:	e6fb      	b.n	9000d82e <HAL_RCC_ClockConfig+0x2e>
9000da36:	bf00      	nop
9000da38:	52002000 	.word	0x52002000
9000da3c:	58024400 	.word	0x58024400
9000da40:	9002abc4 	.word	0x9002abc4
9000da44:	24000054 	.word	0x24000054
9000da48:	24000058 	.word	0x24000058
9000da4c:	24000060 	.word	0x24000060

9000da50 <HAL_RCC_GetHCLKFreq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000da50:	4a18      	ldr	r2, [pc, #96]	; (9000dab4 <HAL_RCC_GetHCLKFreq+0x64>)
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
9000da52:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000da54:	6913      	ldr	r3, [r2, #16]
9000da56:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000da5a:	2b10      	cmp	r3, #16
9000da5c:	d01a      	beq.n	9000da94 <HAL_RCC_GetHCLKFreq+0x44>
9000da5e:	2b18      	cmp	r3, #24
9000da60:	d023      	beq.n	9000daaa <HAL_RCC_GetHCLKFreq+0x5a>
9000da62:	b1cb      	cbz	r3, 9000da98 <HAL_RCC_GetHCLKFreq+0x48>
      sysclockfreq = CSI_VALUE;
9000da64:	4814      	ldr	r0, [pc, #80]	; (9000dab8 <HAL_RCC_GetHCLKFreq+0x68>)
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000da66:	4b13      	ldr	r3, [pc, #76]	; (9000dab4 <HAL_RCC_GetHCLKFreq+0x64>)
9000da68:	4914      	ldr	r1, [pc, #80]	; (9000dabc <HAL_RCC_GetHCLKFreq+0x6c>)
9000da6a:	699a      	ldr	r2, [r3, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000da6c:	699b      	ldr	r3, [r3, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000da6e:	f3c2 2203 	ubfx	r2, r2, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000da72:	4c13      	ldr	r4, [pc, #76]	; (9000dac0 <HAL_RCC_GetHCLKFreq+0x70>)
9000da74:	f003 030f 	and.w	r3, r3, #15
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
9000da78:	4d12      	ldr	r5, [pc, #72]	; (9000dac4 <HAL_RCC_GetHCLKFreq+0x74>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000da7a:	5c8a      	ldrb	r2, [r1, r2]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000da7c:	5ccb      	ldrb	r3, [r1, r3]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000da7e:	f002 021f 	and.w	r2, r2, #31
9000da82:	fa20 f202 	lsr.w	r2, r0, r2
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000da86:	f003 001f 	and.w	r0, r3, #31
9000da8a:	fa22 f000 	lsr.w	r0, r2, r0
  SystemCoreClock = common_system_clock;
9000da8e:	602a      	str	r2, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000da90:	6020      	str	r0, [r4, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
9000da92:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000da94:	480c      	ldr	r0, [pc, #48]	; (9000dac8 <HAL_RCC_GetHCLKFreq+0x78>)
9000da96:	e7e6      	b.n	9000da66 <HAL_RCC_GetHCLKFreq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000da98:	6813      	ldr	r3, [r2, #0]
9000da9a:	069b      	lsls	r3, r3, #26
9000da9c:	d508      	bpl.n	9000dab0 <HAL_RCC_GetHCLKFreq+0x60>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000da9e:	6812      	ldr	r2, [r2, #0]
9000daa0:	480a      	ldr	r0, [pc, #40]	; (9000dacc <HAL_RCC_GetHCLKFreq+0x7c>)
9000daa2:	f3c2 02c1 	ubfx	r2, r2, #3, #2
9000daa6:	40d0      	lsrs	r0, r2
9000daa8:	e7dd      	b.n	9000da66 <HAL_RCC_GetHCLKFreq+0x16>
9000daaa:	f7ff fa7d 	bl	9000cfa8 <HAL_RCC_GetSysClockFreq.part.0>
9000daae:	e7da      	b.n	9000da66 <HAL_RCC_GetHCLKFreq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000dab0:	4806      	ldr	r0, [pc, #24]	; (9000dacc <HAL_RCC_GetHCLKFreq+0x7c>)
9000dab2:	e7d8      	b.n	9000da66 <HAL_RCC_GetHCLKFreq+0x16>
9000dab4:	58024400 	.word	0x58024400
9000dab8:	003d0900 	.word	0x003d0900
9000dabc:	9002abc4 	.word	0x9002abc4
9000dac0:	24000058 	.word	0x24000058
9000dac4:	24000054 	.word	0x24000054
9000dac8:	017d7840 	.word	0x017d7840
9000dacc:	03d09000 	.word	0x03d09000

9000dad0 <HAL_RCC_GetPCLK1Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000dad0:	4a1c      	ldr	r2, [pc, #112]	; (9000db44 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
9000dad2:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000dad4:	6913      	ldr	r3, [r2, #16]
9000dad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000dada:	2b10      	cmp	r3, #16
9000dadc:	d021      	beq.n	9000db22 <HAL_RCC_GetPCLK1Freq+0x52>
9000dade:	2b18      	cmp	r3, #24
9000dae0:	d02b      	beq.n	9000db3a <HAL_RCC_GetPCLK1Freq+0x6a>
9000dae2:	b303      	cbz	r3, 9000db26 <HAL_RCC_GetPCLK1Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000dae4:	4818      	ldr	r0, [pc, #96]	; (9000db48 <HAL_RCC_GetPCLK1Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000dae6:	4a17      	ldr	r2, [pc, #92]	; (9000db44 <HAL_RCC_GetPCLK1Freq+0x74>)
9000dae8:	4918      	ldr	r1, [pc, #96]	; (9000db4c <HAL_RCC_GetPCLK1Freq+0x7c>)
9000daea:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000daec:	4d18      	ldr	r5, [pc, #96]	; (9000db50 <HAL_RCC_GetPCLK1Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000daee:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000daf2:	4c18      	ldr	r4, [pc, #96]	; (9000db54 <HAL_RCC_GetPCLK1Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000daf4:	5ccb      	ldrb	r3, [r1, r3]
9000daf6:	f003 031f 	and.w	r3, r3, #31
9000dafa:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000dafe:	6990      	ldr	r0, [r2, #24]
9000db00:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000db04:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000db06:	5c08      	ldrb	r0, [r1, r0]
9000db08:	f000 001f 	and.w	r0, r0, #31
9000db0c:	40c3      	lsrs	r3, r0
9000db0e:	6023      	str	r3, [r4, #0]
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
9000db10:	69d2      	ldr	r2, [r2, #28]
9000db12:	f3c2 1202 	ubfx	r2, r2, #4, #3
9000db16:	5c88      	ldrb	r0, [r1, r2]
9000db18:	f000 001f 	and.w	r0, r0, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
9000db1c:	fa23 f000 	lsr.w	r0, r3, r0
9000db20:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000db22:	480d      	ldr	r0, [pc, #52]	; (9000db58 <HAL_RCC_GetPCLK1Freq+0x88>)
9000db24:	e7df      	b.n	9000dae6 <HAL_RCC_GetPCLK1Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000db26:	6813      	ldr	r3, [r2, #0]
9000db28:	069b      	lsls	r3, r3, #26
9000db2a:	d509      	bpl.n	9000db40 <HAL_RCC_GetPCLK1Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000db2c:	6810      	ldr	r0, [r2, #0]
9000db2e:	4b0b      	ldr	r3, [pc, #44]	; (9000db5c <HAL_RCC_GetPCLK1Freq+0x8c>)
9000db30:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000db34:	fa23 f000 	lsr.w	r0, r3, r0
9000db38:	e7d5      	b.n	9000dae6 <HAL_RCC_GetPCLK1Freq+0x16>
9000db3a:	f7ff fa35 	bl	9000cfa8 <HAL_RCC_GetSysClockFreq.part.0>
9000db3e:	e7d2      	b.n	9000dae6 <HAL_RCC_GetPCLK1Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000db40:	4806      	ldr	r0, [pc, #24]	; (9000db5c <HAL_RCC_GetPCLK1Freq+0x8c>)
9000db42:	e7d0      	b.n	9000dae6 <HAL_RCC_GetPCLK1Freq+0x16>
9000db44:	58024400 	.word	0x58024400
9000db48:	003d0900 	.word	0x003d0900
9000db4c:	9002abc4 	.word	0x9002abc4
9000db50:	24000054 	.word	0x24000054
9000db54:	24000058 	.word	0x24000058
9000db58:	017d7840 	.word	0x017d7840
9000db5c:	03d09000 	.word	0x03d09000

9000db60 <HAL_RCC_GetPCLK2Freq>:
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000db60:	4a1c      	ldr	r2, [pc, #112]	; (9000dbd4 <HAL_RCC_GetPCLK2Freq+0x74>)
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
9000db62:	b538      	push	{r3, r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000db64:	6913      	ldr	r3, [r2, #16]
9000db66:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000db6a:	2b10      	cmp	r3, #16
9000db6c:	d021      	beq.n	9000dbb2 <HAL_RCC_GetPCLK2Freq+0x52>
9000db6e:	2b18      	cmp	r3, #24
9000db70:	d02b      	beq.n	9000dbca <HAL_RCC_GetPCLK2Freq+0x6a>
9000db72:	b303      	cbz	r3, 9000dbb6 <HAL_RCC_GetPCLK2Freq+0x56>
      sysclockfreq = CSI_VALUE;
9000db74:	4818      	ldr	r0, [pc, #96]	; (9000dbd8 <HAL_RCC_GetPCLK2Freq+0x78>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000db76:	4a17      	ldr	r2, [pc, #92]	; (9000dbd4 <HAL_RCC_GetPCLK2Freq+0x74>)
9000db78:	4918      	ldr	r1, [pc, #96]	; (9000dbdc <HAL_RCC_GetPCLK2Freq+0x7c>)
9000db7a:	6993      	ldr	r3, [r2, #24]
  SystemCoreClock = common_system_clock;
9000db7c:	4d18      	ldr	r5, [pc, #96]	; (9000dbe0 <HAL_RCC_GetPCLK2Freq+0x80>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000db7e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000db82:	4c18      	ldr	r4, [pc, #96]	; (9000dbe4 <HAL_RCC_GetPCLK2Freq+0x84>)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
9000db84:	5ccb      	ldrb	r3, [r1, r3]
9000db86:	f003 031f 	and.w	r3, r3, #31
9000db8a:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000db8e:	6990      	ldr	r0, [r2, #24]
9000db90:	f000 000f 	and.w	r0, r0, #15
  SystemCoreClock = common_system_clock;
9000db94:	602b      	str	r3, [r5, #0]
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
9000db96:	5c08      	ldrb	r0, [r1, r0]
9000db98:	f000 001f 	and.w	r0, r0, #31
9000db9c:	40c3      	lsrs	r3, r0
9000db9e:	6023      	str	r3, [r4, #0]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
9000dba0:	69d2      	ldr	r2, [r2, #28]
9000dba2:	f3c2 2202 	ubfx	r2, r2, #8, #3
9000dba6:	5c88      	ldrb	r0, [r1, r2]
9000dba8:	f000 001f 	and.w	r0, r0, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
9000dbac:	fa23 f000 	lsr.w	r0, r3, r0
9000dbb0:	bd38      	pop	{r3, r4, r5, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
9000dbb2:	480d      	ldr	r0, [pc, #52]	; (9000dbe8 <HAL_RCC_GetPCLK2Freq+0x88>)
9000dbb4:	e7df      	b.n	9000db76 <HAL_RCC_GetPCLK2Freq+0x16>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000dbb6:	6813      	ldr	r3, [r2, #0]
9000dbb8:	069b      	lsls	r3, r3, #26
9000dbba:	d509      	bpl.n	9000dbd0 <HAL_RCC_GetPCLK2Freq+0x70>
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000dbbc:	6810      	ldr	r0, [r2, #0]
9000dbbe:	4b0b      	ldr	r3, [pc, #44]	; (9000dbec <HAL_RCC_GetPCLK2Freq+0x8c>)
9000dbc0:	f3c0 00c1 	ubfx	r0, r0, #3, #2
9000dbc4:	fa23 f000 	lsr.w	r0, r3, r0
9000dbc8:	e7d5      	b.n	9000db76 <HAL_RCC_GetPCLK2Freq+0x16>
9000dbca:	f7ff f9ed 	bl	9000cfa8 <HAL_RCC_GetSysClockFreq.part.0>
9000dbce:	e7d2      	b.n	9000db76 <HAL_RCC_GetPCLK2Freq+0x16>
        sysclockfreq = (uint32_t) HSI_VALUE;
9000dbd0:	4806      	ldr	r0, [pc, #24]	; (9000dbec <HAL_RCC_GetPCLK2Freq+0x8c>)
9000dbd2:	e7d0      	b.n	9000db76 <HAL_RCC_GetPCLK2Freq+0x16>
9000dbd4:	58024400 	.word	0x58024400
9000dbd8:	003d0900 	.word	0x003d0900
9000dbdc:	9002abc4 	.word	0x9002abc4
9000dbe0:	24000054 	.word	0x24000054
9000dbe4:	24000058 	.word	0x24000058
9000dbe8:	017d7840 	.word	0x017d7840
9000dbec:	03d09000 	.word	0x03d09000

9000dbf0 <HAL_RCC_GetClockConfig>:
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000dbf0:	4b13      	ldr	r3, [pc, #76]	; (9000dc40 <HAL_RCC_GetClockConfig+0x50>)
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
9000dbf2:	223f      	movs	r2, #63	; 0x3f
9000dbf4:	6002      	str	r2, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
9000dbf6:	691a      	ldr	r2, [r3, #16]
9000dbf8:	f002 0207 	and.w	r2, r2, #7
9000dbfc:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
9000dbfe:	699a      	ldr	r2, [r3, #24]
9000dc00:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
9000dc04:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
9000dc06:	699a      	ldr	r2, [r3, #24]
9000dc08:	f002 020f 	and.w	r2, r2, #15
9000dc0c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
9000dc0e:	699a      	ldr	r2, [r3, #24]
9000dc10:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000dc14:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
9000dc16:	69da      	ldr	r2, [r3, #28]
9000dc18:	f002 0270 	and.w	r2, r2, #112	; 0x70
9000dc1c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
9000dc1e:	69da      	ldr	r2, [r3, #28]
9000dc20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
9000dc24:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000dc26:	6a1b      	ldr	r3, [r3, #32]
{
9000dc28:	b410      	push	{r4}
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000dc2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000dc2e:	4c05      	ldr	r4, [pc, #20]	; (9000dc44 <HAL_RCC_GetClockConfig+0x54>)
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
9000dc30:	61c3      	str	r3, [r0, #28]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000dc32:	6823      	ldr	r3, [r4, #0]
}
9000dc34:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
9000dc38:	f003 030f 	and.w	r3, r3, #15
9000dc3c:	600b      	str	r3, [r1, #0]
}
9000dc3e:	4770      	bx	lr
9000dc40:	58024400 	.word	0x58024400
9000dc44:	52002000 	.word	0x52002000

9000dc48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
9000dc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000dc4a:	4c3a      	ldr	r4, [pc, #232]	; (9000dd34 <RCCEx_PLL2_Config+0xec>)
9000dc4c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000dc4e:	f003 0303 	and.w	r3, r3, #3
9000dc52:	2b03      	cmp	r3, #3
9000dc54:	d067      	beq.n	9000dd26 <RCCEx_PLL2_Config+0xde>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
9000dc56:	6823      	ldr	r3, [r4, #0]
9000dc58:	4606      	mov	r6, r0
9000dc5a:	460f      	mov	r7, r1
9000dc5c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
9000dc60:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000dc62:	f7fb fe95 	bl	90009990 <HAL_GetTick>
9000dc66:	4605      	mov	r5, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000dc68:	e004      	b.n	9000dc74 <RCCEx_PLL2_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000dc6a:	f7fb fe91 	bl	90009990 <HAL_GetTick>
9000dc6e:	1b43      	subs	r3, r0, r5
9000dc70:	2b02      	cmp	r3, #2
9000dc72:	d856      	bhi.n	9000dd22 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
9000dc74:	6823      	ldr	r3, [r4, #0]
9000dc76:	011a      	lsls	r2, r3, #4
9000dc78:	d4f7      	bmi.n	9000dc6a <RCCEx_PLL2_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
9000dc7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000dc7c:	6832      	ldr	r2, [r6, #0]
9000dc7e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
9000dc82:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
9000dc86:	62a3      	str	r3, [r4, #40]	; 0x28
9000dc88:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000dc8c:	3b01      	subs	r3, #1
9000dc8e:	3a01      	subs	r2, #1
9000dc90:	025b      	lsls	r3, r3, #9
9000dc92:	0412      	lsls	r2, r2, #16
9000dc94:	b29b      	uxth	r3, r3
9000dc96:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000dc9a:	4313      	orrs	r3, r2
9000dc9c:	6872      	ldr	r2, [r6, #4]
9000dc9e:	3a01      	subs	r2, #1
9000dca0:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000dca4:	4313      	orrs	r3, r2
9000dca6:	6932      	ldr	r2, [r6, #16]
9000dca8:	3a01      	subs	r2, #1
9000dcaa:	0612      	lsls	r2, r2, #24
9000dcac:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000dcb0:	4313      	orrs	r3, r2
9000dcb2:	63a3      	str	r3, [r4, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
9000dcb4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000dcb6:	6972      	ldr	r2, [r6, #20]
9000dcb8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
9000dcbc:	4313      	orrs	r3, r2
9000dcbe:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000dcc0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000dcc2:	69b3      	ldr	r3, [r6, #24]
9000dcc4:	f022 0220 	bic.w	r2, r2, #32
9000dcc8:	431a      	orrs	r2, r3

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000dcca:	4b1b      	ldr	r3, [pc, #108]	; (9000dd38 <RCCEx_PLL2_Config+0xf0>)
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
9000dccc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_DISABLE();
9000dcce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000dcd0:	f022 0210 	bic.w	r2, r2, #16
9000dcd4:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
9000dcd6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
9000dcd8:	69f2      	ldr	r2, [r6, #28]
9000dcda:	400b      	ands	r3, r1
9000dcdc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000dce0:	63e3      	str	r3, [r4, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
9000dce2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000dce4:	f043 0310 	orr.w	r3, r3, #16
9000dce8:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000dcea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000dcec:	b1ef      	cbz	r7, 9000dd2a <RCCEx_PLL2_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000dcee:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
9000dcf0:	bf0c      	ite	eq
9000dcf2:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
9000dcf6:	f443 1300 	orrne.w	r3, r3, #2097152	; 0x200000
9000dcfa:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
9000dcfc:	4c0d      	ldr	r4, [pc, #52]	; (9000dd34 <RCCEx_PLL2_Config+0xec>)
9000dcfe:	6823      	ldr	r3, [r4, #0]
9000dd00:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
9000dd04:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000dd06:	f7fb fe43 	bl	90009990 <HAL_GetTick>
9000dd0a:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000dd0c:	e004      	b.n	9000dd18 <RCCEx_PLL2_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
9000dd0e:	f7fb fe3f 	bl	90009990 <HAL_GetTick>
9000dd12:	1b40      	subs	r0, r0, r5
9000dd14:	2802      	cmp	r0, #2
9000dd16:	d804      	bhi.n	9000dd22 <RCCEx_PLL2_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
9000dd18:	6823      	ldr	r3, [r4, #0]
9000dd1a:	011b      	lsls	r3, r3, #4
9000dd1c:	d5f7      	bpl.n	9000dd0e <RCCEx_PLL2_Config+0xc6>
    }

  }


  return status;
9000dd1e:	2000      	movs	r0, #0
}
9000dd20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000dd22:	2003      	movs	r0, #3
}
9000dd24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000dd26:	2001      	movs	r0, #1
}
9000dd28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
9000dd2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
9000dd2e:	62e3      	str	r3, [r4, #44]	; 0x2c
9000dd30:	e7e4      	b.n	9000dcfc <RCCEx_PLL2_Config+0xb4>
9000dd32:	bf00      	nop
9000dd34:	58024400 	.word	0x58024400
9000dd38:	ffff0007 	.word	0xffff0007

9000dd3c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
9000dd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
9000dd3e:	4c3a      	ldr	r4, [pc, #232]	; (9000de28 <RCCEx_PLL3_Config+0xec>)
9000dd40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000dd42:	f003 0303 	and.w	r3, r3, #3
9000dd46:	2b03      	cmp	r3, #3
9000dd48:	d067      	beq.n	9000de1a <RCCEx_PLL3_Config+0xde>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
9000dd4a:	6823      	ldr	r3, [r4, #0]
9000dd4c:	4606      	mov	r6, r0
9000dd4e:	460f      	mov	r7, r1
9000dd50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
9000dd54:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000dd56:	f7fb fe1b 	bl	90009990 <HAL_GetTick>
9000dd5a:	4605      	mov	r5, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000dd5c:	e004      	b.n	9000dd68 <RCCEx_PLL3_Config+0x2c>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000dd5e:	f7fb fe17 	bl	90009990 <HAL_GetTick>
9000dd62:	1b43      	subs	r3, r0, r5
9000dd64:	2b02      	cmp	r3, #2
9000dd66:	d856      	bhi.n	9000de16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
9000dd68:	6823      	ldr	r3, [r4, #0]
9000dd6a:	009a      	lsls	r2, r3, #2
9000dd6c:	d4f7      	bmi.n	9000dd5e <RCCEx_PLL3_Config+0x22>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
9000dd6e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
9000dd70:	6832      	ldr	r2, [r6, #0]
9000dd72:	f023 737c 	bic.w	r3, r3, #66060288	; 0x3f00000
9000dd76:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
9000dd7a:	62a3      	str	r3, [r4, #40]	; 0x28
9000dd7c:	e9d6 3202 	ldrd	r3, r2, [r6, #8]
9000dd80:	3b01      	subs	r3, #1
9000dd82:	3a01      	subs	r2, #1
9000dd84:	025b      	lsls	r3, r3, #9
9000dd86:	0412      	lsls	r2, r2, #16
9000dd88:	b29b      	uxth	r3, r3
9000dd8a:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
9000dd8e:	4313      	orrs	r3, r2
9000dd90:	6872      	ldr	r2, [r6, #4]
9000dd92:	3a01      	subs	r2, #1
9000dd94:	f3c2 0208 	ubfx	r2, r2, #0, #9
9000dd98:	4313      	orrs	r3, r2
9000dd9a:	6932      	ldr	r2, [r6, #16]
9000dd9c:	3a01      	subs	r2, #1
9000dd9e:	0612      	lsls	r2, r2, #24
9000dda0:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
9000dda4:	4313      	orrs	r3, r2
9000dda6:	6423      	str	r3, [r4, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
9000dda8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ddaa:	6972      	ldr	r2, [r6, #20]
9000ddac:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
9000ddb0:	4313      	orrs	r3, r2
9000ddb2:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ddb4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ddb6:	69b3      	ldr	r3, [r6, #24]
9000ddb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
9000ddbc:	431a      	orrs	r2, r3

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ddbe:	4b1b      	ldr	r3, [pc, #108]	; (9000de2c <RCCEx_PLL3_Config+0xf0>)
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
9000ddc0:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_DISABLE();
9000ddc2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9000ddc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
9000ddc8:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
9000ddca:	6c61      	ldr	r1, [r4, #68]	; 0x44
9000ddcc:	69f2      	ldr	r2, [r6, #28]
9000ddce:	400b      	ands	r3, r1
9000ddd0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9000ddd4:	6463      	str	r3, [r4, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
9000ddd6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
9000ddd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000dddc:	62e3      	str	r3, [r4, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000ddde:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    if (Divider == DIVIDER_P_UPDATE)
9000dde0:	b1ef      	cbz	r7, 9000de1e <RCCEx_PLL3_Config+0xe2>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
9000dde2:	2f01      	cmp	r7, #1
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
9000dde4:	bf0c      	ite	eq
9000dde6:	f443 0300 	orreq.w	r3, r3, #8388608	; 0x800000
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
9000ddea:	f043 7380 	orrne.w	r3, r3, #16777216	; 0x1000000
9000ddee:	62e3      	str	r3, [r4, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
9000ddf0:	4c0d      	ldr	r4, [pc, #52]	; (9000de28 <RCCEx_PLL3_Config+0xec>)
9000ddf2:	6823      	ldr	r3, [r4, #0]
9000ddf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
9000ddf8:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
9000ddfa:	f7fb fdc9 	bl	90009990 <HAL_GetTick>
9000ddfe:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000de00:	e004      	b.n	9000de0c <RCCEx_PLL3_Config+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
9000de02:	f7fb fdc5 	bl	90009990 <HAL_GetTick>
9000de06:	1b40      	subs	r0, r0, r5
9000de08:	2802      	cmp	r0, #2
9000de0a:	d804      	bhi.n	9000de16 <RCCEx_PLL3_Config+0xda>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
9000de0c:	6823      	ldr	r3, [r4, #0]
9000de0e:	009b      	lsls	r3, r3, #2
9000de10:	d5f7      	bpl.n	9000de02 <RCCEx_PLL3_Config+0xc6>
    }

  }


  return status;
9000de12:	2000      	movs	r0, #0
}
9000de14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
9000de16:	2003      	movs	r0, #3
}
9000de18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
9000de1a:	2001      	movs	r0, #1
}
9000de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
9000de1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
9000de22:	62e3      	str	r3, [r4, #44]	; 0x2c
9000de24:	e7e4      	b.n	9000ddf0 <RCCEx_PLL3_Config+0xb4>
9000de26:	bf00      	nop
9000de28:	58024400 	.word	0x58024400
9000de2c:	ffff0007 	.word	0xffff0007

9000de30 <HAL_RCCEx_PeriphCLKConfig>:
{
9000de30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000de34:	e9d0 3200 	ldrd	r3, r2, [r0]
{
9000de38:	4604      	mov	r4, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
9000de3a:	011d      	lsls	r5, r3, #4
9000de3c:	f003 6600 	and.w	r6, r3, #134217728	; 0x8000000
9000de40:	d523      	bpl.n	9000de8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000de42:	6e81      	ldr	r1, [r0, #104]	; 0x68
9000de44:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000de48:	f000 854f 	beq.w	9000e8ea <HAL_RCCEx_PeriphCLKConfig+0xaba>
9000de4c:	d812      	bhi.n	9000de74 <HAL_RCCEx_PeriphCLKConfig+0x44>
9000de4e:	2900      	cmp	r1, #0
9000de50:	f000 85a5 	beq.w	9000e99e <HAL_RCCEx_PeriphCLKConfig+0xb6e>
9000de54:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000de58:	f040 859e 	bne.w	9000e998 <HAL_RCCEx_PeriphCLKConfig+0xb68>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000de5c:	2102      	movs	r1, #2
9000de5e:	3008      	adds	r0, #8
9000de60:	f7ff fef2 	bl	9000dc48 <RCCEx_PLL2_Config>
9000de64:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000de66:	2e00      	cmp	r6, #0
9000de68:	f040 851e 	bne.w	9000e8a8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000de6c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000de6e:	e9d4 3200 	ldrd	r3, r2, [r4]
9000de72:	e003      	b.n	9000de7c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000de74:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000de78:	f040 858e 	bne.w	9000e998 <HAL_RCCEx_PeriphCLKConfig+0xb68>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
9000de7c:	4dae      	ldr	r5, [pc, #696]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000de7e:	2600      	movs	r6, #0
9000de80:	6d28      	ldr	r0, [r5, #80]	; 0x50
9000de82:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
9000de86:	4301      	orrs	r1, r0
9000de88:	6529      	str	r1, [r5, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000de8a:	05d8      	lsls	r0, r3, #23
9000de8c:	d50a      	bpl.n	9000dea4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    switch (PeriphClkInit->Sai1ClockSelection)
9000de8e:	6da1      	ldr	r1, [r4, #88]	; 0x58
9000de90:	2904      	cmp	r1, #4
9000de92:	d806      	bhi.n	9000dea2 <HAL_RCCEx_PeriphCLKConfig+0x72>
9000de94:	e8df f011 	tbh	[pc, r1, lsl #1]
9000de98:	05390532 	.word	0x05390532
9000de9c:	03100516 	.word	0x03100516
9000dea0:	0310      	.short	0x0310
9000dea2:	2601      	movs	r6, #1
9000dea4:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000dea6:	0599      	lsls	r1, r3, #22
9000dea8:	d51d      	bpl.n	9000dee6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai23ClockSelection)
9000deaa:	6de1      	ldr	r1, [r4, #92]	; 0x5c
9000deac:	2980      	cmp	r1, #128	; 0x80
9000deae:	f000 8512 	beq.w	9000e8d6 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
9000deb2:	f200 80f9 	bhi.w	9000e0a8 <HAL_RCCEx_PeriphCLKConfig+0x278>
9000deb6:	2900      	cmp	r1, #0
9000deb8:	f000 8420 	beq.w	9000e6fc <HAL_RCCEx_PeriphCLKConfig+0x8cc>
9000debc:	2940      	cmp	r1, #64	; 0x40
9000debe:	f040 80fa 	bne.w	9000e0b6 <HAL_RCCEx_PeriphCLKConfig+0x286>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dec2:	2100      	movs	r1, #0
9000dec4:	f104 0008 	add.w	r0, r4, #8
9000dec8:	f7ff febe 	bl	9000dc48 <RCCEx_PLL2_Config>
9000decc:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000dece:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000ded2:	2d00      	cmp	r5, #0
9000ded4:	f040 83eb 	bne.w	9000e6ae <HAL_RCCEx_PeriphCLKConfig+0x87e>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
9000ded8:	4f97      	ldr	r7, [pc, #604]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000deda:	6de0      	ldr	r0, [r4, #92]	; 0x5c
9000dedc:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000dede:	f421 71e0 	bic.w	r1, r1, #448	; 0x1c0
9000dee2:	4301      	orrs	r1, r0
9000dee4:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000dee6:	055f      	lsls	r7, r3, #21
9000dee8:	d521      	bpl.n	9000df2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4AClockSelection)
9000deea:	f8d4 10a8 	ldr.w	r1, [r4, #168]	; 0xa8
9000deee:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
9000def2:	f000 851d 	beq.w	9000e930 <HAL_RCCEx_PeriphCLKConfig+0xb00>
9000def6:	f200 80e1 	bhi.w	9000e0bc <HAL_RCCEx_PeriphCLKConfig+0x28c>
9000defa:	2900      	cmp	r1, #0
9000defc:	f000 8405 	beq.w	9000e70a <HAL_RCCEx_PeriphCLKConfig+0x8da>
9000df00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000df04:	f040 80e2 	bne.w	9000e0cc <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000df08:	2100      	movs	r1, #0
9000df0a:	f104 0008 	add.w	r0, r4, #8
9000df0e:	f7ff fe9b 	bl	9000dc48 <RCCEx_PLL2_Config>
9000df12:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000df14:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000df18:	2d00      	cmp	r5, #0
9000df1a:	f040 83cf 	bne.w	9000e6bc <HAL_RCCEx_PeriphCLKConfig+0x88c>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
9000df1e:	4f86      	ldr	r7, [pc, #536]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000df20:	f8d4 00a8 	ldr.w	r0, [r4, #168]	; 0xa8
9000df24:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000df26:	f421 0160 	bic.w	r1, r1, #14680064	; 0xe00000
9000df2a:	4301      	orrs	r1, r0
9000df2c:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000df2e:	0518      	lsls	r0, r3, #20
9000df30:	d521      	bpl.n	9000df76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->Sai4BClockSelection)
9000df32:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
9000df36:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
9000df3a:	f000 84b9 	beq.w	9000e8b0 <HAL_RCCEx_PeriphCLKConfig+0xa80>
9000df3e:	f200 80c8 	bhi.w	9000e0d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
9000df42:	2900      	cmp	r1, #0
9000df44:	f000 83d4 	beq.w	9000e6f0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
9000df48:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
9000df4c:	f040 80c9 	bne.w	9000e0e2 <HAL_RCCEx_PeriphCLKConfig+0x2b2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000df50:	2100      	movs	r1, #0
9000df52:	f104 0008 	add.w	r0, r4, #8
9000df56:	f7ff fe77 	bl	9000dc48 <RCCEx_PLL2_Config>
9000df5a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000df5c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000df60:	2d00      	cmp	r5, #0
9000df62:	f040 83a2 	bne.w	9000e6aa <HAL_RCCEx_PeriphCLKConfig+0x87a>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
9000df66:	4f74      	ldr	r7, [pc, #464]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000df68:	f8d4 00ac 	ldr.w	r0, [r4, #172]	; 0xac
9000df6c:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000df6e:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
9000df72:	4301      	orrs	r1, r0
9000df74:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000df76:	0199      	lsls	r1, r3, #6
9000df78:	d518      	bpl.n	9000dfac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->QspiClockSelection)
9000df7a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
9000df7c:	2920      	cmp	r1, #32
9000df7e:	f000 841e 	beq.w	9000e7be <HAL_RCCEx_PeriphCLKConfig+0x98e>
9000df82:	f200 80b1 	bhi.w	9000e0e8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
9000df86:	b139      	cbz	r1, 9000df98 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000df88:	2910      	cmp	r1, #16
9000df8a:	f040 80b0 	bne.w	9000e0ee <HAL_RCCEx_PeriphCLKConfig+0x2be>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000df8e:	486a      	ldr	r0, [pc, #424]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000df90:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000df92:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000df96:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000df98:	2d00      	cmp	r5, #0
9000df9a:	f040 83d3 	bne.w	9000e744 <HAL_RCCEx_PeriphCLKConfig+0x914>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
9000df9e:	4f66      	ldr	r7, [pc, #408]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000dfa0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
9000dfa2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000dfa4:	f021 0130 	bic.w	r1, r1, #48	; 0x30
9000dfa8:	4301      	orrs	r1, r0
9000dfaa:	64f9      	str	r1, [r7, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000dfac:	04df      	lsls	r7, r3, #19
9000dfae:	d51f      	bpl.n	9000dff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi123ClockSelection)
9000dfb0:	6e21      	ldr	r1, [r4, #96]	; 0x60
9000dfb2:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000dfb6:	f000 84b1 	beq.w	9000e91c <HAL_RCCEx_PeriphCLKConfig+0xaec>
9000dfba:	f200 809b 	bhi.w	9000e0f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
9000dfbe:	2900      	cmp	r1, #0
9000dfc0:	f000 8390 	beq.w	9000e6e4 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
9000dfc4:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
9000dfc8:	f040 809c 	bne.w	9000e104 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000dfcc:	2100      	movs	r1, #0
9000dfce:	f104 0008 	add.w	r0, r4, #8
9000dfd2:	f7ff fe39 	bl	9000dc48 <RCCEx_PLL2_Config>
9000dfd6:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000dfd8:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000dfdc:	2d00      	cmp	r5, #0
9000dfde:	f040 8368 	bne.w	9000e6b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
9000dfe2:	4f55      	ldr	r7, [pc, #340]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000dfe4:	6e20      	ldr	r0, [r4, #96]	; 0x60
9000dfe6:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000dfe8:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
9000dfec:	4301      	orrs	r1, r0
9000dfee:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000dff0:	0498      	lsls	r0, r3, #18
9000dff2:	d51d      	bpl.n	9000e030 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi45ClockSelection)
9000dff4:	6e61      	ldr	r1, [r4, #100]	; 0x64
9000dff6:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000dffa:	f000 840f 	beq.w	9000e81c <HAL_RCCEx_PeriphCLKConfig+0x9ec>
9000dffe:	f200 8084 	bhi.w	9000e10a <HAL_RCCEx_PeriphCLKConfig+0x2da>
9000e002:	b159      	cbz	r1, 9000e01c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000e004:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000e008:	f040 8087 	bne.w	9000e11a <HAL_RCCEx_PeriphCLKConfig+0x2ea>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e00c:	2101      	movs	r1, #1
9000e00e:	f104 0008 	add.w	r0, r4, #8
9000e012:	f7ff fe19 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e016:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000e018:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e01c:	2d00      	cmp	r5, #0
9000e01e:	f040 839b 	bne.w	9000e758 <HAL_RCCEx_PeriphCLKConfig+0x928>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
9000e022:	4f45      	ldr	r7, [pc, #276]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000e024:	6e60      	ldr	r0, [r4, #100]	; 0x64
9000e026:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000e028:	f421 21e0 	bic.w	r1, r1, #458752	; 0x70000
9000e02c:	4301      	orrs	r1, r0
9000e02e:	6539      	str	r1, [r7, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000e030:	0459      	lsls	r1, r3, #17
9000e032:	d51d      	bpl.n	9000e070 <HAL_RCCEx_PeriphCLKConfig+0x240>
    switch (PeriphClkInit->Spi6ClockSelection)
9000e034:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
9000e038:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000e03c:	f000 83fa 	beq.w	9000e834 <HAL_RCCEx_PeriphCLKConfig+0xa04>
9000e040:	d86e      	bhi.n	9000e120 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
9000e042:	b151      	cbz	r1, 9000e05a <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000e044:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000e048:	d172      	bne.n	9000e130 <HAL_RCCEx_PeriphCLKConfig+0x300>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e04a:	2101      	movs	r1, #1
9000e04c:	f104 0008 	add.w	r0, r4, #8
9000e050:	f7ff fdfa 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e054:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000e056:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e05a:	2d00      	cmp	r5, #0
9000e05c:	f040 8380 	bne.w	9000e760 <HAL_RCCEx_PeriphCLKConfig+0x930>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
9000e060:	4f35      	ldr	r7, [pc, #212]	; (9000e138 <HAL_RCCEx_PeriphCLKConfig+0x308>)
9000e062:	f8d4 00b0 	ldr.w	r0, [r4, #176]	; 0xb0
9000e066:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e068:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000e06c:	4301      	orrs	r1, r0
9000e06e:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000e070:	041f      	lsls	r7, r3, #16
9000e072:	d50d      	bpl.n	9000e090 <HAL_RCCEx_PeriphCLKConfig+0x260>
    switch (PeriphClkInit->FdcanClockSelection)
9000e074:	6f21      	ldr	r1, [r4, #112]	; 0x70
9000e076:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000e07a:	f000 83c7 	beq.w	9000e80c <HAL_RCCEx_PeriphCLKConfig+0x9dc>
9000e07e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000e082:	f000 8225 	beq.w	9000e4d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
9000e086:	2900      	cmp	r1, #0
9000e088:	f000 822a 	beq.w	9000e4e0 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
9000e08c:	2601      	movs	r6, #1
9000e08e:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000e090:	01d8      	lsls	r0, r3, #7
9000e092:	d55f      	bpl.n	9000e154 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->FmcClockSelection)
9000e094:	6ca1      	ldr	r1, [r4, #72]	; 0x48
9000e096:	2903      	cmp	r1, #3
9000e098:	f200 84bb 	bhi.w	9000ea12 <HAL_RCCEx_PeriphCLKConfig+0xbe2>
9000e09c:	e8df f011 	tbh	[pc, r1, lsl #1]
9000e0a0:	03e10056 	.word	0x03e10056
9000e0a4:	0056004e 	.word	0x0056004e
    switch (PeriphClkInit->Sai23ClockSelection)
9000e0a8:	29c0      	cmp	r1, #192	; 0xc0
9000e0aa:	f43f af12 	beq.w	9000ded2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000e0ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000e0b2:	f43f af0e 	beq.w	9000ded2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
9000e0b6:	2601      	movs	r6, #1
9000e0b8:	4635      	mov	r5, r6
9000e0ba:	e714      	b.n	9000dee6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
    switch (PeriphClkInit->Sai4AClockSelection)
9000e0bc:	f5b1 0fc0 	cmp.w	r1, #6291456	; 0x600000
9000e0c0:	f43f af2a 	beq.w	9000df18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000e0c4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
9000e0c8:	f43f af26 	beq.w	9000df18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000e0cc:	2601      	movs	r6, #1
9000e0ce:	4635      	mov	r5, r6
9000e0d0:	e72d      	b.n	9000df2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
    switch (PeriphClkInit->Sai4BClockSelection)
9000e0d2:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
9000e0d6:	f43f af43 	beq.w	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000e0da:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
9000e0de:	f43f af3f 	beq.w	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x130>
9000e0e2:	2601      	movs	r6, #1
9000e0e4:	4635      	mov	r5, r6
9000e0e6:	e746      	b.n	9000df76 <HAL_RCCEx_PeriphCLKConfig+0x146>
    switch (PeriphClkInit->QspiClockSelection)
9000e0e8:	2930      	cmp	r1, #48	; 0x30
9000e0ea:	f43f af55 	beq.w	9000df98 <HAL_RCCEx_PeriphCLKConfig+0x168>
9000e0ee:	2601      	movs	r6, #1
9000e0f0:	4635      	mov	r5, r6
9000e0f2:	e75b      	b.n	9000dfac <HAL_RCCEx_PeriphCLKConfig+0x17c>
    switch (PeriphClkInit->Spi123ClockSelection)
9000e0f4:	f5b1 5f40 	cmp.w	r1, #12288	; 0x3000
9000e0f8:	f43f af70 	beq.w	9000dfdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000e0fc:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000e100:	f43f af6c 	beq.w	9000dfdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
9000e104:	2601      	movs	r6, #1
9000e106:	4635      	mov	r5, r6
9000e108:	e772      	b.n	9000dff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    switch (PeriphClkInit->Spi45ClockSelection)
9000e10a:	f421 3080 	bic.w	r0, r1, #65536	; 0x10000
9000e10e:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
9000e112:	d083      	beq.n	9000e01c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000e114:	f5b1 3f40 	cmp.w	r1, #196608	; 0x30000
9000e118:	d080      	beq.n	9000e01c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
9000e11a:	2601      	movs	r6, #1
9000e11c:	4635      	mov	r5, r6
9000e11e:	e787      	b.n	9000e030 <HAL_RCCEx_PeriphCLKConfig+0x200>
    switch (PeriphClkInit->Spi6ClockSelection)
9000e120:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000e124:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000e128:	d097      	beq.n	9000e05a <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000e12a:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000e12e:	d094      	beq.n	9000e05a <HAL_RCCEx_PeriphCLKConfig+0x22a>
9000e130:	2601      	movs	r6, #1
9000e132:	4635      	mov	r5, r6
9000e134:	e79c      	b.n	9000e070 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000e136:	bf00      	nop
9000e138:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e13c:	2102      	movs	r1, #2
9000e13e:	f104 0008 	add.w	r0, r4, #8
9000e142:	f7ff fd81 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e146:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000e148:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e14c:	2d00      	cmp	r5, #0
9000e14e:	f000 82fb 	beq.w	9000e748 <HAL_RCCEx_PeriphCLKConfig+0x918>
9000e152:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
9000e154:	0259      	lsls	r1, r3, #9
9000e156:	f100 825a 	bmi.w	9000e60e <HAL_RCCEx_PeriphCLKConfig+0x7de>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e15a:	07d8      	lsls	r0, r3, #31
9000e15c:	d52f      	bpl.n	9000e1be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    switch (PeriphClkInit->Usart16ClockSelection)
9000e15e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
9000e160:	2928      	cmp	r1, #40	; 0x28
9000e162:	d82a      	bhi.n	9000e1ba <HAL_RCCEx_PeriphCLKConfig+0x38a>
9000e164:	e8df f011 	tbh	[pc, r1, lsl #1]
9000e168:	002901fa 	.word	0x002901fa
9000e16c:	00290029 	.word	0x00290029
9000e170:	00290029 	.word	0x00290029
9000e174:	00290029 	.word	0x00290029
9000e178:	00290406 	.word	0x00290406
9000e17c:	00290029 	.word	0x00290029
9000e180:	00290029 	.word	0x00290029
9000e184:	00290029 	.word	0x00290029
9000e188:	002901f2 	.word	0x002901f2
9000e18c:	00290029 	.word	0x00290029
9000e190:	00290029 	.word	0x00290029
9000e194:	00290029 	.word	0x00290029
9000e198:	002901fa 	.word	0x002901fa
9000e19c:	00290029 	.word	0x00290029
9000e1a0:	00290029 	.word	0x00290029
9000e1a4:	00290029 	.word	0x00290029
9000e1a8:	002901fa 	.word	0x002901fa
9000e1ac:	00290029 	.word	0x00290029
9000e1b0:	00290029 	.word	0x00290029
9000e1b4:	00290029 	.word	0x00290029
9000e1b8:	01fa      	.short	0x01fa
9000e1ba:	2601      	movs	r6, #1
9000e1bc:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e1be:	0799      	lsls	r1, r3, #30
9000e1c0:	d517      	bpl.n	9000e1f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000e1c2:	6fa1      	ldr	r1, [r4, #120]	; 0x78
9000e1c4:	2905      	cmp	r1, #5
9000e1c6:	f200 8420 	bhi.w	9000ea0a <HAL_RCCEx_PeriphCLKConfig+0xbda>
9000e1ca:	e8df f011 	tbh	[pc, r1, lsl #1]
9000e1ce:	000e      	.short	0x000e
9000e1d0:	000603bb 	.word	0x000603bb
9000e1d4:	000e000e 	.word	0x000e000e
9000e1d8:	000e      	.short	0x000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e1da:	2101      	movs	r1, #1
9000e1dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e1e0:	f7ff fdac 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e1e4:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000e1e6:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e1ea:	2d00      	cmp	r5, #0
9000e1ec:	f000 8299 	beq.w	9000e722 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
9000e1f0:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000e1f2:	075f      	lsls	r7, r3, #29
9000e1f4:	d518      	bpl.n	9000e228 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000e1f6:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
9000e1fa:	2905      	cmp	r1, #5
9000e1fc:	f200 840d 	bhi.w	9000ea1a <HAL_RCCEx_PeriphCLKConfig+0xbea>
9000e200:	e8df f011 	tbh	[pc, r1, lsl #1]
9000e204:	03ac000e 	.word	0x03ac000e
9000e208:	000e0006 	.word	0x000e0006
9000e20c:	000e000e 	.word	0x000e000e
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e210:	2101      	movs	r1, #1
9000e212:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e216:	f7ff fd91 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e21a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000e21c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e220:	2d00      	cmp	r5, #0
9000e222:	f000 8286 	beq.w	9000e732 <HAL_RCCEx_PeriphCLKConfig+0x902>
9000e226:	462e      	mov	r6, r5
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000e228:	0698      	lsls	r0, r3, #26
9000e22a:	d51f      	bpl.n	9000e26c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim1ClockSelection)
9000e22c:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
9000e230:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
9000e234:	f000 8309 	beq.w	9000e84a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
9000e238:	f200 810b 	bhi.w	9000e452 <HAL_RCCEx_PeriphCLKConfig+0x622>
9000e23c:	b159      	cbz	r1, 9000e256 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000e23e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
9000e242:	f040 8110 	bne.w	9000e466 <HAL_RCCEx_PeriphCLKConfig+0x636>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e246:	2100      	movs	r1, #0
9000e248:	f104 0008 	add.w	r0, r4, #8
9000e24c:	f7ff fcfc 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e250:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000e252:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e256:	2d00      	cmp	r5, #0
9000e258:	f040 825f 	bne.w	9000e71a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
9000e25c:	4fa6      	ldr	r7, [pc, #664]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e25e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000e262:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e264:	f021 41e0 	bic.w	r1, r1, #1879048192	; 0x70000000
9000e268:	4301      	orrs	r1, r0
9000e26a:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000e26c:	0659      	lsls	r1, r3, #25
9000e26e:	d51f      	bpl.n	9000e2b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000e270:	f8d4 109c 	ldr.w	r1, [r4, #156]	; 0x9c
9000e274:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
9000e278:	f000 82b2 	beq.w	9000e7e0 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
9000e27c:	f200 80f6 	bhi.w	9000e46c <HAL_RCCEx_PeriphCLKConfig+0x63c>
9000e280:	b159      	cbz	r1, 9000e29a <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000e282:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
9000e286:	f040 80fb 	bne.w	9000e480 <HAL_RCCEx_PeriphCLKConfig+0x650>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e28a:	2100      	movs	r1, #0
9000e28c:	f104 0008 	add.w	r0, r4, #8
9000e290:	f7ff fcda 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e294:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000e296:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e29a:	2d00      	cmp	r5, #0
9000e29c:	f040 8262 	bne.w	9000e764 <HAL_RCCEx_PeriphCLKConfig+0x934>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
9000e2a0:	4f95      	ldr	r7, [pc, #596]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e2a2:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
9000e2a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e2a8:	f421 51e0 	bic.w	r1, r1, #7168	; 0x1c00
9000e2ac:	4301      	orrs	r1, r0
9000e2ae:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000e2b0:	061f      	lsls	r7, r3, #24
9000e2b2:	d51f      	bpl.n	9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000e2b4:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
9000e2b8:	f5b1 4f80 	cmp.w	r1, #16384	; 0x4000
9000e2bc:	f000 829b 	beq.w	9000e7f6 <HAL_RCCEx_PeriphCLKConfig+0x9c6>
9000e2c0:	f200 80e1 	bhi.w	9000e486 <HAL_RCCEx_PeriphCLKConfig+0x656>
9000e2c4:	b159      	cbz	r1, 9000e2de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000e2c6:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
9000e2ca:	f040 80e6 	bne.w	9000e49a <HAL_RCCEx_PeriphCLKConfig+0x66a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e2ce:	2100      	movs	r1, #0
9000e2d0:	f104 0008 	add.w	r0, r4, #8
9000e2d4:	f7ff fcb8 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e2d8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000e2da:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e2de:	2d00      	cmp	r5, #0
9000e2e0:	f040 823c 	bne.w	9000e75c <HAL_RCCEx_PeriphCLKConfig+0x92c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
9000e2e4:	4f84      	ldr	r7, [pc, #528]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e2e6:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
9000e2ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e2ec:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
9000e2f0:	4301      	orrs	r1, r0
9000e2f2:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000e2f4:	0718      	lsls	r0, r3, #28
9000e2f6:	d50b      	bpl.n	9000e310 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
9000e2f8:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
9000e2fc:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000e300:	f000 82b8 	beq.w	9000e874 <HAL_RCCEx_PeriphCLKConfig+0xa44>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e304:	4f7c      	ldr	r7, [pc, #496]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e306:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e308:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
9000e30c:	4301      	orrs	r1, r0
9000e30e:	6579      	str	r1, [r7, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e310:	06d9      	lsls	r1, r3, #27
9000e312:	d50b      	bpl.n	9000e32c <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
9000e314:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
9000e318:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
9000e31c:	f000 82b7 	beq.w	9000e88e <HAL_RCCEx_PeriphCLKConfig+0xa5e>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e320:	4f75      	ldr	r7, [pc, #468]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e322:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e324:	f421 7140 	bic.w	r1, r1, #768	; 0x300
9000e328:	4301      	orrs	r1, r0
9000e32a:	65b9      	str	r1, [r7, #88]	; 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e32c:	031f      	lsls	r7, r3, #12
9000e32e:	d50e      	bpl.n	9000e34e <HAL_RCCEx_PeriphCLKConfig+0x51e>
    switch (PeriphClkInit->AdcClockSelection)
9000e330:	f8d4 10a4 	ldr.w	r1, [r4, #164]	; 0xa4
9000e334:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000e338:	f000 80f4 	beq.w	9000e524 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
9000e33c:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
9000e340:	f000 80f8 	beq.w	9000e534 <HAL_RCCEx_PeriphCLKConfig+0x704>
9000e344:	2900      	cmp	r1, #0
9000e346:	f000 822e 	beq.w	9000e7a6 <HAL_RCCEx_PeriphCLKConfig+0x976>
9000e34a:	2601      	movs	r6, #1
9000e34c:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e34e:	0358      	lsls	r0, r3, #13
9000e350:	d50f      	bpl.n	9000e372 <HAL_RCCEx_PeriphCLKConfig+0x542>
    switch (PeriphClkInit->UsbClockSelection)
9000e352:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
9000e356:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
9000e35a:	f000 80cf 	beq.w	9000e4fc <HAL_RCCEx_PeriphCLKConfig+0x6cc>
9000e35e:	f5b1 1f40 	cmp.w	r1, #3145728	; 0x300000
9000e362:	f000 80d3 	beq.w	9000e50c <HAL_RCCEx_PeriphCLKConfig+0x6dc>
9000e366:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
9000e36a:	f000 8214 	beq.w	9000e796 <HAL_RCCEx_PeriphCLKConfig+0x966>
9000e36e:	2601      	movs	r6, #1
9000e370:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000e372:	03d9      	lsls	r1, r3, #15
9000e374:	d509      	bpl.n	9000e38a <HAL_RCCEx_PeriphCLKConfig+0x55a>
    switch (PeriphClkInit->SdmmcClockSelection)
9000e376:	6d21      	ldr	r1, [r4, #80]	; 0x50
9000e378:	2900      	cmp	r1, #0
9000e37a:	f000 8203 	beq.w	9000e784 <HAL_RCCEx_PeriphCLKConfig+0x954>
9000e37e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
9000e382:	f000 819d 	beq.w	9000e6c0 <HAL_RCCEx_PeriphCLKConfig+0x890>
9000e386:	2601      	movs	r6, #1
9000e388:	4635      	mov	r5, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000e38a:	009f      	lsls	r7, r3, #2
9000e38c:	f100 80f1 	bmi.w	9000e572 <HAL_RCCEx_PeriphCLKConfig+0x742>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000e390:	0398      	lsls	r0, r3, #14
9000e392:	d50c      	bpl.n	9000e3ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->RngClockSelection)
9000e394:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
9000e398:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
9000e39c:	f000 81ea 	beq.w	9000e774 <HAL_RCCEx_PeriphCLKConfig+0x944>
9000e3a0:	d97e      	bls.n	9000e4a0 <HAL_RCCEx_PeriphCLKConfig+0x670>
9000e3a2:	f421 7080 	bic.w	r0, r1, #256	; 0x100
9000e3a6:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
9000e3aa:	d07b      	beq.n	9000e4a4 <HAL_RCCEx_PeriphCLKConfig+0x674>
9000e3ac:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
9000e3ae:	02d9      	lsls	r1, r3, #11
9000e3b0:	d506      	bpl.n	9000e3c0 <HAL_RCCEx_PeriphCLKConfig+0x590>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
9000e3b2:	4851      	ldr	r0, [pc, #324]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e3b4:	6f65      	ldr	r5, [r4, #116]	; 0x74
9000e3b6:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000e3b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
9000e3bc:	4329      	orrs	r1, r5
9000e3be:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
9000e3c0:	00df      	lsls	r7, r3, #3
9000e3c2:	d507      	bpl.n	9000e3d4 <HAL_RCCEx_PeriphCLKConfig+0x5a4>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
9000e3c4:	484c      	ldr	r0, [pc, #304]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e3c6:	f8d4 50b8 	ldr.w	r5, [r4, #184]	; 0xb8
9000e3ca:	6901      	ldr	r1, [r0, #16]
9000e3cc:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
9000e3d0:	4329      	orrs	r1, r5
9000e3d2:	6101      	str	r1, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
9000e3d4:	029d      	lsls	r5, r3, #10
9000e3d6:	d506      	bpl.n	9000e3e6 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
9000e3d8:	4847      	ldr	r0, [pc, #284]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e3da:	6ee5      	ldr	r5, [r4, #108]	; 0x6c
9000e3dc:	6d01      	ldr	r1, [r0, #80]	; 0x50
9000e3de:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
9000e3e2:	4329      	orrs	r1, r5
9000e3e4:	6501      	str	r1, [r0, #80]	; 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
9000e3e6:	0058      	lsls	r0, r3, #1
9000e3e8:	d509      	bpl.n	9000e3fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
9000e3ea:	4943      	ldr	r1, [pc, #268]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e3ec:	6908      	ldr	r0, [r1, #16]
9000e3ee:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
9000e3f2:	6108      	str	r0, [r1, #16]
9000e3f4:	6908      	ldr	r0, [r1, #16]
9000e3f6:	f8d4 50bc 	ldr.w	r5, [r4, #188]	; 0xbc
9000e3fa:	4328      	orrs	r0, r5
9000e3fc:	6108      	str	r0, [r1, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
9000e3fe:	2b00      	cmp	r3, #0
9000e400:	da06      	bge.n	9000e410 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
9000e402:	483d      	ldr	r0, [pc, #244]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e404:	6d65      	ldr	r5, [r4, #84]	; 0x54
9000e406:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
9000e408:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000e40c:	4329      	orrs	r1, r5
9000e40e:	64c1      	str	r1, [r0, #76]	; 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
9000e410:	0219      	lsls	r1, r3, #8
9000e412:	d507      	bpl.n	9000e424 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
9000e414:	4938      	ldr	r1, [pc, #224]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e416:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
9000e41a:	6d4b      	ldr	r3, [r1, #84]	; 0x54
9000e41c:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
9000e420:	4303      	orrs	r3, r0
9000e422:	654b      	str	r3, [r1, #84]	; 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
9000e424:	07d3      	lsls	r3, r2, #31
9000e426:	f100 80b0 	bmi.w	9000e58a <HAL_RCCEx_PeriphCLKConfig+0x75a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e42a:	0797      	lsls	r7, r2, #30
9000e42c:	f100 80ba 	bmi.w	9000e5a4 <HAL_RCCEx_PeriphCLKConfig+0x774>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e430:	0755      	lsls	r5, r2, #29
9000e432:	f100 80c4 	bmi.w	9000e5be <HAL_RCCEx_PeriphCLKConfig+0x78e>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e436:	0710      	lsls	r0, r2, #28
9000e438:	f100 80ce 	bmi.w	9000e5d8 <HAL_RCCEx_PeriphCLKConfig+0x7a8>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e43c:	06d1      	lsls	r1, r2, #27
9000e43e:	f100 80d8 	bmi.w	9000e5f2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e442:	0692      	lsls	r2, r2, #26
9000e444:	f100 8125 	bmi.w	9000e692 <HAL_RCCEx_PeriphCLKConfig+0x862>
    return HAL_OK;
9000e448:	1e30      	subs	r0, r6, #0
9000e44a:	bf18      	it	ne
9000e44c:	2001      	movne	r0, #1
}
9000e44e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (PeriphClkInit->Lptim1ClockSelection)
9000e452:	f021 5080 	bic.w	r0, r1, #268435456	; 0x10000000
9000e456:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
9000e45a:	f43f aefc 	beq.w	9000e256 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000e45e:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
9000e462:	f43f aef8 	beq.w	9000e256 <HAL_RCCEx_PeriphCLKConfig+0x426>
9000e466:	2601      	movs	r6, #1
9000e468:	4635      	mov	r5, r6
9000e46a:	e6ff      	b.n	9000e26c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    switch (PeriphClkInit->Lptim2ClockSelection)
9000e46c:	f421 6080 	bic.w	r0, r1, #1024	; 0x400
9000e470:	f5b0 5f80 	cmp.w	r0, #4096	; 0x1000
9000e474:	f43f af11 	beq.w	9000e29a <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000e478:	f5b1 6f40 	cmp.w	r1, #3072	; 0xc00
9000e47c:	f43f af0d 	beq.w	9000e29a <HAL_RCCEx_PeriphCLKConfig+0x46a>
9000e480:	2601      	movs	r6, #1
9000e482:	4635      	mov	r5, r6
9000e484:	e714      	b.n	9000e2b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
    switch (PeriphClkInit->Lptim345ClockSelection)
9000e486:	f421 5000 	bic.w	r0, r1, #8192	; 0x2000
9000e48a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000e48e:	f43f af26 	beq.w	9000e2de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000e492:	f5b1 4fc0 	cmp.w	r1, #24576	; 0x6000
9000e496:	f43f af22 	beq.w	9000e2de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
9000e49a:	2601      	movs	r6, #1
9000e49c:	4635      	mov	r5, r6
9000e49e:	e729      	b.n	9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
    switch (PeriphClkInit->RngClockSelection)
9000e4a0:	2900      	cmp	r1, #0
9000e4a2:	d183      	bne.n	9000e3ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    if (ret == HAL_OK)
9000e4a4:	2d00      	cmp	r5, #0
9000e4a6:	f040 8163 	bne.w	9000e770 <HAL_RCCEx_PeriphCLKConfig+0x940>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
9000e4aa:	4d13      	ldr	r5, [pc, #76]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e4ac:	6d68      	ldr	r0, [r5, #84]	; 0x54
9000e4ae:	f420 7040 	bic.w	r0, r0, #768	; 0x300
9000e4b2:	4301      	orrs	r1, r0
9000e4b4:	6569      	str	r1, [r5, #84]	; 0x54
9000e4b6:	e77a      	b.n	9000e3ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
    switch (PeriphClkInit->Sai1ClockSelection)
9000e4b8:	4635      	mov	r5, r6
    if (ret == HAL_OK)
9000e4ba:	2d00      	cmp	r5, #0
9000e4bc:	f040 80fb 	bne.w	9000e6b6 <HAL_RCCEx_PeriphCLKConfig+0x886>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
9000e4c0:	4f0d      	ldr	r7, [pc, #52]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e4c2:	6da0      	ldr	r0, [r4, #88]	; 0x58
9000e4c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000e4c6:	f021 0107 	bic.w	r1, r1, #7
9000e4ca:	4301      	orrs	r1, r0
9000e4cc:	6539      	str	r1, [r7, #80]	; 0x50
9000e4ce:	e4ea      	b.n	9000dea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e4d0:	2101      	movs	r1, #1
9000e4d2:	f104 0008 	add.w	r0, r4, #8
9000e4d6:	f7ff fbb7 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e4da:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
9000e4dc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e4e0:	2d00      	cmp	r5, #0
9000e4e2:	f040 811c 	bne.w	9000e71e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
9000e4e6:	4f04      	ldr	r7, [pc, #16]	; (9000e4f8 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
9000e4e8:	6f20      	ldr	r0, [r4, #112]	; 0x70
9000e4ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
9000e4ec:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
9000e4f0:	4301      	orrs	r1, r0
9000e4f2:	6539      	str	r1, [r7, #80]	; 0x50
9000e4f4:	e5cc      	b.n	9000e090 <HAL_RCCEx_PeriphCLKConfig+0x260>
9000e4f6:	bf00      	nop
9000e4f8:	58024400 	.word	0x58024400
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e4fc:	2101      	movs	r1, #1
9000e4fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e502:	f7ff fc1b 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e506:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
9000e508:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e50c:	2d00      	cmp	r5, #0
9000e50e:	f040 812d 	bne.w	9000e76c <HAL_RCCEx_PeriphCLKConfig+0x93c>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
9000e512:	4fb1      	ldr	r7, [pc, #708]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e514:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
9000e518:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e51a:	f421 1140 	bic.w	r1, r1, #3145728	; 0x300000
9000e51e:	4301      	orrs	r1, r0
9000e520:	6579      	str	r1, [r7, #84]	; 0x54
9000e522:	e726      	b.n	9000e372 <HAL_RCCEx_PeriphCLKConfig+0x542>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e524:	2102      	movs	r1, #2
9000e526:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e52a:	f7ff fc07 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e52e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e530:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e534:	2d00      	cmp	r5, #0
9000e536:	f040 8117 	bne.w	9000e768 <HAL_RCCEx_PeriphCLKConfig+0x938>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
9000e53a:	4fa7      	ldr	r7, [pc, #668]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e53c:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
9000e540:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e542:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
9000e546:	4301      	orrs	r1, r0
9000e548:	65b9      	str	r1, [r7, #88]	; 0x58
9000e54a:	e700      	b.n	9000e34e <HAL_RCCEx_PeriphCLKConfig+0x51e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e54c:	2101      	movs	r1, #1
9000e54e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e552:	f7ff fbf3 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e556:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e558:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e55c:	2d00      	cmp	r5, #0
9000e55e:	f040 80da 	bne.w	9000e716 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
9000e562:	4f9d      	ldr	r7, [pc, #628]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e564:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
9000e566:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e568:	f021 0138 	bic.w	r1, r1, #56	; 0x38
9000e56c:	4301      	orrs	r1, r0
9000e56e:	6579      	str	r1, [r7, #84]	; 0x54
9000e570:	e625      	b.n	9000e1be <HAL_RCCEx_PeriphCLKConfig+0x38e>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e572:	2102      	movs	r1, #2
9000e574:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e578:	f7ff fbe0 	bl	9000dd3c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
9000e57c:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e580:	2800      	cmp	r0, #0
9000e582:	f43f af05 	beq.w	9000e390 <HAL_RCCEx_PeriphCLKConfig+0x560>
      status = HAL_ERROR;
9000e586:	2601      	movs	r6, #1
9000e588:	e702      	b.n	9000e390 <HAL_RCCEx_PeriphCLKConfig+0x560>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e58a:	2100      	movs	r1, #0
9000e58c:	f104 0008 	add.w	r0, r4, #8
9000e590:	f7ff fb5a 	bl	9000dc48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e594:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e596:	2800      	cmp	r0, #0
9000e598:	f43f af47 	beq.w	9000e42a <HAL_RCCEx_PeriphCLKConfig+0x5fa>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
9000e59c:	0797      	lsls	r7, r2, #30
9000e59e:	4606      	mov	r6, r0
9000e5a0:	f57f af46 	bpl.w	9000e430 <HAL_RCCEx_PeriphCLKConfig+0x600>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e5a4:	2101      	movs	r1, #1
9000e5a6:	f104 0008 	add.w	r0, r4, #8
9000e5aa:	f7ff fb4d 	bl	9000dc48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e5ae:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e5b0:	2800      	cmp	r0, #0
9000e5b2:	f43f af3d 	beq.w	9000e430 <HAL_RCCEx_PeriphCLKConfig+0x600>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
9000e5b6:	0755      	lsls	r5, r2, #29
9000e5b8:	4606      	mov	r6, r0
9000e5ba:	f57f af3c 	bpl.w	9000e436 <HAL_RCCEx_PeriphCLKConfig+0x606>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e5be:	2102      	movs	r1, #2
9000e5c0:	f104 0008 	add.w	r0, r4, #8
9000e5c4:	f7ff fb40 	bl	9000dc48 <RCCEx_PLL2_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e5c8:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e5ca:	2800      	cmp	r0, #0
9000e5cc:	f43f af33 	beq.w	9000e436 <HAL_RCCEx_PeriphCLKConfig+0x606>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
9000e5d0:	4606      	mov	r6, r0
9000e5d2:	0710      	lsls	r0, r2, #28
9000e5d4:	f57f af32 	bpl.w	9000e43c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e5d8:	2100      	movs	r1, #0
9000e5da:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e5de:	f7ff fbad 	bl	9000dd3c <RCCEx_PLL3_Config>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e5e2:	6862      	ldr	r2, [r4, #4]
    if (ret == HAL_OK)
9000e5e4:	2800      	cmp	r0, #0
9000e5e6:	f43f af29 	beq.w	9000e43c <HAL_RCCEx_PeriphCLKConfig+0x60c>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
9000e5ea:	06d1      	lsls	r1, r2, #27
9000e5ec:	4606      	mov	r6, r0
9000e5ee:	f57f af28 	bpl.w	9000e442 <HAL_RCCEx_PeriphCLKConfig+0x612>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e5f2:	f104 0528 	add.w	r5, r4, #40	; 0x28
9000e5f6:	2101      	movs	r1, #1
9000e5f8:	4628      	mov	r0, r5
9000e5fa:	f7ff fb9f 	bl	9000dd3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e5fe:	2800      	cmp	r0, #0
9000e600:	f000 80db 	beq.w	9000e7ba <HAL_RCCEx_PeriphCLKConfig+0x98a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e604:	6863      	ldr	r3, [r4, #4]
9000e606:	069b      	lsls	r3, r3, #26
9000e608:	d54c      	bpl.n	9000e6a4 <HAL_RCCEx_PeriphCLKConfig+0x874>
9000e60a:	4606      	mov	r6, r0
9000e60c:	e043      	b.n	9000e696 <HAL_RCCEx_PeriphCLKConfig+0x866>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
9000e60e:	4f73      	ldr	r7, [pc, #460]	; (9000e7dc <HAL_RCCEx_PeriphCLKConfig+0x9ac>)
9000e610:	683b      	ldr	r3, [r7, #0]
9000e612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
9000e616:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
9000e618:	f7fb f9ba 	bl	90009990 <HAL_GetTick>
9000e61c:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e61e:	e006      	b.n	9000e62e <HAL_RCCEx_PeriphCLKConfig+0x7fe>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
9000e620:	f7fb f9b6 	bl	90009990 <HAL_GetTick>
9000e624:	eba0 0008 	sub.w	r0, r0, r8
9000e628:	2864      	cmp	r0, #100	; 0x64
9000e62a:	f200 81af 	bhi.w	9000e98c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
9000e62e:	683b      	ldr	r3, [r7, #0]
9000e630:	05da      	lsls	r2, r3, #23
9000e632:	d5f5      	bpl.n	9000e620 <HAL_RCCEx_PeriphCLKConfig+0x7f0>
    if (ret == HAL_OK)
9000e634:	2d00      	cmp	r5, #0
9000e636:	f040 81e3 	bne.w	9000ea00 <HAL_RCCEx_PeriphCLKConfig+0xbd0>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
9000e63a:	4a67      	ldr	r2, [pc, #412]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e63c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e640:	6f11      	ldr	r1, [r2, #112]	; 0x70
9000e642:	4059      	eors	r1, r3
9000e644:	f411 7f40 	tst.w	r1, #768	; 0x300
9000e648:	d00b      	beq.n	9000e662 <HAL_RCCEx_PeriphCLKConfig+0x832>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e64a:	6f11      	ldr	r1, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
9000e64c:	6f10      	ldr	r0, [r2, #112]	; 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
9000e64e:	f421 7140 	bic.w	r1, r1, #768	; 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
9000e652:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
9000e656:	6710      	str	r0, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
9000e658:	6f10      	ldr	r0, [r2, #112]	; 0x70
9000e65a:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
9000e65e:	6710      	str	r0, [r2, #112]	; 0x70
        RCC->BDCR = tmpreg;
9000e660:	6711      	str	r1, [r2, #112]	; 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
9000e662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
9000e666:	f000 81ad 	beq.w	9000e9c4 <HAL_RCCEx_PeriphCLKConfig+0xb94>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e66a:	f403 7240 	and.w	r2, r3, #768	; 0x300
9000e66e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
9000e672:	f000 81bb 	beq.w	9000e9ec <HAL_RCCEx_PeriphCLKConfig+0xbbc>
9000e676:	4958      	ldr	r1, [pc, #352]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e678:	690a      	ldr	r2, [r1, #16]
9000e67a:	f422 527c 	bic.w	r2, r2, #16128	; 0x3f00
9000e67e:	610a      	str	r2, [r1, #16]
9000e680:	4855      	ldr	r0, [pc, #340]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e682:	f3c3 010b 	ubfx	r1, r3, #0, #12
9000e686:	6f07      	ldr	r7, [r0, #112]	; 0x70
9000e688:	4339      	orrs	r1, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e68a:	e9d4 3200 	ldrd	r3, r2, [r4]
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e68e:	6701      	str	r1, [r0, #112]	; 0x70
9000e690:	e563      	b.n	9000e15a <HAL_RCCEx_PeriphCLKConfig+0x32a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e692:	f104 0528 	add.w	r5, r4, #40	; 0x28
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e696:	2102      	movs	r1, #2
9000e698:	4628      	mov	r0, r5
9000e69a:	f7ff fb4f 	bl	9000dd3c <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
9000e69e:	2800      	cmp	r0, #0
9000e6a0:	f43f aed2 	beq.w	9000e448 <HAL_RCCEx_PeriphCLKConfig+0x618>
  return HAL_ERROR;
9000e6a4:	2001      	movs	r0, #1
}
9000e6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9000e6aa:	462e      	mov	r6, r5
9000e6ac:	e463      	b.n	9000df76 <HAL_RCCEx_PeriphCLKConfig+0x146>
9000e6ae:	462e      	mov	r6, r5
9000e6b0:	e419      	b.n	9000dee6 <HAL_RCCEx_PeriphCLKConfig+0xb6>
9000e6b2:	462e      	mov	r6, r5
9000e6b4:	e49c      	b.n	9000dff0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
9000e6b6:	462e      	mov	r6, r5
9000e6b8:	f7ff bbf5 	b.w	9000dea6 <HAL_RCCEx_PeriphCLKConfig+0x76>
9000e6bc:	462e      	mov	r6, r5
9000e6be:	e436      	b.n	9000df2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e6c0:	2102      	movs	r1, #2
9000e6c2:	f104 0008 	add.w	r0, r4, #8
9000e6c6:	f7ff fabf 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e6ca:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
9000e6cc:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e6d0:	2d00      	cmp	r5, #0
9000e6d2:	d15e      	bne.n	9000e792 <HAL_RCCEx_PeriphCLKConfig+0x962>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
9000e6d4:	4f40      	ldr	r7, [pc, #256]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e6d6:	6d20      	ldr	r0, [r4, #80]	; 0x50
9000e6d8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000e6da:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
9000e6de:	4301      	orrs	r1, r0
9000e6e0:	64f9      	str	r1, [r7, #76]	; 0x4c
9000e6e2:	e652      	b.n	9000e38a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e6e4:	483c      	ldr	r0, [pc, #240]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e6e6:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e6e8:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e6ec:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e6ee:	e475      	b.n	9000dfdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e6f0:	4839      	ldr	r0, [pc, #228]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e6f2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e6f4:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e6f8:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e6fa:	e431      	b.n	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x130>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e6fc:	4836      	ldr	r0, [pc, #216]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e6fe:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e700:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e704:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e706:	f7ff bbe4 	b.w	9000ded2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e70a:	4833      	ldr	r0, [pc, #204]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e70c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e70e:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e712:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e714:	e400      	b.n	9000df18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
9000e716:	462e      	mov	r6, r5
9000e718:	e551      	b.n	9000e1be <HAL_RCCEx_PeriphCLKConfig+0x38e>
9000e71a:	462e      	mov	r6, r5
9000e71c:	e5a6      	b.n	9000e26c <HAL_RCCEx_PeriphCLKConfig+0x43c>
9000e71e:	462e      	mov	r6, r5
9000e720:	e4b6      	b.n	9000e090 <HAL_RCCEx_PeriphCLKConfig+0x260>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
9000e722:	4f2d      	ldr	r7, [pc, #180]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e724:	6fa0      	ldr	r0, [r4, #120]	; 0x78
9000e726:	6d79      	ldr	r1, [r7, #84]	; 0x54
9000e728:	f021 0107 	bic.w	r1, r1, #7
9000e72c:	4301      	orrs	r1, r0
9000e72e:	6579      	str	r1, [r7, #84]	; 0x54
9000e730:	e55f      	b.n	9000e1f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
9000e732:	4f29      	ldr	r7, [pc, #164]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e734:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
9000e738:	6db9      	ldr	r1, [r7, #88]	; 0x58
9000e73a:	f021 0107 	bic.w	r1, r1, #7
9000e73e:	4301      	orrs	r1, r0
9000e740:	65b9      	str	r1, [r7, #88]	; 0x58
9000e742:	e571      	b.n	9000e228 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000e744:	462e      	mov	r6, r5
9000e746:	e431      	b.n	9000dfac <HAL_RCCEx_PeriphCLKConfig+0x17c>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
9000e748:	4f23      	ldr	r7, [pc, #140]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e74a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
9000e74c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
9000e74e:	f021 0103 	bic.w	r1, r1, #3
9000e752:	4301      	orrs	r1, r0
9000e754:	64f9      	str	r1, [r7, #76]	; 0x4c
9000e756:	e4fd      	b.n	9000e154 <HAL_RCCEx_PeriphCLKConfig+0x324>
9000e758:	462e      	mov	r6, r5
9000e75a:	e469      	b.n	9000e030 <HAL_RCCEx_PeriphCLKConfig+0x200>
9000e75c:	462e      	mov	r6, r5
9000e75e:	e5c9      	b.n	9000e2f4 <HAL_RCCEx_PeriphCLKConfig+0x4c4>
9000e760:	462e      	mov	r6, r5
9000e762:	e485      	b.n	9000e070 <HAL_RCCEx_PeriphCLKConfig+0x240>
9000e764:	462e      	mov	r6, r5
9000e766:	e5a3      	b.n	9000e2b0 <HAL_RCCEx_PeriphCLKConfig+0x480>
9000e768:	462e      	mov	r6, r5
9000e76a:	e5f0      	b.n	9000e34e <HAL_RCCEx_PeriphCLKConfig+0x51e>
9000e76c:	462e      	mov	r6, r5
9000e76e:	e600      	b.n	9000e372 <HAL_RCCEx_PeriphCLKConfig+0x542>
9000e770:	462e      	mov	r6, r5
9000e772:	e61c      	b.n	9000e3ae <HAL_RCCEx_PeriphCLKConfig+0x57e>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e774:	4f18      	ldr	r7, [pc, #96]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e776:	6af8      	ldr	r0, [r7, #44]	; 0x2c
9000e778:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e77c:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (ret == HAL_OK)
9000e77e:	2d00      	cmp	r5, #0
9000e780:	d1f6      	bne.n	9000e770 <HAL_RCCEx_PeriphCLKConfig+0x940>
9000e782:	e692      	b.n	9000e4aa <HAL_RCCEx_PeriphCLKConfig+0x67a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e784:	4814      	ldr	r0, [pc, #80]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e786:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e788:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e78c:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e78e:	2d00      	cmp	r5, #0
9000e790:	d0a0      	beq.n	9000e6d4 <HAL_RCCEx_PeriphCLKConfig+0x8a4>
9000e792:	462e      	mov	r6, r5
9000e794:	e5f9      	b.n	9000e38a <HAL_RCCEx_PeriphCLKConfig+0x55a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e796:	4810      	ldr	r0, [pc, #64]	; (9000e7d8 <HAL_RCCEx_PeriphCLKConfig+0x9a8>)
9000e798:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e79a:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e79e:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e7a0:	2d00      	cmp	r5, #0
9000e7a2:	d1e3      	bne.n	9000e76c <HAL_RCCEx_PeriphCLKConfig+0x93c>
9000e7a4:	e6b5      	b.n	9000e512 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e7a6:	f104 0008 	add.w	r0, r4, #8
9000e7aa:	f7ff fa4d 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e7ae:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
9000e7b0:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e7b4:	2d00      	cmp	r5, #0
9000e7b6:	d1d7      	bne.n	9000e768 <HAL_RCCEx_PeriphCLKConfig+0x938>
9000e7b8:	e6bf      	b.n	9000e53a <HAL_RCCEx_PeriphCLKConfig+0x70a>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
9000e7ba:	6862      	ldr	r2, [r4, #4]
9000e7bc:	e641      	b.n	9000e442 <HAL_RCCEx_PeriphCLKConfig+0x612>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
9000e7be:	2102      	movs	r1, #2
9000e7c0:	f104 0008 	add.w	r0, r4, #8
9000e7c4:	f7ff fa40 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e7c8:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
9000e7ca:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e7ce:	2d00      	cmp	r5, #0
9000e7d0:	d1b8      	bne.n	9000e744 <HAL_RCCEx_PeriphCLKConfig+0x914>
9000e7d2:	f7ff bbe4 	b.w	9000df9e <HAL_RCCEx_PeriphCLKConfig+0x16e>
9000e7d6:	bf00      	nop
9000e7d8:	58024400 	.word	0x58024400
9000e7dc:	58024800 	.word	0x58024800
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e7e0:	2102      	movs	r1, #2
9000e7e2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e7e6:	f7ff faa9 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e7ea:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
9000e7ec:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e7f0:	2d00      	cmp	r5, #0
9000e7f2:	d1b7      	bne.n	9000e764 <HAL_RCCEx_PeriphCLKConfig+0x934>
9000e7f4:	e554      	b.n	9000e2a0 <HAL_RCCEx_PeriphCLKConfig+0x470>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e7f6:	2102      	movs	r1, #2
9000e7f8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e7fc:	f7ff fa9e 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e800:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
9000e802:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e806:	2d00      	cmp	r5, #0
9000e808:	d1a8      	bne.n	9000e75c <HAL_RCCEx_PeriphCLKConfig+0x92c>
9000e80a:	e56b      	b.n	9000e2e4 <HAL_RCCEx_PeriphCLKConfig+0x4b4>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e80c:	4884      	ldr	r0, [pc, #528]	; (9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000e80e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e810:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e814:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e816:	2d00      	cmp	r5, #0
9000e818:	d181      	bne.n	9000e71e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
9000e81a:	e664      	b.n	9000e4e6 <HAL_RCCEx_PeriphCLKConfig+0x6b6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e81c:	2101      	movs	r1, #1
9000e81e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e822:	f7ff fa8b 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e826:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
9000e828:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e82c:	2d00      	cmp	r5, #0
9000e82e:	d193      	bne.n	9000e758 <HAL_RCCEx_PeriphCLKConfig+0x928>
9000e830:	f7ff bbf7 	b.w	9000e022 <HAL_RCCEx_PeriphCLKConfig+0x1f2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
9000e834:	2101      	movs	r1, #1
9000e836:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e83a:	f7ff fa7f 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e83e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
9000e840:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e844:	2d00      	cmp	r5, #0
9000e846:	d18b      	bne.n	9000e760 <HAL_RCCEx_PeriphCLKConfig+0x930>
9000e848:	e40a      	b.n	9000e060 <HAL_RCCEx_PeriphCLKConfig+0x230>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e84a:	2102      	movs	r1, #2
9000e84c:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e850:	f7ff fa74 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e854:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
9000e856:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e85a:	2d00      	cmp	r5, #0
9000e85c:	f47f af5d 	bne.w	9000e71a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
9000e860:	e4fc      	b.n	9000e25c <HAL_RCCEx_PeriphCLKConfig+0x42c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e862:	486f      	ldr	r0, [pc, #444]	; (9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000e864:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e866:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e86a:	62c1      	str	r1, [r0, #44]	; 0x2c
    if (ret == HAL_OK)
9000e86c:	2d00      	cmp	r5, #0
9000e86e:	f47f ac70 	bne.w	9000e152 <HAL_RCCEx_PeriphCLKConfig+0x322>
9000e872:	e769      	b.n	9000e748 <HAL_RCCEx_PeriphCLKConfig+0x918>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e874:	2102      	movs	r1, #2
9000e876:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e87a:	f7ff fa5f 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e87e:	2800      	cmp	r0, #0
9000e880:	f040 8094 	bne.w	9000e9ac <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e884:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e888:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e88c:	e53a      	b.n	9000e304 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
9000e88e:	2102      	movs	r1, #2
9000e890:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e894:	f7ff fa52 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e898:	2800      	cmp	r0, #0
9000e89a:	f040 808d 	bne.w	9000e9b8 <HAL_RCCEx_PeriphCLKConfig+0xb88>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e89e:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e8a2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e8a6:	e53b      	b.n	9000e320 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
9000e8a8:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e8ac:	f7ff baed 	b.w	9000de8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e8b0:	2100      	movs	r1, #0
9000e8b2:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e8b6:	f7ff fa41 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e8ba:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
9000e8bc:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e8c0:	f7ff bb4e 	b.w	9000df60 <HAL_RCCEx_PeriphCLKConfig+0x130>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e8c4:	2100      	movs	r1, #0
9000e8c6:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e8ca:	f7ff fa37 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e8ce:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e8d0:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e8d4:	e5f1      	b.n	9000e4ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e8d6:	2100      	movs	r1, #0
9000e8d8:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e8dc:	f7ff fa2e 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e8e0:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
9000e8e2:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e8e6:	f7ff baf4 	b.w	9000ded2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
9000e8ea:	2102      	movs	r1, #2
9000e8ec:	3028      	adds	r0, #40	; 0x28
9000e8ee:	f7ff fa25 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e8f2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
9000e8f4:	2e00      	cmp	r6, #0
9000e8f6:	f43f aab9 	beq.w	9000de6c <HAL_RCCEx_PeriphCLKConfig+0x3c>
9000e8fa:	e7d5      	b.n	9000e8a8 <HAL_RCCEx_PeriphCLKConfig+0xa78>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e8fc:	4848      	ldr	r0, [pc, #288]	; (9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
        break;
9000e8fe:	4635      	mov	r5, r6
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e900:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
9000e902:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
9000e906:	62c1      	str	r1, [r0, #44]	; 0x2c
        break;
9000e908:	e5d7      	b.n	9000e4ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
9000e90a:	2100      	movs	r1, #0
9000e90c:	f104 0008 	add.w	r0, r4, #8
9000e910:	f7ff f99a 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e914:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
9000e916:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e91a:	e5ce      	b.n	9000e4ba <HAL_RCCEx_PeriphCLKConfig+0x68a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e91c:	2100      	movs	r1, #0
9000e91e:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e922:	f7ff fa0b 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e926:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
9000e928:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e92c:	f7ff bb56 	b.w	9000dfdc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
9000e930:	2100      	movs	r1, #0
9000e932:	f104 0028 	add.w	r0, r4, #40	; 0x28
9000e936:	f7ff fa01 	bl	9000dd3c <RCCEx_PLL3_Config>
9000e93a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
9000e93c:	e9d4 3200 	ldrd	r3, r2, [r4]
        break;
9000e940:	f7ff baea 	b.w	9000df18 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e944:	2101      	movs	r1, #1
9000e946:	f104 0008 	add.w	r0, r4, #8
9000e94a:	f7ff f97d 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e94e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
9000e950:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e954:	2d00      	cmp	r5, #0
9000e956:	f47f ac4b 	bne.w	9000e1f0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
9000e95a:	e6e2      	b.n	9000e722 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e95c:	2101      	movs	r1, #1
9000e95e:	f104 0008 	add.w	r0, r4, #8
9000e962:	f7ff f971 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e966:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
9000e968:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e96c:	2d00      	cmp	r5, #0
9000e96e:	f47f ac5a 	bne.w	9000e226 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
9000e972:	e6de      	b.n	9000e732 <HAL_RCCEx_PeriphCLKConfig+0x902>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
9000e974:	2101      	movs	r1, #1
9000e976:	f104 0008 	add.w	r0, r4, #8
9000e97a:	f7ff f965 	bl	9000dc48 <RCCEx_PLL2_Config>
9000e97e:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
9000e980:	e9d4 3200 	ldrd	r3, r2, [r4]
    if (ret == HAL_OK)
9000e984:	2d00      	cmp	r5, #0
9000e986:	f47f aec6 	bne.w	9000e716 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
9000e98a:	e5ea      	b.n	9000e562 <HAL_RCCEx_PeriphCLKConfig+0x732>
            ret = HAL_TIMEOUT;
9000e98c:	2603      	movs	r6, #3
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000e98e:	e9d4 3200 	ldrd	r3, r2, [r4]
            ret = HAL_TIMEOUT;
9000e992:	4635      	mov	r5, r6
9000e994:	f7ff bbe1 	b.w	9000e15a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->SpdifrxClockSelection)
9000e998:	2601      	movs	r6, #1
9000e99a:	f7ff ba76 	b.w	9000de8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
9000e99e:	4d20      	ldr	r5, [pc, #128]	; (9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000e9a0:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9000e9a2:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
9000e9a6:	62e8      	str	r0, [r5, #44]	; 0x2c
    if (ret == HAL_OK)
9000e9a8:	f7ff ba68 	b.w	9000de7c <HAL_RCCEx_PeriphCLKConfig+0x4c>
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
9000e9ac:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
        status = HAL_ERROR;
9000e9b0:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
9000e9b2:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e9b6:	e4a5      	b.n	9000e304 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
9000e9b8:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
        status = HAL_ERROR;
9000e9bc:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
9000e9be:	e9d4 3200 	ldrd	r3, r2, [r4]
9000e9c2:	e4ad      	b.n	9000e320 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
        tickstart = HAL_GetTick();
9000e9c4:	f7fa ffe4 	bl	90009990 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e9c8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>
        tickstart = HAL_GetTick();
9000e9cc:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e9ce:	f241 3988 	movw	r9, #5000	; 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e9d2:	e004      	b.n	9000e9de <HAL_RCCEx_PeriphCLKConfig+0xbae>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
9000e9d4:	f7fa ffdc 	bl	90009990 <HAL_GetTick>
9000e9d8:	1bc0      	subs	r0, r0, r7
9000e9da:	4548      	cmp	r0, r9
9000e9dc:	d8d6      	bhi.n	9000e98c <HAL_RCCEx_PeriphCLKConfig+0xb5c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
9000e9de:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
9000e9e2:	079b      	lsls	r3, r3, #30
9000e9e4:	d5f6      	bpl.n	9000e9d4 <HAL_RCCEx_PeriphCLKConfig+0xba4>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
9000e9e6:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
9000e9ea:	e63e      	b.n	9000e66a <HAL_RCCEx_PeriphCLKConfig+0x83a>
9000e9ec:	480c      	ldr	r0, [pc, #48]	; (9000ea20 <HAL_RCCEx_PeriphCLKConfig+0xbf0>)
9000e9ee:	4a0d      	ldr	r2, [pc, #52]	; (9000ea24 <HAL_RCCEx_PeriphCLKConfig+0xbf4>)
9000e9f0:	6901      	ldr	r1, [r0, #16]
9000e9f2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
9000e9f6:	f421 517c 	bic.w	r1, r1, #16128	; 0x3f00
9000e9fa:	430a      	orrs	r2, r1
9000e9fc:	6102      	str	r2, [r0, #16]
9000e9fe:	e63f      	b.n	9000e680 <HAL_RCCEx_PeriphCLKConfig+0x850>
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
9000ea00:	e9d4 3200 	ldrd	r3, r2, [r4]
9000ea04:	462e      	mov	r6, r5
9000ea06:	f7ff bba8 	b.w	9000e15a <HAL_RCCEx_PeriphCLKConfig+0x32a>
    switch (PeriphClkInit->Usart234578ClockSelection)
9000ea0a:	2601      	movs	r6, #1
9000ea0c:	4635      	mov	r5, r6
9000ea0e:	f7ff bbf0 	b.w	9000e1f2 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
    switch (PeriphClkInit->FmcClockSelection)
9000ea12:	2601      	movs	r6, #1
9000ea14:	4635      	mov	r5, r6
9000ea16:	f7ff bb9d 	b.w	9000e154 <HAL_RCCEx_PeriphCLKConfig+0x324>
    switch (PeriphClkInit->Lpuart1ClockSelection)
9000ea1a:	2601      	movs	r6, #1
9000ea1c:	4635      	mov	r5, r6
9000ea1e:	e403      	b.n	9000e228 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
9000ea20:	58024400 	.word	0x58024400
9000ea24:	00ffffcf 	.word	0x00ffffcf

9000ea28 <HAL_RCCEx_GetD3PCLK1Freq>:
{
9000ea28:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
9000ea2a:	f7ff f811 	bl	9000da50 <HAL_RCC_GetHCLKFreq>
9000ea2e:	4b05      	ldr	r3, [pc, #20]	; (9000ea44 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
9000ea30:	4a05      	ldr	r2, [pc, #20]	; (9000ea48 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
9000ea32:	6a1b      	ldr	r3, [r3, #32]
9000ea34:	f3c3 1302 	ubfx	r3, r3, #4, #3
9000ea38:	5cd3      	ldrb	r3, [r2, r3]
9000ea3a:	f003 031f 	and.w	r3, r3, #31
}
9000ea3e:	40d8      	lsrs	r0, r3
9000ea40:	bd08      	pop	{r3, pc}
9000ea42:	bf00      	nop
9000ea44:	58024400 	.word	0x58024400
9000ea48:	9002abc4 	.word	0x9002abc4

9000ea4c <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ea4c:	4b58      	ldr	r3, [pc, #352]	; (9000ebb0 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
{
9000ea4e:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ea50:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000ea52:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000ea54:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll2m != 0U)
9000ea56:	f415 3f7c 	tst.w	r5, #258048	; 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
9000ea5a:	f3c5 3205 	ubfx	r2, r5, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000ea5e:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
  if (pll2m != 0U)
9000ea60:	d05c      	beq.n	9000eb1c <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000ea62:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
9000ea66:	f3c6 1600 	ubfx	r6, r6, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ea6a:	f001 0103 	and.w	r1, r1, #3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000ea6e:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000ea72:	2901      	cmp	r1, #1
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
9000ea74:	ee07 4a90 	vmov	s15, r4
9000ea78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000ea7c:	d003      	beq.n	9000ea86 <HAL_RCCEx_GetPLL2ClockFreq+0x3a>
9000ea7e:	2902      	cmp	r1, #2
9000ea80:	d075      	beq.n	9000eb6e <HAL_RCCEx_GetPLL2ClockFreq+0x122>
9000ea82:	2900      	cmp	r1, #0
9000ea84:	d04f      	beq.n	9000eb26 <HAL_RCCEx_GetPLL2ClockFreq+0xda>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000ea86:	ee07 2a90 	vmov	s15, r2
9000ea8a:	eddf 6a4a 	vldr	s13, [pc, #296]	; 9000ebb4 <HAL_RCCEx_GetPLL2ClockFreq+0x168>
9000ea8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ea92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000ea94:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000ea98:	ed9f 5a47 	vldr	s10, [pc, #284]	; 9000ebb8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000ea9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000eaa0:	ee06 3a90 	vmov	s13, r3
9000eaa4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000eaa8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000eaac:	eee7 6a05 	vfma.f32	s13, s14, s10
9000eab0:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000eab4:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000eab8:	4a3d      	ldr	r2, [pc, #244]	; (9000ebb0 <HAL_RCCEx_GetPLL2ClockFreq+0x164>)
9000eaba:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000eabe:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000eac0:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000eac4:	ee07 3a10 	vmov	s14, r3
9000eac8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
9000eacc:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
9000eace:	ee37 7a06 	vadd.f32	s14, s14, s12
9000ead2:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ead6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000eada:	edc0 7a00 	vstr	s15, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
9000eade:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000eae0:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000eae4:	ee07 3a10 	vmov	s14, r3
9000eae8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000eaec:	ee37 7a06 	vadd.f32	s14, s14, s12
9000eaf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000eaf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000eaf8:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
9000eafc:	6b93      	ldr	r3, [r2, #56]	; 0x38
9000eafe:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000eb02:	ee07 3a90 	vmov	s15, r3
9000eb06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000eb0a:	ee77 7a86 	vadd.f32	s15, s15, s12
9000eb0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000eb12:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000eb16:	ed80 7a02 	vstr	s14, [r0, #8]
}
9000eb1a:	4770      	bx	lr
9000eb1c:	bc70      	pop	{r4, r5, r6}
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
9000eb1e:	e9c0 2200 	strd	r2, r2, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
9000eb22:	6082      	str	r2, [r0, #8]
}
9000eb24:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000eb26:	6819      	ldr	r1, [r3, #0]
9000eb28:	0689      	lsls	r1, r1, #26
9000eb2a:	d527      	bpl.n	9000eb7c <HAL_RCCEx_GetPLL2ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000eb2c:	681c      	ldr	r4, [r3, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb2e:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000eb32:	4922      	ldr	r1, [pc, #136]	; (9000ebbc <HAL_RCCEx_GetPLL2ClockFreq+0x170>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb34:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000eb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000eb3a:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000eb42:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000ebb8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000eb46:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000eb4a:	40d1      	lsrs	r1, r2
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb4c:	ee06 3a90 	vmov	s13, r3
9000eb50:	ee06 1a10 	vmov	s12, r1
9000eb54:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000eb58:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000eb5c:	eee7 6a05 	vfma.f32	s13, s14, s10
9000eb60:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000eb64:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000eb68:	ee66 6a87 	vmul.f32	s13, s13, s14
9000eb6c:	e7a4      	b.n	9000eab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb6e:	ee07 2a90 	vmov	s15, r2
9000eb72:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000ebc0 <HAL_RCCEx_GetPLL2ClockFreq+0x174>
9000eb76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000eb7a:	e78a      	b.n	9000ea92 <HAL_RCCEx_GetPLL2ClockFreq+0x46>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
9000eb7c:	ee07 2a90 	vmov	s15, r2
9000eb80:	ed9f 5a10 	vldr	s10, [pc, #64]	; 9000ebc4 <HAL_RCCEx_GetPLL2ClockFreq+0x178>
9000eb84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9000eb86:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000eb8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000eb8e:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000ebb8 <HAL_RCCEx_GetPLL2ClockFreq+0x16c>
9000eb92:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000eb96:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000eb9a:	ee07 3a90 	vmov	s15, r3
9000eb9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000eba2:	eee7 7a25 	vfma.f32	s15, s14, s11
9000eba6:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ebaa:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000ebae:	e783      	b.n	9000eab8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
9000ebb0:	58024400 	.word	0x58024400
9000ebb4:	4a742400 	.word	0x4a742400
9000ebb8:	39000000 	.word	0x39000000
9000ebbc:	03d09000 	.word	0x03d09000
9000ebc0:	4bbebc20 	.word	0x4bbebc20
9000ebc4:	4c742400 	.word	0x4c742400

9000ebc8 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ebc8:	4b58      	ldr	r3, [pc, #352]	; (9000ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
{
9000ebca:	b470      	push	{r4, r5, r6}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ebcc:	6a99      	ldr	r1, [r3, #40]	; 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000ebce:	6a9d      	ldr	r5, [r3, #40]	; 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000ebd0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
  if (pll3m != 0U)
9000ebd2:	f015 7f7c 	tst.w	r5, #66060288	; 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
9000ebd6:	f3c5 5205 	ubfx	r2, r5, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ebda:	6c5c      	ldr	r4, [r3, #68]	; 0x44
  if (pll3m != 0U)
9000ebdc:	d05c      	beq.n	9000ec98 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ebde:	f3c4 04cc 	ubfx	r4, r4, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
9000ebe2:	f3c6 2600 	ubfx	r6, r6, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
9000ebe6:	f001 0103 	and.w	r1, r1, #3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ebea:	fb06 f404 	mul.w	r4, r6, r4
    switch (pllsource)
9000ebee:	2901      	cmp	r1, #1
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
9000ebf0:	ee07 4a90 	vmov	s15, r4
9000ebf4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    switch (pllsource)
9000ebf8:	d003      	beq.n	9000ec02 <HAL_RCCEx_GetPLL3ClockFreq+0x3a>
9000ebfa:	2902      	cmp	r1, #2
9000ebfc:	d075      	beq.n	9000ecea <HAL_RCCEx_GetPLL3ClockFreq+0x122>
9000ebfe:	2900      	cmp	r1, #0
9000ec00:	d04f      	beq.n	9000eca2 <HAL_RCCEx_GetPLL3ClockFreq+0xda>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ec02:	ee07 2a90 	vmov	s15, r2
9000ec06:	eddf 6a4a 	vldr	s13, [pc, #296]	; 9000ed30 <HAL_RCCEx_GetPLL3ClockFreq+0x168>
9000ec0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ec0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000ec10:	ee86 6aa7 	vdiv.f32	s12, s13, s15
9000ec14:	ed9f 5a47 	vldr	s10, [pc, #284]	; 9000ed34 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000ec18:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ec1c:	ee06 3a90 	vmov	s13, r3
9000ec20:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ec24:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ec28:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ec2c:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ec30:	ee66 6a26 	vmul.f32	s13, s12, s13
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000ec34:	4a3d      	ldr	r2, [pc, #244]	; (9000ed2c <HAL_RCCEx_GetPLL3ClockFreq+0x164>)
9000ec36:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000ec3a:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000ec3c:	f3c3 2346 	ubfx	r3, r3, #9, #7
9000ec40:	ee07 3a10 	vmov	s14, r3
9000ec44:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
}
9000ec48:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
9000ec4a:	ee37 7a06 	vadd.f32	s14, s14, s12
9000ec4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ec52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ec56:	edc0 7a00 	vstr	s15, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
9000ec5a:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000ec5c:	f3c3 4306 	ubfx	r3, r3, #16, #7
9000ec60:	ee07 3a10 	vmov	s14, r3
9000ec64:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9000ec68:	ee37 7a06 	vadd.f32	s14, s14, s12
9000ec6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
9000ec70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
9000ec74:	edc0 7a01 	vstr	s15, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
9000ec78:	6c13      	ldr	r3, [r2, #64]	; 0x40
9000ec7a:	f3c3 6306 	ubfx	r3, r3, #24, #7
9000ec7e:	ee07 3a90 	vmov	s15, r3
9000ec82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ec86:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ec8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
9000ec8e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
9000ec92:	ed80 7a02 	vstr	s14, [r0, #8]
}
9000ec96:	4770      	bx	lr
9000ec98:	bc70      	pop	{r4, r5, r6}
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
9000ec9a:	e9c0 2200 	strd	r2, r2, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
9000ec9e:	6082      	str	r2, [r0, #8]
}
9000eca0:	4770      	bx	lr
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000eca2:	6819      	ldr	r1, [r3, #0]
9000eca4:	0689      	lsls	r1, r1, #26
9000eca6:	d527      	bpl.n	9000ecf8 <HAL_RCCEx_GetPLL3ClockFreq+0x130>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000eca8:	681c      	ldr	r4, [r3, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecaa:	ee07 2a90 	vmov	s15, r2
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ecae:	4922      	ldr	r1, [pc, #136]	; (9000ed38 <HAL_RCCEx_GetPLL3ClockFreq+0x170>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecb0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
9000ecb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ecb6:	f3c4 02c1 	ubfx	r2, r4, #3, #2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ecbe:	ed9f 5a1d 	vldr	s10, [pc, #116]	; 9000ed34 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000ecc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
9000ecc6:	40d1      	lsrs	r1, r2
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecc8:	ee06 3a90 	vmov	s13, r3
9000eccc:	ee06 1a10 	vmov	s12, r1
9000ecd0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9000ecd4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
9000ecd8:	eee7 6a05 	vfma.f32	s13, s14, s10
9000ecdc:	ee86 7a27 	vdiv.f32	s14, s12, s15
9000ece0:	ee76 6aa5 	vadd.f32	s13, s13, s11
9000ece4:	ee66 6a87 	vmul.f32	s13, s13, s14
9000ece8:	e7a4      	b.n	9000ec34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecea:	ee07 2a90 	vmov	s15, r2
9000ecee:	eddf 6a13 	vldr	s13, [pc, #76]	; 9000ed3c <HAL_RCCEx_GetPLL3ClockFreq+0x174>
9000ecf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ecf6:	e78a      	b.n	9000ec0e <HAL_RCCEx_GetPLL3ClockFreq+0x46>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
9000ecf8:	ee07 2a90 	vmov	s15, r2
9000ecfc:	ed9f 5a10 	vldr	s10, [pc, #64]	; 9000ed40 <HAL_RCCEx_GetPLL3ClockFreq+0x178>
9000ed00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9000ed02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
9000ed06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ed0a:	eddf 5a0a 	vldr	s11, [pc, #40]	; 9000ed34 <HAL_RCCEx_GetPLL3ClockFreq+0x16c>
9000ed0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000ed12:	eec5 6a27 	vdiv.f32	s13, s10, s15
9000ed16:	ee07 3a90 	vmov	s15, r3
9000ed1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9000ed1e:	eee7 7a25 	vfma.f32	s15, s14, s11
9000ed22:	ee77 7a86 	vadd.f32	s15, s15, s12
9000ed26:	ee66 6aa7 	vmul.f32	s13, s13, s15
9000ed2a:	e783      	b.n	9000ec34 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
9000ed2c:	58024400 	.word	0x58024400
9000ed30:	4a742400 	.word	0x4a742400
9000ed34:	39000000 	.word	0x39000000
9000ed38:	03d09000 	.word	0x03d09000
9000ed3c:	4bbebc20 	.word	0x4bbebc20
9000ed40:	4c742400 	.word	0x4c742400

9000ed44 <HAL_SDRAM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
9000ed44:	b318      	cbz	r0, 9000ed8e <HAL_SDRAM_Init+0x4a>
{
9000ed46:	b538      	push	{r3, r4, r5, lr}
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
9000ed48:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
9000ed4c:	4604      	mov	r4, r0
9000ed4e:	460d      	mov	r5, r1
9000ed50:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ed54:	b1b3      	cbz	r3, 9000ed84 <HAL_SDRAM_Init+0x40>

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000ed56:	4621      	mov	r1, r4
  hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ed58:	2302      	movs	r3, #2
9000ed5a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
9000ed5e:	f851 0b04 	ldr.w	r0, [r1], #4
9000ed62:	f001 fd85 	bl	90010870 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
9000ed66:	6862      	ldr	r2, [r4, #4]
9000ed68:	4629      	mov	r1, r5
9000ed6a:	6820      	ldr	r0, [r4, #0]
9000ed6c:	f001 fdbe 	bl	900108ec <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
9000ed70:	4a08      	ldr	r2, [pc, #32]	; (9000ed94 <HAL_SDRAM_Init+0x50>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ed72:	2101      	movs	r1, #1

  return HAL_OK;
9000ed74:	2000      	movs	r0, #0
  __FMC_ENABLE();
9000ed76:	6813      	ldr	r3, [r2, #0]
9000ed78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
9000ed7c:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
9000ed7e:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
}
9000ed82:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->Lock = HAL_UNLOCKED;
9000ed84:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
    HAL_SDRAM_MspInit(hsdram);
9000ed88:	f7f5 ff40 	bl	90004c0c <HAL_SDRAM_MspInit>
9000ed8c:	e7e3      	b.n	9000ed56 <HAL_SDRAM_Init+0x12>
    return HAL_ERROR;
9000ed8e:	2001      	movs	r0, #1
}
9000ed90:	4770      	bx	lr
9000ed92:	bf00      	nop
9000ed94:	52004000 	.word	0x52004000

9000ed98 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
9000ed98:	b510      	push	{r4, lr}
9000ed9a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
9000ed9c:	f7f5 ffb2 	bl	90004d04 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
9000eda0:	e9d4 0100 	ldrd	r0, r1, [r4]
9000eda4:	f001 fdee 	bl	90010984 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
9000eda8:	2000      	movs	r0, #0
9000edaa:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
9000edae:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d

  return HAL_OK;
}
9000edb2:	bd10      	pop	{r4, pc}

9000edb4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
9000edb4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000edb6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000edba:	4604      	mov	r4, r0

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
9000edbc:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
9000edbe:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
9000edc0:	d004      	beq.n	9000edcc <HAL_SDRAM_SendCommand+0x18>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
9000edc2:	f000 06fb 	and.w	r6, r0, #251	; 0xfb
9000edc6:	2e01      	cmp	r6, #1
9000edc8:	d001      	beq.n	9000edce <HAL_SDRAM_SendCommand+0x1a>
      hsdram->State = HAL_SDRAM_STATE_READY;
    }
  }
  else
  {
    return HAL_ERROR;
9000edca:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000edcc:	bd70      	pop	{r4, r5, r6, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000edce:	2302      	movs	r3, #2
9000edd0:	460d      	mov	r5, r1
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000edd2:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000edd4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
9000edd8:	f001 fde8 	bl	900109ac <FMC_SDRAM_SendCommand>
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
9000eddc:	682b      	ldr	r3, [r5, #0]
9000edde:	2b02      	cmp	r3, #2
9000ede0:	d003      	beq.n	9000edea <HAL_SDRAM_SendCommand+0x36>
  return HAL_OK;
9000ede2:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_READY;
9000ede4:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
}
9000ede8:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000edea:	2305      	movs	r3, #5
  return HAL_OK;
9000edec:	2000      	movs	r0, #0
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
9000edee:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
9000edf2:	bd70      	pop	{r4, r5, r6, pc}

9000edf4 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
9000edf4:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000edf6:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
{
9000edfa:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
9000edfc:	2b02      	cmp	r3, #2
9000edfe:	b2d8      	uxtb	r0, r3
9000ee00:	d005      	beq.n	9000ee0e <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
9000ee02:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
9000ee06:	2b01      	cmp	r3, #1
9000ee08:	b2dd      	uxtb	r5, r3
9000ee0a:	d001      	beq.n	9000ee10 <HAL_SDRAM_ProgramRefreshRate+0x1c>
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  else
  {
    return HAL_ERROR;
9000ee0c:	2001      	movs	r0, #1
  }

  return HAL_OK;
}
9000ee0e:	bd38      	pop	{r3, r4, r5, pc}
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ee10:	2302      	movs	r3, #2
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000ee12:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
9000ee14:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
9000ee18:	f001 fde0 	bl	900109dc <FMC_SDRAM_ProgramRefreshRate>
  return HAL_OK;
9000ee1c:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
9000ee1e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
9000ee22:	bd38      	pop	{r3, r4, r5, pc}

9000ee24 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
9000ee24:	4770      	bx	lr
9000ee26:	bf00      	nop

9000ee28 <HAL_TIM_Base_Init>:
  if (htim == NULL)
9000ee28:	2800      	cmp	r0, #0
9000ee2a:	f000 80a5 	beq.w	9000ef78 <HAL_TIM_Base_Init+0x150>
{
9000ee2e:	b538      	push	{r3, r4, r5, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
9000ee30:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000ee34:	4604      	mov	r4, r0
9000ee36:	f003 02ff 	and.w	r2, r3, #255	; 0xff
9000ee3a:	2b00      	cmp	r3, #0
9000ee3c:	d076      	beq.n	9000ef2c <HAL_TIM_Base_Init+0x104>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
9000ee3e:	6822      	ldr	r2, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000ee40:	2302      	movs	r3, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ee42:	494e      	ldr	r1, [pc, #312]	; (9000ef7c <HAL_TIM_Base_Init+0x154>)
9000ee44:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->State = HAL_TIM_STATE_BUSY;
9000ee48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ee4c:	eba2 0101 	sub.w	r1, r2, r1
  tmpcr1 = TIMx->CR1;
9000ee50:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ee52:	fab1 f181 	clz	r1, r1
9000ee56:	ea4f 1151 	mov.w	r1, r1, lsr #5
9000ee5a:	d027      	beq.n	9000eeac <HAL_TIM_Base_Init+0x84>
9000ee5c:	bb31      	cbnz	r1, 9000eeac <HAL_TIM_Base_Init+0x84>
9000ee5e:	4848      	ldr	r0, [pc, #288]	; (9000ef80 <HAL_TIM_Base_Init+0x158>)
9000ee60:	4d48      	ldr	r5, [pc, #288]	; (9000ef84 <HAL_TIM_Base_Init+0x15c>)
9000ee62:	4282      	cmp	r2, r0
9000ee64:	d067      	beq.n	9000ef36 <HAL_TIM_Base_Init+0x10e>
9000ee66:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000ee6a:	4282      	cmp	r2, r0
9000ee6c:	d063      	beq.n	9000ef36 <HAL_TIM_Base_Init+0x10e>
9000ee6e:	1b55      	subs	r5, r2, r5
9000ee70:	f500 6080 	add.w	r0, r0, #1024	; 0x400
9000ee74:	fab5 f585 	clz	r5, r5
9000ee78:	4282      	cmp	r2, r0
9000ee7a:	ea4f 1555 	mov.w	r5, r5, lsr #5
9000ee7e:	d063      	beq.n	9000ef48 <HAL_TIM_Base_Init+0x120>
9000ee80:	2d00      	cmp	r5, #0
9000ee82:	d161      	bne.n	9000ef48 <HAL_TIM_Base_Init+0x120>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000ee84:	4840      	ldr	r0, [pc, #256]	; (9000ef88 <HAL_TIM_Base_Init+0x160>)
9000ee86:	4941      	ldr	r1, [pc, #260]	; (9000ef8c <HAL_TIM_Base_Init+0x164>)
9000ee88:	428a      	cmp	r2, r1
9000ee8a:	bf18      	it	ne
9000ee8c:	4282      	cmpne	r2, r0
9000ee8e:	d065      	beq.n	9000ef5c <HAL_TIM_Base_Init+0x134>
9000ee90:	f501 6180 	add.w	r1, r1, #1024	; 0x400
9000ee94:	428a      	cmp	r2, r1
9000ee96:	d061      	beq.n	9000ef5c <HAL_TIM_Base_Init+0x134>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ee98:	69a0      	ldr	r0, [r4, #24]
9000ee9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ee9e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000eea0:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000eea2:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
9000eea4:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000eea6:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000eea8:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000eeaa:	e023      	b.n	9000eef4 <HAL_TIM_Base_Init+0xcc>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000eeac:	4d35      	ldr	r5, [pc, #212]	; (9000ef84 <HAL_TIM_Base_Init+0x15c>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000eeae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000eeb2:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000eeb4:	1b55      	subs	r5, r2, r5
    tmpcr1 |= Structure->CounterMode;
9000eeb6:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000eeb8:	fab5 f585 	clz	r5, r5
9000eebc:	096d      	lsrs	r5, r5, #5
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000eebe:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000eec0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000eec4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000eec6:	69a0      	ldr	r0, [r4, #24]
9000eec8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000eecc:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
9000eece:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000eed0:	68e3      	ldr	r3, [r4, #12]
9000eed2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000eed4:	6863      	ldr	r3, [r4, #4]
9000eed6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000eed8:	b951      	cbnz	r1, 9000eef0 <HAL_TIM_Base_Init+0xc8>
9000eeda:	b94d      	cbnz	r5, 9000eef0 <HAL_TIM_Base_Init+0xc8>
9000eedc:	492a      	ldr	r1, [pc, #168]	; (9000ef88 <HAL_TIM_Base_Init+0x160>)
9000eede:	4b2b      	ldr	r3, [pc, #172]	; (9000ef8c <HAL_TIM_Base_Init+0x164>)
9000eee0:	429a      	cmp	r2, r3
9000eee2:	bf18      	it	ne
9000eee4:	428a      	cmpne	r2, r1
9000eee6:	d003      	beq.n	9000eef0 <HAL_TIM_Base_Init+0xc8>
9000eee8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
9000eeec:	429a      	cmp	r2, r3
9000eeee:	d101      	bne.n	9000eef4 <HAL_TIM_Base_Init+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
9000eef0:	6963      	ldr	r3, [r4, #20]
9000eef2:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
9000eef4:	2301      	movs	r3, #1
  return HAL_OK;
9000eef6:	2000      	movs	r0, #0
  TIMx->EGR = TIM_EGR_UG;
9000eef8:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
9000eefa:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000eefe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
9000ef02:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
9000ef06:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
9000ef0a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
9000ef0e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
9000ef12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
9000ef16:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
9000ef1a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
9000ef1e:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
9000ef22:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
9000ef26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
9000ef2a:	bd38      	pop	{r3, r4, r5, pc}
    htim->Lock = HAL_UNLOCKED;
9000ef2c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
9000ef30:	f7ff ff78 	bl	9000ee24 <HAL_TIM_Base_MspInit>
9000ef34:	e783      	b.n	9000ee3e <HAL_TIM_Base_Init+0x16>
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ef36:	1b55      	subs	r5, r2, r5
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000ef38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000ef3c:	68a0      	ldr	r0, [r4, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ef3e:	fab5 f585 	clz	r5, r5
    tmpcr1 |= Structure->CounterMode;
9000ef42:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ef44:	096d      	lsrs	r5, r5, #5
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000ef46:	e7ba      	b.n	9000eebe <HAL_TIM_Base_Init+0x96>
    tmpcr1 |= Structure->CounterMode;
9000ef48:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
9000ef4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
9000ef4e:	4303      	orrs	r3, r0
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
9000ef50:	480f      	ldr	r0, [pc, #60]	; (9000ef90 <HAL_TIM_Base_Init+0x168>)
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
9000ef52:	4282      	cmp	r2, r0
9000ef54:	d0b3      	beq.n	9000eebe <HAL_TIM_Base_Init+0x96>
9000ef56:	2d00      	cmp	r5, #0
9000ef58:	d1b1      	bne.n	9000eebe <HAL_TIM_Base_Init+0x96>
9000ef5a:	e793      	b.n	9000ee84 <HAL_TIM_Base_Init+0x5c>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000ef5c:	6920      	ldr	r0, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
9000ef5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ef62:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
9000ef64:	4303      	orrs	r3, r0
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ef66:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
9000ef68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
9000ef6c:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
9000ef6e:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
9000ef70:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
9000ef72:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
9000ef74:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
9000ef76:	e7b1      	b.n	9000eedc <HAL_TIM_Base_Init+0xb4>
    return HAL_ERROR;
9000ef78:	2001      	movs	r0, #1
}
9000ef7a:	4770      	bx	lr
9000ef7c:	40010000 	.word	0x40010000
9000ef80:	40000400 	.word	0x40000400
9000ef84:	40010400 	.word	0x40010400
9000ef88:	40014000 	.word	0x40014000
9000ef8c:	40014400 	.word	0x40014400
9000ef90:	40000c00 	.word	0x40000c00

9000ef94 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
9000ef94:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
9000ef98:	2b01      	cmp	r3, #1
9000ef9a:	d141      	bne.n	9000f020 <HAL_TIM_Base_Start_IT+0x8c>
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000ef9c:	6802      	ldr	r2, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
9000ef9e:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000efa0:	4b24      	ldr	r3, [pc, #144]	; (9000f034 <HAL_TIM_Base_Start_IT+0xa0>)
9000efa2:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
9000efa6:	bf18      	it	ne
9000efa8:	429a      	cmpne	r2, r3
{
9000efaa:	b430      	push	{r4, r5}
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000efac:	bf0c      	ite	eq
9000efae:	2301      	moveq	r3, #1
9000efb0:	2300      	movne	r3, #0
9000efb2:	4d21      	ldr	r5, [pc, #132]	; (9000f038 <HAL_TIM_Base_Start_IT+0xa4>)
9000efb4:	4c21      	ldr	r4, [pc, #132]	; (9000f03c <HAL_TIM_Base_Start_IT+0xa8>)
9000efb6:	42aa      	cmp	r2, r5
9000efb8:	bf08      	it	eq
9000efba:	f043 0301 	orreq.w	r3, r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
9000efbe:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000efc2:	68d1      	ldr	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000efc4:	42a2      	cmp	r2, r4
9000efc6:	bf08      	it	eq
9000efc8:	f043 0301 	orreq.w	r3, r3, #1
9000efcc:	f504 6480 	add.w	r4, r4, #1024	; 0x400
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000efd0:	f041 0101 	orr.w	r1, r1, #1
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000efd4:	481a      	ldr	r0, [pc, #104]	; (9000f040 <HAL_TIM_Base_Start_IT+0xac>)
9000efd6:	42a2      	cmp	r2, r4
9000efd8:	bf08      	it	eq
9000efda:	f043 0301 	orreq.w	r3, r3, #1
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
9000efde:	60d1      	str	r1, [r2, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
9000efe0:	4282      	cmp	r2, r0
9000efe2:	bf08      	it	eq
9000efe4:	f043 0301 	orreq.w	r3, r3, #1
9000efe8:	4916      	ldr	r1, [pc, #88]	; (9000f044 <HAL_TIM_Base_Start_IT+0xb0>)
9000efea:	428a      	cmp	r2, r1
9000efec:	bf08      	it	eq
9000efee:	f043 0301 	orreq.w	r3, r3, #1
9000eff2:	b933      	cbnz	r3, 9000f002 <HAL_TIM_Base_Start_IT+0x6e>
9000eff4:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
9000eff8:	1a10      	subs	r0, r2, r0
9000effa:	fab0 f080 	clz	r0, r0
9000effe:	0940      	lsrs	r0, r0, #5
9000f000:	b198      	cbz	r0, 9000f02a <HAL_TIM_Base_Start_IT+0x96>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
9000f002:	6891      	ldr	r1, [r2, #8]
9000f004:	4b10      	ldr	r3, [pc, #64]	; (9000f048 <HAL_TIM_Base_Start_IT+0xb4>)
9000f006:	400b      	ands	r3, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
9000f008:	2b06      	cmp	r3, #6
9000f00a:	d00b      	beq.n	9000f024 <HAL_TIM_Base_Start_IT+0x90>
9000f00c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
9000f010:	d008      	beq.n	9000f024 <HAL_TIM_Base_Start_IT+0x90>
      __HAL_TIM_ENABLE(htim);
9000f012:	6813      	ldr	r3, [r2, #0]
  return HAL_OK;
9000f014:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
9000f016:	f043 0301 	orr.w	r3, r3, #1
9000f01a:	6013      	str	r3, [r2, #0]
}
9000f01c:	bc30      	pop	{r4, r5}
9000f01e:	4770      	bx	lr
    return HAL_ERROR;
9000f020:	2001      	movs	r0, #1
}
9000f022:	4770      	bx	lr
  return HAL_OK;
9000f024:	2000      	movs	r0, #0
}
9000f026:	bc30      	pop	{r4, r5}
9000f028:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
9000f02a:	6813      	ldr	r3, [r2, #0]
9000f02c:	f043 0301 	orr.w	r3, r3, #1
9000f030:	6013      	str	r3, [r2, #0]
9000f032:	e7f3      	b.n	9000f01c <HAL_TIM_Base_Start_IT+0x88>
9000f034:	40010000 	.word	0x40010000
9000f038:	40000400 	.word	0x40000400
9000f03c:	40000800 	.word	0x40000800
9000f040:	40010400 	.word	0x40010400
9000f044:	40001800 	.word	0x40001800
9000f048:	00010007 	.word	0x00010007

9000f04c <HAL_TIM_OC_DelayElapsedCallback>:
9000f04c:	4770      	bx	lr
9000f04e:	bf00      	nop

9000f050 <HAL_TIM_IC_CaptureCallback>:
9000f050:	4770      	bx	lr
9000f052:	bf00      	nop

9000f054 <HAL_TIM_PWM_PulseFinishedCallback>:
9000f054:	4770      	bx	lr
9000f056:	bf00      	nop

9000f058 <HAL_TIM_TriggerCallback>:
9000f058:	4770      	bx	lr
9000f05a:	bf00      	nop

9000f05c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000f05c:	6803      	ldr	r3, [r0, #0]
9000f05e:	691a      	ldr	r2, [r3, #16]
9000f060:	0791      	lsls	r1, r2, #30
{
9000f062:	b510      	push	{r4, lr}
9000f064:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
9000f066:	d502      	bpl.n	9000f06e <HAL_TIM_IRQHandler+0x12>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
9000f068:	68da      	ldr	r2, [r3, #12]
9000f06a:	0792      	lsls	r2, r2, #30
9000f06c:	d468      	bmi.n	9000f140 <HAL_TIM_IRQHandler+0xe4>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000f06e:	691a      	ldr	r2, [r3, #16]
9000f070:	0752      	lsls	r2, r2, #29
9000f072:	d502      	bpl.n	9000f07a <HAL_TIM_IRQHandler+0x1e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
9000f074:	68da      	ldr	r2, [r3, #12]
9000f076:	0750      	lsls	r0, r2, #29
9000f078:	d44f      	bmi.n	9000f11a <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000f07a:	691a      	ldr	r2, [r3, #16]
9000f07c:	0711      	lsls	r1, r2, #28
9000f07e:	d502      	bpl.n	9000f086 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
9000f080:	68da      	ldr	r2, [r3, #12]
9000f082:	0712      	lsls	r2, r2, #28
9000f084:	d437      	bmi.n	9000f0f6 <HAL_TIM_IRQHandler+0x9a>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000f086:	691a      	ldr	r2, [r3, #16]
9000f088:	06d0      	lsls	r0, r2, #27
9000f08a:	d502      	bpl.n	9000f092 <HAL_TIM_IRQHandler+0x36>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
9000f08c:	68da      	ldr	r2, [r3, #12]
9000f08e:	06d1      	lsls	r1, r2, #27
9000f090:	d41e      	bmi.n	9000f0d0 <HAL_TIM_IRQHandler+0x74>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000f092:	691a      	ldr	r2, [r3, #16]
9000f094:	07d2      	lsls	r2, r2, #31
9000f096:	d502      	bpl.n	9000f09e <HAL_TIM_IRQHandler+0x42>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
9000f098:	68da      	ldr	r2, [r3, #12]
9000f09a:	07d0      	lsls	r0, r2, #31
9000f09c:	d469      	bmi.n	9000f172 <HAL_TIM_IRQHandler+0x116>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000f09e:	691a      	ldr	r2, [r3, #16]
9000f0a0:	0611      	lsls	r1, r2, #24
9000f0a2:	d502      	bpl.n	9000f0aa <HAL_TIM_IRQHandler+0x4e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000f0a4:	68da      	ldr	r2, [r3, #12]
9000f0a6:	0612      	lsls	r2, r2, #24
9000f0a8:	d46b      	bmi.n	9000f182 <HAL_TIM_IRQHandler+0x126>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000f0aa:	691a      	ldr	r2, [r3, #16]
9000f0ac:	05d0      	lsls	r0, r2, #23
9000f0ae:	d502      	bpl.n	9000f0b6 <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
9000f0b0:	68da      	ldr	r2, [r3, #12]
9000f0b2:	0611      	lsls	r1, r2, #24
9000f0b4:	d46d      	bmi.n	9000f192 <HAL_TIM_IRQHandler+0x136>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000f0b6:	691a      	ldr	r2, [r3, #16]
9000f0b8:	0652      	lsls	r2, r2, #25
9000f0ba:	d502      	bpl.n	9000f0c2 <HAL_TIM_IRQHandler+0x66>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
9000f0bc:	68da      	ldr	r2, [r3, #12]
9000f0be:	0650      	lsls	r0, r2, #25
9000f0c0:	d46f      	bmi.n	9000f1a2 <HAL_TIM_IRQHandler+0x146>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000f0c2:	691a      	ldr	r2, [r3, #16]
9000f0c4:	0691      	lsls	r1, r2, #26
9000f0c6:	d502      	bpl.n	9000f0ce <HAL_TIM_IRQHandler+0x72>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
9000f0c8:	68da      	ldr	r2, [r3, #12]
9000f0ca:	0692      	lsls	r2, r2, #26
9000f0cc:	d449      	bmi.n	9000f162 <HAL_TIM_IRQHandler+0x106>
}
9000f0ce:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000f0d0:	f06f 0110 	mvn.w	r1, #16
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000f0d4:	2208      	movs	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
9000f0d6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
9000f0d8:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
9000f0da:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
9000f0dc:	69db      	ldr	r3, [r3, #28]
9000f0de:	f413 7f40 	tst.w	r3, #768	; 0x300
9000f0e2:	d16f      	bne.n	9000f1c4 <HAL_TIM_IRQHandler+0x168>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000f0e4:	f7ff ffb2 	bl	9000f04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000f0e8:	4620      	mov	r0, r4
9000f0ea:	f7ff ffb3 	bl	9000f054 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f0ee:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
9000f0f0:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f0f2:	7722      	strb	r2, [r4, #28]
9000f0f4:	e7cd      	b.n	9000f092 <HAL_TIM_IRQHandler+0x36>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000f0f6:	f06f 0108 	mvn.w	r1, #8
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000f0fa:	2204      	movs	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
9000f0fc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
9000f0fe:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
9000f100:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
9000f102:	69db      	ldr	r3, [r3, #28]
9000f104:	079b      	lsls	r3, r3, #30
9000f106:	d15a      	bne.n	9000f1be <HAL_TIM_IRQHandler+0x162>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000f108:	f7ff ffa0 	bl	9000f04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000f10c:	4620      	mov	r0, r4
9000f10e:	f7ff ffa1 	bl	9000f054 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f112:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
9000f114:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f116:	7722      	strb	r2, [r4, #28]
9000f118:	e7b5      	b.n	9000f086 <HAL_TIM_IRQHandler+0x2a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000f11a:	f06f 0104 	mvn.w	r1, #4
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000f11e:	2202      	movs	r2, #2
        HAL_TIM_IC_CaptureCallback(htim);
9000f120:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
9000f122:	6119      	str	r1, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
9000f124:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
9000f126:	699b      	ldr	r3, [r3, #24]
9000f128:	f413 7f40 	tst.w	r3, #768	; 0x300
9000f12c:	d144      	bne.n	9000f1b8 <HAL_TIM_IRQHandler+0x15c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
9000f12e:	f7ff ff8d 	bl	9000f04c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
9000f132:	4620      	mov	r0, r4
9000f134:	f7ff ff8e 	bl	9000f054 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f138:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
9000f13a:	6823      	ldr	r3, [r4, #0]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f13c:	7722      	strb	r2, [r4, #28]
9000f13e:	e79c      	b.n	9000f07a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000f140:	f06f 0102 	mvn.w	r1, #2
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000f144:	2201      	movs	r2, #1
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
9000f146:	6119      	str	r1, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
9000f148:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
9000f14a:	699b      	ldr	r3, [r3, #24]
9000f14c:	0799      	lsls	r1, r3, #30
9000f14e:	d130      	bne.n	9000f1b2 <HAL_TIM_IRQHandler+0x156>
          HAL_TIM_OC_DelayElapsedCallback(htim);
9000f150:	f7ff ff7c 	bl	9000f04c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
9000f154:	4620      	mov	r0, r4
9000f156:	f7ff ff7d 	bl	9000f054 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f15a:	2200      	movs	r2, #0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
9000f15c:	6823      	ldr	r3, [r4, #0]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
9000f15e:	7722      	strb	r2, [r4, #28]
9000f160:	e785      	b.n	9000f06e <HAL_TIM_IRQHandler+0x12>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000f162:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
9000f166:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
9000f168:	611a      	str	r2, [r3, #16]
}
9000f16a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
9000f16e:	f000 b82d 	b.w	9000f1cc <HAL_TIMEx_CommutCallback>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000f172:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
9000f176:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
9000f178:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
9000f17a:	f7f5 fb3f 	bl	900047fc <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
9000f17e:	6823      	ldr	r3, [r4, #0]
9000f180:	e78d      	b.n	9000f09e <HAL_TIM_IRQHandler+0x42>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000f182:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
9000f186:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
9000f188:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
9000f18a:	f000 f821 	bl	9000f1d0 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
9000f18e:	6823      	ldr	r3, [r4, #0]
9000f190:	e78b      	b.n	9000f0aa <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000f192:	f46f 7280 	mvn.w	r2, #256	; 0x100
      HAL_TIMEx_Break2Callback(htim);
9000f196:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
9000f198:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
9000f19a:	f000 f81b 	bl	9000f1d4 <HAL_TIMEx_Break2Callback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
9000f19e:	6823      	ldr	r3, [r4, #0]
9000f1a0:	e789      	b.n	9000f0b6 <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000f1a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
9000f1a6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
9000f1a8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
9000f1aa:	f7ff ff55 	bl	9000f058 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
9000f1ae:	6823      	ldr	r3, [r4, #0]
9000f1b0:	e787      	b.n	9000f0c2 <HAL_TIM_IRQHandler+0x66>
          HAL_TIM_IC_CaptureCallback(htim);
9000f1b2:	f7ff ff4d 	bl	9000f050 <HAL_TIM_IC_CaptureCallback>
9000f1b6:	e7d0      	b.n	9000f15a <HAL_TIM_IRQHandler+0xfe>
        HAL_TIM_IC_CaptureCallback(htim);
9000f1b8:	f7ff ff4a 	bl	9000f050 <HAL_TIM_IC_CaptureCallback>
9000f1bc:	e7bc      	b.n	9000f138 <HAL_TIM_IRQHandler+0xdc>
        HAL_TIM_IC_CaptureCallback(htim);
9000f1be:	f7ff ff47 	bl	9000f050 <HAL_TIM_IC_CaptureCallback>
9000f1c2:	e7a6      	b.n	9000f112 <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_IC_CaptureCallback(htim);
9000f1c4:	f7ff ff44 	bl	9000f050 <HAL_TIM_IC_CaptureCallback>
9000f1c8:	e791      	b.n	9000f0ee <HAL_TIM_IRQHandler+0x92>
9000f1ca:	bf00      	nop

9000f1cc <HAL_TIMEx_CommutCallback>:
9000f1cc:	4770      	bx	lr
9000f1ce:	bf00      	nop

9000f1d0 <HAL_TIMEx_BreakCallback>:
9000f1d0:	4770      	bx	lr
9000f1d2:	bf00      	nop

9000f1d4 <HAL_TIMEx_Break2Callback>:
9000f1d4:	4770      	bx	lr
9000f1d6:	bf00      	nop

9000f1d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
9000f1d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9000f1dc:	461d      	mov	r5, r3
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
9000f1de:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
9000f1e2:	2b20      	cmp	r3, #32
9000f1e4:	f040 8091 	bne.w	9000f30a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
9000f1e8:	4688      	mov	r8, r1
9000f1ea:	2900      	cmp	r1, #0
9000f1ec:	d03e      	beq.n	9000f26c <HAL_UART_Transmit+0x94>
9000f1ee:	fab2 f982 	clz	r9, r2
9000f1f2:	4616      	mov	r6, r2
9000f1f4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9000f1f8:	2a00      	cmp	r2, #0
9000f1fa:	d037      	beq.n	9000f26c <HAL_UART_Transmit+0x94>
    {
      return  HAL_ERROR;
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000f1fc:	2321      	movs	r3, #33	; 0x21
9000f1fe:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
9000f200:	f8c0 9090 	str.w	r9, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
9000f204:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
9000f208:	f7fa fbc2 	bl	90009990 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000f20c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
9000f20e:	4607      	mov	r7, r0
    huart->TxXferSize  = Size;
9000f210:	f8a4 6054 	strh.w	r6, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000f214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
9000f218:	f8a4 6056 	strh.w	r6, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000f21c:	f000 80b7 	beq.w	9000f38e <HAL_UART_Transmit+0x1b6>
    {
      pdata8bits  = pData;
      pdata16bits = NULL;
    }

    while (huart->TxXferCount > 0U)
9000f220:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000f224:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
9000f226:	b29b      	uxth	r3, r3
9000f228:	b1ab      	cbz	r3, 9000f256 <HAL_UART_Transmit+0x7e>
9000f22a:	1c6a      	adds	r2, r5, #1
9000f22c:	d121      	bne.n	9000f272 <HAL_UART_Transmit+0x9a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000f22e:	69c2      	ldr	r2, [r0, #28]
9000f230:	0613      	lsls	r3, r2, #24
9000f232:	d5fc      	bpl.n	9000f22e <HAL_UART_Transmit+0x56>
      if (pdata8bits == NULL)
9000f234:	f1b8 0f00 	cmp.w	r8, #0
9000f238:	d062      	beq.n	9000f300 <HAL_UART_Transmit+0x128>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
9000f23a:	f818 3b01 	ldrb.w	r3, [r8], #1
9000f23e:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
9000f240:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
9000f244:	3b01      	subs	r3, #1
9000f246:	b29b      	uxth	r3, r3
9000f248:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
9000f24c:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
9000f250:	b29b      	uxth	r3, r3
9000f252:	2b00      	cmp	r3, #0
9000f254:	d1e9      	bne.n	9000f22a <HAL_UART_Transmit+0x52>
9000f256:	1c69      	adds	r1, r5, #1
9000f258:	d15a      	bne.n	9000f310 <HAL_UART_Transmit+0x138>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000f25a:	69c3      	ldr	r3, [r0, #28]
9000f25c:	065a      	lsls	r2, r3, #25
9000f25e:	d5fc      	bpl.n	9000f25a <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
9000f260:	2320      	movs	r3, #32
    return HAL_OK;
9000f262:	2000      	movs	r0, #0
    huart->gState = HAL_UART_STATE_READY;
9000f264:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
9000f268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
9000f26c:	2001      	movs	r0, #1
}
9000f26e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000f272:	69c3      	ldr	r3, [r0, #28]
9000f274:	061e      	lsls	r6, r3, #24
9000f276:	d4dd      	bmi.n	9000f234 <HAL_UART_Transmit+0x5c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000f278:	f7fa fb8a 	bl	90009990 <HAL_GetTick>
9000f27c:	1bc0      	subs	r0, r0, r7
9000f27e:	4285      	cmp	r5, r0
9000f280:	d338      	bcc.n	9000f2f4 <HAL_UART_Transmit+0x11c>
9000f282:	2d00      	cmp	r5, #0
9000f284:	d036      	beq.n	9000f2f4 <HAL_UART_Transmit+0x11c>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000f286:	6823      	ldr	r3, [r4, #0]
9000f288:	681a      	ldr	r2, [r3, #0]
9000f28a:	4618      	mov	r0, r3
9000f28c:	0752      	lsls	r2, r2, #29
9000f28e:	d5cc      	bpl.n	9000f22a <HAL_UART_Transmit+0x52>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000f290:	69da      	ldr	r2, [r3, #28]
9000f292:	0716      	lsls	r6, r2, #28
9000f294:	f100 808b 	bmi.w	9000f3ae <HAL_UART_Transmit+0x1d6>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000f298:	69da      	ldr	r2, [r3, #28]
9000f29a:	0511      	lsls	r1, r2, #20
9000f29c:	d5c5      	bpl.n	9000f22a <HAL_UART_Transmit+0x52>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000f29e:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000f2a2:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f2a4:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f2a8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f2ac:	e843 2100 	strex	r1, r2, [r3]
9000f2b0:	b139      	cbz	r1, 9000f2c2 <HAL_UART_Transmit+0xea>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f2b2:	e853 2f00 	ldrex	r2, [r3]
9000f2b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f2ba:	e843 2100 	strex	r1, r2, [r3]
9000f2be:	2900      	cmp	r1, #0
9000f2c0:	d1f7      	bne.n	9000f2b2 <HAL_UART_Transmit+0xda>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f2c2:	4863      	ldr	r0, [pc, #396]	; (9000f450 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f2c4:	f103 0208 	add.w	r2, r3, #8
9000f2c8:	e852 2f00 	ldrex	r2, [r2]
9000f2cc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f2ce:	f103 0508 	add.w	r5, r3, #8
9000f2d2:	e845 2100 	strex	r1, r2, [r5]
9000f2d6:	2900      	cmp	r1, #0
9000f2d8:	d1f4      	bne.n	9000f2c4 <HAL_UART_Transmit+0xec>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f2da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000f2dc:	2a01      	cmp	r2, #1
9000f2de:	d05d      	beq.n	9000f39c <HAL_UART_Transmit+0x1c4>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f2e0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
9000f2e2:	2220      	movs	r2, #32

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
9000f2e4:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
9000f2e6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
9000f2ea:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f2ee:	66e3      	str	r3, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
9000f2f0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
      huart->gState = HAL_UART_STATE_READY;
9000f2f4:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
9000f2f6:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
9000f2f8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
9000f2fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
9000f300:	f839 3b02 	ldrh.w	r3, [r9], #2
9000f304:	f3c3 0308 	ubfx	r3, r3, #0, #9
9000f308:	e799      	b.n	9000f23e <HAL_UART_Transmit+0x66>
    return HAL_BUSY;
9000f30a:	2002      	movs	r0, #2
}
9000f30c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9000f310:	69c3      	ldr	r3, [r0, #28]
9000f312:	065b      	lsls	r3, r3, #25
9000f314:	d4a4      	bmi.n	9000f260 <HAL_UART_Transmit+0x88>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
9000f316:	f7fa fb3b 	bl	90009990 <HAL_GetTick>
9000f31a:	1bc0      	subs	r0, r0, r7
9000f31c:	4285      	cmp	r5, r0
9000f31e:	d3e9      	bcc.n	9000f2f4 <HAL_UART_Transmit+0x11c>
9000f320:	2d00      	cmp	r5, #0
9000f322:	d0e7      	beq.n	9000f2f4 <HAL_UART_Transmit+0x11c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9000f324:	6823      	ldr	r3, [r4, #0]
9000f326:	681a      	ldr	r2, [r3, #0]
9000f328:	4618      	mov	r0, r3
9000f32a:	0751      	lsls	r1, r2, #29
9000f32c:	d593      	bpl.n	9000f256 <HAL_UART_Transmit+0x7e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9000f32e:	69da      	ldr	r2, [r3, #28]
9000f330:	0712      	lsls	r2, r2, #28
9000f332:	d46a      	bmi.n	9000f40a <HAL_UART_Transmit+0x232>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
9000f334:	69da      	ldr	r2, [r3, #28]
9000f336:	0516      	lsls	r6, r2, #20
9000f338:	d58d      	bpl.n	9000f256 <HAL_UART_Transmit+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000f33a:	f44f 6200 	mov.w	r2, #2048	; 0x800
9000f33e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f340:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f344:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f348:	e843 2100 	strex	r1, r2, [r3]
9000f34c:	b139      	cbz	r1, 9000f35e <HAL_UART_Transmit+0x186>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f34e:	e853 2f00 	ldrex	r2, [r3]
9000f352:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f356:	e843 2100 	strex	r1, r2, [r3]
9000f35a:	2900      	cmp	r1, #0
9000f35c:	d1f7      	bne.n	9000f34e <HAL_UART_Transmit+0x176>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f35e:	493c      	ldr	r1, [pc, #240]	; (9000f450 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f360:	f103 0208 	add.w	r2, r3, #8
9000f364:	e852 2f00 	ldrex	r2, [r2]
9000f368:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f36a:	f103 0508 	add.w	r5, r3, #8
9000f36e:	e845 2000 	strex	r0, r2, [r5]
9000f372:	2800      	cmp	r0, #0
9000f374:	d1f4      	bne.n	9000f360 <HAL_UART_Transmit+0x188>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f376:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000f378:	2a01      	cmp	r2, #1
9000f37a:	d1b1      	bne.n	9000f2e0 <HAL_UART_Transmit+0x108>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f37c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f380:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f384:	e843 2100 	strex	r1, r2, [r3]
9000f388:	2900      	cmp	r1, #0
9000f38a:	d1f7      	bne.n	9000f37c <HAL_UART_Transmit+0x1a4>
9000f38c:	e7a8      	b.n	9000f2e0 <HAL_UART_Transmit+0x108>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9000f38e:	6923      	ldr	r3, [r4, #16]
9000f390:	2b00      	cmp	r3, #0
9000f392:	f47f af45 	bne.w	9000f220 <HAL_UART_Transmit+0x48>
9000f396:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
9000f398:	4698      	mov	r8, r3
9000f39a:	e741      	b.n	9000f220 <HAL_UART_Transmit+0x48>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f39c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f3a0:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f3a4:	e843 2100 	strex	r1, r2, [r3]
9000f3a8:	2900      	cmp	r1, #0
9000f3aa:	d1f7      	bne.n	9000f39c <HAL_UART_Transmit+0x1c4>
9000f3ac:	e798      	b.n	9000f2e0 <HAL_UART_Transmit+0x108>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000f3ae:	2208      	movs	r2, #8
9000f3b0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f3b2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f3b6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f3ba:	e843 2100 	strex	r1, r2, [r3]
9000f3be:	2900      	cmp	r1, #0
9000f3c0:	d1f7      	bne.n	9000f3b2 <HAL_UART_Transmit+0x1da>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f3c2:	4823      	ldr	r0, [pc, #140]	; (9000f450 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f3c4:	f103 0208 	add.w	r2, r3, #8
9000f3c8:	e852 2f00 	ldrex	r2, [r2]
9000f3cc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f3ce:	f103 0508 	add.w	r5, r3, #8
9000f3d2:	e845 2100 	strex	r1, r2, [r5]
9000f3d6:	2900      	cmp	r1, #0
9000f3d8:	d1f4      	bne.n	9000f3c4 <HAL_UART_Transmit+0x1ec>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f3da:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000f3dc:	2a01      	cmp	r2, #1
9000f3de:	d00b      	beq.n	9000f3f8 <HAL_UART_Transmit+0x220>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f3e0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
9000f3e2:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000f3e4:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
9000f3e6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
9000f3ea:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f3ec:	66e3      	str	r3, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
9000f3ee:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
9000f3f2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
           return HAL_ERROR;
9000f3f6:	e77d      	b.n	9000f2f4 <HAL_UART_Transmit+0x11c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f3f8:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f3fc:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f400:	e843 2100 	strex	r1, r2, [r3]
9000f404:	2900      	cmp	r1, #0
9000f406:	d1f7      	bne.n	9000f3f8 <HAL_UART_Transmit+0x220>
9000f408:	e7ea      	b.n	9000f3e0 <HAL_UART_Transmit+0x208>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000f40a:	2208      	movs	r2, #8
9000f40c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f40e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f412:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f416:	e843 2100 	strex	r1, r2, [r3]
9000f41a:	2900      	cmp	r1, #0
9000f41c:	d1f7      	bne.n	9000f40e <HAL_UART_Transmit+0x236>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f41e:	490c      	ldr	r1, [pc, #48]	; (9000f450 <HAL_UART_Transmit+0x278>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f420:	f103 0208 	add.w	r2, r3, #8
9000f424:	e852 2f00 	ldrex	r2, [r2]
9000f428:	400a      	ands	r2, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f42a:	f103 0508 	add.w	r5, r3, #8
9000f42e:	e845 2000 	strex	r0, r2, [r5]
9000f432:	2800      	cmp	r0, #0
9000f434:	d1f4      	bne.n	9000f420 <HAL_UART_Transmit+0x248>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f436:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000f438:	2a01      	cmp	r2, #1
9000f43a:	d1d1      	bne.n	9000f3e0 <HAL_UART_Transmit+0x208>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f43c:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f440:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f444:	e843 2100 	strex	r1, r2, [r3]
9000f448:	2900      	cmp	r1, #0
9000f44a:	d1f7      	bne.n	9000f43c <HAL_UART_Transmit+0x264>
9000f44c:	e7c8      	b.n	9000f3e0 <HAL_UART_Transmit+0x208>
9000f44e:	bf00      	nop
9000f450:	effffffe 	.word	0xeffffffe

9000f454 <HAL_UART_TxCpltCallback>:
9000f454:	4770      	bx	lr
9000f456:	bf00      	nop

9000f458 <HAL_UART_RxCpltCallback>:
9000f458:	4770      	bx	lr
9000f45a:	bf00      	nop

9000f45c <HAL_UART_ErrorCallback>:
9000f45c:	4770      	bx	lr
9000f45e:	bf00      	nop

9000f460 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
9000f460:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
9000f462:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0U;
9000f464:	2300      	movs	r3, #0
9000f466:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
9000f46a:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
9000f46e:	f7ff fff5 	bl	9000f45c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
9000f472:	bd08      	pop	{r3, pc}

9000f474 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
9000f474:	6803      	ldr	r3, [r0, #0]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
9000f476:	f640 0c0f 	movw	ip, #2063	; 0x80f
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
9000f47a:	69da      	ldr	r2, [r3, #28]
  if (errorflags == 0U)
9000f47c:	ea12 0f0c 	tst.w	r2, ip
{
9000f480:	b570      	push	{r4, r5, r6, lr}
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
9000f482:	681d      	ldr	r5, [r3, #0]
{
9000f484:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
9000f486:	6899      	ldr	r1, [r3, #8]
  if (errorflags == 0U)
9000f488:	f000 8121 	beq.w	9000f6ce <HAL_UART_IRQHandler+0x25a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
9000f48c:	4eb1      	ldr	r6, [pc, #708]	; (9000f754 <HAL_UART_IRQHandler+0x2e0>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
9000f48e:	48b2      	ldr	r0, [pc, #712]	; (9000f758 <HAL_UART_IRQHandler+0x2e4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
9000f490:	ea05 0c06 	and.w	ip, r5, r6
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
9000f494:	4008      	ands	r0, r1
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
9000f496:	ea5c 0600 	orrs.w	r6, ip, r0
9000f49a:	f040 8089 	bne.w	9000f5b0 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f49e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
9000f4a0:	2801      	cmp	r0, #1
9000f4a2:	d022      	beq.n	9000f4ea <HAL_UART_IRQHandler+0x76>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
9000f4a4:	02d0      	lsls	r0, r2, #11
9000f4a6:	d502      	bpl.n	9000f4ae <HAL_UART_IRQHandler+0x3a>
9000f4a8:	024e      	lsls	r6, r1, #9
9000f4aa:	f100 8139 	bmi.w	9000f720 <HAL_UART_IRQHandler+0x2ac>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
9000f4ae:	0610      	lsls	r0, r2, #24
9000f4b0:	d506      	bpl.n	9000f4c0 <HAL_UART_IRQHandler+0x4c>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
9000f4b2:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
9000f4b6:	f005 0080 	and.w	r0, r5, #128	; 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
9000f4ba:	4301      	orrs	r1, r0
9000f4bc:	f040 8128 	bne.w	9000f710 <HAL_UART_IRQHandler+0x29c>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
9000f4c0:	0651      	lsls	r1, r2, #25
9000f4c2:	d567      	bpl.n	9000f594 <HAL_UART_IRQHandler+0x120>
9000f4c4:	066e      	lsls	r6, r5, #25
9000f4c6:	d565      	bpl.n	9000f594 <HAL_UART_IRQHandler+0x120>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f4c8:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
9000f4cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f4d0:	e843 2100 	strex	r1, r2, [r3]
9000f4d4:	2900      	cmp	r1, #0
9000f4d6:	d1f7      	bne.n	9000f4c8 <HAL_UART_IRQHandler+0x54>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
9000f4d8:	2220      	movs	r2, #32

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
9000f4da:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
9000f4dc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
9000f4de:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  huart->TxISR = NULL;
9000f4e2:	67a3      	str	r3, [r4, #120]	; 0x78
  HAL_UART_TxCpltCallback(huart);
9000f4e4:	f7ff ffb6 	bl	9000f454 <HAL_UART_TxCpltCallback>
}
9000f4e8:	bd70      	pop	{r4, r5, r6, pc}
      && ((isrflags & USART_ISR_IDLE) != 0U)
9000f4ea:	06d0      	lsls	r0, r2, #27
9000f4ec:	d5da      	bpl.n	9000f4a4 <HAL_UART_IRQHandler+0x30>
      && ((cr1its & USART_ISR_IDLE) != 0U))
9000f4ee:	06ee      	lsls	r6, r5, #27
9000f4f0:	d5d8      	bpl.n	9000f4a4 <HAL_UART_IRQHandler+0x30>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000f4f2:	2210      	movs	r2, #16
9000f4f4:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000f4f6:	689a      	ldr	r2, [r3, #8]
9000f4f8:	0655      	lsls	r5, r2, #25
9000f4fa:	f140 813c 	bpl.w	9000f776 <HAL_UART_IRQHandler+0x302>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
9000f4fe:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000f502:	6801      	ldr	r1, [r0, #0]
9000f504:	684a      	ldr	r2, [r1, #4]
9000f506:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
9000f508:	2a00      	cmp	r2, #0
9000f50a:	d0ed      	beq.n	9000f4e8 <HAL_UART_IRQHandler+0x74>
          && (nb_remaining_rx_data < huart->RxXferSize))
9000f50c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9000f510:	4291      	cmp	r1, r2
9000f512:	d9e9      	bls.n	9000f4e8 <HAL_UART_IRQHandler+0x74>
        huart->RxXferCount = nb_remaining_rx_data;
9000f514:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
9000f518:	69c2      	ldr	r2, [r0, #28]
9000f51a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
9000f51e:	d02f      	beq.n	9000f580 <HAL_UART_IRQHandler+0x10c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f520:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000f524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f528:	e843 2100 	strex	r1, r2, [r3]
9000f52c:	2900      	cmp	r1, #0
9000f52e:	d1f7      	bne.n	9000f520 <HAL_UART_IRQHandler+0xac>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f530:	f103 0208 	add.w	r2, r3, #8
9000f534:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000f538:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f53c:	f103 0508 	add.w	r5, r3, #8
9000f540:	e845 2100 	strex	r1, r2, [r5]
9000f544:	2900      	cmp	r1, #0
9000f546:	d1f3      	bne.n	9000f530 <HAL_UART_IRQHandler+0xbc>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f548:	f103 0208 	add.w	r2, r3, #8
9000f54c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000f550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f554:	f103 0508 	add.w	r5, r3, #8
9000f558:	e845 2100 	strex	r1, r2, [r5]
9000f55c:	2900      	cmp	r1, #0
9000f55e:	d1f3      	bne.n	9000f548 <HAL_UART_IRQHandler+0xd4>
          huart->RxState = HAL_UART_STATE_READY;
9000f560:	2220      	movs	r2, #32
9000f562:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f566:	66e1      	str	r1, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f568:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f56c:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f570:	e843 2100 	strex	r1, r2, [r3]
9000f574:	2900      	cmp	r1, #0
9000f576:	d1f7      	bne.n	9000f568 <HAL_UART_IRQHandler+0xf4>
          (void)HAL_DMA_Abort(huart->hdmarx);
9000f578:	f7fa fb4e 	bl	90009c18 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000f57c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000f580:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000f582:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000f584:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
9000f586:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000f58a:	1ac9      	subs	r1, r1, r3
9000f58c:	b289      	uxth	r1, r1
9000f58e:	f7f4 fdbb 	bl	90004108 <HAL_UARTEx_RxEventCallback>
}
9000f592:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
9000f594:	0210      	lsls	r0, r2, #8
9000f596:	d502      	bpl.n	9000f59e <HAL_UART_IRQHandler+0x12a>
9000f598:	0069      	lsls	r1, r5, #1
9000f59a:	f100 80e7 	bmi.w	9000f76c <HAL_UART_IRQHandler+0x2f8>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
9000f59e:	01d3      	lsls	r3, r2, #7
9000f5a0:	d5a2      	bpl.n	9000f4e8 <HAL_UART_IRQHandler+0x74>
9000f5a2:	2d00      	cmp	r5, #0
9000f5a4:	daa0      	bge.n	9000f4e8 <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
9000f5a6:	4620      	mov	r0, r4
}
9000f5a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
9000f5ac:	f001 b896 	b.w	900106dc <HAL_UARTEx_RxFifoFullCallback>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000f5b0:	07d6      	lsls	r6, r2, #31
9000f5b2:	d509      	bpl.n	9000f5c8 <HAL_UART_IRQHandler+0x154>
9000f5b4:	05ee      	lsls	r6, r5, #23
9000f5b6:	d507      	bpl.n	9000f5c8 <HAL_UART_IRQHandler+0x154>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000f5b8:	2601      	movs	r6, #1
9000f5ba:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
9000f5bc:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
9000f5c0:	f046 0601 	orr.w	r6, r6, #1
9000f5c4:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f5c8:	0796      	lsls	r6, r2, #30
9000f5ca:	f140 8092 	bpl.w	9000f6f2 <HAL_UART_IRQHandler+0x27e>
9000f5ce:	07ce      	lsls	r6, r1, #31
9000f5d0:	d50a      	bpl.n	9000f5e8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000f5d2:	2602      	movs	r6, #2
9000f5d4:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
9000f5d6:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
9000f5da:	f046 0604 	orr.w	r6, r6, #4
9000f5de:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f5e2:	0756      	lsls	r6, r2, #29
9000f5e4:	f100 808b 	bmi.w	9000f6fe <HAL_UART_IRQHandler+0x28a>
    if (((isrflags & USART_ISR_ORE) != 0U)
9000f5e8:	0716      	lsls	r6, r2, #28
9000f5ea:	d50b      	bpl.n	9000f604 <HAL_UART_IRQHandler+0x190>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
9000f5ec:	f005 0620 	and.w	r6, r5, #32
9000f5f0:	4330      	orrs	r0, r6
9000f5f2:	d007      	beq.n	9000f604 <HAL_UART_IRQHandler+0x190>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
9000f5f4:	2008      	movs	r0, #8
9000f5f6:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
9000f5f8:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000f5fc:	f040 0008 	orr.w	r0, r0, #8
9000f600:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
9000f604:	0516      	lsls	r6, r2, #20
9000f606:	d50a      	bpl.n	9000f61e <HAL_UART_IRQHandler+0x1aa>
9000f608:	0168      	lsls	r0, r5, #5
9000f60a:	d508      	bpl.n	9000f61e <HAL_UART_IRQHandler+0x1aa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
9000f60c:	f44f 6000 	mov.w	r0, #2048	; 0x800
9000f610:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
9000f612:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000f616:	f040 0020 	orr.w	r0, r0, #32
9000f61a:	f8c4 0090 	str.w	r0, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000f61e:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
9000f622:	2800      	cmp	r0, #0
9000f624:	f43f af60 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000f628:	0696      	lsls	r6, r2, #26
9000f62a:	d50b      	bpl.n	9000f644 <HAL_UART_IRQHandler+0x1d0>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000f62c:	f005 0520 	and.w	r5, r5, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000f630:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
9000f634:	ea55 0201 	orrs.w	r2, r5, r1
9000f638:	d004      	beq.n	9000f644 <HAL_UART_IRQHandler+0x1d0>
        if (huart->RxISR != NULL)
9000f63a:	6f62      	ldr	r2, [r4, #116]	; 0x74
9000f63c:	b112      	cbz	r2, 9000f644 <HAL_UART_IRQHandler+0x1d0>
          huart->RxISR(huart);
9000f63e:	4620      	mov	r0, r4
9000f640:	4790      	blx	r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000f642:	6823      	ldr	r3, [r4, #0]
      errorcode = huart->ErrorCode;
9000f644:	f8d4 5090 	ldr.w	r5, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000f648:	689a      	ldr	r2, [r3, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
9000f64a:	f005 0528 	and.w	r5, r5, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
9000f64e:	f002 0240 	and.w	r2, r2, #64	; 0x40
9000f652:	4315      	orrs	r5, r2
9000f654:	f000 80c5 	beq.w	9000f7e2 <HAL_UART_IRQHandler+0x36e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f658:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f65c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f660:	e843 2100 	strex	r1, r2, [r3]
9000f664:	2900      	cmp	r1, #0
9000f666:	d1f7      	bne.n	9000f658 <HAL_UART_IRQHandler+0x1e4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f668:	483c      	ldr	r0, [pc, #240]	; (9000f75c <HAL_UART_IRQHandler+0x2e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f66a:	f103 0208 	add.w	r2, r3, #8
9000f66e:	e852 2f00 	ldrex	r2, [r2]
9000f672:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f674:	f103 0508 	add.w	r5, r3, #8
9000f678:	e845 2100 	strex	r1, r2, [r5]
9000f67c:	2900      	cmp	r1, #0
9000f67e:	d1f4      	bne.n	9000f66a <HAL_UART_IRQHandler+0x1f6>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f680:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000f682:	2a01      	cmp	r2, #1
9000f684:	d054      	beq.n	9000f730 <HAL_UART_IRQHandler+0x2bc>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f686:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9000f688:	2120      	movs	r1, #32
9000f68a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f68e:	66e2      	str	r2, [r4, #108]	; 0x6c
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000f690:	6899      	ldr	r1, [r3, #8]
  huart->RxISR = NULL;
9000f692:	6762      	str	r2, [r4, #116]	; 0x74
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
9000f694:	064d      	lsls	r5, r1, #25
9000f696:	d565      	bpl.n	9000f764 <HAL_UART_IRQHandler+0x2f0>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f698:	f103 0208 	add.w	r2, r3, #8
9000f69c:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
9000f6a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f6a4:	f103 0008 	add.w	r0, r3, #8
9000f6a8:	e840 2100 	strex	r1, r2, [r0]
9000f6ac:	2900      	cmp	r1, #0
9000f6ae:	d1f3      	bne.n	9000f698 <HAL_UART_IRQHandler+0x224>
          if (huart->hdmarx != NULL)
9000f6b0:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000f6b4:	2800      	cmp	r0, #0
9000f6b6:	d055      	beq.n	9000f764 <HAL_UART_IRQHandler+0x2f0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
9000f6b8:	4b29      	ldr	r3, [pc, #164]	; (9000f760 <HAL_UART_IRQHandler+0x2ec>)
9000f6ba:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
9000f6bc:	f7fa fc24 	bl	90009f08 <HAL_DMA_Abort_IT>
9000f6c0:	2800      	cmp	r0, #0
9000f6c2:	f43f af11 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
9000f6c6:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
9000f6ca:	6d03      	ldr	r3, [r0, #80]	; 0x50
9000f6cc:	e00e      	b.n	9000f6ec <HAL_UART_IRQHandler+0x278>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
9000f6ce:	0696      	lsls	r6, r2, #26
9000f6d0:	f57f aee5 	bpl.w	9000f49e <HAL_UART_IRQHandler+0x2a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
9000f6d4:	f005 0620 	and.w	r6, r5, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
9000f6d8:	f001 5c80 	and.w	ip, r1, #268435456	; 0x10000000
9000f6dc:	ea56 060c 	orrs.w	r6, r6, ip
9000f6e0:	f43f aedd 	beq.w	9000f49e <HAL_UART_IRQHandler+0x2a>
      if (huart->RxISR != NULL)
9000f6e4:	6f43      	ldr	r3, [r0, #116]	; 0x74
9000f6e6:	2b00      	cmp	r3, #0
9000f6e8:	f43f aefe 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
}
9000f6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
9000f6f0:	4718      	bx	r3
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f6f2:	0756      	lsls	r6, r2, #29
9000f6f4:	f57f af78 	bpl.w	9000f5e8 <HAL_UART_IRQHandler+0x174>
9000f6f8:	07ce      	lsls	r6, r1, #31
9000f6fa:	f57f af75 	bpl.w	9000f5e8 <HAL_UART_IRQHandler+0x174>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000f6fe:	2604      	movs	r6, #4
9000f700:	621e      	str	r6, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
9000f702:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
9000f706:	f046 0602 	orr.w	r6, r6, #2
9000f70a:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
9000f70e:	e76b      	b.n	9000f5e8 <HAL_UART_IRQHandler+0x174>
    if (huart->TxISR != NULL)
9000f710:	6fa3      	ldr	r3, [r4, #120]	; 0x78
9000f712:	2b00      	cmp	r3, #0
9000f714:	f43f aee8 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
9000f718:	4620      	mov	r0, r4
}
9000f71a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
9000f71e:	4718      	bx	r3
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
9000f720:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
9000f724:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
9000f726:	621a      	str	r2, [r3, #32]
}
9000f728:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
9000f72c:	f000 bfd4 	b.w	900106d8 <HAL_UARTEx_WakeupCallback>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f730:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f734:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f738:	e843 2100 	strex	r1, r2, [r3]
9000f73c:	2900      	cmp	r1, #0
9000f73e:	d0a2      	beq.n	9000f686 <HAL_UART_IRQHandler+0x212>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f740:	e853 2f00 	ldrex	r2, [r3]
9000f744:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f748:	e843 2100 	strex	r1, r2, [r3]
9000f74c:	2900      	cmp	r1, #0
9000f74e:	d1ef      	bne.n	9000f730 <HAL_UART_IRQHandler+0x2bc>
9000f750:	e799      	b.n	9000f686 <HAL_UART_IRQHandler+0x212>
9000f752:	bf00      	nop
9000f754:	04000120 	.word	0x04000120
9000f758:	10000001 	.word	0x10000001
9000f75c:	effffffe 	.word	0xeffffffe
9000f760:	9000f461 	.word	0x9000f461
            HAL_UART_ErrorCallback(huart);
9000f764:	4620      	mov	r0, r4
9000f766:	f7ff fe79 	bl	9000f45c <HAL_UART_ErrorCallback>
}
9000f76a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000f76c:	4620      	mov	r0, r4
}
9000f76e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
9000f772:	f000 bfb5 	b.w	900106e0 <HAL_UARTEx_TxFifoEmptyCallback>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000f776:	f8b4 005e 	ldrh.w	r0, [r4, #94]	; 0x5e
9000f77a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
      if ((huart->RxXferCount > 0U)
9000f77e:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000f782:	1a09      	subs	r1, r1, r0
      if ((huart->RxXferCount > 0U)
9000f784:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
9000f786:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
9000f788:	2a00      	cmp	r2, #0
9000f78a:	f43f aead 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
9000f78e:	2900      	cmp	r1, #0
9000f790:	f43f aeaa 	beq.w	9000f4e8 <HAL_UART_IRQHandler+0x74>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f794:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f798:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f79c:	e843 2000 	strex	r0, r2, [r3]
9000f7a0:	2800      	cmp	r0, #0
9000f7a2:	d1f7      	bne.n	9000f794 <HAL_UART_IRQHandler+0x320>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f7a4:	4d12      	ldr	r5, [pc, #72]	; (9000f7f0 <HAL_UART_IRQHandler+0x37c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f7a6:	f103 0208 	add.w	r2, r3, #8
9000f7aa:	e852 2f00 	ldrex	r2, [r2]
9000f7ae:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f7b0:	f103 0608 	add.w	r6, r3, #8
9000f7b4:	e846 2000 	strex	r0, r2, [r6]
9000f7b8:	2800      	cmp	r0, #0
9000f7ba:	d1f4      	bne.n	9000f7a6 <HAL_UART_IRQHandler+0x332>
        huart->RxState = HAL_UART_STATE_READY;
9000f7bc:	2220      	movs	r2, #32
        huart->RxISR = NULL;
9000f7be:	6760      	str	r0, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000f7c0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f7c4:	66e0      	str	r0, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f7c6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f7ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f7ce:	e843 2000 	strex	r0, r2, [r3]
9000f7d2:	2800      	cmp	r0, #0
9000f7d4:	d1f7      	bne.n	9000f7c6 <HAL_UART_IRQHandler+0x352>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000f7d6:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
9000f7d8:	4620      	mov	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
9000f7da:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
9000f7dc:	f7f4 fc94 	bl	90004108 <HAL_UARTEx_RxEventCallback>
}
9000f7e0:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
9000f7e2:	4620      	mov	r0, r4
9000f7e4:	f7ff fe3a 	bl	9000f45c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
9000f7e8:	f8c4 5090 	str.w	r5, [r4, #144]	; 0x90
}
9000f7ec:	bd70      	pop	{r4, r5, r6, pc}
9000f7ee:	bf00      	nop
9000f7f0:	effffffe 	.word	0xeffffffe

9000f7f4 <UART_RxISR_16BIT.part.0>:
/**
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
9000f7f4:	6803      	ldr	r3, [r0, #0]
9000f7f6:	b510      	push	{r4, lr}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f7f8:	e853 2f00 	ldrex	r2, [r3]
    huart->RxXferCount--;

    if (huart->RxXferCount == 0U)
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9000f7fc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f800:	e843 2100 	strex	r1, r2, [r3]
9000f804:	2900      	cmp	r1, #0
9000f806:	d1f7      	bne.n	9000f7f8 <UART_RxISR_16BIT.part.0+0x4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f808:	f103 0208 	add.w	r2, r3, #8
9000f80c:	e852 2f00 	ldrex	r2, [r2]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9000f810:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f814:	f103 0408 	add.w	r4, r3, #8
9000f818:	e844 2100 	strex	r1, r2, [r4]
9000f81c:	2900      	cmp	r1, #0
9000f81e:	d1f3      	bne.n	9000f808 <UART_RxISR_16BIT.part.0+0x14>
      huart->RxISR = NULL;

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000f820:	4a1a      	ldr	r2, [pc, #104]	; (9000f88c <UART_RxISR_16BIT.part.0+0x98>)
      huart->RxState = HAL_UART_STATE_READY;
9000f822:	2420      	movs	r4, #32
      huart->RxISR = NULL;
9000f824:	6741      	str	r1, [r0, #116]	; 0x74
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000f826:	4293      	cmp	r3, r2
      huart->RxState = HAL_UART_STATE_READY;
9000f828:	f8c0 408c 	str.w	r4, [r0, #140]	; 0x8c
      huart->RxEventType = HAL_UART_RXEVENT_TC;
9000f82c:	6701      	str	r1, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000f82e:	d002      	beq.n	9000f836 <UART_RxISR_16BIT.part.0+0x42>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000f830:	685a      	ldr	r2, [r3, #4]
9000f832:	0211      	lsls	r1, r2, #8
9000f834:	d416      	bmi.n	9000f864 <UART_RxISR_16BIT.part.0+0x70>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000f836:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
9000f838:	2a01      	cmp	r2, #1
9000f83a:	d124      	bne.n	9000f886 <UART_RxISR_16BIT.part.0+0x92>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000f83c:	2200      	movs	r2, #0
9000f83e:	66c2      	str	r2, [r0, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f840:	e853 2f00 	ldrex	r2, [r3]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000f844:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f848:	e843 2100 	strex	r1, r2, [r3]
9000f84c:	2900      	cmp	r1, #0
9000f84e:	d1f7      	bne.n	9000f840 <UART_RxISR_16BIT.part.0+0x4c>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000f850:	69da      	ldr	r2, [r3, #28]
9000f852:	06d2      	lsls	r2, r2, #27
9000f854:	d501      	bpl.n	9000f85a <UART_RxISR_16BIT.part.0+0x66>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000f856:	2210      	movs	r2, #16
9000f858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000f85a:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
9000f85e:	f7f4 fc53 	bl	90004108 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
9000f862:	bd10      	pop	{r4, pc}
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f864:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000f868:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f86c:	e843 2100 	strex	r1, r2, [r3]
9000f870:	2900      	cmp	r1, #0
9000f872:	d0e0      	beq.n	9000f836 <UART_RxISR_16BIT.part.0+0x42>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000f874:	e853 2f00 	ldrex	r2, [r3]
9000f878:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000f87c:	e843 2100 	strex	r1, r2, [r3]
9000f880:	2900      	cmp	r1, #0
9000f882:	d1ef      	bne.n	9000f864 <UART_RxISR_16BIT.part.0+0x70>
9000f884:	e7d7      	b.n	9000f836 <UART_RxISR_16BIT.part.0+0x42>
        HAL_UART_RxCpltCallback(huart);
9000f886:	f7ff fde7 	bl	9000f458 <HAL_UART_RxCpltCallback>
}
9000f88a:	bd10      	pop	{r4, pc}
9000f88c:	58000c00 	.word	0x58000c00

9000f890 <UART_RxISR_16BIT>:
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000f890:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
9000f894:	2a22      	cmp	r2, #34	; 0x22
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f896:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000f898:	d004      	beq.n	9000f8a4 <UART_RxISR_16BIT+0x14>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000f89a:	6993      	ldr	r3, [r2, #24]
9000f89c:	f043 0308 	orr.w	r3, r3, #8
9000f8a0:	6193      	str	r3, [r2, #24]
  }
}
9000f8a2:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f8a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *tmp = (uint16_t)(uhdata & uhMask);
9000f8a6:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
9000f8aa:	6d81      	ldr	r1, [r0, #88]	; 0x58
9000f8ac:	ea02 020c 	and.w	r2, r2, ip
9000f8b0:	f821 2b02 	strh.w	r2, [r1], #2
    huart->RxXferCount--;
9000f8b4:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr += 2U;
9000f8b8:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000f8ba:	3a01      	subs	r2, #1
9000f8bc:	b292      	uxth	r2, r2
9000f8be:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
9000f8c2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
9000f8c6:	b29b      	uxth	r3, r3
9000f8c8:	2b00      	cmp	r3, #0
9000f8ca:	d1ea      	bne.n	9000f8a2 <UART_RxISR_16BIT+0x12>
9000f8cc:	f7ff bf92 	b.w	9000f7f4 <UART_RxISR_16BIT.part.0>

9000f8d0 <UART_RxISR_8BIT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000f8d0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
9000f8d4:	2a22      	cmp	r2, #34	; 0x22
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f8d6:	6802      	ldr	r2, [r0, #0]
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000f8d8:	d004      	beq.n	9000f8e4 <UART_RxISR_8BIT+0x14>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000f8da:	6993      	ldr	r3, [r2, #24]
9000f8dc:	f043 0308 	orr.w	r3, r3, #8
9000f8e0:	6193      	str	r3, [r2, #24]
}
9000f8e2:	4770      	bx	lr
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f8e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000f8e6:	f8b0 c060 	ldrh.w	ip, [r0, #96]	; 0x60
9000f8ea:	6d81      	ldr	r1, [r0, #88]	; 0x58
9000f8ec:	ea02 020c 	and.w	r2, r2, ip
9000f8f0:	700a      	strb	r2, [r1, #0]
    huart->RxXferCount--;
9000f8f2:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    huart->pRxBuffPtr++;
9000f8f6:	6d81      	ldr	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000f8f8:	3a01      	subs	r2, #1
    huart->pRxBuffPtr++;
9000f8fa:	3101      	adds	r1, #1
    huart->RxXferCount--;
9000f8fc:	b292      	uxth	r2, r2
    huart->pRxBuffPtr++;
9000f8fe:	6581      	str	r1, [r0, #88]	; 0x58
    huart->RxXferCount--;
9000f900:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
9000f904:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
9000f908:	b29b      	uxth	r3, r3
9000f90a:	2b00      	cmp	r3, #0
9000f90c:	d1e9      	bne.n	9000f8e2 <UART_RxISR_8BIT+0x12>
9000f90e:	f7ff bf71 	b.w	9000f7f4 <UART_RxISR_16BIT.part.0>
9000f912:	bf00      	nop

9000f914 <UART_RxISR_8BIT_FIFOEN>:
{
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000f914:	6802      	ldr	r2, [r0, #0]
{
9000f916:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9000f91a:	4604      	mov	r4, r0
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000f91c:	69d0      	ldr	r0, [r2, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
9000f91e:	6816      	ldr	r6, [r2, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
9000f920:	6895      	ldr	r5, [r2, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000f922:	f8d4 108c 	ldr.w	r1, [r4, #140]	; 0x8c
9000f926:	2922      	cmp	r1, #34	; 0x22
9000f928:	d006      	beq.n	9000f938 <UART_RxISR_8BIT_FIFOEN+0x24>
9000f92a:	4613      	mov	r3, r2
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000f92c:	6992      	ldr	r2, [r2, #24]
9000f92e:	f042 0208 	orr.w	r2, r2, #8
9000f932:	619a      	str	r2, [r3, #24]
  }
}
9000f934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000f938:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
9000f93c:	2b00      	cmp	r3, #0
9000f93e:	f000 80d5 	beq.w	9000faec <UART_RxISR_8BIT_FIFOEN+0x1d8>
9000f942:	0680      	lsls	r0, r0, #26
9000f944:	f140 8089 	bpl.w	9000fa5a <UART_RxISR_8BIT_FIFOEN+0x146>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000f948:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f94c:	f005 0501 	and.w	r5, r5, #1
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000f950:	f894 a060 	ldrb.w	sl, [r4, #96]	; 0x60
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000f954:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000f958:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000fafc <UART_RxISR_8BIT_FIFOEN+0x1e8>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000f95c:	4f65      	ldr	r7, [pc, #404]	; (9000faf4 <UART_RxISR_8BIT_FIFOEN+0x1e0>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f95e:	6a52      	ldr	r2, [r2, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
9000f960:	6da3      	ldr	r3, [r4, #88]	; 0x58
9000f962:	ea0a 0202 	and.w	r2, sl, r2
9000f966:	701a      	strb	r2, [r3, #0]
      huart->RxXferCount--;
9000f968:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000f96c:	6823      	ldr	r3, [r4, #0]
      huart->RxXferCount--;
9000f96e:	3901      	subs	r1, #1
      huart->pRxBuffPtr++;
9000f970:	6da2      	ldr	r2, [r4, #88]	; 0x58
      huart->RxXferCount--;
9000f972:	b289      	uxth	r1, r1
      huart->pRxBuffPtr++;
9000f974:	3201      	adds	r2, #1
      huart->RxXferCount--;
9000f976:	f8a4 105e 	strh.w	r1, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000f97a:	f8d3 b01c 	ldr.w	fp, [r3, #28]
      huart->pRxBuffPtr++;
9000f97e:	65a2      	str	r2, [r4, #88]	; 0x58
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
9000f980:	f01b 0f07 	tst.w	fp, #7
9000f984:	d01d      	beq.n	9000f9c2 <UART_RxISR_8BIT_FIFOEN+0xae>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000f986:	f01b 0f01 	tst.w	fp, #1
9000f98a:	d008      	beq.n	9000f99e <UART_RxISR_8BIT_FIFOEN+0x8a>
9000f98c:	b13e      	cbz	r6, 9000f99e <UART_RxISR_8BIT_FIFOEN+0x8a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000f98e:	2201      	movs	r2, #1
9000f990:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
9000f992:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
9000f996:	f042 0201 	orr.w	r2, r2, #1
9000f99a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f99e:	f01b 0f02 	tst.w	fp, #2
9000f9a2:	d017      	beq.n	9000f9d4 <UART_RxISR_8BIT_FIFOEN+0xc0>
9000f9a4:	b155      	cbz	r5, 9000f9bc <UART_RxISR_8BIT_FIFOEN+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000f9a6:	2202      	movs	r2, #2
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f9a8:	f01b 0f04 	tst.w	fp, #4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000f9ac:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
9000f9ae:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
9000f9b2:	f042 0204 	orr.w	r2, r2, #4
9000f9b6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f9ba:	d110      	bne.n	9000f9de <UART_RxISR_8BIT_FIFOEN+0xca>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000f9bc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000f9c0:	b9cb      	cbnz	r3, 9000f9f6 <UART_RxISR_8BIT_FIFOEN+0xe2>
      if (huart->RxXferCount == 0U)
9000f9c2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000f9c6:	b29b      	uxth	r3, r3
9000f9c8:	b1fb      	cbz	r3, 9000fa0a <UART_RxISR_8BIT_FIFOEN+0xf6>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000f9ca:	f01b 0f20 	tst.w	fp, #32
9000f9ce:	d044      	beq.n	9000fa5a <UART_RxISR_8BIT_FIFOEN+0x146>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000f9d0:	6822      	ldr	r2, [r4, #0]
9000f9d2:	e7c4      	b.n	9000f95e <UART_RxISR_8BIT_FIFOEN+0x4a>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000f9d4:	f01b 0f04 	tst.w	fp, #4
9000f9d8:	d0f0      	beq.n	9000f9bc <UART_RxISR_8BIT_FIFOEN+0xa8>
9000f9da:	2d00      	cmp	r5, #0
9000f9dc:	d0ee      	beq.n	9000f9bc <UART_RxISR_8BIT_FIFOEN+0xa8>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000f9de:	2204      	movs	r2, #4
9000f9e0:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
9000f9e2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000f9e6:	f043 0302 	orr.w	r3, r3, #2
9000f9ea:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000f9ee:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
9000f9f2:	2b00      	cmp	r3, #0
9000f9f4:	d0e5      	beq.n	9000f9c2 <UART_RxISR_8BIT_FIFOEN+0xae>
          HAL_UART_ErrorCallback(huart);
9000f9f6:	4620      	mov	r0, r4
9000f9f8:	f7ff fd30 	bl	9000f45c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000f9fc:	f8c4 8090 	str.w	r8, [r4, #144]	; 0x90
      if (huart->RxXferCount == 0U)
9000fa00:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000fa04:	b29b      	uxth	r3, r3
9000fa06:	2b00      	cmp	r3, #0
9000fa08:	d1df      	bne.n	9000f9ca <UART_RxISR_8BIT_FIFOEN+0xb6>
9000fa0a:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fa0c:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000fa10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fa14:	e843 2100 	strex	r1, r2, [r3]
9000fa18:	2900      	cmp	r1, #0
9000fa1a:	d1f7      	bne.n	9000fa0c <UART_RxISR_8BIT_FIFOEN+0xf8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fa1c:	f103 0208 	add.w	r2, r3, #8
9000fa20:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000fa24:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fa28:	f103 0008 	add.w	r0, r3, #8
9000fa2c:	e840 2100 	strex	r1, r2, [r0]
9000fa30:	2900      	cmp	r1, #0
9000fa32:	d1f3      	bne.n	9000fa1c <UART_RxISR_8BIT_FIFOEN+0x108>
        huart->RxState = HAL_UART_STATE_READY;
9000fa34:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000fa36:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
9000fa38:	6761      	str	r1, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000fa3a:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
9000fa3e:	6721      	str	r1, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000fa40:	d002      	beq.n	9000fa48 <UART_RxISR_8BIT_FIFOEN+0x134>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000fa42:	685a      	ldr	r2, [r3, #4]
9000fa44:	0211      	lsls	r1, r2, #8
9000fa46:	d42b      	bmi.n	9000faa0 <UART_RxISR_8BIT_FIFOEN+0x18c>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000fa48:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9000fa4a:	2a01      	cmp	r2, #1
9000fa4c:	d039      	beq.n	9000fac2 <UART_RxISR_8BIT_FIFOEN+0x1ae>
          HAL_UART_RxCpltCallback(huart);
9000fa4e:	4620      	mov	r0, r4
9000fa50:	f7ff fd02 	bl	9000f458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000fa54:	f01b 0f20 	tst.w	fp, #32
9000fa58:	d1ba      	bne.n	9000f9d0 <UART_RxISR_8BIT_FIFOEN+0xbc>
    rxdatacount = huart->RxXferCount;
9000fa5a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
9000fa5e:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000fa60:	2b00      	cmp	r3, #0
9000fa62:	f43f af67 	beq.w	9000f934 <UART_RxISR_8BIT_FIFOEN+0x20>
9000fa66:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
9000fa6a:	429a      	cmp	r2, r3
9000fa6c:	f67f af62 	bls.w	9000f934 <UART_RxISR_8BIT_FIFOEN+0x20>
9000fa70:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fa72:	f103 0208 	add.w	r2, r3, #8
9000fa76:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
9000fa7a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fa7e:	f103 0008 	add.w	r0, r3, #8
9000fa82:	e840 2100 	strex	r1, r2, [r0]
9000fa86:	2900      	cmp	r1, #0
9000fa88:	d1f3      	bne.n	9000fa72 <UART_RxISR_8BIT_FIFOEN+0x15e>
      huart->RxISR = UART_RxISR_8BIT;
9000fa8a:	4a1b      	ldr	r2, [pc, #108]	; (9000faf8 <UART_RxISR_8BIT_FIFOEN+0x1e4>)
9000fa8c:	6762      	str	r2, [r4, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fa8e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
9000fa92:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fa96:	e843 2100 	strex	r1, r2, [r3]
9000fa9a:	2900      	cmp	r1, #0
9000fa9c:	d1f7      	bne.n	9000fa8e <UART_RxISR_8BIT_FIFOEN+0x17a>
9000fa9e:	e749      	b.n	9000f934 <UART_RxISR_8BIT_FIFOEN+0x20>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000faa0:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000faa4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000faa8:	e843 2100 	strex	r1, r2, [r3]
9000faac:	2900      	cmp	r1, #0
9000faae:	d0cb      	beq.n	9000fa48 <UART_RxISR_8BIT_FIFOEN+0x134>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fab0:	e853 2f00 	ldrex	r2, [r3]
9000fab4:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fab8:	e843 2100 	strex	r1, r2, [r3]
9000fabc:	2900      	cmp	r1, #0
9000fabe:	d1ef      	bne.n	9000faa0 <UART_RxISR_8BIT_FIFOEN+0x18c>
9000fac0:	e7c2      	b.n	9000fa48 <UART_RxISR_8BIT_FIFOEN+0x134>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000fac2:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fac6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000faca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000face:	e843 2100 	strex	r1, r2, [r3]
9000fad2:	2900      	cmp	r1, #0
9000fad4:	d1f7      	bne.n	9000fac6 <UART_RxISR_8BIT_FIFOEN+0x1b2>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000fad6:	69da      	ldr	r2, [r3, #28]
9000fad8:	06d2      	lsls	r2, r2, #27
9000fada:	d501      	bpl.n	9000fae0 <UART_RxISR_8BIT_FIFOEN+0x1cc>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000fadc:	2210      	movs	r2, #16
9000fade:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000fae0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
9000fae4:	4620      	mov	r0, r4
9000fae6:	f7f4 fb0f 	bl	90004108 <HAL_UARTEx_RxEventCallback>
9000faea:	e76e      	b.n	9000f9ca <UART_RxISR_8BIT_FIFOEN+0xb6>
    rxdatacount = huart->RxXferCount;
9000faec:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000faf0:	e720      	b.n	9000f934 <UART_RxISR_8BIT_FIFOEN+0x20>
9000faf2:	bf00      	nop
9000faf4:	58000c00 	.word	0x58000c00
9000faf8:	9000f8d1 	.word	0x9000f8d1
9000fafc:	effffffe 	.word	0xeffffffe

9000fb00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
9000fb00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
9000fb04:	6803      	ldr	r3, [r0, #0]
9000fb06:	69d9      	ldr	r1, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
9000fb08:	681e      	ldr	r6, [r3, #0]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
9000fb0a:	689d      	ldr	r5, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
9000fb0c:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
9000fb10:	2a22      	cmp	r2, #34	; 0x22
9000fb12:	d005      	beq.n	9000fb20 <UART_RxISR_16BIT_FIFOEN+0x20>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
9000fb14:	699a      	ldr	r2, [r3, #24]
9000fb16:	f042 0208 	orr.w	r2, r2, #8
9000fb1a:	619a      	str	r2, [r3, #24]
  }
}
9000fb1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000fb20:	f8b0 2068 	ldrh.w	r2, [r0, #104]	; 0x68
9000fb24:	4683      	mov	fp, r0
9000fb26:	2a00      	cmp	r2, #0
9000fb28:	f000 80d4 	beq.w	9000fcd4 <UART_RxISR_16BIT_FIFOEN+0x1d4>
9000fb2c:	0689      	lsls	r1, r1, #26
9000fb2e:	f140 8086 	bpl.w	9000fc3e <UART_RxISR_16BIT_FIFOEN+0x13e>
  uint16_t  uhMask = huart->Mask;
9000fb32:	f8b0 a060 	ldrh.w	sl, [r0, #96]	; 0x60
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000fb36:	f406 7680 	and.w	r6, r6, #256	; 0x100
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000fb3a:	f005 0501 	and.w	r5, r5, #1
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000fb3e:	f04f 0800 	mov.w	r8, #0
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000fb42:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 9000fce4 <UART_RxISR_16BIT_FIFOEN+0x1e4>
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000fb46:	4f65      	ldr	r7, [pc, #404]	; (9000fcdc <UART_RxISR_16BIT_FIFOEN+0x1dc>)
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000fb48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
      *tmp = (uint16_t)(uhdata & uhMask);
9000fb4a:	f8db 1058 	ldr.w	r1, [fp, #88]	; 0x58
9000fb4e:	ea0a 0202 	and.w	r2, sl, r2
9000fb52:	f821 2b02 	strh.w	r2, [r1], #2
      huart->RxXferCount--;
9000fb56:	f8bb 205e 	ldrh.w	r2, [fp, #94]	; 0x5e
      huart->pRxBuffPtr += 2U;
9000fb5a:	f8cb 1058 	str.w	r1, [fp, #88]	; 0x58
      huart->RxXferCount--;
9000fb5e:	3a01      	subs	r2, #1
9000fb60:	b292      	uxth	r2, r2
9000fb62:	f8ab 205e 	strh.w	r2, [fp, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
9000fb66:	69dc      	ldr	r4, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
9000fb68:	0762      	lsls	r2, r4, #29
9000fb6a:	d01a      	beq.n	9000fba2 <UART_RxISR_16BIT_FIFOEN+0xa2>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
9000fb6c:	07e0      	lsls	r0, r4, #31
9000fb6e:	d508      	bpl.n	9000fb82 <UART_RxISR_16BIT_FIFOEN+0x82>
9000fb70:	b13e      	cbz	r6, 9000fb82 <UART_RxISR_16BIT_FIFOEN+0x82>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
9000fb72:	2201      	movs	r2, #1
9000fb74:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
9000fb76:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
9000fb7a:	f042 0201 	orr.w	r2, r2, #1
9000fb7e:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000fb82:	07a1      	lsls	r1, r4, #30
9000fb84:	d516      	bpl.n	9000fbb4 <UART_RxISR_16BIT_FIFOEN+0xb4>
9000fb86:	b14d      	cbz	r5, 9000fb9c <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
9000fb88:	2202      	movs	r2, #2
9000fb8a:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
9000fb8c:	f8db 2090 	ldr.w	r2, [fp, #144]	; 0x90
9000fb90:	f042 0204 	orr.w	r2, r2, #4
9000fb94:	f8cb 2090 	str.w	r2, [fp, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000fb98:	0762      	lsls	r2, r4, #29
9000fb9a:	d40f      	bmi.n	9000fbbc <UART_RxISR_16BIT_FIFOEN+0xbc>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000fb9c:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000fba0:	b9c3      	cbnz	r3, 9000fbd4 <UART_RxISR_16BIT_FIFOEN+0xd4>
      if (huart->RxXferCount == 0U)
9000fba2:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000fba6:	b29b      	uxth	r3, r3
9000fba8:	b1f3      	cbz	r3, 9000fbe8 <UART_RxISR_16BIT_FIFOEN+0xe8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000fbaa:	06a3      	lsls	r3, r4, #26
9000fbac:	d547      	bpl.n	9000fc3e <UART_RxISR_16BIT_FIFOEN+0x13e>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
9000fbae:	f8db 3000 	ldr.w	r3, [fp]
9000fbb2:	e7c9      	b.n	9000fb48 <UART_RxISR_16BIT_FIFOEN+0x48>
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
9000fbb4:	0760      	lsls	r0, r4, #29
9000fbb6:	d5f1      	bpl.n	9000fb9c <UART_RxISR_16BIT_FIFOEN+0x9c>
9000fbb8:	2d00      	cmp	r5, #0
9000fbba:	d0ef      	beq.n	9000fb9c <UART_RxISR_16BIT_FIFOEN+0x9c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
9000fbbc:	2204      	movs	r2, #4
9000fbbe:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
9000fbc0:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000fbc4:	f043 0302 	orr.w	r3, r3, #2
9000fbc8:	f8cb 3090 	str.w	r3, [fp, #144]	; 0x90
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
9000fbcc:	f8db 3090 	ldr.w	r3, [fp, #144]	; 0x90
9000fbd0:	2b00      	cmp	r3, #0
9000fbd2:	d0e6      	beq.n	9000fba2 <UART_RxISR_16BIT_FIFOEN+0xa2>
          HAL_UART_ErrorCallback(huart);
9000fbd4:	4658      	mov	r0, fp
9000fbd6:	f7ff fc41 	bl	9000f45c <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
9000fbda:	f8cb 8090 	str.w	r8, [fp, #144]	; 0x90
      if (huart->RxXferCount == 0U)
9000fbde:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000fbe2:	b29b      	uxth	r3, r3
9000fbe4:	2b00      	cmp	r3, #0
9000fbe6:	d1e0      	bne.n	9000fbaa <UART_RxISR_16BIT_FIFOEN+0xaa>
9000fbe8:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fbec:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9000fbf0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fbf4:	e843 2100 	strex	r1, r2, [r3]
9000fbf8:	2900      	cmp	r1, #0
9000fbfa:	d1f7      	bne.n	9000fbec <UART_RxISR_16BIT_FIFOEN+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fbfc:	f103 0208 	add.w	r2, r3, #8
9000fc00:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9000fc04:	ea02 0209 	and.w	r2, r2, r9
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fc08:	f103 0008 	add.w	r0, r3, #8
9000fc0c:	e840 2100 	strex	r1, r2, [r0]
9000fc10:	2900      	cmp	r1, #0
9000fc12:	d1f3      	bne.n	9000fbfc <UART_RxISR_16BIT_FIFOEN+0xfc>
        huart->RxState = HAL_UART_STATE_READY;
9000fc14:	2220      	movs	r2, #32
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000fc16:	42bb      	cmp	r3, r7
        huart->RxISR = NULL;
9000fc18:	f8cb 1074 	str.w	r1, [fp, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
9000fc1c:	f8cb 208c 	str.w	r2, [fp, #140]	; 0x8c
        huart->RxEventType = HAL_UART_RXEVENT_TC;
9000fc20:	f8cb 1070 	str.w	r1, [fp, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
9000fc24:	d002      	beq.n	9000fc2c <UART_RxISR_16BIT_FIFOEN+0x12c>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
9000fc26:	685a      	ldr	r2, [r3, #4]
9000fc28:	0211      	lsls	r1, r2, #8
9000fc2a:	d42d      	bmi.n	9000fc88 <UART_RxISR_16BIT_FIFOEN+0x188>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9000fc2c:	f8db 206c 	ldr.w	r2, [fp, #108]	; 0x6c
9000fc30:	2a01      	cmp	r2, #1
9000fc32:	d03a      	beq.n	9000fcaa <UART_RxISR_16BIT_FIFOEN+0x1aa>
          HAL_UART_RxCpltCallback(huart);
9000fc34:	4658      	mov	r0, fp
9000fc36:	f7ff fc0f 	bl	9000f458 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
9000fc3a:	06a3      	lsls	r3, r4, #26
9000fc3c:	d4b7      	bmi.n	9000fbae <UART_RxISR_16BIT_FIFOEN+0xae>
    rxdatacount = huart->RxXferCount;
9000fc3e:	f8bb 305e 	ldrh.w	r3, [fp, #94]	; 0x5e
9000fc42:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000fc44:	2b00      	cmp	r3, #0
9000fc46:	f43f af69 	beq.w	9000fb1c <UART_RxISR_16BIT_FIFOEN+0x1c>
9000fc4a:	f8bb 2068 	ldrh.w	r2, [fp, #104]	; 0x68
9000fc4e:	429a      	cmp	r2, r3
9000fc50:	f67f af64 	bls.w	9000fb1c <UART_RxISR_16BIT_FIFOEN+0x1c>
9000fc54:	f8db 3000 	ldr.w	r3, [fp]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fc58:	f103 0208 	add.w	r2, r3, #8
9000fc5c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
9000fc60:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fc64:	f103 0008 	add.w	r0, r3, #8
9000fc68:	e840 2100 	strex	r1, r2, [r0]
9000fc6c:	2900      	cmp	r1, #0
9000fc6e:	d1f3      	bne.n	9000fc58 <UART_RxISR_16BIT_FIFOEN+0x158>
      huart->RxISR = UART_RxISR_16BIT;
9000fc70:	4a1b      	ldr	r2, [pc, #108]	; (9000fce0 <UART_RxISR_16BIT_FIFOEN+0x1e0>)
9000fc72:	f8cb 2074 	str.w	r2, [fp, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fc76:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
9000fc7a:	f042 0220 	orr.w	r2, r2, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fc7e:	e843 2100 	strex	r1, r2, [r3]
9000fc82:	2900      	cmp	r1, #0
9000fc84:	d1f7      	bne.n	9000fc76 <UART_RxISR_16BIT_FIFOEN+0x176>
9000fc86:	e749      	b.n	9000fb1c <UART_RxISR_16BIT_FIFOEN+0x1c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fc88:	e853 2f00 	ldrex	r2, [r3]
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
9000fc8c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fc90:	e843 2100 	strex	r1, r2, [r3]
9000fc94:	2900      	cmp	r1, #0
9000fc96:	d0c9      	beq.n	9000fc2c <UART_RxISR_16BIT_FIFOEN+0x12c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fc98:	e853 2f00 	ldrex	r2, [r3]
9000fc9c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fca0:	e843 2100 	strex	r1, r2, [r3]
9000fca4:	2900      	cmp	r1, #0
9000fca6:	d1ef      	bne.n	9000fc88 <UART_RxISR_16BIT_FIFOEN+0x188>
9000fca8:	e7c0      	b.n	9000fc2c <UART_RxISR_16BIT_FIFOEN+0x12c>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9000fcaa:	f8cb 806c 	str.w	r8, [fp, #108]	; 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9000fcae:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9000fcb2:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9000fcb6:	e843 2100 	strex	r1, r2, [r3]
9000fcba:	2900      	cmp	r1, #0
9000fcbc:	d1f7      	bne.n	9000fcae <UART_RxISR_16BIT_FIFOEN+0x1ae>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
9000fcbe:	69da      	ldr	r2, [r3, #28]
9000fcc0:	06d2      	lsls	r2, r2, #27
9000fcc2:	d501      	bpl.n	9000fcc8 <UART_RxISR_16BIT_FIFOEN+0x1c8>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
9000fcc4:	2210      	movs	r2, #16
9000fcc6:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
9000fcc8:	f8bb 105c 	ldrh.w	r1, [fp, #92]	; 0x5c
9000fccc:	4658      	mov	r0, fp
9000fcce:	f7f4 fa1b 	bl	90004108 <HAL_UARTEx_RxEventCallback>
9000fcd2:	e76a      	b.n	9000fbaa <UART_RxISR_16BIT_FIFOEN+0xaa>
    rxdatacount = huart->RxXferCount;
9000fcd4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
9000fcd8:	e720      	b.n	9000fb1c <UART_RxISR_16BIT_FIFOEN+0x1c>
9000fcda:	bf00      	nop
9000fcdc:	58000c00 	.word	0x58000c00
9000fce0:	9000f891 	.word	0x9000f891
9000fce4:	effffffe 	.word	0xeffffffe

9000fce8 <UART_SetConfig>:
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fce8:	6901      	ldr	r1, [r0, #16]
9000fcea:	6882      	ldr	r2, [r0, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
9000fcec:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fcee:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000fcf0:	49c0      	ldr	r1, [pc, #768]	; (9000fff4 <UART_SetConfig+0x30c>)
{
9000fcf2:	b530      	push	{r4, r5, lr}
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fcf4:	6945      	ldr	r5, [r0, #20]
{
9000fcf6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fcf8:	69c0      	ldr	r0, [r0, #28]
{
9000fcfa:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fcfc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000fcfe:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
9000fd00:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000fd02:	4029      	ands	r1, r5
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000fd04:	4dbc      	ldr	r5, [pc, #752]	; (9000fff8 <UART_SetConfig+0x310>)
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000fd06:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000fd08:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000fd0a:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
9000fd0c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000fd0e:	685a      	ldr	r2, [r3, #4]
9000fd10:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
9000fd14:	ea42 0201 	orr.w	r2, r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
9000fd18:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
9000fd1a:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
9000fd1c:	f000 80e0 	beq.w	9000fee0 <UART_SetConfig+0x1f8>
    tmpreg |= huart->Init.OneBitSampling;
9000fd20:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000fd22:	689d      	ldr	r5, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
9000fd24:	4311      	orrs	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000fd26:	4ab5      	ldr	r2, [pc, #724]	; (9000fffc <UART_SetConfig+0x314>)
9000fd28:	402a      	ands	r2, r5
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000fd2a:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000fd2c:	4311      	orrs	r1, r2
9000fd2e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000fd30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000fd32:	f022 020f 	bic.w	r2, r2, #15
9000fd36:	432a      	orrs	r2, r5
9000fd38:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
9000fd3a:	4ab1      	ldr	r2, [pc, #708]	; (90010000 <UART_SetConfig+0x318>)
9000fd3c:	4293      	cmp	r3, r2
9000fd3e:	d023      	beq.n	9000fd88 <UART_SetConfig+0xa0>
9000fd40:	4ab0      	ldr	r2, [pc, #704]	; (90010004 <UART_SetConfig+0x31c>)
9000fd42:	4293      	cmp	r3, r2
9000fd44:	d076      	beq.n	9000fe34 <UART_SetConfig+0x14c>
9000fd46:	4ab0      	ldr	r2, [pc, #704]	; (90010008 <UART_SetConfig+0x320>)
9000fd48:	4293      	cmp	r3, r2
9000fd4a:	f000 818f 	beq.w	9001006c <UART_SetConfig+0x384>
9000fd4e:	4aaf      	ldr	r2, [pc, #700]	; (9001000c <UART_SetConfig+0x324>)
9000fd50:	4293      	cmp	r3, r2
9000fd52:	f000 81e1 	beq.w	90010118 <UART_SetConfig+0x430>
9000fd56:	4aae      	ldr	r2, [pc, #696]	; (90010010 <UART_SetConfig+0x328>)
9000fd58:	4293      	cmp	r3, r2
9000fd5a:	f000 8121 	beq.w	9000ffa0 <UART_SetConfig+0x2b8>
9000fd5e:	4aad      	ldr	r2, [pc, #692]	; (90010014 <UART_SetConfig+0x32c>)
9000fd60:	4293      	cmp	r3, r2
9000fd62:	f000 81e3 	beq.w	9001012c <UART_SetConfig+0x444>
9000fd66:	4aac      	ldr	r2, [pc, #688]	; (90010018 <UART_SetConfig+0x330>)
9000fd68:	4293      	cmp	r3, r2
9000fd6a:	f000 8234 	beq.w	900101d6 <UART_SetConfig+0x4ee>
9000fd6e:	4aab      	ldr	r2, [pc, #684]	; (9001001c <UART_SetConfig+0x334>)
9000fd70:	4293      	cmp	r3, r2
9000fd72:	f000 81e7 	beq.w	90010144 <UART_SetConfig+0x45c>
        ret = HAL_ERROR;
9000fd76:	2001      	movs	r0, #1
  huart->RxISR = NULL;
9000fd78:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
9000fd7a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
9000fd7e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
9000fd80:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
9000fd82:	67a3      	str	r3, [r4, #120]	; 0x78
}
9000fd84:	b007      	add	sp, #28
9000fd86:	bd30      	pop	{r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
9000fd88:	4ba5      	ldr	r3, [pc, #660]	; (90010020 <UART_SetConfig+0x338>)
9000fd8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fd8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
9000fd90:	2b28      	cmp	r3, #40	; 0x28
9000fd92:	d8f0      	bhi.n	9000fd76 <UART_SetConfig+0x8e>
9000fd94:	4aa3      	ldr	r2, [pc, #652]	; (90010024 <UART_SetConfig+0x33c>)
9000fd96:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000fd98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000fd9c:	d055      	beq.n	9000fe4a <UART_SetConfig+0x162>
    switch (clocksource)
9000fd9e:	2b20      	cmp	r3, #32
9000fda0:	f200 814a 	bhi.w	90010038 <UART_SetConfig+0x350>
9000fda4:	2b20      	cmp	r3, #32
9000fda6:	d8e6      	bhi.n	9000fd76 <UART_SetConfig+0x8e>
9000fda8:	a201      	add	r2, pc, #4	; (adr r2, 9000fdb0 <UART_SetConfig+0xc8>)
9000fdaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fdae:	bf00      	nop
9000fdb0:	9000ffef 	.word	0x9000ffef
9000fdb4:	9000ffe9 	.word	0x9000ffe9
9000fdb8:	9000fd77 	.word	0x9000fd77
9000fdbc:	9000fd77 	.word	0x9000fd77
9000fdc0:	9000ffd9 	.word	0x9000ffd9
9000fdc4:	9000fd77 	.word	0x9000fd77
9000fdc8:	9000fd77 	.word	0x9000fd77
9000fdcc:	9000fd77 	.word	0x9000fd77
9000fdd0:	9000ffcb 	.word	0x9000ffcb
9000fdd4:	9000fd77 	.word	0x9000fd77
9000fdd8:	9000fd77 	.word	0x9000fd77
9000fddc:	9000fd77 	.word	0x9000fd77
9000fde0:	9000fd77 	.word	0x9000fd77
9000fde4:	9000fd77 	.word	0x9000fd77
9000fde8:	9000fd77 	.word	0x9000fd77
9000fdec:	9000fd77 	.word	0x9000fd77
9000fdf0:	9000ffb5 	.word	0x9000ffb5
9000fdf4:	9000fd77 	.word	0x9000fd77
9000fdf8:	9000fd77 	.word	0x9000fd77
9000fdfc:	9000fd77 	.word	0x9000fd77
9000fe00:	9000fd77 	.word	0x9000fd77
9000fe04:	9000fd77 	.word	0x9000fd77
9000fe08:	9000fd77 	.word	0x9000fd77
9000fe0c:	9000fd77 	.word	0x9000fd77
9000fe10:	9000fd77 	.word	0x9000fd77
9000fe14:	9000fd77 	.word	0x9000fd77
9000fe18:	9000fd77 	.word	0x9000fd77
9000fe1c:	9000fd77 	.word	0x9000fd77
9000fe20:	9000fd77 	.word	0x9000fd77
9000fe24:	9000fd77 	.word	0x9000fd77
9000fe28:	9000fd77 	.word	0x9000fd77
9000fe2c:	9000fd77 	.word	0x9000fd77
9000fe30:	90010159 	.word	0x90010159
  UART_GETCLOCKSOURCE(huart, clocksource);
9000fe34:	4b7a      	ldr	r3, [pc, #488]	; (90010020 <UART_SetConfig+0x338>)
9000fe36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000fe38:	f003 0307 	and.w	r3, r3, #7
9000fe3c:	2b05      	cmp	r3, #5
9000fe3e:	d89a      	bhi.n	9000fd76 <UART_SetConfig+0x8e>
9000fe40:	4a79      	ldr	r2, [pc, #484]	; (90010028 <UART_SetConfig+0x340>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
9000fe42:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
9000fe46:	5cd3      	ldrb	r3, [r2, r3]
9000fe48:	d1a9      	bne.n	9000fd9e <UART_SetConfig+0xb6>
    switch (clocksource)
9000fe4a:	2b20      	cmp	r3, #32
9000fe4c:	f200 8145 	bhi.w	900100da <UART_SetConfig+0x3f2>
9000fe50:	2b20      	cmp	r3, #32
9000fe52:	d890      	bhi.n	9000fd76 <UART_SetConfig+0x8e>
9000fe54:	a201      	add	r2, pc, #4	; (adr r2, 9000fe5c <UART_SetConfig+0x174>)
9000fe56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000fe5a:	bf00      	nop
9000fe5c:	900101c3 	.word	0x900101c3
9000fe60:	900101bd 	.word	0x900101bd
9000fe64:	9000fd77 	.word	0x9000fd77
9000fe68:	9000fd77 	.word	0x9000fd77
9000fe6c:	900101c9 	.word	0x900101c9
9000fe70:	9000fd77 	.word	0x9000fd77
9000fe74:	9000fd77 	.word	0x9000fd77
9000fe78:	9000fd77 	.word	0x9000fd77
9000fe7c:	900101ab 	.word	0x900101ab
9000fe80:	9000fd77 	.word	0x9000fd77
9000fe84:	9000fd77 	.word	0x9000fd77
9000fe88:	9000fd77 	.word	0x9000fd77
9000fe8c:	9000fd77 	.word	0x9000fd77
9000fe90:	9000fd77 	.word	0x9000fd77
9000fe94:	9000fd77 	.word	0x9000fd77
9000fe98:	9000fd77 	.word	0x9000fd77
9000fe9c:	90010197 	.word	0x90010197
9000fea0:	9000fd77 	.word	0x9000fd77
9000fea4:	9000fd77 	.word	0x9000fd77
9000fea8:	9000fd77 	.word	0x9000fd77
9000feac:	9000fd77 	.word	0x9000fd77
9000feb0:	9000fd77 	.word	0x9000fd77
9000feb4:	9000fd77 	.word	0x9000fd77
9000feb8:	9000fd77 	.word	0x9000fd77
9000febc:	9000fd77 	.word	0x9000fd77
9000fec0:	9000fd77 	.word	0x9000fd77
9000fec4:	9000fd77 	.word	0x9000fd77
9000fec8:	9000fd77 	.word	0x9000fd77
9000fecc:	9000fd77 	.word	0x9000fd77
9000fed0:	9000fd77 	.word	0x9000fd77
9000fed4:	9000fd77 	.word	0x9000fd77
9000fed8:	9000fd77 	.word	0x9000fd77
9000fedc:	900101d3 	.word	0x900101d3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000fee0:	6898      	ldr	r0, [r3, #8]
9000fee2:	4a46      	ldr	r2, [pc, #280]	; (9000fffc <UART_SetConfig+0x314>)
9000fee4:	4002      	ands	r2, r0
  UART_GETCLOCKSOURCE(huart, clocksource);
9000fee6:	484e      	ldr	r0, [pc, #312]	; (90010020 <UART_SetConfig+0x338>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
9000fee8:	430a      	orrs	r2, r1
9000feea:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
9000feec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9000feee:	6a61      	ldr	r1, [r4, #36]	; 0x24
9000fef0:	f022 020f 	bic.w	r2, r2, #15
9000fef4:	430a      	orrs	r2, r1
9000fef6:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
9000fef8:	6d83      	ldr	r3, [r0, #88]	; 0x58
9000fefa:	f003 0307 	and.w	r3, r3, #7
9000fefe:	2b05      	cmp	r3, #5
9000ff00:	f63f af39 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
9000ff04:	4a49      	ldr	r2, [pc, #292]	; (9001002c <UART_SetConfig+0x344>)
9000ff06:	5cd3      	ldrb	r3, [r2, r3]
    switch (clocksource)
9000ff08:	2b20      	cmp	r3, #32
9000ff0a:	f200 80b9 	bhi.w	90010080 <UART_SetConfig+0x398>
9000ff0e:	2b01      	cmp	r3, #1
9000ff10:	f67f af31 	bls.w	9000fd76 <UART_SetConfig+0x8e>
9000ff14:	3b02      	subs	r3, #2
9000ff16:	2b1e      	cmp	r3, #30
9000ff18:	f63f af2d 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
9000ff1c:	a201      	add	r2, pc, #4	; (adr r2, 9000ff24 <UART_SetConfig+0x23c>)
9000ff1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
9000ff22:	bf00      	nop
9000ff24:	9001018d 	.word	0x9001018d
9000ff28:	9000fd77 	.word	0x9000fd77
9000ff2c:	90010183 	.word	0x90010183
9000ff30:	9000fd77 	.word	0x9000fd77
9000ff34:	9000fd77 	.word	0x9000fd77
9000ff38:	9000fd77 	.word	0x9000fd77
9000ff3c:	90010171 	.word	0x90010171
9000ff40:	9000fd77 	.word	0x9000fd77
9000ff44:	9000fd77 	.word	0x9000fd77
9000ff48:	9000fd77 	.word	0x9000fd77
9000ff4c:	9000fd77 	.word	0x9000fd77
9000ff50:	9000fd77 	.word	0x9000fd77
9000ff54:	9000fd77 	.word	0x9000fd77
9000ff58:	9000fd77 	.word	0x9000fd77
9000ff5c:	9001015d 	.word	0x9001015d
9000ff60:	9000fd77 	.word	0x9000fd77
9000ff64:	9000fd77 	.word	0x9000fd77
9000ff68:	9000fd77 	.word	0x9000fd77
9000ff6c:	9000fd77 	.word	0x9000fd77
9000ff70:	9000fd77 	.word	0x9000fd77
9000ff74:	9000fd77 	.word	0x9000fd77
9000ff78:	9000fd77 	.word	0x9000fd77
9000ff7c:	9000fd77 	.word	0x9000fd77
9000ff80:	9000fd77 	.word	0x9000fd77
9000ff84:	9000fd77 	.word	0x9000fd77
9000ff88:	9000fd77 	.word	0x9000fd77
9000ff8c:	9000fd77 	.word	0x9000fd77
9000ff90:	9000fd77 	.word	0x9000fd77
9000ff94:	9000fd77 	.word	0x9000fd77
9000ff98:	9000fd77 	.word	0x9000fd77
9000ff9c:	90010193 	.word	0x90010193
  UART_GETCLOCKSOURCE(huart, clocksource);
9000ffa0:	4b1f      	ldr	r3, [pc, #124]	; (90010020 <UART_SetConfig+0x338>)
9000ffa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9000ffa4:	f003 0307 	and.w	r3, r3, #7
9000ffa8:	2b05      	cmp	r3, #5
9000ffaa:	f63f aee4 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
9000ffae:	4a20      	ldr	r2, [pc, #128]	; (90010030 <UART_SetConfig+0x348>)
9000ffb0:	5cd3      	ldrb	r3, [r2, r3]
9000ffb2:	e6f1      	b.n	9000fd98 <UART_SetConfig+0xb0>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9000ffb4:	4b1a      	ldr	r3, [pc, #104]	; (90010020 <UART_SetConfig+0x338>)
9000ffb6:	681a      	ldr	r2, [r3, #0]
9000ffb8:	0692      	lsls	r2, r2, #26
9000ffba:	f140 80c1 	bpl.w	90010140 <UART_SetConfig+0x458>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9000ffbe:	681b      	ldr	r3, [r3, #0]
9000ffc0:	481c      	ldr	r0, [pc, #112]	; (90010034 <UART_SetConfig+0x34c>)
9000ffc2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9000ffc6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
9000ffc8:	e03b      	b.n	90010042 <UART_SetConfig+0x35a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
9000ffca:	a803      	add	r0, sp, #12
9000ffcc:	f7fe fdfc 	bl	9000ebc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
9000ffd0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
9000ffd2:	b938      	cbnz	r0, 9000ffe4 <UART_SetConfig+0x2fc>
          pclk = (uint32_t) HSI_VALUE;
9000ffd4:	2000      	movs	r0, #0
9000ffd6:	e6cf      	b.n	9000fd78 <UART_SetConfig+0x90>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
9000ffd8:	4668      	mov	r0, sp
9000ffda:	f7fe fd37 	bl	9000ea4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
9000ffde:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
9000ffe0:	2800      	cmp	r0, #0
9000ffe2:	d0f7      	beq.n	9000ffd4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
9000ffe4:	6a65      	ldr	r5, [r4, #36]	; 0x24
9000ffe6:	e02c      	b.n	90010042 <UART_SetConfig+0x35a>
        pclk = HAL_RCC_GetPCLK2Freq();
9000ffe8:	f7fd fdba 	bl	9000db60 <HAL_RCC_GetPCLK2Freq>
        break;
9000ffec:	e7f1      	b.n	9000ffd2 <UART_SetConfig+0x2ea>
        pclk = HAL_RCC_GetPCLK1Freq();
9000ffee:	f7fd fd6f 	bl	9000dad0 <HAL_RCC_GetPCLK1Freq>
        break;
9000fff2:	e7ee      	b.n	9000ffd2 <UART_SetConfig+0x2ea>
9000fff4:	cfff69f3 	.word	0xcfff69f3
9000fff8:	58000c00 	.word	0x58000c00
9000fffc:	11fff4ff 	.word	0x11fff4ff
90010000:	40011000 	.word	0x40011000
90010004:	40004400 	.word	0x40004400
90010008:	40004800 	.word	0x40004800
9001000c:	40004c00 	.word	0x40004c00
90010010:	40005000 	.word	0x40005000
90010014:	40011400 	.word	0x40011400
90010018:	40007800 	.word	0x40007800
9001001c:	40007c00 	.word	0x40007c00
90010020:	58024400 	.word	0x58024400
90010024:	9002ae34 	.word	0x9002ae34
90010028:	9002ae60 	.word	0x9002ae60
9001002c:	9002ae68 	.word	0x9002ae68
90010030:	9002ae60 	.word	0x9002ae60
90010034:	03d09000 	.word	0x03d09000
    switch (clocksource)
90010038:	2b40      	cmp	r3, #64	; 0x40
9001003a:	f47f ae9c 	bne.w	9000fd76 <UART_SetConfig+0x8e>
9001003e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90010042:	4b6c      	ldr	r3, [pc, #432]	; (900101f4 <UART_SetConfig+0x50c>)
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
90010044:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
90010048:	6862      	ldr	r2, [r4, #4]
9001004a:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
9001004e:	fbb0 f3f3 	udiv	r3, r0, r3
90010052:	eb03 0352 	add.w	r3, r3, r2, lsr #1
90010056:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
9001005a:	f1a3 0210 	sub.w	r2, r3, #16
9001005e:	428a      	cmp	r2, r1
90010060:	f63f ae89 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
        huart->Instance->BRR = (uint16_t)usartdiv;
90010064:	6822      	ldr	r2, [r4, #0]
90010066:	2000      	movs	r0, #0
90010068:	60d3      	str	r3, [r2, #12]
9001006a:	e685      	b.n	9000fd78 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
9001006c:	4b62      	ldr	r3, [pc, #392]	; (900101f8 <UART_SetConfig+0x510>)
9001006e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010070:	f003 0307 	and.w	r3, r3, #7
90010074:	2b05      	cmp	r3, #5
90010076:	f63f ae7e 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
9001007a:	4a60      	ldr	r2, [pc, #384]	; (900101fc <UART_SetConfig+0x514>)
9001007c:	5cd3      	ldrb	r3, [r2, r3]
9001007e:	e68b      	b.n	9000fd98 <UART_SetConfig+0xb0>
    switch (clocksource)
90010080:	2b40      	cmp	r3, #64	; 0x40
90010082:	f47f ae78 	bne.w	9000fd76 <UART_SetConfig+0x8e>
90010086:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9001008a:	4b5a      	ldr	r3, [pc, #360]	; (900101f4 <UART_SetConfig+0x50c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9001008c:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9001008e:	f833 2011 	ldrh.w	r2, [r3, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
90010092:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
90010096:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
9001009a:	4299      	cmp	r1, r3
9001009c:	f63f ae6b 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
900100a0:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
900100a4:	f63f ae67 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900100a8:	2300      	movs	r3, #0
900100aa:	4619      	mov	r1, r3
900100ac:	f7f0 f972 	bl	90000394 <__aeabi_uldivmod>
900100b0:	462a      	mov	r2, r5
900100b2:	0209      	lsls	r1, r1, #8
900100b4:	0203      	lsls	r3, r0, #8
900100b6:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
900100ba:	0868      	lsrs	r0, r5, #1
900100bc:	1818      	adds	r0, r3, r0
900100be:	f04f 0300 	mov.w	r3, #0
900100c2:	f141 0100 	adc.w	r1, r1, #0
900100c6:	f7f0 f965 	bl	90000394 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
900100ca:	4a4d      	ldr	r2, [pc, #308]	; (90010200 <UART_SetConfig+0x518>)
900100cc:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900100d0:	4603      	mov	r3, r0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
900100d2:	4291      	cmp	r1, r2
900100d4:	f63f ae4f 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
900100d8:	e7c4      	b.n	90010064 <UART_SetConfig+0x37c>
    switch (clocksource)
900100da:	2b40      	cmp	r3, #64	; 0x40
900100dc:	f47f ae4b 	bne.w	9000fd76 <UART_SetConfig+0x8e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900100e0:	4b44      	ldr	r3, [pc, #272]	; (900101f4 <UART_SetConfig+0x50c>)
900100e2:	6862      	ldr	r2, [r4, #4]
900100e4:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
900100e8:	0853      	lsrs	r3, r2, #1
900100ea:	fbb0 f0f1 	udiv	r0, r0, r1
900100ee:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
900100f2:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900100f6:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
900100fa:	f1a0 0210 	sub.w	r2, r0, #16
900100fe:	429a      	cmp	r2, r3
90010100:	f63f ae39 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
90010104:	f020 030f 	bic.w	r3, r0, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
90010108:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
9001010c:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
9001010e:	b29b      	uxth	r3, r3
        huart->Instance->BRR = brrtemp;
90010110:	4303      	orrs	r3, r0
90010112:	2000      	movs	r0, #0
90010114:	60d3      	str	r3, [r2, #12]
90010116:	e62f      	b.n	9000fd78 <UART_SetConfig+0x90>
  UART_GETCLOCKSOURCE(huart, clocksource);
90010118:	4b37      	ldr	r3, [pc, #220]	; (900101f8 <UART_SetConfig+0x510>)
9001011a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001011c:	f003 0307 	and.w	r3, r3, #7
90010120:	2b05      	cmp	r3, #5
90010122:	f63f ae28 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
90010126:	4a37      	ldr	r2, [pc, #220]	; (90010204 <UART_SetConfig+0x51c>)
90010128:	5cd3      	ldrb	r3, [r2, r3]
9001012a:	e635      	b.n	9000fd98 <UART_SetConfig+0xb0>
9001012c:	4b32      	ldr	r3, [pc, #200]	; (900101f8 <UART_SetConfig+0x510>)
9001012e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010130:	f003 0338 	and.w	r3, r3, #56	; 0x38
90010134:	2b28      	cmp	r3, #40	; 0x28
90010136:	f63f ae1e 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
9001013a:	4a33      	ldr	r2, [pc, #204]	; (90010208 <UART_SetConfig+0x520>)
9001013c:	5cd3      	ldrb	r3, [r2, r3]
9001013e:	e62b      	b.n	9000fd98 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
90010140:	4832      	ldr	r0, [pc, #200]	; (9001020c <UART_SetConfig+0x524>)
90010142:	e77e      	b.n	90010042 <UART_SetConfig+0x35a>
  UART_GETCLOCKSOURCE(huart, clocksource);
90010144:	4b2c      	ldr	r3, [pc, #176]	; (900101f8 <UART_SetConfig+0x510>)
90010146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90010148:	f003 0307 	and.w	r3, r3, #7
9001014c:	2b05      	cmp	r3, #5
9001014e:	f63f ae12 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
90010152:	4a2f      	ldr	r2, [pc, #188]	; (90010210 <UART_SetConfig+0x528>)
90010154:	5cd3      	ldrb	r3, [r2, r3]
90010156:	e61f      	b.n	9000fd98 <UART_SetConfig+0xb0>
        pclk = (uint32_t) CSI_VALUE;
90010158:	482e      	ldr	r0, [pc, #184]	; (90010214 <UART_SetConfig+0x52c>)
9001015a:	e772      	b.n	90010042 <UART_SetConfig+0x35a>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
9001015c:	4b26      	ldr	r3, [pc, #152]	; (900101f8 <UART_SetConfig+0x510>)
9001015e:	681a      	ldr	r2, [r3, #0]
90010160:	0690      	lsls	r0, r2, #26
90010162:	d542      	bpl.n	900101ea <UART_SetConfig+0x502>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
90010164:	681b      	ldr	r3, [r3, #0]
90010166:	4829      	ldr	r0, [pc, #164]	; (9001020c <UART_SetConfig+0x524>)
90010168:	f3c3 03c1 	ubfx	r3, r3, #3, #2
9001016c:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
9001016e:	e78c      	b.n	9001008a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
90010170:	a803      	add	r0, sp, #12
90010172:	f7fe fd29 	bl	9000ebc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
90010176:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
90010178:	2800      	cmp	r0, #0
9001017a:	f43f af2b 	beq.w	9000ffd4 <UART_SetConfig+0x2ec>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
9001017e:	6a61      	ldr	r1, [r4, #36]	; 0x24
90010180:	e783      	b.n	9001008a <UART_SetConfig+0x3a2>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
90010182:	4668      	mov	r0, sp
90010184:	f7fe fc62 	bl	9000ea4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
90010188:	9801      	ldr	r0, [sp, #4]
        break;
9001018a:	e7f5      	b.n	90010178 <UART_SetConfig+0x490>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
9001018c:	f7fe fc4c 	bl	9000ea28 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
90010190:	e7f2      	b.n	90010178 <UART_SetConfig+0x490>
        pclk = (uint32_t) CSI_VALUE;
90010192:	4820      	ldr	r0, [pc, #128]	; (90010214 <UART_SetConfig+0x52c>)
90010194:	e779      	b.n	9001008a <UART_SetConfig+0x3a2>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
90010196:	4b18      	ldr	r3, [pc, #96]	; (900101f8 <UART_SetConfig+0x510>)
90010198:	681a      	ldr	r2, [r3, #0]
9001019a:	0691      	lsls	r1, r2, #26
9001019c:	d527      	bpl.n	900101ee <UART_SetConfig+0x506>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
9001019e:	681b      	ldr	r3, [r3, #0]
900101a0:	481a      	ldr	r0, [pc, #104]	; (9001020c <UART_SetConfig+0x524>)
900101a2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
900101a6:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
900101a8:	e79a      	b.n	900100e0 <UART_SetConfig+0x3f8>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
900101aa:	a803      	add	r0, sp, #12
900101ac:	f7fe fd0c 	bl	9000ebc8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
900101b0:	9804      	ldr	r0, [sp, #16]
    if (pclk != 0U)
900101b2:	2800      	cmp	r0, #0
900101b4:	f43f af0e 	beq.w	9000ffd4 <UART_SetConfig+0x2ec>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
900101b8:	6a65      	ldr	r5, [r4, #36]	; 0x24
900101ba:	e791      	b.n	900100e0 <UART_SetConfig+0x3f8>
        pclk = HAL_RCC_GetPCLK2Freq();
900101bc:	f7fd fcd0 	bl	9000db60 <HAL_RCC_GetPCLK2Freq>
        break;
900101c0:	e7f7      	b.n	900101b2 <UART_SetConfig+0x4ca>
        pclk = HAL_RCC_GetPCLK1Freq();
900101c2:	f7fd fc85 	bl	9000dad0 <HAL_RCC_GetPCLK1Freq>
        break;
900101c6:	e7f4      	b.n	900101b2 <UART_SetConfig+0x4ca>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
900101c8:	4668      	mov	r0, sp
900101ca:	f7fe fc3f 	bl	9000ea4c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
900101ce:	9801      	ldr	r0, [sp, #4]
        break;
900101d0:	e7ef      	b.n	900101b2 <UART_SetConfig+0x4ca>
        pclk = (uint32_t) CSI_VALUE;
900101d2:	4810      	ldr	r0, [pc, #64]	; (90010214 <UART_SetConfig+0x52c>)
900101d4:	e784      	b.n	900100e0 <UART_SetConfig+0x3f8>
  UART_GETCLOCKSOURCE(huart, clocksource);
900101d6:	4b08      	ldr	r3, [pc, #32]	; (900101f8 <UART_SetConfig+0x510>)
900101d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900101da:	f003 0307 	and.w	r3, r3, #7
900101de:	2b05      	cmp	r3, #5
900101e0:	f63f adc9 	bhi.w	9000fd76 <UART_SetConfig+0x8e>
900101e4:	4a0c      	ldr	r2, [pc, #48]	; (90010218 <UART_SetConfig+0x530>)
900101e6:	5cd3      	ldrb	r3, [r2, r3]
900101e8:	e5d6      	b.n	9000fd98 <UART_SetConfig+0xb0>
          pclk = (uint32_t) HSI_VALUE;
900101ea:	4808      	ldr	r0, [pc, #32]	; (9001020c <UART_SetConfig+0x524>)
900101ec:	e74d      	b.n	9001008a <UART_SetConfig+0x3a2>
          pclk = (uint32_t) HSI_VALUE;
900101ee:	4807      	ldr	r0, [pc, #28]	; (9001020c <UART_SetConfig+0x524>)
900101f0:	e776      	b.n	900100e0 <UART_SetConfig+0x3f8>
900101f2:	bf00      	nop
900101f4:	9002ae70 	.word	0x9002ae70
900101f8:	58024400 	.word	0x58024400
900101fc:	9002ae60 	.word	0x9002ae60
90010200:	000ffcff 	.word	0x000ffcff
90010204:	9002ae60 	.word	0x9002ae60
90010208:	9002ae34 	.word	0x9002ae34
9001020c:	03d09000 	.word	0x03d09000
90010210:	9002ae60 	.word	0x9002ae60
90010214:	003d0900 	.word	0x003d0900
90010218:	9002ae60 	.word	0x9002ae60

9001021c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
9001021c:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001021e:	07da      	lsls	r2, r3, #31
{
90010220:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
90010222:	d506      	bpl.n	90010232 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
90010224:	6801      	ldr	r1, [r0, #0]
90010226:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
90010228:	684a      	ldr	r2, [r1, #4]
9001022a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
9001022e:	4322      	orrs	r2, r4
90010230:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
90010232:	079c      	lsls	r4, r3, #30
90010234:	d506      	bpl.n	90010244 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
90010236:	6801      	ldr	r1, [r0, #0]
90010238:	6b04      	ldr	r4, [r0, #48]	; 0x30
9001023a:	684a      	ldr	r2, [r1, #4]
9001023c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
90010240:	4322      	orrs	r2, r4
90010242:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
90010244:	0759      	lsls	r1, r3, #29
90010246:	d506      	bpl.n	90010256 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
90010248:	6801      	ldr	r1, [r0, #0]
9001024a:	6b44      	ldr	r4, [r0, #52]	; 0x34
9001024c:	684a      	ldr	r2, [r1, #4]
9001024e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
90010252:	4322      	orrs	r2, r4
90010254:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
90010256:	071a      	lsls	r2, r3, #28
90010258:	d506      	bpl.n	90010268 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
9001025a:	6801      	ldr	r1, [r0, #0]
9001025c:	6b84      	ldr	r4, [r0, #56]	; 0x38
9001025e:	684a      	ldr	r2, [r1, #4]
90010260:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
90010264:	4322      	orrs	r2, r4
90010266:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
90010268:	06dc      	lsls	r4, r3, #27
9001026a:	d506      	bpl.n	9001027a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
9001026c:	6801      	ldr	r1, [r0, #0]
9001026e:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
90010270:	688a      	ldr	r2, [r1, #8]
90010272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
90010276:	4322      	orrs	r2, r4
90010278:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
9001027a:	0699      	lsls	r1, r3, #26
9001027c:	d506      	bpl.n	9001028c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
9001027e:	6801      	ldr	r1, [r0, #0]
90010280:	6c04      	ldr	r4, [r0, #64]	; 0x40
90010282:	688a      	ldr	r2, [r1, #8]
90010284:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
90010288:	4322      	orrs	r2, r4
9001028a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
9001028c:	065a      	lsls	r2, r3, #25
9001028e:	d50a      	bpl.n	900102a6 <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
90010290:	6801      	ldr	r1, [r0, #0]
90010292:	6c44      	ldr	r4, [r0, #68]	; 0x44
90010294:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
90010296:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
9001029a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
9001029e:	ea42 0204 	orr.w	r2, r2, r4
900102a2:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
900102a4:	d00b      	beq.n	900102be <UART_AdvFeatureConfig+0xa2>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
900102a6:	061b      	lsls	r3, r3, #24
900102a8:	d506      	bpl.n	900102b8 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
900102aa:	6802      	ldr	r2, [r0, #0]
900102ac:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
900102ae:	6853      	ldr	r3, [r2, #4]
900102b0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
900102b4:	430b      	orrs	r3, r1
900102b6:	6053      	str	r3, [r2, #4]
}
900102b8:	f85d 4b04 	ldr.w	r4, [sp], #4
900102bc:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
900102be:	684a      	ldr	r2, [r1, #4]
900102c0:	6c84      	ldr	r4, [r0, #72]	; 0x48
900102c2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
900102c6:	4322      	orrs	r2, r4
900102c8:	604a      	str	r2, [r1, #4]
900102ca:	e7ec      	b.n	900102a6 <UART_AdvFeatureConfig+0x8a>

900102cc <UART_CheckIdleState>:
{
900102cc:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900102ce:	2300      	movs	r3, #0
{
900102d0:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900102d2:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
900102d6:	f7f9 fb5b 	bl	90009990 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900102da:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
900102dc:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
900102de:	6813      	ldr	r3, [r2, #0]
900102e0:	071b      	lsls	r3, r3, #28
900102e2:	d40e      	bmi.n	90010302 <UART_CheckIdleState+0x36>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
900102e4:	6813      	ldr	r3, [r2, #0]
900102e6:	0759      	lsls	r1, r3, #29
900102e8:	d432      	bmi.n	90010350 <UART_CheckIdleState+0x84>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900102ea:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
900102ec:	2220      	movs	r2, #32
  return HAL_OK;
900102ee:	4618      	mov	r0, r3
  huart->gState = HAL_UART_STATE_READY;
900102f0:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
900102f4:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
900102f8:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900102fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
900102fe:	6723      	str	r3, [r4, #112]	; 0x70
}
90010300:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90010302:	69d3      	ldr	r3, [r2, #28]
90010304:	0298      	lsls	r0, r3, #10
90010306:	d4ed      	bmi.n	900102e4 <UART_CheckIdleState+0x18>
90010308:	e00c      	b.n	90010324 <UART_CheckIdleState+0x58>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
9001030a:	6819      	ldr	r1, [r3, #0]
9001030c:	461a      	mov	r2, r3
9001030e:	0749      	lsls	r1, r1, #29
90010310:	d505      	bpl.n	9001031e <UART_CheckIdleState+0x52>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
90010312:	69d9      	ldr	r1, [r3, #28]
90010314:	0708      	lsls	r0, r1, #28
90010316:	d44f      	bmi.n	900103b8 <UART_CheckIdleState+0xec>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90010318:	69d9      	ldr	r1, [r3, #28]
9001031a:	0509      	lsls	r1, r1, #20
9001031c:	d47a      	bmi.n	90010414 <UART_CheckIdleState+0x148>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9001031e:	69db      	ldr	r3, [r3, #28]
90010320:	0298      	lsls	r0, r3, #10
90010322:	d4df      	bmi.n	900102e4 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90010324:	f7f9 fb34 	bl	90009990 <HAL_GetTick>
90010328:	1b43      	subs	r3, r0, r5
9001032a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9001032e:	6823      	ldr	r3, [r4, #0]
90010330:	d3eb      	bcc.n	9001030a <UART_CheckIdleState+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010332:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
90010336:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001033a:	e843 2100 	strex	r1, r2, [r3]
9001033e:	2900      	cmp	r1, #0
90010340:	d1f7      	bne.n	90010332 <UART_CheckIdleState+0x66>
      huart->gState = HAL_UART_STATE_READY;
90010342:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
90010344:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
90010346:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
9001034a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
}
9001034e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
90010350:	69d3      	ldr	r3, [r2, #28]
90010352:	025b      	lsls	r3, r3, #9
90010354:	d4c9      	bmi.n	900102ea <UART_CheckIdleState+0x1e>
90010356:	e00d      	b.n	90010374 <UART_CheckIdleState+0xa8>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
90010358:	681a      	ldr	r2, [r3, #0]
9001035a:	0750      	lsls	r0, r2, #29
9001035c:	d507      	bpl.n	9001036e <UART_CheckIdleState+0xa2>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
9001035e:	69da      	ldr	r2, [r3, #28]
90010360:	0711      	lsls	r1, r2, #28
90010362:	f100 8085 	bmi.w	90010470 <UART_CheckIdleState+0x1a4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
90010366:	69da      	ldr	r2, [r3, #28]
90010368:	0512      	lsls	r2, r2, #20
9001036a:	f100 80af 	bmi.w	900104cc <UART_CheckIdleState+0x200>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
9001036e:	69db      	ldr	r3, [r3, #28]
90010370:	025b      	lsls	r3, r3, #9
90010372:	d4ba      	bmi.n	900102ea <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
90010374:	f7f9 fb0c 	bl	90009990 <HAL_GetTick>
90010378:	1b43      	subs	r3, r0, r5
9001037a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
9001037e:	6823      	ldr	r3, [r4, #0]
90010380:	d3ea      	bcc.n	90010358 <UART_CheckIdleState+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010382:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90010386:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001038a:	e843 2100 	strex	r1, r2, [r3]
9001038e:	2900      	cmp	r1, #0
90010390:	d1f7      	bne.n	90010382 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010392:	f103 0208 	add.w	r2, r3, #8
90010396:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
9001039a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001039e:	f103 0008 	add.w	r0, r3, #8
900103a2:	e840 2100 	strex	r1, r2, [r0]
900103a6:	2900      	cmp	r1, #0
900103a8:	d1f3      	bne.n	90010392 <UART_CheckIdleState+0xc6>
      huart->RxState = HAL_UART_STATE_READY;
900103aa:	2320      	movs	r3, #32
      return HAL_TIMEOUT;
900103ac:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
900103ae:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
900103b2:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
}
900103b6:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
900103b8:	2208      	movs	r2, #8
900103ba:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900103bc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
900103c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900103c4:	e843 2100 	strex	r1, r2, [r3]
900103c8:	2900      	cmp	r1, #0
900103ca:	d1f7      	bne.n	900103bc <UART_CheckIdleState+0xf0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
900103cc:	4856      	ldr	r0, [pc, #344]	; (90010528 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900103ce:	f103 0208 	add.w	r2, r3, #8
900103d2:	e852 2f00 	ldrex	r2, [r2]
900103d6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900103d8:	f103 0508 	add.w	r5, r3, #8
900103dc:	e845 2100 	strex	r1, r2, [r5]
900103e0:	2900      	cmp	r1, #0
900103e2:	d1f4      	bne.n	900103ce <UART_CheckIdleState+0x102>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
900103e4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
900103e6:	2a01      	cmp	r2, #1
900103e8:	d00b      	beq.n	90010402 <UART_CheckIdleState+0x136>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900103ea:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
900103ec:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
900103ee:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
900103f0:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
900103f4:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900103f6:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
900103f8:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
900103fc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
90010400:	e797      	b.n	90010332 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010402:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
90010406:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001040a:	e843 2100 	strex	r1, r2, [r3]
9001040e:	2900      	cmp	r1, #0
90010410:	d1f7      	bne.n	90010402 <UART_CheckIdleState+0x136>
90010412:	e7ea      	b.n	900103ea <UART_CheckIdleState+0x11e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
90010414:	f44f 6200 	mov.w	r2, #2048	; 0x800
90010418:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001041a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
9001041e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010422:	e843 2100 	strex	r1, r2, [r3]
90010426:	2900      	cmp	r1, #0
90010428:	d1f7      	bne.n	9001041a <UART_CheckIdleState+0x14e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
9001042a:	483f      	ldr	r0, [pc, #252]	; (90010528 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001042c:	f103 0208 	add.w	r2, r3, #8
90010430:	e852 2f00 	ldrex	r2, [r2]
90010434:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010436:	f103 0508 	add.w	r5, r3, #8
9001043a:	e845 2100 	strex	r1, r2, [r5]
9001043e:	2900      	cmp	r1, #0
90010440:	d1f4      	bne.n	9001042c <UART_CheckIdleState+0x160>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
90010442:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
90010444:	2a01      	cmp	r2, #1
90010446:	d00a      	beq.n	9001045e <UART_CheckIdleState+0x192>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90010448:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
9001044a:	2120      	movs	r1, #32
  huart->RxISR = NULL;
9001044c:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
9001044e:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
90010452:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90010456:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90010458:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
9001045c:	e769      	b.n	90010332 <UART_CheckIdleState+0x66>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001045e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
90010462:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010466:	e843 2100 	strex	r1, r2, [r3]
9001046a:	2900      	cmp	r1, #0
9001046c:	d1f7      	bne.n	9001045e <UART_CheckIdleState+0x192>
9001046e:	e7eb      	b.n	90010448 <UART_CheckIdleState+0x17c>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
90010470:	2208      	movs	r2, #8
90010472:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010474:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
90010478:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001047c:	e843 2100 	strex	r1, r2, [r3]
90010480:	2900      	cmp	r1, #0
90010482:	d1f7      	bne.n	90010474 <UART_CheckIdleState+0x1a8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
90010484:	4828      	ldr	r0, [pc, #160]	; (90010528 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010486:	f103 0208 	add.w	r2, r3, #8
9001048a:	e852 2f00 	ldrex	r2, [r2]
9001048e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010490:	f103 0508 	add.w	r5, r3, #8
90010494:	e845 2100 	strex	r1, r2, [r5]
90010498:	2900      	cmp	r1, #0
9001049a:	d1f4      	bne.n	90010486 <UART_CheckIdleState+0x1ba>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9001049c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
9001049e:	2a01      	cmp	r2, #1
900104a0:	d00b      	beq.n	900104ba <UART_CheckIdleState+0x1ee>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900104a2:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
900104a4:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
900104a6:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
900104a8:	f8c4 008c 	str.w	r0, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
900104ac:	6762      	str	r2, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
900104ae:	66e2      	str	r2, [r4, #108]	; 0x6c
           __HAL_UNLOCK(huart);
900104b0:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
           huart->ErrorCode = HAL_UART_ERROR_ORE;
900104b4:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
           return HAL_ERROR;
900104b8:	e763      	b.n	90010382 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900104ba:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
900104be:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900104c2:	e843 2100 	strex	r1, r2, [r3]
900104c6:	2900      	cmp	r1, #0
900104c8:	d1f7      	bne.n	900104ba <UART_CheckIdleState+0x1ee>
900104ca:	e7ea      	b.n	900104a2 <UART_CheckIdleState+0x1d6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
900104cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
900104d0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900104d2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
900104d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900104da:	e843 2100 	strex	r1, r2, [r3]
900104de:	2900      	cmp	r1, #0
900104e0:	d1f7      	bne.n	900104d2 <UART_CheckIdleState+0x206>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
900104e2:	4811      	ldr	r0, [pc, #68]	; (90010528 <UART_CheckIdleState+0x25c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900104e4:	f103 0208 	add.w	r2, r3, #8
900104e8:	e852 2f00 	ldrex	r2, [r2]
900104ec:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900104ee:	f103 0508 	add.w	r5, r3, #8
900104f2:	e845 2100 	strex	r1, r2, [r5]
900104f6:	2900      	cmp	r1, #0
900104f8:	d1f4      	bne.n	900104e4 <UART_CheckIdleState+0x218>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
900104fa:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
900104fc:	2a01      	cmp	r2, #1
900104fe:	d00a      	beq.n	90010516 <UART_CheckIdleState+0x24a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
90010500:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
90010502:	2120      	movs	r1, #32
  huart->RxISR = NULL;
90010504:	6762      	str	r2, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
90010506:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
          __HAL_UNLOCK(huart);
9001050a:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
9001050e:	66e2      	str	r2, [r4, #108]	; 0x6c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
90010510:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
          return HAL_TIMEOUT;
90010514:	e735      	b.n	90010382 <UART_CheckIdleState+0xb6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
90010516:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
9001051a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
9001051e:	e843 2100 	strex	r1, r2, [r3]
90010522:	2900      	cmp	r1, #0
90010524:	d1f7      	bne.n	90010516 <UART_CheckIdleState+0x24a>
90010526:	e7eb      	b.n	90010500 <UART_CheckIdleState+0x234>
90010528:	effffffe 	.word	0xeffffffe

9001052c <HAL_UART_Init>:
  if (huart == NULL)
9001052c:	b380      	cbz	r0, 90010590 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
9001052e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
90010532:	b510      	push	{r4, lr}
90010534:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
90010536:	b333      	cbz	r3, 90010586 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
90010538:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
9001053a:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
9001053c:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
9001053e:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
90010542:	6813      	ldr	r3, [r2, #0]
90010544:	f023 0301 	bic.w	r3, r3, #1
90010548:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
9001054a:	f7ff fbcd 	bl	9000fce8 <UART_SetConfig>
9001054e:	2801      	cmp	r0, #1
90010550:	d017      	beq.n	90010582 <HAL_UART_Init+0x56>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
90010552:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90010554:	b98b      	cbnz	r3, 9001057a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
90010556:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
90010558:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
9001055a:	685a      	ldr	r2, [r3, #4]
9001055c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
90010560:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
90010562:	689a      	ldr	r2, [r3, #8]
90010564:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
90010568:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
9001056a:	681a      	ldr	r2, [r3, #0]
9001056c:	f042 0201 	orr.w	r2, r2, #1
}
90010570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
90010574:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
90010576:	f7ff bea9 	b.w	900102cc <UART_CheckIdleState>
    UART_AdvFeatureConfig(huart);
9001057a:	4620      	mov	r0, r4
9001057c:	f7ff fe4e 	bl	9001021c <UART_AdvFeatureConfig>
90010580:	e7e9      	b.n	90010556 <HAL_UART_Init+0x2a>
}
90010582:	2001      	movs	r0, #1
90010584:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
90010586:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
9001058a:	f7f4 fad9 	bl	90004b40 <HAL_UART_MspInit>
9001058e:	e7d3      	b.n	90010538 <HAL_UART_Init+0xc>
}
90010590:	2001      	movs	r0, #1
90010592:	4770      	bx	lr

90010594 <UART_Start_Receive_IT>:
  UART_MASK_COMPUTATION(huart);
90010594:	6883      	ldr	r3, [r0, #8]
{
90010596:	b410      	push	{r4}
  UART_MASK_COMPUTATION(huart);
90010598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
  huart->RxISR       = NULL;
9001059c:	f04f 0400 	mov.w	r4, #0
  huart->pRxBuffPtr  = pData;
900105a0:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
900105a2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
900105a6:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
900105aa:	6744      	str	r4, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
900105ac:	d051      	beq.n	90010652 <UART_Start_Receive_IT+0xbe>
900105ae:	2b00      	cmp	r3, #0
900105b0:	d045      	beq.n	9001063e <UART_Start_Receive_IT+0xaa>
900105b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
900105b6:	d078      	beq.n	900106aa <UART_Start_Receive_IT+0x116>
900105b8:	f8a0 4060 	strh.w	r4, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900105bc:	2400      	movs	r4, #0
  huart->RxState = HAL_UART_STATE_BUSY_RX;
900105be:	2322      	movs	r3, #34	; 0x22
900105c0:	6801      	ldr	r1, [r0, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
900105c2:	f8c0 4090 	str.w	r4, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
900105c6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900105ca:	f101 0308 	add.w	r3, r1, #8
900105ce:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
900105d2:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
900105d6:	f101 0c08 	add.w	ip, r1, #8
900105da:	e84c 3400 	strex	r4, r3, [ip]
900105de:	2c00      	cmp	r4, #0
900105e0:	d1f3      	bne.n	900105ca <UART_Start_Receive_IT+0x36>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
900105e2:	6e43      	ldr	r3, [r0, #100]	; 0x64
900105e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
900105e8:	d03b      	beq.n	90010662 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
900105ea:	6883      	ldr	r3, [r0, #8]
900105ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
900105f0:	d00f      	beq.n	90010612 <UART_Start_Receive_IT+0x7e>
900105f2:	4a35      	ldr	r2, [pc, #212]	; (900106c8 <UART_Start_Receive_IT+0x134>)
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
900105f4:	6903      	ldr	r3, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT;
900105f6:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
900105f8:	b183      	cbz	r3, 9001061c <UART_Start_Receive_IT+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
900105fa:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
900105fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010602:	e841 3200 	strex	r2, r3, [r1]
90010606:	2a00      	cmp	r2, #0
90010608:	d1f7      	bne.n	900105fa <UART_Start_Receive_IT+0x66>
}
9001060a:	2000      	movs	r0, #0
9001060c:	f85d 4b04 	ldr.w	r4, [sp], #4
90010610:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
90010612:	6903      	ldr	r3, [r0, #16]
90010614:	2b00      	cmp	r3, #0
90010616:	d145      	bne.n	900106a4 <UART_Start_Receive_IT+0x110>
90010618:	4b2c      	ldr	r3, [pc, #176]	; (900106cc <UART_Start_Receive_IT+0x138>)
9001061a:	6743      	str	r3, [r0, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001061c:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
90010620:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010624:	e841 3200 	strex	r2, r3, [r1]
90010628:	2a00      	cmp	r2, #0
9001062a:	d0ee      	beq.n	9001060a <UART_Start_Receive_IT+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001062c:	e851 3f00 	ldrex	r3, [r1]
90010630:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010634:	e841 3200 	strex	r2, r3, [r1]
90010638:	2a00      	cmp	r2, #0
9001063a:	d1ef      	bne.n	9001061c <UART_Start_Receive_IT+0x88>
9001063c:	e7e5      	b.n	9001060a <UART_Start_Receive_IT+0x76>
  UART_MASK_COMPUTATION(huart);
9001063e:	6903      	ldr	r3, [r0, #16]
90010640:	b91b      	cbnz	r3, 9001064a <UART_Start_Receive_IT+0xb6>
90010642:	23ff      	movs	r3, #255	; 0xff
90010644:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
90010648:	e7b8      	b.n	900105bc <UART_Start_Receive_IT+0x28>
9001064a:	237f      	movs	r3, #127	; 0x7f
9001064c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
90010650:	e7b4      	b.n	900105bc <UART_Start_Receive_IT+0x28>
90010652:	6903      	ldr	r3, [r0, #16]
90010654:	2b00      	cmp	r3, #0
90010656:	d1f4      	bne.n	90010642 <UART_Start_Receive_IT+0xae>
90010658:	f240 13ff 	movw	r3, #511	; 0x1ff
9001065c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
90010660:	e7ac      	b.n	900105bc <UART_Start_Receive_IT+0x28>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
90010662:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
90010666:	4293      	cmp	r3, r2
90010668:	d8bf      	bhi.n	900105ea <UART_Start_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
9001066a:	6883      	ldr	r3, [r0, #8]
9001066c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
90010670:	d022      	beq.n	900106b8 <UART_Start_Receive_IT+0x124>
90010672:	4a17      	ldr	r2, [pc, #92]	; (900106d0 <UART_Start_Receive_IT+0x13c>)
90010674:	6903      	ldr	r3, [r0, #16]
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
90010676:	6742      	str	r2, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
90010678:	b13b      	cbz	r3, 9001068a <UART_Start_Receive_IT+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001067a:	e851 3f00 	ldrex	r3, [r1]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
9001067e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010682:	e841 3200 	strex	r2, r3, [r1]
90010686:	2a00      	cmp	r2, #0
90010688:	d1f7      	bne.n	9001067a <UART_Start_Receive_IT+0xe6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001068a:	f101 0308 	add.w	r3, r1, #8
9001068e:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
90010692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010696:	f101 0008 	add.w	r0, r1, #8
9001069a:	e840 3200 	strex	r2, r3, [r0]
9001069e:	2a00      	cmp	r2, #0
900106a0:	d1f3      	bne.n	9001068a <UART_Start_Receive_IT+0xf6>
900106a2:	e7b2      	b.n	9001060a <UART_Start_Receive_IT+0x76>
      huart->RxISR = UART_RxISR_8BIT;
900106a4:	4b08      	ldr	r3, [pc, #32]	; (900106c8 <UART_Start_Receive_IT+0x134>)
900106a6:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
900106a8:	e7a7      	b.n	900105fa <UART_Start_Receive_IT+0x66>
  UART_MASK_COMPUTATION(huart);
900106aa:	6903      	ldr	r3, [r0, #16]
900106ac:	2b00      	cmp	r3, #0
900106ae:	d0cc      	beq.n	9001064a <UART_Start_Receive_IT+0xb6>
900106b0:	233f      	movs	r3, #63	; 0x3f
900106b2:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
900106b6:	e781      	b.n	900105bc <UART_Start_Receive_IT+0x28>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
900106b8:	6903      	ldr	r3, [r0, #16]
900106ba:	b913      	cbnz	r3, 900106c2 <UART_Start_Receive_IT+0x12e>
900106bc:	4b05      	ldr	r3, [pc, #20]	; (900106d4 <UART_Start_Receive_IT+0x140>)
900106be:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
900106c0:	e7e3      	b.n	9001068a <UART_Start_Receive_IT+0xf6>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
900106c2:	4b03      	ldr	r3, [pc, #12]	; (900106d0 <UART_Start_Receive_IT+0x13c>)
900106c4:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
900106c6:	e7d8      	b.n	9001067a <UART_Start_Receive_IT+0xe6>
900106c8:	9000f8d1 	.word	0x9000f8d1
900106cc:	9000f891 	.word	0x9000f891
900106d0:	9000f915 	.word	0x9000f915
900106d4:	9000fb01 	.word	0x9000fb01

900106d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
900106d8:	4770      	bx	lr
900106da:	bf00      	nop

900106dc <HAL_UARTEx_RxFifoFullCallback>:
900106dc:	4770      	bx	lr
900106de:	bf00      	nop

900106e0 <HAL_UARTEx_TxFifoEmptyCallback>:
900106e0:	4770      	bx	lr
900106e2:	bf00      	nop

900106e4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
900106e4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
900106e8:	2a01      	cmp	r2, #1
900106ea:	d017      	beq.n	9001071c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
900106ec:	6802      	ldr	r2, [r0, #0]
900106ee:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
900106f0:	2024      	movs	r0, #36	; 0x24
  /* Disable UART */
  __HAL_UART_DISABLE(huart);

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
900106f2:	2100      	movs	r1, #0
{
900106f4:	b430      	push	{r4, r5}
  huart->gState = HAL_UART_STATE_BUSY;
900106f6:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
900106fa:	2520      	movs	r5, #32
  tmpcr1 = READ_REG(huart->Instance->CR1);
900106fc:	6810      	ldr	r0, [r2, #0]
  __HAL_UART_DISABLE(huart);
900106fe:	6814      	ldr	r4, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
90010700:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
90010704:	f024 0401 	bic.w	r4, r4, #1
90010708:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
9001070a:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
9001070c:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
9001070e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
90010710:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
90010714:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
90010718:	bc30      	pop	{r4, r5}
9001071a:	4770      	bx	lr
  __HAL_LOCK(huart);
9001071c:	2002      	movs	r0, #2
}
9001071e:	4770      	bx	lr

90010720 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
90010720:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
90010724:	2a01      	cmp	r2, #1
90010726:	d037      	beq.n	90010798 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
90010728:	6802      	ldr	r2, [r0, #0]
9001072a:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
9001072c:	2024      	movs	r0, #36	; 0x24
{
9001072e:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
90010730:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
90010734:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
90010736:	6810      	ldr	r0, [r2, #0]
90010738:	f020 0001 	bic.w	r0, r0, #1
9001073c:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
9001073e:	6890      	ldr	r0, [r2, #8]
90010740:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
90010744:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
90010746:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
90010748:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
9001074a:	b310      	cbz	r0, 90010792 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
9001074c:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
9001074e:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90010750:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90010754:	4911      	ldr	r1, [pc, #68]	; (9001079c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
90010756:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
9001075a:	4d11      	ldr	r5, [pc, #68]	; (900107a0 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
9001075c:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90010760:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
90010764:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90010768:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
9001076a:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
9001076e:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
90010770:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
90010774:	fbb1 f1f5 	udiv	r1, r1, r5
90010778:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
9001077c:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
9001077e:	2100      	movs	r1, #0
90010780:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90010784:	6014      	str	r4, [r2, #0]
  return HAL_OK;
90010786:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
90010788:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
9001078c:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
90010790:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
90010792:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
90010794:	4608      	mov	r0, r1
90010796:	e7ef      	b.n	90010778 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
90010798:	2002      	movs	r0, #2
}
9001079a:	4770      	bx	lr
9001079c:	9002ae90 	.word	0x9002ae90
900107a0:	9002ae88 	.word	0x9002ae88

900107a4 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
900107a4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
900107a8:	2a01      	cmp	r2, #1
900107aa:	d037      	beq.n	9001081c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  tmpcr1 = READ_REG(huart->Instance->CR1);
900107ac:	6802      	ldr	r2, [r0, #0]
900107ae:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
900107b0:	2024      	movs	r0, #36	; 0x24
{
900107b2:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
900107b4:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
900107b8:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
900107ba:	6810      	ldr	r0, [r2, #0]
900107bc:	f020 0001 	bic.w	r0, r0, #1
900107c0:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
900107c2:	6890      	ldr	r0, [r2, #8]
900107c4:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
900107c8:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
900107ca:	6e58      	ldr	r0, [r3, #100]	; 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
900107cc:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
900107ce:	b310      	cbz	r0, 90010816 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
900107d0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
900107d2:	6890      	ldr	r0, [r2, #8]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900107d4:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900107d8:	4911      	ldr	r1, [pc, #68]	; (90010820 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
900107da:	ea4f 7e50 	mov.w	lr, r0, lsr #29
                               (uint16_t)denominator[tx_fifo_threshold];
900107de:	4d11      	ldr	r5, [pc, #68]	; (90010824 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900107e0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900107e4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
900107e8:	f815 e00e 	ldrb.w	lr, [r5, lr]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900107ec:	0100      	lsls	r0, r0, #4
                               (uint16_t)denominator[rx_fifo_threshold];
900107ee:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900107f2:	0109      	lsls	r1, r1, #4
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
900107f4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
900107f8:	fbb1 f1f5 	udiv	r1, r1, r5
900107fc:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  huart->gState = HAL_UART_STATE_READY;
90010800:	2520      	movs	r5, #32
  __HAL_UNLOCK(huart);
90010802:	2100      	movs	r1, #0
90010804:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
90010808:	6014      	str	r4, [r2, #0]
  return HAL_OK;
9001080a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
9001080c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
90010810:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
90010814:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
90010816:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
90010818:	4608      	mov	r0, r1
9001081a:	e7ef      	b.n	900107fc <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
9001081c:	2002      	movs	r0, #2
}
9001081e:	4770      	bx	lr
90010820:	9002ae90 	.word	0x9002ae90
90010824:	9002ae88 	.word	0x9002ae88

90010828 <HAL_UARTEx_ReceiveToIdle_IT>:
{
90010828:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
9001082a:	f8d0 608c 	ldr.w	r6, [r0, #140]	; 0x8c
9001082e:	2e20      	cmp	r6, #32
90010830:	d110      	bne.n	90010854 <HAL_UARTEx_ReceiveToIdle_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
90010832:	b169      	cbz	r1, 90010850 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
90010834:	fab2 f582 	clz	r5, r2
90010838:	096d      	lsrs	r5, r5, #5
9001083a:	b14a      	cbz	r2, 90010850 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
9001083c:	2301      	movs	r3, #1
9001083e:	4604      	mov	r4, r0
90010840:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
90010842:	6705      	str	r5, [r0, #112]	; 0x70
    status =  UART_Start_Receive_IT(huart, pData, Size);
90010844:	f7ff fea6 	bl	90010594 <UART_Start_Receive_IT>
    if (status == HAL_OK)
90010848:	b918      	cbnz	r0, 90010852 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
9001084a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
9001084c:	2b01      	cmp	r3, #1
9001084e:	d003      	beq.n	90010858 <HAL_UARTEx_ReceiveToIdle_IT+0x30>
      return HAL_ERROR;
90010850:	2001      	movs	r0, #1
}
90010852:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
90010854:	2002      	movs	r0, #2
}
90010856:	bd70      	pop	{r4, r5, r6, pc}
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
90010858:	6822      	ldr	r2, [r4, #0]
9001085a:	2310      	movs	r3, #16
9001085c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
9001085e:	e852 3f00 	ldrex	r3, [r2]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
90010862:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
90010866:	e842 3100 	strex	r1, r3, [r2]
9001086a:	2900      	cmp	r1, #0
9001086c:	d1f7      	bne.n	9001085e <HAL_UARTEx_ReceiveToIdle_IT+0x36>
}
9001086e:	bd70      	pop	{r4, r5, r6, pc}

90010870 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
90010870:	680b      	ldr	r3, [r1, #0]
{
90010872:	b410      	push	{r4}
  if (Init->SDBank == FMC_SDRAM_BANK1)
90010874:	b9d3      	cbnz	r3, 900108ac <FMC_SDRAM_Init+0x3c>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
90010876:	6804      	ldr	r4, [r0, #0]
90010878:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
9001087c:	684a      	ldr	r2, [r1, #4]
9001087e:	4023      	ands	r3, r4
90010880:	4313      	orrs	r3, r2
90010882:	e9d1 4202 	ldrd	r4, r2, [r1, #8]
90010886:	4323      	orrs	r3, r4
90010888:	4313      	orrs	r3, r2
9001088a:	e9d1 4204 	ldrd	r4, r2, [r1, #16]
9001088e:	4323      	orrs	r3, r4
90010890:	4313      	orrs	r3, r2
90010892:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
90010896:	4323      	orrs	r3, r4
90010898:	4313      	orrs	r3, r2
9001089a:	e9d1 4208 	ldrd	r4, r2, [r1, #32]
9001089e:	4323      	orrs	r3, r4
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
900108a0:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900108a4:	4313      	orrs	r3, r2
900108a6:	6003      	str	r3, [r0, #0]
}
900108a8:	2000      	movs	r0, #0
900108aa:	4770      	bx	lr
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900108ac:	6802      	ldr	r2, [r0, #0]
900108ae:	e9d1 4307 	ldrd	r4, r3, [r1, #28]
900108b2:	f422 42f8 	bic.w	r2, r2, #31744	; 0x7c00
900108b6:	4322      	orrs	r2, r4
900108b8:	6a4c      	ldr	r4, [r1, #36]	; 0x24
900108ba:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
900108bc:	4b0a      	ldr	r3, [pc, #40]	; (900108e8 <FMC_SDRAM_Init+0x78>)
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
900108be:	4322      	orrs	r2, r4
900108c0:	6002      	str	r2, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
900108c2:	6842      	ldr	r2, [r0, #4]
900108c4:	4013      	ands	r3, r2
900108c6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
900108ca:	4323      	orrs	r3, r4
900108cc:	4313      	orrs	r3, r2
900108ce:	e9d1 4203 	ldrd	r4, r2, [r1, #12]
900108d2:	4323      	orrs	r3, r4
900108d4:	4313      	orrs	r3, r2
900108d6:	e9d1 4205 	ldrd	r4, r2, [r1, #20]
900108da:	4323      	orrs	r3, r4
}
900108dc:	f85d 4b04 	ldr.w	r4, [sp], #4
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
900108e0:	4313      	orrs	r3, r2
900108e2:	6043      	str	r3, [r0, #4]
}
900108e4:	2000      	movs	r0, #0
900108e6:	4770      	bx	lr
900108e8:	ffff8000 	.word	0xffff8000

900108ec <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
900108ec:	b430      	push	{r4, r5}
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
900108ee:	bb0a      	cbnz	r2, 90010934 <FMC_SDRAM_Timing_Init+0x48>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
900108f0:	6883      	ldr	r3, [r0, #8]
900108f2:	e9d1 2400 	ldrd	r2, r4, [r1]
900108f6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
900108fa:	3c01      	subs	r4, #1
900108fc:	3a01      	subs	r2, #1
900108fe:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
90010902:	4313      	orrs	r3, r2
90010904:	e9d1 2402 	ldrd	r2, r4, [r1, #8]
90010908:	3a01      	subs	r2, #1
9001090a:	3c01      	subs	r4, #1
9001090c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
90010910:	ea43 3204 	orr.w	r2, r3, r4, lsl #12
90010914:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
90010918:	6989      	ldr	r1, [r1, #24]
9001091a:	3b01      	subs	r3, #1
9001091c:	3c01      	subs	r4, #1
9001091e:	3901      	subs	r1, #1
90010920:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
90010924:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
90010928:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
9001092c:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9001092e:	6083      	str	r3, [r0, #8]
}
90010930:	2000      	movs	r0, #0
90010932:	4770      	bx	lr
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
90010934:	6882      	ldr	r2, [r0, #8]
90010936:	68cc      	ldr	r4, [r1, #12]
90010938:	4b11      	ldr	r3, [pc, #68]	; (90010980 <FMC_SDRAM_Timing_Init+0x94>)
9001093a:	3c01      	subs	r4, #1
9001093c:	4013      	ands	r3, r2
9001093e:	694a      	ldr	r2, [r1, #20]
90010940:	ea43 3304 	orr.w	r3, r3, r4, lsl #12
90010944:	1e54      	subs	r4, r2, #1
90010946:	ea43 5404 	orr.w	r4, r3, r4, lsl #20
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9001094a:	e9d1 2500 	ldrd	r2, r5, [r1]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
9001094e:	6084      	str	r4, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
90010950:	68c3      	ldr	r3, [r0, #12]
90010952:	1e6c      	subs	r4, r5, #1
90010954:	3a01      	subs	r2, #1
90010956:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
9001095a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
9001095e:	690c      	ldr	r4, [r1, #16]
90010960:	431a      	orrs	r2, r3
90010962:	688b      	ldr	r3, [r1, #8]
90010964:	3c01      	subs	r4, #1
90010966:	6989      	ldr	r1, [r1, #24]
90010968:	3b01      	subs	r3, #1
9001096a:	3901      	subs	r1, #1
9001096c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
90010970:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
90010974:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
}
90010978:	bc30      	pop	{r4, r5}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
9001097a:	60c3      	str	r3, [r0, #12]
}
9001097c:	2000      	movs	r0, #0
9001097e:	4770      	bx	lr
90010980:	ff0f0fff 	.word	0xff0f0fff

90010984 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
90010984:	b430      	push	{r4, r5}
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
90010986:	2200      	movs	r2, #0
{
90010988:	4603      	mov	r3, r0
  Device->SDCR[Bank] = 0x000002D0U;
9001098a:	f44f 7534 	mov.w	r5, #720	; 0x2d0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9001098e:	f06f 4470 	mvn.w	r4, #4026531840	; 0xf0000000
90010992:	eb00 0c81 	add.w	ip, r0, r1, lsl #2
  Device->SDCR[Bank] = 0x000002D0U;
90010996:	f840 5021 	str.w	r5, [r0, r1, lsl #2]
  Device->SDRTR      = 0x00000000U;
  Device->SDSR       = 0x00000000U;

  return HAL_OK;
}
9001099a:	4610      	mov	r0, r2
  Device->SDTR[Bank] = 0x0FFFFFFFU;
9001099c:	f8cc 4008 	str.w	r4, [ip, #8]
  Device->SDCMR      = 0x00000000U;
900109a0:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
900109a2:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
900109a4:	619a      	str	r2, [r3, #24]
}
900109a6:	bc30      	pop	{r4, r5}
900109a8:	4770      	bx	lr
900109aa:	bf00      	nop

900109ac <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
900109ac:	b410      	push	{r4}
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
900109ae:	e9d1 3400 	ldrd	r3, r4, [r1]
{
900109b2:	4602      	mov	r2, r0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
900109b4:	6900      	ldr	r0, [r0, #16]
900109b6:	4323      	orrs	r3, r4
900109b8:	e9d1 1402 	ldrd	r1, r4, [r1, #8]
900109bc:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
900109c0:	4c05      	ldr	r4, [pc, #20]	; (900109d8 <FMC_SDRAM_SendCommand+0x2c>)
900109c2:	3901      	subs	r1, #1
900109c4:	4004      	ands	r4, r0
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
900109c6:	2000      	movs	r0, #0
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
900109c8:	4323      	orrs	r3, r4
}
900109ca:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
900109ce:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
900109d2:	6113      	str	r3, [r2, #16]
}
900109d4:	4770      	bx	lr
900109d6:	bf00      	nop
900109d8:	ffc00000 	.word	0xffc00000

900109dc <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
900109dc:	4602      	mov	r2, r0
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
900109de:	4b05      	ldr	r3, [pc, #20]	; (900109f4 <FMC_SDRAM_ProgramRefreshRate+0x18>)

  return HAL_OK;
}
900109e0:	2000      	movs	r0, #0
{
900109e2:	b410      	push	{r4}
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
900109e4:	6954      	ldr	r4, [r2, #20]
900109e6:	4023      	ands	r3, r4
}
900109e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
900109ec:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
900109f0:	6151      	str	r1, [r2, #20]
}
900109f2:	4770      	bx	lr
900109f4:	ffffc001 	.word	0xffffc001

900109f8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
900109f8:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
900109fa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900109fe:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
90010a00:	f002 fce8 	bl	900133d4 <xTaskGetSchedulerState>
90010a04:	2801      	cmp	r0, #1
90010a06:	d100      	bne.n	90010a0a <SysTick_Handler+0x12>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
90010a08:	bd08      	pop	{r3, pc}
90010a0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
90010a0e:	f000 bce9 	b.w	900113e4 <xPortSysTickHandler>
90010a12:	bf00      	nop

90010a14 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
90010a14:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
90010a18:	b92b      	cbnz	r3, 90010a26 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
90010a1a:	4b06      	ldr	r3, [pc, #24]	; (90010a34 <osKernelInitialize+0x20>)
90010a1c:	6818      	ldr	r0, [r3, #0]
90010a1e:	b928      	cbnz	r0, 90010a2c <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
90010a20:	2201      	movs	r2, #1
90010a22:	601a      	str	r2, [r3, #0]
      stat = osOK;
90010a24:	4770      	bx	lr
    stat = osErrorISR;
90010a26:	f06f 0005 	mvn.w	r0, #5
90010a2a:	4770      	bx	lr
    } else {
      stat = osError;
90010a2c:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
90010a30:	4770      	bx	lr
90010a32:	bf00      	nop
90010a34:	2400cdac 	.word	0x2400cdac

90010a38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
90010a38:	b510      	push	{r4, lr}
90010a3a:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
90010a3e:	b974      	cbnz	r4, 90010a5e <osKernelStart+0x26>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
90010a40:	4b08      	ldr	r3, [pc, #32]	; (90010a64 <osKernelStart+0x2c>)
90010a42:	681a      	ldr	r2, [r3, #0]
90010a44:	2a01      	cmp	r2, #1
90010a46:	d107      	bne.n	90010a58 <osKernelStart+0x20>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
90010a48:	4907      	ldr	r1, [pc, #28]	; (90010a68 <osKernelStart+0x30>)
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
90010a4a:	2202      	movs	r2, #2
90010a4c:	77cc      	strb	r4, [r1, #31]
90010a4e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
90010a50:	f002 fa50 	bl	90012ef4 <vTaskStartScheduler>
      stat = osOK;
90010a54:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
90010a56:	bd10      	pop	{r4, pc}
      stat = osError;
90010a58:	f04f 30ff 	mov.w	r0, #4294967295
}
90010a5c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
90010a5e:	f06f 0005 	mvn.w	r0, #5
}
90010a62:	bd10      	pop	{r4, pc}
90010a64:	2400cdac 	.word	0x2400cdac
90010a68:	e000ed00 	.word	0xe000ed00

90010a6c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90010a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
90010a6e:	2500      	movs	r5, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
90010a70:	b087      	sub	sp, #28
90010a72:	4614      	mov	r4, r2
  hTask = NULL;
90010a74:	9505      	str	r5, [sp, #20]
90010a76:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
90010a7a:	bb4a      	cbnz	r2, 90010ad0 <osThreadNew+0x64>
90010a7c:	b340      	cbz	r0, 90010ad0 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
90010a7e:	b1e4      	cbz	r4, 90010aba <osThreadNew+0x4e>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
90010a80:	69a6      	ldr	r6, [r4, #24]
90010a82:	bb4e      	cbnz	r6, 90010ad8 <osThreadNew+0x6c>
90010a84:	2618      	movs	r6, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
90010a86:	6863      	ldr	r3, [r4, #4]
90010a88:	07db      	lsls	r3, r3, #31
90010a8a:	d421      	bmi.n	90010ad0 <osThreadNew+0x64>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
90010a8c:	6963      	ldr	r3, [r4, #20]
90010a8e:	b33b      	cbz	r3, 90010ae0 <osThreadNew+0x74>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
90010a90:	ea4f 0c93 	mov.w	ip, r3, lsr #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
90010a94:	68a5      	ldr	r5, [r4, #8]
      if (attr->name != NULL) {
90010a96:	6827      	ldr	r7, [r4, #0]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
90010a98:	b33d      	cbz	r5, 90010aea <osThreadNew+0x7e>
90010a9a:	68e2      	ldr	r2, [r4, #12]
90010a9c:	2a5f      	cmp	r2, #95	; 0x5f
90010a9e:	d917      	bls.n	90010ad0 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
90010aa0:	6924      	ldr	r4, [r4, #16]
90010aa2:	b1ab      	cbz	r3, 90010ad0 <osThreadNew+0x64>
90010aa4:	b1a4      	cbz	r4, 90010ad0 <osThreadNew+0x64>
      mem = 0;
    }

    if (mem == 1) {
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
90010aa6:	460b      	mov	r3, r1
90010aa8:	4662      	mov	r2, ip
90010aaa:	4639      	mov	r1, r7
90010aac:	9600      	str	r6, [sp, #0]
90010aae:	e9cd 4501 	strd	r4, r5, [sp, #4]
90010ab2:	f002 f95d 	bl	90012d70 <xTaskCreateStatic>
90010ab6:	4605      	mov	r5, r0
90010ab8:	e00b      	b.n	90010ad2 <osThreadNew+0x66>
90010aba:	2280      	movs	r2, #128	; 0x80
    prio  = (UBaseType_t)osPriorityNormal;
90010abc:	2618      	movs	r6, #24
      #endif
    }
    else {
      if (mem == 0) {
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
90010abe:	460b      	mov	r3, r1
90010ac0:	4621      	mov	r1, r4
90010ac2:	ac05      	add	r4, sp, #20
90010ac4:	9600      	str	r6, [sp, #0]
90010ac6:	9401      	str	r4, [sp, #4]
90010ac8:	f002 f98c 	bl	90012de4 <xTaskCreate>
90010acc:	2801      	cmp	r0, #1
90010ace:	d00a      	beq.n	90010ae6 <osThreadNew+0x7a>
        return (NULL);
90010ad0:	2500      	movs	r5, #0
      }
    }
  }

  return ((osThreadId_t)hTask);
}
90010ad2:	4628      	mov	r0, r5
90010ad4:	b007      	add	sp, #28
90010ad6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
90010ad8:	1e72      	subs	r2, r6, #1
90010ada:	2a37      	cmp	r2, #55	; 0x37
90010adc:	d9d3      	bls.n	90010a86 <osThreadNew+0x1a>
90010ade:	e7f8      	b.n	90010ad2 <osThreadNew+0x66>
    stack = configMINIMAL_STACK_SIZE;
90010ae0:	f04f 0c80 	mov.w	ip, #128	; 0x80
90010ae4:	e7d6      	b.n	90010a94 <osThreadNew+0x28>
  return ((osThreadId_t)hTask);
90010ae6:	9d05      	ldr	r5, [sp, #20]
90010ae8:	e7f3      	b.n	90010ad2 <osThreadNew+0x66>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
90010aea:	68e3      	ldr	r3, [r4, #12]
90010aec:	2b00      	cmp	r3, #0
90010aee:	d1f0      	bne.n	90010ad2 <osThreadNew+0x66>
90010af0:	6923      	ldr	r3, [r4, #16]
90010af2:	2b00      	cmp	r3, #0
90010af4:	d1ed      	bne.n	90010ad2 <osThreadNew+0x66>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
90010af6:	fa1f f28c 	uxth.w	r2, ip
90010afa:	463c      	mov	r4, r7
90010afc:	e7df      	b.n	90010abe <osThreadNew+0x52>
90010afe:	bf00      	nop

90010b00 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
90010b00:	b510      	push	{r4, lr}
90010b02:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
90010b06:	b92c      	cbnz	r4, 90010b14 <osDelay+0x14>
    stat = osErrorISR;
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
90010b08:	b900      	cbnz	r0, 90010b0c <osDelay+0xc>
      vTaskDelay(ticks);
    }
  }

  return (stat);
}
90010b0a:	bd10      	pop	{r4, pc}
      vTaskDelay(ticks);
90010b0c:	f002 f99c 	bl	90012e48 <vTaskDelay>
    stat = osOK;
90010b10:	4620      	mov	r0, r4
}
90010b12:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
90010b14:	f06f 0005 	mvn.w	r0, #5
}
90010b18:	bd10      	pop	{r4, pc}
90010b1a:	bf00      	nop

90010b1c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
90010b1c:	b530      	push	{r4, r5, lr}
90010b1e:	b083      	sub	sp, #12
90010b20:	f3ef 8505 	mrs	r5, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
90010b24:	b99d      	cbnz	r5, 90010b4e <osMutexNew+0x32>
    if (attr != NULL) {
90010b26:	4604      	mov	r4, r0
90010b28:	b1a0      	cbz	r0, 90010b54 <osMutexNew+0x38>
      type = attr->attr_bits;
90010b2a:	6845      	ldr	r5, [r0, #4]
      rmtx = 1U;
    } else {
      rmtx = 0U;
    }

    if ((type & osMutexRobust) != osMutexRobust) {
90010b2c:	072b      	lsls	r3, r5, #28
90010b2e:	d40e      	bmi.n	90010b4e <osMutexNew+0x32>
      mem = -1;

      if (attr != NULL) {
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
90010b30:	6881      	ldr	r1, [r0, #8]
    if ((type & osMutexRecursive) == osMutexRecursive) {
90010b32:	f005 0501 	and.w	r5, r5, #1
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
90010b36:	68c3      	ldr	r3, [r0, #12]
90010b38:	b141      	cbz	r1, 90010b4c <osMutexNew+0x30>
90010b3a:	2b4f      	cmp	r3, #79	; 0x4f
90010b3c:	d907      	bls.n	90010b4e <osMutexNew+0x32>
        mem = 0;
      }

      if (mem == 1) {
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
90010b3e:	b1d5      	cbz	r5, 90010b76 <osMutexNew+0x5a>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
90010b40:	2004      	movs	r0, #4
90010b42:	f001 f861 	bl	90011c08 <xQueueCreateMutexStatic>
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
90010b46:	b110      	cbz	r0, 90010b4e <osMutexNew+0x32>
        if (attr != NULL) {
          name = attr->name;
90010b48:	6824      	ldr	r4, [r4, #0]
90010b4a:	e009      	b.n	90010b60 <osMutexNew+0x44>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
90010b4c:	b1bb      	cbz	r3, 90010b7e <osMutexNew+0x62>
  hMutex = NULL;
90010b4e:	2000      	movs	r0, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
90010b50:	b003      	add	sp, #12
90010b52:	bd30      	pop	{r4, r5, pc}
              hMutex = xSemaphoreCreateMutex ();
90010b54:	2001      	movs	r0, #1
90010b56:	f001 f8c7 	bl	90011ce8 <xQueueCreateMutex>
      if (hMutex != NULL) {
90010b5a:	2800      	cmp	r0, #0
90010b5c:	d0f7      	beq.n	90010b4e <osMutexNew+0x32>
90010b5e:	4625      	mov	r5, r4
        vQueueAddToRegistry (hMutex, name);
90010b60:	4621      	mov	r1, r4
90010b62:	9001      	str	r0, [sp, #4]
90010b64:	f001 fdc6 	bl	900126f4 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
90010b68:	9801      	ldr	r0, [sp, #4]
90010b6a:	2d00      	cmp	r5, #0
90010b6c:	d0f0      	beq.n	90010b50 <osMutexNew+0x34>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
90010b6e:	f040 0001 	orr.w	r0, r0, #1
}
90010b72:	b003      	add	sp, #12
90010b74:	bd30      	pop	{r4, r5, pc}
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
90010b76:	2001      	movs	r0, #1
90010b78:	f001 f846 	bl	90011c08 <xQueueCreateMutexStatic>
90010b7c:	e7e3      	b.n	90010b46 <osMutexNew+0x2a>
            if (rmtx != 0U) {
90010b7e:	b91d      	cbnz	r5, 90010b88 <osMutexNew+0x6c>
              hMutex = xSemaphoreCreateMutex ();
90010b80:	2001      	movs	r0, #1
90010b82:	f001 f8b1 	bl	90011ce8 <xQueueCreateMutex>
      if (hMutex != NULL) {
90010b86:	e7de      	b.n	90010b46 <osMutexNew+0x2a>
              hMutex = xSemaphoreCreateRecursiveMutex ();
90010b88:	2004      	movs	r0, #4
90010b8a:	f001 f8ad 	bl	90011ce8 <xQueueCreateMutex>
90010b8e:	e7da      	b.n	90010b46 <osMutexNew+0x2a>

90010b90 <osMutexAcquire>:
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
90010b90:	f020 0201 	bic.w	r2, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
90010b94:	f000 0301 	and.w	r3, r0, #1
90010b98:	f3ef 8005 	mrs	r0, IPSR

  stat = osOK;

  if (IS_IRQ()) {
90010b9c:	b9a8      	cbnz	r0, 90010bca <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
90010b9e:	b1ba      	cbz	r2, 90010bd0 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
90010ba0:	4610      	mov	r0, r2
osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
90010ba2:	b510      	push	{r4, lr}
90010ba4:	460c      	mov	r4, r1
    if (rmtx != 0U) {
90010ba6:	b953      	cbnz	r3, 90010bbe <osMutexAcquire+0x2e>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
90010ba8:	f001 fb1a 	bl	900121e0 <xQueueSemaphoreTake>
90010bac:	2801      	cmp	r0, #1
90010bae:	d00a      	beq.n	90010bc6 <osMutexAcquire+0x36>
          stat = osErrorResource;
90010bb0:	2c00      	cmp	r4, #0
90010bb2:	bf14      	ite	ne
90010bb4:	f06f 0001 	mvnne.w	r0, #1
90010bb8:	f06f 0002 	mvneq.w	r0, #2
      }
    }
  }

  return (stat);
}
90010bbc:	bd10      	pop	{r4, pc}
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
90010bbe:	f001 fc97 	bl	900124f0 <xQueueTakeMutexRecursive>
90010bc2:	2801      	cmp	r0, #1
90010bc4:	d1f4      	bne.n	90010bb0 <osMutexAcquire+0x20>
  stat = osOK;
90010bc6:	2000      	movs	r0, #0
}
90010bc8:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
90010bca:	f06f 0005 	mvn.w	r0, #5
90010bce:	4770      	bx	lr
    stat = osErrorParameter;
90010bd0:	f06f 0003 	mvn.w	r0, #3
}
90010bd4:	4770      	bx	lr
90010bd6:	bf00      	nop

90010bd8 <osMutexRelease>:
90010bd8:	f3ef 8205 	mrs	r2, IPSR

  rmtx = (uint32_t)mutex_id & 1U;

  stat = osOK;

  if (IS_IRQ()) {
90010bdc:	b9ba      	cbnz	r2, 90010c0e <osMutexRelease+0x36>
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
90010bde:	b510      	push	{r4, lr}
90010be0:	f020 0401 	bic.w	r4, r0, #1
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
90010be4:	b1b4      	cbz	r4, 90010c14 <osMutexRelease+0x3c>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
90010be6:	f000 0301 	and.w	r3, r0, #1
90010bea:	b943      	cbnz	r3, 90010bfe <osMutexRelease+0x26>
        stat = osErrorResource;
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
90010bec:	461a      	mov	r2, r3
90010bee:	4619      	mov	r1, r3
90010bf0:	4620      	mov	r0, r4
90010bf2:	f000 fe87 	bl	90011904 <xQueueGenericSend>
90010bf6:	2801      	cmp	r0, #1
90010bf8:	d106      	bne.n	90010c08 <osMutexRelease+0x30>
  stat = osOK;
90010bfa:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
90010bfc:	bd10      	pop	{r4, pc}
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
90010bfe:	4620      	mov	r0, r4
90010c00:	f001 f852 	bl	90011ca8 <xQueueGiveMutexRecursive>
90010c04:	2801      	cmp	r0, #1
90010c06:	d0f8      	beq.n	90010bfa <osMutexRelease+0x22>
        stat = osErrorResource;
90010c08:	f06f 0002 	mvn.w	r0, #2
}
90010c0c:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
90010c0e:	f06f 0005 	mvn.w	r0, #5
}
90010c12:	4770      	bx	lr
    stat = osErrorParameter;
90010c14:	f06f 0003 	mvn.w	r0, #3
}
90010c18:	bd10      	pop	{r4, pc}
90010c1a:	bf00      	nop

90010c1c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
90010c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
90010c1e:	b083      	sub	sp, #12
90010c20:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
90010c24:	b98e      	cbnz	r6, 90010c4a <osSemaphoreNew+0x2e>
90010c26:	4605      	mov	r5, r0
90010c28:	b178      	cbz	r0, 90010c4a <osSemaphoreNew+0x2e>
90010c2a:	4288      	cmp	r0, r1
90010c2c:	460f      	mov	r7, r1
90010c2e:	d30c      	bcc.n	90010c4a <osSemaphoreNew+0x2e>
    mem = -1;

    if (attr != NULL) {
90010c30:	4614      	mov	r4, r2
90010c32:	b182      	cbz	r2, 90010c56 <osSemaphoreNew+0x3a>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
90010c34:	e9d2 2302 	ldrd	r2, r3, [r2, #8]
90010c38:	b15a      	cbz	r2, 90010c52 <osSemaphoreNew+0x36>
90010c3a:	2b4f      	cmp	r3, #79	; 0x4f
90010c3c:	d905      	bls.n	90010c4a <osSemaphoreNew+0x2e>
    else {
      mem = 0;
    }

    if (mem != -1) {
      if (max_count == 1U) {
90010c3e:	2801      	cmp	r0, #1
90010c40:	d032      	beq.n	90010ca8 <osSemaphoreNew+0x8c>
        }
      }
      else {
        if (mem == 1) {
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
90010c42:	f000 fdb7 	bl	900117b4 <xQueueCreateCountingSemaphoreStatic>
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
90010c46:	4605      	mov	r5, r0
90010c48:	b978      	cbnz	r0, 90010c6a <osSemaphoreNew+0x4e>
  hSemaphore = NULL;
90010c4a:	2500      	movs	r5, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
90010c4c:	4628      	mov	r0, r5
90010c4e:	b003      	add	sp, #12
90010c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
90010c52:	2b00      	cmp	r3, #0
90010c54:	d1f9      	bne.n	90010c4a <osSemaphoreNew+0x2e>
      if (max_count == 1U) {
90010c56:	2d01      	cmp	r5, #1
90010c58:	d00f      	beq.n	90010c7a <osSemaphoreNew+0x5e>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
90010c5a:	4628      	mov	r0, r5
90010c5c:	4639      	mov	r1, r7
90010c5e:	f000 fe0b 	bl	90011878 <xQueueCreateCountingSemaphore>
90010c62:	4605      	mov	r5, r0
      if (hSemaphore != NULL) {
90010c64:	2d00      	cmp	r5, #0
90010c66:	d0f0      	beq.n	90010c4a <osSemaphoreNew+0x2e>
        if (attr != NULL) {
90010c68:	b104      	cbz	r4, 90010c6c <osSemaphoreNew+0x50>
          name = attr->name;
90010c6a:	6824      	ldr	r4, [r4, #0]
        vQueueAddToRegistry (hSemaphore, name);
90010c6c:	4628      	mov	r0, r5
90010c6e:	4621      	mov	r1, r4
90010c70:	f001 fd40 	bl	900126f4 <vQueueAddToRegistry>
}
90010c74:	4628      	mov	r0, r5
90010c76:	b003      	add	sp, #12
90010c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hSemaphore = xSemaphoreCreateBinary();
90010c7a:	4628      	mov	r0, r5
90010c7c:	2203      	movs	r2, #3
90010c7e:	2100      	movs	r1, #0
90010c80:	f000 fd56 	bl	90011730 <xQueueGenericCreate>
90010c84:	4605      	mov	r5, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
90010c86:	2d00      	cmp	r5, #0
90010c88:	d0df      	beq.n	90010c4a <osSemaphoreNew+0x2e>
90010c8a:	2f00      	cmp	r7, #0
90010c8c:	d0ea      	beq.n	90010c64 <osSemaphoreNew+0x48>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
90010c8e:	2300      	movs	r3, #0
90010c90:	4628      	mov	r0, r5
90010c92:	461a      	mov	r2, r3
90010c94:	4619      	mov	r1, r3
90010c96:	f000 fe35 	bl	90011904 <xQueueGenericSend>
90010c9a:	2801      	cmp	r0, #1
90010c9c:	d0e4      	beq.n	90010c68 <osSemaphoreNew+0x4c>
            vSemaphoreDelete (hSemaphore);
90010c9e:	4628      	mov	r0, r5
            hSemaphore = NULL;
90010ca0:	2500      	movs	r5, #0
            vSemaphoreDelete (hSemaphore);
90010ca2:	f001 fce1 	bl	90012668 <vQueueDelete>
      if (hSemaphore != NULL) {
90010ca6:	e7d1      	b.n	90010c4c <osSemaphoreNew+0x30>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
90010ca8:	4613      	mov	r3, r2
90010caa:	2203      	movs	r2, #3
90010cac:	4631      	mov	r1, r6
90010cae:	9200      	str	r2, [sp, #0]
90010cb0:	4632      	mov	r2, r6
90010cb2:	f000 fcd1 	bl	90011658 <xQueueGenericCreateStatic>
90010cb6:	4605      	mov	r5, r0
90010cb8:	e7e5      	b.n	90010c86 <osSemaphoreNew+0x6a>
90010cba:	bf00      	nop

90010cbc <osSemaphoreAcquire>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
90010cbc:	b370      	cbz	r0, 90010d1c <osSemaphoreAcquire+0x60>
osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
90010cbe:	b510      	push	{r4, lr}
90010cc0:	460c      	mov	r4, r1
90010cc2:	b082      	sub	sp, #8
90010cc4:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
90010cc8:	b1c3      	cbz	r3, 90010cfc <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
90010cca:	bb21      	cbnz	r1, 90010d16 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
90010ccc:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
90010cce:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
90010cd0:	f001 fc2e 	bl	90012530 <xQueueReceiveFromISR>
90010cd4:	2801      	cmp	r0, #1
90010cd6:	d11a      	bne.n	90010d0e <osSemaphoreAcquire+0x52>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
90010cd8:	9b01      	ldr	r3, [sp, #4]
90010cda:	b913      	cbnz	r3, 90010ce2 <osSemaphoreAcquire+0x26>
  stat = osOK;
90010cdc:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
90010cde:	b002      	add	sp, #8
90010ce0:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
90010ce2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010cea:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010cee:	f3bf 8f4f 	dsb	sy
90010cf2:	f3bf 8f6f 	isb	sy
  stat = osOK;
90010cf6:	4620      	mov	r0, r4
}
90010cf8:	b002      	add	sp, #8
90010cfa:	bd10      	pop	{r4, pc}
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
90010cfc:	f001 fa70 	bl	900121e0 <xQueueSemaphoreTake>
90010d00:	2801      	cmp	r0, #1
90010d02:	d0eb      	beq.n	90010cdc <osSemaphoreAcquire+0x20>
      if (timeout != 0U) {
90010d04:	b11c      	cbz	r4, 90010d0e <osSemaphoreAcquire+0x52>
        stat = osErrorTimeout;
90010d06:	f06f 0001 	mvn.w	r0, #1
}
90010d0a:	b002      	add	sp, #8
90010d0c:	bd10      	pop	{r4, pc}
        stat = osErrorResource;
90010d0e:	f06f 0002 	mvn.w	r0, #2
}
90010d12:	b002      	add	sp, #8
90010d14:	bd10      	pop	{r4, pc}
    stat = osErrorParameter;
90010d16:	f06f 0003 	mvn.w	r0, #3
90010d1a:	e7e0      	b.n	90010cde <osSemaphoreAcquire+0x22>
90010d1c:	f06f 0003 	mvn.w	r0, #3
}
90010d20:	4770      	bx	lr
90010d22:	bf00      	nop

90010d24 <osSemaphoreRelease>:
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
90010d24:	b330      	cbz	r0, 90010d74 <osSemaphoreRelease+0x50>
osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
90010d26:	b510      	push	{r4, lr}
90010d28:	b082      	sub	sp, #8
90010d2a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
90010d2e:	b1ab      	cbz	r3, 90010d5c <osSemaphoreRelease+0x38>
    yield = pdFALSE;
90010d30:	2400      	movs	r4, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
90010d32:	a901      	add	r1, sp, #4
    yield = pdFALSE;
90010d34:	9401      	str	r4, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
90010d36:	f001 f879 	bl	90011e2c <xQueueGiveFromISR>
90010d3a:	2801      	cmp	r0, #1
90010d3c:	d117      	bne.n	90010d6e <osSemaphoreRelease+0x4a>
      stat = osErrorResource;
    } else {
      portYIELD_FROM_ISR (yield);
90010d3e:	9b01      	ldr	r3, [sp, #4]
90010d40:	b193      	cbz	r3, 90010d68 <osSemaphoreRelease+0x44>
90010d42:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010d4a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010d4e:	f3bf 8f4f 	dsb	sy
90010d52:	f3bf 8f6f 	isb	sy
  stat = osOK;
90010d56:	4620      	mov	r0, r4
      stat = osErrorResource;
    }
  }

  return (stat);
}
90010d58:	b002      	add	sp, #8
90010d5a:	bd10      	pop	{r4, pc}
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
90010d5c:	461a      	mov	r2, r3
90010d5e:	4619      	mov	r1, r3
90010d60:	f000 fdd0 	bl	90011904 <xQueueGenericSend>
90010d64:	2801      	cmp	r0, #1
90010d66:	d102      	bne.n	90010d6e <osSemaphoreRelease+0x4a>
  stat = osOK;
90010d68:	2000      	movs	r0, #0
}
90010d6a:	b002      	add	sp, #8
90010d6c:	bd10      	pop	{r4, pc}
      stat = osErrorResource;
90010d6e:	f06f 0002 	mvn.w	r0, #2
90010d72:	e7fa      	b.n	90010d6a <osSemaphoreRelease+0x46>
    stat = osErrorParameter;
90010d74:	f06f 0003 	mvn.w	r0, #3
}
90010d78:	4770      	bx	lr
90010d7a:	bf00      	nop

90010d7c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
90010d7c:	b5f0      	push	{r4, r5, r6, r7, lr}
90010d7e:	b085      	sub	sp, #20
90010d80:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
90010d84:	b987      	cbnz	r7, 90010da8 <osMessageQueueNew+0x2c>
90010d86:	4605      	mov	r5, r0
90010d88:	b170      	cbz	r0, 90010da8 <osMessageQueueNew+0x2c>
90010d8a:	b169      	cbz	r1, 90010da8 <osMessageQueueNew+0x2c>
    mem = -1;

    if (attr != NULL) {
90010d8c:	4614      	mov	r4, r2
90010d8e:	b172      	cbz	r2, 90010dae <osMessageQueueNew+0x32>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
90010d90:	6893      	ldr	r3, [r2, #8]
90010d92:	b1bb      	cbz	r3, 90010dc4 <osMessageQueueNew+0x48>
90010d94:	68d2      	ldr	r2, [r2, #12]
90010d96:	2a4f      	cmp	r2, #79	; 0x4f
90010d98:	d906      	bls.n	90010da8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
90010d9a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
90010d9c:	b122      	cbz	r2, 90010da8 <osMessageQueueNew+0x2c>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
90010d9e:	fb01 f505 	mul.w	r5, r1, r5
90010da2:	6966      	ldr	r6, [r4, #20]
90010da4:	42ae      	cmp	r6, r5
90010da6:	d21c      	bcs.n	90010de2 <osMessageQueueNew+0x66>
  hQueue = NULL;
90010da8:	2000      	movs	r0, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
90010daa:	b005      	add	sp, #20
90010dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
          hQueue = xQueueCreate (msg_count, msg_size);
90010dae:	f000 fcbf 	bl	90011730 <xQueueGenericCreate>
    if (hQueue != NULL) {
90010db2:	2800      	cmp	r0, #0
90010db4:	d0f8      	beq.n	90010da8 <osMessageQueueNew+0x2c>
      vQueueAddToRegistry (hQueue, name);
90010db6:	4621      	mov	r1, r4
90010db8:	9003      	str	r0, [sp, #12]
90010dba:	f001 fc9b 	bl	900126f4 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
90010dbe:	9803      	ldr	r0, [sp, #12]
}
90010dc0:	b005      	add	sp, #20
90010dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
90010dc4:	68d3      	ldr	r3, [r2, #12]
90010dc6:	2b00      	cmp	r3, #0
90010dc8:	d1ee      	bne.n	90010da8 <osMessageQueueNew+0x2c>
90010dca:	6913      	ldr	r3, [r2, #16]
90010dcc:	2b00      	cmp	r3, #0
90010dce:	d1eb      	bne.n	90010da8 <osMessageQueueNew+0x2c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
90010dd0:	6952      	ldr	r2, [r2, #20]
90010dd2:	2a00      	cmp	r2, #0
90010dd4:	d1e8      	bne.n	90010da8 <osMessageQueueNew+0x2c>
          hQueue = xQueueCreate (msg_count, msg_size);
90010dd6:	f000 fcab 	bl	90011730 <xQueueGenericCreate>
    if (hQueue != NULL) {
90010dda:	2800      	cmp	r0, #0
90010ddc:	d0e4      	beq.n	90010da8 <osMessageQueueNew+0x2c>
        name = attr->name;
90010dde:	6824      	ldr	r4, [r4, #0]
90010de0:	e7e9      	b.n	90010db6 <osMessageQueueNew+0x3a>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
90010de2:	9700      	str	r7, [sp, #0]
90010de4:	f000 fc38 	bl	90011658 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
90010de8:	2800      	cmp	r0, #0
90010dea:	d1f8      	bne.n	90010dde <osMessageQueueNew+0x62>
90010dec:	e7dc      	b.n	90010da8 <osMessageQueueNew+0x2c>
90010dee:	bf00      	nop

90010df0 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
90010df0:	b530      	push	{r4, r5, lr}
90010df2:	461c      	mov	r4, r3
90010df4:	b083      	sub	sp, #12
90010df6:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
90010dfa:	b30b      	cbz	r3, 90010e40 <osMessageQueuePut+0x50>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90010dfc:	3c00      	subs	r4, #0
90010dfe:	bf18      	it	ne
90010e00:	2401      	movne	r4, #1
90010e02:	2900      	cmp	r1, #0
90010e04:	bf08      	it	eq
90010e06:	f044 0401 	orreq.w	r4, r4, #1
90010e0a:	bb7c      	cbnz	r4, 90010e6c <osMessageQueuePut+0x7c>
90010e0c:	fab0 f480 	clz	r4, r0
90010e10:	0964      	lsrs	r4, r4, #5
90010e12:	b358      	cbz	r0, 90010e6c <osMessageQueuePut+0x7c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
90010e14:	4623      	mov	r3, r4
90010e16:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
90010e18:	9401      	str	r4, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
90010e1a:	f000 ff9d 	bl	90011d58 <xQueueGenericSendFromISR>
90010e1e:	2801      	cmp	r0, #1
90010e20:	d120      	bne.n	90010e64 <osMessageQueuePut+0x74>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
90010e22:	9b01      	ldr	r3, [sp, #4]
90010e24:	b1db      	cbz	r3, 90010e5e <osMessageQueuePut+0x6e>
90010e26:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010e2e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010e32:	f3bf 8f4f 	dsb	sy
90010e36:	f3bf 8f6f 	isb	sy
  stat = osOK;
90010e3a:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
90010e3c:	b003      	add	sp, #12
90010e3e:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
90010e40:	b1a0      	cbz	r0, 90010e6c <osMessageQueuePut+0x7c>
90010e42:	fab1 f381 	clz	r3, r1
90010e46:	095b      	lsrs	r3, r3, #5
90010e48:	b181      	cbz	r1, 90010e6c <osMessageQueuePut+0x7c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
90010e4a:	4622      	mov	r2, r4
90010e4c:	f000 fd5a 	bl	90011904 <xQueueGenericSend>
90010e50:	2801      	cmp	r0, #1
90010e52:	d004      	beq.n	90010e5e <osMessageQueuePut+0x6e>
        if (timeout != 0U) {
90010e54:	b134      	cbz	r4, 90010e64 <osMessageQueuePut+0x74>
          stat = osErrorTimeout;
90010e56:	f06f 0001 	mvn.w	r0, #1
}
90010e5a:	b003      	add	sp, #12
90010e5c:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
90010e5e:	2000      	movs	r0, #0
}
90010e60:	b003      	add	sp, #12
90010e62:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
90010e64:	f06f 0002 	mvn.w	r0, #2
}
90010e68:	b003      	add	sp, #12
90010e6a:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
90010e6c:	f06f 0003 	mvn.w	r0, #3
90010e70:	e7e4      	b.n	90010e3c <osMessageQueuePut+0x4c>
90010e72:	bf00      	nop

90010e74 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
90010e74:	b530      	push	{r4, r5, lr}
90010e76:	461c      	mov	r4, r3
90010e78:	b083      	sub	sp, #12
90010e7a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
90010e7e:	b303      	cbz	r3, 90010ec2 <osMessageQueueGet+0x4e>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
90010e80:	3c00      	subs	r4, #0
90010e82:	bf18      	it	ne
90010e84:	2401      	movne	r4, #1
90010e86:	2900      	cmp	r1, #0
90010e88:	bf08      	it	eq
90010e8a:	f044 0401 	orreq.w	r4, r4, #1
90010e8e:	bb5c      	cbnz	r4, 90010ee8 <osMessageQueueGet+0x74>
90010e90:	fab0 f480 	clz	r4, r0
90010e94:	0964      	lsrs	r4, r4, #5
90010e96:	b338      	cbz	r0, 90010ee8 <osMessageQueueGet+0x74>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
90010e98:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
90010e9a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
90010e9c:	f001 fb48 	bl	90012530 <xQueueReceiveFromISR>
90010ea0:	2801      	cmp	r0, #1
90010ea2:	d11d      	bne.n	90010ee0 <osMessageQueueGet+0x6c>
        stat = osErrorResource;
      } else {
        portYIELD_FROM_ISR (yield);
90010ea4:	9b01      	ldr	r3, [sp, #4]
90010ea6:	b1c3      	cbz	r3, 90010eda <osMessageQueueGet+0x66>
90010ea8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90010eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90010eb0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90010eb4:	f3bf 8f4f 	dsb	sy
90010eb8:	f3bf 8f6f 	isb	sy
  stat = osOK;
90010ebc:	4620      	mov	r0, r4
      }
    }
  }

  return (stat);
}
90010ebe:	b003      	add	sp, #12
90010ec0:	bd30      	pop	{r4, r5, pc}
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
90010ec2:	b188      	cbz	r0, 90010ee8 <osMessageQueueGet+0x74>
90010ec4:	b181      	cbz	r1, 90010ee8 <osMessageQueueGet+0x74>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
90010ec6:	4622      	mov	r2, r4
90010ec8:	f001 f808 	bl	90011edc <xQueueReceive>
90010ecc:	2801      	cmp	r0, #1
90010ece:	d004      	beq.n	90010eda <osMessageQueueGet+0x66>
        if (timeout != 0U) {
90010ed0:	b134      	cbz	r4, 90010ee0 <osMessageQueueGet+0x6c>
          stat = osErrorTimeout;
90010ed2:	f06f 0001 	mvn.w	r0, #1
}
90010ed6:	b003      	add	sp, #12
90010ed8:	bd30      	pop	{r4, r5, pc}
  stat = osOK;
90010eda:	2000      	movs	r0, #0
}
90010edc:	b003      	add	sp, #12
90010ede:	bd30      	pop	{r4, r5, pc}
          stat = osErrorResource;
90010ee0:	f06f 0002 	mvn.w	r0, #2
}
90010ee4:	b003      	add	sp, #12
90010ee6:	bd30      	pop	{r4, r5, pc}
      stat = osErrorParameter;
90010ee8:	f06f 0003 	mvn.w	r0, #3
90010eec:	e7e7      	b.n	90010ebe <osMessageQueueGet+0x4a>
90010eee:	bf00      	nop

90010ef0 <osMessageQueueGetCount>:
90010ef0:	b130      	cbz	r0, 90010f00 <osMessageQueueGetCount+0x10>
90010ef2:	f3ef 8305 	mrs	r3, IPSR
90010ef6:	b10b      	cbz	r3, 90010efc <osMessageQueueGetCount+0xc>
90010ef8:	f001 bba8 	b.w	9001264c <uxQueueMessagesWaitingFromISR>
90010efc:	f001 bb78 	b.w	900125f0 <uxQueueMessagesWaiting>
90010f00:	4770      	bx	lr
90010f02:	bf00      	nop

90010f04 <osMessageQueueGetSpace>:
uint32_t osMessageQueueGetSpace (osMessageQueueId_t mq_id) {
  StaticQueue_t *mq = (StaticQueue_t *)mq_id;
  uint32_t space;
  uint32_t isrm;

  if (mq == NULL) {
90010f04:	b1a0      	cbz	r0, 90010f30 <osMessageQueueGetSpace+0x2c>
90010f06:	f3ef 8205 	mrs	r2, IPSR
    space = 0U;
  }
  else if (IS_IRQ()) {
90010f0a:	b17a      	cbz	r2, 90010f2c <osMessageQueueGetSpace+0x28>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
90010f0c:	f3ef 8211 	mrs	r2, BASEPRI
90010f10:	f04f 0150 	mov.w	r1, #80	; 0x50
90010f14:	f381 8811 	msr	BASEPRI, r1
90010f18:	f3bf 8f6f 	isb	sy
90010f1c:	f3bf 8f4f 	dsb	sy
    isrm = taskENTER_CRITICAL_FROM_ISR();

    /* space = pxQueue->uxLength - pxQueue->uxMessagesWaiting; */
    space = mq->uxDummy4[1] - mq->uxDummy4[0];
90010f20:	e9d0 010e 	ldrd	r0, r1, [r0, #56]	; 0x38
90010f24:	1a08      	subs	r0, r1, r0
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
90010f26:	f382 8811 	msr	BASEPRI, r2
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
90010f2a:	4770      	bx	lr

    taskEXIT_CRITICAL_FROM_ISR(isrm);
  }
  else {
    space = (uint32_t)uxQueueSpacesAvailable ((QueueHandle_t)mq);
90010f2c:	f001 bb76 	b.w	9001261c <uxQueueSpacesAvailable>
  }

  return (space);
}
90010f30:	4770      	bx	lr
90010f32:	bf00      	nop

90010f34 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
90010f34:	4b04      	ldr	r3, [pc, #16]	; (90010f48 <vApplicationGetIdleTaskMemory+0x14>)
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
90010f36:	b410      	push	{r4}
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
90010f38:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
90010f3a:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
90010f3c:	4c03      	ldr	r4, [pc, #12]	; (90010f4c <vApplicationGetIdleTaskMemory+0x18>)
90010f3e:	600c      	str	r4, [r1, #0]
}
90010f40:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
90010f44:	6013      	str	r3, [r2, #0]
}
90010f46:	4770      	bx	lr
90010f48:	2400cd4c 	.word	0x2400cd4c
90010f4c:	2400cb4c 	.word	0x2400cb4c

90010f50 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
90010f50:	4b05      	ldr	r3, [pc, #20]	; (90010f68 <vApplicationGetTimerTaskMemory+0x18>)
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
90010f52:	b410      	push	{r4}
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
90010f54:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
90010f56:	f44f 7380 	mov.w	r3, #256	; 0x100
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
90010f5a:	4c04      	ldr	r4, [pc, #16]	; (90010f6c <vApplicationGetTimerTaskMemory+0x1c>)
90010f5c:	600c      	str	r4, [r1, #0]
}
90010f5e:	f85d 4b04 	ldr.w	r4, [sp], #4
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
90010f62:	6013      	str	r3, [r2, #0]
}
90010f64:	4770      	bx	lr
90010f66:	bf00      	nop
90010f68:	2400d1b0 	.word	0x2400d1b0
90010f6c:	2400cdb0 	.word	0x2400cdb0

90010f70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
90010f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90010f74:	4605      	mov	r5, r0
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
90010f76:	f002 f859 	bl	9001302c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
90010f7a:	4a52      	ldr	r2, [pc, #328]	; (900110c4 <pvPortMalloc+0x154>)
90010f7c:	6816      	ldr	r6, [r2, #0]
90010f7e:	2e00      	cmp	r6, #0
90010f80:	d06f      	beq.n	90011062 <pvPortMalloc+0xf2>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
90010f82:	4b51      	ldr	r3, [pc, #324]	; (900110c8 <pvPortMalloc+0x158>)
90010f84:	681f      	ldr	r7, [r3, #0]
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
90010f86:	423d      	tst	r5, r7
90010f88:	d12e      	bne.n	90010fe8 <pvPortMalloc+0x78>
90010f8a:	b36d      	cbz	r5, 90010fe8 <pvPortMalloc+0x78>
			{
				xWantedSize += xHeapStructSize;
90010f8c:	f105 0408 	add.w	r4, r5, #8

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
90010f90:	076d      	lsls	r5, r5, #29
90010f92:	d002      	beq.n	90010f9a <pvPortMalloc+0x2a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
90010f94:	f024 0407 	bic.w	r4, r4, #7
90010f98:	3408      	adds	r4, #8
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
90010f9a:	b32c      	cbz	r4, 90010fe8 <pvPortMalloc+0x78>
90010f9c:	f8df c140 	ldr.w	ip, [pc, #320]	; 900110e0 <pvPortMalloc+0x170>
90010fa0:	f8dc 5000 	ldr.w	r5, [ip]
90010fa4:	42a5      	cmp	r5, r4
90010fa6:	d31f      	bcc.n	90010fe8 <pvPortMalloc+0x78>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
				pxBlock = xStart.pxNextFreeBlock;
90010fa8:	4848      	ldr	r0, [pc, #288]	; (900110cc <pvPortMalloc+0x15c>)
90010faa:	6803      	ldr	r3, [r0, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
90010fac:	e003      	b.n	90010fb6 <pvPortMalloc+0x46>
90010fae:	681a      	ldr	r2, [r3, #0]
90010fb0:	b122      	cbz	r2, 90010fbc <pvPortMalloc+0x4c>
90010fb2:	4618      	mov	r0, r3
90010fb4:	4613      	mov	r3, r2
90010fb6:	6859      	ldr	r1, [r3, #4]
90010fb8:	42a1      	cmp	r1, r4
90010fba:	d3f8      	bcc.n	90010fae <pvPortMalloc+0x3e>
					pxBlock = pxBlock->pxNextFreeBlock;
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
90010fbc:	42b3      	cmp	r3, r6
90010fbe:	d013      	beq.n	90010fe8 <pvPortMalloc+0x78>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
90010fc0:	4698      	mov	r8, r3
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90010fc2:	1b0a      	subs	r2, r1, r4
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90010fc4:	f858 eb08 	ldr.w	lr, [r8], #8
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90010fc8:	2a10      	cmp	r2, #16
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
90010fca:	f8c0 e000 	str.w	lr, [r0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
90010fce:	d929      	bls.n	90011024 <pvPortMalloc+0xb4>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
90010fd0:	1919      	adds	r1, r3, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
90010fd2:	0748      	lsls	r0, r1, #29
90010fd4:	d00f      	beq.n	90010ff6 <pvPortMalloc+0x86>
	__asm volatile
90010fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
90010fda:	f383 8811 	msr	BASEPRI, r3
90010fde:	f3bf 8f6f 	isb	sy
90010fe2:	f3bf 8f4f 	dsb	sy
90010fe6:	e7fe      	b.n	90010fe6 <pvPortMalloc+0x76>
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
90010fe8:	f04f 0800 	mov.w	r8, #0
90010fec:	f002 f826 	bl	9001303c <xTaskResumeAll>
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
}
90010ff0:	4640      	mov	r0, r8
90010ff2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
90010ff6:	604a      	str	r2, [r1, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90010ff8:	4a34      	ldr	r2, [pc, #208]	; (900110cc <pvPortMalloc+0x15c>)
						pxBlock->xBlockSize = xWantedSize;
90010ffa:	605c      	str	r4, [r3, #4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90010ffc:	4614      	mov	r4, r2
90010ffe:	6812      	ldr	r2, [r2, #0]
90011000:	4291      	cmp	r1, r2
90011002:	d8fb      	bhi.n	90010ffc <pvPortMalloc+0x8c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
90011004:	6860      	ldr	r0, [r4, #4]
90011006:	eb04 0e00 	add.w	lr, r4, r0
9001100a:	4571      	cmp	r1, lr
9001100c:	d04a      	beq.n	900110a4 <pvPortMalloc+0x134>
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
9001100e:	f8d1 e004 	ldr.w	lr, [r1, #4]
90011012:	eb01 000e 	add.w	r0, r1, lr
90011016:	4282      	cmp	r2, r0
90011018:	d04b      	beq.n	900110b2 <pvPortMalloc+0x142>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9001101a:	600a      	str	r2, [r1, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
9001101c:	428c      	cmp	r4, r1
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
9001101e:	bf18      	it	ne
90011020:	6021      	strne	r1, [r4, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
90011022:	6859      	ldr	r1, [r3, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90011024:	4a2a      	ldr	r2, [pc, #168]	; (900110d0 <pvPortMalloc+0x160>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
90011026:	1a6d      	subs	r5, r5, r1
					pxBlock->xBlockSize |= xBlockAllocatedBit;
90011028:	4339      	orrs	r1, r7
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
9001102a:	6810      	ldr	r0, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
9001102c:	f8cc 5000 	str.w	r5, [ip]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
90011030:	4285      	cmp	r5, r0
					pxBlock->pxNextFreeBlock = NULL;
90011032:	f04f 0000 	mov.w	r0, #0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
90011036:	bf38      	it	cc
90011038:	6015      	strcc	r5, [r2, #0]
					xNumberOfSuccessfulAllocations++;
9001103a:	4a26      	ldr	r2, [pc, #152]	; (900110d4 <pvPortMalloc+0x164>)
					pxBlock->pxNextFreeBlock = NULL;
9001103c:	e9c3 0100 	strd	r0, r1, [r3]
					xNumberOfSuccessfulAllocations++;
90011040:	6813      	ldr	r3, [r2, #0]
90011042:	3301      	adds	r3, #1
90011044:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
90011046:	f001 fff9 	bl	9001303c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
9001104a:	f018 0f07 	tst.w	r8, #7
9001104e:	d0cf      	beq.n	90010ff0 <pvPortMalloc+0x80>
90011050:	f04f 0350 	mov.w	r3, #80	; 0x50
90011054:	f383 8811 	msr	BASEPRI, r3
90011058:	f3bf 8f6f 	isb	sy
9001105c:	f3bf 8f4f 	dsb	sy
90011060:	e7fe      	b.n	90011060 <pvPortMalloc+0xf0>
	uxAddress = ( size_t ) ucHeap;
90011062:	4b1d      	ldr	r3, [pc, #116]	; (900110d8 <pvPortMalloc+0x168>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
90011064:	075e      	lsls	r6, r3, #29
90011066:	d117      	bne.n	90011098 <pvPortMalloc+0x128>
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
90011068:	4e1c      	ldr	r6, [pc, #112]	; (900110dc <pvPortMalloc+0x16c>)
9001106a:	4618      	mov	r0, r3
	uxAddress -= xHeapStructSize;
9001106c:	3e08      	subs	r6, #8
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
9001106e:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
90011072:	4916      	ldr	r1, [pc, #88]	; (900110cc <pvPortMalloc+0x15c>)
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
90011074:	f026 0607 	bic.w	r6, r6, #7
	pxEnd = ( void * ) uxAddress;
90011078:	6016      	str	r6, [r2, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
9001107a:	1af3      	subs	r3, r6, r3
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
9001107c:	4a14      	ldr	r2, [pc, #80]	; (900110d0 <pvPortMalloc+0x160>)
9001107e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
90011080:	4a17      	ldr	r2, [pc, #92]	; (900110e0 <pvPortMalloc+0x170>)
90011082:	6013      	str	r3, [r2, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
90011084:	4a10      	ldr	r2, [pc, #64]	; (900110c8 <pvPortMalloc+0x158>)
90011086:	6017      	str	r7, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
90011088:	2200      	movs	r2, #0
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
9001108a:	e9c1 0200 	strd	r0, r2, [r1]
	pxEnd->pxNextFreeBlock = NULL;
9001108e:	e9c6 2200 	strd	r2, r2, [r6]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
90011092:	e9c0 6300 	strd	r6, r3, [r0]
}
90011096:	e776      	b.n	90010f86 <pvPortMalloc+0x16>
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
90011098:	3307      	adds	r3, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
9001109a:	4e10      	ldr	r6, [pc, #64]	; (900110dc <pvPortMalloc+0x16c>)
9001109c:	f023 0307 	bic.w	r3, r3, #7
	pucAlignedHeap = ( uint8_t * ) uxAddress;
900110a0:	4618      	mov	r0, r3
900110a2:	e7e3      	b.n	9001106c <pvPortMalloc+0xfc>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
900110a4:	6849      	ldr	r1, [r1, #4]
900110a6:	eb00 0e01 	add.w	lr, r0, r1
900110aa:	4621      	mov	r1, r4
900110ac:	f8c4 e004 	str.w	lr, [r4, #4]
		pxBlockToInsert = pxIterator;
900110b0:	e7af      	b.n	90011012 <pvPortMalloc+0xa2>
		if( pxIterator->pxNextFreeBlock != pxEnd )
900110b2:	42b2      	cmp	r2, r6
900110b4:	d0b1      	beq.n	9001101a <pvPortMalloc+0xaa>
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
900110b6:	6850      	ldr	r0, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
900110b8:	6812      	ldr	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
900110ba:	4470      	add	r0, lr
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
900110bc:	600a      	str	r2, [r1, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
900110be:	6048      	str	r0, [r1, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
900110c0:	e7ac      	b.n	9001101c <pvPortMalloc+0xac>
900110c2:	bf00      	nop
900110c4:	2400d210 	.word	0x2400d210
900110c8:	240258b4 	.word	0x240258b4
900110cc:	240258c8 	.word	0x240258c8
900110d0:	240258bc 	.word	0x240258bc
900110d4:	240258c0 	.word	0x240258c0
900110d8:	2400d214 	.word	0x2400d214
900110dc:	240258b4 	.word	0x240258b4
900110e0:	240258b8 	.word	0x240258b8

900110e4 <vPortFree>:
	if( pv != NULL )
900110e4:	b1d0      	cbz	r0, 9001111c <vPortFree+0x38>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
900110e6:	4a2b      	ldr	r2, [pc, #172]	; (90011194 <vPortFree+0xb0>)
900110e8:	f850 3c04 	ldr.w	r3, [r0, #-4]
900110ec:	6812      	ldr	r2, [r2, #0]
900110ee:	4213      	tst	r3, r2
900110f0:	d00b      	beq.n	9001110a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
900110f2:	f850 1c08 	ldr.w	r1, [r0, #-8]
900110f6:	b191      	cbz	r1, 9001111e <vPortFree+0x3a>
900110f8:	f04f 0350 	mov.w	r3, #80	; 0x50
900110fc:	f383 8811 	msr	BASEPRI, r3
90011100:	f3bf 8f6f 	isb	sy
90011104:	f3bf 8f4f 	dsb	sy
90011108:	e7fe      	b.n	90011108 <vPortFree+0x24>
9001110a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001110e:	f383 8811 	msr	BASEPRI, r3
90011112:	f3bf 8f6f 	isb	sy
90011116:	f3bf 8f4f 	dsb	sy
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
9001111a:	e7fe      	b.n	9001111a <vPortFree+0x36>
9001111c:	4770      	bx	lr
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
9001111e:	ea23 0302 	bic.w	r3, r3, r2
{
90011122:	b530      	push	{r4, r5, lr}
90011124:	b083      	sub	sp, #12
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90011126:	f840 3c04 	str.w	r3, [r0, #-4]
		puc -= xHeapStructSize;
9001112a:	f1a0 0408 	sub.w	r4, r0, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
9001112e:	4d1a      	ldr	r5, [pc, #104]	; (90011198 <vPortFree+0xb4>)
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
90011130:	9001      	str	r0, [sp, #4]
				vTaskSuspendAll();
90011132:	f001 ff7b 	bl	9001302c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
90011136:	9801      	ldr	r0, [sp, #4]
90011138:	682a      	ldr	r2, [r5, #0]
9001113a:	f850 1c04 	ldr.w	r1, [r0, #-4]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
9001113e:	4b17      	ldr	r3, [pc, #92]	; (9001119c <vPortFree+0xb8>)
					xFreeBytesRemaining += pxLink->xBlockSize;
90011140:	440a      	add	r2, r1
90011142:	602a      	str	r2, [r5, #0]
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
90011144:	461a      	mov	r2, r3
90011146:	681b      	ldr	r3, [r3, #0]
90011148:	429c      	cmp	r4, r3
9001114a:	d8fb      	bhi.n	90011144 <vPortFree+0x60>
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
9001114c:	6850      	ldr	r0, [r2, #4]
9001114e:	eb02 0c00 	add.w	ip, r2, r0
90011152:	4564      	cmp	r4, ip
90011154:	d019      	beq.n	9001118a <vPortFree+0xa6>
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
90011156:	1860      	adds	r0, r4, r1
90011158:	4283      	cmp	r3, r0
9001115a:	d00c      	beq.n	90011176 <vPortFree+0x92>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
9001115c:	6023      	str	r3, [r4, #0]
	if( pxIterator != pxBlockToInsert )
9001115e:	42a2      	cmp	r2, r4
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
90011160:	bf18      	it	ne
90011162:	6014      	strne	r4, [r2, #0]
					xNumberOfSuccessfulFrees++;
90011164:	4a0e      	ldr	r2, [pc, #56]	; (900111a0 <vPortFree+0xbc>)
90011166:	6813      	ldr	r3, [r2, #0]
90011168:	3301      	adds	r3, #1
9001116a:	6013      	str	r3, [r2, #0]
}
9001116c:	b003      	add	sp, #12
9001116e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
				( void ) xTaskResumeAll();
90011172:	f001 bf63 	b.w	9001303c <xTaskResumeAll>
		if( pxIterator->pxNextFreeBlock != pxEnd )
90011176:	480b      	ldr	r0, [pc, #44]	; (900111a4 <vPortFree+0xc0>)
90011178:	6800      	ldr	r0, [r0, #0]
9001117a:	4283      	cmp	r3, r0
9001117c:	d0ee      	beq.n	9001115c <vPortFree+0x78>
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
9001117e:	e9d3 3000 	ldrd	r3, r0, [r3]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
90011182:	4401      	add	r1, r0
90011184:	e9c4 3100 	strd	r3, r1, [r4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
90011188:	e7e9      	b.n	9001115e <vPortFree+0x7a>
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
9001118a:	4401      	add	r1, r0
9001118c:	4614      	mov	r4, r2
9001118e:	6051      	str	r1, [r2, #4]
		pxBlockToInsert = pxIterator;
90011190:	e7e1      	b.n	90011156 <vPortFree+0x72>
90011192:	bf00      	nop
90011194:	240258b4 	.word	0x240258b4
90011198:	240258b8 	.word	0x240258b8
9001119c:	240258c8 	.word	0x240258c8
900111a0:	240258c4 	.word	0x240258c4
900111a4:	2400d210 	.word	0x2400d210

900111a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
900111a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
900111ac:	f04f 31ff 	mov.w	r1, #4294967295
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
900111b0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
900111b2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
900111b4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
900111b6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
900111b8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
900111bc:	4770      	bx	lr
900111be:	bf00      	nop

900111c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
900111c0:	2300      	movs	r3, #0
900111c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
900111c4:	4770      	bx	lr
900111c6:	bf00      	nop

900111c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
900111c8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
900111ca:	6802      	ldr	r2, [r0, #0]
{
900111cc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
900111ce:	689c      	ldr	r4, [r3, #8]
	( pxList->uxNumberOfItems )++;
900111d0:	3201      	adds	r2, #1
	pxNewListItem->pxNext = pxIndex;
900111d2:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
900111d4:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
900111d6:	689c      	ldr	r4, [r3, #8]
900111d8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
900111da:	6099      	str	r1, [r3, #8]
}
900111dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pxContainer = pxList;
900111e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
900111e2:	6002      	str	r2, [r0, #0]
}
900111e4:	4770      	bx	lr
900111e6:	bf00      	nop

900111e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
900111e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
900111ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
900111ec:	1c6b      	adds	r3, r5, #1
900111ee:	d010      	beq.n	90011212 <vListInsert+0x2a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
900111f0:	f100 0308 	add.w	r3, r0, #8
900111f4:	461c      	mov	r4, r3
900111f6:	685b      	ldr	r3, [r3, #4]
900111f8:	681a      	ldr	r2, [r3, #0]
900111fa:	42aa      	cmp	r2, r5
900111fc:	d9fa      	bls.n	900111f4 <vListInsert+0xc>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
900111fe:	6802      	ldr	r2, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
90011200:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
90011202:	3201      	adds	r2, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
90011204:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
90011206:	608c      	str	r4, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
90011208:	6061      	str	r1, [r4, #4]
	pxNewListItem->pxContainer = pxList;
9001120a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
9001120c:	6002      	str	r2, [r0, #0]
}
9001120e:	bc30      	pop	{r4, r5}
90011210:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
90011212:	6904      	ldr	r4, [r0, #16]
	pxNewListItem->pxNext = pxIterator->pxNext;
90011214:	6863      	ldr	r3, [r4, #4]
90011216:	e7f2      	b.n	900111fe <vListInsert+0x16>

90011218 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
90011218:	6903      	ldr	r3, [r0, #16]
{
9001121a:	b410      	push	{r4}

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
9001121c:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
9001121e:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
	if( pxList->pxIndex == pxItemToRemove )
90011222:	4284      	cmp	r4, r0

	pxItemToRemove->pxContainer = NULL;
	( pxList->uxNumberOfItems )--;

	return pxList->uxNumberOfItems;
}
90011224:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
90011228:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
9001122a:	6051      	str	r1, [r2, #4]
	pxItemToRemove->pxContainer = NULL;
9001122c:	f04f 0100 	mov.w	r1, #0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
90011230:	bf08      	it	eq
90011232:	605a      	streq	r2, [r3, #4]
	( pxList->uxNumberOfItems )--;
90011234:	681a      	ldr	r2, [r3, #0]
	pxItemToRemove->pxContainer = NULL;
90011236:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
90011238:	3a01      	subs	r2, #1
9001123a:	601a      	str	r2, [r3, #0]
	return pxList->uxNumberOfItems;
9001123c:	6818      	ldr	r0, [r3, #0]
}
9001123e:	4770      	bx	lr

90011240 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
90011240:	4808      	ldr	r0, [pc, #32]	; (90011264 <prvPortStartFirstTask+0x24>)
90011242:	6800      	ldr	r0, [r0, #0]
90011244:	6800      	ldr	r0, [r0, #0]
90011246:	f380 8808 	msr	MSP, r0
9001124a:	f04f 0000 	mov.w	r0, #0
9001124e:	f380 8814 	msr	CONTROL, r0
90011252:	b662      	cpsie	i
90011254:	b661      	cpsie	f
90011256:	f3bf 8f4f 	dsb	sy
9001125a:	f3bf 8f6f 	isb	sy
9001125e:	df00      	svc	0
90011260:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
90011262:	0000      	.short	0x0000
90011264:	e000ed08 	.word	0xe000ed08

90011268 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
90011268:	f8df 000c 	ldr.w	r0, [pc, #12]	; 90011278 <vPortEnableVFP+0x10>
9001126c:	6801      	ldr	r1, [r0, #0]
9001126e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
90011272:	6001      	str	r1, [r0, #0]
90011274:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
90011276:	0000      	.short	0x0000
90011278:	e000ed88 	.word	0xe000ed88

9001127c <prvTaskExitError>:
	configASSERT( uxCriticalNesting == ~0UL );
9001127c:	4b0e      	ldr	r3, [pc, #56]	; (900112b8 <prvTaskExitError+0x3c>)
{
9001127e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
90011280:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
90011282:	681b      	ldr	r3, [r3, #0]
volatile uint32_t ulDummy = 0;
90011284:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
90011286:	3301      	adds	r3, #1
90011288:	d008      	beq.n	9001129c <prvTaskExitError+0x20>
9001128a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001128e:	f383 8811 	msr	BASEPRI, r3
90011292:	f3bf 8f6f 	isb	sy
90011296:	f3bf 8f4f 	dsb	sy
9001129a:	e7fe      	b.n	9001129a <prvTaskExitError+0x1e>
9001129c:	f04f 0350 	mov.w	r3, #80	; 0x50
900112a0:	f383 8811 	msr	BASEPRI, r3
900112a4:	f3bf 8f6f 	isb	sy
900112a8:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
900112ac:	9b01      	ldr	r3, [sp, #4]
900112ae:	2b00      	cmp	r3, #0
900112b0:	d0fc      	beq.n	900112ac <prvTaskExitError+0x30>
}
900112b2:	b002      	add	sp, #8
900112b4:	4770      	bx	lr
900112b6:	bf00      	nop
900112b8:	24000064 	.word	0x24000064

900112bc <pxPortInitialiseStack>:
{
900112bc:	4603      	mov	r3, r0
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
900112be:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
900112c2:	4809      	ldr	r0, [pc, #36]	; (900112e8 <pxPortInitialiseStack+0x2c>)
{
900112c4:	b410      	push	{r4}
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
900112c6:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
900112ca:	f843 0c0c 	str.w	r0, [r3, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
900112ce:	f843 2c20 	str.w	r2, [r3, #-32]
}
900112d2:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
900112d6:	e943 1402 	strd	r1, r4, [r3, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
900112da:	f06f 0102 	mvn.w	r1, #2
}
900112de:	f85d 4b04 	ldr.w	r4, [sp], #4
	*pxTopOfStack = portINITIAL_EXC_RETURN;
900112e2:	f843 1c24 	str.w	r1, [r3, #-36]
}
900112e6:	4770      	bx	lr
900112e8:	9001127d 	.word	0x9001127d
900112ec:	00000000 	.word	0x00000000

900112f0 <SVC_Handler>:
	__asm volatile (
900112f0:	4b07      	ldr	r3, [pc, #28]	; (90011310 <pxCurrentTCBConst2>)
900112f2:	6819      	ldr	r1, [r3, #0]
900112f4:	6808      	ldr	r0, [r1, #0]
900112f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900112fa:	f380 8809 	msr	PSP, r0
900112fe:	f3bf 8f6f 	isb	sy
90011302:	f04f 0000 	mov.w	r0, #0
90011306:	f380 8811 	msr	BASEPRI, r0
9001130a:	4770      	bx	lr
9001130c:	f3af 8000 	nop.w

90011310 <pxCurrentTCBConst2>:
90011310:	24025918 	.word	0x24025918

90011314 <vPortEnterCritical>:
90011314:	f04f 0350 	mov.w	r3, #80	; 0x50
90011318:	f383 8811 	msr	BASEPRI, r3
9001131c:	f3bf 8f6f 	isb	sy
90011320:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
90011324:	4a0b      	ldr	r2, [pc, #44]	; (90011354 <vPortEnterCritical+0x40>)
90011326:	6813      	ldr	r3, [r2, #0]
90011328:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
9001132a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
9001132c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
9001132e:	d000      	beq.n	90011332 <vPortEnterCritical+0x1e>
}
90011330:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
90011332:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90011336:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	; 0xd04
9001133a:	b2db      	uxtb	r3, r3
9001133c:	2b00      	cmp	r3, #0
9001133e:	d0f7      	beq.n	90011330 <vPortEnterCritical+0x1c>
90011340:	f04f 0350 	mov.w	r3, #80	; 0x50
90011344:	f383 8811 	msr	BASEPRI, r3
90011348:	f3bf 8f6f 	isb	sy
9001134c:	f3bf 8f4f 	dsb	sy
90011350:	e7fe      	b.n	90011350 <vPortEnterCritical+0x3c>
90011352:	bf00      	nop
90011354:	24000064 	.word	0x24000064

90011358 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
90011358:	4a08      	ldr	r2, [pc, #32]	; (9001137c <vPortExitCritical+0x24>)
9001135a:	6813      	ldr	r3, [r2, #0]
9001135c:	b943      	cbnz	r3, 90011370 <vPortExitCritical+0x18>
9001135e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011362:	f383 8811 	msr	BASEPRI, r3
90011366:	f3bf 8f6f 	isb	sy
9001136a:	f3bf 8f4f 	dsb	sy
9001136e:	e7fe      	b.n	9001136e <vPortExitCritical+0x16>
	uxCriticalNesting--;
90011370:	3b01      	subs	r3, #1
90011372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
90011374:	b90b      	cbnz	r3, 9001137a <vPortExitCritical+0x22>
	__asm volatile
90011376:	f383 8811 	msr	BASEPRI, r3
}
9001137a:	4770      	bx	lr
9001137c:	24000064 	.word	0x24000064

90011380 <PendSV_Handler>:
	__asm volatile
90011380:	f3ef 8009 	mrs	r0, PSP
90011384:	f3bf 8f6f 	isb	sy
90011388:	4b15      	ldr	r3, [pc, #84]	; (900113e0 <pxCurrentTCBConst>)
9001138a:	681a      	ldr	r2, [r3, #0]
9001138c:	f01e 0f10 	tst.w	lr, #16
90011390:	bf08      	it	eq
90011392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
90011396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001139a:	6010      	str	r0, [r2, #0]
9001139c:	e92d 0009 	stmdb	sp!, {r0, r3}
900113a0:	f04f 0050 	mov.w	r0, #80	; 0x50
900113a4:	f380 8811 	msr	BASEPRI, r0
900113a8:	f3bf 8f4f 	dsb	sy
900113ac:	f3bf 8f6f 	isb	sy
900113b0:	f001 fe80 	bl	900130b4 <vTaskSwitchContext>
900113b4:	f04f 0000 	mov.w	r0, #0
900113b8:	f380 8811 	msr	BASEPRI, r0
900113bc:	bc09      	pop	{r0, r3}
900113be:	6819      	ldr	r1, [r3, #0]
900113c0:	6808      	ldr	r0, [r1, #0]
900113c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900113c6:	f01e 0f10 	tst.w	lr, #16
900113ca:	bf08      	it	eq
900113cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
900113d0:	f380 8809 	msr	PSP, r0
900113d4:	f3bf 8f6f 	isb	sy
900113d8:	4770      	bx	lr
900113da:	bf00      	nop
900113dc:	f3af 8000 	nop.w

900113e0 <pxCurrentTCBConst>:
900113e0:	24025918 	.word	0x24025918

900113e4 <xPortSysTickHandler>:
{
900113e4:	b508      	push	{r3, lr}
	__asm volatile
900113e6:	f04f 0350 	mov.w	r3, #80	; 0x50
900113ea:	f383 8811 	msr	BASEPRI, r3
900113ee:	f3bf 8f6f 	isb	sy
900113f2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
900113f6:	f001 fe37 	bl	90013068 <xTaskIncrementTick>
900113fa:	b128      	cbz	r0, 90011408 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
900113fc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90011400:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90011404:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
	__asm volatile
90011408:	2300      	movs	r3, #0
9001140a:	f383 8811 	msr	BASEPRI, r3
}
9001140e:	bd08      	pop	{r3, pc}

90011410 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90011410:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
90011414:	2100      	movs	r1, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
90011416:	4b06      	ldr	r3, [pc, #24]	; (90011430 <vPortSetupTimerInterrupt+0x20>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
90011418:	6111      	str	r1, [r2, #16]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
9001141a:	4806      	ldr	r0, [pc, #24]	; (90011434 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
9001141c:	6191      	str	r1, [r2, #24]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9001141e:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
90011420:	681b      	ldr	r3, [r3, #0]
90011422:	fba0 0303 	umull	r0, r3, r0, r3
90011426:	099b      	lsrs	r3, r3, #6
90011428:	3b01      	subs	r3, #1
9001142a:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
9001142c:	6111      	str	r1, [r2, #16]
}
9001142e:	4770      	bx	lr
90011430:	24000054 	.word	0x24000054
90011434:	10624dd3 	.word	0x10624dd3

90011438 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
90011438:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
9001143c:	4a48      	ldr	r2, [pc, #288]	; (90011560 <xPortStartScheduler+0x128>)
9001143e:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	; 0xd00
90011442:	4291      	cmp	r1, r2
90011444:	d041      	beq.n	900114ca <xPortStartScheduler+0x92>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
90011446:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
9001144a:	4b46      	ldr	r3, [pc, #280]	; (90011564 <xPortStartScheduler+0x12c>)
9001144c:	429a      	cmp	r2, r3
9001144e:	d033      	beq.n	900114b8 <xPortStartScheduler+0x80>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90011450:	4b45      	ldr	r3, [pc, #276]	; (90011568 <xPortStartScheduler+0x130>)
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90011452:	f04f 0cff 	mov.w	ip, #255	; 0xff
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90011456:	4845      	ldr	r0, [pc, #276]	; (9001156c <xPortStartScheduler+0x134>)
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90011458:	4945      	ldr	r1, [pc, #276]	; (90011570 <xPortStartScheduler+0x138>)
{
9001145a:	b570      	push	{r4, r5, r6, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
9001145c:	781a      	ldrb	r2, [r3, #0]
{
9001145e:	b084      	sub	sp, #16
		ulOriginalPriority = *pucFirstUserPriorityRegister;
90011460:	b2d2      	uxtb	r2, r2
90011462:	9202      	str	r2, [sp, #8]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
90011464:	2207      	movs	r2, #7
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
90011466:	f883 c000 	strb.w	ip, [r3]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9001146a:	781b      	ldrb	r3, [r3, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
9001146c:	6002      	str	r2, [r0, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
9001146e:	b2db      	uxtb	r3, r3
90011470:	f88d 3007 	strb.w	r3, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90011474:	f89d 3007 	ldrb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90011478:	f89d 2007 	ldrb.w	r2, [sp, #7]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
9001147c:	f003 0350 	and.w	r3, r3, #80	; 0x50
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90011480:	0612      	lsls	r2, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
90011482:	700b      	strb	r3, [r1, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90011484:	d50f      	bpl.n	900114a6 <xPortStartScheduler+0x6e>
90011486:	2206      	movs	r2, #6
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90011488:	f89d 3007 	ldrb.w	r3, [sp, #7]
9001148c:	4611      	mov	r1, r2
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
9001148e:	3a01      	subs	r2, #1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
90011490:	005b      	lsls	r3, r3, #1
90011492:	b2db      	uxtb	r3, r3
90011494:	f88d 3007 	strb.w	r3, [sp, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
90011498:	f89d 3007 	ldrb.w	r3, [sp, #7]
9001149c:	061b      	lsls	r3, r3, #24
9001149e:	d4f3      	bmi.n	90011488 <xPortStartScheduler+0x50>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
900114a0:	2903      	cmp	r1, #3
900114a2:	d01b      	beq.n	900114dc <xPortStartScheduler+0xa4>
900114a4:	6001      	str	r1, [r0, #0]
	__asm volatile
900114a6:	f04f 0350 	mov.w	r3, #80	; 0x50
900114aa:	f383 8811 	msr	BASEPRI, r3
900114ae:	f3bf 8f6f 	isb	sy
900114b2:	f3bf 8f4f 	dsb	sy
900114b6:	e7fe      	b.n	900114b6 <xPortStartScheduler+0x7e>
900114b8:	f04f 0350 	mov.w	r3, #80	; 0x50
900114bc:	f383 8811 	msr	BASEPRI, r3
900114c0:	f3bf 8f6f 	isb	sy
900114c4:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
900114c8:	e7fe      	b.n	900114c8 <xPortStartScheduler+0x90>
900114ca:	f04f 0350 	mov.w	r3, #80	; 0x50
900114ce:	f383 8811 	msr	BASEPRI, r3
900114d2:	f3bf 8f6f 	isb	sy
900114d6:	f3bf 8f4f 	dsb	sy
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
900114da:	e7fe      	b.n	900114da <xPortStartScheduler+0xa2>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
900114dc:	9b02      	ldr	r3, [sp, #8]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
900114de:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
900114e2:	f44f 7140 	mov.w	r1, #768	; 0x300
		*pucFirstUserPriorityRegister = ulOriginalPriority;
900114e6:	4a20      	ldr	r2, [pc, #128]	; (90011568 <xPortStartScheduler+0x130>)
900114e8:	b2db      	uxtb	r3, r3
	uxCriticalNesting = 0;
900114ea:	4e22      	ldr	r6, [pc, #136]	; (90011574 <xPortStartScheduler+0x13c>)
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
900114ec:	6001      	str	r1, [r0, #0]
	uxCriticalNesting = 0;
900114ee:	2500      	movs	r5, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
900114f0:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
900114f2:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
900114f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
900114fa:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
900114fe:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	; 0xd20
90011502:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
90011506:	f8c4 3d20 	str.w	r3, [r4, #3360]	; 0xd20
	vPortSetupTimerInterrupt();
9001150a:	f7ff ff81 	bl	90011410 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
9001150e:	6035      	str	r5, [r6, #0]
	vPortEnableVFP();
90011510:	f7ff feaa 	bl	90011268 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
90011514:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	; 0xf34
90011518:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
9001151c:	f8c4 3f34 	str.w	r3, [r4, #3892]	; 0xf34
	prvPortStartFirstTask();
90011520:	f7ff fe8e 	bl	90011240 <prvPortStartFirstTask>
	vTaskSwitchContext();
90011524:	f001 fdc6 	bl	900130b4 <vTaskSwitchContext>
	configASSERT( uxCriticalNesting == ~0UL );
90011528:	6833      	ldr	r3, [r6, #0]
volatile uint32_t ulDummy = 0;
9001152a:	9503      	str	r5, [sp, #12]
	configASSERT( uxCriticalNesting == ~0UL );
9001152c:	3301      	adds	r3, #1
9001152e:	d008      	beq.n	90011542 <xPortStartScheduler+0x10a>
90011530:	f04f 0350 	mov.w	r3, #80	; 0x50
90011534:	f383 8811 	msr	BASEPRI, r3
90011538:	f3bf 8f6f 	isb	sy
9001153c:	f3bf 8f4f 	dsb	sy
90011540:	e7fe      	b.n	90011540 <xPortStartScheduler+0x108>
90011542:	f04f 0350 	mov.w	r3, #80	; 0x50
90011546:	f383 8811 	msr	BASEPRI, r3
9001154a:	f3bf 8f6f 	isb	sy
9001154e:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
90011552:	9b03      	ldr	r3, [sp, #12]
90011554:	2b00      	cmp	r3, #0
90011556:	d0fc      	beq.n	90011552 <xPortStartScheduler+0x11a>
}
90011558:	2000      	movs	r0, #0
9001155a:	b004      	add	sp, #16
9001155c:	bd70      	pop	{r4, r5, r6, pc}
9001155e:	bf00      	nop
90011560:	410fc271 	.word	0x410fc271
90011564:	410fc270 	.word	0x410fc270
90011568:	e000e400 	.word	0xe000e400
9001156c:	240258d4 	.word	0x240258d4
90011570:	240258d0 	.word	0x240258d0
90011574:	24000064 	.word	0x24000064

90011578 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
90011578:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
9001157c:	2b0f      	cmp	r3, #15
9001157e:	d90e      	bls.n	9001159e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
90011580:	4911      	ldr	r1, [pc, #68]	; (900115c8 <vPortValidateInterruptPriority+0x50>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
90011582:	4a12      	ldr	r2, [pc, #72]	; (900115cc <vPortValidateInterruptPriority+0x54>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
90011584:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
90011586:	7812      	ldrb	r2, [r2, #0]
90011588:	429a      	cmp	r2, r3
9001158a:	d908      	bls.n	9001159e <vPortValidateInterruptPriority+0x26>
9001158c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011590:	f383 8811 	msr	BASEPRI, r3
90011594:	f3bf 8f6f 	isb	sy
90011598:	f3bf 8f4f 	dsb	sy
9001159c:	e7fe      	b.n	9001159c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
9001159e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900115a2:	4a0b      	ldr	r2, [pc, #44]	; (900115d0 <vPortValidateInterruptPriority+0x58>)
900115a4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	; 0xd0c
900115a8:	6812      	ldr	r2, [r2, #0]
900115aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
900115ae:	4293      	cmp	r3, r2
900115b0:	d908      	bls.n	900115c4 <vPortValidateInterruptPriority+0x4c>
900115b2:	f04f 0350 	mov.w	r3, #80	; 0x50
900115b6:	f383 8811 	msr	BASEPRI, r3
900115ba:	f3bf 8f6f 	isb	sy
900115be:	f3bf 8f4f 	dsb	sy
900115c2:	e7fe      	b.n	900115c2 <vPortValidateInterruptPriority+0x4a>
	}
900115c4:	4770      	bx	lr
900115c6:	bf00      	nop
900115c8:	e000e3f0 	.word	0xe000e3f0
900115cc:	240258d0 	.word	0x240258d0
900115d0:	240258d4 	.word	0x240258d4

900115d4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
900115d4:	b570      	push	{r4, r5, r6, lr}
900115d6:	4615      	mov	r5, r2

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
900115d8:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
900115da:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900115dc:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
900115de:	b92a      	cbnz	r2, 900115ec <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900115e0:	6805      	ldr	r5, [r0, #0]
900115e2:	b365      	cbz	r5, 9001163e <prvCopyDataToQueue+0x6a>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
900115e4:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
900115e6:	4610      	mov	r0, r2
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
900115e8:	63a6      	str	r6, [r4, #56]	; 0x38

	return xReturn;
}
900115ea:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
900115ec:	b97d      	cbnz	r5, 9001160e <prvCopyDataToQueue+0x3a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900115ee:	6840      	ldr	r0, [r0, #4]
900115f0:	f015 fd9e 	bl	90027130 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900115f4:	6863      	ldr	r3, [r4, #4]
900115f6:	6c22      	ldr	r2, [r4, #64]	; 0x40
900115f8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
900115fa:	68a2      	ldr	r2, [r4, #8]
900115fc:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900115fe:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90011600:	d319      	bcc.n	90011636 <prvCopyDataToQueue+0x62>
			pxQueue->pcWriteTo = pxQueue->pcHead;
90011602:	6822      	ldr	r2, [r4, #0]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011604:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
90011606:	4628      	mov	r0, r5
			pxQueue->pcWriteTo = pxQueue->pcHead;
90011608:	6062      	str	r2, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9001160a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9001160c:	bd70      	pop	{r4, r5, r6, pc}
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
9001160e:	68c0      	ldr	r0, [r0, #12]
90011610:	f015 fd8e 	bl	90027130 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90011614:	6c22      	ldr	r2, [r4, #64]	; 0x40
90011616:	68e3      	ldr	r3, [r4, #12]
90011618:	4251      	negs	r1, r2
9001161a:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
9001161c:	6822      	ldr	r2, [r4, #0]
9001161e:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
90011620:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
90011622:	d202      	bcs.n	9001162a <prvCopyDataToQueue+0x56>
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
90011624:	68a3      	ldr	r3, [r4, #8]
90011626:	440b      	add	r3, r1
90011628:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
9001162a:	2d02      	cmp	r5, #2
9001162c:	d00d      	beq.n	9001164a <prvCopyDataToQueue+0x76>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9001162e:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
90011630:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011632:	63a6      	str	r6, [r4, #56]	; 0x38
}
90011634:	bd70      	pop	{r4, r5, r6, pc}
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011636:	3601      	adds	r6, #1
BaseType_t xReturn = pdFALSE;
90011638:	4628      	mov	r0, r5
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
9001163a:	63a6      	str	r6, [r4, #56]	; 0x38
}
9001163c:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
9001163e:	6880      	ldr	r0, [r0, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011640:	3601      	adds	r6, #1
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
90011642:	f001 ff1d 	bl	90013480 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
90011646:	60a5      	str	r5, [r4, #8]
90011648:	e7ce      	b.n	900115e8 <prvCopyDataToQueue+0x14>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
9001164a:	2e01      	cmp	r6, #1
BaseType_t xReturn = pdFALSE;
9001164c:	f04f 0000 	mov.w	r0, #0
90011650:	bf38      	it	cc
90011652:	2601      	movcc	r6, #1
90011654:	e7c8      	b.n	900115e8 <prvCopyDataToQueue+0x14>
90011656:	bf00      	nop

90011658 <xQueueGenericCreateStatic>:
	{
90011658:	b530      	push	{r4, r5, lr}
9001165a:	b083      	sub	sp, #12
9001165c:	f89d 4018 	ldrb.w	r4, [sp, #24]
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90011660:	b940      	cbnz	r0, 90011674 <xQueueGenericCreateStatic+0x1c>
90011662:	f04f 0350 	mov.w	r3, #80	; 0x50
90011666:	f383 8811 	msr	BASEPRI, r3
9001166a:	f3bf 8f6f 	isb	sy
9001166e:	f3bf 8f4f 	dsb	sy
90011672:	e7fe      	b.n	90011672 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
90011674:	461d      	mov	r5, r3
90011676:	b153      	cbz	r3, 9001168e <xQueueGenericCreateStatic+0x36>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
90011678:	b30a      	cbz	r2, 900116be <xQueueGenericCreateStatic+0x66>
9001167a:	b989      	cbnz	r1, 900116a0 <xQueueGenericCreateStatic+0x48>
9001167c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011680:	f383 8811 	msr	BASEPRI, r3
90011684:	f3bf 8f6f 	isb	sy
90011688:	f3bf 8f4f 	dsb	sy
9001168c:	e7fe      	b.n	9001168c <xQueueGenericCreateStatic+0x34>
9001168e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011692:	f383 8811 	msr	BASEPRI, r3
90011696:	f3bf 8f6f 	isb	sy
9001169a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
9001169e:	e7fe      	b.n	9001169e <xQueueGenericCreateStatic+0x46>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
900116a0:	b16a      	cbz	r2, 900116be <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
900116a2:	2350      	movs	r3, #80	; 0x50
900116a4:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
900116a6:	9b01      	ldr	r3, [sp, #4]
900116a8:	2b50      	cmp	r3, #80	; 0x50
900116aa:	d013      	beq.n	900116d4 <xQueueGenericCreateStatic+0x7c>
900116ac:	f04f 0350 	mov.w	r3, #80	; 0x50
900116b0:	f383 8811 	msr	BASEPRI, r3
900116b4:	f3bf 8f6f 	isb	sy
900116b8:	f3bf 8f4f 	dsb	sy
900116bc:	e7fe      	b.n	900116bc <xQueueGenericCreateStatic+0x64>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
900116be:	2900      	cmp	r1, #0
900116c0:	d0ef      	beq.n	900116a2 <xQueueGenericCreateStatic+0x4a>
900116c2:	f04f 0350 	mov.w	r3, #80	; 0x50
900116c6:	f383 8811 	msr	BASEPRI, r3
900116ca:	f3bf 8f6f 	isb	sy
900116ce:	f3bf 8f4f 	dsb	sy
900116d2:	e7fe      	b.n	900116d2 <xQueueGenericCreateStatic+0x7a>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
900116d4:	2900      	cmp	r1, #0
900116d6:	bf08      	it	eq
900116d8:	462a      	moveq	r2, r5
	pxNewQueue->uxLength = uxQueueLength;
900116da:	63e8      	str	r0, [r5, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
900116dc:	6429      	str	r1, [r5, #64]	; 0x40
900116de:	602a      	str	r2, [r5, #0]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
900116e0:	9a01      	ldr	r2, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
900116e2:	2201      	movs	r2, #1
900116e4:	f885 2046 	strb.w	r2, [r5, #70]	; 0x46
	taskENTER_CRITICAL();
900116e8:	f7ff fe14 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900116ec:	6829      	ldr	r1, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
900116ee:	2300      	movs	r3, #0
		pxQueue->pcWriteTo = pxQueue->pcHead;
900116f0:	6069      	str	r1, [r5, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
900116f2:	63ab      	str	r3, [r5, #56]	; 0x38
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900116f4:	e9d5 200f 	ldrd	r2, r0, [r5, #60]	; 0x3c
900116f8:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900116fc:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900116fe:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011700:	4401      	add	r1, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011702:	60aa      	str	r2, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
90011704:	22ff      	movs	r2, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011706:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9001170a:	60e9      	str	r1, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9001170c:	f885 2044 	strb.w	r2, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90011710:	f885 2045 	strb.w	r2, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011714:	f7ff fd48 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90011718:	f105 0024 	add.w	r0, r5, #36	; 0x24
9001171c:	f7ff fd44 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
90011720:	f7ff fe1a 	bl	90011358 <vPortExitCritical>
	}
90011724:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
90011726:	f885 404c 	strb.w	r4, [r5, #76]	; 0x4c
	}
9001172a:	b003      	add	sp, #12
9001172c:	bd30      	pop	{r4, r5, pc}
9001172e:	bf00      	nop

90011730 <xQueueGenericCreate>:
	{
90011730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
90011732:	b940      	cbnz	r0, 90011746 <xQueueGenericCreate+0x16>
90011734:	f04f 0350 	mov.w	r3, #80	; 0x50
90011738:	f383 8811 	msr	BASEPRI, r3
9001173c:	f3bf 8f6f 	isb	sy
90011740:	f3bf 8f4f 	dsb	sy
90011744:	e7fe      	b.n	90011744 <xQueueGenericCreate+0x14>
90011746:	4605      	mov	r5, r0
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90011748:	fb01 f000 	mul.w	r0, r1, r0
9001174c:	460e      	mov	r6, r1
9001174e:	4617      	mov	r7, r2
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90011750:	3050      	adds	r0, #80	; 0x50
90011752:	f7ff fc0d 	bl	90010f70 <pvPortMalloc>
		if( pxNewQueue != NULL )
90011756:	4604      	mov	r4, r0
90011758:	b340      	cbz	r0, 900117ac <xQueueGenericCreate+0x7c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
9001175a:	2300      	movs	r3, #0
9001175c:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
90011760:	b336      	cbz	r6, 900117b0 <xQueueGenericCreate+0x80>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011762:	f100 0350 	add.w	r3, r0, #80	; 0x50
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
90011766:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
90011768:	e9c4 560f 	strd	r5, r6, [r4, #60]	; 0x3c
	taskENTER_CRITICAL();
9001176c:	f7ff fdd2 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011770:	6822      	ldr	r2, [r4, #0]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011772:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
90011776:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011778:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
9001177c:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011780:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011782:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011784:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011786:	60a3      	str	r3, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90011788:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
9001178a:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9001178c:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9001178e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
90011790:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90011794:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011798:	f7ff fd06 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
9001179c:	f104 0024 	add.w	r0, r4, #36	; 0x24
900117a0:	f7ff fd02 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
900117a4:	f7ff fdd8 	bl	90011358 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
900117a8:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
	}
900117ac:	4620      	mov	r0, r4
900117ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
900117b0:	4603      	mov	r3, r0
900117b2:	e7d8      	b.n	90011766 <xQueueGenericCreate+0x36>

900117b4 <xQueueCreateCountingSemaphoreStatic>:
		configASSERT( uxMaxCount != 0 );
900117b4:	b940      	cbnz	r0, 900117c8 <xQueueCreateCountingSemaphoreStatic+0x14>
900117b6:	f04f 0350 	mov.w	r3, #80	; 0x50
900117ba:	f383 8811 	msr	BASEPRI, r3
900117be:	f3bf 8f6f 	isb	sy
900117c2:	f3bf 8f4f 	dsb	sy
900117c6:	e7fe      	b.n	900117c6 <xQueueCreateCountingSemaphoreStatic+0x12>
		configASSERT( uxInitialCount <= uxMaxCount );
900117c8:	4288      	cmp	r0, r1
900117ca:	d208      	bcs.n	900117de <xQueueCreateCountingSemaphoreStatic+0x2a>
900117cc:	f04f 0350 	mov.w	r3, #80	; 0x50
900117d0:	f383 8811 	msr	BASEPRI, r3
900117d4:	f3bf 8f6f 	isb	sy
900117d8:	f3bf 8f4f 	dsb	sy
900117dc:	e7fe      	b.n	900117dc <xQueueCreateCountingSemaphoreStatic+0x28>
	{
900117de:	b530      	push	{r4, r5, lr}
900117e0:	4615      	mov	r5, r2
900117e2:	b085      	sub	sp, #20
		configASSERT( pxStaticQueue != NULL );
900117e4:	2a00      	cmp	r2, #0
900117e6:	d03d      	beq.n	90011864 <xQueueCreateCountingSemaphoreStatic+0xb0>
			volatile size_t xSize = sizeof( StaticQueue_t );
900117e8:	2350      	movs	r3, #80	; 0x50
900117ea:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
900117ec:	9b03      	ldr	r3, [sp, #12]
900117ee:	2b50      	cmp	r3, #80	; 0x50
900117f0:	d008      	beq.n	90011804 <xQueueCreateCountingSemaphoreStatic+0x50>
900117f2:	f04f 0350 	mov.w	r3, #80	; 0x50
900117f6:	f383 8811 	msr	BASEPRI, r3
900117fa:	f3bf 8f6f 	isb	sy
900117fe:	f3bf 8f4f 	dsb	sy
90011802:	e7fe      	b.n	90011802 <xQueueCreateCountingSemaphoreStatic+0x4e>
	pxNewQueue->uxItemSize = uxItemSize;
90011804:	2400      	movs	r4, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90011806:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90011808:	602a      	str	r2, [r5, #0]
	pxNewQueue->uxLength = uxQueueLength;
9001180a:	63d0      	str	r0, [r2, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
9001180c:	f882 3046 	strb.w	r3, [r2, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
90011810:	6414      	str	r4, [r2, #64]	; 0x40
90011812:	9101      	str	r1, [sp, #4]
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90011814:	9b03      	ldr	r3, [sp, #12]
	taskENTER_CRITICAL();
90011816:	f7ff fd7d 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9001181a:	6828      	ldr	r0, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
9001181c:	63ac      	str	r4, [r5, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
9001181e:	6068      	str	r0, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011820:	e9d5 3c0f 	ldrd	r3, ip, [r5, #60]	; 0x3c
90011824:	fb03 f30c 	mul.w	r3, r3, ip
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011828:	eba3 0c0c 	sub.w	ip, r3, ip
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9001182c:	4403      	add	r3, r0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
9001182e:	4484      	add	ip, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011830:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
90011832:	23ff      	movs	r3, #255	; 0xff
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011834:	f105 0010 	add.w	r0, r5, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011838:	f8c5 c00c 	str.w	ip, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
9001183c:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90011840:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011844:	f7ff fcb0 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90011848:	f105 0024 	add.w	r0, r5, #36	; 0x24
9001184c:	f7ff fcac 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
90011850:	f7ff fd82 	bl	90011358 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
90011854:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
90011856:	9901      	ldr	r1, [sp, #4]
	}
90011858:	4628      	mov	r0, r5
		pxNewQueue->ucQueueType = ucQueueType;
9001185a:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
9001185e:	63a9      	str	r1, [r5, #56]	; 0x38
	}
90011860:	b005      	add	sp, #20
90011862:	bd30      	pop	{r4, r5, pc}
90011864:	f04f 0350 	mov.w	r3, #80	; 0x50
90011868:	f383 8811 	msr	BASEPRI, r3
9001186c:	f3bf 8f6f 	isb	sy
90011870:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
90011874:	e7fe      	b.n	90011874 <xQueueCreateCountingSemaphoreStatic+0xc0>
90011876:	bf00      	nop

90011878 <xQueueCreateCountingSemaphore>:
	{
90011878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( uxMaxCount != 0 );
9001187a:	b940      	cbnz	r0, 9001188e <xQueueCreateCountingSemaphore+0x16>
9001187c:	f04f 0350 	mov.w	r3, #80	; 0x50
90011880:	f383 8811 	msr	BASEPRI, r3
90011884:	f3bf 8f6f 	isb	sy
90011888:	f3bf 8f4f 	dsb	sy
9001188c:	e7fe      	b.n	9001188c <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
9001188e:	4288      	cmp	r0, r1
90011890:	4604      	mov	r4, r0
90011892:	460e      	mov	r6, r1
90011894:	d208      	bcs.n	900118a8 <xQueueCreateCountingSemaphore+0x30>
90011896:	f04f 0350 	mov.w	r3, #80	; 0x50
9001189a:	f383 8811 	msr	BASEPRI, r3
9001189e:	f3bf 8f6f 	isb	sy
900118a2:	f3bf 8f4f 	dsb	sy
900118a6:	e7fe      	b.n	900118a6 <xQueueCreateCountingSemaphore+0x2e>
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
900118a8:	2050      	movs	r0, #80	; 0x50
900118aa:	f7ff fb61 	bl	90010f70 <pvPortMalloc>
		if( pxNewQueue != NULL )
900118ae:	4605      	mov	r5, r0
900118b0:	b330      	cbz	r0, 90011900 <xQueueCreateCountingSemaphore+0x88>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
900118b2:	2700      	movs	r7, #0
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
900118b4:	6000      	str	r0, [r0, #0]
	pxNewQueue->uxLength = uxQueueLength;
900118b6:	63c4      	str	r4, [r0, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
900118b8:	f880 7046 	strb.w	r7, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
900118bc:	6407      	str	r7, [r0, #64]	; 0x40
	taskENTER_CRITICAL();
900118be:	f7ff fd29 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118c2:	682a      	ldr	r2, [r5, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
900118c4:	63af      	str	r7, [r5, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
900118c6:	f105 0010 	add.w	r0, r5, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
900118ca:	606a      	str	r2, [r5, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118cc:	e9d5 310f 	ldrd	r3, r1, [r5, #60]	; 0x3c
900118d0:	fb01 f303 	mul.w	r3, r1, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118d4:	1a59      	subs	r1, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118d6:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118d8:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118da:	60ab      	str	r3, [r5, #8]
		pxQueue->cRxLock = queueUNLOCKED;
900118dc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
900118de:	60ea      	str	r2, [r5, #12]
		pxQueue->cRxLock = queueUNLOCKED;
900118e0:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
900118e4:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
900118e8:	f7ff fc5e 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
900118ec:	f105 0024 	add.w	r0, r5, #36	; 0x24
900118f0:	f7ff fc5a 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
900118f4:	f7ff fd30 	bl	90011358 <vPortExitCritical>
		pxNewQueue->ucQueueType = ucQueueType;
900118f8:	2302      	movs	r3, #2
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
900118fa:	63ae      	str	r6, [r5, #56]	; 0x38
		pxNewQueue->ucQueueType = ucQueueType;
900118fc:	f885 304c 	strb.w	r3, [r5, #76]	; 0x4c
	}
90011900:	4628      	mov	r0, r5
90011902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

90011904 <xQueueGenericSend>:
{
90011904:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90011908:	b084      	sub	sp, #16
9001190a:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
9001190c:	2800      	cmp	r0, #0
9001190e:	f000 8103 	beq.w	90011b18 <xQueueGenericSend+0x214>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90011912:	4688      	mov	r8, r1
90011914:	4604      	mov	r4, r0
90011916:	461f      	mov	r7, r3
90011918:	2900      	cmp	r1, #0
9001191a:	f000 8097 	beq.w	90011a4c <xQueueGenericSend+0x148>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
9001191e:	2f02      	cmp	r7, #2
90011920:	d10b      	bne.n	9001193a <xQueueGenericSend+0x36>
90011922:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011924:	2b01      	cmp	r3, #1
90011926:	d008      	beq.n	9001193a <xQueueGenericSend+0x36>
90011928:	f04f 0350 	mov.w	r3, #80	; 0x50
9001192c:	f383 8811 	msr	BASEPRI, r3
90011930:	f3bf 8f6f 	isb	sy
90011934:	f3bf 8f4f 	dsb	sy
90011938:	e7fe      	b.n	90011938 <xQueueGenericSend+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
9001193a:	f001 fd4b 	bl	900133d4 <xTaskGetSchedulerState>
9001193e:	2800      	cmp	r0, #0
90011940:	f000 80f3 	beq.w	90011b2a <xQueueGenericSend+0x226>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90011944:	f1a7 0902 	sub.w	r9, r7, #2
90011948:	2500      	movs	r5, #0
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001194a:	f104 0624 	add.w	r6, r4, #36	; 0x24
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9001194e:	fab9 f989 	clz	r9, r9
90011952:	ea4f 1959 	mov.w	r9, r9, lsr #5
		taskENTER_CRITICAL();
90011956:	f7ff fcdd 	bl	90011314 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
9001195a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
9001195c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
9001195e:	429a      	cmp	r2, r3
90011960:	f0c0 80f0 	bcc.w	90011b44 <xQueueGenericSend+0x240>
90011964:	f1b9 0f00 	cmp.w	r9, #0
90011968:	f040 80ec 	bne.w	90011b44 <xQueueGenericSend+0x240>
				if( xTicksToWait == ( TickType_t ) 0 )
9001196c:	9b01      	ldr	r3, [sp, #4]
9001196e:	2b00      	cmp	r3, #0
90011970:	f000 8101 	beq.w	90011b76 <xQueueGenericSend+0x272>
				else if( xEntryTimeSet == pdFALSE )
90011974:	2d00      	cmp	r5, #0
90011976:	f000 80cb 	beq.w	90011b10 <xQueueGenericSend+0x20c>
		taskEXIT_CRITICAL();
9001197a:	f7ff fced 	bl	90011358 <vPortExitCritical>
		vTaskSuspendAll();
9001197e:	f001 fb55 	bl	9001302c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90011982:	f7ff fcc7 	bl	90011314 <vPortEnterCritical>
90011986:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001198a:	2bff      	cmp	r3, #255	; 0xff
9001198c:	d102      	bne.n	90011994 <xQueueGenericSend+0x90>
9001198e:	2300      	movs	r3, #0
90011990:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
90011994:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90011998:	2bff      	cmp	r3, #255	; 0xff
9001199a:	d102      	bne.n	900119a2 <xQueueGenericSend+0x9e>
9001199c:	2300      	movs	r3, #0
9001199e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
900119a2:	f7ff fcd9 	bl	90011358 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
900119a6:	a901      	add	r1, sp, #4
900119a8:	a802      	add	r0, sp, #8
900119aa:	f001 fcbf 	bl	9001332c <xTaskCheckForTimeOut>
900119ae:	2800      	cmp	r0, #0
900119b0:	f040 80e5 	bne.w	90011b7e <xQueueGenericSend+0x27a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
900119b4:	f7ff fcae 	bl	90011314 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
900119b8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
900119ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900119bc:	429a      	cmp	r2, r3
900119be:	d052      	beq.n	90011a66 <xQueueGenericSend+0x162>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
900119c0:	f7ff fcca 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
900119c4:	f7ff fca6 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900119c8:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
900119cc:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
900119ce:	2d00      	cmp	r5, #0
900119d0:	dc04      	bgt.n	900119dc <xQueueGenericSend+0xd8>
900119d2:	e011      	b.n	900119f8 <xQueueGenericSend+0xf4>
			--cTxLock;
900119d4:	1e6a      	subs	r2, r5, #1
900119d6:	b2d3      	uxtb	r3, r2
900119d8:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
900119da:	b16b      	cbz	r3, 900119f8 <xQueueGenericSend+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900119dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900119de:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900119e0:	b153      	cbz	r3, 900119f8 <xQueueGenericSend+0xf4>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900119e2:	f001 fc4d 	bl	90013280 <xTaskRemoveFromEventList>
900119e6:	2800      	cmp	r0, #0
900119e8:	d0f4      	beq.n	900119d4 <xQueueGenericSend+0xd0>
						vTaskMissedYield();
900119ea:	f001 fce7 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
900119ee:	1e6a      	subs	r2, r5, #1
900119f0:	b2d3      	uxtb	r3, r2
900119f2:	b255      	sxtb	r5, r2
		while( cTxLock > queueLOCKED_UNMODIFIED )
900119f4:	2b00      	cmp	r3, #0
900119f6:	d1f1      	bne.n	900119dc <xQueueGenericSend+0xd8>
		pxQueue->cTxLock = queueUNLOCKED;
900119f8:	23ff      	movs	r3, #255	; 0xff
900119fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900119fe:	f7ff fcab 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90011a02:	f7ff fc87 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90011a06:	f894 2044 	ldrb.w	r2, [r4, #68]	; 0x44
90011a0a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011a0c:	2d00      	cmp	r5, #0
90011a0e:	dd14      	ble.n	90011a3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011a10:	f104 0a10 	add.w	sl, r4, #16
90011a14:	e003      	b.n	90011a1e <xQueueGenericSend+0x11a>
				--cRxLock;
90011a16:	1e6a      	subs	r2, r5, #1
90011a18:	b2d3      	uxtb	r3, r2
90011a1a:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011a1c:	b16b      	cbz	r3, 90011a3a <xQueueGenericSend+0x136>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011a1e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011a20:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011a22:	b153      	cbz	r3, 90011a3a <xQueueGenericSend+0x136>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011a24:	f001 fc2c 	bl	90013280 <xTaskRemoveFromEventList>
90011a28:	2800      	cmp	r0, #0
90011a2a:	d0f4      	beq.n	90011a16 <xQueueGenericSend+0x112>
					vTaskMissedYield();
90011a2c:	f001 fcc6 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
90011a30:	1e6a      	subs	r2, r5, #1
90011a32:	b2d3      	uxtb	r3, r2
90011a34:	b255      	sxtb	r5, r2
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011a36:	2b00      	cmp	r3, #0
90011a38:	d1f1      	bne.n	90011a1e <xQueueGenericSend+0x11a>
		pxQueue->cRxLock = queueUNLOCKED;
90011a3a:	23ff      	movs	r3, #255	; 0xff
90011a3c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90011a40:	f7ff fc8a 	bl	90011358 <vPortExitCritical>
				( void ) xTaskResumeAll();
90011a44:	f001 fafa 	bl	9001303c <xTaskResumeAll>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90011a48:	2501      	movs	r5, #1
90011a4a:	e784      	b.n	90011956 <xQueueGenericSend+0x52>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90011a4c:	6c03      	ldr	r3, [r0, #64]	; 0x40
90011a4e:	2b00      	cmp	r3, #0
90011a50:	f43f af65 	beq.w	9001191e <xQueueGenericSend+0x1a>
90011a54:	f04f 0350 	mov.w	r3, #80	; 0x50
90011a58:	f383 8811 	msr	BASEPRI, r3
90011a5c:	f3bf 8f6f 	isb	sy
90011a60:	f3bf 8f4f 	dsb	sy
90011a64:	e7fe      	b.n	90011a64 <xQueueGenericSend+0x160>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
90011a66:	f104 0a10 	add.w	sl, r4, #16
	taskEXIT_CRITICAL();
90011a6a:	f7ff fc75 	bl	90011358 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
90011a6e:	9901      	ldr	r1, [sp, #4]
90011a70:	4650      	mov	r0, sl
90011a72:	f001 fb77 	bl	90013164 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
90011a76:	f7ff fc4d 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90011a7a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90011a7e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011a80:	2d00      	cmp	r5, #0
90011a82:	dc04      	bgt.n	90011a8e <xQueueGenericSend+0x18a>
90011a84:	e011      	b.n	90011aaa <xQueueGenericSend+0x1a6>
			--cTxLock;
90011a86:	1e6b      	subs	r3, r5, #1
90011a88:	b2da      	uxtb	r2, r3
90011a8a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011a8c:	b16a      	cbz	r2, 90011aaa <xQueueGenericSend+0x1a6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011a8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011a90:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011a92:	b153      	cbz	r3, 90011aaa <xQueueGenericSend+0x1a6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011a94:	f001 fbf4 	bl	90013280 <xTaskRemoveFromEventList>
90011a98:	2800      	cmp	r0, #0
90011a9a:	d0f4      	beq.n	90011a86 <xQueueGenericSend+0x182>
						vTaskMissedYield();
90011a9c:	f001 fc8e 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
90011aa0:	1e6b      	subs	r3, r5, #1
90011aa2:	b2da      	uxtb	r2, r3
90011aa4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011aa6:	2a00      	cmp	r2, #0
90011aa8:	d1f1      	bne.n	90011a8e <xQueueGenericSend+0x18a>
		pxQueue->cTxLock = queueUNLOCKED;
90011aaa:	23ff      	movs	r3, #255	; 0xff
90011aac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90011ab0:	f7ff fc52 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90011ab4:	f7ff fc2e 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90011ab8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90011abc:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011abe:	2d00      	cmp	r5, #0
90011ac0:	dc04      	bgt.n	90011acc <xQueueGenericSend+0x1c8>
90011ac2:	e011      	b.n	90011ae8 <xQueueGenericSend+0x1e4>
				--cRxLock;
90011ac4:	1e6b      	subs	r3, r5, #1
90011ac6:	b2da      	uxtb	r2, r3
90011ac8:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011aca:	b16a      	cbz	r2, 90011ae8 <xQueueGenericSend+0x1e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011acc:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011ace:	4650      	mov	r0, sl
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011ad0:	b153      	cbz	r3, 90011ae8 <xQueueGenericSend+0x1e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011ad2:	f001 fbd5 	bl	90013280 <xTaskRemoveFromEventList>
90011ad6:	2800      	cmp	r0, #0
90011ad8:	d0f4      	beq.n	90011ac4 <xQueueGenericSend+0x1c0>
					vTaskMissedYield();
90011ada:	f001 fc6f 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
90011ade:	1e6b      	subs	r3, r5, #1
90011ae0:	b2da      	uxtb	r2, r3
90011ae2:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011ae4:	2a00      	cmp	r2, #0
90011ae6:	d1f1      	bne.n	90011acc <xQueueGenericSend+0x1c8>
		pxQueue->cRxLock = queueUNLOCKED;
90011ae8:	23ff      	movs	r3, #255	; 0xff
90011aea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90011aee:	f7ff fc33 	bl	90011358 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
90011af2:	f001 faa3 	bl	9001303c <xTaskResumeAll>
90011af6:	2800      	cmp	r0, #0
90011af8:	d1a6      	bne.n	90011a48 <xQueueGenericSend+0x144>
					portYIELD_WITHIN_API();
90011afa:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90011afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90011b02:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90011b06:	f3bf 8f4f 	dsb	sy
90011b0a:	f3bf 8f6f 	isb	sy
90011b0e:	e79b      	b.n	90011a48 <xQueueGenericSend+0x144>
					vTaskInternalSetTimeOutState( &xTimeOut );
90011b10:	a802      	add	r0, sp, #8
90011b12:	f001 fbff 	bl	90013314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
90011b16:	e730      	b.n	9001197a <xQueueGenericSend+0x76>
90011b18:	f04f 0350 	mov.w	r3, #80	; 0x50
90011b1c:	f383 8811 	msr	BASEPRI, r3
90011b20:	f3bf 8f6f 	isb	sy
90011b24:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90011b28:	e7fe      	b.n	90011b28 <xQueueGenericSend+0x224>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90011b2a:	9b01      	ldr	r3, [sp, #4]
90011b2c:	2b00      	cmp	r3, #0
90011b2e:	f43f af09 	beq.w	90011944 <xQueueGenericSend+0x40>
90011b32:	f04f 0350 	mov.w	r3, #80	; 0x50
90011b36:	f383 8811 	msr	BASEPRI, r3
90011b3a:	f3bf 8f6f 	isb	sy
90011b3e:	f3bf 8f4f 	dsb	sy
90011b42:	e7fe      	b.n	90011b42 <xQueueGenericSend+0x23e>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90011b44:	463a      	mov	r2, r7
90011b46:	4641      	mov	r1, r8
90011b48:	4620      	mov	r0, r4
90011b4a:	f7ff fd43 	bl	900115d4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011b4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011b50:	2b00      	cmp	r3, #0
90011b52:	d152      	bne.n	90011bfa <xQueueGenericSend+0x2f6>
					else if( xYieldRequired != pdFALSE )
90011b54:	b148      	cbz	r0, 90011b6a <xQueueGenericSend+0x266>
						queueYIELD_IF_USING_PREEMPTION();
90011b56:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90011b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90011b5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90011b62:	f3bf 8f4f 	dsb	sy
90011b66:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
90011b6a:	f7ff fbf5 	bl	90011358 <vPortExitCritical>
				return pdPASS;
90011b6e:	2001      	movs	r0, #1
}
90011b70:	b004      	add	sp, #16
90011b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					taskEXIT_CRITICAL();
90011b76:	f7ff fbef 	bl	90011358 <vPortExitCritical>
					return errQUEUE_FULL;
90011b7a:	4648      	mov	r0, r9
90011b7c:	e7f8      	b.n	90011b70 <xQueueGenericSend+0x26c>
	taskENTER_CRITICAL();
90011b7e:	f7ff fbc9 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90011b82:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90011b86:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011b88:	2d00      	cmp	r5, #0
90011b8a:	dd10      	ble.n	90011bae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011b8c:	f104 0624 	add.w	r6, r4, #36	; 0x24
90011b90:	e003      	b.n	90011b9a <xQueueGenericSend+0x296>
			--cTxLock;
90011b92:	1e6b      	subs	r3, r5, #1
90011b94:	b2da      	uxtb	r2, r3
90011b96:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011b98:	b14a      	cbz	r2, 90011bae <xQueueGenericSend+0x2aa>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011b9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011b9c:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011b9e:	b133      	cbz	r3, 90011bae <xQueueGenericSend+0x2aa>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011ba0:	f001 fb6e 	bl	90013280 <xTaskRemoveFromEventList>
90011ba4:	2800      	cmp	r0, #0
90011ba6:	d0f4      	beq.n	90011b92 <xQueueGenericSend+0x28e>
						vTaskMissedYield();
90011ba8:	f001 fc08 	bl	900133bc <vTaskMissedYield>
90011bac:	e7f1      	b.n	90011b92 <xQueueGenericSend+0x28e>
		pxQueue->cTxLock = queueUNLOCKED;
90011bae:	23ff      	movs	r3, #255	; 0xff
90011bb0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90011bb4:	f7ff fbd0 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90011bb8:	f7ff fbac 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90011bbc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90011bc0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011bc2:	2d00      	cmp	r5, #0
90011bc4:	dd10      	ble.n	90011be8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011bc6:	f104 0610 	add.w	r6, r4, #16
90011bca:	e003      	b.n	90011bd4 <xQueueGenericSend+0x2d0>
				--cRxLock;
90011bcc:	1e6b      	subs	r3, r5, #1
90011bce:	b2da      	uxtb	r2, r3
90011bd0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011bd2:	b14a      	cbz	r2, 90011be8 <xQueueGenericSend+0x2e4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011bd4:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011bd6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011bd8:	b133      	cbz	r3, 90011be8 <xQueueGenericSend+0x2e4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011bda:	f001 fb51 	bl	90013280 <xTaskRemoveFromEventList>
90011bde:	2800      	cmp	r0, #0
90011be0:	d0f4      	beq.n	90011bcc <xQueueGenericSend+0x2c8>
					vTaskMissedYield();
90011be2:	f001 fbeb 	bl	900133bc <vTaskMissedYield>
90011be6:	e7f1      	b.n	90011bcc <xQueueGenericSend+0x2c8>
		pxQueue->cRxLock = queueUNLOCKED;
90011be8:	23ff      	movs	r3, #255	; 0xff
90011bea:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90011bee:	f7ff fbb3 	bl	90011358 <vPortExitCritical>
			( void ) xTaskResumeAll();
90011bf2:	f001 fa23 	bl	9001303c <xTaskResumeAll>
			return errQUEUE_FULL;
90011bf6:	2000      	movs	r0, #0
90011bf8:	e7ba      	b.n	90011b70 <xQueueGenericSend+0x26c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011bfa:	f104 0024 	add.w	r0, r4, #36	; 0x24
90011bfe:	f001 fb3f 	bl	90013280 <xTaskRemoveFromEventList>
90011c02:	2800      	cmp	r0, #0
90011c04:	d0b1      	beq.n	90011b6a <xQueueGenericSend+0x266>
90011c06:	e7a6      	b.n	90011b56 <xQueueGenericSend+0x252>

90011c08 <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
90011c08:	b179      	cbz	r1, 90011c2a <xQueueCreateMutexStatic+0x22>
			volatile size_t xSize = sizeof( StaticQueue_t );
90011c0a:	2350      	movs	r3, #80	; 0x50
	{
90011c0c:	b570      	push	{r4, r5, r6, lr}
90011c0e:	b082      	sub	sp, #8
			volatile size_t xSize = sizeof( StaticQueue_t );
90011c10:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
90011c12:	9b01      	ldr	r3, [sp, #4]
90011c14:	2b50      	cmp	r3, #80	; 0x50
90011c16:	d011      	beq.n	90011c3c <xQueueCreateMutexStatic+0x34>
90011c18:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c1c:	f383 8811 	msr	BASEPRI, r3
90011c20:	f3bf 8f6f 	isb	sy
90011c24:	f3bf 8f4f 	dsb	sy
90011c28:	e7fe      	b.n	90011c28 <xQueueCreateMutexStatic+0x20>
90011c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
90011c2e:	f383 8811 	msr	BASEPRI, r3
90011c32:	f3bf 8f6f 	isb	sy
90011c36:	f3bf 8f4f 	dsb	sy
		configASSERT( pxStaticQueue != NULL );
90011c3a:	e7fe      	b.n	90011c3a <xQueueCreateMutexStatic+0x32>
	pxNewQueue->uxItemSize = uxItemSize;
90011c3c:	2600      	movs	r6, #0
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90011c3e:	2301      	movs	r3, #1
90011c40:	460c      	mov	r4, r1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90011c42:	6009      	str	r1, [r1, #0]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
90011c44:	f881 3046 	strb.w	r3, [r1, #70]	; 0x46
90011c48:	4605      	mov	r5, r0
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
90011c4a:	9a01      	ldr	r2, [sp, #4]
	pxNewQueue->uxItemSize = uxItemSize;
90011c4c:	e9c1 360f 	strd	r3, r6, [r1, #60]	; 0x3c
	taskENTER_CRITICAL();
90011c50:	f7ff fb60 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c54:	6821      	ldr	r1, [r4, #0]
		pxQueue->cRxLock = queueUNLOCKED;
90011c56:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90011c58:	63a6      	str	r6, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
90011c5a:	6061      	str	r1, [r4, #4]
		pxQueue->cRxLock = queueUNLOCKED;
90011c5c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90011c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c64:	e9d4 200f 	ldrd	r2, r0, [r4, #60]	; 0x3c
90011c68:	fb00 f202 	mul.w	r2, r0, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c6c:	1a10      	subs	r0, r2, r0
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c6e:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c70:	4401      	add	r1, r0
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011c72:	f104 0010 	add.w	r0, r4, #16
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011c76:	e9c4 2102 	strd	r2, r1, [r4, #8]
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011c7a:	f7ff fa95 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90011c7e:	f104 0024 	add.w	r0, r4, #36	; 0x24
90011c82:	f7ff fa91 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
90011c86:	f7ff fb67 	bl	90011358 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90011c8a:	4633      	mov	r3, r6
90011c8c:	4632      	mov	r2, r6
90011c8e:	4631      	mov	r1, r6
90011c90:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
90011c92:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90011c96:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
90011c98:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
90011c9a:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90011c9c:	f7ff fe32 	bl	90011904 <xQueueGenericSend>
	}
90011ca0:	4620      	mov	r0, r4
90011ca2:	b002      	add	sp, #8
90011ca4:	bd70      	pop	{r4, r5, r6, pc}
90011ca6:	bf00      	nop

90011ca8 <xQueueGiveMutexRecursive>:
	{
90011ca8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
90011caa:	b138      	cbz	r0, 90011cbc <xQueueGiveMutexRecursive+0x14>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
90011cac:	6885      	ldr	r5, [r0, #8]
90011cae:	4604      	mov	r4, r0
90011cb0:	f001 fb8a 	bl	900133c8 <xTaskGetCurrentTaskHandle>
90011cb4:	4285      	cmp	r5, r0
90011cb6:	d00a      	beq.n	90011cce <xQueueGiveMutexRecursive+0x26>
			xReturn = pdFAIL;
90011cb8:	2000      	movs	r0, #0
	}
90011cba:	bd38      	pop	{r3, r4, r5, pc}
90011cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
90011cc0:	f383 8811 	msr	BASEPRI, r3
90011cc4:	f3bf 8f6f 	isb	sy
90011cc8:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
90011ccc:	e7fe      	b.n	90011ccc <xQueueGiveMutexRecursive+0x24>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
90011cce:	68e3      	ldr	r3, [r4, #12]
90011cd0:	3b01      	subs	r3, #1
90011cd2:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
90011cd4:	b10b      	cbz	r3, 90011cda <xQueueGiveMutexRecursive+0x32>
			xReturn = pdPASS;
90011cd6:	2001      	movs	r0, #1
	}
90011cd8:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
90011cda:	461a      	mov	r2, r3
90011cdc:	4619      	mov	r1, r3
90011cde:	4620      	mov	r0, r4
90011ce0:	f7ff fe10 	bl	90011904 <xQueueGenericSend>
			xReturn = pdPASS;
90011ce4:	2001      	movs	r0, #1
	}
90011ce6:	bd38      	pop	{r3, r4, r5, pc}

90011ce8 <xQueueCreateMutex>:
	{
90011ce8:	b570      	push	{r4, r5, r6, lr}
90011cea:	4605      	mov	r5, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
90011cec:	2050      	movs	r0, #80	; 0x50
90011cee:	f7ff f93f 	bl	90010f70 <pvPortMalloc>
		if( pxNewQueue != NULL )
90011cf2:	4604      	mov	r4, r0
90011cf4:	b370      	cbz	r0, 90011d54 <xQueueCreateMutex+0x6c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90011cf6:	2600      	movs	r6, #0
	pxNewQueue->uxLength = uxQueueLength;
90011cf8:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
90011cfa:	6020      	str	r0, [r4, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
90011cfc:	f880 6046 	strb.w	r6, [r0, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
90011d00:	e9c0 360f 	strd	r3, r6, [r0, #60]	; 0x3c
	taskENTER_CRITICAL();
90011d04:	f7ff fb06 	bl	90011314 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d08:	6821      	ldr	r1, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
90011d0a:	63a6      	str	r6, [r4, #56]	; 0x38
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011d0c:	f104 0010 	add.w	r0, r4, #16
		pxQueue->pcWriteTo = pxQueue->pcHead;
90011d10:	6061      	str	r1, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d12:	e9d4 230f 	ldrd	r2, r3, [r4, #60]	; 0x3c
90011d16:	fb03 f202 	mul.w	r2, r3, r2
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d1a:	1ad3      	subs	r3, r2, r3
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d1c:	440a      	add	r2, r1
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d1e:	4419      	add	r1, r3
		pxQueue->cRxLock = queueUNLOCKED;
90011d20:	23ff      	movs	r3, #255	; 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
90011d22:	e9c4 2102 	strd	r2, r1, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
90011d26:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
90011d2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
90011d2e:	f7ff fa3b 	bl	900111a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
90011d32:	f104 0024 	add.w	r0, r4, #36	; 0x24
90011d36:	f7ff fa37 	bl	900111a8 <vListInitialise>
	taskEXIT_CRITICAL();
90011d3a:	f7ff fb0d 	bl	90011358 <vPortExitCritical>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90011d3e:	4633      	mov	r3, r6
90011d40:	4632      	mov	r2, r6
90011d42:	4631      	mov	r1, r6
90011d44:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
90011d46:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
90011d4a:	60a6      	str	r6, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
90011d4c:	6026      	str	r6, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
90011d4e:	60e6      	str	r6, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
90011d50:	f7ff fdd8 	bl	90011904 <xQueueGenericSend>
	}
90011d54:	4620      	mov	r0, r4
90011d56:	bd70      	pop	{r4, r5, r6, pc}

90011d58 <xQueueGenericSendFromISR>:
	configASSERT( pxQueue );
90011d58:	2800      	cmp	r0, #0
90011d5a:	d04e      	beq.n	90011dfa <xQueueGenericSendFromISR+0xa2>
{
90011d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90011d60:	460e      	mov	r6, r1
90011d62:	4604      	mov	r4, r0
90011d64:	4617      	mov	r7, r2
90011d66:	461d      	mov	r5, r3
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90011d68:	b339      	cbz	r1, 90011dba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
90011d6a:	2d02      	cmp	r5, #2
90011d6c:	d10b      	bne.n	90011d86 <xQueueGenericSendFromISR+0x2e>
90011d6e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011d70:	2b01      	cmp	r3, #1
90011d72:	d008      	beq.n	90011d86 <xQueueGenericSendFromISR+0x2e>
90011d74:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d78:	f383 8811 	msr	BASEPRI, r3
90011d7c:	f3bf 8f6f 	isb	sy
90011d80:	f3bf 8f4f 	dsb	sy
90011d84:	e7fe      	b.n	90011d84 <xQueueGenericSendFromISR+0x2c>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90011d86:	f7ff fbf7 	bl	90011578 <vPortValidateInterruptPriority>
	__asm volatile
90011d8a:	f3ef 8811 	mrs	r8, BASEPRI
90011d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
90011d92:	f383 8811 	msr	BASEPRI, r3
90011d96:	f3bf 8f6f 	isb	sy
90011d9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
90011d9e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
90011da0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
90011da2:	429a      	cmp	r2, r3
90011da4:	d315      	bcc.n	90011dd2 <xQueueGenericSendFromISR+0x7a>
90011da6:	f1a5 0002 	sub.w	r0, r5, #2
90011daa:	fab0 f080 	clz	r0, r0
90011dae:	0940      	lsrs	r0, r0, #5
90011db0:	b978      	cbnz	r0, 90011dd2 <xQueueGenericSendFromISR+0x7a>
	__asm volatile
90011db2:	f388 8811 	msr	BASEPRI, r8
}
90011db6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90011dba:	6c03      	ldr	r3, [r0, #64]	; 0x40
90011dbc:	2b00      	cmp	r3, #0
90011dbe:	d0d4      	beq.n	90011d6a <xQueueGenericSendFromISR+0x12>
	__asm volatile
90011dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
90011dc4:	f383 8811 	msr	BASEPRI, r3
90011dc8:	f3bf 8f6f 	isb	sy
90011dcc:	f3bf 8f4f 	dsb	sy
90011dd0:	e7fe      	b.n	90011dd0 <xQueueGenericSendFromISR+0x78>
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90011dd2:	462a      	mov	r2, r5
			const int8_t cTxLock = pxQueue->cTxLock;
90011dd4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90011dd8:	4631      	mov	r1, r6
90011dda:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
90011ddc:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
90011dde:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
90011de0:	f7ff fbf8 	bl	900115d4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
90011de4:	1c6b      	adds	r3, r5, #1
90011de6:	d011      	beq.n	90011e0c <xQueueGenericSendFromISR+0xb4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90011de8:	1c6b      	adds	r3, r5, #1
			xReturn = pdPASS;
90011dea:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90011dec:	b25b      	sxtb	r3, r3
90011dee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	__asm volatile
90011df2:	f388 8811 	msr	BASEPRI, r8
}
90011df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
90011dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
90011dfe:	f383 8811 	msr	BASEPRI, r3
90011e02:	f3bf 8f6f 	isb	sy
90011e06:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90011e0a:	e7fe      	b.n	90011e0a <xQueueGenericSendFromISR+0xb2>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011e0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011e0e:	b90b      	cbnz	r3, 90011e14 <xQueueGenericSendFromISR+0xbc>
			xReturn = pdPASS;
90011e10:	2001      	movs	r0, #1
90011e12:	e7ce      	b.n	90011db2 <xQueueGenericSendFromISR+0x5a>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011e14:	f104 0024 	add.w	r0, r4, #36	; 0x24
90011e18:	f001 fa32 	bl	90013280 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
90011e1c:	2800      	cmp	r0, #0
90011e1e:	d0f7      	beq.n	90011e10 <xQueueGenericSendFromISR+0xb8>
90011e20:	2f00      	cmp	r7, #0
90011e22:	d0f5      	beq.n	90011e10 <xQueueGenericSendFromISR+0xb8>
								*pxHigherPriorityTaskWoken = pdTRUE;
90011e24:	2301      	movs	r3, #1
			xReturn = pdPASS;
90011e26:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
90011e28:	603b      	str	r3, [r7, #0]
90011e2a:	e7c2      	b.n	90011db2 <xQueueGenericSendFromISR+0x5a>

90011e2c <xQueueGiveFromISR>:
	configASSERT( pxQueue );
90011e2c:	b360      	cbz	r0, 90011e88 <xQueueGiveFromISR+0x5c>
	configASSERT( pxQueue->uxItemSize == 0 );
90011e2e:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
90011e30:	b570      	push	{r4, r5, r6, lr}
90011e32:	4604      	mov	r4, r0
	configASSERT( pxQueue->uxItemSize == 0 );
90011e34:	b143      	cbz	r3, 90011e48 <xQueueGiveFromISR+0x1c>
90011e36:	f04f 0350 	mov.w	r3, #80	; 0x50
90011e3a:	f383 8811 	msr	BASEPRI, r3
90011e3e:	f3bf 8f6f 	isb	sy
90011e42:	f3bf 8f4f 	dsb	sy
90011e46:	e7fe      	b.n	90011e46 <xQueueGiveFromISR+0x1a>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
90011e48:	6803      	ldr	r3, [r0, #0]
90011e4a:	460d      	mov	r5, r1
90011e4c:	b32b      	cbz	r3, 90011e9a <xQueueGiveFromISR+0x6e>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
90011e4e:	f7ff fb93 	bl	90011578 <vPortValidateInterruptPriority>
	__asm volatile
90011e52:	f3ef 8611 	mrs	r6, BASEPRI
90011e56:	f04f 0350 	mov.w	r3, #80	; 0x50
90011e5a:	f383 8811 	msr	BASEPRI, r3
90011e5e:	f3bf 8f6f 	isb	sy
90011e62:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90011e66:	6ba3      	ldr	r3, [r4, #56]	; 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
90011e68:	6be2      	ldr	r2, [r4, #60]	; 0x3c
90011e6a:	429a      	cmp	r2, r3
90011e6c:	d921      	bls.n	90011eb2 <xQueueGiveFromISR+0x86>
			const int8_t cTxLock = pxQueue->cTxLock;
90011e6e:	f894 2045 	ldrb.w	r2, [r4, #69]	; 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011e72:	3301      	adds	r3, #1
			if( cTxLock == queueUNLOCKED )
90011e74:	2aff      	cmp	r2, #255	; 0xff
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
90011e76:	63a3      	str	r3, [r4, #56]	; 0x38
			const int8_t cTxLock = pxQueue->cTxLock;
90011e78:	b253      	sxtb	r3, r2
			if( cTxLock == queueUNLOCKED )
90011e7a:	d01e      	beq.n	90011eba <xQueueGiveFromISR+0x8e>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90011e7c:	3301      	adds	r3, #1
			xReturn = pdPASS;
90011e7e:	2001      	movs	r0, #1
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
90011e80:	b25b      	sxtb	r3, r3
90011e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90011e86:	e015      	b.n	90011eb4 <xQueueGiveFromISR+0x88>
	__asm volatile
90011e88:	f04f 0350 	mov.w	r3, #80	; 0x50
90011e8c:	f383 8811 	msr	BASEPRI, r3
90011e90:	f3bf 8f6f 	isb	sy
90011e94:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90011e98:	e7fe      	b.n	90011e98 <xQueueGiveFromISR+0x6c>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
90011e9a:	6883      	ldr	r3, [r0, #8]
90011e9c:	2b00      	cmp	r3, #0
90011e9e:	d0d6      	beq.n	90011e4e <xQueueGiveFromISR+0x22>
90011ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
90011ea4:	f383 8811 	msr	BASEPRI, r3
90011ea8:	f3bf 8f6f 	isb	sy
90011eac:	f3bf 8f4f 	dsb	sy
90011eb0:	e7fe      	b.n	90011eb0 <xQueueGiveFromISR+0x84>
			xReturn = errQUEUE_FULL;
90011eb2:	2000      	movs	r0, #0
	__asm volatile
90011eb4:	f386 8811 	msr	BASEPRI, r6
}
90011eb8:	bd70      	pop	{r4, r5, r6, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011eba:	6a63      	ldr	r3, [r4, #36]	; 0x24
90011ebc:	b90b      	cbnz	r3, 90011ec2 <xQueueGiveFromISR+0x96>
			xReturn = pdPASS;
90011ebe:	2001      	movs	r0, #1
90011ec0:	e7f8      	b.n	90011eb4 <xQueueGiveFromISR+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011ec2:	f104 0024 	add.w	r0, r4, #36	; 0x24
90011ec6:	f001 f9db 	bl	90013280 <xTaskRemoveFromEventList>
							if( pxHigherPriorityTaskWoken != NULL )
90011eca:	2d00      	cmp	r5, #0
90011ecc:	d0f7      	beq.n	90011ebe <xQueueGiveFromISR+0x92>
90011ece:	2800      	cmp	r0, #0
90011ed0:	d0f5      	beq.n	90011ebe <xQueueGiveFromISR+0x92>
								*pxHigherPriorityTaskWoken = pdTRUE;
90011ed2:	2301      	movs	r3, #1
			xReturn = pdPASS;
90011ed4:	4618      	mov	r0, r3
								*pxHigherPriorityTaskWoken = pdTRUE;
90011ed6:	602b      	str	r3, [r5, #0]
90011ed8:	e7ec      	b.n	90011eb4 <xQueueGiveFromISR+0x88>
90011eda:	bf00      	nop

90011edc <xQueueReceive>:
{
90011edc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90011ee0:	b085      	sub	sp, #20
90011ee2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
90011ee4:	2800      	cmp	r0, #0
90011ee6:	f000 815f 	beq.w	900121a8 <xQueueReceive+0x2cc>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
90011eea:	460f      	mov	r7, r1
90011eec:	4604      	mov	r4, r0
90011eee:	2900      	cmp	r1, #0
90011ef0:	f000 8094 	beq.w	9001201c <xQueueReceive+0x140>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90011ef4:	f001 fa6e 	bl	900133d4 <xTaskGetSchedulerState>
90011ef8:	2800      	cmp	r0, #0
90011efa:	f000 809c 	beq.w	90012036 <xQueueReceive+0x15a>
		taskENTER_CRITICAL();
90011efe:	f7ff fa09 	bl	90011314 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90011f02:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90011f04:	2d00      	cmp	r5, #0
90011f06:	d172      	bne.n	90011fee <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
90011f08:	9b01      	ldr	r3, [sp, #4]
90011f0a:	2b00      	cmp	r3, #0
90011f0c:	f000 80f1 	beq.w	900120f2 <xQueueReceive+0x216>
		prvLockQueue( pxQueue );
90011f10:	46a8      	mov	r8, r5
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011f12:	f104 0624 	add.w	r6, r4, #36	; 0x24
					vTaskInternalSetTimeOutState( &xTimeOut );
90011f16:	a802      	add	r0, sp, #8
90011f18:	f001 f9fc 	bl	90013314 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
90011f1c:	f7ff fa1c 	bl	90011358 <vPortExitCritical>
		vTaskSuspendAll();
90011f20:	f001 f884 	bl	9001302c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90011f24:	f7ff f9f6 	bl	90011314 <vPortEnterCritical>
90011f28:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90011f2c:	2bff      	cmp	r3, #255	; 0xff
90011f2e:	d101      	bne.n	90011f34 <xQueueReceive+0x58>
90011f30:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
90011f34:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90011f38:	2bff      	cmp	r3, #255	; 0xff
90011f3a:	d101      	bne.n	90011f40 <xQueueReceive+0x64>
90011f3c:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
90011f40:	f7ff fa0a 	bl	90011358 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
90011f44:	a901      	add	r1, sp, #4
90011f46:	a802      	add	r0, sp, #8
90011f48:	f001 f9f0 	bl	9001332c <xTaskCheckForTimeOut>
90011f4c:	2800      	cmp	r0, #0
90011f4e:	d17f      	bne.n	90012050 <xQueueReceive+0x174>
	taskENTER_CRITICAL();
90011f50:	f7ff f9e0 	bl	90011314 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
90011f54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
90011f56:	2b00      	cmp	r3, #0
90011f58:	f000 80d1 	beq.w	900120fe <xQueueReceive+0x222>
	taskEXIT_CRITICAL();
90011f5c:	f7ff f9fc 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90011f60:	f7ff f9d8 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90011f64:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90011f68:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011f6a:	2d00      	cmp	r5, #0
90011f6c:	dc04      	bgt.n	90011f78 <xQueueReceive+0x9c>
90011f6e:	e011      	b.n	90011f94 <xQueueReceive+0xb8>
			--cTxLock;
90011f70:	1e6b      	subs	r3, r5, #1
90011f72:	b2da      	uxtb	r2, r3
90011f74:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011f76:	b16a      	cbz	r2, 90011f94 <xQueueReceive+0xb8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011f7a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90011f7c:	b153      	cbz	r3, 90011f94 <xQueueReceive+0xb8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90011f7e:	f001 f97f 	bl	90013280 <xTaskRemoveFromEventList>
90011f82:	2800      	cmp	r0, #0
90011f84:	d0f4      	beq.n	90011f70 <xQueueReceive+0x94>
						vTaskMissedYield();
90011f86:	f001 fa19 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
90011f8a:	1e6b      	subs	r3, r5, #1
90011f8c:	b2da      	uxtb	r2, r3
90011f8e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90011f90:	2a00      	cmp	r2, #0
90011f92:	d1f1      	bne.n	90011f78 <xQueueReceive+0x9c>
		pxQueue->cTxLock = queueUNLOCKED;
90011f94:	23ff      	movs	r3, #255	; 0xff
90011f96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90011f9a:	f7ff f9dd 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90011f9e:	f7ff f9b9 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90011fa2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90011fa6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011fa8:	2d00      	cmp	r5, #0
90011faa:	dd14      	ble.n	90011fd6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011fac:	f104 0910 	add.w	r9, r4, #16
90011fb0:	e003      	b.n	90011fba <xQueueReceive+0xde>
				--cRxLock;
90011fb2:	1e6b      	subs	r3, r5, #1
90011fb4:	b2da      	uxtb	r2, r3
90011fb6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011fb8:	b16a      	cbz	r2, 90011fd6 <xQueueReceive+0xfa>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011fba:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011fbc:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90011fbe:	b153      	cbz	r3, 90011fd6 <xQueueReceive+0xfa>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90011fc0:	f001 f95e 	bl	90013280 <xTaskRemoveFromEventList>
90011fc4:	2800      	cmp	r0, #0
90011fc6:	d0f4      	beq.n	90011fb2 <xQueueReceive+0xd6>
					vTaskMissedYield();
90011fc8:	f001 f9f8 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
90011fcc:	1e6b      	subs	r3, r5, #1
90011fce:	b2da      	uxtb	r2, r3
90011fd0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90011fd2:	2a00      	cmp	r2, #0
90011fd4:	d1f1      	bne.n	90011fba <xQueueReceive+0xde>
		pxQueue->cRxLock = queueUNLOCKED;
90011fd6:	23ff      	movs	r3, #255	; 0xff
90011fd8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90011fdc:	f7ff f9bc 	bl	90011358 <vPortExitCritical>
				( void ) xTaskResumeAll();
90011fe0:	f001 f82c 	bl	9001303c <xTaskResumeAll>
		taskENTER_CRITICAL();
90011fe4:	f7ff f996 	bl	90011314 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90011fe8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90011fea:	2d00      	cmp	r5, #0
90011fec:	d07d      	beq.n	900120ea <xQueueReceive+0x20e>
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90011fee:	6c22      	ldr	r2, [r4, #64]	; 0x40
90011ff0:	b152      	cbz	r2, 90012008 <xQueueReceive+0x12c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90011ff2:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90011ff4:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90011ff6:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90011ff8:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
90011ffa:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
90011ffc:	d301      	bcc.n	90012002 <xQueueReceive+0x126>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
90011ffe:	6821      	ldr	r1, [r4, #0]
90012000:	60e1      	str	r1, [r4, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
90012002:	4638      	mov	r0, r7
90012004:	f015 f894 	bl	90027130 <memcpy>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
90012008:	3d01      	subs	r5, #1
9001200a:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001200c:	6923      	ldr	r3, [r4, #16]
9001200e:	2b00      	cmp	r3, #0
90012010:	f040 80d3 	bne.w	900121ba <xQueueReceive+0x2de>
				taskEXIT_CRITICAL();
90012014:	f7ff f9a0 	bl	90011358 <vPortExitCritical>
				return pdPASS;
90012018:	2001      	movs	r0, #1
9001201a:	e06d      	b.n	900120f8 <xQueueReceive+0x21c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
9001201c:	6c03      	ldr	r3, [r0, #64]	; 0x40
9001201e:	2b00      	cmp	r3, #0
90012020:	f43f af68 	beq.w	90011ef4 <xQueueReceive+0x18>
	__asm volatile
90012024:	f04f 0350 	mov.w	r3, #80	; 0x50
90012028:	f383 8811 	msr	BASEPRI, r3
9001202c:	f3bf 8f6f 	isb	sy
90012030:	f3bf 8f4f 	dsb	sy
90012034:	e7fe      	b.n	90012034 <xQueueReceive+0x158>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90012036:	9b01      	ldr	r3, [sp, #4]
90012038:	2b00      	cmp	r3, #0
9001203a:	f43f af60 	beq.w	90011efe <xQueueReceive+0x22>
9001203e:	f04f 0350 	mov.w	r3, #80	; 0x50
90012042:	f383 8811 	msr	BASEPRI, r3
90012046:	f3bf 8f6f 	isb	sy
9001204a:	f3bf 8f4f 	dsb	sy
9001204e:	e7fe      	b.n	9001204e <xQueueReceive+0x172>
	taskENTER_CRITICAL();
90012050:	f7ff f960 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
90012054:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90012058:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001205a:	2d00      	cmp	r5, #0
9001205c:	dc04      	bgt.n	90012068 <xQueueReceive+0x18c>
9001205e:	e011      	b.n	90012084 <xQueueReceive+0x1a8>
			--cTxLock;
90012060:	1e6b      	subs	r3, r5, #1
90012062:	b2da      	uxtb	r2, r3
90012064:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012066:	b16a      	cbz	r2, 90012084 <xQueueReceive+0x1a8>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012068:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001206a:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
9001206c:	b153      	cbz	r3, 90012084 <xQueueReceive+0x1a8>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
9001206e:	f001 f907 	bl	90013280 <xTaskRemoveFromEventList>
90012072:	2800      	cmp	r0, #0
90012074:	d0f4      	beq.n	90012060 <xQueueReceive+0x184>
						vTaskMissedYield();
90012076:	f001 f9a1 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
9001207a:	1e6b      	subs	r3, r5, #1
9001207c:	b2da      	uxtb	r2, r3
9001207e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012080:	2a00      	cmp	r2, #0
90012082:	d1f1      	bne.n	90012068 <xQueueReceive+0x18c>
		pxQueue->cTxLock = queueUNLOCKED;
90012084:	23ff      	movs	r3, #255	; 0xff
90012086:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001208a:	f7ff f965 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
9001208e:	f7ff f941 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90012092:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90012096:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012098:	2d00      	cmp	r5, #0
9001209a:	dd14      	ble.n	900120c6 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001209c:	f104 0910 	add.w	r9, r4, #16
900120a0:	e003      	b.n	900120aa <xQueueReceive+0x1ce>
				--cRxLock;
900120a2:	1e6b      	subs	r3, r5, #1
900120a4:	b2da      	uxtb	r2, r3
900120a6:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900120a8:	b16a      	cbz	r2, 900120c6 <xQueueReceive+0x1ea>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900120aa:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900120ac:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900120ae:	b153      	cbz	r3, 900120c6 <xQueueReceive+0x1ea>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900120b0:	f001 f8e6 	bl	90013280 <xTaskRemoveFromEventList>
900120b4:	2800      	cmp	r0, #0
900120b6:	d0f4      	beq.n	900120a2 <xQueueReceive+0x1c6>
					vTaskMissedYield();
900120b8:	f001 f980 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
900120bc:	1e6b      	subs	r3, r5, #1
900120be:	b2da      	uxtb	r2, r3
900120c0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900120c2:	2a00      	cmp	r2, #0
900120c4:	d1f1      	bne.n	900120aa <xQueueReceive+0x1ce>
		pxQueue->cRxLock = queueUNLOCKED;
900120c6:	23ff      	movs	r3, #255	; 0xff
900120c8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900120cc:	f7ff f944 	bl	90011358 <vPortExitCritical>
			( void ) xTaskResumeAll();
900120d0:	f000 ffb4 	bl	9001303c <xTaskResumeAll>
	taskENTER_CRITICAL();
900120d4:	f7ff f91e 	bl	90011314 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
900120d8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
900120da:	b153      	cbz	r3, 900120f2 <xQueueReceive+0x216>
	taskEXIT_CRITICAL();
900120dc:	f7ff f93c 	bl	90011358 <vPortExitCritical>
		taskENTER_CRITICAL();
900120e0:	f7ff f918 	bl	90011314 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
900120e4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
900120e6:	2d00      	cmp	r5, #0
900120e8:	d181      	bne.n	90011fee <xQueueReceive+0x112>
				if( xTicksToWait == ( TickType_t ) 0 )
900120ea:	9b01      	ldr	r3, [sp, #4]
900120ec:	2b00      	cmp	r3, #0
900120ee:	f47f af15 	bne.w	90011f1c <xQueueReceive+0x40>
					taskEXIT_CRITICAL();
900120f2:	f7ff f931 	bl	90011358 <vPortExitCritical>
					return errQUEUE_EMPTY;
900120f6:	2000      	movs	r0, #0
}
900120f8:	b005      	add	sp, #20
900120fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	taskEXIT_CRITICAL();
900120fe:	f7ff f92b 	bl	90011358 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
90012102:	9901      	ldr	r1, [sp, #4]
90012104:	4630      	mov	r0, r6
90012106:	f001 f82d 	bl	90013164 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
9001210a:	f7ff f903 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001210e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
90012112:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012114:	2d00      	cmp	r5, #0
90012116:	dc04      	bgt.n	90012122 <xQueueReceive+0x246>
90012118:	e011      	b.n	9001213e <xQueueReceive+0x262>
			--cTxLock;
9001211a:	1e6b      	subs	r3, r5, #1
9001211c:	b2da      	uxtb	r2, r3
9001211e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012120:	b16a      	cbz	r2, 9001213e <xQueueReceive+0x262>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012122:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012124:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012126:	b153      	cbz	r3, 9001213e <xQueueReceive+0x262>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012128:	f001 f8aa 	bl	90013280 <xTaskRemoveFromEventList>
9001212c:	2800      	cmp	r0, #0
9001212e:	d0f4      	beq.n	9001211a <xQueueReceive+0x23e>
						vTaskMissedYield();
90012130:	f001 f944 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
90012134:	1e6b      	subs	r3, r5, #1
90012136:	b2da      	uxtb	r2, r3
90012138:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001213a:	2a00      	cmp	r2, #0
9001213c:	d1f1      	bne.n	90012122 <xQueueReceive+0x246>
		pxQueue->cTxLock = queueUNLOCKED;
9001213e:	23ff      	movs	r3, #255	; 0xff
90012140:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90012144:	f7ff f908 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90012148:	f7ff f8e4 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001214c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90012150:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012152:	2d00      	cmp	r5, #0
90012154:	dd14      	ble.n	90012180 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012156:	f104 0910 	add.w	r9, r4, #16
9001215a:	e003      	b.n	90012164 <xQueueReceive+0x288>
				--cRxLock;
9001215c:	1e6b      	subs	r3, r5, #1
9001215e:	b2da      	uxtb	r2, r3
90012160:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012162:	b16a      	cbz	r2, 90012180 <xQueueReceive+0x2a4>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90012164:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012166:	4648      	mov	r0, r9
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90012168:	b153      	cbz	r3, 90012180 <xQueueReceive+0x2a4>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001216a:	f001 f889 	bl	90013280 <xTaskRemoveFromEventList>
9001216e:	2800      	cmp	r0, #0
90012170:	d0f4      	beq.n	9001215c <xQueueReceive+0x280>
					vTaskMissedYield();
90012172:	f001 f923 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
90012176:	1e6b      	subs	r3, r5, #1
90012178:	b2da      	uxtb	r2, r3
9001217a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001217c:	2a00      	cmp	r2, #0
9001217e:	d1f1      	bne.n	90012164 <xQueueReceive+0x288>
		pxQueue->cRxLock = queueUNLOCKED;
90012180:	23ff      	movs	r3, #255	; 0xff
90012182:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90012186:	f7ff f8e7 	bl	90011358 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9001218a:	f000 ff57 	bl	9001303c <xTaskResumeAll>
9001218e:	2800      	cmp	r0, #0
90012190:	d1a6      	bne.n	900120e0 <xQueueReceive+0x204>
					portYIELD_WITHIN_API();
90012192:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90012196:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001219a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
9001219e:	f3bf 8f4f 	dsb	sy
900121a2:	f3bf 8f6f 	isb	sy
		taskENTER_CRITICAL();
900121a6:	e79b      	b.n	900120e0 <xQueueReceive+0x204>
900121a8:	f04f 0350 	mov.w	r3, #80	; 0x50
900121ac:	f383 8811 	msr	BASEPRI, r3
900121b0:	f3bf 8f6f 	isb	sy
900121b4:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
900121b8:	e7fe      	b.n	900121b8 <xQueueReceive+0x2dc>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900121ba:	f104 0010 	add.w	r0, r4, #16
900121be:	f001 f85f 	bl	90013280 <xTaskRemoveFromEventList>
900121c2:	2800      	cmp	r0, #0
900121c4:	f43f af26 	beq.w	90012014 <xQueueReceive+0x138>
						queueYIELD_IF_USING_PREEMPTION();
900121c8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900121cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900121d0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900121d4:	f3bf 8f4f 	dsb	sy
900121d8:	f3bf 8f6f 	isb	sy
900121dc:	e71a      	b.n	90012014 <xQueueReceive+0x138>
900121de:	bf00      	nop

900121e0 <xQueueSemaphoreTake>:
{
900121e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900121e4:	b084      	sub	sp, #16
900121e6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
900121e8:	2800      	cmp	r0, #0
900121ea:	d05c      	beq.n	900122a6 <xQueueSemaphoreTake+0xc6>
	configASSERT( pxQueue->uxItemSize == 0 );
900121ec:	6c07      	ldr	r7, [r0, #64]	; 0x40
900121ee:	4604      	mov	r4, r0
900121f0:	b147      	cbz	r7, 90012204 <xQueueSemaphoreTake+0x24>
900121f2:	f04f 0350 	mov.w	r3, #80	; 0x50
900121f6:	f383 8811 	msr	BASEPRI, r3
900121fa:	f3bf 8f6f 	isb	sy
900121fe:	f3bf 8f4f 	dsb	sy
90012202:	e7fe      	b.n	90012202 <xQueueSemaphoreTake+0x22>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
90012204:	f001 f8e6 	bl	900133d4 <xTaskGetSchedulerState>
90012208:	4605      	mov	r5, r0
9001220a:	2800      	cmp	r0, #0
9001220c:	d054      	beq.n	900122b8 <xQueueSemaphoreTake+0xd8>
9001220e:	463d      	mov	r5, r7
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012210:	f104 0624 	add.w	r6, r4, #36	; 0x24
		taskENTER_CRITICAL();
90012214:	f7ff f87e 	bl	90011314 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
90012218:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
9001221a:	2b00      	cmp	r3, #0
9001221c:	f040 8149 	bne.w	900124b2 <xQueueSemaphoreTake+0x2d2>
				if( xTicksToWait == ( TickType_t ) 0 )
90012220:	9b01      	ldr	r3, [sp, #4]
90012222:	2b00      	cmp	r3, #0
90012224:	f000 813a 	beq.w	9001249c <xQueueSemaphoreTake+0x2bc>
				else if( xEntryTimeSet == pdFALSE )
90012228:	2d00      	cmp	r5, #0
9001222a:	f000 809d 	beq.w	90012368 <xQueueSemaphoreTake+0x188>
		taskEXIT_CRITICAL();
9001222e:	f7ff f893 	bl	90011358 <vPortExitCritical>
		vTaskSuspendAll();
90012232:	f000 fefb 	bl	9001302c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
90012236:	f7ff f86d 	bl	90011314 <vPortEnterCritical>
9001223a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001223e:	2bff      	cmp	r3, #255	; 0xff
90012240:	d102      	bne.n	90012248 <xQueueSemaphoreTake+0x68>
90012242:	2300      	movs	r3, #0
90012244:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
90012248:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9001224c:	2bff      	cmp	r3, #255	; 0xff
9001224e:	d102      	bne.n	90012256 <xQueueSemaphoreTake+0x76>
90012250:	2300      	movs	r3, #0
90012252:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90012256:	f7ff f87f 	bl	90011358 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
9001225a:	a901      	add	r1, sp, #4
9001225c:	a802      	add	r0, sp, #8
9001225e:	f001 f865 	bl	9001332c <xTaskCheckForTimeOut>
90012262:	2800      	cmp	r0, #0
90012264:	d135      	bne.n	900122d2 <xQueueSemaphoreTake+0xf2>
	taskENTER_CRITICAL();
90012266:	f7ff f855 	bl	90011314 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9001226a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9001226c:	2b00      	cmp	r3, #0
9001226e:	f000 80a4 	beq.w	900123ba <xQueueSemaphoreTake+0x1da>
	taskEXIT_CRITICAL();
90012272:	f7ff f871 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90012276:	f7ff f84d 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001227a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
9001227e:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012280:	2d00      	cmp	r5, #0
90012282:	dc05      	bgt.n	90012290 <xQueueSemaphoreTake+0xb0>
90012284:	e074      	b.n	90012370 <xQueueSemaphoreTake+0x190>
			--cTxLock;
90012286:	1e6b      	subs	r3, r5, #1
90012288:	b2da      	uxtb	r2, r3
9001228a:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
9001228c:	2a00      	cmp	r2, #0
9001228e:	d06f      	beq.n	90012370 <xQueueSemaphoreTake+0x190>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012290:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012292:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012294:	2b00      	cmp	r3, #0
90012296:	d06b      	beq.n	90012370 <xQueueSemaphoreTake+0x190>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012298:	f000 fff2 	bl	90013280 <xTaskRemoveFromEventList>
9001229c:	2800      	cmp	r0, #0
9001229e:	d0f2      	beq.n	90012286 <xQueueSemaphoreTake+0xa6>
						vTaskMissedYield();
900122a0:	f001 f88c 	bl	900133bc <vTaskMissedYield>
900122a4:	e7ef      	b.n	90012286 <xQueueSemaphoreTake+0xa6>
900122a6:	f04f 0350 	mov.w	r3, #80	; 0x50
900122aa:	f383 8811 	msr	BASEPRI, r3
900122ae:	f3bf 8f6f 	isb	sy
900122b2:	f3bf 8f4f 	dsb	sy
	configASSERT( ( pxQueue ) );
900122b6:	e7fe      	b.n	900122b6 <xQueueSemaphoreTake+0xd6>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
900122b8:	9b01      	ldr	r3, [sp, #4]
900122ba:	2b00      	cmp	r3, #0
900122bc:	f000 80d4 	beq.w	90012468 <xQueueSemaphoreTake+0x288>
900122c0:	f04f 0350 	mov.w	r3, #80	; 0x50
900122c4:	f383 8811 	msr	BASEPRI, r3
900122c8:	f3bf 8f6f 	isb	sy
900122cc:	f3bf 8f4f 	dsb	sy
900122d0:	e7fe      	b.n	900122d0 <xQueueSemaphoreTake+0xf0>
	taskENTER_CRITICAL();
900122d2:	f7ff f81f 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900122d6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900122da:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900122dc:	2d00      	cmp	r5, #0
900122de:	dc04      	bgt.n	900122ea <xQueueSemaphoreTake+0x10a>
900122e0:	e011      	b.n	90012306 <xQueueSemaphoreTake+0x126>
			--cTxLock;
900122e2:	1e6b      	subs	r3, r5, #1
900122e4:	b2da      	uxtb	r2, r3
900122e6:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900122e8:	b16a      	cbz	r2, 90012306 <xQueueSemaphoreTake+0x126>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900122ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900122ec:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900122ee:	b153      	cbz	r3, 90012306 <xQueueSemaphoreTake+0x126>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900122f0:	f000 ffc6 	bl	90013280 <xTaskRemoveFromEventList>
900122f4:	2800      	cmp	r0, #0
900122f6:	d0f4      	beq.n	900122e2 <xQueueSemaphoreTake+0x102>
						vTaskMissedYield();
900122f8:	f001 f860 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
900122fc:	1e6b      	subs	r3, r5, #1
900122fe:	b2da      	uxtb	r2, r3
90012300:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012302:	2a00      	cmp	r2, #0
90012304:	d1f1      	bne.n	900122ea <xQueueSemaphoreTake+0x10a>
		pxQueue->cTxLock = queueUNLOCKED;
90012306:	23ff      	movs	r3, #255	; 0xff
90012308:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
9001230c:	f7ff f824 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90012310:	f7ff f800 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90012314:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90012318:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001231a:	2d00      	cmp	r5, #0
9001231c:	dd14      	ble.n	90012348 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001231e:	f104 0810 	add.w	r8, r4, #16
90012322:	e003      	b.n	9001232c <xQueueSemaphoreTake+0x14c>
				--cRxLock;
90012324:	1e6b      	subs	r3, r5, #1
90012326:	b2da      	uxtb	r2, r3
90012328:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001232a:	b16a      	cbz	r2, 90012348 <xQueueSemaphoreTake+0x168>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001232c:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001232e:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90012330:	b153      	cbz	r3, 90012348 <xQueueSemaphoreTake+0x168>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012332:	f000 ffa5 	bl	90013280 <xTaskRemoveFromEventList>
90012336:	2800      	cmp	r0, #0
90012338:	d0f4      	beq.n	90012324 <xQueueSemaphoreTake+0x144>
					vTaskMissedYield();
9001233a:	f001 f83f 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
9001233e:	1e6b      	subs	r3, r5, #1
90012340:	b2da      	uxtb	r2, r3
90012342:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012344:	2a00      	cmp	r2, #0
90012346:	d1f1      	bne.n	9001232c <xQueueSemaphoreTake+0x14c>
		pxQueue->cRxLock = queueUNLOCKED;
90012348:	23ff      	movs	r3, #255	; 0xff
9001234a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
9001234e:	f7ff f803 	bl	90011358 <vPortExitCritical>
			( void ) xTaskResumeAll();
90012352:	f000 fe73 	bl	9001303c <xTaskResumeAll>
	taskENTER_CRITICAL();
90012356:	f7fe ffdd 	bl	90011314 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
9001235a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9001235c:	2b00      	cmp	r3, #0
9001235e:	d07c      	beq.n	9001245a <xQueueSemaphoreTake+0x27a>
	taskEXIT_CRITICAL();
90012360:	f7fe fffa 	bl	90011358 <vPortExitCritical>
	return xReturn;
90012364:	2501      	movs	r5, #1
90012366:	e755      	b.n	90012214 <xQueueSemaphoreTake+0x34>
					vTaskInternalSetTimeOutState( &xTimeOut );
90012368:	a802      	add	r0, sp, #8
9001236a:	f000 ffd3 	bl	90013314 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
9001236e:	e75e      	b.n	9001222e <xQueueSemaphoreTake+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
90012370:	23ff      	movs	r3, #255	; 0xff
90012372:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
90012376:	f7fe ffef 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
9001237a:	f7fe ffcb 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
9001237e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
90012382:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012384:	2d00      	cmp	r5, #0
90012386:	dd10      	ble.n	900123aa <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012388:	f104 0810 	add.w	r8, r4, #16
9001238c:	e003      	b.n	90012396 <xQueueSemaphoreTake+0x1b6>
				--cRxLock;
9001238e:	1e6b      	subs	r3, r5, #1
90012390:	b2da      	uxtb	r2, r3
90012392:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
90012394:	b14a      	cbz	r2, 900123aa <xQueueSemaphoreTake+0x1ca>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90012396:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012398:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001239a:	b133      	cbz	r3, 900123aa <xQueueSemaphoreTake+0x1ca>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
9001239c:	f000 ff70 	bl	90013280 <xTaskRemoveFromEventList>
900123a0:	2800      	cmp	r0, #0
900123a2:	d0f4      	beq.n	9001238e <xQueueSemaphoreTake+0x1ae>
					vTaskMissedYield();
900123a4:	f001 f80a 	bl	900133bc <vTaskMissedYield>
900123a8:	e7f1      	b.n	9001238e <xQueueSemaphoreTake+0x1ae>
		pxQueue->cRxLock = queueUNLOCKED;
900123aa:	23ff      	movs	r3, #255	; 0xff
900123ac:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
900123b0:	f7fe ffd2 	bl	90011358 <vPortExitCritical>
				( void ) xTaskResumeAll();
900123b4:	f000 fe42 	bl	9001303c <xTaskResumeAll>
900123b8:	e7d4      	b.n	90012364 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
900123ba:	f7fe ffcd 	bl	90011358 <vPortExitCritical>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900123be:	6823      	ldr	r3, [r4, #0]
900123c0:	2b00      	cmp	r3, #0
900123c2:	d062      	beq.n	9001248a <xQueueSemaphoreTake+0x2aa>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
900123c4:	9901      	ldr	r1, [sp, #4]
900123c6:	4630      	mov	r0, r6
900123c8:	f000 fecc 	bl	90013164 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
900123cc:	f7fe ffa2 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
900123d0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
900123d4:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900123d6:	2d00      	cmp	r5, #0
900123d8:	dc04      	bgt.n	900123e4 <xQueueSemaphoreTake+0x204>
900123da:	e00d      	b.n	900123f8 <xQueueSemaphoreTake+0x218>
			--cTxLock;
900123dc:	1e6b      	subs	r3, r5, #1
900123de:	b2da      	uxtb	r2, r3
900123e0:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900123e2:	b14a      	cbz	r2, 900123f8 <xQueueSemaphoreTake+0x218>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900123e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900123e6:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
900123e8:	b133      	cbz	r3, 900123f8 <xQueueSemaphoreTake+0x218>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
900123ea:	f000 ff49 	bl	90013280 <xTaskRemoveFromEventList>
900123ee:	2800      	cmp	r0, #0
900123f0:	d0f4      	beq.n	900123dc <xQueueSemaphoreTake+0x1fc>
						vTaskMissedYield();
900123f2:	f000 ffe3 	bl	900133bc <vTaskMissedYield>
900123f6:	e7f1      	b.n	900123dc <xQueueSemaphoreTake+0x1fc>
		pxQueue->cTxLock = queueUNLOCKED;
900123f8:	23ff      	movs	r3, #255	; 0xff
900123fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
900123fe:	f7fe ffab 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
90012402:	f7fe ff87 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
90012406:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
9001240a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001240c:	2d00      	cmp	r5, #0
9001240e:	dd10      	ble.n	90012432 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012410:	f104 0810 	add.w	r8, r4, #16
90012414:	e003      	b.n	9001241e <xQueueSemaphoreTake+0x23e>
				--cRxLock;
90012416:	1e6b      	subs	r3, r5, #1
90012418:	b2da      	uxtb	r2, r3
9001241a:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
9001241c:	b14a      	cbz	r2, 90012432 <xQueueSemaphoreTake+0x252>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
9001241e:	6923      	ldr	r3, [r4, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012420:	4640      	mov	r0, r8
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
90012422:	b133      	cbz	r3, 90012432 <xQueueSemaphoreTake+0x252>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
90012424:	f000 ff2c 	bl	90013280 <xTaskRemoveFromEventList>
90012428:	2800      	cmp	r0, #0
9001242a:	d0f4      	beq.n	90012416 <xQueueSemaphoreTake+0x236>
					vTaskMissedYield();
9001242c:	f000 ffc6 	bl	900133bc <vTaskMissedYield>
90012430:	e7f1      	b.n	90012416 <xQueueSemaphoreTake+0x236>
		pxQueue->cRxLock = queueUNLOCKED;
90012432:	23ff      	movs	r3, #255	; 0xff
90012434:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
90012438:	f7fe ff8e 	bl	90011358 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
9001243c:	f000 fdfe 	bl	9001303c <xTaskResumeAll>
90012440:	2800      	cmp	r0, #0
90012442:	d18f      	bne.n	90012364 <xQueueSemaphoreTake+0x184>
					portYIELD_WITHIN_API();
90012444:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90012448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001244c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90012450:	f3bf 8f4f 	dsb	sy
90012454:	f3bf 8f6f 	isb	sy
90012458:	e784      	b.n	90012364 <xQueueSemaphoreTake+0x184>
	taskEXIT_CRITICAL();
9001245a:	f7fe ff7d 	bl	90011358 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
9001245e:	b92f      	cbnz	r7, 9001246c <xQueueSemaphoreTake+0x28c>
}
90012460:	4638      	mov	r0, r7
90012462:	b004      	add	sp, #16
90012464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90012468:	4607      	mov	r7, r0
9001246a:	e6d1      	b.n	90012210 <xQueueSemaphoreTake+0x30>
						taskENTER_CRITICAL();
9001246c:	f7fe ff52 	bl	90011314 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
90012470:	6a61      	ldr	r1, [r4, #36]	; 0x24
90012472:	b119      	cbz	r1, 9001247c <xQueueSemaphoreTake+0x29c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
90012474:	6b23      	ldr	r3, [r4, #48]	; 0x30
90012476:	6819      	ldr	r1, [r3, #0]
90012478:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
9001247c:	68a0      	ldr	r0, [r4, #8]
				return errQUEUE_EMPTY;
9001247e:	2700      	movs	r7, #0
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
90012480:	f001 f844 	bl	9001350c <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
90012484:	f7fe ff68 	bl	90011358 <vPortExitCritical>
90012488:	e7ea      	b.n	90012460 <xQueueSemaphoreTake+0x280>
						taskENTER_CRITICAL();
9001248a:	f7fe ff43 	bl	90011314 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
9001248e:	68a0      	ldr	r0, [r4, #8]
90012490:	f000 ffb0 	bl	900133f4 <xTaskPriorityInherit>
90012494:	4607      	mov	r7, r0
						taskEXIT_CRITICAL();
90012496:	f7fe ff5f 	bl	90011358 <vPortExitCritical>
9001249a:	e793      	b.n	900123c4 <xQueueSemaphoreTake+0x1e4>
						configASSERT( xInheritanceOccurred == pdFALSE );
9001249c:	2f00      	cmp	r7, #0
9001249e:	d0f1      	beq.n	90012484 <xQueueSemaphoreTake+0x2a4>
900124a0:	f04f 0350 	mov.w	r3, #80	; 0x50
900124a4:	f383 8811 	msr	BASEPRI, r3
900124a8:	f3bf 8f6f 	isb	sy
900124ac:	f3bf 8f4f 	dsb	sy
900124b0:	e7fe      	b.n	900124b0 <xQueueSemaphoreTake+0x2d0>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
900124b2:	3b01      	subs	r3, #1
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900124b4:	6822      	ldr	r2, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
900124b6:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
900124b8:	b12a      	cbz	r2, 900124c6 <xQueueSemaphoreTake+0x2e6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900124ba:	6923      	ldr	r3, [r4, #16]
900124bc:	b93b      	cbnz	r3, 900124ce <xQueueSemaphoreTake+0x2ee>
				return pdPASS;
900124be:	2701      	movs	r7, #1
				taskEXIT_CRITICAL();
900124c0:	f7fe ff4a 	bl	90011358 <vPortExitCritical>
				return pdPASS;
900124c4:	e7cc      	b.n	90012460 <xQueueSemaphoreTake+0x280>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
900124c6:	f001 f875 	bl	900135b4 <pvTaskIncrementMutexHeldCount>
900124ca:	60a0      	str	r0, [r4, #8]
900124cc:	e7f5      	b.n	900124ba <xQueueSemaphoreTake+0x2da>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900124ce:	f104 0010 	add.w	r0, r4, #16
900124d2:	f000 fed5 	bl	90013280 <xTaskRemoveFromEventList>
900124d6:	2800      	cmp	r0, #0
900124d8:	d0f1      	beq.n	900124be <xQueueSemaphoreTake+0x2de>
						queueYIELD_IF_USING_PREEMPTION();
900124da:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
900124de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
900124e2:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
900124e6:	f3bf 8f4f 	dsb	sy
900124ea:	f3bf 8f6f 	isb	sy
900124ee:	e7e6      	b.n	900124be <xQueueSemaphoreTake+0x2de>

900124f0 <xQueueTakeMutexRecursive>:
		configASSERT( pxMutex );
900124f0:	b1a8      	cbz	r0, 9001251e <xQueueTakeMutexRecursive+0x2e>
	{
900124f2:	b570      	push	{r4, r5, r6, lr}
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
900124f4:	6886      	ldr	r6, [r0, #8]
900124f6:	4604      	mov	r4, r0
900124f8:	460d      	mov	r5, r1
900124fa:	f000 ff65 	bl	900133c8 <xTaskGetCurrentTaskHandle>
900124fe:	4286      	cmp	r6, r0
90012500:	d008      	beq.n	90012514 <xQueueTakeMutexRecursive+0x24>
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
90012502:	4629      	mov	r1, r5
90012504:	4620      	mov	r0, r4
90012506:	f7ff fe6b 	bl	900121e0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
9001250a:	b110      	cbz	r0, 90012512 <xQueueTakeMutexRecursive+0x22>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
9001250c:	68e3      	ldr	r3, [r4, #12]
9001250e:	3301      	adds	r3, #1
90012510:	60e3      	str	r3, [r4, #12]
	}
90012512:	bd70      	pop	{r4, r5, r6, pc}
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90012514:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
90012516:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
90012518:	4403      	add	r3, r0
9001251a:	60e3      	str	r3, [r4, #12]
	}
9001251c:	bd70      	pop	{r4, r5, r6, pc}
9001251e:	f04f 0350 	mov.w	r3, #80	; 0x50
90012522:	f383 8811 	msr	BASEPRI, r3
90012526:	f3bf 8f6f 	isb	sy
9001252a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxMutex );
9001252e:	e7fe      	b.n	9001252e <xQueueTakeMutexRecursive+0x3e>

90012530 <xQueueReceiveFromISR>:
{
90012530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
90012534:	b310      	cbz	r0, 9001257c <xQueueReceiveFromISR+0x4c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90012536:	460e      	mov	r6, r1
90012538:	4604      	mov	r4, r0
9001253a:	4617      	mov	r7, r2
9001253c:	b191      	cbz	r1, 90012564 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
9001253e:	f7ff f81b 	bl	90011578 <vPortValidateInterruptPriority>
	__asm volatile
90012542:	f3ef 8911 	mrs	r9, BASEPRI
90012546:	f04f 0350 	mov.w	r3, #80	; 0x50
9001254a:	f383 8811 	msr	BASEPRI, r3
9001254e:	f3bf 8f6f 	isb	sy
90012552:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
90012556:	6ba5      	ldr	r5, [r4, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
90012558:	b9cd      	cbnz	r5, 9001258e <xQueueReceiveFromISR+0x5e>
			xReturn = pdFAIL;
9001255a:	4628      	mov	r0, r5
	__asm volatile
9001255c:	f389 8811 	msr	BASEPRI, r9
}
90012560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
90012564:	6c03      	ldr	r3, [r0, #64]	; 0x40
90012566:	2b00      	cmp	r3, #0
90012568:	d0e9      	beq.n	9001253e <xQueueReceiveFromISR+0xe>
	__asm volatile
9001256a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001256e:	f383 8811 	msr	BASEPRI, r3
90012572:	f3bf 8f6f 	isb	sy
90012576:	f3bf 8f4f 	dsb	sy
9001257a:	e7fe      	b.n	9001257a <xQueueReceiveFromISR+0x4a>
9001257c:	f04f 0350 	mov.w	r3, #80	; 0x50
90012580:	f383 8811 	msr	BASEPRI, r3
90012584:	f3bf 8f6f 	isb	sy
90012588:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9001258c:	e7fe      	b.n	9001258c <xQueueReceiveFromISR+0x5c>
			const int8_t cRxLock = pxQueue->cRxLock;
9001258e:	f894 8044 	ldrb.w	r8, [r4, #68]	; 0x44
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90012592:	6c22      	ldr	r2, [r4, #64]	; 0x40
			const int8_t cRxLock = pxQueue->cRxLock;
90012594:	fa4f f888 	sxtb.w	r8, r8
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
90012598:	b142      	cbz	r2, 900125ac <xQueueReceiveFromISR+0x7c>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9001259a:	68e1      	ldr	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
9001259c:	68a3      	ldr	r3, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
9001259e:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900125a0:	4299      	cmp	r1, r3
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
900125a2:	60e1      	str	r1, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
900125a4:	d215      	bcs.n	900125d2 <xQueueReceiveFromISR+0xa2>
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
900125a6:	4630      	mov	r0, r6
900125a8:	f014 fdc2 	bl	90027130 <memcpy>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900125ac:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
900125ae:	f1b8 3fff 	cmp.w	r8, #4294967295
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
900125b2:	63a5      	str	r5, [r4, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
900125b4:	d009      	beq.n	900125ca <xQueueReceiveFromISR+0x9a>
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
900125b6:	f108 0301 	add.w	r3, r8, #1
			xReturn = pdPASS;
900125ba:	2001      	movs	r0, #1
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
900125bc:	b25b      	sxtb	r3, r3
900125be:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	__asm volatile
900125c2:	f389 8811 	msr	BASEPRI, r9
}
900125c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900125ca:	6923      	ldr	r3, [r4, #16]
900125cc:	b923      	cbnz	r3, 900125d8 <xQueueReceiveFromISR+0xa8>
			xReturn = pdPASS;
900125ce:	2001      	movs	r0, #1
900125d0:	e7c4      	b.n	9001255c <xQueueReceiveFromISR+0x2c>
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
900125d2:	6821      	ldr	r1, [r4, #0]
900125d4:	60e1      	str	r1, [r4, #12]
900125d6:	e7e6      	b.n	900125a6 <xQueueReceiveFromISR+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900125d8:	f104 0010 	add.w	r0, r4, #16
900125dc:	f000 fe50 	bl	90013280 <xTaskRemoveFromEventList>
						if( pxHigherPriorityTaskWoken != NULL )
900125e0:	2f00      	cmp	r7, #0
900125e2:	d0f4      	beq.n	900125ce <xQueueReceiveFromISR+0x9e>
900125e4:	2800      	cmp	r0, #0
900125e6:	d0f2      	beq.n	900125ce <xQueueReceiveFromISR+0x9e>
							*pxHigherPriorityTaskWoken = pdTRUE;
900125e8:	2301      	movs	r3, #1
			xReturn = pdPASS;
900125ea:	4618      	mov	r0, r3
							*pxHigherPriorityTaskWoken = pdTRUE;
900125ec:	603b      	str	r3, [r7, #0]
900125ee:	e7b5      	b.n	9001255c <xQueueReceiveFromISR+0x2c>

900125f0 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
900125f0:	b158      	cbz	r0, 9001260a <uxQueueMessagesWaiting+0x1a>
{
900125f2:	b510      	push	{r4, lr}
900125f4:	4604      	mov	r4, r0
900125f6:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
900125f8:	f7fe fe8c 	bl	90011314 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
900125fc:	6ba0      	ldr	r0, [r4, #56]	; 0x38
900125fe:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90012600:	f7fe feaa 	bl	90011358 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
90012604:	9801      	ldr	r0, [sp, #4]
90012606:	b002      	add	sp, #8
90012608:	bd10      	pop	{r4, pc}
	__asm volatile
9001260a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001260e:	f383 8811 	msr	BASEPRI, r3
90012612:	f3bf 8f6f 	isb	sy
90012616:	f3bf 8f4f 	dsb	sy
	configASSERT( xQueue );
9001261a:	e7fe      	b.n	9001261a <uxQueueMessagesWaiting+0x2a>

9001261c <uxQueueSpacesAvailable>:
	configASSERT( pxQueue );
9001261c:	b168      	cbz	r0, 9001263a <uxQueueSpacesAvailable+0x1e>
{
9001261e:	b510      	push	{r4, lr}
90012620:	4604      	mov	r4, r0
90012622:	b082      	sub	sp, #8
	taskENTER_CRITICAL();
90012624:	f7fe fe76 	bl	90011314 <vPortEnterCritical>
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
90012628:	6ba3      	ldr	r3, [r4, #56]	; 0x38
9001262a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
9001262c:	1ac0      	subs	r0, r0, r3
9001262e:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90012630:	f7fe fe92 	bl	90011358 <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
90012634:	9801      	ldr	r0, [sp, #4]
90012636:	b002      	add	sp, #8
90012638:	bd10      	pop	{r4, pc}
9001263a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001263e:	f383 8811 	msr	BASEPRI, r3
90012642:	f3bf 8f6f 	isb	sy
90012646:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
9001264a:	e7fe      	b.n	9001264a <uxQueueSpacesAvailable+0x2e>

9001264c <uxQueueMessagesWaitingFromISR>:
	configASSERT( pxQueue );
9001264c:	b108      	cbz	r0, 90012652 <uxQueueMessagesWaitingFromISR+0x6>
	uxReturn = pxQueue->uxMessagesWaiting;
9001264e:	6b80      	ldr	r0, [r0, #56]	; 0x38
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
90012650:	4770      	bx	lr
90012652:	f04f 0350 	mov.w	r3, #80	; 0x50
90012656:	f383 8811 	msr	BASEPRI, r3
9001265a:	f3bf 8f6f 	isb	sy
9001265e:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
90012662:	e7fe      	b.n	90012662 <uxQueueMessagesWaitingFromISR+0x16>
90012664:	0000      	movs	r0, r0
	...

90012668 <vQueueDelete>:
	configASSERT( pxQueue );
90012668:	b1e0      	cbz	r0, 900126a4 <vQueueDelete+0x3c>

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
9001266a:	4b21      	ldr	r3, [pc, #132]	; (900126f0 <vQueueDelete+0x88>)
9001266c:	685a      	ldr	r2, [r3, #4]
9001266e:	4290      	cmp	r0, r2
90012670:	d02b      	beq.n	900126ca <vQueueDelete+0x62>
90012672:	68da      	ldr	r2, [r3, #12]
90012674:	4290      	cmp	r0, r2
90012676:	d02a      	beq.n	900126ce <vQueueDelete+0x66>
90012678:	695a      	ldr	r2, [r3, #20]
9001267a:	4290      	cmp	r0, r2
9001267c:	d029      	beq.n	900126d2 <vQueueDelete+0x6a>
9001267e:	69da      	ldr	r2, [r3, #28]
90012680:	4290      	cmp	r0, r2
90012682:	d028      	beq.n	900126d6 <vQueueDelete+0x6e>
90012684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90012686:	4290      	cmp	r0, r2
90012688:	d027      	beq.n	900126da <vQueueDelete+0x72>
9001268a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
9001268c:	4290      	cmp	r0, r2
9001268e:	d014      	beq.n	900126ba <vQueueDelete+0x52>
90012690:	6b5a      	ldr	r2, [r3, #52]	; 0x34
90012692:	4290      	cmp	r0, r2
90012694:	d023      	beq.n	900126de <vQueueDelete+0x76>
90012696:	6bda      	ldr	r2, [r3, #60]	; 0x3c
90012698:	4290      	cmp	r0, r2
9001269a:	d022      	beq.n	900126e2 <vQueueDelete+0x7a>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
9001269c:	f890 3046 	ldrb.w	r3, [r0, #70]	; 0x46
900126a0:	b14b      	cbz	r3, 900126b6 <vQueueDelete+0x4e>
}
900126a2:	4770      	bx	lr
900126a4:	f04f 0350 	mov.w	r3, #80	; 0x50
900126a8:	f383 8811 	msr	BASEPRI, r3
900126ac:	f3bf 8f6f 	isb	sy
900126b0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxQueue );
900126b4:	e7fe      	b.n	900126b4 <vQueueDelete+0x4c>
			vPortFree( pxQueue );
900126b6:	f7fe bd15 	b.w	900110e4 <vPortFree>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900126ba:	2205      	movs	r2, #5
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
900126bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
900126c0:	ed9f 7b09 	vldr	d7, [pc, #36]	; 900126e8 <vQueueDelete+0x80>
900126c4:	ed83 7b00 	vstr	d7, [r3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
				break;
900126c8:	e7e8      	b.n	9001269c <vQueueDelete+0x34>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
900126ca:	2200      	movs	r2, #0
900126cc:	e7f6      	b.n	900126bc <vQueueDelete+0x54>
900126ce:	2201      	movs	r2, #1
900126d0:	e7f4      	b.n	900126bc <vQueueDelete+0x54>
900126d2:	2202      	movs	r2, #2
900126d4:	e7f2      	b.n	900126bc <vQueueDelete+0x54>
900126d6:	2203      	movs	r2, #3
900126d8:	e7f0      	b.n	900126bc <vQueueDelete+0x54>
900126da:	2204      	movs	r2, #4
900126dc:	e7ee      	b.n	900126bc <vQueueDelete+0x54>
900126de:	2206      	movs	r2, #6
900126e0:	e7ec      	b.n	900126bc <vQueueDelete+0x54>
900126e2:	2207      	movs	r2, #7
900126e4:	e7ea      	b.n	900126bc <vQueueDelete+0x54>
900126e6:	bf00      	nop
	...
900126f0:	240258d8 	.word	0x240258d8

900126f4 <vQueueAddToRegistry>:
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
900126f4:	4b12      	ldr	r3, [pc, #72]	; (90012740 <vQueueAddToRegistry+0x4c>)
900126f6:	681a      	ldr	r2, [r3, #0]
900126f8:	b17a      	cbz	r2, 9001271a <vQueueAddToRegistry+0x26>
900126fa:	689a      	ldr	r2, [r3, #8]
900126fc:	b162      	cbz	r2, 90012718 <vQueueAddToRegistry+0x24>
900126fe:	691a      	ldr	r2, [r3, #16]
90012700:	b192      	cbz	r2, 90012728 <vQueueAddToRegistry+0x34>
90012702:	699a      	ldr	r2, [r3, #24]
90012704:	b192      	cbz	r2, 9001272c <vQueueAddToRegistry+0x38>
90012706:	6a1a      	ldr	r2, [r3, #32]
90012708:	b192      	cbz	r2, 90012730 <vQueueAddToRegistry+0x3c>
9001270a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
9001270c:	b192      	cbz	r2, 90012734 <vQueueAddToRegistry+0x40>
9001270e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
90012710:	b192      	cbz	r2, 90012738 <vQueueAddToRegistry+0x44>
90012712:	6b9a      	ldr	r2, [r3, #56]	; 0x38
90012714:	b192      	cbz	r2, 9001273c <vQueueAddToRegistry+0x48>
	}
90012716:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90012718:	2201      	movs	r2, #1
				xQueueRegistry[ ux ].xHandle = xQueue;
9001271a:	eb03 0cc2 	add.w	ip, r3, r2, lsl #3
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
9001271e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
90012722:	f8cc 0004 	str.w	r0, [ip, #4]
	}
90012726:	4770      	bx	lr
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
90012728:	2202      	movs	r2, #2
9001272a:	e7f6      	b.n	9001271a <vQueueAddToRegistry+0x26>
9001272c:	2203      	movs	r2, #3
9001272e:	e7f4      	b.n	9001271a <vQueueAddToRegistry+0x26>
90012730:	2204      	movs	r2, #4
90012732:	e7f2      	b.n	9001271a <vQueueAddToRegistry+0x26>
90012734:	2205      	movs	r2, #5
90012736:	e7f0      	b.n	9001271a <vQueueAddToRegistry+0x26>
90012738:	2206      	movs	r2, #6
9001273a:	e7ee      	b.n	9001271a <vQueueAddToRegistry+0x26>
9001273c:	2207      	movs	r2, #7
9001273e:	e7ec      	b.n	9001271a <vQueueAddToRegistry+0x26>
90012740:	240258d8 	.word	0x240258d8

90012744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
90012744:	b570      	push	{r4, r5, r6, lr}
90012746:	4605      	mov	r5, r0
90012748:	460e      	mov	r6, r1
9001274a:	4614      	mov	r4, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
9001274c:	f7fe fde2 	bl	90011314 <vPortEnterCritical>
90012750:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
90012754:	2bff      	cmp	r3, #255	; 0xff
90012756:	d102      	bne.n	9001275e <vQueueWaitForMessageRestricted+0x1a>
90012758:	2300      	movs	r3, #0
9001275a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
9001275e:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
90012762:	2bff      	cmp	r3, #255	; 0xff
90012764:	d102      	bne.n	9001276c <vQueueWaitForMessageRestricted+0x28>
90012766:	2300      	movs	r3, #0
90012768:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
9001276c:	f7fe fdf4 	bl	90011358 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
90012770:	6bab      	ldr	r3, [r5, #56]	; 0x38
90012772:	2b00      	cmp	r3, #0
90012774:	d043      	beq.n	900127fe <vQueueWaitForMessageRestricted+0xba>
	taskENTER_CRITICAL();
90012776:	f7fe fdcd 	bl	90011314 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
9001277a:	f895 3045 	ldrb.w	r3, [r5, #69]	; 0x45
9001277e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012780:	2c00      	cmp	r4, #0
90012782:	dd14      	ble.n	900127ae <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012784:	f105 0624 	add.w	r6, r5, #36	; 0x24
90012788:	e003      	b.n	90012792 <vQueueWaitForMessageRestricted+0x4e>
			--cTxLock;
9001278a:	1e63      	subs	r3, r4, #1
9001278c:	b2da      	uxtb	r2, r3
9001278e:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
90012790:	b16a      	cbz	r2, 900127ae <vQueueWaitForMessageRestricted+0x6a>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012792:	6a6b      	ldr	r3, [r5, #36]	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012794:	4630      	mov	r0, r6
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
90012796:	b153      	cbz	r3, 900127ae <vQueueWaitForMessageRestricted+0x6a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
90012798:	f000 fd72 	bl	90013280 <xTaskRemoveFromEventList>
9001279c:	2800      	cmp	r0, #0
9001279e:	d0f4      	beq.n	9001278a <vQueueWaitForMessageRestricted+0x46>
						vTaskMissedYield();
900127a0:	f000 fe0c 	bl	900133bc <vTaskMissedYield>
			--cTxLock;
900127a4:	1e63      	subs	r3, r4, #1
900127a6:	b2da      	uxtb	r2, r3
900127a8:	b25c      	sxtb	r4, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
900127aa:	2a00      	cmp	r2, #0
900127ac:	d1f1      	bne.n	90012792 <vQueueWaitForMessageRestricted+0x4e>
		pxQueue->cTxLock = queueUNLOCKED;
900127ae:	23ff      	movs	r3, #255	; 0xff
900127b0:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
900127b4:	f7fe fdd0 	bl	90011358 <vPortExitCritical>
	taskENTER_CRITICAL();
900127b8:	f7fe fdac 	bl	90011314 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
900127bc:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
900127c0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900127c2:	2c00      	cmp	r4, #0
900127c4:	dd14      	ble.n	900127f0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900127c6:	f105 0610 	add.w	r6, r5, #16
900127ca:	e003      	b.n	900127d4 <vQueueWaitForMessageRestricted+0x90>
				--cRxLock;
900127cc:	1e63      	subs	r3, r4, #1
900127ce:	b2da      	uxtb	r2, r3
900127d0:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900127d2:	b16a      	cbz	r2, 900127f0 <vQueueWaitForMessageRestricted+0xac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900127d4:	692b      	ldr	r3, [r5, #16]
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900127d6:	4630      	mov	r0, r6
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
900127d8:	b153      	cbz	r3, 900127f0 <vQueueWaitForMessageRestricted+0xac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
900127da:	f000 fd51 	bl	90013280 <xTaskRemoveFromEventList>
900127de:	2800      	cmp	r0, #0
900127e0:	d0f4      	beq.n	900127cc <vQueueWaitForMessageRestricted+0x88>
					vTaskMissedYield();
900127e2:	f000 fdeb 	bl	900133bc <vTaskMissedYield>
				--cRxLock;
900127e6:	1e63      	subs	r3, r4, #1
900127e8:	b2da      	uxtb	r2, r3
900127ea:	b25c      	sxtb	r4, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
900127ec:	2a00      	cmp	r2, #0
900127ee:	d1f1      	bne.n	900127d4 <vQueueWaitForMessageRestricted+0x90>
		pxQueue->cRxLock = queueUNLOCKED;
900127f0:	23ff      	movs	r3, #255	; 0xff
900127f2:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
	}
900127f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
900127fa:	f7fe bdad 	b.w	90011358 <vPortExitCritical>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
900127fe:	4622      	mov	r2, r4
90012800:	4631      	mov	r1, r6
90012802:	f105 0024 	add.w	r0, r5, #36	; 0x24
90012806:	f000 fcf1 	bl	900131ec <vTaskPlaceOnEventListRestricted>
9001280a:	e7b4      	b.n	90012776 <vQueueWaitForMessageRestricted+0x32>

9001280c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
9001280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90012810:	4605      	mov	r5, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
90012812:	f7fe fd7f 	bl	90011314 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
90012816:	4a34      	ldr	r2, [pc, #208]	; (900128e8 <prvAddNewTaskToReadyList+0xdc>)
		if( pxCurrentTCB == NULL )
90012818:	4e34      	ldr	r6, [pc, #208]	; (900128ec <prvAddNewTaskToReadyList+0xe0>)
		uxCurrentNumberOfTasks++;
9001281a:	6813      	ldr	r3, [r2, #0]
9001281c:	3301      	adds	r3, #1
9001281e:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
90012820:	6833      	ldr	r3, [r6, #0]
90012822:	2b00      	cmp	r3, #0
90012824:	d032      	beq.n	9001288c <prvAddNewTaskToReadyList+0x80>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
90012826:	4c32      	ldr	r4, [pc, #200]	; (900128f0 <prvAddNewTaskToReadyList+0xe4>)
90012828:	6823      	ldr	r3, [r4, #0]
9001282a:	b33b      	cbz	r3, 9001287c <prvAddNewTaskToReadyList+0x70>
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
9001282c:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
9001282e:	4f31      	ldr	r7, [pc, #196]	; (900128f4 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
90012830:	4a31      	ldr	r2, [pc, #196]	; (900128f8 <prvAddNewTaskToReadyList+0xec>)
		prvAddTaskToReadyList( pxNewTCB );
90012832:	4932      	ldr	r1, [pc, #200]	; (900128fc <prvAddNewTaskToReadyList+0xf0>)
		uxTaskNumber++;
90012834:	6813      	ldr	r3, [r2, #0]
90012836:	3301      	adds	r3, #1
90012838:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
9001283a:	646b      	str	r3, [r5, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
9001283c:	680b      	ldr	r3, [r1, #0]
9001283e:	4283      	cmp	r3, r0
90012840:	d200      	bcs.n	90012844 <prvAddNewTaskToReadyList+0x38>
90012842:	6008      	str	r0, [r1, #0]
90012844:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90012848:	1d29      	adds	r1, r5, #4
9001284a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
9001284e:	f7fe fcbb 	bl	900111c8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
90012852:	f7fe fd81 	bl	90011358 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
90012856:	6823      	ldr	r3, [r4, #0]
90012858:	b173      	cbz	r3, 90012878 <prvAddNewTaskToReadyList+0x6c>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
9001285a:	6832      	ldr	r2, [r6, #0]
9001285c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
9001285e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90012860:	429a      	cmp	r2, r3
90012862:	d209      	bcs.n	90012878 <prvAddNewTaskToReadyList+0x6c>
		{
			taskYIELD_IF_USING_PREEMPTION();
90012864:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90012868:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
9001286c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90012870:	f3bf 8f4f 	dsb	sy
90012874:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
90012878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
9001287c:	6833      	ldr	r3, [r6, #0]
9001287e:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90012880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012882:	4f1c      	ldr	r7, [pc, #112]	; (900128f4 <prvAddNewTaskToReadyList+0xe8>)
90012884:	4283      	cmp	r3, r0
90012886:	d8d3      	bhi.n	90012830 <prvAddNewTaskToReadyList+0x24>
					pxCurrentTCB = pxNewTCB;
90012888:	6035      	str	r5, [r6, #0]
9001288a:	e7d1      	b.n	90012830 <prvAddNewTaskToReadyList+0x24>
			pxCurrentTCB = pxNewTCB;
9001288c:	6035      	str	r5, [r6, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
9001288e:	6813      	ldr	r3, [r2, #0]
90012890:	2b01      	cmp	r3, #1
90012892:	d003      	beq.n	9001289c <prvAddNewTaskToReadyList+0x90>
		prvAddTaskToReadyList( pxNewTCB );
90012894:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
90012896:	4f17      	ldr	r7, [pc, #92]	; (900128f4 <prvAddNewTaskToReadyList+0xe8>)
90012898:	4c15      	ldr	r4, [pc, #84]	; (900128f0 <prvAddNewTaskToReadyList+0xe4>)
9001289a:	e7c9      	b.n	90012830 <prvAddNewTaskToReadyList+0x24>
9001289c:	4f15      	ldr	r7, [pc, #84]	; (900128f4 <prvAddNewTaskToReadyList+0xe8>)
9001289e:	463c      	mov	r4, r7
900128a0:	f507 688c 	add.w	r8, r7, #1120	; 0x460
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
900128a4:	4620      	mov	r0, r4
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
900128a6:	3414      	adds	r4, #20
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
900128a8:	f7fe fc7e 	bl	900111a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
900128ac:	45a0      	cmp	r8, r4
900128ae:	d1f9      	bne.n	900128a4 <prvAddNewTaskToReadyList+0x98>
	}

	vListInitialise( &xDelayedTaskList1 );
900128b0:	f8df 9060 	ldr.w	r9, [pc, #96]	; 90012914 <prvAddNewTaskToReadyList+0x108>
	vListInitialise( &xDelayedTaskList2 );
900128b4:	f8df 8060 	ldr.w	r8, [pc, #96]	; 90012918 <prvAddNewTaskToReadyList+0x10c>
	vListInitialise( &xDelayedTaskList1 );
900128b8:	4648      	mov	r0, r9
900128ba:	4c0d      	ldr	r4, [pc, #52]	; (900128f0 <prvAddNewTaskToReadyList+0xe4>)
900128bc:	f7fe fc74 	bl	900111a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
900128c0:	4640      	mov	r0, r8
900128c2:	f7fe fc71 	bl	900111a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
900128c6:	480e      	ldr	r0, [pc, #56]	; (90012900 <prvAddNewTaskToReadyList+0xf4>)
900128c8:	f7fe fc6e 	bl	900111a8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
900128cc:	480d      	ldr	r0, [pc, #52]	; (90012904 <prvAddNewTaskToReadyList+0xf8>)
900128ce:	f7fe fc6b 	bl	900111a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
900128d2:	480d      	ldr	r0, [pc, #52]	; (90012908 <prvAddNewTaskToReadyList+0xfc>)
900128d4:	f7fe fc68 	bl	900111a8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
900128d8:	4b0c      	ldr	r3, [pc, #48]	; (9001290c <prvAddNewTaskToReadyList+0x100>)
		prvAddTaskToReadyList( pxNewTCB );
900128da:	6ae8      	ldr	r0, [r5, #44]	; 0x2c
	pxDelayedTaskList = &xDelayedTaskList1;
900128dc:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
900128e0:	4b0b      	ldr	r3, [pc, #44]	; (90012910 <prvAddNewTaskToReadyList+0x104>)
900128e2:	f8c3 8000 	str.w	r8, [r3]
}
900128e6:	e7a3      	b.n	90012830 <prvAddNewTaskToReadyList+0x24>
900128e8:	24025d84 	.word	0x24025d84
900128ec:	24025918 	.word	0x24025918
900128f0:	24025de0 	.word	0x24025de0
900128f4:	24025924 	.word	0x24025924
900128f8:	24025d90 	.word	0x24025d90
900128fc:	24025d94 	.word	0x24025d94
90012900:	24025dcc 	.word	0x24025dcc
90012904:	24025df8 	.word	0x24025df8
90012908:	24025de4 	.word	0x24025de4
9001290c:	2402591c 	.word	0x2402591c
90012910:	24025920 	.word	0x24025920
90012914:	24025d98 	.word	0x24025d98
90012918:	24025dac 	.word	0x24025dac

9001291c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
9001291c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90012920:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90012922:	ea4f 0982 	mov.w	r9, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90012926:	4606      	mov	r6, r0
90012928:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001292a:	464a      	mov	r2, r9
9001292c:	21a5      	movs	r1, #165	; 0xa5
9001292e:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
90012930:	461f      	mov	r7, r3
90012932:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90012936:	f1a9 0904 	sub.w	r9, r9, #4
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
9001293a:	f014 fc07 	bl	9002714c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
9001293e:	6b23      	ldr	r3, [r4, #48]	; 0x30
90012940:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90012942:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
90012946:	2d00      	cmp	r5, #0
90012948:	d07f      	beq.n	90012a4a <prvInitialiseNewTask.constprop.0+0x12e>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001294a:	782b      	ldrb	r3, [r5, #0]
9001294c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if( pcName[ x ] == ( char ) 0x00 )
90012950:	782b      	ldrb	r3, [r5, #0]
90012952:	2b00      	cmp	r3, #0
90012954:	d04d      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012956:	786b      	ldrb	r3, [r5, #1]
90012958:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
			if( pcName[ x ] == ( char ) 0x00 )
9001295c:	786b      	ldrb	r3, [r5, #1]
9001295e:	2b00      	cmp	r3, #0
90012960:	d047      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012962:	78ab      	ldrb	r3, [r5, #2]
90012964:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
			if( pcName[ x ] == ( char ) 0x00 )
90012968:	78ab      	ldrb	r3, [r5, #2]
9001296a:	2b00      	cmp	r3, #0
9001296c:	d041      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001296e:	78eb      	ldrb	r3, [r5, #3]
90012970:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
			if( pcName[ x ] == ( char ) 0x00 )
90012974:	78eb      	ldrb	r3, [r5, #3]
90012976:	2b00      	cmp	r3, #0
90012978:	d03b      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001297a:	792b      	ldrb	r3, [r5, #4]
9001297c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			if( pcName[ x ] == ( char ) 0x00 )
90012980:	792b      	ldrb	r3, [r5, #4]
90012982:	2b00      	cmp	r3, #0
90012984:	d035      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012986:	796b      	ldrb	r3, [r5, #5]
90012988:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
			if( pcName[ x ] == ( char ) 0x00 )
9001298c:	796b      	ldrb	r3, [r5, #5]
9001298e:	2b00      	cmp	r3, #0
90012990:	d02f      	beq.n	900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012992:	79ab      	ldrb	r3, [r5, #6]
90012994:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
			if( pcName[ x ] == ( char ) 0x00 )
90012998:	79ab      	ldrb	r3, [r5, #6]
9001299a:	b353      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
9001299c:	79eb      	ldrb	r3, [r5, #7]
9001299e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
			if( pcName[ x ] == ( char ) 0x00 )
900129a2:	79eb      	ldrb	r3, [r5, #7]
900129a4:	b32b      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129a6:	7a2b      	ldrb	r3, [r5, #8]
900129a8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
			if( pcName[ x ] == ( char ) 0x00 )
900129ac:	7a2b      	ldrb	r3, [r5, #8]
900129ae:	b303      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129b0:	7a6b      	ldrb	r3, [r5, #9]
900129b2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
			if( pcName[ x ] == ( char ) 0x00 )
900129b6:	7a6b      	ldrb	r3, [r5, #9]
900129b8:	b1db      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129ba:	7aab      	ldrb	r3, [r5, #10]
900129bc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
			if( pcName[ x ] == ( char ) 0x00 )
900129c0:	7aab      	ldrb	r3, [r5, #10]
900129c2:	b1b3      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129c4:	7aeb      	ldrb	r3, [r5, #11]
900129c6:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
			if( pcName[ x ] == ( char ) 0x00 )
900129ca:	7aeb      	ldrb	r3, [r5, #11]
900129cc:	b18b      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129ce:	7b2b      	ldrb	r3, [r5, #12]
900129d0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
			if( pcName[ x ] == ( char ) 0x00 )
900129d4:	7b2b      	ldrb	r3, [r5, #12]
900129d6:	b163      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129d8:	7b6b      	ldrb	r3, [r5, #13]
900129da:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
			if( pcName[ x ] == ( char ) 0x00 )
900129de:	7b6b      	ldrb	r3, [r5, #13]
900129e0:	b13b      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129e2:	7bab      	ldrb	r3, [r5, #14]
900129e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
			if( pcName[ x ] == ( char ) 0x00 )
900129e8:	7bab      	ldrb	r3, [r5, #14]
900129ea:	b113      	cbz	r3, 900129f2 <prvInitialiseNewTask.constprop.0+0xd6>
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
900129ec:	7beb      	ldrb	r3, [r5, #15]
900129ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
900129f2:	2300      	movs	r3, #0
900129f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
900129f8:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
900129fa:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
900129fe:	1d20      	adds	r0, r4, #4
90012a00:	2d37      	cmp	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
90012a02:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
90012a06:	bf28      	it	cs
90012a08:	2537      	movcs	r5, #55	; 0x37
	pxNewTCB->uxPriority = uxPriority;
90012a0a:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
90012a0c:	64e5      	str	r5, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90012a0e:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90012a12:	f7fe fbd5 	bl	900111c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90012a16:	f104 0018 	add.w	r0, r4, #24
90012a1a:	f7fe fbd1 	bl	900111c0 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
90012a1e:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012a22:	463a      	mov	r2, r7
90012a24:	4631      	mov	r1, r6
90012a26:	4648      	mov	r0, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90012a28:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90012a2a:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90012a2c:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90012a2e:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90012a32:	f884 a05c 	strb.w	sl, [r4, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012a36:	f7fe fc41 	bl	900112bc <pxPortInitialiseStack>
90012a3a:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
90012a3c:	f1b8 0f00 	cmp.w	r8, #0
90012a40:	d001      	beq.n	90012a46 <prvInitialiseNewTask.constprop.0+0x12a>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
90012a42:	f8c8 4000 	str.w	r4, [r8]
}
90012a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
90012a4a:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
90012a4e:	e7d3      	b.n	900129f8 <prvInitialiseNewTask.constprop.0+0xdc>

90012a50 <prvIdleTask>:
{
90012a50:	b580      	push	{r7, lr}
90012a52:	4c22      	ldr	r4, [pc, #136]	; (90012adc <prvIdleTask+0x8c>)
				taskYIELD();
90012a54:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90012a58:	4e21      	ldr	r6, [pc, #132]	; (90012ae0 <prvIdleTask+0x90>)
90012a5a:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
90012a5e:	4d21      	ldr	r5, [pc, #132]	; (90012ae4 <prvIdleTask+0x94>)
90012a60:	4f21      	ldr	r7, [pc, #132]	; (90012ae8 <prvIdleTask+0x98>)
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90012a62:	6823      	ldr	r3, [r4, #0]
90012a64:	b353      	cbz	r3, 90012abc <prvIdleTask+0x6c>
		{
			taskENTER_CRITICAL();
90012a66:	f7fe fc55 	bl	90011314 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012a6a:	68f3      	ldr	r3, [r6, #12]
90012a6c:	f8d3 a00c 	ldr.w	sl, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012a70:	f10a 0004 	add.w	r0, sl, #4
90012a74:	f7fe fbd0 	bl	90011218 <uxListRemove>
				--uxCurrentNumberOfTasks;
90012a78:	682b      	ldr	r3, [r5, #0]
90012a7a:	3b01      	subs	r3, #1
90012a7c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
90012a7e:	6823      	ldr	r3, [r4, #0]
90012a80:	3b01      	subs	r3, #1
90012a82:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
90012a84:	f7fe fc68 	bl	90011358 <vPortExitCritical>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
90012a88:	f89a 305d 	ldrb.w	r3, [sl, #93]	; 0x5d
90012a8c:	b163      	cbz	r3, 90012aa8 <prvIdleTask+0x58>
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
				vPortFree( pxTCB );
			}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
90012a8e:	2b01      	cmp	r3, #1
90012a90:	d020      	beq.n	90012ad4 <prvIdleTask+0x84>
			}
			else
			{
				/* Neither the stack nor the TCB were allocated dynamically, so
				nothing needs to be freed. */
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
90012a92:	2b02      	cmp	r3, #2
90012a94:	d0e5      	beq.n	90012a62 <prvIdleTask+0x12>
90012a96:	f04f 0350 	mov.w	r3, #80	; 0x50
90012a9a:	f383 8811 	msr	BASEPRI, r3
90012a9e:	f3bf 8f6f 	isb	sy
90012aa2:	f3bf 8f4f 	dsb	sy
90012aa6:	e7fe      	b.n	90012aa6 <prvIdleTask+0x56>
				vPortFree( pxTCB->pxStack );
90012aa8:	f8da 0030 	ldr.w	r0, [sl, #48]	; 0x30
90012aac:	f7fe fb1a 	bl	900110e4 <vPortFree>
				vPortFree( pxTCB );
90012ab0:	4650      	mov	r0, sl
90012ab2:	f7fe fb17 	bl	900110e4 <vPortFree>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
90012ab6:	6823      	ldr	r3, [r4, #0]
90012ab8:	2b00      	cmp	r3, #0
90012aba:	d1d4      	bne.n	90012a66 <prvIdleTask+0x16>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
90012abc:	683b      	ldr	r3, [r7, #0]
90012abe:	2b01      	cmp	r3, #1
90012ac0:	d905      	bls.n	90012ace <prvIdleTask+0x7e>
				taskYIELD();
90012ac2:	f8c9 8d04 	str.w	r8, [r9, #3332]	; 0xd04
90012ac6:	f3bf 8f4f 	dsb	sy
90012aca:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
90012ace:	f7f1 fb05 	bl	900040dc <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
90012ad2:	e7c6      	b.n	90012a62 <prvIdleTask+0x12>
				vPortFree( pxTCB );
90012ad4:	4650      	mov	r0, sl
90012ad6:	f7fe fb05 	bl	900110e4 <vPortFree>
90012ada:	e7c2      	b.n	90012a62 <prvIdleTask+0x12>
90012adc:	24025d88 	.word	0x24025d88
90012ae0:	24025df8 	.word	0x24025df8
90012ae4:	24025d84 	.word	0x24025d84
90012ae8:	24025924 	.word	0x24025924

90012aec <xTaskIncrementTick.part.0>:
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90012aec:	4b4a      	ldr	r3, [pc, #296]	; (90012c18 <xTaskIncrementTick.part.0+0x12c>)
BaseType_t xTaskIncrementTick( void )
90012aee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90012af2:	681e      	ldr	r6, [r3, #0]
BaseType_t xTaskIncrementTick( void )
90012af4:	b083      	sub	sp, #12
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
90012af6:	3601      	adds	r6, #1
		xTickCount = xConstTickCount;
90012af8:	601e      	str	r6, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
90012afa:	2e00      	cmp	r6, #0
90012afc:	d040      	beq.n	90012b80 <xTaskIncrementTick.part.0+0x94>
90012afe:	f8df b12c 	ldr.w	fp, [pc, #300]	; 90012c2c <xTaskIncrementTick.part.0+0x140>
		if( xConstTickCount >= xNextTaskUnblockTime )
90012b02:	f8db 3000 	ldr.w	r3, [fp]
90012b06:	429e      	cmp	r6, r3
90012b08:	d347      	bcc.n	90012b9a <xTaskIncrementTick.part.0+0xae>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012b0a:	4f44      	ldr	r7, [pc, #272]	; (90012c1c <xTaskIncrementTick.part.0+0x130>)
90012b0c:	683b      	ldr	r3, [r7, #0]
90012b0e:	681d      	ldr	r5, [r3, #0]
90012b10:	2d00      	cmp	r5, #0
90012b12:	d077      	beq.n	90012c04 <xTaskIncrementTick.part.0+0x118>
BaseType_t xSwitchRequired = pdFALSE;
90012b14:	2500      	movs	r5, #0
90012b16:	f8df 9118 	ldr.w	r9, [pc, #280]	; 90012c30 <xTaskIncrementTick.part.0+0x144>
90012b1a:	f8df a118 	ldr.w	sl, [pc, #280]	; 90012c34 <xTaskIncrementTick.part.0+0x148>
					prvAddTaskToReadyList( pxTCB );
90012b1e:	f8df 8118 	ldr.w	r8, [pc, #280]	; 90012c38 <xTaskIncrementTick.part.0+0x14c>
90012b22:	e022      	b.n	90012b6a <xTaskIncrementTick.part.0+0x7e>
90012b24:	9101      	str	r1, [sp, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012b26:	f7fe fb77 	bl	90011218 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90012b2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90012b2c:	f104 0018 	add.w	r0, r4, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
90012b30:	9901      	ldr	r1, [sp, #4]
90012b32:	b113      	cbz	r3, 90012b3a <xTaskIncrementTick.part.0+0x4e>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90012b34:	f7fe fb70 	bl	90011218 <uxListRemove>
90012b38:	9901      	ldr	r1, [sp, #4]
					prvAddTaskToReadyList( pxTCB );
90012b3a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90012b3c:	f8d8 2000 	ldr.w	r2, [r8]
90012b40:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90012b44:	4293      	cmp	r3, r2
90012b46:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90012b4a:	d901      	bls.n	90012b50 <xTaskIncrementTick.part.0+0x64>
90012b4c:	f8c8 3000 	str.w	r3, [r8]
90012b50:	f7fe fb3a 	bl	900111c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90012b54:	f8da 2000 	ldr.w	r2, [sl]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012b58:	683b      	ldr	r3, [r7, #0]
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90012b5a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
90012b5c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012b5e:	681b      	ldr	r3, [r3, #0]
							xSwitchRequired = pdTRUE;
90012b60:	4291      	cmp	r1, r2
90012b62:	bf28      	it	cs
90012b64:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012b66:	2b00      	cmp	r3, #0
90012b68:	d050      	beq.n	90012c0c <xTaskIncrementTick.part.0+0x120>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012b6a:	683b      	ldr	r3, [r7, #0]
90012b6c:	68db      	ldr	r3, [r3, #12]
90012b6e:	68dc      	ldr	r4, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
90012b70:	6863      	ldr	r3, [r4, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012b72:	1d21      	adds	r1, r4, #4
					if( xConstTickCount < xItemValue )
90012b74:	429e      	cmp	r6, r3
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012b76:	4608      	mov	r0, r1
					if( xConstTickCount < xItemValue )
90012b78:	d2d4      	bcs.n	90012b24 <xTaskIncrementTick.part.0+0x38>
						xNextTaskUnblockTime = xItemValue;
90012b7a:	f8cb 3000 	str.w	r3, [fp]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
90012b7e:	e011      	b.n	90012ba4 <xTaskIncrementTick.part.0+0xb8>
			taskSWITCH_DELAYED_LISTS();
90012b80:	4b26      	ldr	r3, [pc, #152]	; (90012c1c <xTaskIncrementTick.part.0+0x130>)
90012b82:	681a      	ldr	r2, [r3, #0]
90012b84:	6812      	ldr	r2, [r2, #0]
90012b86:	b30a      	cbz	r2, 90012bcc <xTaskIncrementTick.part.0+0xe0>
90012b88:	f04f 0350 	mov.w	r3, #80	; 0x50
90012b8c:	f383 8811 	msr	BASEPRI, r3
90012b90:	f3bf 8f6f 	isb	sy
90012b94:	f3bf 8f4f 	dsb	sy
90012b98:	e7fe      	b.n	90012b98 <xTaskIncrementTick.part.0+0xac>
BaseType_t xSwitchRequired = pdFALSE;
90012b9a:	2500      	movs	r5, #0
90012b9c:	f8df 9090 	ldr.w	r9, [pc, #144]	; 90012c30 <xTaskIncrementTick.part.0+0x144>
90012ba0:	f8df a090 	ldr.w	sl, [pc, #144]	; 90012c34 <xTaskIncrementTick.part.0+0x148>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90012ba4:	f8da 3000 	ldr.w	r3, [sl]
			if( xYieldPending != pdFALSE )
90012ba8:	491d      	ldr	r1, [pc, #116]	; (90012c20 <xTaskIncrementTick.part.0+0x134>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
90012baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012bac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
90012bb0:	009b      	lsls	r3, r3, #2
90012bb2:	f859 2003 	ldr.w	r2, [r9, r3]
			if( xYieldPending != pdFALSE )
90012bb6:	680b      	ldr	r3, [r1, #0]
				xSwitchRequired = pdTRUE;
90012bb8:	2a02      	cmp	r2, #2
90012bba:	bf28      	it	cs
90012bbc:	2501      	movcs	r5, #1
				xSwitchRequired = pdTRUE;
90012bbe:	2b00      	cmp	r3, #0
}
90012bc0:	bf0c      	ite	eq
90012bc2:	4628      	moveq	r0, r5
90012bc4:	2001      	movne	r0, #1
90012bc6:	b003      	add	sp, #12
90012bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
90012bcc:	4a15      	ldr	r2, [pc, #84]	; (90012c24 <xTaskIncrementTick.part.0+0x138>)
90012bce:	6818      	ldr	r0, [r3, #0]
90012bd0:	6811      	ldr	r1, [r2, #0]
90012bd2:	6019      	str	r1, [r3, #0]
90012bd4:	4914      	ldr	r1, [pc, #80]	; (90012c28 <xTaskIncrementTick.part.0+0x13c>)
90012bd6:	6010      	str	r0, [r2, #0]
90012bd8:	680a      	ldr	r2, [r1, #0]
90012bda:	3201      	adds	r2, #1
90012bdc:	600a      	str	r2, [r1, #0]

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012bde:	681a      	ldr	r2, [r3, #0]
90012be0:	6812      	ldr	r2, [r2, #0]
90012be2:	b932      	cbnz	r2, 90012bf2 <xTaskIncrementTick.part.0+0x106>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
90012be4:	f8df b044 	ldr.w	fp, [pc, #68]	; 90012c2c <xTaskIncrementTick.part.0+0x140>
90012be8:	f04f 33ff 	mov.w	r3, #4294967295
90012bec:	f8cb 3000 	str.w	r3, [fp]
90012bf0:	e787      	b.n	90012b02 <xTaskIncrementTick.part.0+0x16>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012bf2:	681b      	ldr	r3, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90012bf4:	f8df b034 	ldr.w	fp, [pc, #52]	; 90012c2c <xTaskIncrementTick.part.0+0x140>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012bf8:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90012bfa:	68db      	ldr	r3, [r3, #12]
90012bfc:	685b      	ldr	r3, [r3, #4]
90012bfe:	f8cb 3000 	str.w	r3, [fp]
	}
}
90012c02:	e77e      	b.n	90012b02 <xTaskIncrementTick.part.0+0x16>
90012c04:	f8df 9028 	ldr.w	r9, [pc, #40]	; 90012c30 <xTaskIncrementTick.part.0+0x144>
90012c08:	f8df a028 	ldr.w	sl, [pc, #40]	; 90012c34 <xTaskIncrementTick.part.0+0x148>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90012c0c:	f04f 33ff 	mov.w	r3, #4294967295
90012c10:	f8cb 3000 	str.w	r3, [fp]
					break;
90012c14:	e7c6      	b.n	90012ba4 <xTaskIncrementTick.part.0+0xb8>
90012c16:	bf00      	nop
90012c18:	24025e0c 	.word	0x24025e0c
90012c1c:	2402591c 	.word	0x2402591c
90012c20:	24025e10 	.word	0x24025e10
90012c24:	24025920 	.word	0x24025920
90012c28:	24025dc4 	.word	0x24025dc4
90012c2c:	24025dc0 	.word	0x24025dc0
90012c30:	24025924 	.word	0x24025924
90012c34:	24025918 	.word	0x24025918
90012c38:	24025d94 	.word	0x24025d94

90012c3c <xTaskResumeAll.part.0>:
BaseType_t xTaskResumeAll( void )
90012c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		--uxSchedulerSuspended;
90012c40:	4d41      	ldr	r5, [pc, #260]	; (90012d48 <xTaskResumeAll.part.0+0x10c>)
BaseType_t xTaskResumeAll( void )
90012c42:	b083      	sub	sp, #12
	taskENTER_CRITICAL();
90012c44:	f7fe fb66 	bl	90011314 <vPortEnterCritical>
		--uxSchedulerSuspended;
90012c48:	682b      	ldr	r3, [r5, #0]
90012c4a:	3b01      	subs	r3, #1
90012c4c:	602b      	str	r3, [r5, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90012c4e:	682b      	ldr	r3, [r5, #0]
90012c50:	2b00      	cmp	r3, #0
90012c52:	d161      	bne.n	90012d18 <xTaskResumeAll.part.0+0xdc>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
90012c54:	4b3d      	ldr	r3, [pc, #244]	; (90012d4c <xTaskResumeAll.part.0+0x110>)
90012c56:	681b      	ldr	r3, [r3, #0]
90012c58:	2b00      	cmp	r3, #0
90012c5a:	d05d      	beq.n	90012d18 <xTaskResumeAll.part.0+0xdc>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90012c5c:	4e3c      	ldr	r6, [pc, #240]	; (90012d50 <xTaskResumeAll.part.0+0x114>)
90012c5e:	6833      	ldr	r3, [r6, #0]
90012c60:	2b00      	cmp	r3, #0
90012c62:	d06e      	beq.n	90012d42 <xTaskResumeAll.part.0+0x106>
90012c64:	4f3b      	ldr	r7, [pc, #236]	; (90012d54 <xTaskResumeAll.part.0+0x118>)
90012c66:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 90012d64 <xTaskResumeAll.part.0+0x128>
90012c6a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 90012d68 <xTaskResumeAll.part.0+0x12c>
90012c6e:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 90012d6c <xTaskResumeAll.part.0+0x130>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012c72:	68f3      	ldr	r3, [r6, #12]
90012c74:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012c76:	f104 0b04 	add.w	fp, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
90012c7a:	f104 0018 	add.w	r0, r4, #24
90012c7e:	f7fe facb 	bl	90011218 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
90012c82:	4658      	mov	r0, fp
90012c84:	f7fe fac8 	bl	90011218 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
90012c88:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90012c8a:	683a      	ldr	r2, [r7, #0]
90012c8c:	4659      	mov	r1, fp
90012c8e:	eb03 0083 	add.w	r0, r3, r3, lsl #2
90012c92:	4293      	cmp	r3, r2
90012c94:	eb09 0080 	add.w	r0, r9, r0, lsl #2
90012c98:	d900      	bls.n	90012c9c <xTaskResumeAll.part.0+0x60>
90012c9a:	603b      	str	r3, [r7, #0]
90012c9c:	f7fe fa94 	bl	900111c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
90012ca0:	f8d8 3000 	ldr.w	r3, [r8]
90012ca4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
90012ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90012ca8:	429a      	cmp	r2, r3
90012caa:	d33d      	bcc.n	90012d28 <xTaskResumeAll.part.0+0xec>
						xYieldPending = pdTRUE;
90012cac:	2301      	movs	r3, #1
90012cae:	f8ca 3000 	str.w	r3, [sl]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90012cb2:	6833      	ldr	r3, [r6, #0]
90012cb4:	2b00      	cmp	r3, #0
90012cb6:	d1dc      	bne.n	90012c72 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012cb8:	4b27      	ldr	r3, [pc, #156]	; (90012d58 <xTaskResumeAll.part.0+0x11c>)
90012cba:	681a      	ldr	r2, [r3, #0]
90012cbc:	6812      	ldr	r2, [r2, #0]
90012cbe:	2a00      	cmp	r2, #0
90012cc0:	d03a      	beq.n	90012d38 <xTaskResumeAll.part.0+0xfc>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012cc2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90012cc4:	4b25      	ldr	r3, [pc, #148]	; (90012d5c <xTaskResumeAll.part.0+0x120>)
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90012cc6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
90012cc8:	68d2      	ldr	r2, [r2, #12]
90012cca:	6852      	ldr	r2, [r2, #4]
90012ccc:	601a      	str	r2, [r3, #0]
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
90012cce:	4e24      	ldr	r6, [pc, #144]	; (90012d60 <xTaskResumeAll.part.0+0x124>)
90012cd0:	6834      	ldr	r4, [r6, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
90012cd2:	b194      	cbz	r4, 90012cfa <xTaskResumeAll.part.0+0xbe>
								xYieldPending = pdTRUE;
90012cd4:	2701      	movs	r7, #1
90012cd6:	e006      	b.n	90012ce6 <xTaskResumeAll.part.0+0xaa>
90012cd8:	f7ff ff08 	bl	90012aec <xTaskIncrementTick.part.0>
							if( xTaskIncrementTick() != pdFALSE )
90012cdc:	b108      	cbz	r0, 90012ce2 <xTaskResumeAll.part.0+0xa6>
								xYieldPending = pdTRUE;
90012cde:	f8ca 7000 	str.w	r7, [sl]
						} while( xPendedCounts > ( TickType_t ) 0U );
90012ce2:	3c01      	subs	r4, #1
90012ce4:	d008      	beq.n	90012cf8 <xTaskResumeAll.part.0+0xbc>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90012ce6:	682b      	ldr	r3, [r5, #0]
90012ce8:	2b00      	cmp	r3, #0
90012cea:	d0f5      	beq.n	90012cd8 <xTaskResumeAll.part.0+0x9c>
		++xPendedTicks;
90012cec:	6833      	ldr	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90012cee:	3c01      	subs	r4, #1
		++xPendedTicks;
90012cf0:	f103 0301 	add.w	r3, r3, #1
90012cf4:	6033      	str	r3, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
90012cf6:	d1f6      	bne.n	90012ce6 <xTaskResumeAll.part.0+0xaa>
						xPendedTicks = 0;
90012cf8:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
90012cfa:	f8da 3000 	ldr.w	r3, [sl]
90012cfe:	b15b      	cbz	r3, 90012d18 <xTaskResumeAll.part.0+0xdc>
					taskYIELD_IF_USING_PREEMPTION();
90012d00:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90012d04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90012d08:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90012d0c:	f3bf 8f4f 	dsb	sy
90012d10:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
90012d14:	2001      	movs	r0, #1
90012d16:	e000      	b.n	90012d1a <xTaskResumeAll.part.0+0xde>
BaseType_t xAlreadyYielded = pdFALSE;
90012d18:	2000      	movs	r0, #0
90012d1a:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
90012d1c:	f7fe fb1c 	bl	90011358 <vPortExitCritical>
}
90012d20:	9801      	ldr	r0, [sp, #4]
90012d22:	b003      	add	sp, #12
90012d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
90012d28:	6833      	ldr	r3, [r6, #0]
90012d2a:	2b00      	cmp	r3, #0
90012d2c:	d1a1      	bne.n	90012c72 <xTaskResumeAll.part.0+0x36>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
90012d2e:	4b0a      	ldr	r3, [pc, #40]	; (90012d58 <xTaskResumeAll.part.0+0x11c>)
90012d30:	681a      	ldr	r2, [r3, #0]
90012d32:	6812      	ldr	r2, [r2, #0]
90012d34:	2a00      	cmp	r2, #0
90012d36:	d1c4      	bne.n	90012cc2 <xTaskResumeAll.part.0+0x86>
		xNextTaskUnblockTime = portMAX_DELAY;
90012d38:	4b08      	ldr	r3, [pc, #32]	; (90012d5c <xTaskResumeAll.part.0+0x120>)
90012d3a:	f04f 32ff 	mov.w	r2, #4294967295
90012d3e:	601a      	str	r2, [r3, #0]
90012d40:	e7c5      	b.n	90012cce <xTaskResumeAll.part.0+0x92>
90012d42:	f8df a028 	ldr.w	sl, [pc, #40]	; 90012d6c <xTaskResumeAll.part.0+0x130>
90012d46:	e7c2      	b.n	90012cce <xTaskResumeAll.part.0+0x92>
90012d48:	24025d8c 	.word	0x24025d8c
90012d4c:	24025d84 	.word	0x24025d84
90012d50:	24025dcc 	.word	0x24025dcc
90012d54:	24025d94 	.word	0x24025d94
90012d58:	2402591c 	.word	0x2402591c
90012d5c:	24025dc0 	.word	0x24025dc0
90012d60:	24025dc8 	.word	0x24025dc8
90012d64:	24025924 	.word	0x24025924
90012d68:	24025918 	.word	0x24025918
90012d6c:	24025e10 	.word	0x24025e10

90012d70 <xTaskCreateStatic>:
	{
90012d70:	b530      	push	{r4, r5, lr}
90012d72:	b087      	sub	sp, #28
90012d74:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
90012d76:	b1c4      	cbz	r4, 90012daa <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
90012d78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90012d7a:	b16d      	cbz	r5, 90012d98 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
90012d7c:	2560      	movs	r5, #96	; 0x60
90012d7e:	9505      	str	r5, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
90012d80:	9d05      	ldr	r5, [sp, #20]
90012d82:	2d60      	cmp	r5, #96	; 0x60
90012d84:	d01a      	beq.n	90012dbc <xTaskCreateStatic+0x4c>
90012d86:	f04f 0350 	mov.w	r3, #80	; 0x50
90012d8a:	f383 8811 	msr	BASEPRI, r3
90012d8e:	f3bf 8f6f 	isb	sy
90012d92:	f3bf 8f4f 	dsb	sy
90012d96:	e7fe      	b.n	90012d96 <xTaskCreateStatic+0x26>
90012d98:	f04f 0350 	mov.w	r3, #80	; 0x50
90012d9c:	f383 8811 	msr	BASEPRI, r3
90012da0:	f3bf 8f6f 	isb	sy
90012da4:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90012da8:	e7fe      	b.n	90012da8 <xTaskCreateStatic+0x38>
90012daa:	f04f 0350 	mov.w	r3, #80	; 0x50
90012dae:	f383 8811 	msr	BASEPRI, r3
90012db2:	f3bf 8f6f 	isb	sy
90012db6:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90012dba:	e7fe      	b.n	90012dba <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90012dbc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90012dbe:	632c      	str	r4, [r5, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90012dc0:	2402      	movs	r4, #2
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90012dc2:	9502      	str	r5, [sp, #8]
90012dc4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90012dc6:	9500      	str	r5, [sp, #0]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90012dc8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90012dca:	f885 405d 	strb.w	r4, [r5, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90012dce:	ac04      	add	r4, sp, #16
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90012dd0:	9d05      	ldr	r5, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
90012dd2:	9401      	str	r4, [sp, #4]
90012dd4:	f7ff fda2 	bl	9001291c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
90012dd8:	980c      	ldr	r0, [sp, #48]	; 0x30
90012dda:	f7ff fd17 	bl	9001280c <prvAddNewTaskToReadyList>
	}
90012dde:	9804      	ldr	r0, [sp, #16]
90012de0:	b007      	add	sp, #28
90012de2:	bd30      	pop	{r4, r5, pc}

90012de4 <xTaskCreate>:
	{
90012de4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90012de8:	4607      	mov	r7, r0
90012dea:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90012dec:	0090      	lsls	r0, r2, #2
	{
90012dee:	4615      	mov	r5, r2
90012df0:	4688      	mov	r8, r1
90012df2:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
90012df4:	f7fe f8bc 	bl	90010f70 <pvPortMalloc>
			if( pxStack != NULL )
90012df8:	b1d8      	cbz	r0, 90012e32 <xTaskCreate+0x4e>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
90012dfa:	4604      	mov	r4, r0
90012dfc:	2060      	movs	r0, #96	; 0x60
90012dfe:	f7fe f8b7 	bl	90010f70 <pvPortMalloc>
				if( pxNewTCB != NULL )
90012e02:	4606      	mov	r6, r0
90012e04:	b1d0      	cbz	r0, 90012e3c <xTaskCreate+0x58>
					pxNewTCB->pxStack = pxStack;
90012e06:	6304      	str	r4, [r0, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90012e08:	2400      	movs	r4, #0
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90012e0a:	464b      	mov	r3, r9
90012e0c:	462a      	mov	r2, r5
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
90012e0e:	f886 405d 	strb.w	r4, [r6, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
90012e12:	4641      	mov	r1, r8
90012e14:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90012e16:	4638      	mov	r0, r7
90012e18:	9602      	str	r6, [sp, #8]
90012e1a:	9401      	str	r4, [sp, #4]
90012e1c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90012e1e:	9400      	str	r4, [sp, #0]
90012e20:	f7ff fd7c 	bl	9001291c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
90012e24:	4630      	mov	r0, r6
90012e26:	f7ff fcf1 	bl	9001280c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
90012e2a:	2001      	movs	r0, #1
	}
90012e2c:	b005      	add	sp, #20
90012e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90012e32:	f04f 30ff 	mov.w	r0, #4294967295
	}
90012e36:	b005      	add	sp, #20
90012e38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
90012e3c:	4620      	mov	r0, r4
90012e3e:	f7fe f951 	bl	900110e4 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
90012e42:	f04f 30ff 	mov.w	r0, #4294967295
90012e46:	e7f1      	b.n	90012e2c <xTaskCreate+0x48>

90012e48 <vTaskDelay>:
	{
90012e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
90012e4a:	b950      	cbnz	r0, 90012e62 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
90012e4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
90012e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
90012e54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
90012e58:	f3bf 8f4f 	dsb	sy
90012e5c:	f3bf 8f6f 	isb	sy
	}
90012e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( uxSchedulerSuspended == 0 );
90012e62:	4d1e      	ldr	r5, [pc, #120]	; (90012edc <vTaskDelay+0x94>)
90012e64:	682b      	ldr	r3, [r5, #0]
90012e66:	b143      	cbz	r3, 90012e7a <vTaskDelay+0x32>
90012e68:	f04f 0350 	mov.w	r3, #80	; 0x50
90012e6c:	f383 8811 	msr	BASEPRI, r3
90012e70:	f3bf 8f6f 	isb	sy
90012e74:	f3bf 8f4f 	dsb	sy
90012e78:	e7fe      	b.n	90012e78 <vTaskDelay+0x30>
	++uxSchedulerSuspended;
90012e7a:	682b      	ldr	r3, [r5, #0]
90012e7c:	4604      	mov	r4, r0
90012e7e:	3301      	adds	r3, #1
90012e80:	602b      	str	r3, [r5, #0]
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
90012e82:	4b17      	ldr	r3, [pc, #92]	; (90012ee0 <vTaskDelay+0x98>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90012e84:	4e17      	ldr	r6, [pc, #92]	; (90012ee4 <vTaskDelay+0x9c>)
const TickType_t xConstTickCount = xTickCount;
90012e86:	681f      	ldr	r7, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90012e88:	6830      	ldr	r0, [r6, #0]
90012e8a:	3004      	adds	r0, #4
90012e8c:	f7fe f9c4 	bl	90011218 <uxListRemove>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
90012e90:	19e4      	adds	r4, r4, r7

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90012e92:	6833      	ldr	r3, [r6, #0]
90012e94:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
90012e96:	d315      	bcc.n	90012ec4 <vTaskDelay+0x7c>
			{
				/* Wake time has overflowed.  Place this item in the overflow
				list. */
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90012e98:	4b13      	ldr	r3, [pc, #76]	; (90012ee8 <vTaskDelay+0xa0>)
90012e9a:	6818      	ldr	r0, [r3, #0]
90012e9c:	6831      	ldr	r1, [r6, #0]
90012e9e:	3104      	adds	r1, #4
90012ea0:	f7fe f9a2 	bl	900111e8 <vListInsert>
	configASSERT( uxSchedulerSuspended );
90012ea4:	682b      	ldr	r3, [r5, #0]
90012ea6:	b943      	cbnz	r3, 90012eba <vTaskDelay+0x72>
90012ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
90012eac:	f383 8811 	msr	BASEPRI, r3
90012eb0:	f3bf 8f6f 	isb	sy
90012eb4:	f3bf 8f4f 	dsb	sy
90012eb8:	e7fe      	b.n	90012eb8 <vTaskDelay+0x70>
90012eba:	f7ff febf 	bl	90012c3c <xTaskResumeAll.part.0>
		if( xAlreadyYielded == pdFALSE )
90012ebe:	2800      	cmp	r0, #0
90012ec0:	d0c4      	beq.n	90012e4c <vTaskDelay+0x4>
	}
90012ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90012ec4:	4b09      	ldr	r3, [pc, #36]	; (90012eec <vTaskDelay+0xa4>)
90012ec6:	6818      	ldr	r0, [r3, #0]
90012ec8:	6831      	ldr	r1, [r6, #0]
90012eca:	3104      	adds	r1, #4
90012ecc:	f7fe f98c 	bl	900111e8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
90012ed0:	4b07      	ldr	r3, [pc, #28]	; (90012ef0 <vTaskDelay+0xa8>)
90012ed2:	681a      	ldr	r2, [r3, #0]
90012ed4:	4294      	cmp	r4, r2
90012ed6:	d2e5      	bcs.n	90012ea4 <vTaskDelay+0x5c>
				{
					xNextTaskUnblockTime = xTimeToWake;
90012ed8:	601c      	str	r4, [r3, #0]
90012eda:	e7e3      	b.n	90012ea4 <vTaskDelay+0x5c>
90012edc:	24025d8c 	.word	0x24025d8c
90012ee0:	24025e0c 	.word	0x24025e0c
90012ee4:	24025918 	.word	0x24025918
90012ee8:	24025920 	.word	0x24025920
90012eec:	2402591c 	.word	0x2402591c
90012ef0:	24025dc0 	.word	0x24025dc0

90012ef4 <vTaskStartScheduler>:
{
90012ef4:	b570      	push	{r4, r5, r6, lr}
90012ef6:	b084      	sub	sp, #16
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
90012ef8:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90012efa:	4668      	mov	r0, sp
90012efc:	aa02      	add	r2, sp, #8
90012efe:	a901      	add	r1, sp, #4
		StackType_t *pxIdleTaskStackBuffer = NULL;
90012f00:	e9cd 4400 	strd	r4, r4, [sp]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
90012f04:	f7fe f816 	bl	90010f34 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90012f08:	9801      	ldr	r0, [sp, #4]
		configASSERT( puxStackBuffer != NULL );
90012f0a:	b1c8      	cbz	r0, 90012f40 <vTaskStartScheduler+0x4c>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90012f0c:	9d00      	ldr	r5, [sp, #0]
		configASSERT( pxTaskBuffer != NULL );
90012f0e:	b175      	cbz	r5, 90012f2e <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
90012f10:	2260      	movs	r2, #96	; 0x60
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
90012f12:	9e02      	ldr	r6, [sp, #8]
			volatile size_t xSize = sizeof( StaticTask_t );
90012f14:	9203      	str	r2, [sp, #12]
			configASSERT( xSize == sizeof( TCB_t ) );
90012f16:	9a03      	ldr	r2, [sp, #12]
90012f18:	2a60      	cmp	r2, #96	; 0x60
90012f1a:	d01a      	beq.n	90012f52 <vTaskStartScheduler+0x5e>
90012f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
90012f20:	f383 8811 	msr	BASEPRI, r3
90012f24:	f3bf 8f6f 	isb	sy
90012f28:	f3bf 8f4f 	dsb	sy
90012f2c:	e7fe      	b.n	90012f2c <vTaskStartScheduler+0x38>
90012f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
90012f32:	f383 8811 	msr	BASEPRI, r3
90012f36:	f3bf 8f6f 	isb	sy
90012f3a:	f3bf 8f4f 	dsb	sy
		configASSERT( pxTaskBuffer != NULL );
90012f3e:	e7fe      	b.n	90012f3e <vTaskStartScheduler+0x4a>
90012f40:	f04f 0350 	mov.w	r3, #80	; 0x50
90012f44:	f383 8811 	msr	BASEPRI, r3
90012f48:	f3bf 8f6f 	isb	sy
90012f4c:	f3bf 8f4f 	dsb	sy
		configASSERT( puxStackBuffer != NULL );
90012f50:	e7fe      	b.n	90012f50 <vTaskStartScheduler+0x5c>
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90012f52:	00b6      	lsls	r6, r6, #2
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90012f54:	2302      	movs	r3, #2
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90012f56:	21a5      	movs	r1, #165	; 0xa5
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
90012f58:	6328      	str	r0, [r5, #48]	; 0x30
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90012f5a:	4632      	mov	r2, r6
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
90012f5c:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
90012f60:	9b03      	ldr	r3, [sp, #12]
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
90012f62:	f014 f8f3 	bl	9002714c <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90012f66:	6b2a      	ldr	r2, [r5, #48]	; 0x30
90012f68:	1f33      	subs	r3, r6, #4
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012f6a:	492a      	ldr	r1, [pc, #168]	; (90013014 <vTaskStartScheduler+0x120>)
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90012f6c:	1d28      	adds	r0, r5, #4
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
90012f6e:	18d6      	adds	r6, r2, r3
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
90012f70:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
90012f74:	6369      	str	r1, [r5, #52]	; 0x34
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
90012f76:	f885 4043 	strb.w	r4, [r5, #67]	; 0x43
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
90012f7a:	f026 0607 	bic.w	r6, r6, #7
	pxNewTCB->uxPriority = uxPriority;
90012f7e:	62ec      	str	r4, [r5, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
90012f80:	e9c5 4413 	strd	r4, r4, [r5, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
90012f84:	f7fe f91c 	bl	900111c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
90012f88:	f105 0018 	add.w	r0, r5, #24
90012f8c:	f7fe f918 	bl	900111c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90012f90:	2338      	movs	r3, #56	; 0x38
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012f92:	4622      	mov	r2, r4
90012f94:	4920      	ldr	r1, [pc, #128]	; (90013018 <vTaskStartScheduler+0x124>)
		pxNewTCB->ulNotifiedValue = 0;
90012f96:	65ac      	str	r4, [r5, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012f98:	4630      	mov	r0, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90012f9a:	61ab      	str	r3, [r5, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
90012f9c:	612d      	str	r5, [r5, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
90012f9e:	626d      	str	r5, [r5, #36]	; 0x24
		pxNewTCB->pxTaskTag = NULL;
90012fa0:	656c      	str	r4, [r5, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
90012fa2:	f885 405c 	strb.w	r4, [r5, #92]	; 0x5c
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012fa6:	f7fe f989 	bl	900112bc <pxPortInitialiseStack>
90012faa:	4603      	mov	r3, r0
			prvAddNewTaskToReadyList( pxNewTCB );
90012fac:	4628      	mov	r0, r5
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
90012fae:	602b      	str	r3, [r5, #0]
			prvAddNewTaskToReadyList( pxNewTCB );
90012fb0:	f7ff fc2c 	bl	9001280c <prvAddNewTaskToReadyList>
			xReturn = xTimerCreateTimerTask();
90012fb4:	f000 fca2 	bl	900138fc <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
90012fb8:	2801      	cmp	r0, #1
90012fba:	d00c      	beq.n	90012fd6 <vTaskStartScheduler+0xe2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90012fbc:	3001      	adds	r0, #1
90012fbe:	d001      	beq.n	90012fc4 <vTaskStartScheduler+0xd0>
}
90012fc0:	b004      	add	sp, #16
90012fc2:	bd70      	pop	{r4, r5, r6, pc}
90012fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
90012fc8:	f383 8811 	msr	BASEPRI, r3
90012fcc:	f3bf 8f6f 	isb	sy
90012fd0:	f3bf 8f4f 	dsb	sy
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
90012fd4:	e7fe      	b.n	90012fd4 <vTaskStartScheduler+0xe0>
90012fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
90012fda:	f383 8811 	msr	BASEPRI, r3
90012fde:	f3bf 8f6f 	isb	sy
90012fe2:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
90012fe6:	4b0d      	ldr	r3, [pc, #52]	; (9001301c <vTaskStartScheduler+0x128>)
90012fe8:	f04f 32ff 	mov.w	r2, #4294967295
		xSchedulerRunning = pdTRUE;
90012fec:	490c      	ldr	r1, [pc, #48]	; (90013020 <vTaskStartScheduler+0x12c>)
		xNextTaskUnblockTime = portMAX_DELAY;
90012fee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90012ff0:	4b0c      	ldr	r3, [pc, #48]	; (90013024 <vTaskStartScheduler+0x130>)
		traceTASK_SWITCHED_IN();
90012ff2:	4a0d      	ldr	r2, [pc, #52]	; (90013028 <vTaskStartScheduler+0x134>)
		xSchedulerRunning = pdTRUE;
90012ff4:	6008      	str	r0, [r1, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
90012ff6:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
90012ff8:	6813      	ldr	r3, [r2, #0]
		if( xTask == NULL )
90012ffa:	b143      	cbz	r3, 9001300e <vTaskStartScheduler+0x11a>
		if( xTCB->pxTaskTag != NULL )
90012ffc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90012ffe:	b10b      	cbz	r3, 90013004 <vTaskStartScheduler+0x110>
			xReturn = xTCB->pxTaskTag( pvParameter );
90013000:	2000      	movs	r0, #0
90013002:	4798      	blx	r3
}
90013004:	b004      	add	sp, #16
90013006:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		if( xPortStartScheduler() != pdFALSE )
9001300a:	f7fe ba15 	b.w	90011438 <xPortStartScheduler>
			xTCB = pxCurrentTCB;
9001300e:	6813      	ldr	r3, [r2, #0]
90013010:	e7f4      	b.n	90012ffc <vTaskStartScheduler+0x108>
90013012:	bf00      	nop
90013014:	454c4449 	.word	0x454c4449
90013018:	90012a51 	.word	0x90012a51
9001301c:	24025dc0 	.word	0x24025dc0
90013020:	24025de0 	.word	0x24025de0
90013024:	24025e0c 	.word	0x24025e0c
90013028:	24025918 	.word	0x24025918

9001302c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
9001302c:	4a02      	ldr	r2, [pc, #8]	; (90013038 <vTaskSuspendAll+0xc>)
9001302e:	6813      	ldr	r3, [r2, #0]
90013030:	3301      	adds	r3, #1
90013032:	6013      	str	r3, [r2, #0]
}
90013034:	4770      	bx	lr
90013036:	bf00      	nop
90013038:	24025d8c 	.word	0x24025d8c

9001303c <xTaskResumeAll>:
	configASSERT( uxSchedulerSuspended );
9001303c:	4b06      	ldr	r3, [pc, #24]	; (90013058 <xTaskResumeAll+0x1c>)
9001303e:	681b      	ldr	r3, [r3, #0]
90013040:	b943      	cbnz	r3, 90013054 <xTaskResumeAll+0x18>
90013042:	f04f 0350 	mov.w	r3, #80	; 0x50
90013046:	f383 8811 	msr	BASEPRI, r3
9001304a:	f3bf 8f6f 	isb	sy
9001304e:	f3bf 8f4f 	dsb	sy
90013052:	e7fe      	b.n	90013052 <xTaskResumeAll+0x16>
90013054:	f7ff bdf2 	b.w	90012c3c <xTaskResumeAll.part.0>
90013058:	24025d8c 	.word	0x24025d8c

9001305c <xTaskGetTickCount>:
		xTicks = xTickCount;
9001305c:	4b01      	ldr	r3, [pc, #4]	; (90013064 <xTaskGetTickCount+0x8>)
9001305e:	6818      	ldr	r0, [r3, #0]
}
90013060:	4770      	bx	lr
90013062:	bf00      	nop
90013064:	24025e0c 	.word	0x24025e0c

90013068 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90013068:	4b05      	ldr	r3, [pc, #20]	; (90013080 <xTaskIncrementTick+0x18>)
9001306a:	681b      	ldr	r3, [r3, #0]
9001306c:	b90b      	cbnz	r3, 90013072 <xTaskIncrementTick+0xa>
9001306e:	f7ff bd3d 	b.w	90012aec <xTaskIncrementTick.part.0>
		++xPendedTicks;
90013072:	4a04      	ldr	r2, [pc, #16]	; (90013084 <xTaskIncrementTick+0x1c>)
}
90013074:	2000      	movs	r0, #0
		++xPendedTicks;
90013076:	6813      	ldr	r3, [r2, #0]
90013078:	3301      	adds	r3, #1
9001307a:	6013      	str	r3, [r2, #0]
}
9001307c:	4770      	bx	lr
9001307e:	bf00      	nop
90013080:	24025d8c 	.word	0x24025d8c
90013084:	24025dc8 	.word	0x24025dc8

90013088 <vTaskSetApplicationTaskTag>:
	{
90013088:	b538      	push	{r3, r4, r5, lr}
9001308a:	460d      	mov	r5, r1
		if( xTask == NULL )
9001308c:	b138      	cbz	r0, 9001309e <vTaskSetApplicationTaskTag+0x16>
9001308e:	4604      	mov	r4, r0
		taskENTER_CRITICAL();
90013090:	f7fe f940 	bl	90011314 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
90013094:	6565      	str	r5, [r4, #84]	; 0x54
	}
90013096:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
9001309a:	f7fe b95d 	b.w	90011358 <vPortExitCritical>
			xTCB = ( TCB_t * ) pxCurrentTCB;
9001309e:	4b04      	ldr	r3, [pc, #16]	; (900130b0 <vTaskSetApplicationTaskTag+0x28>)
900130a0:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
900130a2:	f7fe f937 	bl	90011314 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
900130a6:	6565      	str	r5, [r4, #84]	; 0x54
	}
900130a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
900130ac:	f7fe b954 	b.w	90011358 <vPortExitCritical>
900130b0:	24025918 	.word	0x24025918

900130b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
900130b4:	4b26      	ldr	r3, [pc, #152]	; (90013150 <vTaskSwitchContext+0x9c>)
900130b6:	681b      	ldr	r3, [r3, #0]
900130b8:	b11b      	cbz	r3, 900130c2 <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
900130ba:	4b26      	ldr	r3, [pc, #152]	; (90013154 <vTaskSwitchContext+0xa0>)
900130bc:	2201      	movs	r2, #1
900130be:	601a      	str	r2, [r3, #0]
900130c0:	4770      	bx	lr
{
900130c2:	b570      	push	{r4, r5, r6, lr}
		xYieldPending = pdFALSE;
900130c4:	4a23      	ldr	r2, [pc, #140]	; (90013154 <vTaskSwitchContext+0xa0>)
		traceTASK_SWITCHED_OUT();
900130c6:	4c24      	ldr	r4, [pc, #144]	; (90013158 <vTaskSwitchContext+0xa4>)
		xYieldPending = pdFALSE;
900130c8:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_OUT();
900130ca:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
900130cc:	2b00      	cmp	r3, #0
900130ce:	d034      	beq.n	9001313a <vTaskSwitchContext+0x86>
		if( xTCB->pxTaskTag != NULL )
900130d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
900130d2:	b10b      	cbz	r3, 900130d8 <vTaskSwitchContext+0x24>
			xReturn = xTCB->pxTaskTag( pvParameter );
900130d4:	2001      	movs	r0, #1
900130d6:	4798      	blx	r3
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900130d8:	4d20      	ldr	r5, [pc, #128]	; (9001315c <vTaskSwitchContext+0xa8>)
900130da:	4921      	ldr	r1, [pc, #132]	; (90013160 <vTaskSwitchContext+0xac>)
900130dc:	682b      	ldr	r3, [r5, #0]
900130de:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900130e2:	0098      	lsls	r0, r3, #2
900130e4:	0092      	lsls	r2, r2, #2
900130e6:	588a      	ldr	r2, [r1, r2]
900130e8:	b942      	cbnz	r2, 900130fc <vTaskSwitchContext+0x48>
900130ea:	b1eb      	cbz	r3, 90013128 <vTaskSwitchContext+0x74>
900130ec:	3b01      	subs	r3, #1
900130ee:	eb03 0283 	add.w	r2, r3, r3, lsl #2
900130f2:	0098      	lsls	r0, r3, #2
900130f4:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
900130f8:	2a00      	cmp	r2, #0
900130fa:	d0f6      	beq.n	900130ea <vTaskSwitchContext+0x36>
900130fc:	18c2      	adds	r2, r0, r3
900130fe:	eb01 0082 	add.w	r0, r1, r2, lsl #2
90013102:	6841      	ldr	r1, [r0, #4]
90013104:	4602      	mov	r2, r0
90013106:	6849      	ldr	r1, [r1, #4]
90013108:	3208      	adds	r2, #8
9001310a:	4291      	cmp	r1, r2
9001310c:	6041      	str	r1, [r0, #4]
9001310e:	d01b      	beq.n	90013148 <vTaskSwitchContext+0x94>
90013110:	68ca      	ldr	r2, [r1, #12]
90013112:	6022      	str	r2, [r4, #0]
90013114:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
90013116:	6823      	ldr	r3, [r4, #0]
		if( xTask == NULL )
90013118:	b1a3      	cbz	r3, 90013144 <vTaskSwitchContext+0x90>
		if( xTCB->pxTaskTag != NULL )
9001311a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001311c:	b11b      	cbz	r3, 90013126 <vTaskSwitchContext+0x72>
			xReturn = xTCB->pxTaskTag( pvParameter );
9001311e:	2000      	movs	r0, #0
}
90013120:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			xReturn = xTCB->pxTaskTag( pvParameter );
90013124:	4718      	bx	r3
}
90013126:	bd70      	pop	{r4, r5, r6, pc}
90013128:	f04f 0350 	mov.w	r3, #80	; 0x50
9001312c:	f383 8811 	msr	BASEPRI, r3
90013130:	f3bf 8f6f 	isb	sy
90013134:	f3bf 8f4f 	dsb	sy
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90013138:	e7fe      	b.n	90013138 <vTaskSwitchContext+0x84>
			xTCB = pxCurrentTCB;
9001313a:	6823      	ldr	r3, [r4, #0]
		if( xTCB->pxTaskTag != NULL )
9001313c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001313e:	2b00      	cmp	r3, #0
90013140:	d1c8      	bne.n	900130d4 <vTaskSwitchContext+0x20>
90013142:	e7c9      	b.n	900130d8 <vTaskSwitchContext+0x24>
			xTCB = pxCurrentTCB;
90013144:	6823      	ldr	r3, [r4, #0]
90013146:	e7e8      	b.n	9001311a <vTaskSwitchContext+0x66>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90013148:	6849      	ldr	r1, [r1, #4]
9001314a:	6041      	str	r1, [r0, #4]
9001314c:	e7e0      	b.n	90013110 <vTaskSwitchContext+0x5c>
9001314e:	bf00      	nop
90013150:	24025d8c 	.word	0x24025d8c
90013154:	24025e10 	.word	0x24025e10
90013158:	24025918 	.word	0x24025918
9001315c:	24025d94 	.word	0x24025d94
90013160:	24025924 	.word	0x24025924

90013164 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
90013164:	b1f0      	cbz	r0, 900131a4 <vTaskPlaceOnEventList+0x40>
{
90013166:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
90013168:	4d1a      	ldr	r5, [pc, #104]	; (900131d4 <vTaskPlaceOnEventList+0x70>)
9001316a:	460c      	mov	r4, r1
9001316c:	6829      	ldr	r1, [r5, #0]
9001316e:	3118      	adds	r1, #24
90013170:	f7fe f83a 	bl	900111e8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
90013174:	4b18      	ldr	r3, [pc, #96]	; (900131d8 <vTaskPlaceOnEventList+0x74>)
90013176:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90013178:	6828      	ldr	r0, [r5, #0]
9001317a:	3004      	adds	r0, #4
9001317c:	f7fe f84c 	bl	90011218 <uxListRemove>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
90013180:	1c63      	adds	r3, r4, #1
90013182:	d020      	beq.n	900131c6 <vTaskPlaceOnEventList+0x62>
			xTimeToWake = xConstTickCount + xTicksToWait;
90013184:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90013186:	682b      	ldr	r3, [r5, #0]
90013188:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9001318a:	d214      	bcs.n	900131b6 <vTaskPlaceOnEventList+0x52>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001318c:	4b13      	ldr	r3, [pc, #76]	; (900131dc <vTaskPlaceOnEventList+0x78>)
9001318e:	6818      	ldr	r0, [r3, #0]
90013190:	6829      	ldr	r1, [r5, #0]
90013192:	3104      	adds	r1, #4
90013194:	f7fe f828 	bl	900111e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
90013198:	4b11      	ldr	r3, [pc, #68]	; (900131e0 <vTaskPlaceOnEventList+0x7c>)
9001319a:	681a      	ldr	r2, [r3, #0]
9001319c:	4294      	cmp	r4, r2
9001319e:	d200      	bcs.n	900131a2 <vTaskPlaceOnEventList+0x3e>
					xNextTaskUnblockTime = xTimeToWake;
900131a0:	601c      	str	r4, [r3, #0]
}
900131a2:	bd70      	pop	{r4, r5, r6, pc}
900131a4:	f04f 0350 	mov.w	r3, #80	; 0x50
900131a8:	f383 8811 	msr	BASEPRI, r3
900131ac:	f3bf 8f6f 	isb	sy
900131b0:	f3bf 8f4f 	dsb	sy
	configASSERT( pxEventList );
900131b4:	e7fe      	b.n	900131b4 <vTaskPlaceOnEventList+0x50>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900131b6:	4b0b      	ldr	r3, [pc, #44]	; (900131e4 <vTaskPlaceOnEventList+0x80>)
900131b8:	6818      	ldr	r0, [r3, #0]
900131ba:	6829      	ldr	r1, [r5, #0]
}
900131bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
900131c0:	3104      	adds	r1, #4
900131c2:	f7fe b811 	b.w	900111e8 <vListInsert>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
900131c6:	6829      	ldr	r1, [r5, #0]
900131c8:	4807      	ldr	r0, [pc, #28]	; (900131e8 <vTaskPlaceOnEventList+0x84>)
900131ca:	3104      	adds	r1, #4
}
900131cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
900131d0:	f7fd bffa 	b.w	900111c8 <vListInsertEnd>
900131d4:	24025918 	.word	0x24025918
900131d8:	24025e0c 	.word	0x24025e0c
900131dc:	2402591c 	.word	0x2402591c
900131e0:	24025dc0 	.word	0x24025dc0
900131e4:	24025920 	.word	0x24025920
900131e8:	24025de4 	.word	0x24025de4

900131ec <vTaskPlaceOnEventListRestricted>:
		configASSERT( pxEventList );
900131ec:	b358      	cbz	r0, 90013246 <vTaskPlaceOnEventListRestricted+0x5a>
	{
900131ee:	b570      	push	{r4, r5, r6, lr}
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
900131f0:	4e1d      	ldr	r6, [pc, #116]	; (90013268 <vTaskPlaceOnEventListRestricted+0x7c>)
900131f2:	460c      	mov	r4, r1
900131f4:	4615      	mov	r5, r2
900131f6:	6831      	ldr	r1, [r6, #0]
900131f8:	3118      	adds	r1, #24
900131fa:	f7fd ffe5 	bl	900111c8 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
900131fe:	b165      	cbz	r5, 9001321a <vTaskPlaceOnEventListRestricted+0x2e>
const TickType_t xConstTickCount = xTickCount;
90013200:	4b1a      	ldr	r3, [pc, #104]	; (9001326c <vTaskPlaceOnEventListRestricted+0x80>)
90013202:	681b      	ldr	r3, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90013204:	6830      	ldr	r0, [r6, #0]
90013206:	3004      	adds	r0, #4
90013208:	f7fe f806 	bl	90011218 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001320c:	6831      	ldr	r1, [r6, #0]
9001320e:	4818      	ldr	r0, [pc, #96]	; (90013270 <vTaskPlaceOnEventListRestricted+0x84>)
90013210:	3104      	adds	r1, #4
	}
90013212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
90013216:	f7fd bfd7 	b.w	900111c8 <vListInsertEnd>
const TickType_t xConstTickCount = xTickCount;
9001321a:	4b14      	ldr	r3, [pc, #80]	; (9001326c <vTaskPlaceOnEventListRestricted+0x80>)
9001321c:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
9001321e:	6830      	ldr	r0, [r6, #0]
90013220:	3004      	adds	r0, #4
90013222:	f7fd fff9 	bl	90011218 <uxListRemove>
			xTimeToWake = xConstTickCount + xTicksToWait;
90013226:	1964      	adds	r4, r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
90013228:	6833      	ldr	r3, [r6, #0]
9001322a:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
9001322c:	d214      	bcs.n	90013258 <vTaskPlaceOnEventListRestricted+0x6c>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
9001322e:	4b11      	ldr	r3, [pc, #68]	; (90013274 <vTaskPlaceOnEventListRestricted+0x88>)
90013230:	6818      	ldr	r0, [r3, #0]
90013232:	6831      	ldr	r1, [r6, #0]
90013234:	3104      	adds	r1, #4
90013236:	f7fd ffd7 	bl	900111e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
9001323a:	4b0f      	ldr	r3, [pc, #60]	; (90013278 <vTaskPlaceOnEventListRestricted+0x8c>)
9001323c:	681a      	ldr	r2, [r3, #0]
9001323e:	4294      	cmp	r4, r2
90013240:	d200      	bcs.n	90013244 <vTaskPlaceOnEventListRestricted+0x58>
					xNextTaskUnblockTime = xTimeToWake;
90013242:	601c      	str	r4, [r3, #0]
	}
90013244:	bd70      	pop	{r4, r5, r6, pc}
90013246:	f04f 0350 	mov.w	r3, #80	; 0x50
9001324a:	f383 8811 	msr	BASEPRI, r3
9001324e:	f3bf 8f6f 	isb	sy
90013252:	f3bf 8f4f 	dsb	sy
		configASSERT( pxEventList );
90013256:	e7fe      	b.n	90013256 <vTaskPlaceOnEventListRestricted+0x6a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90013258:	4b08      	ldr	r3, [pc, #32]	; (9001327c <vTaskPlaceOnEventListRestricted+0x90>)
9001325a:	6818      	ldr	r0, [r3, #0]
9001325c:	6831      	ldr	r1, [r6, #0]
	}
9001325e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
90013262:	3104      	adds	r1, #4
90013264:	f7fd bfc0 	b.w	900111e8 <vListInsert>
90013268:	24025918 	.word	0x24025918
9001326c:	24025e0c 	.word	0x24025e0c
90013270:	24025de4 	.word	0x24025de4
90013274:	2402591c 	.word	0x2402591c
90013278:	24025dc0 	.word	0x24025dc0
9001327c:	24025920 	.word	0x24025920

90013280 <xTaskRemoveFromEventList>:
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90013280:	68c3      	ldr	r3, [r0, #12]
{
90013282:	b530      	push	{r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
90013284:	68dc      	ldr	r4, [r3, #12]
{
90013286:	b083      	sub	sp, #12
	configASSERT( pxUnblockedTCB );
90013288:	b35c      	cbz	r4, 900132e2 <xTaskRemoveFromEventList+0x62>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
9001328a:	f104 0518 	add.w	r5, r4, #24
9001328e:	4628      	mov	r0, r5
90013290:	f7fd ffc2 	bl	90011218 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
90013294:	4b19      	ldr	r3, [pc, #100]	; (900132fc <xTaskRemoveFromEventList+0x7c>)
90013296:	681b      	ldr	r3, [r3, #0]
90013298:	b17b      	cbz	r3, 900132ba <xTaskRemoveFromEventList+0x3a>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
9001329a:	4629      	mov	r1, r5
9001329c:	4818      	ldr	r0, [pc, #96]	; (90013300 <xTaskRemoveFromEventList+0x80>)
9001329e:	f7fd ff93 	bl	900111c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
900132a2:	4b18      	ldr	r3, [pc, #96]	; (90013304 <xTaskRemoveFromEventList+0x84>)
900132a4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900132a6:	681b      	ldr	r3, [r3, #0]
900132a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900132aa:	429a      	cmp	r2, r3
900132ac:	d922      	bls.n	900132f4 <xTaskRemoveFromEventList+0x74>
		xYieldPending = pdTRUE;
900132ae:	2301      	movs	r3, #1
900132b0:	4a15      	ldr	r2, [pc, #84]	; (90013308 <xTaskRemoveFromEventList+0x88>)
		xReturn = pdTRUE;
900132b2:	4618      	mov	r0, r3
		xYieldPending = pdTRUE;
900132b4:	6013      	str	r3, [r2, #0]
}
900132b6:	b003      	add	sp, #12
900132b8:	bd30      	pop	{r4, r5, pc}
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
900132ba:	1d21      	adds	r1, r4, #4
900132bc:	4608      	mov	r0, r1
900132be:	9101      	str	r1, [sp, #4]
900132c0:	f7fd ffaa 	bl	90011218 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
900132c4:	4a11      	ldr	r2, [pc, #68]	; (9001330c <xTaskRemoveFromEventList+0x8c>)
900132c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
900132c8:	6810      	ldr	r0, [r2, #0]
900132ca:	9901      	ldr	r1, [sp, #4]
900132cc:	4283      	cmp	r3, r0
900132ce:	d900      	bls.n	900132d2 <xTaskRemoveFromEventList+0x52>
900132d0:	6013      	str	r3, [r2, #0]
900132d2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
900132d6:	480e      	ldr	r0, [pc, #56]	; (90013310 <xTaskRemoveFromEventList+0x90>)
900132d8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
900132dc:	f7fd ff74 	bl	900111c8 <vListInsertEnd>
900132e0:	e7df      	b.n	900132a2 <xTaskRemoveFromEventList+0x22>
900132e2:	f04f 0350 	mov.w	r3, #80	; 0x50
900132e6:	f383 8811 	msr	BASEPRI, r3
900132ea:	f3bf 8f6f 	isb	sy
900132ee:	f3bf 8f4f 	dsb	sy
	configASSERT( pxUnblockedTCB );
900132f2:	e7fe      	b.n	900132f2 <xTaskRemoveFromEventList+0x72>
		xReturn = pdFALSE;
900132f4:	2000      	movs	r0, #0
}
900132f6:	b003      	add	sp, #12
900132f8:	bd30      	pop	{r4, r5, pc}
900132fa:	bf00      	nop
900132fc:	24025d8c 	.word	0x24025d8c
90013300:	24025dcc 	.word	0x24025dcc
90013304:	24025918 	.word	0x24025918
90013308:	24025e10 	.word	0x24025e10
9001330c:	24025d94 	.word	0x24025d94
90013310:	24025924 	.word	0x24025924

90013314 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90013314:	4a03      	ldr	r2, [pc, #12]	; (90013324 <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
90013316:	4b04      	ldr	r3, [pc, #16]	; (90013328 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90013318:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001331a:	681b      	ldr	r3, [r3, #0]
9001331c:	e9c0 2300 	strd	r2, r3, [r0]
}
90013320:	4770      	bx	lr
90013322:	bf00      	nop
90013324:	24025dc4 	.word	0x24025dc4
90013328:	24025e0c 	.word	0x24025e0c

9001332c <xTaskCheckForTimeOut>:
	configASSERT( pxTimeOut );
9001332c:	b328      	cbz	r0, 9001337a <xTaskCheckForTimeOut+0x4e>
{
9001332e:	b5f0      	push	{r4, r5, r6, r7, lr}
90013330:	460d      	mov	r5, r1
90013332:	b083      	sub	sp, #12
	configASSERT( pxTicksToWait );
90013334:	b1c1      	cbz	r1, 90013368 <xTaskCheckForTimeOut+0x3c>
90013336:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
90013338:	f7fd ffec 	bl	90011314 <vPortEnterCritical>
			if( *pxTicksToWait == portMAX_DELAY )
9001333c:	682b      	ldr	r3, [r5, #0]
		const TickType_t xConstTickCount = xTickCount;
9001333e:	4a1d      	ldr	r2, [pc, #116]	; (900133b4 <xTaskCheckForTimeOut+0x88>)
			if( *pxTicksToWait == portMAX_DELAY )
90013340:	1c58      	adds	r0, r3, #1
		const TickType_t xConstTickCount = xTickCount;
90013342:	6811      	ldr	r1, [r2, #0]
			if( *pxTicksToWait == portMAX_DELAY )
90013344:	d030      	beq.n	900133a8 <xTaskCheckForTimeOut+0x7c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90013346:	f8df c070 	ldr.w	ip, [pc, #112]	; 900133b8 <xTaskCheckForTimeOut+0x8c>
9001334a:	6826      	ldr	r6, [r4, #0]
9001334c:	f8dc 7000 	ldr.w	r7, [ip]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
90013350:	6860      	ldr	r0, [r4, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
90013352:	42be      	cmp	r6, r7
90013354:	d01a      	beq.n	9001338c <xTaskCheckForTimeOut+0x60>
90013356:	4288      	cmp	r0, r1
90013358:	d818      	bhi.n	9001338c <xTaskCheckForTimeOut+0x60>
			xReturn = pdTRUE;
9001335a:	2001      	movs	r0, #1
9001335c:	9001      	str	r0, [sp, #4]
	taskEXIT_CRITICAL();
9001335e:	f7fd fffb 	bl	90011358 <vPortExitCritical>
}
90013362:	9801      	ldr	r0, [sp, #4]
90013364:	b003      	add	sp, #12
90013366:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013368:	f04f 0350 	mov.w	r3, #80	; 0x50
9001336c:	f383 8811 	msr	BASEPRI, r3
90013370:	f3bf 8f6f 	isb	sy
90013374:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTicksToWait );
90013378:	e7fe      	b.n	90013378 <xTaskCheckForTimeOut+0x4c>
9001337a:	f04f 0350 	mov.w	r3, #80	; 0x50
9001337e:	f383 8811 	msr	BASEPRI, r3
90013382:	f3bf 8f6f 	isb	sy
90013386:	f3bf 8f4f 	dsb	sy
	configASSERT( pxTimeOut );
9001338a:	e7fe      	b.n	9001338a <xTaskCheckForTimeOut+0x5e>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
9001338c:	eba1 0e00 	sub.w	lr, r1, r0
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
90013390:	4573      	cmp	r3, lr
90013392:	d90b      	bls.n	900133ac <xTaskCheckForTimeOut+0x80>
			*pxTicksToWait -= xElapsedTime;
90013394:	1a5b      	subs	r3, r3, r1
	pxTimeOut->xOverflowCount = xNumOfOverflows;
90013396:	f8dc 1000 	ldr.w	r1, [ip]
	pxTimeOut->xTimeOnEntering = xTickCount;
9001339a:	6812      	ldr	r2, [r2, #0]
			*pxTicksToWait -= xElapsedTime;
9001339c:	4403      	add	r3, r0
			xReturn = pdFALSE;
9001339e:	2000      	movs	r0, #0
			*pxTicksToWait -= xElapsedTime;
900133a0:	602b      	str	r3, [r5, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
900133a2:	e9c4 1200 	strd	r1, r2, [r4]
			xReturn = pdFALSE;
900133a6:	e7d9      	b.n	9001335c <xTaskCheckForTimeOut+0x30>
				xReturn = pdFALSE;
900133a8:	2000      	movs	r0, #0
900133aa:	e7d7      	b.n	9001335c <xTaskCheckForTimeOut+0x30>
			*pxTicksToWait = 0;
900133ac:	2300      	movs	r3, #0
			xReturn = pdTRUE;
900133ae:	2001      	movs	r0, #1
			*pxTicksToWait = 0;
900133b0:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
900133b2:	e7d3      	b.n	9001335c <xTaskCheckForTimeOut+0x30>
900133b4:	24025e0c 	.word	0x24025e0c
900133b8:	24025dc4 	.word	0x24025dc4

900133bc <vTaskMissedYield>:
	xYieldPending = pdTRUE;
900133bc:	4b01      	ldr	r3, [pc, #4]	; (900133c4 <vTaskMissedYield+0x8>)
900133be:	2201      	movs	r2, #1
900133c0:	601a      	str	r2, [r3, #0]
}
900133c2:	4770      	bx	lr
900133c4:	24025e10 	.word	0x24025e10

900133c8 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
900133c8:	4b01      	ldr	r3, [pc, #4]	; (900133d0 <xTaskGetCurrentTaskHandle+0x8>)
900133ca:	6818      	ldr	r0, [r3, #0]
	}
900133cc:	4770      	bx	lr
900133ce:	bf00      	nop
900133d0:	24025918 	.word	0x24025918

900133d4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
900133d4:	4b05      	ldr	r3, [pc, #20]	; (900133ec <xTaskGetSchedulerState+0x18>)
900133d6:	681b      	ldr	r3, [r3, #0]
900133d8:	b133      	cbz	r3, 900133e8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
900133da:	4b05      	ldr	r3, [pc, #20]	; (900133f0 <xTaskGetSchedulerState+0x1c>)
900133dc:	681b      	ldr	r3, [r3, #0]
				xReturn = taskSCHEDULER_SUSPENDED;
900133de:	2b00      	cmp	r3, #0
900133e0:	bf0c      	ite	eq
900133e2:	2002      	moveq	r0, #2
900133e4:	2000      	movne	r0, #0
900133e6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
900133e8:	2001      	movs	r0, #1
	}
900133ea:	4770      	bx	lr
900133ec:	24025de0 	.word	0x24025de0
900133f0:	24025d8c 	.word	0x24025d8c

900133f4 <xTaskPriorityInherit>:
	{
900133f4:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
900133f6:	4604      	mov	r4, r0
	{
900133f8:	b082      	sub	sp, #8
		if( pxMutexHolder != NULL )
900133fa:	b1c8      	cbz	r0, 90013430 <xTaskPriorityInherit+0x3c>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
900133fc:	4d1d      	ldr	r5, [pc, #116]	; (90013474 <xTaskPriorityInherit+0x80>)
900133fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
90013400:	682a      	ldr	r2, [r5, #0]
90013402:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90013404:	4293      	cmp	r3, r2
90013406:	d215      	bcs.n	90013434 <xTaskPriorityInherit+0x40>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
90013408:	6982      	ldr	r2, [r0, #24]
9001340a:	2a00      	cmp	r2, #0
9001340c:	db04      	blt.n	90013418 <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
9001340e:	682a      	ldr	r2, [r5, #0]
90013410:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90013412:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
90013416:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
90013418:	4e17      	ldr	r6, [pc, #92]	; (90013478 <xTaskPriorityInherit+0x84>)
9001341a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
9001341e:	6962      	ldr	r2, [r4, #20]
90013420:	eb06 0383 	add.w	r3, r6, r3, lsl #2
90013424:	429a      	cmp	r2, r3
90013426:	d00e      	beq.n	90013446 <xTaskPriorityInherit+0x52>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90013428:	682b      	ldr	r3, [r5, #0]
				xReturn = pdTRUE;
9001342a:	2001      	movs	r0, #1
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001342c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001342e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}
90013430:	b002      	add	sp, #8
90013432:	bd70      	pop	{r4, r5, r6, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
90013434:	682b      	ldr	r3, [r5, #0]
90013436:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
90013438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001343a:	4298      	cmp	r0, r3
9001343c:	bf2c      	ite	cs
9001343e:	2000      	movcs	r0, #0
90013440:	2001      	movcc	r0, #1
	}
90013442:	b002      	add	sp, #8
90013444:	bd70      	pop	{r4, r5, r6, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90013446:	1d21      	adds	r1, r4, #4
90013448:	4608      	mov	r0, r1
9001344a:	9101      	str	r1, [sp, #4]
9001344c:	f7fd fee4 	bl	90011218 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90013450:	682a      	ldr	r2, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
90013452:	4b0a      	ldr	r3, [pc, #40]	; (9001347c <xTaskPriorityInherit+0x88>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
90013454:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
90013456:	681a      	ldr	r2, [r3, #0]
90013458:	9901      	ldr	r1, [sp, #4]
9001345a:	4290      	cmp	r0, r2
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
9001345c:	62e0      	str	r0, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
9001345e:	d900      	bls.n	90013462 <xTaskPriorityInherit+0x6e>
90013460:	6018      	str	r0, [r3, #0]
90013462:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90013466:	eb06 0080 	add.w	r0, r6, r0, lsl #2
9001346a:	f7fd fead 	bl	900111c8 <vListInsertEnd>
				xReturn = pdTRUE;
9001346e:	2001      	movs	r0, #1
90013470:	e7de      	b.n	90013430 <xTaskPriorityInherit+0x3c>
90013472:	bf00      	nop
90013474:	24025918 	.word	0x24025918
90013478:	24025924 	.word	0x24025924
9001347c:	24025d94 	.word	0x24025d94

90013480 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
90013480:	b318      	cbz	r0, 900134ca <xTaskPriorityDisinherit+0x4a>
			configASSERT( pxTCB == pxCurrentTCB );
90013482:	4b1f      	ldr	r3, [pc, #124]	; (90013500 <xTaskPriorityDisinherit+0x80>)
	{
90013484:	b510      	push	{r4, lr}
			configASSERT( pxTCB == pxCurrentTCB );
90013486:	681c      	ldr	r4, [r3, #0]
	{
90013488:	b082      	sub	sp, #8
			configASSERT( pxTCB == pxCurrentTCB );
9001348a:	4284      	cmp	r4, r0
9001348c:	d008      	beq.n	900134a0 <xTaskPriorityDisinherit+0x20>
9001348e:	f04f 0350 	mov.w	r3, #80	; 0x50
90013492:	f383 8811 	msr	BASEPRI, r3
90013496:	f3bf 8f6f 	isb	sy
9001349a:	f3bf 8f4f 	dsb	sy
9001349e:	e7fe      	b.n	9001349e <xTaskPriorityDisinherit+0x1e>
			configASSERT( pxTCB->uxMutexesHeld );
900134a0:	6d23      	ldr	r3, [r4, #80]	; 0x50
900134a2:	b14b      	cbz	r3, 900134b8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900134a4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
900134a6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
900134a8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
900134aa:	6523      	str	r3, [r4, #80]	; 0x50
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
900134ac:	4291      	cmp	r1, r2
900134ae:	d000      	beq.n	900134b2 <xTaskPriorityDisinherit+0x32>
900134b0:	b16b      	cbz	r3, 900134ce <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
900134b2:	2000      	movs	r0, #0
	}
900134b4:	b002      	add	sp, #8
900134b6:	bd10      	pop	{r4, pc}
900134b8:	f04f 0350 	mov.w	r3, #80	; 0x50
900134bc:	f383 8811 	msr	BASEPRI, r3
900134c0:	f3bf 8f6f 	isb	sy
900134c4:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
900134c8:	e7fe      	b.n	900134c8 <xTaskPriorityDisinherit+0x48>
	BaseType_t xReturn = pdFALSE;
900134ca:	2000      	movs	r0, #0
	}
900134cc:	4770      	bx	lr
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
900134ce:	1d21      	adds	r1, r4, #4
900134d0:	4608      	mov	r0, r1
900134d2:	9101      	str	r1, [sp, #4]
900134d4:	f7fd fea0 	bl	90011218 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900134d8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
					prvAddTaskToReadyList( pxTCB );
900134da:	4b0a      	ldr	r3, [pc, #40]	; (90013504 <xTaskPriorityDisinherit+0x84>)
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900134dc:	f1c0 0238 	rsb	r2, r0, #56	; 0x38
					prvAddTaskToReadyList( pxTCB );
900134e0:	9901      	ldr	r1, [sp, #4]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
900134e2:	62e0      	str	r0, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
900134e4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
900134e6:	681a      	ldr	r2, [r3, #0]
900134e8:	4290      	cmp	r0, r2
900134ea:	d900      	bls.n	900134ee <xTaskPriorityDisinherit+0x6e>
900134ec:	6018      	str	r0, [r3, #0]
900134ee:	4b06      	ldr	r3, [pc, #24]	; (90013508 <xTaskPriorityDisinherit+0x88>)
900134f0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
900134f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
900134f8:	f7fd fe66 	bl	900111c8 <vListInsertEnd>
					xReturn = pdTRUE;
900134fc:	2001      	movs	r0, #1
		return xReturn;
900134fe:	e7d9      	b.n	900134b4 <xTaskPriorityDisinherit+0x34>
90013500:	24025918 	.word	0x24025918
90013504:	24025d94 	.word	0x24025d94
90013508:	24025924 	.word	0x24025924

9001350c <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
9001350c:	2800      	cmp	r0, #0
9001350e:	d040      	beq.n	90013592 <vTaskPriorityDisinheritAfterTimeout+0x86>
			configASSERT( pxTCB->uxMutexesHeld );
90013510:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
90013512:	b530      	push	{r4, r5, lr}
90013514:	4604      	mov	r4, r0
90013516:	b083      	sub	sp, #12
			configASSERT( pxTCB->uxMutexesHeld );
90013518:	b153      	cbz	r3, 90013530 <vTaskPriorityDisinheritAfterTimeout+0x24>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
9001351a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
9001351c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
9001351e:	4281      	cmp	r1, r0
90013520:	bf38      	it	cc
90013522:	4601      	movcc	r1, r0
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
90013524:	2b01      	cmp	r3, #1
90013526:	d101      	bne.n	9001352c <vTaskPriorityDisinheritAfterTimeout+0x20>
90013528:	428a      	cmp	r2, r1
9001352a:	d10a      	bne.n	90013542 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
9001352c:	b003      	add	sp, #12
9001352e:	bd30      	pop	{r4, r5, pc}
90013530:	f04f 0350 	mov.w	r3, #80	; 0x50
90013534:	f383 8811 	msr	BASEPRI, r3
90013538:	f3bf 8f6f 	isb	sy
9001353c:	f3bf 8f4f 	dsb	sy
			configASSERT( pxTCB->uxMutexesHeld );
90013540:	e7fe      	b.n	90013540 <vTaskPriorityDisinheritAfterTimeout+0x34>
					configASSERT( pxTCB != pxCurrentTCB );
90013542:	4b19      	ldr	r3, [pc, #100]	; (900135a8 <vTaskPriorityDisinheritAfterTimeout+0x9c>)
90013544:	681b      	ldr	r3, [r3, #0]
90013546:	42a3      	cmp	r3, r4
90013548:	d024      	beq.n	90013594 <vTaskPriorityDisinheritAfterTimeout+0x88>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001354a:	69a3      	ldr	r3, [r4, #24]
					pxTCB->uxPriority = uxPriorityToUse;
9001354c:	62e1      	str	r1, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
9001354e:	2b00      	cmp	r3, #0
90013550:	db02      	blt.n	90013558 <vTaskPriorityDisinheritAfterTimeout+0x4c>
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90013552:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
90013556:	61a1      	str	r1, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
90013558:	4d14      	ldr	r5, [pc, #80]	; (900135ac <vTaskPriorityDisinheritAfterTimeout+0xa0>)
9001355a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
9001355e:	6961      	ldr	r1, [r4, #20]
90013560:	eb05 0382 	add.w	r3, r5, r2, lsl #2
90013564:	4299      	cmp	r1, r3
90013566:	d1e1      	bne.n	9001352c <vTaskPriorityDisinheritAfterTimeout+0x20>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
90013568:	1d21      	adds	r1, r4, #4
9001356a:	4608      	mov	r0, r1
9001356c:	9101      	str	r1, [sp, #4]
9001356e:	f7fd fe53 	bl	90011218 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
90013572:	4b0f      	ldr	r3, [pc, #60]	; (900135b0 <vTaskPriorityDisinheritAfterTimeout+0xa4>)
90013574:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
90013576:	681a      	ldr	r2, [r3, #0]
90013578:	9901      	ldr	r1, [sp, #4]
9001357a:	4290      	cmp	r0, r2
9001357c:	d900      	bls.n	90013580 <vTaskPriorityDisinheritAfterTimeout+0x74>
9001357e:	6018      	str	r0, [r3, #0]
90013580:	eb00 0080 	add.w	r0, r0, r0, lsl #2
90013584:	eb05 0080 	add.w	r0, r5, r0, lsl #2
	}
90013588:	b003      	add	sp, #12
9001358a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
						prvAddTaskToReadyList( pxTCB );
9001358e:	f7fd be1b 	b.w	900111c8 <vListInsertEnd>
90013592:	4770      	bx	lr
90013594:	f04f 0350 	mov.w	r3, #80	; 0x50
90013598:	f383 8811 	msr	BASEPRI, r3
9001359c:	f3bf 8f6f 	isb	sy
900135a0:	f3bf 8f4f 	dsb	sy
					configASSERT( pxTCB != pxCurrentTCB );
900135a4:	e7fe      	b.n	900135a4 <vTaskPriorityDisinheritAfterTimeout+0x98>
900135a6:	bf00      	nop
900135a8:	24025918 	.word	0x24025918
900135ac:	24025924 	.word	0x24025924
900135b0:	24025d94 	.word	0x24025d94

900135b4 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
900135b4:	4b04      	ldr	r3, [pc, #16]	; (900135c8 <pvTaskIncrementMutexHeldCount+0x14>)
900135b6:	681a      	ldr	r2, [r3, #0]
900135b8:	b11a      	cbz	r2, 900135c2 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
900135ba:	6819      	ldr	r1, [r3, #0]
900135bc:	6d0a      	ldr	r2, [r1, #80]	; 0x50
900135be:	3201      	adds	r2, #1
900135c0:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
900135c2:	6818      	ldr	r0, [r3, #0]
	}
900135c4:	4770      	bx	lr
900135c6:	bf00      	nop
900135c8:	24025918 	.word	0x24025918

900135cc <prvSwitchTimerLists>:
	}
}
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
900135cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900135d0:	4e22      	ldr	r6, [pc, #136]	; (9001365c <prvSwitchTimerLists+0x90>)
900135d2:	b085      	sub	sp, #20
	if( xTimerQueue != NULL )
900135d4:	f8df 908c 	ldr.w	r9, [pc, #140]	; 90013664 <prvSwitchTimerLists+0x98>
		xMessage.xMessageID = xCommandID;
900135d8:	f04f 0800 	mov.w	r8, #0

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900135dc:	e00d      	b.n	900135fa <prvSwitchTimerLists+0x2e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900135de:	68db      	ldr	r3, [r3, #12]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900135e0:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
900135e2:	681f      	ldr	r7, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900135e4:	1d25      	adds	r5, r4, #4
900135e6:	4628      	mov	r0, r5
900135e8:	f7fd fe16 	bl	90011218 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900135ec:	6a23      	ldr	r3, [r4, #32]
900135ee:	4620      	mov	r0, r4
900135f0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900135f2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
900135f6:	075b      	lsls	r3, r3, #29
900135f8:	d40a      	bmi.n	90013610 <prvSwitchTimerLists+0x44>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
900135fa:	6833      	ldr	r3, [r6, #0]
900135fc:	681a      	ldr	r2, [r3, #0]
900135fe:	2a00      	cmp	r2, #0
90013600:	d1ed      	bne.n	900135de <prvSwitchTimerLists+0x12>
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
90013602:	4a17      	ldr	r2, [pc, #92]	; (90013660 <prvSwitchTimerLists+0x94>)
90013604:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
90013606:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
90013608:	6031      	str	r1, [r6, #0]
}
9001360a:	b005      	add	sp, #20
9001360c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90013610:	69a3      	ldr	r3, [r4, #24]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90013612:	4629      	mov	r1, r5
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
90013614:	443b      	add	r3, r7
			if( xReloadTime > xNextExpireTime )
90013616:	429f      	cmp	r7, r3
90013618:	d205      	bcs.n	90013626 <prvSwitchTimerLists+0x5a>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001361a:	6830      	ldr	r0, [r6, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
9001361c:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
9001361e:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90013620:	f7fd fde2 	bl	900111e8 <vListInsert>
90013624:	e7e9      	b.n	900135fa <prvSwitchTimerLists+0x2e>
	if( xTimerQueue != NULL )
90013626:	f8d9 3000 	ldr.w	r3, [r9]
9001362a:	b16b      	cbz	r3, 90013648 <prvSwitchTimerLists+0x7c>
		xMessage.u.xTimerParameters.pxTimer = xTimer;
9001362c:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
9001362e:	e9cd 8700 	strd	r8, r7, [sp]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90013632:	f7ff fecf 	bl	900133d4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90013636:	2300      	movs	r3, #0
90013638:	4669      	mov	r1, sp
9001363a:	f8d9 0000 	ldr.w	r0, [r9]
9001363e:	461a      	mov	r2, r3
90013640:	f7fe f960 	bl	90011904 <xQueueGenericSend>
				configASSERT( xResult );
90013644:	2800      	cmp	r0, #0
90013646:	d1d8      	bne.n	900135fa <prvSwitchTimerLists+0x2e>
90013648:	f04f 0350 	mov.w	r3, #80	; 0x50
9001364c:	f383 8811 	msr	BASEPRI, r3
90013650:	f3bf 8f6f 	isb	sy
90013654:	f3bf 8f4f 	dsb	sy
90013658:	e7fe      	b.n	90013658 <prvSwitchTimerLists+0x8c>
9001365a:	bf00      	nop
9001365c:	24025e14 	.word	0x24025e14
90013660:	24025e18 	.word	0x24025e18
90013664:	24025f38 	.word	0x24025f38

90013668 <prvTimerTask>:
{
90013668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001366c:	4e9f      	ldr	r6, [pc, #636]	; (900138ec <prvTimerTask+0x284>)
9001366e:	b089      	sub	sp, #36	; 0x24
90013670:	4d9f      	ldr	r5, [pc, #636]	; (900138f0 <prvTimerTask+0x288>)
					portYIELD_WITHIN_API();
90013672:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
90013676:	4c9f      	ldr	r4, [pc, #636]	; (900138f4 <prvTimerTask+0x28c>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
90013678:	6833      	ldr	r3, [r6, #0]
9001367a:	681f      	ldr	r7, [r3, #0]
9001367c:	2f00      	cmp	r7, #0
9001367e:	f000 80b2 	beq.w	900137e6 <prvTimerTask+0x17e>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
90013682:	68db      	ldr	r3, [r3, #12]
90013684:	681f      	ldr	r7, [r3, #0]
	vTaskSuspendAll();
90013686:	f7ff fcd1 	bl	9001302c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
9001368a:	f7ff fce7 	bl	9001305c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
9001368e:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
90013690:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
90013692:	4290      	cmp	r0, r2
90013694:	f0c0 80af 	bcc.w	900137f6 <prvTimerTask+0x18e>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
90013698:	4287      	cmp	r7, r0
	xLastTime = xTimeNow;
9001369a:	6028      	str	r0, [r5, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
9001369c:	f200 80d0 	bhi.w	90013840 <prvTimerTask+0x1d8>
				( void ) xTaskResumeAll();
900136a0:	f7ff fccc 	bl	9001303c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
900136a4:	6832      	ldr	r2, [r6, #0]
900136a6:	68d2      	ldr	r2, [r2, #12]
900136a8:	f8d2 b00c 	ldr.w	fp, [r2, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900136ac:	f10b 0804 	add.w	r8, fp, #4
900136b0:	4640      	mov	r0, r8
900136b2:	f7fd fdb1 	bl	90011218 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
900136b6:	f89b 0028 	ldrb.w	r0, [fp, #40]	; 0x28
900136ba:	0741      	lsls	r1, r0, #29
900136bc:	f100 80d0 	bmi.w	90013860 <prvTimerTask+0x1f8>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900136c0:	f020 0001 	bic.w	r0, r0, #1
900136c4:	f88b 0028 	strb.w	r0, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
900136c8:	f8db 3020 	ldr.w	r3, [fp, #32]
900136cc:	4658      	mov	r0, fp
900136ce:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
900136d0:	2200      	movs	r2, #0
900136d2:	4669      	mov	r1, sp
900136d4:	6820      	ldr	r0, [r4, #0]
900136d6:	f7fe fc01 	bl	90011edc <xQueueReceive>
900136da:	2800      	cmp	r0, #0
900136dc:	d0cc      	beq.n	90013678 <prvTimerTask+0x10>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
900136de:	9b00      	ldr	r3, [sp, #0]
900136e0:	2b00      	cmp	r3, #0
900136e2:	db77      	blt.n	900137d4 <prvTimerTask+0x16c>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
900136e4:	9f02      	ldr	r7, [sp, #8]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
900136e6:	697b      	ldr	r3, [r7, #20]
900136e8:	b113      	cbz	r3, 900136f0 <prvTimerTask+0x88>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
900136ea:	1d38      	adds	r0, r7, #4
900136ec:	f7fd fd94 	bl	90011218 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
900136f0:	f7ff fcb4 	bl	9001305c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900136f4:	682b      	ldr	r3, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900136f6:	4680      	mov	r8, r0
	if( xTimeNow < xLastTime )
900136f8:	4298      	cmp	r0, r3
900136fa:	f0c0 8083 	bcc.w	90013804 <prvTimerTask+0x19c>
			switch( xMessage.xMessageID )
900136fe:	9b00      	ldr	r3, [sp, #0]
	xLastTime = xTimeNow;
90013700:	f8c5 8000 	str.w	r8, [r5]
			switch( xMessage.xMessageID )
90013704:	2b09      	cmp	r3, #9
90013706:	d8e3      	bhi.n	900136d0 <prvTimerTask+0x68>
90013708:	e8df f003 	tbb	[pc, r3]
9001370c:	54050505 	.word	0x54050505
90013710:	05055b3e 	.word	0x05055b3e
90013714:	3e54      	.short	0x3e54
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90013716:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
9001371a:	69ba      	ldr	r2, [r7, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
9001371c:	f043 0301 	orr.w	r3, r3, #1
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90013720:	613f      	str	r7, [r7, #16]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90013722:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
90013726:	9b01      	ldr	r3, [sp, #4]
90013728:	1899      	adds	r1, r3, r2
9001372a:	bf2c      	ite	cs
9001372c:	2001      	movcs	r0, #1
9001372e:	2000      	movcc	r0, #0
	if( xNextExpiryTime <= xTimeNow )
90013730:	4541      	cmp	r1, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
90013732:	6079      	str	r1, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
90013734:	f200 8086 	bhi.w	90013844 <prvTimerTask+0x1dc>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90013738:	eba8 0303 	sub.w	r3, r8, r3
9001373c:	429a      	cmp	r2, r3
9001373e:	f200 80c0 	bhi.w	900138c2 <prvTimerTask+0x25a>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
90013742:	6a3b      	ldr	r3, [r7, #32]
90013744:	4638      	mov	r0, r7
90013746:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
90013748:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001374c:	075b      	lsls	r3, r3, #29
9001374e:	d5bf      	bpl.n	900136d0 <prvTimerTask+0x68>
	if( xTimerQueue != NULL )
90013750:	6823      	ldr	r3, [r4, #0]
90013752:	b183      	cbz	r3, 90013776 <prvTimerTask+0x10e>
		xMessage.xMessageID = xCommandID;
90013754:	2200      	movs	r2, #0
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
90013756:	69bb      	ldr	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90013758:	9706      	str	r7, [sp, #24]
		xMessage.xMessageID = xCommandID;
9001375a:	9204      	str	r2, [sp, #16]
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
9001375c:	9a01      	ldr	r2, [sp, #4]
9001375e:	4413      	add	r3, r2
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90013760:	9305      	str	r3, [sp, #20]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90013762:	f7ff fe37 	bl	900133d4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
90013766:	2300      	movs	r3, #0
90013768:	a904      	add	r1, sp, #16
9001376a:	6820      	ldr	r0, [r4, #0]
9001376c:	461a      	mov	r2, r3
9001376e:	f7fe f8c9 	bl	90011904 <xQueueGenericSend>
							configASSERT( xResult );
90013772:	2800      	cmp	r0, #0
90013774:	d1ac      	bne.n	900136d0 <prvTimerTask+0x68>
90013776:	f04f 0350 	mov.w	r3, #80	; 0x50
9001377a:	f383 8811 	msr	BASEPRI, r3
9001377e:	f3bf 8f6f 	isb	sy
90013782:	f3bf 8f4f 	dsb	sy
90013786:	e7fe      	b.n	90013786 <prvTimerTask+0x11e>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
90013788:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
9001378c:	f043 0301 	orr.w	r3, r3, #1
90013790:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
90013794:	9b01      	ldr	r3, [sp, #4]
90013796:	61bb      	str	r3, [r7, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
90013798:	2b00      	cmp	r3, #0
9001379a:	f000 809e 	beq.w	900138da <prvTimerTask+0x272>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
9001379e:	4443      	add	r3, r8
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900137a0:	1d39      	adds	r1, r7, #4
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
900137a2:	613f      	str	r7, [r7, #16]
	if( xNextExpiryTime <= xTimeNow )
900137a4:	4543      	cmp	r3, r8
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
900137a6:	607b      	str	r3, [r7, #4]
	if( xNextExpiryTime <= xTimeNow )
900137a8:	d856      	bhi.n	90013858 <prvTimerTask+0x1f0>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900137aa:	4b53      	ldr	r3, [pc, #332]	; (900138f8 <prvTimerTask+0x290>)
900137ac:	6818      	ldr	r0, [r3, #0]
900137ae:	f7fd fd1b 	bl	900111e8 <vListInsert>
	return xProcessTimerNow;
900137b2:	e78d      	b.n	900136d0 <prvTimerTask+0x68>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900137b4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900137b8:	f023 0301 	bic.w	r3, r3, #1
900137bc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
					break;
900137c0:	e786      	b.n	900136d0 <prvTimerTask+0x68>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
900137c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
900137c6:	079a      	lsls	r2, r3, #30
900137c8:	d572      	bpl.n	900138b0 <prvTimerTask+0x248>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
900137ca:	f023 0301 	bic.w	r3, r3, #1
900137ce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
900137d2:	e77d      	b.n	900136d0 <prvTimerTask+0x68>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
900137d4:	9b01      	ldr	r3, [sp, #4]
900137d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
900137da:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
900137dc:	9b00      	ldr	r3, [sp, #0]
900137de:	2b00      	cmp	r3, #0
900137e0:	f6ff af76 	blt.w	900136d0 <prvTimerTask+0x68>
900137e4:	e77e      	b.n	900136e4 <prvTimerTask+0x7c>
	vTaskSuspendAll();
900137e6:	f7ff fc21 	bl	9001302c <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
900137ea:	f7ff fc37 	bl	9001305c <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
900137ee:	682a      	ldr	r2, [r5, #0]
	xTimeNow = xTaskGetTickCount();
900137f0:	4682      	mov	sl, r0
	if( xTimeNow < xLastTime )
900137f2:	4282      	cmp	r2, r0
900137f4:	d909      	bls.n	9001380a <prvTimerTask+0x1a2>
		prvSwitchTimerLists();
900137f6:	f7ff fee9 	bl	900135cc <prvSwitchTimerLists>
	xLastTime = xTimeNow;
900137fa:	f8c5 a000 	str.w	sl, [r5]
			( void ) xTaskResumeAll();
900137fe:	f7ff fc1d 	bl	9001303c <xTaskResumeAll>
90013802:	e765      	b.n	900136d0 <prvTimerTask+0x68>
		prvSwitchTimerLists();
90013804:	f7ff fee2 	bl	900135cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
90013808:	e779      	b.n	900136fe <prvTimerTask+0x96>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
9001380a:	4b3b      	ldr	r3, [pc, #236]	; (900138f8 <prvTimerTask+0x290>)
	xLastTime = xTimeNow;
9001380c:	f8c5 a000 	str.w	sl, [r5]
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
90013810:	681a      	ldr	r2, [r3, #0]
90013812:	6812      	ldr	r2, [r2, #0]
90013814:	fab2 f282 	clz	r2, r2
90013818:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
9001381a:	eba7 010a 	sub.w	r1, r7, sl
9001381e:	6820      	ldr	r0, [r4, #0]
90013820:	f7fe ff90 	bl	90012744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
90013824:	f7ff fc0a 	bl	9001303c <xTaskResumeAll>
90013828:	2800      	cmp	r0, #0
9001382a:	f47f af51 	bne.w	900136d0 <prvTimerTask+0x68>
					portYIELD_WITHIN_API();
9001382e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
90013832:	f8c9 3d04 	str.w	r3, [r9, #3332]	; 0xd04
90013836:	f3bf 8f4f 	dsb	sy
9001383a:	f3bf 8f6f 	isb	sy
9001383e:	e747      	b.n	900136d0 <prvTimerTask+0x68>
90013840:	2200      	movs	r2, #0
90013842:	e7ea      	b.n	9001381a <prvTimerTask+0x1b2>
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
90013844:	4543      	cmp	r3, r8
90013846:	d902      	bls.n	9001384e <prvTimerTask+0x1e6>
90013848:	2800      	cmp	r0, #0
9001384a:	f43f af7a 	beq.w	90013742 <prvTimerTask+0xda>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
9001384e:	1d39      	adds	r1, r7, #4
90013850:	6830      	ldr	r0, [r6, #0]
90013852:	f7fd fcc9 	bl	900111e8 <vListInsert>
	return xProcessTimerNow;
90013856:	e73b      	b.n	900136d0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
90013858:	6830      	ldr	r0, [r6, #0]
9001385a:	f7fd fcc5 	bl	900111e8 <vListInsert>
9001385e:	e737      	b.n	900136d0 <prvTimerTask+0x68>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90013860:	f8db 2018 	ldr.w	r2, [fp, #24]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
90013864:	f8cb b010 	str.w	fp, [fp, #16]
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
90013868:	18b8      	adds	r0, r7, r2
	if( xNextExpiryTime <= xTimeNow )
9001386a:	4582      	cmp	sl, r0
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
9001386c:	f8cb 0004 	str.w	r0, [fp, #4]
	if( xNextExpiryTime <= xTimeNow )
90013870:	d322      	bcc.n	900138b8 <prvTimerTask+0x250>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
90013872:	ebaa 0307 	sub.w	r3, sl, r7
90013876:	429a      	cmp	r2, r3
90013878:	d829      	bhi.n	900138ce <prvTimerTask+0x266>
	if( xTimerQueue != NULL )
9001387a:	6823      	ldr	r3, [r4, #0]
9001387c:	b17b      	cbz	r3, 9001389e <prvTimerTask+0x236>
		xMessage.xMessageID = xCommandID;
9001387e:	2300      	movs	r3, #0
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
90013880:	9705      	str	r7, [sp, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
90013882:	f8cd b018 	str.w	fp, [sp, #24]
		xMessage.xMessageID = xCommandID;
90013886:	9304      	str	r3, [sp, #16]
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
90013888:	f7ff fda4 	bl	900133d4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
9001388c:	2300      	movs	r3, #0
9001388e:	a904      	add	r1, sp, #16
90013890:	6820      	ldr	r0, [r4, #0]
90013892:	461a      	mov	r2, r3
90013894:	f7fe f836 	bl	90011904 <xQueueGenericSend>
			configASSERT( xResult );
90013898:	2800      	cmp	r0, #0
9001389a:	f47f af15 	bne.w	900136c8 <prvTimerTask+0x60>
9001389e:	f04f 0350 	mov.w	r3, #80	; 0x50
900138a2:	f383 8811 	msr	BASEPRI, r3
900138a6:	f3bf 8f6f 	isb	sy
900138aa:	f3bf 8f4f 	dsb	sy
900138ae:	e7fe      	b.n	900138ae <prvTimerTask+0x246>
							vPortFree( pxTimer );
900138b0:	4638      	mov	r0, r7
900138b2:	f7fd fc17 	bl	900110e4 <vPortFree>
900138b6:	e70b      	b.n	900136d0 <prvTimerTask+0x68>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
900138b8:	4641      	mov	r1, r8
900138ba:	6830      	ldr	r0, [r6, #0]
900138bc:	f7fd fc94 	bl	900111e8 <vListInsert>
	return xProcessTimerNow;
900138c0:	e702      	b.n	900136c8 <prvTimerTask+0x60>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900138c2:	4b0d      	ldr	r3, [pc, #52]	; (900138f8 <prvTimerTask+0x290>)
900138c4:	1d39      	adds	r1, r7, #4
900138c6:	6818      	ldr	r0, [r3, #0]
900138c8:	f7fd fc8e 	bl	900111e8 <vListInsert>
	return xProcessTimerNow;
900138cc:	e700      	b.n	900136d0 <prvTimerTask+0x68>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
900138ce:	4b0a      	ldr	r3, [pc, #40]	; (900138f8 <prvTimerTask+0x290>)
900138d0:	4641      	mov	r1, r8
900138d2:	6818      	ldr	r0, [r3, #0]
900138d4:	f7fd fc88 	bl	900111e8 <vListInsert>
	return xProcessTimerNow;
900138d8:	e6f6      	b.n	900136c8 <prvTimerTask+0x60>
900138da:	f04f 0350 	mov.w	r3, #80	; 0x50
900138de:	f383 8811 	msr	BASEPRI, r3
900138e2:	f3bf 8f6f 	isb	sy
900138e6:	f3bf 8f4f 	dsb	sy
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
900138ea:	e7fe      	b.n	900138ea <prvTimerTask+0x282>
900138ec:	24025e14 	.word	0x24025e14
900138f0:	24025ee4 	.word	0x24025ee4
900138f4:	24025f38 	.word	0x24025f38
900138f8:	24025e18 	.word	0x24025e18

900138fc <xTimerCreateTimerTask>:
{
900138fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
900138fe:	4c23      	ldr	r4, [pc, #140]	; (9001398c <xTimerCreateTimerTask+0x90>)
{
90013900:	b089      	sub	sp, #36	; 0x24
	taskENTER_CRITICAL();
90013902:	f7fd fd07 	bl	90011314 <vPortEnterCritical>
		if( xTimerQueue == NULL )
90013906:	6825      	ldr	r5, [r4, #0]
90013908:	b335      	cbz	r5, 90013958 <xTimerCreateTimerTask+0x5c>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
9001390a:	f7fd fd25 	bl	90011358 <vPortExitCritical>
	if( xTimerQueue != NULL )
9001390e:	6823      	ldr	r3, [r4, #0]
90013910:	b1cb      	cbz	r3, 90013946 <xTimerCreateTimerTask+0x4a>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
90013912:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90013914:	aa07      	add	r2, sp, #28
90013916:	a906      	add	r1, sp, #24
90013918:	a805      	add	r0, sp, #20
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
9001391a:	2502      	movs	r5, #2
			StackType_t *pxTimerTaskStackBuffer = NULL;
9001391c:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
90013920:	f7fd fb16 	bl	90010f50 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
90013924:	4623      	mov	r3, r4
90013926:	9a07      	ldr	r2, [sp, #28]
90013928:	9500      	str	r5, [sp, #0]
9001392a:	e9dd 0105 	ldrd	r0, r1, [sp, #20]
9001392e:	e9cd 1001 	strd	r1, r0, [sp, #4]
90013932:	4917      	ldr	r1, [pc, #92]	; (90013990 <xTimerCreateTimerTask+0x94>)
90013934:	4817      	ldr	r0, [pc, #92]	; (90013994 <xTimerCreateTimerTask+0x98>)
90013936:	f7ff fa1b 	bl	90012d70 <xTaskCreateStatic>
9001393a:	4b17      	ldr	r3, [pc, #92]	; (90013998 <xTimerCreateTimerTask+0x9c>)
9001393c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
9001393e:	b110      	cbz	r0, 90013946 <xTimerCreateTimerTask+0x4a>
}
90013940:	2001      	movs	r0, #1
90013942:	b009      	add	sp, #36	; 0x24
90013944:	bdf0      	pop	{r4, r5, r6, r7, pc}
90013946:	f04f 0350 	mov.w	r3, #80	; 0x50
9001394a:	f383 8811 	msr	BASEPRI, r3
9001394e:	f3bf 8f6f 	isb	sy
90013952:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
90013956:	e7fe      	b.n	90013956 <xTimerCreateTimerTask+0x5a>
			vListInitialise( &xActiveTimerList1 );
90013958:	4f10      	ldr	r7, [pc, #64]	; (9001399c <xTimerCreateTimerTask+0xa0>)
			vListInitialise( &xActiveTimerList2 );
9001395a:	4e11      	ldr	r6, [pc, #68]	; (900139a0 <xTimerCreateTimerTask+0xa4>)
			vListInitialise( &xActiveTimerList1 );
9001395c:	4638      	mov	r0, r7
9001395e:	f7fd fc23 	bl	900111a8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
90013962:	4630      	mov	r0, r6
90013964:	f7fd fc20 	bl	900111a8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
90013968:	4a0e      	ldr	r2, [pc, #56]	; (900139a4 <xTimerCreateTimerTask+0xa8>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
9001396a:	9500      	str	r5, [sp, #0]
9001396c:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
9001396e:	6017      	str	r7, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90013970:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
90013972:	4a0d      	ldr	r2, [pc, #52]	; (900139a8 <xTimerCreateTimerTask+0xac>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90013974:	4b0d      	ldr	r3, [pc, #52]	; (900139ac <xTimerCreateTimerTask+0xb0>)
			pxOverflowTimerList = &xActiveTimerList2;
90013976:	6016      	str	r6, [r2, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
90013978:	4a0d      	ldr	r2, [pc, #52]	; (900139b0 <xTimerCreateTimerTask+0xb4>)
9001397a:	f7fd fe6d 	bl	90011658 <xQueueGenericCreateStatic>
9001397e:	6020      	str	r0, [r4, #0]
				if( xTimerQueue != NULL )
90013980:	2800      	cmp	r0, #0
90013982:	d0c2      	beq.n	9001390a <xTimerCreateTimerTask+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
90013984:	490b      	ldr	r1, [pc, #44]	; (900139b4 <xTimerCreateTimerTask+0xb8>)
90013986:	f7fe feb5 	bl	900126f4 <vQueueAddToRegistry>
9001398a:	e7be      	b.n	9001390a <xTimerCreateTimerTask+0xe>
9001398c:	24025f38 	.word	0x24025f38
90013990:	9002aea0 	.word	0x9002aea0
90013994:	90013669 	.word	0x90013669
90013998:	24025f3c 	.word	0x24025f3c
9001399c:	24025ebc 	.word	0x24025ebc
900139a0:	24025ed0 	.word	0x24025ed0
900139a4:	24025e14 	.word	0x24025e14
900139a8:	24025e18 	.word	0x24025e18
900139ac:	24025ee8 	.word	0x24025ee8
900139b0:	24025e1c 	.word	0x24025e1c
900139b4:	9002ae98 	.word	0x9002ae98

900139b8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr420_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900139b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pOutAddr2;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900139bc:	4c82      	ldr	r4, [pc, #520]	; (90013bc8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x210>)
{  
900139be:	b091      	sub	sp, #68	; 0x44
900139c0:	9008      	str	r0, [sp, #32]
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900139c2:	fba4 0303 	umull	r0, r3, r4, r3
{  
900139c6:	910d      	str	r1, [sp, #52]	; 0x34
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900139c8:	0a19      	lsrs	r1, r3, #8
{  
900139ca:	920b      	str	r2, [sp, #44]	; 0x2c
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900139cc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_420_BLOCK_SIZE;
900139d0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
900139d4:	4293      	cmp	r3, r2
900139d6:	930f      	str	r3, [sp, #60]	; 0x3c
900139d8:	f240 80f1 	bls.w	90013bbe <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x206>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900139dc:	4b7b      	ldr	r3, [pc, #492]	; (90013bcc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x214>)
900139de:	f8df 81fc 	ldr.w	r8, [pc, #508]	; 90013bdc <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x224>
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900139e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900139e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      if(i == 8)
      {
        pLum = pInBuffer + 128;
      }
      
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900139e6:	691b      	ldr	r3, [r3, #16]
900139e8:	f8df 91f4 	ldr.w	r9, [pc, #500]	; 90013be0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x228>
900139ec:	9305      	str	r3, [sp, #20]
          pLum += 64;                      
        }

        pLum = pLum - 128 + 16;
        
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900139ee:	0053      	lsls	r3, r2, #1
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900139f0:	920a      	str	r2, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900139f2:	910e      	str	r1, [sp, #56]	; 0x38
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
900139f4:	930c      	str	r3, [sp, #48]	; 0x30
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
900139f6:	9a08      	ldr	r2, [sp, #32]
    currentMCU++;
900139f8:	f04f 0e02 	mov.w	lr, #2
900139fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
900139fe:	f502 7080 	add.w	r0, r2, #256	; 0x100
90013a02:	9204      	str	r2, [sp, #16]
90013a04:	010b      	lsls	r3, r1, #4
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90013a06:	3101      	adds	r1, #1
90013a08:	9006      	str	r0, [sp, #24]
90013a0a:	980e      	ldr	r0, [sp, #56]	; 0x38
90013a0c:	910b      	str	r1, [sp, #44]	; 0x2c
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013a0e:	990a      	ldr	r1, [sp, #40]	; 0x28
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*16;
90013a10:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90013a14:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013a18:	fb01 f202 	mul.w	r2, r1, r2
90013a1c:	005b      	lsls	r3, r3, #1
90013a1e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
90013a22:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90013a24:	e009      	b.n	90013a3a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x82>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013a26:	9b05      	ldr	r3, [sp, #20]
90013a28:	9a01      	ldr	r2, [sp, #4]
90013a2a:	4293      	cmp	r3, r2
90013a2c:	d80f      	bhi.n	90013a4e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x96>
    for(i= 0; i <  16; i+=2)
90013a2e:	f1be 0f10 	cmp.w	lr, #16
90013a32:	f000 80bb 	beq.w	90013bac <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x1f4>
90013a36:	f10e 0e02 	add.w	lr, lr, #2
      if(i == 8)
90013a3a:	f1be 0f0a 	cmp.w	lr, #10
90013a3e:	d1f2      	bne.n	90013a26 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x6e>
        pLum = pInBuffer + 128;
90013a40:	9b08      	ldr	r3, [sp, #32]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013a42:	9a01      	ldr	r2, [sp, #4]
90013a44:	3380      	adds	r3, #128	; 0x80
90013a46:	9304      	str	r3, [sp, #16]
90013a48:	9b05      	ldr	r3, [sp, #20]
90013a4a:	4293      	cmp	r3, r2
90013a4c:	d9f3      	bls.n	90013a36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
        pOutAddr = pOutBuffer + refline;
90013a4e:	9a01      	ldr	r2, [sp, #4]
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90013a50:	9906      	ldr	r1, [sp, #24]
        pOutAddr = pOutBuffer + refline;
90013a52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90013a54:	9103      	str	r1, [sp, #12]
        pOutAddr = pOutBuffer + refline;
90013a56:	4413      	add	r3, r2
        pOutAddr2 = pOutAddr + JPEG_ConvertorParams.ScaledWidth;
90013a58:	990a      	ldr	r1, [sp, #40]	; 0x28
90013a5a:	9a04      	ldr	r2, [sp, #16]
90013a5c:	1859      	adds	r1, r3, r1
90013a5e:	f103 0c10 	add.w	ip, r3, #16
90013a62:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
90013a66:	3330      	adds	r3, #48	; 0x30
90013a68:	4696      	mov	lr, r2
90013a6a:	9102      	str	r1, [sp, #8]
        for(k= 0; k<2; k++)
90013a6c:	9307      	str	r3, [sp, #28]
90013a6e:	9b03      	ldr	r3, [sp, #12]
90013a70:	f1ac 0510 	sub.w	r5, ip, #16
          for(j=0; j < 8; j+=2)
90013a74:	4674      	mov	r4, lr
    currentMCU++;
90013a76:	9e02      	ldr	r6, [sp, #8]
90013a78:	1e5f      	subs	r7, r3, #1
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013a7a:	f817 1f01 	ldrb.w	r1, [r7, #1]!
            pOutAddr += JPEG_BYTES_PER_PIXEL * 2;
90013a7e:	3504      	adds	r5, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013a80:	4b53      	ldr	r3, [pc, #332]	; (90013bd0 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x218>)
          for(j=0; j < 8; j+=2)
90013a82:	3402      	adds	r4, #2
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013a84:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90013a88:	3604      	adds	r6, #4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013a8a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
          for(j=0; j < 8; j+=2)
90013a8e:	4565      	cmp	r5, ip
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013a90:	4b50      	ldr	r3, [pc, #320]	; (90013bd4 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x21c>)
            ycomp = (int32_t)(*(pLum +j));
90013a92:	f814 ac02 	ldrb.w	sl, [r4, #-2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013a96:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013a9a:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013a9e:	4449      	add	r1, r9
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013aa0:	4403      	add	r3, r0
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013aa2:	484d      	ldr	r0, [pc, #308]	; (90013bd8 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x220>)
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013aa4:	eb09 4323 	add.w	r3, r9, r3, asr #16
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013aa8:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013aac:	eb01 020a 	add.w	r2, r1, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ab0:	4448      	add	r0, r9
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ab2:	f892 b100 	ldrb.w	fp, [r2, #256]	; 0x100
90013ab6:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013aba:	4482      	add	sl, r0
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013abc:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ac0:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ac4:	ea4f 0292 	mov.w	r2, r2, lsr #2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ac8:	ea4f 0ada 	mov.w	sl, sl, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013acc:	ea4f 1242 	mov.w	r2, r2, lsl #5
90013ad0:	ea42 22ca 	orr.w	r2, r2, sl, lsl #11
90013ad4:	ea42 02db 	orr.w	r2, r2, fp, lsr #3
            *(__IO uint16_t *)pOutAddr = 
90013ad8:	f825 2c04 	strh.w	r2, [r5, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90013adc:	f814 ac01 	ldrb.w	sl, [r4, #-1]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ae0:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ae4:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013ae8:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013aea:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013aee:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013af2:	ea4f 0292 	mov.w	r2, r2, lsr #2
90013af6:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013afa:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013afe:	ea4f 1242 	mov.w	r2, r2, lsl #5
90013b02:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90013b06:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90013b0a:	f825 2c02 	strh.w	r2, [r5, #-2]
            ycomp = (int32_t)(*(pLum +j +8));
90013b0e:	f894 a006 	ldrb.w	sl, [r4, #6]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b12:	eb03 020a 	add.w	r2, r3, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b16:	eb00 0b0a 	add.w	fp, r0, sl
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013b1a:	448a      	add	sl, r1
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b1c:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b20:	f89b b100 	ldrb.w	fp, [fp, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b24:	ea4f 0292 	mov.w	r2, r2, lsr #2
90013b28:	f89a a100 	ldrb.w	sl, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b2c:	ea4f 0bdb 	mov.w	fp, fp, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b30:	ea4f 1242 	mov.w	r2, r2, lsl #5
90013b34:	ea42 22cb 	orr.w	r2, r2, fp, lsl #11
90013b38:	ea42 02da 	orr.w	r2, r2, sl, lsr #3
            *(__IO uint16_t *)pOutAddr2 = 
90013b3c:	f826 2c04 	strh.w	r2, [r6, #-4]
            ycomp = (int32_t)(*(pLum +j +8 +1));
90013b40:	79e2      	ldrb	r2, [r4, #7]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b42:	4413      	add	r3, r2
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b44:	4410      	add	r0, r2
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90013b46:	4411      	add	r1, r2
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b48:	f893 3100 	ldrb.w	r3, [r3, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b4c:	f890 2100 	ldrb.w	r2, [r0, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b50:	ea4f 0393 	mov.w	r3, r3, lsr #2
90013b54:	f891 1100 	ldrb.w	r1, [r1, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013b58:	ea4f 02d2 	mov.w	r2, r2, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013b5c:	ea4f 1343 	mov.w	r3, r3, lsl #5
90013b60:	ea43 23c2 	orr.w	r3, r3, r2, lsl #11
90013b64:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
            *((__IO uint16_t *)(pOutAddr2 +2)) = 
90013b68:	f826 3c02 	strh.w	r3, [r6, #-2]
          for(j=0; j < 8; j+=2)
90013b6c:	d185      	bne.n	90013a7a <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xc2>
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90013b6e:	9b02      	ldr	r3, [sp, #8]
        for(k= 0; k<2; k++)
90013b70:	f105 0c10 	add.w	ip, r5, #16
          pLum += 64;                      
90013b74:	f10e 0e40 	add.w	lr, lr, #64	; 0x40
            pOutAddr2 += JPEG_BYTES_PER_PIXEL * 2;
90013b78:	3310      	adds	r3, #16
90013b7a:	9302      	str	r3, [sp, #8]
            pChrom++;
90013b7c:	9b03      	ldr	r3, [sp, #12]
90013b7e:	3304      	adds	r3, #4
90013b80:	9303      	str	r3, [sp, #12]
        for(k= 0; k<2; k++)
90013b82:	9b07      	ldr	r3, [sp, #28]
90013b84:	4563      	cmp	r3, ip
90013b86:	f47f af72 	bne.w	90013a6e <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0xb6>
            pChrom++;
90013b8a:	9b06      	ldr	r3, [sp, #24]
90013b8c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90013b90:	3308      	adds	r3, #8
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90013b92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    for(i= 0; i <  16; i+=2)
90013b94:	f1be 0f10 	cmp.w	lr, #16
            pChrom++;
90013b98:	9306      	str	r3, [sp, #24]
        pLum = pLum - 128 + 16;
90013b9a:	9b04      	ldr	r3, [sp, #16]
90013b9c:	f103 0310 	add.w	r3, r3, #16
90013ba0:	9304      	str	r3, [sp, #16]
        refline += 2*JPEG_ConvertorParams.ScaledWidth;          
90013ba2:	9b01      	ldr	r3, [sp, #4]
90013ba4:	4413      	add	r3, r2
90013ba6:	9301      	str	r3, [sp, #4]
    for(i= 0; i <  16; i+=2)
90013ba8:	f47f af45 	bne.w	90013a36 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x7e>
      }
    }   
    
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90013bac:	9b08      	ldr	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90013bae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_420_BLOCK_SIZE;
90013bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
90013bb4:	9308      	str	r3, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90013bb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90013bb8:	4293      	cmp	r3, r2
90013bba:	f47f af1c 	bne.w	900139f6 <JPEG_MCU_YCbCr420_ARGB_ConvertBlocks+0x3e>
  }
  return numberMCU;
}
90013bbe:	ee17 0a90 	vmov	r0, s15
90013bc2:	b011      	add	sp, #68	; 0x44
90013bc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013bc8:	aaaaaaab 	.word	0xaaaaaaab
90013bcc:	24026f40 	.word	0x24026f40
90013bd0:	24026340 	.word	0x24026340
90013bd4:	24025f40 	.word	0x24025f40
90013bd8:	24026b40 	.word	0x24026b40
90013bdc:	24026740 	.word	0x24026740
90013be0:	9002aea8 	.word	0x9002aea8

90013be4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr422_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90013be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90013be8:	0a1c      	lsrs	r4, r3, #8
{  
90013bea:	b08d      	sub	sp, #52	; 0x34
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90013bec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / YCBCR_422_BLOCK_SIZE;
90013bf0:	ee07 4a90 	vmov	s15, r4
{  
90013bf4:	9208      	str	r2, [sp, #32]
  while(currentMCU < (numberMCU + BlockIndex))
90013bf6:	429a      	cmp	r2, r3
{  
90013bf8:	9007      	str	r0, [sp, #28]
90013bfa:	9109      	str	r1, [sp, #36]	; 0x24
  while(currentMCU < (numberMCU + BlockIndex))
90013bfc:	930b      	str	r3, [sp, #44]	; 0x2c
90013bfe:	f080 814a 	bcs.w	90013e96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
  {
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90013c02:	4ba7      	ldr	r3, [pc, #668]	; (90013ea0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2bc>)
90013c04:	4da7      	ldr	r5, [pc, #668]	; (90013ea4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c0>)
90013c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
90013c08:	f8df 929c 	ldr.w	r9, [pc, #668]	; 90013ea8 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c4>
90013c0c:	920a      	str	r2, [sp, #40]	; 0x28
    
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013c0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    {
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013c10:	691b      	ldr	r3, [r3, #16]
90013c12:	f8df a298 	ldr.w	sl, [pc, #664]	; 90013eac <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2c8>
90013c16:	f8df b298 	ldr.w	fp, [pc, #664]	; 90013eb0 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2cc>
90013c1a:	f8df 8298 	ldr.w	r8, [pc, #664]	; 90013eb4 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2d0>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013c1e:	9206      	str	r2, [sp, #24]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013c20:	9301      	str	r3, [sp, #4]
90013c22:	e008      	b.n	90013c36 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x52>
        
        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90013c24:	9b07      	ldr	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90013c26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    pInBuffer +=  YCBCR_422_BLOCK_SIZE;
90013c28:	f503 7380 	add.w	r3, r3, #256	; 0x100
90013c2c:	9307      	str	r3, [sp, #28]
  while(currentMCU < (numberMCU + BlockIndex))
90013c2e:	9b08      	ldr	r3, [sp, #32]
90013c30:	4293      	cmp	r3, r2
90013c32:	f000 8130 	beq.w	90013e96 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x2b2>
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90013c36:	9a07      	ldr	r2, [sp, #28]
90013c38:	9908      	ldr	r1, [sp, #32]
90013c3a:	f102 0080 	add.w	r0, r2, #128	; 0x80
90013c3e:	010b      	lsls	r3, r1, #4
90013c40:	3101      	adds	r1, #1
    currentMCU++;
90013c42:	e9cd 0202 	strd	r0, r2, [sp, #8]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90013c46:	980a      	ldr	r0, [sp, #40]	; 0x28
90013c48:	9108      	str	r1, [sp, #32]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013c4a:	9906      	ldr	r1, [sp, #24]
    xRef = ((currentMCU *16) / JPEG_ConvertorParams.WidthExtend)*8;
90013c4c:	fbb3 f2f0 	udiv	r2, r3, r0
    yRef = ((currentMCU *16) % JPEG_ConvertorParams.WidthExtend);
90013c50:	fb00 3312 	mls	r3, r0, r2, r3
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013c54:	fb01 f202 	mul.w	r2, r1, r2
90013c58:	005b      	lsls	r3, r3, #1
90013c5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
90013c5e:	9300      	str	r3, [sp, #0]
    currentMCU++;
90013c60:	2308      	movs	r3, #8
90013c62:	9305      	str	r3, [sp, #20]
       if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013c64:	e9dd 2300 	ldrd	r2, r3, [sp]
90013c68:	4293      	cmp	r3, r2
90013c6a:	d9db      	bls.n	90013c24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
        pOutAddr = pOutBuffer + refline;
90013c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90013c6e:	4413      	add	r3, r2
        for(k= 0; k<2; k++)
90013c70:	9a03      	ldr	r2, [sp, #12]
90013c72:	f102 0140 	add.w	r1, r2, #64	; 0x40
90013c76:	9a02      	ldr	r2, [sp, #8]
90013c78:	f103 0020 	add.w	r0, r3, #32
90013c7c:	3204      	adds	r2, #4
90013c7e:	9004      	str	r0, [sp, #16]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013c80:	f892 003c 	ldrb.w	r0, [r2, #60]	; 0x3c
90013c84:	3310      	adds	r3, #16
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013c86:	f812 4c04 	ldrb.w	r4, [r2, #-4]
        for(k= 0; k<2; k++)
90013c8a:	3140      	adds	r1, #64	; 0x40
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013c8c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
        for(k= 0; k<2; k++)
90013c90:	3204      	adds	r2, #4
            ycomp = (int32_t)(*(pLum +j));
90013c92:	f811 cc80 	ldrb.w	ip, [r1, #-128]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013c96:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013c9a:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013c9c:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90013ca0:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013ca4:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013ca6:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ca8:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013cac:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013cb0:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013cb4:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013cb8:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013cba:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013cbe:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90013cc2:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90013cc6:	08e4      	lsrs	r4, r4, #3
90013cc8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90013ccc:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90013cd0:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90013cd4:	f823 4c10 	strh.w	r4, [r3, #-16]
            ycomp = (int32_t)(*(pLum +j +1));
90013cd8:	f811 4c7f 	ldrb.w	r4, [r1, #-127]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90013cdc:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013cde:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ce0:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ce2:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ce6:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90013cea:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013cee:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013cf0:	08c0      	lsrs	r0, r0, #3
90013cf2:	08a4      	lsrs	r4, r4, #2
90013cf4:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90013cf8:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90013cfc:	f823 0c0e 	strh.w	r0, [r3, #-14]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013d00:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013d04:	f812 4c07 	ldrb.w	r4, [r2, #-7]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013d08:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            ycomp = (int32_t)(*(pLum +j));
90013d0c:	f811 cc7e 	ldrb.w	ip, [r1, #-126]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013d10:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d14:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013d16:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
90013d1a:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013d1e:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013d20:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d22:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d26:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d2a:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013d2e:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d32:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d34:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d38:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90013d3c:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90013d40:	08e4      	lsrs	r4, r4, #3
90013d42:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90013d46:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90013d4a:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90013d4e:	f823 4c0c 	strh.w	r4, [r3, #-12]
            ycomp = (int32_t)(*(pLum +j +1));
90013d52:	f811 4c7d 	ldrb.w	r4, [r1, #-125]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90013d56:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d58:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d5a:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d5c:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d60:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90013d64:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d68:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013d6a:	08c0      	lsrs	r0, r0, #3
90013d6c:	08a4      	lsrs	r4, r4, #2
90013d6e:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90013d72:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90013d76:	f823 0c0a 	strh.w	r0, [r3, #-10]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013d7a:	f812 4c06 	ldrb.w	r4, [r2, #-6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013d7e:	f892 003a 	ldrb.w	r0, [r2, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90013d82:	f811 cc7c 	ldrb.w	ip, [r1, #-124]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013d86:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013d8a:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013d8e:	f85a 0020 	ldr.w	r0, [sl, r0, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d92:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013d94:	f85b 4024 	ldr.w	r4, [fp, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013d98:	4446      	add	r6, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013d9a:	4420      	add	r0, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013d9c:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013da0:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013da4:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013da8:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013dac:	4484      	add	ip, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013dae:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013db2:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
90013db6:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90013dba:	08e4      	lsrs	r4, r4, #3
90013dbc:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90013dc0:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90013dc4:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90013dc8:	f823 4c08 	strh.w	r4, [r3, #-8]
            ycomp = (int32_t)(*(pLum +j +1));
90013dcc:	f811 4c7b 	ldrb.w	r4, [r1, #-123]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90013dd0:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013dd2:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013dd4:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013dd6:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013dda:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90013dde:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013de2:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013de4:	08c0      	lsrs	r0, r0, #3
90013de6:	08a4      	lsrs	r4, r4, #2
90013de8:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90013dec:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90013df0:	f823 0c06 	strh.w	r0, [r3, #-6]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013df4:	f812 0c05 	ldrb.w	r0, [r2, #-5]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013df8:	f892 403b 	ldrb.w	r4, [r2, #59]	; 0x3b
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013dfc:	f85b c020 	ldr.w	ip, [fp, r0, lsl #2]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013e00:	f855 6020 	ldr.w	r6, [r5, r0, lsl #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013e04:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013e08:	f85a 0024 	ldr.w	r0, [sl, r4, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013e0c:	4446      	add	r6, r8
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e0e:	4447      	add	r7, r8
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013e10:	4460      	add	r0, ip
            ycomp = (int32_t)(*(pLum +j));
90013e12:	f811 cc7a 	ldrb.w	ip, [r1, #-122]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e16:	eb07 040c 	add.w	r4, r7, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e1a:	eb08 4020 	add.w	r0, r8, r0, asr #16
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e1e:	f894 e100 	ldrb.w	lr, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);
90013e22:	eb06 040c 	add.w	r4, r6, ip
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e26:	4484      	add	ip, r0
90013e28:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e2c:	ea4f 0ede 	mov.w	lr, lr, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e30:	f89c c100 	ldrb.w	ip, [ip, #256]	; 0x100
90013e34:	08e4      	lsrs	r4, r4, #3
90013e36:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90013e3a:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
90013e3e:	ea44 144c 	orr.w	r4, r4, ip, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90013e42:	f823 4c04 	strh.w	r4, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j +1));
90013e46:	f811 4c79 	ldrb.w	r4, [r1, #-121]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);         
90013e4a:	4426      	add	r6, r4
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e4c:	4427      	add	r7, r4
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e4e:	4404      	add	r4, r0
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e50:	f897 7100 	ldrb.w	r7, [r7, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e54:	f896 0100 	ldrb.w	r0, [r6, #256]	; 0x100
90013e58:	f894 4100 	ldrb.w	r4, [r4, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013e5c:	08fe      	lsrs	r6, r7, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013e5e:	08c0      	lsrs	r0, r0, #3
90013e60:	08a4      	lsrs	r4, r4, #2
90013e62:	ea40 20c6 	orr.w	r0, r0, r6, lsl #11
90013e66:	ea40 1044 	orr.w	r0, r0, r4, lsl #5
            *((__IO uint16_t *)(pOutAddr + 2)) = 
90013e6a:	f823 0c02 	strh.w	r0, [r3, #-2]
        for(k= 0; k<2; k++)
90013e6e:	9804      	ldr	r0, [sp, #16]
90013e70:	4283      	cmp	r3, r0
90013e72:	f47f af05 	bne.w	90013c80 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x9c>
            pChrom++;
90013e76:	9b02      	ldr	r3, [sp, #8]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90013e78:	9a06      	ldr	r2, [sp, #24]
            pChrom++;
90013e7a:	3308      	adds	r3, #8
90013e7c:	9302      	str	r3, [sp, #8]
        pLum = pLum - 128 + 8;
90013e7e:	9b03      	ldr	r3, [sp, #12]
90013e80:	3308      	adds	r3, #8
90013e82:	9303      	str	r3, [sp, #12]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90013e84:	9b00      	ldr	r3, [sp, #0]
90013e86:	4413      	add	r3, r2
90013e88:	9300      	str	r3, [sp, #0]
    for(i= 0; i <  8; i++)
90013e8a:	9b05      	ldr	r3, [sp, #20]
90013e8c:	3b01      	subs	r3, #1
90013e8e:	9305      	str	r3, [sp, #20]
90013e90:	f47f aee8 	bne.w	90013c64 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x80>
90013e94:	e6c6      	b.n	90013c24 <JPEG_MCU_YCbCr422_ARGB_ConvertBlocks+0x40>
  }
  return numberMCU;
}
90013e96:	ee17 0a90 	vmov	r0, s15
90013e9a:	b00d      	add	sp, #52	; 0x34
90013e9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90013ea0:	24026f40 	.word	0x24026f40
90013ea4:	24025f40 	.word	0x24025f40
90013ea8:	24026b40 	.word	0x24026b40
90013eac:	24026740 	.word	0x24026740
90013eb0:	24026340 	.word	0x24026340
90013eb4:	9002aea8 	.word	0x9002aea8

90013eb8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCbCr444_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
90013eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr;
  uint8_t *pChrom, *pLum;
  
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90013ebc:	4cb6      	ldr	r4, [pc, #728]	; (90014198 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e0>)
{  
90013ebe:	b089      	sub	sp, #36	; 0x24
90013ec0:	e9cd 0204 	strd	r0, r2, [sp, #16]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90013ec4:	fba4 0303 	umull	r0, r3, r4, r3
{  
90013ec8:	9102      	str	r1, [sp, #8]
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90013eca:	09d9      	lsrs	r1, r3, #7
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
90013ecc:	eb02 13d3 	add.w	r3, r2, r3, lsr #7
  numberMCU = DataCount / YCBCR_444_BLOCK_SIZE;
90013ed0:	ee07 1a90 	vmov	s15, r1
  while(currentMCU < (numberMCU + BlockIndex))
90013ed4:	429a      	cmp	r2, r3
90013ed6:	9306      	str	r3, [sp, #24]
90013ed8:	f080 8158 	bcs.w	9001418c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90013edc:	4baf      	ldr	r3, [pc, #700]	; (9001419c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e4>)
#elif (JPEG_RGB_FORMAT == JPEG_RGB565)  
            
            ycomp = (int32_t)(*(pLum +j));
          
            *(__IO uint16_t *)pOutAddr = 
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ede:	4cb0      	ldr	r4, [pc, #704]	; (900141a0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2e8>)
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90013ee0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013ee2:	f8df e2c4 	ldr.w	lr, [pc, #708]	; 900141a8 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f0>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90013ee6:	9207      	str	r2, [sp, #28]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013eea:	691b      	ldr	r3, [r3, #16]
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013eec:	f8df c2bc 	ldr.w	ip, [pc, #700]	; 900141ac <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f4>
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013ef0:	48ac      	ldr	r0, [pc, #688]	; (900141a4 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2ec>)
90013ef2:	f8df 82bc 	ldr.w	r8, [pc, #700]	; 900141b0 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2f8>
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013ef6:	9203      	str	r2, [sp, #12]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013ef8:	9300      	str	r3, [sp, #0]
90013efa:	e007      	b.n	90013f0c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x54>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  YCBCR_444_BLOCK_SIZE;
90013efc:	9b04      	ldr	r3, [sp, #16]
90013efe:	33c0      	adds	r3, #192	; 0xc0
90013f00:	9304      	str	r3, [sp, #16]
  while(currentMCU < (numberMCU + BlockIndex))
90013f02:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
90013f06:	4293      	cmp	r3, r2
90013f08:	f000 8140 	beq.w	9001418c <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x2d4>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90013f0c:	9e05      	ldr	r6, [sp, #20]
90013f0e:	9f07      	ldr	r7, [sp, #28]
90013f10:	00f5      	lsls	r5, r6, #3
90013f12:	3601      	adds	r6, #1
90013f14:	9904      	ldr	r1, [sp, #16]
90013f16:	9605      	str	r6, [sp, #20]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013f18:	9e03      	ldr	r6, [sp, #12]
90013f1a:	f101 0340 	add.w	r3, r1, #64	; 0x40
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90013f1e:	fbb5 f2f7 	udiv	r2, r5, r7
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90013f22:	fb07 5512 	mls	r5, r7, r2, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90013f26:	fb06 f202 	mul.w	r2, r6, r2
90013f2a:	006d      	lsls	r5, r5, #1
90013f2c:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
    currentMCU++;   
90013f30:	2508      	movs	r5, #8
90013f32:	9501      	str	r5, [sp, #4]
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90013f34:	9d00      	ldr	r5, [sp, #0]
90013f36:	4295      	cmp	r5, r2
90013f38:	d9e0      	bls.n	90013efc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013f3a:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
          pLum += 8;
90013f3e:	3108      	adds	r1, #8
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013f40:	f893 9000 	ldrb.w	r9, [r3]
            pChrom++;
90013f44:	3308      	adds	r3, #8
            ycomp = (int32_t)(*(pLum +j));
90013f46:	f811 5c08 	ldrb.w	r5, [r1, #-8]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013f4a:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013f4e:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
90013f52:	4425      	add	r5, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013f54:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013f58:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013f5c:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013f5e:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013f60:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013f62:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013f66:	eb05 4929 	add.w	r9, r5, r9, asr #16
90013f6a:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013f6e:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013f70:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90013f74:	08ed      	lsrs	r5, r5, #3
90013f76:	08bf      	lsrs	r7, r7, #2
90013f78:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
            *(__IO uint16_t *)pOutAddr = 
90013f7c:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013f7e:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90013f82:	52ae      	strh	r6, [r5, r2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013f84:	f893 7039 	ldrb.w	r7, [r3, #57]	; 0x39
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013f88:	f813 9c07 	ldrb.w	r9, [r3, #-7]
            ycomp = (int32_t)(*(pLum +j));
90013f8c:	f811 5c07 	ldrb.w	r5, [r1, #-7]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013f90:	f850 a027 	ldr.w	sl, [r0, r7, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013f94:	4425      	add	r5, r4
90013f96:	f85e 6027 	ldr.w	r6, [lr, r7, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013f9a:	f85c 7029 	ldr.w	r7, [ip, r9, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013f9e:	f858 9029 	ldr.w	r9, [r8, r9, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fa2:	442e      	add	r6, r5
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013fa4:	442f      	add	r7, r5
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013fa6:	44d1      	add	r9, sl
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fa8:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013fac:	eb05 4929 	add.w	r9, r5, r9, asr #16
90013fb0:	f897 5100 	ldrb.w	r5, [r7, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fb4:	08f6      	lsrs	r6, r6, #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013fb6:	f899 7100 	ldrb.w	r7, [r9, #256]	; 0x100
90013fba:	08ed      	lsrs	r5, r5, #3
90013fbc:	08bf      	lsrs	r7, r7, #2
90013fbe:	ea45 26c6 	orr.w	r6, r5, r6, lsl #11
        pOutAddr = pOutBuffer+ refline;
90013fc2:	9d02      	ldr	r5, [sp, #8]
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013fc4:	ea46 1647 	orr.w	r6, r6, r7, lsl #5
        pOutAddr = pOutBuffer+ refline;
90013fc8:	4415      	add	r5, r2
            *(__IO uint16_t *)pOutAddr = 
90013fca:	806e      	strh	r6, [r5, #2]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90013fcc:	f893 a03a 	ldrb.w	sl, [r3, #58]	; 0x3a
            ycomp = (int32_t)(*(pLum +j));
90013fd0:	f811 7c06 	ldrb.w	r7, [r1, #-6]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90013fd4:	9e03      	ldr	r6, [sp, #12]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fd6:	4427      	add	r7, r4
90013fd8:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90013fdc:	4432      	add	r2, r6
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90013fde:	f813 6c06 	ldrb.w	r6, [r3, #-6]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fe2:	44b9      	add	r9, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013fe4:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013fe8:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013fec:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013ff0:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90013ff4:	44ba      	add	sl, r7
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90013ff6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90013ffa:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90013ffc:	eb07 4626 	add.w	r6, r7, r6, asr #16
90014000:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
90014004:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90014008:	08ff      	lsrs	r7, r7, #3
9001400a:	08b6      	lsrs	r6, r6, #2
9001400c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90014010:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90014014:	f8a5 9004 	strh.w	r9, [r5, #4]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90014018:	f893 a03b 	ldrb.w	sl, [r3, #59]	; 0x3b
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001401c:	f813 6c05 	ldrb.w	r6, [r3, #-5]
            ycomp = (int32_t)(*(pLum +j));
90014020:	f811 7c05 	ldrb.w	r7, [r1, #-5]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90014024:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014028:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
9001402c:	4427      	add	r7, r4
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001402e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90014032:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014036:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014038:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001403a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001403c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014040:	eb07 4626 	add.w	r6, r7, r6, asr #16
90014044:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014048:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001404c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90014050:	08ff      	lsrs	r7, r7, #3
90014052:	08b6      	lsrs	r6, r6, #2
90014054:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90014058:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001405c:	f8a5 9006 	strh.w	r9, [r5, #6]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90014060:	f893 a03c 	ldrb.w	sl, [r3, #60]	; 0x3c
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
90014064:	f813 6c04 	ldrb.w	r6, [r3, #-4]
            ycomp = (int32_t)(*(pLum +j));
90014068:	f811 7c04 	ldrb.w	r7, [r1, #-4]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001406c:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014070:	4427      	add	r7, r4
90014072:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014076:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001407a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001407e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014080:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90014082:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014084:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014088:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001408c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014090:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014094:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90014098:	08ff      	lsrs	r7, r7, #3
9001409a:	08b6      	lsrs	r6, r6, #2
9001409c:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900140a0:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900140a4:	f8a5 9008 	strh.w	r9, [r5, #8]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900140a8:	f893 a03d 	ldrb.w	sl, [r3, #61]	; 0x3d
            ycomp = (int32_t)(*(pLum +j));
900140ac:	f811 7c03 	ldrb.w	r7, [r1, #-3]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900140b0:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
900140b4:	4427      	add	r7, r4
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900140b6:	f813 6c03 	ldrb.w	r6, [r3, #-3]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900140ba:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900140be:	44b9      	add	r9, r7
900140c0:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900140c4:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900140c8:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
900140cc:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
900140d0:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900140d2:	445e      	add	r6, fp
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
900140d4:	eb07 4626 	add.w	r6, r7, r6, asr #16
900140d8:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
900140dc:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
900140e0:	08ff      	lsrs	r7, r7, #3
900140e2:	08b6      	lsrs	r6, r6, #2
900140e4:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
900140e8:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
900140ec:	f8a5 900a 	strh.w	r9, [r5, #10]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
900140f0:	f893 a03e 	ldrb.w	sl, [r3, #62]	; 0x3e
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
900140f4:	f813 6c02 	ldrb.w	r6, [r3, #-2]
            ycomp = (int32_t)(*(pLum +j));
900140f8:	f811 7c02 	ldrb.w	r7, [r1, #-2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
900140fc:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014100:	4427      	add	r7, r4
90014102:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014106:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001410a:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001410e:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014110:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90014112:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014114:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014118:	eb07 4626 	add.w	r6, r7, r6, asr #16
9001411c:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014120:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014124:	08ff      	lsrs	r7, r7, #3
90014126:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
9001412a:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
9001412e:	08b6      	lsrs	r6, r6, #2
90014130:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
90014134:	f8a5 900c 	strh.w	r9, [r5, #12]
            c_red = (int32_t)(*(CR_RED_LUT + crcomp));          
90014138:	f893 a03f 	ldrb.w	sl, [r3, #63]	; 0x3f
            c_blue = (int32_t)(*(CB_BLUE_LUT + cbcomp));
9001413c:	f813 6c01 	ldrb.w	r6, [r3, #-1]
            ycomp = (int32_t)(*(pLum +j));
90014140:	f811 7c01 	ldrb.w	r7, [r1, #-1]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014144:	f85e 902a 	ldr.w	r9, [lr, sl, lsl #2]
90014148:	4427      	add	r7, r4
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001414a:	f850 b02a 	ldr.w	fp, [r0, sl, lsl #2]
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
9001414e:	f85c a026 	ldr.w	sl, [ip, r6, lsl #2]
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
90014152:	f858 6026 	ldr.w	r6, [r8, r6, lsl #2]
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014156:	44b9      	add	r9, r7
              ((CLAMP(ycomp + c_blue) >> 3) << JPEG_BLUE_OFFSET);      
90014158:	44ba      	add	sl, r7
            c_green = ((int32_t)(*(CR_GREEN_LUT + crcomp)) + (int32_t)(*(CB_GREEN_LUT + cbcomp))) >> 16;      
9001415a:	445e      	add	r6, fp
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
9001415c:	f899 9100 	ldrb.w	r9, [r9, #256]	; 0x100
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
90014160:	eb07 4626 	add.w	r6, r7, r6, asr #16
90014164:	f89a 7100 	ldrb.w	r7, [sl, #256]	; 0x100
              ((CLAMP(ycomp + c_red) >> 3) << JPEG_RED_OFFSET)     | \
90014168:	ea4f 09d9 	mov.w	r9, r9, lsr #3
              ((CLAMP( ycomp + c_green) >> 2) << JPEG_GREEN_OFFSET) | \
9001416c:	f896 6100 	ldrb.w	r6, [r6, #256]	; 0x100
90014170:	08ff      	lsrs	r7, r7, #3
90014172:	08b6      	lsrs	r6, r6, #2
90014174:	ea47 29c9 	orr.w	r9, r7, r9, lsl #11
90014178:	ea49 1946 	orr.w	r9, r9, r6, lsl #5
            *(__IO uint16_t *)pOutAddr = 
9001417c:	f8a5 900e 	strh.w	r9, [r5, #14]
    for(i= 0; i <  8; i++)
90014180:	9d01      	ldr	r5, [sp, #4]
90014182:	3d01      	subs	r5, #1
90014184:	9501      	str	r5, [sp, #4]
90014186:	f47f aed5 	bne.w	90013f34 <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x7c>
9001418a:	e6b7      	b.n	90013efc <JPEG_MCU_YCbCr444_ARGB_ConvertBlocks+0x44>
  }
  return numberMCU;
}
9001418c:	ee17 0a90 	vmov	r0, s15
90014190:	b009      	add	sp, #36	; 0x24
90014192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014196:	bf00      	nop
90014198:	aaaaaaab 	.word	0xaaaaaaab
9001419c:	24026f40 	.word	0x24026f40
900141a0:	9002aea8 	.word	0x9002aea8
900141a4:	24026740 	.word	0x24026740
900141a8:	24026b40 	.word	0x24026b40
900141ac:	24025f40 	.word	0x24025f40
900141b0:	24026340 	.word	0x24026340

900141b4 <JPEG_MCU_Gray_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_Gray_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer,
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{
900141b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

  
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
  currentMCU = BlockIndex;
  
  while(currentMCU < (numberMCU + BlockIndex))
900141b8:	eb02 1a93 	add.w	sl, r2, r3, lsr #6
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
900141bc:	099c      	lsrs	r4, r3, #6
  while(currentMCU < (numberMCU + BlockIndex))
900141be:	4552      	cmp	r2, sl
  numberMCU = DataCount / GRAY_444_BLOCK_SIZE;
900141c0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900141c4:	f080 8088 	bcs.w	900142d8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
  {
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900141c8:	4b45      	ldr	r3, [pc, #276]	; (900142e0 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x12c>)
    
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
    
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900141ca:	e9d3 9809 	ldrd	r9, r8, [r3, #36]	; 0x24
    pLum = pInBuffer;
    
    for(i= 0; i <  8; i++)
    { 
      pOutAddr = pOutBuffer + refline;
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900141ce:	691e      	ldr	r6, [r3, #16]
900141d0:	e003      	b.n	900141da <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x26>
  while(currentMCU < (numberMCU + BlockIndex))
900141d2:	4552      	cmp	r2, sl

        refline += JPEG_ConvertorParams.ScaledWidth;        
      }
    }
    
    pInBuffer +=  GRAY_444_BLOCK_SIZE;    
900141d4:	f100 0040 	add.w	r0, r0, #64	; 0x40
  while(currentMCU < (numberMCU + BlockIndex))
900141d8:	d07e      	beq.n	900142d8 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x124>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900141da:	00d5      	lsls	r5, r2, #3
    currentMCU++;
900141dc:	4604      	mov	r4, r0
900141de:	f04f 0e08 	mov.w	lr, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900141e2:	3201      	adds	r2, #1
900141e4:	fbb5 f7f9 	udiv	r7, r5, r9
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
900141e8:	fb09 5317 	mls	r3, r9, r7, r5
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
900141ec:	fb08 f707 	mul.w	r7, r8, r7
900141f0:	005b      	lsls	r3, r3, #1
900141f2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
900141f6:	429e      	cmp	r6, r3
900141f8:	d9eb      	bls.n	900141d2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
          ySample =   (uint32_t)(*pLum);
900141fa:	f894 c000 	ldrb.w	ip, [r4]
      pOutAddr = pOutBuffer + refline;
900141fe:	18cd      	adds	r5, r1, r3
          pLum++;
90014200:	3408      	adds	r4, #8
    for(i= 0; i <  8; i++)
90014202:	f1be 0e01 	subs.w	lr, lr, #1
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90014206:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001420a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001420e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90014212:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90014216:	ea47 070c 	orr.w	r7, r7, ip
9001421a:	52cf      	strh	r7, [r1, r3]
        refline += JPEG_ConvertorParams.ScaledWidth;        
9001421c:	4443      	add	r3, r8
          ySample =   (uint32_t)(*pLum);
9001421e:	f814 cc07 	ldrb.w	ip, [r4, #-7]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90014222:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90014226:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001422a:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001422e:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90014232:	ea47 070c 	orr.w	r7, r7, ip
90014236:	806f      	strh	r7, [r5, #2]
          ySample =   (uint32_t)(*pLum);
90014238:	f814 cc06 	ldrb.w	ip, [r4, #-6]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001423c:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90014240:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90014244:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90014248:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001424c:	ea47 070c 	orr.w	r7, r7, ip
90014250:	80af      	strh	r7, [r5, #4]
          ySample =   (uint32_t)(*pLum);
90014252:	f814 cc05 	ldrb.w	ip, [r4, #-5]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90014256:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001425a:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
9001425e:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90014262:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90014266:	ea47 070c 	orr.w	r7, r7, ip
9001426a:	80ef      	strh	r7, [r5, #6]
          ySample =   (uint32_t)(*pLum);
9001426c:	f814 cc04 	ldrb.w	ip, [r4, #-4]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
90014270:	ea4f 07dc 	mov.w	r7, ip, lsr #3
90014274:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90014278:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
9001427c:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
90014280:	ea47 070c 	orr.w	r7, r7, ip
90014284:	812f      	strh	r7, [r5, #8]
          ySample =   (uint32_t)(*pLum);
90014286:	f814 cc03 	ldrb.w	ip, [r4, #-3]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
9001428a:	ea4f 07dc 	mov.w	r7, ip, lsr #3
9001428e:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
90014292:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
90014296:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
9001429a:	ea47 070c 	orr.w	r7, r7, ip
9001429e:	816f      	strh	r7, [r5, #10]
          ySample =   (uint32_t)(*pLum);
900142a0:	f814 cc02 	ldrb.w	ip, [r4, #-2]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900142a4:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900142a8:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900142ac:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900142b0:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900142b4:	ea47 070c 	orr.w	r7, r7, ip
900142b8:	81af      	strh	r7, [r5, #12]
          ySample =   (uint32_t)(*pLum);
900142ba:	f814 cc01 	ldrb.w	ip, [r4, #-1]
          *(__IO uint16_t *)pOutAddr = ((ySample >> 3) << 11) |  ((ySample >> 2) << 5) | (ySample >> 3);     
900142be:	ea4f 07dc 	mov.w	r7, ip, lsr #3
900142c2:	ea4f 0c9c 	mov.w	ip, ip, lsr #2
900142c6:	ea4f 2bc7 	mov.w	fp, r7, lsl #11
900142ca:	ea4b 1c4c 	orr.w	ip, fp, ip, lsl #5
900142ce:	ea47 070c 	orr.w	r7, r7, ip
900142d2:	81ef      	strh	r7, [r5, #14]
    for(i= 0; i <  8; i++)
900142d4:	d18f      	bne.n	900141f6 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x42>
900142d6:	e77c      	b.n	900141d2 <JPEG_MCU_Gray_ARGB_ConvertBlocks+0x1e>
  }
  return numberMCU;
}
900142d8:	ee17 0a90 	vmov	r0, s15
900142dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900142e0:	24026f40 	.word	0x24026f40

900142e4 <JPEG_MCU_YCCK_ARGB_ConvertBlocks>:
static uint32_t JPEG_MCU_YCCK_ARGB_ConvertBlocks(uint8_t *pInBuffer, 
                                      uint8_t *pOutBuffer, 
                                      uint32_t BlockIndex,
                                      uint32_t DataCount,
                                      uint32_t *ConvertedDataCount)
{  
900142e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  
  int32_t c_red, c_blue, c_green;
  
  uint8_t *pOutAddr, *pChrom;
  
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900142e8:	0a1c      	lsrs	r4, r3, #8
{  
900142ea:	b083      	sub	sp, #12
  currentMCU = BlockIndex;
  

  while(currentMCU < (numberMCU + BlockIndex))
900142ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
  numberMCU = DataCount / CMYK_444_BLOCK_SIZE;
900142f0:	ee07 4a90 	vmov	s15, r4
  while(currentMCU < (numberMCU + BlockIndex))
900142f4:	429a      	cmp	r2, r3
900142f6:	9301      	str	r3, [sp, #4]
900142f8:	f080 8128 	bcs.w	9001454c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
  {

    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
900142fc:	4b96      	ldr	r3, [pc, #600]	; (90014558 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x274>)
        pOutAddr = pOutBuffer+ refline;        

          for(j=0; j < 8; j++)
          {           
            color_k = (int32_t)(*(pChrom + 192));
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900142fe:	f8df c25c 	ldr.w	ip, [pc, #604]	; 9001455c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x278>
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90014302:	691f      	ldr	r7, [r3, #16]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90014304:	e9d3 a909 	ldrd	sl, r9, [r3, #36]	; 0x24
90014308:	e006      	b.n	90014318 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x34>

        refline += JPEG_ConvertorParams.ScaledWidth;          
      }
    }   
    
    pInBuffer +=  CMYK_444_BLOCK_SIZE;
9001430a:	9a00      	ldr	r2, [sp, #0]
9001430c:	f500 7080 	add.w	r0, r0, #256	; 0x100
  while(currentMCU < (numberMCU + BlockIndex))
90014310:	9b01      	ldr	r3, [sp, #4]
90014312:	429a      	cmp	r2, r3
90014314:	f000 811a 	beq.w	9001454c <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x268>
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
90014318:	00d3      	lsls	r3, r2, #3
    currentMCU++;
9001431a:	f04f 0808 	mov.w	r8, #8
    xRef = ((currentMCU *8) / JPEG_ConvertorParams.WidthExtend)*8;
9001431e:	3201      	adds	r2, #1
90014320:	fbb3 f4fa 	udiv	r4, r3, sl
    yRef = ((currentMCU *8) % JPEG_ConvertorParams.WidthExtend);
90014324:	fb0a 3514 	mls	r5, sl, r4, r3
    currentMCU++;
90014328:	4603      	mov	r3, r0
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
9001432a:	fb09 f404 	mul.w	r4, r9, r4
9001432e:	006d      	lsls	r5, r5, #1
    currentMCU++;
90014330:	9200      	str	r2, [sp, #0]
    refline = JPEG_ConvertorParams.ScaledWidth * xRef + (JPEG_BYTES_PER_PIXEL*yRef);
90014332:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
      if(refline < JPEG_ConvertorParams.ImageSize_Bytes)
90014336:	42af      	cmp	r7, r5
90014338:	d9e7      	bls.n	9001430a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
            color_k = (int32_t)(*(pChrom + 192));
9001433a:	f893 b0c0 	ldrb.w	fp, [r3, #192]	; 0xc0
        pOutAddr = pOutBuffer+ refline;        
9001433e:	194e      	adds	r6, r1, r5
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014340:	f893 e040 	ldrb.w	lr, [r3, #64]	; 0x40
    for(i= 0; i <  8; i++)
90014344:	f1b8 0801 	subs.w	r8, r8, #1
            pChrom++;
90014348:	f103 0308 	add.w	r3, r3, #8
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001434c:	fb1e fe0b 	smulbb	lr, lr, fp
90014350:	fbac 4e0e 	umull	r4, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014354:	f813 4c08 	ldrb.w	r4, [r3, #-8]
90014358:	fb14 f40b 	smulbb	r4, r4, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001435c:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014360:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90014364:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90014368:	ea4f 2494 	mov.w	r4, r4, lsr #10
9001436c:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90014370:	f893 e078 	ldrb.w	lr, [r3, #120]	; 0x78
90014374:	fb1e fb0b 	smulbb	fp, lr, fp
90014378:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001437c:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014380:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014382:	534c      	strh	r4, [r1, r5]
        refline += JPEG_ConvertorParams.ScaledWidth;          
90014384:	444d      	add	r5, r9
            color_k = (int32_t)(*(pChrom + 192));
90014386:	f893 b0b9 	ldrb.w	fp, [r3, #185]	; 0xb9
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001438a:	f893 e039 	ldrb.w	lr, [r3, #57]	; 0x39
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001438e:	f813 4c07 	ldrb.w	r4, [r3, #-7]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014392:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014396:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001439a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001439e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143a2:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900143a6:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143aa:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900143ae:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900143b2:	f893 e079 	ldrb.w	lr, [r3, #121]	; 0x79
900143b6:	fb1e fb0b 	smulbb	fp, lr, fp
900143ba:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143be:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900143c2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
900143c4:	8074      	strh	r4, [r6, #2]
            color_k = (int32_t)(*(pChrom + 192));
900143c6:	f893 b0ba 	ldrb.w	fp, [r3, #186]	; 0xba
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900143ca:	f893 e03a 	ldrb.w	lr, [r3, #58]	; 0x3a
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900143ce:	f813 4c06 	ldrb.w	r4, [r3, #-6]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900143d2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900143d6:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900143da:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900143de:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143e2:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900143e6:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143ea:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900143ee:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900143f2:	f893 e07a 	ldrb.w	lr, [r3, #122]	; 0x7a
900143f6:	fb1e fb0b 	smulbb	fp, lr, fp
900143fa:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900143fe:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014402:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014404:	80b4      	strh	r4, [r6, #4]
            color_k = (int32_t)(*(pChrom + 192));
90014406:	f893 b0bb 	ldrb.w	fp, [r3, #187]	; 0xbb
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001440a:	f893 e03b 	ldrb.w	lr, [r3, #59]	; 0x3b
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001440e:	f813 4c05 	ldrb.w	r4, [r3, #-5]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014412:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014416:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001441a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001441e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90014422:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90014426:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001442a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9001442e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90014432:	f893 e07b 	ldrb.w	lr, [r3, #123]	; 0x7b
90014436:	fb1e fb0b 	smulbb	fp, lr, fp
9001443a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001443e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014442:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014444:	80f4      	strh	r4, [r6, #6]
            color_k = (int32_t)(*(pChrom + 192));
90014446:	f893 b0bc 	ldrb.w	fp, [r3, #188]	; 0xbc
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001444a:	f893 e03c 	ldrb.w	lr, [r3, #60]	; 0x3c
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001444e:	f813 4c04 	ldrb.w	r4, [r3, #-4]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014452:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014456:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001445a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001445e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90014462:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90014466:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001446a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9001446e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90014472:	f893 e07c 	ldrb.w	lr, [r3, #124]	; 0x7c
90014476:	fb1e fb0b 	smulbb	fp, lr, fp
9001447a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001447e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014482:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014484:	8134      	strh	r4, [r6, #8]
            color_k = (int32_t)(*(pChrom + 192));
90014486:	f893 b0bd 	ldrb.w	fp, [r3, #189]	; 0xbd
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001448a:	f893 e03d 	ldrb.w	lr, [r3, #61]	; 0x3d
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001448e:	f813 4c03 	ldrb.w	r4, [r3, #-3]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014492:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014496:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001449a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001449e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900144a2:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900144a6:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900144aa:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900144ae:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900144b2:	f893 e07d 	ldrb.w	lr, [r3, #125]	; 0x7d
900144b6:	fb1e fb0b 	smulbb	fp, lr, fp
900144ba:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900144be:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
900144c2:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
900144c4:	8174      	strh	r4, [r6, #10]
            color_k = (int32_t)(*(pChrom + 192));
900144c6:	f893 b0be 	ldrb.w	fp, [r3, #190]	; 0xbe
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900144ca:	f813 ec02 	ldrb.w	lr, [r3, #-2]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900144ce:	f893 403e 	ldrb.w	r4, [r3, #62]	; 0x3e
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900144d2:	fb1e fe0b 	smulbb	lr, lr, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900144d6:	fb14 f40b 	smulbb	r4, r4, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
900144da:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
900144de:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900144e2:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900144e6:	ea4f 2454 	mov.w	r4, r4, lsr #9
900144ea:	ea4f 1444 	mov.w	r4, r4, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
900144ee:	ea44 24ce 	orr.w	r4, r4, lr, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
900144f2:	f893 e07e 	ldrb.w	lr, [r3, #126]	; 0x7e
900144f6:	fb1e fb0b 	smulbb	fp, lr, fp
900144fa:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
900144fe:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014502:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014504:	81b4      	strh	r4, [r6, #12]
            color_k = (int32_t)(*(pChrom + 192));
90014506:	f893 b0bf 	ldrb.w	fp, [r3, #191]	; 0xbf
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001450a:	f893 e03f 	ldrb.w	lr, [r3, #63]	; 0x3f
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001450e:	f813 4c01 	ldrb.w	r4, [r3, #-1]
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
90014512:	fb1e fe0b 	smulbb	lr, lr, fp
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
90014516:	fb14 f40b 	smulbb	r4, r4, fp
            c_green = (color_k * (int32_t)(*(pChrom + 64)))/255;
9001451a:	fbac 2e0e 	umull	r2, lr, ip, lr
            c_red = (color_k * ((int32_t)(*pChrom)))/255;
9001451e:	fbac 2404 	umull	r2, r4, ip, r4
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
90014522:	ea4f 2e5e 	mov.w	lr, lr, lsr #9
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
90014526:	ea4f 2494 	mov.w	r4, r4, lsr #10
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001452a:	ea4f 1e4e 	mov.w	lr, lr, lsl #5
            ((c_red >> 3) << JPEG_RED_OFFSET)     | \
9001452e:	ea4e 24c4 	orr.w	r4, lr, r4, lsl #11
            c_blue = (color_k * (int32_t)(*(pChrom + 128)))/255;
90014532:	f893 e07f 	ldrb.w	lr, [r3, #127]	; 0x7f
90014536:	fb1e fb0b 	smulbb	fp, lr, fp
9001453a:	fbac 2e0b 	umull	r2, lr, ip, fp
            ((c_green >> 2) << JPEG_GREEN_OFFSET) | \
9001453e:	ea44 249e 	orr.w	r4, r4, lr, lsr #10
90014542:	b2a4      	uxth	r4, r4
          *(__IO uint16_t *)pOutAddr = 
90014544:	81f4      	strh	r4, [r6, #14]
    for(i= 0; i <  8; i++)
90014546:	f47f aef6 	bne.w	90014336 <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x52>
9001454a:	e6de      	b.n	9001430a <JPEG_MCU_YCCK_ARGB_ConvertBlocks+0x26>
  }
  return numberMCU;
}
9001454c:	ee17 0a90 	vmov	r0, s15
90014550:	b003      	add	sp, #12
90014552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90014556:	bf00      	nop
90014558:	24026f40 	.word	0x24026f40
9001455c:	80808081 	.word	0x80808081

90014560 <JPEG_GetDecodeColorConvertFunc>:
  *                      depending of the jpeg image color space and chroma sampling info. 
  * @param ImageNbMCUs : pointer to uint32_t, used to retrive the total number of MCU blocks in the jpeg image.  
  * @retval HAL status : HAL_OK or HAL_ERROR.
  */
HAL_StatusTypeDef JPEG_GetDecodeColorConvertFunc(JPEG_ConfTypeDef *pJpegInfo, JPEG_YCbCrToRGB_Convert_Function *pFunction, uint32_t *ImageNbMCUs)
{
90014560:	b4f0      	push	{r4, r5, r6, r7}
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
  
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
90014562:	e9d0 7601 	ldrd	r7, r6, [r0, #4]
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90014566:	68c5      	ldr	r5, [r0, #12]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90014568:	6804      	ldr	r4, [r0, #0]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9001456a:	fb06 f005 	mul.w	r0, r6, r5
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
9001456e:	4b31      	ldr	r3, [pc, #196]	; (90014634 <JPEG_GetDecodeColorConvertFunc+0xd4>)
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90014570:	2c10      	cmp	r4, #16
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
90014572:	ea4f 0040 	mov.w	r0, r0, lsl #1
  JPEG_ConvertorParams.ImageWidth = pJpegInfo->ImageWidth;
90014576:	609d      	str	r5, [r3, #8]
  JPEG_ConvertorParams.ColorSpace = pJpegInfo->ColorSpace;
90014578:	601c      	str	r4, [r3, #0]
  JPEG_ConvertorParams.ImageHeight = pJpegInfo->ImageHeight;
9001457a:	60de      	str	r6, [r3, #12]
  JPEG_ConvertorParams.ChromaSubsampling = pJpegInfo->ChromaSubsampling;  
9001457c:	605f      	str	r7, [r3, #4]
  JPEG_ConvertorParams.ImageSize_Bytes = pJpegInfo->ImageWidth * pJpegInfo->ImageHeight * JPEG_BYTES_PER_PIXEL;
9001457e:	6118      	str	r0, [r3, #16]
  if(JPEG_ConvertorParams.ColorSpace == JPEG_YCBCR_COLORSPACE)
90014580:	d02b      	beq.n	900145da <JPEG_GetDecodeColorConvertFunc+0x7a>
      }
      JPEG_ConvertorParams.H_factor = 8;
      JPEG_ConvertorParams.V_factor  = 8;
    }   
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_GRAYSCALE_COLORSPACE)
90014582:	b9fc      	cbnz	r4, 900145c4 <JPEG_GetDecodeColorConvertFunc+0x64>
  {
    *pFunction =  JPEG_MCU_Gray_ARGB_ConvertBlocks;
90014584:	482c      	ldr	r0, [pc, #176]	; (90014638 <JPEG_GetDecodeColorConvertFunc+0xd8>)
90014586:	6008      	str	r0, [r1, #0]

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
      
    if(JPEG_ConvertorParams.LineOffset != 0)
90014588:	f015 0007 	ands.w	r0, r5, #7
9001458c:	d121      	bne.n	900145d2 <JPEG_GetDecodeColorConvertFunc+0x72>
  }
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
  {
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;

    JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 8;
9001458e:	4607      	mov	r7, r0
90014590:	6158      	str	r0, [r3, #20]
      
    if(JPEG_ConvertorParams.LineOffset != 0)
    {
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
    }
    JPEG_ConvertorParams.H_factor = 8;
90014592:	2108      	movs	r1, #8
90014594:	460c      	mov	r4, r1
    JPEG_ConvertorParams.V_factor  = 8;
90014596:	e9c3 1107 	strd	r1, r1, [r3, #28]
  else
  {  
    return HAL_ERROR; /* Color space Not supported*/
  }
 
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
9001459a:	442f      	add	r7, r5
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
  
  hMCU = (JPEG_ConvertorParams.ImageWidth / JPEG_ConvertorParams.H_factor);
9001459c:	fbb5 f4f4 	udiv	r4, r5, r4
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900145a0:	006d      	lsls	r5, r5, #1
  JPEG_ConvertorParams.WidthExtend = JPEG_ConvertorParams.ImageWidth + JPEG_ConvertorParams.LineOffset;
900145a2:	625f      	str	r7, [r3, #36]	; 0x24
  JPEG_ConvertorParams.ScaledWidth = JPEG_BYTES_PER_PIXEL * JPEG_ConvertorParams.ImageWidth; 
900145a4:	629d      	str	r5, [r3, #40]	; 0x28
  if((JPEG_ConvertorParams.ImageWidth % JPEG_ConvertorParams.H_factor) != 0)
900145a6:	b100      	cbz	r0, 900145aa <JPEG_GetDecodeColorConvertFunc+0x4a>
  {
    hMCU++; /*+1 for horizenatl incomplete MCU */                
900145a8:	3401      	adds	r4, #1
  }

  vMCU = (JPEG_ConvertorParams.ImageHeight / JPEG_ConvertorParams.V_factor);
900145aa:	fbb6 f0f1 	udiv	r0, r6, r1
  if((JPEG_ConvertorParams.ImageHeight % JPEG_ConvertorParams.V_factor) != 0)
900145ae:	fb01 6110 	mls	r1, r1, r0, r6
900145b2:	b101      	cbz	r1, 900145b6 <JPEG_GetDecodeColorConvertFunc+0x56>
  {
    vMCU++; /*+1 for vertical incomplete MCU */                
900145b4:	3001      	adds	r0, #1
  }
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900145b6:	fb00 f404 	mul.w	r4, r0, r4
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;

  return HAL_OK;
900145ba:	2000      	movs	r0, #0
  JPEG_ConvertorParams.MCU_Total_Nb = (hMCU * vMCU);
900145bc:	62dc      	str	r4, [r3, #44]	; 0x2c
  *ImageNbMCUs = JPEG_ConvertorParams.MCU_Total_Nb;
900145be:	6014      	str	r4, [r2, #0]
}
900145c0:	bcf0      	pop	{r4, r5, r6, r7}
900145c2:	4770      	bx	lr
  else if(JPEG_ConvertorParams.ColorSpace == JPEG_CMYK_COLORSPACE)
900145c4:	2c30      	cmp	r4, #48	; 0x30
900145c6:	d112      	bne.n	900145ee <JPEG_GetDecodeColorConvertFunc+0x8e>
    *pFunction =  JPEG_MCU_YCCK_ARGB_ConvertBlocks;
900145c8:	481c      	ldr	r0, [pc, #112]	; (9001463c <JPEG_GetDecodeColorConvertFunc+0xdc>)
900145ca:	6008      	str	r0, [r1, #0]
    if(JPEG_ConvertorParams.LineOffset != 0)
900145cc:	f015 0007 	ands.w	r0, r5, #7
900145d0:	d0dd      	beq.n	9001458e <JPEG_GetDecodeColorConvertFunc+0x2e>
      JPEG_ConvertorParams.LineOffset = 8 - JPEG_ConvertorParams.LineOffset;  
900145d2:	f1c0 0708 	rsb	r7, r0, #8
900145d6:	615f      	str	r7, [r3, #20]
900145d8:	e7db      	b.n	90014592 <JPEG_GetDecodeColorConvertFunc+0x32>
    if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_420_SUBSAMPLING)
900145da:	2f01      	cmp	r7, #1
900145dc:	d017      	beq.n	9001460e <JPEG_GetDecodeColorConvertFunc+0xae>
    else if(JPEG_ConvertorParams.ChromaSubsampling == JPEG_422_SUBSAMPLING)
900145de:	2f02      	cmp	r7, #2
900145e0:	d008      	beq.n	900145f4 <JPEG_GetDecodeColorConvertFunc+0x94>
      *pFunction =  JPEG_MCU_YCbCr444_ARGB_ConvertBlocks;
900145e2:	4817      	ldr	r0, [pc, #92]	; (90014640 <JPEG_GetDecodeColorConvertFunc+0xe0>)
900145e4:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900145e6:	f015 0007 	ands.w	r0, r5, #7
900145ea:	d1f2      	bne.n	900145d2 <JPEG_GetDecodeColorConvertFunc+0x72>
900145ec:	e7cf      	b.n	9001458e <JPEG_GetDecodeColorConvertFunc+0x2e>
    return HAL_ERROR; /* Color space Not supported*/
900145ee:	2001      	movs	r0, #1
}
900145f0:	bcf0      	pop	{r4, r5, r6, r7}
900145f2:	4770      	bx	lr
      *pFunction =  JPEG_MCU_YCbCr422_ARGB_ConvertBlocks;
900145f4:	4813      	ldr	r0, [pc, #76]	; (90014644 <JPEG_GetDecodeColorConvertFunc+0xe4>)
900145f6:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
900145f8:	f015 000f 	ands.w	r0, r5, #15
900145fc:	d116      	bne.n	9001462c <JPEG_GetDecodeColorConvertFunc+0xcc>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
900145fe:	4607      	mov	r7, r0
90014600:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
90014602:	f04f 0c10 	mov.w	ip, #16
90014606:	2108      	movs	r1, #8
90014608:	e9c3 c107 	strd	ip, r1, [r3, #28]
      JPEG_ConvertorParams.V_factor  = 8;
9001460c:	e7c5      	b.n	9001459a <JPEG_GetDecodeColorConvertFunc+0x3a>
      *pFunction = JPEG_MCU_YCbCr420_ARGB_ConvertBlocks;
9001460e:	480e      	ldr	r0, [pc, #56]	; (90014648 <JPEG_GetDecodeColorConvertFunc+0xe8>)
90014610:	6008      	str	r0, [r1, #0]
      if(JPEG_ConvertorParams.LineOffset != 0)
90014612:	f015 000f 	ands.w	r0, r5, #15
90014616:	d105      	bne.n	90014624 <JPEG_GetDecodeColorConvertFunc+0xc4>
      JPEG_ConvertorParams.LineOffset = JPEG_ConvertorParams.ImageWidth % 16;
90014618:	4607      	mov	r7, r0
9001461a:	6158      	str	r0, [r3, #20]
      JPEG_ConvertorParams.H_factor = 16;
9001461c:	2110      	movs	r1, #16
      JPEG_ConvertorParams.V_factor  = 16;
9001461e:	e9c3 1107 	strd	r1, r1, [r3, #28]
90014622:	e7ba      	b.n	9001459a <JPEG_GetDecodeColorConvertFunc+0x3a>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
90014624:	f1c0 0710 	rsb	r7, r0, #16
90014628:	615f      	str	r7, [r3, #20]
9001462a:	e7f7      	b.n	9001461c <JPEG_GetDecodeColorConvertFunc+0xbc>
        JPEG_ConvertorParams.LineOffset = 16 - JPEG_ConvertorParams.LineOffset;  
9001462c:	f1c0 0710 	rsb	r7, r0, #16
90014630:	615f      	str	r7, [r3, #20]
90014632:	e7e6      	b.n	90014602 <JPEG_GetDecodeColorConvertFunc+0xa2>
90014634:	24026f40 	.word	0x24026f40
90014638:	900141b5 	.word	0x900141b5
9001463c:	900142e5 	.word	0x900142e5
90014640:	90013eb9 	.word	0x90013eb9
90014644:	90013be5 	.word	0x90013be5
90014648:	900139b9 	.word	0x900139b9

9001464c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
9001464c:	8880      	ldrh	r0, [r0, #4]
9001464e:	4770      	bx	lr

90014650 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
90014650:	b570      	push	{r4, r5, r6, lr}
90014652:	6803      	ldr	r3, [r0, #0]
90014654:	460c      	mov	r4, r1
90014656:	2100      	movs	r1, #0
90014658:	4605      	mov	r5, r0
9001465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
9001465c:	4798      	blx	r3
9001465e:	4606      	mov	r6, r0
90014660:	682b      	ldr	r3, [r5, #0]
90014662:	4628      	mov	r0, r5
90014664:	1ba4      	subs	r4, r4, r6
90014666:	6a1b      	ldr	r3, [r3, #32]
90014668:	b2a4      	uxth	r4, r4
9001466a:	4798      	blx	r3
9001466c:	fbb4 f0f0 	udiv	r0, r4, r0
90014670:	bd70      	pop	{r4, r5, r6, pc}

90014672 <_ZN8touchgfx17AbstractPartition5clearEv>:
90014672:	2300      	movs	r3, #0
90014674:	8083      	strh	r3, [r0, #4]
90014676:	4770      	bx	lr

90014678 <_ZN8touchgfx17AbstractPartition8allocateEt>:
90014678:	b510      	push	{r4, lr}
9001467a:	6803      	ldr	r3, [r0, #0]
9001467c:	4604      	mov	r4, r0
9001467e:	8881      	ldrh	r1, [r0, #4]
90014680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014682:	4798      	blx	r3
90014684:	88a3      	ldrh	r3, [r4, #4]
90014686:	3301      	adds	r3, #1
90014688:	80a3      	strh	r3, [r4, #4]
9001468a:	bd10      	pop	{r4, pc}

9001468c <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
9001468c:	6803      	ldr	r3, [r0, #0]
9001468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90014690:	4718      	bx	r3

90014692 <_ZN8touchgfx17AbstractPartitionD1Ev>:
90014692:	4770      	bx	lr

90014694 <_ZN8touchgfx17AbstractPartitionC1Ev>:
90014694:	4a02      	ldr	r2, [pc, #8]	; (900146a0 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
90014696:	6002      	str	r2, [r0, #0]
90014698:	2200      	movs	r2, #0
9001469a:	8082      	strh	r2, [r0, #4]
9001469c:	4770      	bx	lr
9001469e:	bf00      	nop
900146a0:	9002b1b0 	.word	0x9002b1b0

900146a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
900146a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
900146a6:	2000      	movs	r0, #0
900146a8:	b12b      	cbz	r3, 900146b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900146aa:	b920      	cbnz	r0, 900146b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
900146ac:	1a5a      	subs	r2, r3, r1
900146ae:	699b      	ldr	r3, [r3, #24]
900146b0:	4250      	negs	r0, r2
900146b2:	4150      	adcs	r0, r2
900146b4:	e7f8      	b.n	900146a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
900146b6:	4770      	bx	lr

900146b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
900146b8:	2300      	movs	r3, #0
900146ba:	6148      	str	r0, [r1, #20]
900146bc:	618b      	str	r3, [r1, #24]
900146be:	6a83      	ldr	r3, [r0, #40]	; 0x28
900146c0:	b913      	cbnz	r3, 900146c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
900146c2:	6281      	str	r1, [r0, #40]	; 0x28
900146c4:	4770      	bx	lr
900146c6:	4613      	mov	r3, r2
900146c8:	699a      	ldr	r2, [r3, #24]
900146ca:	2a00      	cmp	r2, #0
900146cc:	d1fb      	bne.n	900146c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
900146ce:	6199      	str	r1, [r3, #24]
900146d0:	4770      	bx	lr

900146d2 <_ZN8touchgfx9Container9removeAllEv>:
900146d2:	2200      	movs	r2, #0
900146d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
900146d6:	b123      	cbz	r3, 900146e2 <_ZN8touchgfx9Container9removeAllEv+0x10>
900146d8:	6999      	ldr	r1, [r3, #24]
900146da:	6281      	str	r1, [r0, #40]	; 0x28
900146dc:	e9c3 2205 	strd	r2, r2, [r3, #20]
900146e0:	e7f8      	b.n	900146d4 <_ZN8touchgfx9Container9removeAllEv+0x2>
900146e2:	4770      	bx	lr

900146e4 <_ZN8touchgfx9Container6unlinkEv>:
900146e4:	2300      	movs	r3, #0
900146e6:	6283      	str	r3, [r0, #40]	; 0x28
900146e8:	4770      	bx	lr

900146ea <_ZNK8touchgfx9Container12getSolidRectEv>:
900146ea:	2200      	movs	r2, #0
900146ec:	8002      	strh	r2, [r0, #0]
900146ee:	8042      	strh	r2, [r0, #2]
900146f0:	8082      	strh	r2, [r0, #4]
900146f2:	80c2      	strh	r2, [r0, #6]
900146f4:	4770      	bx	lr

900146f6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
900146f6:	b570      	push	{r4, r5, r6, lr}
900146f8:	460d      	mov	r5, r1
900146fa:	4616      	mov	r6, r2
900146fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
900146fe:	b13c      	cbz	r4, 90014710 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
90014700:	6823      	ldr	r3, [r4, #0]
90014702:	4620      	mov	r0, r4
90014704:	4632      	mov	r2, r6
90014706:	4629      	mov	r1, r5
90014708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
9001470a:	4798      	blx	r3
9001470c:	69a4      	ldr	r4, [r4, #24]
9001470e:	e7f6      	b.n	900146fe <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
90014710:	bd70      	pop	{r4, r5, r6, pc}

90014712 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
90014712:	b538      	push	{r3, r4, r5, lr}
90014714:	460d      	mov	r5, r1
90014716:	6a84      	ldr	r4, [r0, #40]	; 0x28
90014718:	b134      	cbz	r4, 90014728 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
9001471a:	682b      	ldr	r3, [r5, #0]
9001471c:	4621      	mov	r1, r4
9001471e:	4628      	mov	r0, r5
90014720:	689b      	ldr	r3, [r3, #8]
90014722:	4798      	blx	r3
90014724:	69a4      	ldr	r4, [r4, #24]
90014726:	e7f7      	b.n	90014718 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
90014728:	bd38      	pop	{r3, r4, r5, pc}

9001472a <_ZN8touchgfx9ContainerD1Ev>:
9001472a:	4770      	bx	lr

9001472c <_ZN8touchgfx9ContainerD0Ev>:
9001472c:	b510      	push	{r4, lr}
9001472e:	4604      	mov	r4, r0
90014730:	212c      	movs	r1, #44	; 0x2c
90014732:	f012 fbde 	bl	90026ef2 <_ZdlPvj>
90014736:	4620      	mov	r0, r4
90014738:	bd10      	pop	{r4, pc}

9001473a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
9001473a:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001473c:	b19b      	cbz	r3, 90014766 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
9001473e:	428b      	cmp	r3, r1
90014740:	d109      	bne.n	90014756 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
90014742:	699a      	ldr	r2, [r3, #24]
90014744:	2100      	movs	r1, #0
90014746:	6159      	str	r1, [r3, #20]
90014748:	6282      	str	r2, [r0, #40]	; 0x28
9001474a:	b902      	cbnz	r2, 9001474e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
9001474c:	4770      	bx	lr
9001474e:	6199      	str	r1, [r3, #24]
90014750:	4770      	bx	lr
90014752:	4613      	mov	r3, r2
90014754:	b13a      	cbz	r2, 90014766 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
90014756:	699a      	ldr	r2, [r3, #24]
90014758:	428a      	cmp	r2, r1
9001475a:	d1fa      	bne.n	90014752 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
9001475c:	698a      	ldr	r2, [r1, #24]
9001475e:	619a      	str	r2, [r3, #24]
90014760:	2300      	movs	r3, #0
90014762:	e9c1 3305 	strd	r3, r3, [r1, #20]
90014766:	4770      	bx	lr

90014768 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
90014768:	b410      	push	{r4}
9001476a:	6a83      	ldr	r3, [r0, #40]	; 0x28
9001476c:	4604      	mov	r4, r0
9001476e:	b92b      	cbnz	r3, 9001477c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
90014770:	6803      	ldr	r3, [r0, #0]
90014772:	4611      	mov	r1, r2
90014774:	f85d 4b04 	ldr.w	r4, [sp], #4
90014778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
9001477a:	4718      	bx	r3
9001477c:	b941      	cbnz	r1, 90014790 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
9001477e:	6193      	str	r3, [r2, #24]
90014780:	6282      	str	r2, [r0, #40]	; 0x28
90014782:	6154      	str	r4, [r2, #20]
90014784:	f85d 4b04 	ldr.w	r4, [sp], #4
90014788:	4770      	bx	lr
9001478a:	4603      	mov	r3, r0
9001478c:	2800      	cmp	r0, #0
9001478e:	d0f9      	beq.n	90014784 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
90014790:	4299      	cmp	r1, r3
90014792:	6998      	ldr	r0, [r3, #24]
90014794:	d1f9      	bne.n	9001478a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
90014796:	6190      	str	r0, [r2, #24]
90014798:	618a      	str	r2, [r1, #24]
9001479a:	e7f2      	b.n	90014782 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

9001479c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
9001479c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900147a0:	461f      	mov	r7, r3
900147a2:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
900147a6:	460d      	mov	r5, r1
900147a8:	4616      	mov	r6, r2
900147aa:	b103      	cbz	r3, 900147ae <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
900147ac:	6038      	str	r0, [r7, #0]
900147ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
900147b0:	b314      	cbz	r4, 900147f8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
900147b2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
900147b6:	b1eb      	cbz	r3, 900147f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900147b8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
900147bc:	428d      	cmp	r5, r1
900147be:	db19      	blt.n	900147f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900147c0:	b289      	uxth	r1, r1
900147c2:	8923      	ldrh	r3, [r4, #8]
900147c4:	440b      	add	r3, r1
900147c6:	b21b      	sxth	r3, r3
900147c8:	429d      	cmp	r5, r3
900147ca:	da13      	bge.n	900147f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900147cc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
900147d0:	4296      	cmp	r6, r2
900147d2:	db0f      	blt.n	900147f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900147d4:	b292      	uxth	r2, r2
900147d6:	8963      	ldrh	r3, [r4, #10]
900147d8:	4413      	add	r3, r2
900147da:	b21b      	sxth	r3, r3
900147dc:	429e      	cmp	r6, r3
900147de:	da09      	bge.n	900147f4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
900147e0:	6823      	ldr	r3, [r4, #0]
900147e2:	1ab2      	subs	r2, r6, r2
900147e4:	1a69      	subs	r1, r5, r1
900147e6:	4620      	mov	r0, r4
900147e8:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
900147ec:	b212      	sxth	r2, r2
900147ee:	463b      	mov	r3, r7
900147f0:	b209      	sxth	r1, r1
900147f2:	47c0      	blx	r8
900147f4:	69a4      	ldr	r4, [r4, #24]
900147f6:	e7db      	b.n	900147b0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
900147f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

900147fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
900147fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90014800:	4c6d      	ldr	r4, [pc, #436]	; (900149b8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
90014802:	b0a1      	sub	sp, #132	; 0x84
90014804:	4606      	mov	r6, r0
90014806:	6824      	ldr	r4, [r4, #0]
90014808:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
9001480a:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
9001480e:	2400      	movs	r4, #0
90014810:	9303      	str	r3, [sp, #12]
90014812:	802c      	strh	r4, [r5, #0]
90014814:	9d2b      	ldr	r5, [sp, #172]	; 0xac
90014816:	802c      	strh	r4, [r5, #0]
90014818:	601c      	str	r4, [r3, #0]
9001481a:	e9cd 1201 	strd	r1, r2, [sp, #4]
9001481e:	f7ff ffbd 	bl	9001479c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90014822:	f1b9 0f03 	cmp.w	r9, #3
90014826:	f340 80c1 	ble.w	900149ac <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
9001482a:	4631      	mov	r1, r6
9001482c:	a80c      	add	r0, sp, #48	; 0x30
9001482e:	f004 fe0b 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014832:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
90014836:	9306      	str	r3, [sp, #24]
90014838:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001483c:	9307      	str	r3, [sp, #28]
9001483e:	9b03      	ldr	r3, [sp, #12]
90014840:	f8d3 a000 	ldr.w	sl, [r3]
90014844:	f1ba 0f00 	cmp.w	sl, #0
90014848:	f000 80b3 	beq.w	900149b2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
9001484c:	4651      	mov	r1, sl
9001484e:	a810      	add	r0, sp, #64	; 0x40
90014850:	f004 fdfa 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014854:	2002      	movs	r0, #2
90014856:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
9001485a:	9b01      	ldr	r3, [sp, #4]
9001485c:	9a06      	ldr	r2, [sp, #24]
9001485e:	fb91 f1f0 	sdiv	r1, r1, r0
90014862:	189d      	adds	r5, r3, r2
90014864:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
90014868:	9a07      	ldr	r2, [sp, #28]
9001486a:	4419      	add	r1, r3
9001486c:	9b02      	ldr	r3, [sp, #8]
9001486e:	4413      	add	r3, r2
90014870:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
90014874:	1a6d      	subs	r5, r5, r1
90014876:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
9001487a:	fb92 f2f0 	sdiv	r2, r2, r0
9001487e:	440a      	add	r2, r1
90014880:	1a9b      	subs	r3, r3, r2
90014882:	435b      	muls	r3, r3
90014884:	fb05 3505 	mla	r5, r5, r5, r3
90014888:	4f4c      	ldr	r7, [pc, #304]	; (900149bc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
9001488a:	ac10      	add	r4, sp, #64	; 0x40
9001488c:	f1b9 0f0c 	cmp.w	r9, #12
90014890:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90014892:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90014894:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
90014896:	c40f      	stmia	r4!, {r0, r1, r2, r3}
90014898:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
9001489a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
9001489c:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
900148a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
900148a4:	f04f 0303 	mov.w	r3, #3
900148a8:	bfd8      	it	le
900148aa:	f109 32ff 	addle.w	r2, r9, #4294967295
900148ae:	f04f 0400 	mov.w	r4, #0
900148b2:	f8cd 9000 	str.w	r9, [sp]
900148b6:	bfcc      	ite	gt
900148b8:	4698      	movgt	r8, r3
900148ba:	fb92 f8f3 	sdivle	r8, r2, r3
900148be:	1c63      	adds	r3, r4, #1
900148c0:	aa10      	add	r2, sp, #64	; 0x40
900148c2:	f004 0401 	and.w	r4, r4, #1
900148c6:	f04f 0b00 	mov.w	fp, #0
900148ca:	9308      	str	r3, [sp, #32]
900148cc:	9b00      	ldr	r3, [sp, #0]
900148ce:	eb02 1444 	add.w	r4, r2, r4, lsl #5
900148d2:	fb93 f3f8 	sdiv	r3, r3, r8
900148d6:	3404      	adds	r4, #4
900148d8:	b29b      	uxth	r3, r3
900148da:	9304      	str	r3, [sp, #16]
900148dc:	9a04      	ldr	r2, [sp, #16]
900148de:	f854 3c04 	ldr.w	r3, [r4, #-4]
900148e2:	fb13 f302 	smulbb	r3, r3, r2
900148e6:	9a01      	ldr	r2, [sp, #4]
900148e8:	b29b      	uxth	r3, r3
900148ea:	1899      	adds	r1, r3, r2
900148ec:	9305      	str	r3, [sp, #20]
900148ee:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900148f2:	b209      	sxth	r1, r1
900148f4:	4299      	cmp	r1, r3
900148f6:	db4d      	blt.n	90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
900148f8:	8932      	ldrh	r2, [r6, #8]
900148fa:	4413      	add	r3, r2
900148fc:	b21b      	sxth	r3, r3
900148fe:	4299      	cmp	r1, r3
90014900:	da48      	bge.n	90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90014902:	9b04      	ldr	r3, [sp, #16]
90014904:	6827      	ldr	r7, [r4, #0]
90014906:	fb17 f703 	smulbb	r7, r7, r3
9001490a:	9b02      	ldr	r3, [sp, #8]
9001490c:	b2bf      	uxth	r7, r7
9001490e:	18fa      	adds	r2, r7, r3
90014910:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
90014914:	b212      	sxth	r2, r2
90014916:	429a      	cmp	r2, r3
90014918:	db3c      	blt.n	90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
9001491a:	8970      	ldrh	r0, [r6, #10]
9001491c:	4403      	add	r3, r0
9001491e:	b21b      	sxth	r3, r3
90014920:	429a      	cmp	r2, r3
90014922:	da37      	bge.n	90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90014924:	2300      	movs	r3, #0
90014926:	4630      	mov	r0, r6
90014928:	930b      	str	r3, [sp, #44]	; 0x2c
9001492a:	ab0b      	add	r3, sp, #44	; 0x2c
9001492c:	f7ff ff36 	bl	9001479c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
90014930:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90014932:	b37a      	cbz	r2, 90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90014934:	4552      	cmp	r2, sl
90014936:	d02d      	beq.n	90014994 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
90014938:	4611      	mov	r1, r2
9001493a:	a80e      	add	r0, sp, #56	; 0x38
9001493c:	9209      	str	r2, [sp, #36]	; 0x24
9001493e:	f004 fd83 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90014942:	f04f 0e02 	mov.w	lr, #2
90014946:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
9001494a:	9a06      	ldr	r2, [sp, #24]
9001494c:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
90014950:	9b01      	ldr	r3, [sp, #4]
90014952:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
90014956:	4413      	add	r3, r2
90014958:	9a07      	ldr	r2, [sp, #28]
9001495a:	fb91 f1fe 	sdiv	r1, r1, lr
9001495e:	fb9c fcfe 	sdiv	ip, ip, lr
90014962:	4401      	add	r1, r0
90014964:	1a58      	subs	r0, r3, r1
90014966:	9b02      	ldr	r3, [sp, #8]
90014968:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
9001496c:	4413      	add	r3, r2
9001496e:	9a09      	ldr	r2, [sp, #36]	; 0x24
90014970:	448c      	add	ip, r1
90014972:	eba3 030c 	sub.w	r3, r3, ip
90014976:	435b      	muls	r3, r3
90014978:	fb00 3300 	mla	r3, r0, r0, r3
9001497c:	42ab      	cmp	r3, r5
9001497e:	d208      	bcs.n	90014992 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
90014980:	990b      	ldr	r1, [sp, #44]	; 0x2c
90014982:	461d      	mov	r5, r3
90014984:	9803      	ldr	r0, [sp, #12]
90014986:	6001      	str	r1, [r0, #0]
90014988:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001498a:	9805      	ldr	r0, [sp, #20]
9001498c:	8008      	strh	r0, [r1, #0]
9001498e:	992b      	ldr	r1, [sp, #172]	; 0xac
90014990:	800f      	strh	r7, [r1, #0]
90014992:	4692      	mov	sl, r2
90014994:	f10b 0b01 	add.w	fp, fp, #1
90014998:	3408      	adds	r4, #8
9001499a:	f1bb 0f04 	cmp.w	fp, #4
9001499e:	d19d      	bne.n	900148dc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
900149a0:	9b00      	ldr	r3, [sp, #0]
900149a2:	9c08      	ldr	r4, [sp, #32]
900149a4:	444b      	add	r3, r9
900149a6:	4544      	cmp	r4, r8
900149a8:	9300      	str	r3, [sp, #0]
900149aa:	d188      	bne.n	900148be <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
900149ac:	b021      	add	sp, #132	; 0x84
900149ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900149b2:	f04f 35ff 	mov.w	r5, #4294967295
900149b6:	e767      	b.n	90014888 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
900149b8:	24026f8c 	.word	0x24026f8c
900149bc:	900281f4 	.word	0x900281f4

900149c0 <_ZN8touchgfx4RectaNERKS0_>:
900149c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900149c4:	f9b1 7000 	ldrsh.w	r7, [r1]
900149c8:	888c      	ldrh	r4, [r1, #4]
900149ca:	f9b0 9000 	ldrsh.w	r9, [r0]
900149ce:	443c      	add	r4, r7
900149d0:	b2a4      	uxth	r4, r4
900149d2:	fa0f f884 	sxth.w	r8, r4
900149d6:	45c1      	cmp	r9, r8
900149d8:	da2f      	bge.n	90014a3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
900149da:	8882      	ldrh	r2, [r0, #4]
900149dc:	444a      	add	r2, r9
900149de:	b292      	uxth	r2, r2
900149e0:	fa0f fe82 	sxth.w	lr, r2
900149e4:	4577      	cmp	r7, lr
900149e6:	da28      	bge.n	90014a3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
900149e8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
900149ec:	88cb      	ldrh	r3, [r1, #6]
900149ee:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
900149f2:	442b      	add	r3, r5
900149f4:	b21b      	sxth	r3, r3
900149f6:	429e      	cmp	r6, r3
900149f8:	da1f      	bge.n	90014a3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
900149fa:	88c3      	ldrh	r3, [r0, #6]
900149fc:	4433      	add	r3, r6
900149fe:	b29b      	uxth	r3, r3
90014a00:	fa0f fc83 	sxth.w	ip, r3
90014a04:	4565      	cmp	r5, ip
90014a06:	da18      	bge.n	90014a3a <_ZN8touchgfx4RectaNERKS0_+0x7a>
90014a08:	454f      	cmp	r7, r9
90014a0a:	bfb8      	it	lt
90014a0c:	464f      	movlt	r7, r9
90014a0e:	42b5      	cmp	r5, r6
90014a10:	bfb8      	it	lt
90014a12:	4635      	movlt	r5, r6
90014a14:	45f0      	cmp	r8, lr
90014a16:	bfd8      	it	le
90014a18:	4622      	movle	r2, r4
90014a1a:	1bd2      	subs	r2, r2, r7
90014a1c:	8082      	strh	r2, [r0, #4]
90014a1e:	884a      	ldrh	r2, [r1, #2]
90014a20:	88c9      	ldrh	r1, [r1, #6]
90014a22:	8007      	strh	r7, [r0, #0]
90014a24:	440a      	add	r2, r1
90014a26:	8045      	strh	r5, [r0, #2]
90014a28:	b292      	uxth	r2, r2
90014a2a:	b211      	sxth	r1, r2
90014a2c:	458c      	cmp	ip, r1
90014a2e:	bfa8      	it	ge
90014a30:	4613      	movge	r3, r2
90014a32:	1b5b      	subs	r3, r3, r5
90014a34:	80c3      	strh	r3, [r0, #6]
90014a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014a3a:	2300      	movs	r3, #0
90014a3c:	8003      	strh	r3, [r0, #0]
90014a3e:	8043      	strh	r3, [r0, #2]
90014a40:	8083      	strh	r3, [r0, #4]
90014a42:	80c3      	strh	r3, [r0, #6]
90014a44:	e7f7      	b.n	90014a36 <_ZN8touchgfx4RectaNERKS0_+0x76>

90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>:
90014a46:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90014a4a:	2b00      	cmp	r3, #0
90014a4c:	dd06      	ble.n	90014a5c <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
90014a4e:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
90014a52:	2800      	cmp	r0, #0
90014a54:	bfcc      	ite	gt
90014a56:	2000      	movgt	r0, #0
90014a58:	2001      	movle	r0, #1
90014a5a:	4770      	bx	lr
90014a5c:	2001      	movs	r0, #1
90014a5e:	4770      	bx	lr

90014a60 <_ZNK8touchgfx9Container16getContainedAreaEv>:
90014a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90014a64:	2300      	movs	r3, #0
90014a66:	4604      	mov	r4, r0
90014a68:	6a8d      	ldr	r5, [r1, #40]	; 0x28
90014a6a:	8003      	strh	r3, [r0, #0]
90014a6c:	8043      	strh	r3, [r0, #2]
90014a6e:	8083      	strh	r3, [r0, #4]
90014a70:	80c3      	strh	r3, [r0, #6]
90014a72:	2d00      	cmp	r5, #0
90014a74:	d040      	beq.n	90014af8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
90014a76:	1d28      	adds	r0, r5, #4
90014a78:	f7ff ffe5 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90014a7c:	b988      	cbnz	r0, 90014aa2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90014a7e:	4620      	mov	r0, r4
90014a80:	f7ff ffe1 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90014a84:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
90014a88:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90014a8c:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
90014a90:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
90014a94:	b138      	cbz	r0, 90014aa6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
90014a96:	8022      	strh	r2, [r4, #0]
90014a98:	8063      	strh	r3, [r4, #2]
90014a9a:	f8a4 e004 	strh.w	lr, [r4, #4]
90014a9e:	f8a4 c006 	strh.w	ip, [r4, #6]
90014aa2:	69ad      	ldr	r5, [r5, #24]
90014aa4:	e7e5      	b.n	90014a72 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
90014aa6:	f9b4 0000 	ldrsh.w	r0, [r4]
90014aaa:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
90014aae:	4290      	cmp	r0, r2
90014ab0:	4607      	mov	r7, r0
90014ab2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
90014ab6:	460e      	mov	r6, r1
90014ab8:	bfa8      	it	ge
90014aba:	4617      	movge	r7, r2
90014abc:	4299      	cmp	r1, r3
90014abe:	4472      	add	r2, lr
90014ac0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
90014ac4:	bfa8      	it	ge
90014ac6:	461e      	movge	r6, r3
90014ac8:	4440      	add	r0, r8
90014aca:	4471      	add	r1, lr
90014acc:	4463      	add	r3, ip
90014ace:	b200      	sxth	r0, r0
90014ad0:	8027      	strh	r7, [r4, #0]
90014ad2:	b212      	sxth	r2, r2
90014ad4:	8066      	strh	r6, [r4, #2]
90014ad6:	b209      	sxth	r1, r1
90014ad8:	b21b      	sxth	r3, r3
90014ada:	4290      	cmp	r0, r2
90014adc:	bfac      	ite	ge
90014ade:	ebc7 0200 	rsbge	r2, r7, r0
90014ae2:	ebc7 0202 	rsblt	r2, r7, r2
90014ae6:	4299      	cmp	r1, r3
90014ae8:	bfac      	ite	ge
90014aea:	ebc6 0301 	rsbge	r3, r6, r1
90014aee:	ebc6 0303 	rsblt	r3, r6, r3
90014af2:	80a2      	strh	r2, [r4, #4]
90014af4:	80e3      	strh	r3, [r4, #6]
90014af6:	e7d4      	b.n	90014aa2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
90014af8:	4620      	mov	r0, r4
90014afa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014afe <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
90014afe:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
90014b02:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90014b06:	b383      	cbz	r3, 90014b6a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90014b08:	6a84      	ldr	r4, [r0, #40]	; 0x28
90014b0a:	b374      	cbz	r4, 90014b6a <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
90014b0c:	f9b1 5000 	ldrsh.w	r5, [r1]
90014b10:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
90014b14:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
90014b18:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
90014b1c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90014b20:	b303      	cbz	r3, 90014b64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90014b22:	4668      	mov	r0, sp
90014b24:	1d21      	adds	r1, r4, #4
90014b26:	f8ad 5000 	strh.w	r5, [sp]
90014b2a:	f8ad 6002 	strh.w	r6, [sp, #2]
90014b2e:	f8ad 7004 	strh.w	r7, [sp, #4]
90014b32:	f8ad 8006 	strh.w	r8, [sp, #6]
90014b36:	f7ff ff43 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90014b3a:	4668      	mov	r0, sp
90014b3c:	f7ff ff83 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90014b40:	b980      	cbnz	r0, 90014b64 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
90014b42:	f8bd 3000 	ldrh.w	r3, [sp]
90014b46:	4669      	mov	r1, sp
90014b48:	88a2      	ldrh	r2, [r4, #4]
90014b4a:	4620      	mov	r0, r4
90014b4c:	1a9b      	subs	r3, r3, r2
90014b4e:	88e2      	ldrh	r2, [r4, #6]
90014b50:	f8ad 3000 	strh.w	r3, [sp]
90014b54:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014b58:	1a9b      	subs	r3, r3, r2
90014b5a:	f8ad 3002 	strh.w	r3, [sp, #2]
90014b5e:	6823      	ldr	r3, [r4, #0]
90014b60:	689b      	ldr	r3, [r3, #8]
90014b62:	4798      	blx	r3
90014b64:	69a4      	ldr	r4, [r4, #24]
90014b66:	2c00      	cmp	r4, #0
90014b68:	d1d8      	bne.n	90014b1c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
90014b6a:	b002      	add	sp, #8
90014b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90014b70 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
90014b70:	b573      	push	{r0, r1, r4, r5, r6, lr}
90014b72:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
90014b76:	460d      	mov	r5, r1
90014b78:	4616      	mov	r6, r2
90014b7a:	b323      	cbz	r3, 90014bc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90014b7c:	6a84      	ldr	r4, [r0, #40]	; 0x28
90014b7e:	b314      	cbz	r4, 90014bc6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
90014b80:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
90014b84:	b1eb      	cbz	r3, 90014bc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90014b86:	6828      	ldr	r0, [r5, #0]
90014b88:	466b      	mov	r3, sp
90014b8a:	6869      	ldr	r1, [r5, #4]
90014b8c:	c303      	stmia	r3!, {r0, r1}
90014b8e:	4668      	mov	r0, sp
90014b90:	1d21      	adds	r1, r4, #4
90014b92:	f7ff ff15 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90014b96:	4668      	mov	r0, sp
90014b98:	f7ff ff55 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90014b9c:	b988      	cbnz	r0, 90014bc2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
90014b9e:	f8bd 3000 	ldrh.w	r3, [sp]
90014ba2:	4669      	mov	r1, sp
90014ba4:	88a2      	ldrh	r2, [r4, #4]
90014ba6:	4620      	mov	r0, r4
90014ba8:	1a9b      	subs	r3, r3, r2
90014baa:	88e2      	ldrh	r2, [r4, #6]
90014bac:	f8ad 3000 	strh.w	r3, [sp]
90014bb0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90014bb4:	1a9b      	subs	r3, r3, r2
90014bb6:	4632      	mov	r2, r6
90014bb8:	f8ad 3002 	strh.w	r3, [sp, #2]
90014bbc:	6823      	ldr	r3, [r4, #0]
90014bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
90014bc0:	4798      	blx	r3
90014bc2:	69a4      	ldr	r4, [r4, #24]
90014bc4:	e7db      	b.n	90014b7e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
90014bc6:	b002      	add	sp, #8
90014bc8:	bd70      	pop	{r4, r5, r6, pc}

90014bca <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
90014bca:	6803      	ldr	r3, [r0, #0]
90014bcc:	b513      	push	{r0, r1, r4, lr}
90014bce:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
90014bd2:	2300      	movs	r3, #0
90014bd4:	e9cd 3300 	strd	r3, r3, [sp]
90014bd8:	466b      	mov	r3, sp
90014bda:	47a0      	blx	r4
90014bdc:	b002      	add	sp, #8
90014bde:	bd10      	pop	{r4, pc}

90014be0 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
90014be0:	2301      	movs	r3, #1
90014be2:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90014be6:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90014bea:	4770      	bx	lr

90014bec <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
90014bec:	2301      	movs	r3, #1
90014bee:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
90014bf2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
90014bf6:	4770      	bx	lr

90014bf8 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
90014bf8:	6843      	ldr	r3, [r0, #4]
90014bfa:	2201      	movs	r2, #1
90014bfc:	725a      	strb	r2, [r3, #9]
90014bfe:	6840      	ldr	r0, [r0, #4]
90014c00:	6803      	ldr	r3, [r0, #0]
90014c02:	691b      	ldr	r3, [r3, #16]
90014c04:	4718      	bx	r3

90014c06 <_ZN8touchgfx3HAL8flushDMAEv>:
90014c06:	6840      	ldr	r0, [r0, #4]
90014c08:	6803      	ldr	r3, [r0, #0]
90014c0a:	689b      	ldr	r3, [r3, #8]
90014c0c:	4718      	bx	r3

90014c0e <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
90014c0e:	b530      	push	{r4, r5, lr}
90014c10:	b08b      	sub	sp, #44	; 0x2c
90014c12:	6804      	ldr	r4, [r0, #0]
90014c14:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
90014c18:	9509      	str	r5, [sp, #36]	; 0x24
90014c1a:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
90014c1e:	9508      	str	r5, [sp, #32]
90014c20:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
90014c24:	9507      	str	r5, [sp, #28]
90014c26:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
90014c2a:	9506      	str	r5, [sp, #24]
90014c2c:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
90014c30:	9505      	str	r5, [sp, #20]
90014c32:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
90014c36:	9504      	str	r5, [sp, #16]
90014c38:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
90014c3c:	9503      	str	r5, [sp, #12]
90014c3e:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
90014c42:	9502      	str	r5, [sp, #8]
90014c44:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
90014c48:	e9cd 3500 	strd	r3, r5, [sp]
90014c4c:	4613      	mov	r3, r2
90014c4e:	6be4      	ldr	r4, [r4, #60]	; 0x3c
90014c50:	2200      	movs	r2, #0
90014c52:	47a0      	blx	r4
90014c54:	b00b      	add	sp, #44	; 0x2c
90014c56:	bd30      	pop	{r4, r5, pc}

90014c58 <_ZN8touchgfx3HAL10beginFrameEv>:
90014c58:	4b04      	ldr	r3, [pc, #16]	; (90014c6c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
90014c5a:	781b      	ldrb	r3, [r3, #0]
90014c5c:	b123      	cbz	r3, 90014c68 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
90014c5e:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
90014c62:	f080 0001 	eor.w	r0, r0, #1
90014c66:	4770      	bx	lr
90014c68:	2001      	movs	r0, #1
90014c6a:	4770      	bx	lr
90014c6c:	24026f8a 	.word	0x24026f8a

90014c70 <_ZN8touchgfx3HAL8endFrameEv>:
90014c70:	b510      	push	{r4, lr}
90014c72:	4604      	mov	r4, r0
90014c74:	6840      	ldr	r0, [r0, #4]
90014c76:	6803      	ldr	r3, [r0, #0]
90014c78:	689b      	ldr	r3, [r3, #8]
90014c7a:	4798      	blx	r3
90014c7c:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
90014c80:	b113      	cbz	r3, 90014c88 <_ZN8touchgfx3HAL8endFrameEv+0x18>
90014c82:	2301      	movs	r3, #1
90014c84:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90014c88:	bd10      	pop	{r4, pc}

90014c8a <_ZN8touchgfx3HAL10initializeEv>:
90014c8a:	b510      	push	{r4, lr}
90014c8c:	4604      	mov	r4, r0
90014c8e:	f7ec ffc7 	bl	90001c20 <_ZN8touchgfx10OSWrappers10initializeEv>
90014c92:	f7eb fdc1 	bl	90000818 <_ZN8touchgfx4GPIO4initEv>
90014c96:	6860      	ldr	r0, [r4, #4]
90014c98:	6803      	ldr	r3, [r0, #0]
90014c9a:	68db      	ldr	r3, [r3, #12]
90014c9c:	4798      	blx	r3
90014c9e:	68e0      	ldr	r0, [r4, #12]
90014ca0:	6803      	ldr	r3, [r0, #0]
90014ca2:	689b      	ldr	r3, [r3, #8]
90014ca4:	4798      	blx	r3
90014ca6:	6823      	ldr	r3, [r4, #0]
90014ca8:	4620      	mov	r0, r4
90014caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90014cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90014cb0:	4718      	bx	r3
	...

90014cb4 <_ZN8touchgfx3HAL4tickEv>:
90014cb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90014cb6:	6803      	ldr	r3, [r0, #0]
90014cb8:	4604      	mov	r4, r0
90014cba:	4d5b      	ldr	r5, [pc, #364]	; (90014e28 <_ZN8touchgfx3HAL4tickEv+0x174>)
90014cbc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
90014cc0:	4798      	blx	r3
90014cc2:	2800      	cmp	r0, #0
90014cc4:	f000 8095 	beq.w	90014df2 <_ZN8touchgfx3HAL4tickEv+0x13e>
90014cc8:	2001      	movs	r0, #1
90014cca:	2600      	movs	r6, #0
90014ccc:	f7eb fdc6 	bl	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90014cd0:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
90014cd4:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
90014cd8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90014cdc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
90014ce0:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
90014ce4:	b133      	cbz	r3, 90014cf4 <_ZN8touchgfx3HAL4tickEv+0x40>
90014ce6:	6823      	ldr	r3, [r4, #0]
90014ce8:	4620      	mov	r0, r4
90014cea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
90014cee:	4798      	blx	r3
90014cf0:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
90014cf4:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
90014cf8:	2601      	movs	r6, #1
90014cfa:	6862      	ldr	r2, [r4, #4]
90014cfc:	f083 0301 	eor.w	r3, r3, #1
90014d00:	702e      	strb	r6, [r5, #0]
90014d02:	7253      	strb	r3, [r2, #9]
90014d04:	f003 fac0 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
90014d08:	6803      	ldr	r3, [r0, #0]
90014d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90014d0c:	4798      	blx	r3
90014d0e:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90014d12:	b90b      	cbnz	r3, 90014d18 <_ZN8touchgfx3HAL4tickEv+0x64>
90014d14:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
90014d18:	f003 fab6 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
90014d1c:	6803      	ldr	r3, [r0, #0]
90014d1e:	695b      	ldr	r3, [r3, #20]
90014d20:	4798      	blx	r3
90014d22:	6da0      	ldr	r0, [r4, #88]	; 0x58
90014d24:	6803      	ldr	r3, [r0, #0]
90014d26:	691b      	ldr	r3, [r3, #16]
90014d28:	4798      	blx	r3
90014d2a:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
90014d2e:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
90014d32:	3b01      	subs	r3, #1
90014d34:	b2db      	uxtb	r3, r3
90014d36:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
90014d3a:	b10a      	cbz	r2, 90014d40 <_ZN8touchgfx3HAL4tickEv+0x8c>
90014d3c:	2b00      	cmp	r3, #0
90014d3e:	d1eb      	bne.n	90014d18 <_ZN8touchgfx3HAL4tickEv+0x64>
90014d40:	4a3a      	ldr	r2, [pc, #232]	; (90014e2c <_ZN8touchgfx3HAL4tickEv+0x178>)
90014d42:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
90014d46:	7813      	ldrb	r3, [r2, #0]
90014d48:	3301      	adds	r3, #1
90014d4a:	b25b      	sxtb	r3, r3
90014d4c:	4299      	cmp	r1, r3
90014d4e:	7013      	strb	r3, [r2, #0]
90014d50:	dc10      	bgt.n	90014d74 <_ZN8touchgfx3HAL4tickEv+0xc0>
90014d52:	2300      	movs	r3, #0
90014d54:	68e0      	ldr	r0, [r4, #12]
90014d56:	a902      	add	r1, sp, #8
90014d58:	7013      	strb	r3, [r2, #0]
90014d5a:	aa03      	add	r2, sp, #12
90014d5c:	6803      	ldr	r3, [r0, #0]
90014d5e:	68db      	ldr	r3, [r3, #12]
90014d60:	4798      	blx	r3
90014d62:	6823      	ldr	r3, [r4, #0]
90014d64:	2800      	cmp	r0, #0
90014d66:	d050      	beq.n	90014e0a <_ZN8touchgfx3HAL4tickEv+0x156>
90014d68:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
90014d6c:	4620      	mov	r0, r4
90014d6e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
90014d72:	4798      	blx	r3
90014d74:	2300      	movs	r3, #0
90014d76:	6960      	ldr	r0, [r4, #20]
90014d78:	f88d 3007 	strb.w	r3, [sp, #7]
90014d7c:	b158      	cbz	r0, 90014d96 <_ZN8touchgfx3HAL4tickEv+0xe2>
90014d7e:	6803      	ldr	r3, [r0, #0]
90014d80:	f10d 0107 	add.w	r1, sp, #7
90014d84:	68db      	ldr	r3, [r3, #12]
90014d86:	4798      	blx	r3
90014d88:	b128      	cbz	r0, 90014d96 <_ZN8touchgfx3HAL4tickEv+0xe2>
90014d8a:	6da0      	ldr	r0, [r4, #88]	; 0x58
90014d8c:	f89d 1007 	ldrb.w	r1, [sp, #7]
90014d90:	6803      	ldr	r3, [r0, #0]
90014d92:	68db      	ldr	r3, [r3, #12]
90014d94:	4798      	blx	r3
90014d96:	f104 001c 	add.w	r0, r4, #28
90014d9a:	f011 fff5 	bl	90026d88 <_ZN8touchgfx8Gestures4tickEv>
90014d9e:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
90014da2:	b30b      	cbz	r3, 90014de8 <_ZN8touchgfx3HAL4tickEv+0x134>
90014da4:	6920      	ldr	r0, [r4, #16]
90014da6:	6803      	ldr	r3, [r0, #0]
90014da8:	691b      	ldr	r3, [r3, #16]
90014daa:	4798      	blx	r3
90014dac:	6f23      	ldr	r3, [r4, #112]	; 0x70
90014dae:	4606      	mov	r6, r0
90014db0:	b903      	cbnz	r3, 90014db4 <_ZN8touchgfx3HAL4tickEv+0x100>
90014db2:	6720      	str	r0, [r4, #112]	; 0x70
90014db4:	6f23      	ldr	r3, [r4, #112]	; 0x70
90014db6:	4a1e      	ldr	r2, [pc, #120]	; (90014e30 <_ZN8touchgfx3HAL4tickEv+0x17c>)
90014db8:	1af3      	subs	r3, r6, r3
90014dba:	4293      	cmp	r3, r2
90014dbc:	d914      	bls.n	90014de8 <_ZN8touchgfx3HAL4tickEv+0x134>
90014dbe:	6920      	ldr	r0, [r4, #16]
90014dc0:	6803      	ldr	r3, [r0, #0]
90014dc2:	699b      	ldr	r3, [r3, #24]
90014dc4:	4798      	blx	r3
90014dc6:	6f23      	ldr	r3, [r4, #112]	; 0x70
90014dc8:	2264      	movs	r2, #100	; 0x64
90014dca:	1af3      	subs	r3, r6, r3
90014dcc:	fbb3 f3f2 	udiv	r3, r3, r2
90014dd0:	fbb0 f0f3 	udiv	r0, r0, r3
90014dd4:	2800      	cmp	r0, #0
90014dd6:	dc1d      	bgt.n	90014e14 <_ZN8touchgfx3HAL4tickEv+0x160>
90014dd8:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
90014ddc:	6920      	ldr	r0, [r4, #16]
90014dde:	2100      	movs	r1, #0
90014de0:	6803      	ldr	r3, [r0, #0]
90014de2:	69db      	ldr	r3, [r3, #28]
90014de4:	4798      	blx	r3
90014de6:	6726      	str	r6, [r4, #112]	; 0x70
90014de8:	f003 fa4e 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
90014dec:	6803      	ldr	r3, [r0, #0]
90014dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90014df0:	4798      	blx	r3
90014df2:	6823      	ldr	r3, [r4, #0]
90014df4:	4620      	mov	r0, r4
90014df6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
90014dfa:	4798      	blx	r3
90014dfc:	2001      	movs	r0, #1
90014dfe:	f7eb fd57 	bl	900008b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90014e02:	2300      	movs	r3, #0
90014e04:	702b      	strb	r3, [r5, #0]
90014e06:	b004      	add	sp, #16
90014e08:	bd70      	pop	{r4, r5, r6, pc}
90014e0a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
90014e0e:	4620      	mov	r0, r4
90014e10:	4798      	blx	r3
90014e12:	e7af      	b.n	90014d74 <_ZN8touchgfx3HAL4tickEv+0xc0>
90014e14:	2863      	cmp	r0, #99	; 0x63
90014e16:	bfcb      	itete	gt
90014e18:	2300      	movgt	r3, #0
90014e1a:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
90014e1e:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
90014e22:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
90014e26:	e7d9      	b.n	90014ddc <_ZN8touchgfx3HAL4tickEv+0x128>
90014e28:	24026f90 	.word	0x24026f90
90014e2c:	24026f91 	.word	0x24026f91
90014e30:	05f5e100 	.word	0x05f5e100

90014e34 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
90014e34:	f7ec bf26 	b.w	90001c84 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

90014e38 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
90014e38:	6581      	str	r1, [r0, #88]	; 0x58
90014e3a:	301c      	adds	r0, #28
90014e3c:	f011 bfa2 	b.w	90026d84 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

90014e40 <_ZN8touchgfx3HAL5touchEll>:
90014e40:	b530      	push	{r4, r5, lr}
90014e42:	b087      	sub	sp, #28
90014e44:	4604      	mov	r4, r0
90014e46:	a804      	add	r0, sp, #16
90014e48:	e9cd 1204 	strd	r1, r2, [sp, #16]
90014e4c:	f002 fffe 	bl	90017e4c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
90014e50:	9b04      	ldr	r3, [sp, #16]
90014e52:	a906      	add	r1, sp, #24
90014e54:	a803      	add	r0, sp, #12
90014e56:	f8ad 300c 	strh.w	r3, [sp, #12]
90014e5a:	9b05      	ldr	r3, [sp, #20]
90014e5c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
90014e60:	f003 f846 	bl	90017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
90014e64:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
90014e68:	f104 001c 	add.w	r0, r4, #28
90014e6c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
90014e70:	f8bd 300e 	ldrh.w	r3, [sp, #14]
90014e74:	b189      	cbz	r1, 90014e9a <_ZN8touchgfx3HAL5touchEll+0x5a>
90014e76:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
90014e7a:	9300      	str	r3, [sp, #0]
90014e7c:	4613      	mov	r3, r2
90014e7e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90014e82:	462a      	mov	r2, r5
90014e84:	f011 ff8e 	bl	90026da4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
90014e88:	b128      	cbz	r0, 90014e96 <_ZN8touchgfx3HAL5touchEll+0x56>
90014e8a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
90014e8e:	65e3      	str	r3, [r4, #92]	; 0x5c
90014e90:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
90014e94:	6623      	str	r3, [r4, #96]	; 0x60
90014e96:	b007      	add	sp, #28
90014e98:	bd30      	pop	{r4, r5, pc}
90014e9a:	f011 ffc3 	bl	90026e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90014e9e:	2301      	movs	r3, #1
90014ea0:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90014ea4:	e7f1      	b.n	90014e8a <_ZN8touchgfx3HAL5touchEll+0x4a>

90014ea6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
90014ea6:	b510      	push	{r4, lr}
90014ea8:	2b00      	cmp	r3, #0
90014eaa:	d046      	beq.n	90014f3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90014eac:	ea81 0002 	eor.w	r0, r1, r2
90014eb0:	07c4      	lsls	r4, r0, #31
90014eb2:	d508      	bpl.n	90014ec6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
90014eb4:	440b      	add	r3, r1
90014eb6:	3a01      	subs	r2, #1
90014eb8:	428b      	cmp	r3, r1
90014eba:	d93e      	bls.n	90014f3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90014ebc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90014ec0:	f801 0b01 	strb.w	r0, [r1], #1
90014ec4:	e7f8      	b.n	90014eb8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
90014ec6:	07d0      	lsls	r0, r2, #31
90014ec8:	bf42      	ittt	mi
90014eca:	f812 0b01 	ldrbmi.w	r0, [r2], #1
90014ece:	f103 33ff 	addmi.w	r3, r3, #4294967295
90014ed2:	f801 0b01 	strbmi.w	r0, [r1], #1
90014ed6:	2b01      	cmp	r3, #1
90014ed8:	d911      	bls.n	90014efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90014eda:	ea81 0402 	eor.w	r4, r1, r2
90014ede:	4610      	mov	r0, r2
90014ee0:	07a4      	lsls	r4, r4, #30
90014ee2:	d022      	beq.n	90014f2a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
90014ee4:	f023 0401 	bic.w	r4, r3, #1
90014ee8:	440c      	add	r4, r1
90014eea:	428c      	cmp	r4, r1
90014eec:	4602      	mov	r2, r0
90014eee:	d904      	bls.n	90014efa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
90014ef0:	8812      	ldrh	r2, [r2, #0]
90014ef2:	3002      	adds	r0, #2
90014ef4:	f821 2b02 	strh.w	r2, [r1], #2
90014ef8:	e7f7      	b.n	90014eea <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
90014efa:	f003 0301 	and.w	r3, r3, #1
90014efe:	f023 0003 	bic.w	r0, r3, #3
90014f02:	4408      	add	r0, r1
90014f04:	4288      	cmp	r0, r1
90014f06:	4614      	mov	r4, r2
90014f08:	d904      	bls.n	90014f14 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
90014f0a:	6824      	ldr	r4, [r4, #0]
90014f0c:	3204      	adds	r2, #4
90014f0e:	f841 4b04 	str.w	r4, [r1], #4
90014f12:	e7f7      	b.n	90014f04 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
90014f14:	f003 0303 	and.w	r3, r3, #3
90014f18:	3a01      	subs	r2, #1
90014f1a:	440b      	add	r3, r1
90014f1c:	428b      	cmp	r3, r1
90014f1e:	d90c      	bls.n	90014f3a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
90014f20:	f812 0f01 	ldrb.w	r0, [r2, #1]!
90014f24:	f801 0b01 	strb.w	r0, [r1], #1
90014f28:	e7f8      	b.n	90014f1c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
90014f2a:	0790      	lsls	r0, r2, #30
90014f2c:	d0e7      	beq.n	90014efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90014f2e:	f832 0b02 	ldrh.w	r0, [r2], #2
90014f32:	3b02      	subs	r3, #2
90014f34:	f821 0b02 	strh.w	r0, [r1], #2
90014f38:	e7e1      	b.n	90014efe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
90014f3a:	2001      	movs	r0, #1
90014f3c:	bd10      	pop	{r4, pc}

90014f3e <_ZN8touchgfx3HAL7noTouchEv>:
90014f3e:	b510      	push	{r4, lr}
90014f40:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
90014f44:	4604      	mov	r4, r0
90014f46:	b153      	cbz	r3, 90014f5e <_ZN8touchgfx3HAL7noTouchEv+0x20>
90014f48:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
90014f4c:	2101      	movs	r1, #1
90014f4e:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
90014f52:	301c      	adds	r0, #28
90014f54:	f011 ff66 	bl	90026e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
90014f58:	2300      	movs	r3, #0
90014f5a:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
90014f5e:	bd10      	pop	{r4, pc}

90014f60 <_ZN8touchgfx8Drawable5setXYEss>:
90014f60:	b570      	push	{r4, r5, r6, lr}
90014f62:	6803      	ldr	r3, [r0, #0]
90014f64:	4604      	mov	r4, r0
90014f66:	4615      	mov	r5, r2
90014f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90014f6a:	4798      	blx	r3
90014f6c:	6823      	ldr	r3, [r4, #0]
90014f6e:	4629      	mov	r1, r5
90014f70:	4620      	mov	r0, r4
90014f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
90014f74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90014f78:	4718      	bx	r3
	...

90014f7c <_ZN8touchgfx3HAL3lcdEv>:
90014f7c:	4b04      	ldr	r3, [pc, #16]	; (90014f90 <_ZN8touchgfx3HAL3lcdEv+0x14>)
90014f7e:	681b      	ldr	r3, [r3, #0]
90014f80:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90014f84:	b10a      	cbz	r2, 90014f8a <_ZN8touchgfx3HAL3lcdEv+0xe>
90014f86:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
90014f88:	b900      	cbnz	r0, 90014f8c <_ZN8touchgfx3HAL3lcdEv+0x10>
90014f8a:	6898      	ldr	r0, [r3, #8]
90014f8c:	4770      	bx	lr
90014f8e:	bf00      	nop
90014f90:	24026f8c 	.word	0x24026f8c

90014f94 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
90014f94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90014f98:	b085      	sub	sp, #20
90014f9a:	4604      	mov	r4, r0
90014f9c:	2000      	movs	r0, #0
90014f9e:	4699      	mov	r9, r3
90014fa0:	ad04      	add	r5, sp, #16
90014fa2:	460f      	mov	r7, r1
90014fa4:	4690      	mov	r8, r2
90014fa6:	f845 0d04 	str.w	r0, [r5, #-4]!
90014faa:	69a0      	ldr	r0, [r4, #24]
90014fac:	6806      	ldr	r6, [r0, #0]
90014fae:	9501      	str	r5, [sp, #4]
90014fb0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
90014fb4:	9500      	str	r5, [sp, #0]
90014fb6:	6835      	ldr	r5, [r6, #0]
90014fb8:	47a8      	blx	r5
90014fba:	4d10      	ldr	r5, [pc, #64]	; (90014ffc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
90014fbc:	4606      	mov	r6, r0
90014fbe:	f8a5 9000 	strh.w	r9, [r5]
90014fc2:	f7ff ffdb 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
90014fc6:	6803      	ldr	r3, [r0, #0]
90014fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90014fca:	4798      	blx	r3
90014fcc:	b128      	cbz	r0, 90014fda <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
90014fce:	2801      	cmp	r0, #1
90014fd0:	d00b      	beq.n	90014fea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
90014fd2:	4630      	mov	r0, r6
90014fd4:	b005      	add	sp, #20
90014fd6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90014fda:	882b      	ldrh	r3, [r5, #0]
90014fdc:	fb08 7203 	mla	r2, r8, r3, r7
90014fe0:	9b03      	ldr	r3, [sp, #12]
90014fe2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
90014fe6:	63e3      	str	r3, [r4, #60]	; 0x3c
90014fe8:	e7f3      	b.n	90014fd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90014fea:	882a      	ldrh	r2, [r5, #0]
90014fec:	9b03      	ldr	r3, [sp, #12]
90014fee:	fb08 7202 	mla	r2, r8, r2, r7
90014ff2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90014ff6:	1a9a      	subs	r2, r3, r2
90014ff8:	63e2      	str	r2, [r4, #60]	; 0x3c
90014ffa:	e7ea      	b.n	90014fd2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
90014ffc:	24026f86 	.word	0x24026f86

90015000 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
90015000:	b5f0      	push	{r4, r5, r6, r7, lr}
90015002:	b08b      	sub	sp, #44	; 0x2c
90015004:	4617      	mov	r7, r2
90015006:	4604      	mov	r4, r0
90015008:	460e      	mov	r6, r1
9001500a:	461d      	mov	r5, r3
9001500c:	f7ff ffb6 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
90015010:	6803      	ldr	r3, [r0, #0]
90015012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015014:	4798      	blx	r3
90015016:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001501a:	9007      	str	r0, [sp, #28]
9001501c:	4631      	mov	r1, r6
9001501e:	6822      	ldr	r2, [r4, #0]
90015020:	e9cd 0308 	strd	r0, r3, [sp, #32]
90015024:	4b0c      	ldr	r3, [pc, #48]	; (90015058 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
90015026:	4620      	mov	r0, r4
90015028:	881b      	ldrh	r3, [r3, #0]
9001502a:	9306      	str	r3, [sp, #24]
9001502c:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
90015030:	9305      	str	r3, [sp, #20]
90015032:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
90015036:	9304      	str	r3, [sp, #16]
90015038:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001503c:	9303      	str	r3, [sp, #12]
9001503e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90015042:	9302      	str	r3, [sp, #8]
90015044:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90015048:	e9cd 5300 	strd	r5, r3, [sp]
9001504c:	463b      	mov	r3, r7
9001504e:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
90015050:	2200      	movs	r2, #0
90015052:	47a8      	blx	r5
90015054:	b00b      	add	sp, #44	; 0x2c
90015056:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015058:	24026f86 	.word	0x24026f86

9001505c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
9001505c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015060:	4698      	mov	r8, r3
90015062:	6803      	ldr	r3, [r0, #0]
90015064:	b08b      	sub	sp, #44	; 0x2c
90015066:	4617      	mov	r7, r2
90015068:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
9001506a:	460e      	mov	r6, r1
9001506c:	4b13      	ldr	r3, [pc, #76]	; (900150bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
9001506e:	4604      	mov	r4, r0
90015070:	f8b3 9000 	ldrh.w	r9, [r3]
90015074:	f7ff ff82 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
90015078:	6803      	ldr	r3, [r0, #0]
9001507a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001507c:	4798      	blx	r3
9001507e:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
90015082:	2200      	movs	r2, #0
90015084:	4631      	mov	r1, r6
90015086:	e9cd 0308 	strd	r0, r3, [sp, #32]
9001508a:	2302      	movs	r3, #2
9001508c:	4620      	mov	r0, r4
9001508e:	e9cd 9306 	strd	r9, r3, [sp, #24]
90015092:	2301      	movs	r3, #1
90015094:	9305      	str	r3, [sp, #20]
90015096:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
9001509a:	9304      	str	r3, [sp, #16]
9001509c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900150a0:	9303      	str	r3, [sp, #12]
900150a2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
900150a6:	9302      	str	r3, [sp, #8]
900150a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
900150ac:	e9cd 8300 	strd	r8, r3, [sp]
900150b0:	463b      	mov	r3, r7
900150b2:	47a8      	blx	r5
900150b4:	b00b      	add	sp, #44	; 0x2c
900150b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900150ba:	bf00      	nop
900150bc:	24026f86 	.word	0x24026f86

900150c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
900150c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
900150c4:	4698      	mov	r8, r3
900150c6:	6803      	ldr	r3, [r0, #0]
900150c8:	b087      	sub	sp, #28
900150ca:	460e      	mov	r6, r1
900150cc:	6d9d      	ldr	r5, [r3, #88]	; 0x58
900150ce:	4617      	mov	r7, r2
900150d0:	4b0f      	ldr	r3, [pc, #60]	; (90015110 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
900150d2:	4604      	mov	r4, r0
900150d4:	f8b3 9000 	ldrh.w	r9, [r3]
900150d8:	f7ff ff50 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900150dc:	6803      	ldr	r3, [r0, #0]
900150de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900150e0:	4798      	blx	r3
900150e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
900150e6:	463a      	mov	r2, r7
900150e8:	4631      	mov	r1, r6
900150ea:	f8cd 900c 	str.w	r9, [sp, #12]
900150ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
900150f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
900150f6:	4620      	mov	r0, r4
900150f8:	9302      	str	r3, [sp, #8]
900150fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
900150fe:	9301      	str	r3, [sp, #4]
90015100:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90015104:	9300      	str	r3, [sp, #0]
90015106:	4643      	mov	r3, r8
90015108:	47a8      	blx	r5
9001510a:	b007      	add	sp, #28
9001510c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015110:	24026f86 	.word	0x24026f86

90015114 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
90015114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015118:	4604      	mov	r4, r0
9001511a:	b08f      	sub	sp, #60	; 0x3c
9001511c:	4610      	mov	r0, r2
9001511e:	460d      	mov	r5, r1
90015120:	4691      	mov	r9, r2
90015122:	461e      	mov	r6, r3
90015124:	f006 f870 	bl	9001b208 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90015128:	2800      	cmp	r0, #0
9001512a:	f000 809d 	beq.w	90015268 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
9001512e:	6823      	ldr	r3, [r4, #0]
90015130:	4620      	mov	r0, r4
90015132:	f8df b198 	ldr.w	fp, [pc, #408]	; 900152cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
90015136:	f10d 0838 	add.w	r8, sp, #56	; 0x38
9001513a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001513c:	4798      	blx	r3
9001513e:	6823      	ldr	r3, [r4, #0]
90015140:	4620      	mov	r0, r4
90015142:	f8df a18c 	ldr.w	sl, [pc, #396]	; 900152d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
90015146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015148:	4798      	blx	r3
9001514a:	f8bb 3000 	ldrh.w	r3, [fp]
9001514e:	4f5c      	ldr	r7, [pc, #368]	; (900152c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
90015150:	9301      	str	r3, [sp, #4]
90015152:	f8ba 3000 	ldrh.w	r3, [sl]
90015156:	f828 9d1c 	strh.w	r9, [r8, #-28]!
9001515a:	4640      	mov	r0, r8
9001515c:	9302      	str	r3, [sp, #8]
9001515e:	883b      	ldrh	r3, [r7, #0]
90015160:	9303      	str	r3, [sp, #12]
90015162:	4b58      	ldr	r3, [pc, #352]	; (900152c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90015164:	881a      	ldrh	r2, [r3, #0]
90015166:	9305      	str	r3, [sp, #20]
90015168:	9204      	str	r2, [sp, #16]
9001516a:	f006 f8e1 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001516e:	8038      	strh	r0, [r7, #0]
90015170:	4640      	mov	r0, r8
90015172:	f006 f911 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015176:	9b05      	ldr	r3, [sp, #20]
90015178:	b280      	uxth	r0, r0
9001517a:	8018      	strh	r0, [r3, #0]
9001517c:	4b52      	ldr	r3, [pc, #328]	; (900152c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
9001517e:	781b      	ldrb	r3, [r3, #0]
90015180:	2b00      	cmp	r3, #0
90015182:	d174      	bne.n	9001526e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
90015184:	883b      	ldrh	r3, [r7, #0]
90015186:	f8aa 0000 	strh.w	r0, [sl]
9001518a:	f8ab 3000 	strh.w	r3, [fp]
9001518e:	4648      	mov	r0, r9
90015190:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
90015194:	f006 f838 	bl	9001b208 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
90015198:	2200      	movs	r2, #0
9001519a:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
9001519e:	4611      	mov	r1, r2
900151a0:	4628      	mov	r0, r5
900151a2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
900151a6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
900151aa:	f7ff fed9 	bl	90014f60 <_ZN8touchgfx8Drawable5setXYEss>
900151ae:	2301      	movs	r3, #1
900151b0:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
900151b4:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
900151b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
900151bc:	2b00      	cmp	r3, #0
900151be:	dd5c      	ble.n	9001527a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900151c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
900151c4:	2b00      	cmp	r3, #0
900151c6:	dd58      	ble.n	9001527a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
900151c8:	462a      	mov	r2, r5
900151ca:	ab0a      	add	r3, sp, #40	; 0x28
900151cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
900151d0:	6851      	ldr	r1, [r2, #4]
900151d2:	c303      	stmia	r3!, {r0, r1}
900151d4:	4631      	mov	r1, r6
900151d6:	a80a      	add	r0, sp, #40	; 0x28
900151d8:	f7ff fbf2 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900151dc:	4b38      	ldr	r3, [pc, #224]	; (900152c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
900151de:	2100      	movs	r1, #0
900151e0:	f9b3 2000 	ldrsh.w	r2, [r3]
900151e4:	4b37      	ldr	r3, [pc, #220]	; (900152c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
900151e6:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
900151ea:	aa0a      	add	r2, sp, #40	; 0x28
900151ec:	f9b3 3000 	ldrsh.w	r3, [r3]
900151f0:	910c      	str	r1, [sp, #48]	; 0x30
900151f2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
900151f6:	ab08      	add	r3, sp, #32
900151f8:	e892 0003 	ldmia.w	r2, {r0, r1}
900151fc:	e883 0003 	stmia.w	r3, {r0, r1}
90015200:	4618      	mov	r0, r3
90015202:	a90c      	add	r1, sp, #48	; 0x30
90015204:	f7ff fbdc 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90015208:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
9001520a:	2b00      	cmp	r3, #0
9001520c:	d13c      	bne.n	90015288 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
9001520e:	2000      	movs	r0, #0
90015210:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
90015214:	2600      	movs	r6, #0
90015216:	696b      	ldr	r3, [r5, #20]
90015218:	a908      	add	r1, sp, #32
9001521a:	682a      	ldr	r2, [r5, #0]
9001521c:	4628      	mov	r0, r5
9001521e:	9305      	str	r3, [sp, #20]
90015220:	616e      	str	r6, [r5, #20]
90015222:	6892      	ldr	r2, [r2, #8]
90015224:	4790      	blx	r2
90015226:	9b05      	ldr	r3, [sp, #20]
90015228:	4652      	mov	r2, sl
9001522a:	4649      	mov	r1, r9
9001522c:	616b      	str	r3, [r5, #20]
9001522e:	4628      	mov	r0, r5
90015230:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
90015234:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
90015238:	f7ff fe92 	bl	90014f60 <_ZN8touchgfx8Drawable5setXYEss>
9001523c:	9a01      	ldr	r2, [sp, #4]
9001523e:	4b23      	ldr	r3, [pc, #140]	; (900152cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
90015240:	4620      	mov	r0, r4
90015242:	801a      	strh	r2, [r3, #0]
90015244:	9a02      	ldr	r2, [sp, #8]
90015246:	4b22      	ldr	r3, [pc, #136]	; (900152d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
90015248:	801a      	strh	r2, [r3, #0]
9001524a:	9a03      	ldr	r2, [sp, #12]
9001524c:	4b1c      	ldr	r3, [pc, #112]	; (900152c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
9001524e:	801a      	strh	r2, [r3, #0]
90015250:	4b1c      	ldr	r3, [pc, #112]	; (900152c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
90015252:	9a04      	ldr	r2, [sp, #16]
90015254:	801a      	strh	r2, [r3, #0]
90015256:	6823      	ldr	r3, [r4, #0]
90015258:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
9001525c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001525e:	4798      	blx	r3
90015260:	6823      	ldr	r3, [r4, #0]
90015262:	4620      	mov	r0, r4
90015264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015266:	4798      	blx	r3
90015268:	b00f      	add	sp, #60	; 0x3c
9001526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001526e:	883b      	ldrh	r3, [r7, #0]
90015270:	f8ab 0000 	strh.w	r0, [fp]
90015274:	f8aa 3000 	strh.w	r3, [sl]
90015278:	e789      	b.n	9001518e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
9001527a:	462a      	mov	r2, r5
9001527c:	ab0a      	add	r3, sp, #40	; 0x28
9001527e:	f852 0f04 	ldr.w	r0, [r2, #4]!
90015282:	6851      	ldr	r1, [r2, #4]
90015284:	c303      	stmia	r3!, {r0, r1}
90015286:	e7a9      	b.n	900151dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
90015288:	a807      	add	r0, sp, #28
9001528a:	f006 f9c1 	bl	9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001528e:	4606      	mov	r6, r0
90015290:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
90015292:	6803      	ldr	r3, [r0, #0]
90015294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015296:	4798      	blx	r3
90015298:	4286      	cmp	r6, r0
9001529a:	d1b8      	bne.n	9001520e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
9001529c:	f7ff fe6e 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900152a0:	6803      	ldr	r3, [r0, #0]
900152a2:	4606      	mov	r6, r0
900152a4:	a807      	add	r0, sp, #28
900152a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900152a8:	9305      	str	r3, [sp, #20]
900152aa:	f006 f9b1 	bl	9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>
900152ae:	9b05      	ldr	r3, [sp, #20]
900152b0:	4601      	mov	r1, r0
900152b2:	4630      	mov	r0, r6
900152b4:	4798      	blx	r3
900152b6:	f080 0001 	eor.w	r0, r0, #1
900152ba:	b2c0      	uxtb	r0, r0
900152bc:	e7a8      	b.n	90015210 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
900152be:	bf00      	nop
900152c0:	24026f80 	.word	0x24026f80
900152c4:	24026f82 	.word	0x24026f82
900152c8:	24026f84 	.word	0x24026f84
900152cc:	24026f86 	.word	0x24026f86
900152d0:	24026f88 	.word	0x24026f88

900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
900152d4:	4b07      	ldr	r3, [pc, #28]	; (900152f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
900152d6:	b510      	push	{r4, lr}
900152d8:	781b      	ldrb	r3, [r3, #0]
900152da:	4604      	mov	r4, r0
900152dc:	b13b      	cbz	r3, 900152ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900152de:	6803      	ldr	r3, [r0, #0]
900152e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
900152e2:	4798      	blx	r3
900152e4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
900152e6:	4283      	cmp	r3, r0
900152e8:	d101      	bne.n	900152ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
900152ea:	6c20      	ldr	r0, [r4, #64]	; 0x40
900152ec:	bd10      	pop	{r4, pc}
900152ee:	6be0      	ldr	r0, [r4, #60]	; 0x3c
900152f0:	e7fc      	b.n	900152ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
900152f2:	bf00      	nop
900152f4:	24026f8a 	.word	0x24026f8a

900152f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
900152f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900152fc:	461d      	mov	r5, r3
900152fe:	b08a      	sub	sp, #40	; 0x28
90015300:	f44f 6380 	mov.w	r3, #1024	; 0x400
90015304:	4690      	mov	r8, r2
90015306:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
9001530a:	2400      	movs	r4, #0
9001530c:	4607      	mov	r7, r0
9001530e:	fb06 8505 	mla	r5, r6, r5, r8
90015312:	9404      	str	r4, [sp, #16]
90015314:	f88d 4020 	strb.w	r4, [sp, #32]
90015318:	e9cd 3101 	strd	r3, r1, [sp, #4]
9001531c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90015320:	f8ad 3018 	strh.w	r3, [sp, #24]
90015324:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90015328:	f8ad 301a 	strh.w	r3, [sp, #26]
9001532c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90015330:	f8ad 301c 	strh.w	r3, [sp, #28]
90015334:	f7ff ffce 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015338:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001533c:	6878      	ldr	r0, [r7, #4]
9001533e:	f8ad 601e 	strh.w	r6, [sp, #30]
90015342:	a901      	add	r1, sp, #4
90015344:	9505      	str	r5, [sp, #20]
90015346:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001534a:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
9001534e:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
90015352:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
90015356:	6803      	ldr	r3, [r0, #0]
90015358:	685b      	ldr	r3, [r3, #4]
9001535a:	4798      	blx	r3
9001535c:	b00a      	add	sp, #40	; 0x28
9001535e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90015362 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
90015362:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90015366:	b08b      	sub	sp, #44	; 0x2c
90015368:	2400      	movs	r4, #0
9001536a:	4691      	mov	r9, r2
9001536c:	461d      	mov	r5, r3
9001536e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
90015372:	f44f 6300 	mov.w	r3, #2048	; 0x800
90015376:	4688      	mov	r8, r1
90015378:	4607      	mov	r7, r0
9001537a:	9404      	str	r4, [sp, #16]
9001537c:	fb06 9505 	mla	r5, r6, r5, r9
90015380:	e9cd 3401 	strd	r3, r4, [sp, #4]
90015384:	f7ff ffa6 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015388:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001538c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
90015390:	6878      	ldr	r0, [r7, #4]
90015392:	f8ad 3018 	strh.w	r3, [sp, #24]
90015396:	a901      	add	r1, sp, #4
90015398:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
9001539c:	9505      	str	r5, [sp, #20]
9001539e:	f8ad 301a 	strh.w	r3, [sp, #26]
900153a2:	f8ad 401c 	strh.w	r4, [sp, #28]
900153a6:	f8ad 601e 	strh.w	r6, [sp, #30]
900153aa:	f8cd 8010 	str.w	r8, [sp, #16]
900153ae:	f8ad 4020 	strh.w	r4, [sp, #32]
900153b2:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
900153b6:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
900153ba:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
900153be:	6803      	ldr	r3, [r0, #0]
900153c0:	685b      	ldr	r3, [r3, #4]
900153c2:	4798      	blx	r3
900153c4:	b00b      	add	sp, #44	; 0x2c
900153c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

900153cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
900153cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900153d0:	b08a      	sub	sp, #40	; 0x28
900153d2:	4698      	mov	r8, r3
900153d4:	2300      	movs	r3, #0
900153d6:	4606      	mov	r6, r0
900153d8:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
900153dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
900153e0:	2d0b      	cmp	r5, #11
900153e2:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
900153e6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
900153ea:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
900153ee:	9304      	str	r3, [sp, #16]
900153f0:	d137      	bne.n	90015462 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
900153f2:	2380      	movs	r3, #128	; 0x80
900153f4:	f88d 0020 	strb.w	r0, [sp, #32]
900153f8:	4630      	mov	r0, r6
900153fa:	9203      	str	r2, [sp, #12]
900153fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
90015400:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
90015404:	f8ad 3018 	strh.w	r3, [sp, #24]
90015408:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
9001540c:	f8ad 301a 	strh.w	r3, [sp, #26]
90015410:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
90015414:	f8ad 301c 	strh.w	r3, [sp, #28]
90015418:	f7ff ff5c 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
9001541c:	2c0b      	cmp	r4, #11
9001541e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
90015422:	f8ad 701e 	strh.w	r7, [sp, #30]
90015426:	bf94      	ite	ls
90015428:	4b19      	ldrls	r3, [pc, #100]	; (90015490 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
9001542a:	2100      	movhi	r1, #0
9001542c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
90015430:	bf98      	it	ls
90015432:	5d19      	ldrbls	r1, [r3, r4]
90015434:	fb02 8307 	mla	r3, r2, r7, r8
90015438:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
9001543c:	10c9      	asrs	r1, r1, #3
9001543e:	fb01 0003 	mla	r0, r1, r3, r0
90015442:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
90015446:	a901      	add	r1, sp, #4
90015448:	9005      	str	r0, [sp, #20]
9001544a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
9001544e:	2300      	movs	r3, #0
90015450:	6870      	ldr	r0, [r6, #4]
90015452:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
90015456:	6803      	ldr	r3, [r0, #0]
90015458:	685b      	ldr	r3, [r3, #4]
9001545a:	4798      	blx	r3
9001545c:	b00a      	add	sp, #40	; 0x28
9001545e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015462:	2d02      	cmp	r5, #2
90015464:	d109      	bne.n	9001547a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
90015466:	28ff      	cmp	r0, #255	; 0xff
90015468:	d105      	bne.n	90015476 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
9001546a:	f1bc 0f00 	cmp.w	ip, #0
9001546e:	bf14      	ite	ne
90015470:	2340      	movne	r3, #64	; 0x40
90015472:	2320      	moveq	r3, #32
90015474:	e7be      	b.n	900153f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
90015476:	2340      	movs	r3, #64	; 0x40
90015478:	e7bc      	b.n	900153f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001547a:	28ff      	cmp	r0, #255	; 0xff
9001547c:	d105      	bne.n	9001548a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
9001547e:	f1bc 0f00 	cmp.w	ip, #0
90015482:	bf14      	ite	ne
90015484:	2304      	movne	r3, #4
90015486:	2301      	moveq	r3, #1
90015488:	e7b4      	b.n	900153f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001548a:	2304      	movs	r3, #4
9001548c:	e7b2      	b.n	900153f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
9001548e:	bf00      	nop
90015490:	9002b26c 	.word	0x9002b26c

90015494 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
90015494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015498:	b08b      	sub	sp, #44	; 0x2c
9001549a:	461d      	mov	r5, r3
9001549c:	2400      	movs	r4, #0
9001549e:	4688      	mov	r8, r1
900154a0:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
900154a4:	4693      	mov	fp, r2
900154a6:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
900154aa:	4607      	mov	r7, r0
900154ac:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
900154b0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
900154b4:	9404      	str	r4, [sp, #16]
900154b6:	bf14      	ite	ne
900154b8:	2308      	movne	r3, #8
900154ba:	2302      	moveq	r3, #2
900154bc:	fb05 b50a 	mla	r5, r5, sl, fp
900154c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
900154c4:	f7ff ff06 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900154c8:	2e0b      	cmp	r6, #11
900154ca:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
900154ce:	a901      	add	r1, sp, #4
900154d0:	bf98      	it	ls
900154d2:	4b13      	ldrls	r3, [pc, #76]	; (90015520 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
900154d4:	f8ad a01e 	strh.w	sl, [sp, #30]
900154d8:	bf98      	it	ls
900154da:	5d9c      	ldrbls	r4, [r3, r6]
900154dc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
900154e0:	10e4      	asrs	r4, r4, #3
900154e2:	f8cd 8010 	str.w	r8, [sp, #16]
900154e6:	f8ad 3018 	strh.w	r3, [sp, #24]
900154ea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
900154ee:	fb04 0405 	mla	r4, r4, r5, r0
900154f2:	6878      	ldr	r0, [r7, #4]
900154f4:	f8ad 301a 	strh.w	r3, [sp, #26]
900154f8:	2300      	movs	r3, #0
900154fa:	9405      	str	r4, [sp, #20]
900154fc:	f8ad 301c 	strh.w	r3, [sp, #28]
90015500:	f88d 9020 	strb.w	r9, [sp, #32]
90015504:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
90015508:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
9001550c:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
90015510:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
90015514:	6803      	ldr	r3, [r0, #0]
90015516:	685b      	ldr	r3, [r3, #4]
90015518:	4798      	blx	r3
9001551a:	b00b      	add	sp, #44	; 0x2c
9001551c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015520:	9002b26c 	.word	0x9002b26c

90015524 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
90015524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015528:	461e      	mov	r6, r3
9001552a:	4b0a      	ldr	r3, [pc, #40]	; (90015554 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
9001552c:	460f      	mov	r7, r1
9001552e:	4690      	mov	r8, r2
90015530:	881d      	ldrh	r5, [r3, #0]
90015532:	f7ff fd23 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
90015536:	6803      	ldr	r3, [r0, #0]
90015538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001553a:	4798      	blx	r3
9001553c:	280b      	cmp	r0, #11
9001553e:	bf96      	itet	ls
90015540:	4b05      	ldrls	r3, [pc, #20]	; (90015558 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
90015542:	2400      	movhi	r4, #0
90015544:	5c1c      	ldrbls	r4, [r3, r0]
90015546:	fb08 7005 	mla	r0, r8, r5, r7
9001554a:	10e4      	asrs	r4, r4, #3
9001554c:	fb04 6000 	mla	r0, r4, r0, r6
90015550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015554:	24026f86 	.word	0x24026f86
90015558:	9002b26c 	.word	0x9002b26c

9001555c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
9001555c:	b5f0      	push	{r4, r5, r6, r7, lr}
9001555e:	b08b      	sub	sp, #44	; 0x2c
90015560:	461f      	mov	r7, r3
90015562:	4604      	mov	r4, r0
90015564:	4616      	mov	r6, r2
90015566:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
9001556a:	2500      	movs	r5, #0
9001556c:	e9cd 3101 	strd	r3, r1, [sp, #4]
90015570:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
90015574:	9504      	str	r5, [sp, #16]
90015576:	f8ad 3018 	strh.w	r3, [sp, #24]
9001557a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001557e:	f8ad 301a 	strh.w	r3, [sp, #26]
90015582:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90015586:	f8ad 301c 	strh.w	r3, [sp, #28]
9001558a:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
9001558e:	f88d 3020 	strb.w	r3, [sp, #32]
90015592:	f7ff fe9f 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015596:	463a      	mov	r2, r7
90015598:	4631      	mov	r1, r6
9001559a:	4603      	mov	r3, r0
9001559c:	4620      	mov	r0, r4
9001559e:	f7ff ffc1 	bl	90015524 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
900155a2:	4b0e      	ldr	r3, [pc, #56]	; (900155dc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
900155a4:	9005      	str	r0, [sp, #20]
900155a6:	881b      	ldrh	r3, [r3, #0]
900155a8:	f8ad 301e 	strh.w	r3, [sp, #30]
900155ac:	f7ff fce6 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900155b0:	6803      	ldr	r3, [r0, #0]
900155b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900155b4:	4798      	blx	r3
900155b6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900155b8:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
900155bc:	a901      	add	r1, sp, #4
900155be:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
900155c2:	9304      	str	r3, [sp, #16]
900155c4:	6860      	ldr	r0, [r4, #4]
900155c6:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
900155ca:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
900155ce:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
900155d2:	6803      	ldr	r3, [r0, #0]
900155d4:	685b      	ldr	r3, [r3, #4]
900155d6:	4798      	blx	r3
900155d8:	b00b      	add	sp, #44	; 0x2c
900155da:	bdf0      	pop	{r4, r5, r6, r7, pc}
900155dc:	24026f86 	.word	0x24026f86

900155e0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
900155e0:	b5f0      	push	{r4, r5, r6, r7, lr}
900155e2:	b08d      	sub	sp, #52	; 0x34
900155e4:	2501      	movs	r5, #1
900155e6:	4604      	mov	r4, r0
900155e8:	466b      	mov	r3, sp
900155ea:	9503      	str	r5, [sp, #12]
900155ec:	e883 0006 	stmia.w	r3, {r1, r2}
900155f0:	2300      	movs	r3, #0
900155f2:	f8bd 6000 	ldrh.w	r6, [sp]
900155f6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
900155fa:	9306      	str	r3, [sp, #24]
900155fc:	6803      	ldr	r3, [r0, #0]
900155fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015600:	4798      	blx	r3
90015602:	463a      	mov	r2, r7
90015604:	4631      	mov	r1, r6
90015606:	4603      	mov	r3, r0
90015608:	4620      	mov	r0, r4
9001560a:	f7ff ff8b 	bl	90015524 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
9001560e:	6c63      	ldr	r3, [r4, #68]	; 0x44
90015610:	9004      	str	r0, [sp, #16]
90015612:	9307      	str	r3, [sp, #28]
90015614:	f8bd 3004 	ldrh.w	r3, [sp, #4]
90015618:	f8ad 3020 	strh.w	r3, [sp, #32]
9001561c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
90015620:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90015624:	4b0e      	ldr	r3, [pc, #56]	; (90015660 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
90015626:	881b      	ldrh	r3, [r3, #0]
90015628:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
9001562c:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
90015630:	f7ff fca4 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
90015634:	6803      	ldr	r3, [r0, #0]
90015636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90015638:	4798      	blx	r3
9001563a:	23ff      	movs	r3, #255	; 0xff
9001563c:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
90015640:	a903      	add	r1, sp, #12
90015642:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
90015646:	6860      	ldr	r0, [r4, #4]
90015648:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
9001564c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
90015650:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
90015654:	6803      	ldr	r3, [r0, #0]
90015656:	685b      	ldr	r3, [r3, #4]
90015658:	4798      	blx	r3
9001565a:	6c60      	ldr	r0, [r4, #68]	; 0x44
9001565c:	b00d      	add	sp, #52	; 0x34
9001565e:	bdf0      	pop	{r4, r5, r6, r7, pc}
90015660:	24026f86 	.word	0x24026f86

90015664 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
90015664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015668:	b08c      	sub	sp, #48	; 0x30
9001566a:	461e      	mov	r6, r3
9001566c:	2300      	movs	r3, #0
9001566e:	4604      	mov	r4, r0
90015670:	466d      	mov	r5, sp
90015672:	9306      	str	r3, [sp, #24]
90015674:	6803      	ldr	r3, [r0, #0]
90015676:	e885 0006 	stmia.w	r5, {r1, r2}
9001567a:	2501      	movs	r5, #1
9001567c:	f8bd 7000 	ldrh.w	r7, [sp]
90015680:	f8bd 8002 	ldrh.w	r8, [sp, #2]
90015684:	9503      	str	r5, [sp, #12]
90015686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015688:	4798      	blx	r3
9001568a:	4642      	mov	r2, r8
9001568c:	4639      	mov	r1, r7
9001568e:	4603      	mov	r3, r0
90015690:	4620      	mov	r0, r4
90015692:	f7ff ff47 	bl	90015524 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90015696:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001569a:	9004      	str	r0, [sp, #16]
9001569c:	f8ad 3020 	strh.w	r3, [sp, #32]
900156a0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
900156a4:	9607      	str	r6, [sp, #28]
900156a6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
900156aa:	4b10      	ldr	r3, [pc, #64]	; (900156ec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
900156ac:	881b      	ldrh	r3, [r3, #0]
900156ae:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
900156b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
900156b4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
900156b8:	f7ff fc60 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900156bc:	6803      	ldr	r3, [r0, #0]
900156be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900156c0:	4798      	blx	r3
900156c2:	23ff      	movs	r3, #255	; 0xff
900156c4:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
900156c8:	a903      	add	r1, sp, #12
900156ca:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
900156ce:	6860      	ldr	r0, [r4, #4]
900156d0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
900156d4:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
900156d8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
900156dc:	6803      	ldr	r3, [r0, #0]
900156de:	685b      	ldr	r3, [r3, #4]
900156e0:	4798      	blx	r3
900156e2:	4630      	mov	r0, r6
900156e4:	b00c      	add	sp, #48	; 0x30
900156e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900156ea:	bf00      	nop
900156ec:	24026f86 	.word	0x24026f86

900156f0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
900156f0:	b5f0      	push	{r4, r5, r6, r7, lr}
900156f2:	b085      	sub	sp, #20
900156f4:	4605      	mov	r5, r0
900156f6:	ac02      	add	r4, sp, #8
900156f8:	e884 0006 	stmia.w	r4, {r1, r2}
900156fc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
90015700:	f8bd 700a 	ldrh.w	r7, [sp, #10]
90015704:	f7ff fde6 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015708:	4631      	mov	r1, r6
9001570a:	4603      	mov	r3, r0
9001570c:	463a      	mov	r2, r7
9001570e:	4628      	mov	r0, r5
90015710:	f7ff ff08 	bl	90015524 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
90015714:	4a05      	ldr	r2, [pc, #20]	; (9001572c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
90015716:	682b      	ldr	r3, [r5, #0]
90015718:	8812      	ldrh	r2, [r2, #0]
9001571a:	9200      	str	r2, [sp, #0]
9001571c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001571e:	4603      	mov	r3, r0
90015720:	4628      	mov	r0, r5
90015722:	e894 0006 	ldmia.w	r4, {r1, r2}
90015726:	47b0      	blx	r6
90015728:	b005      	add	sp, #20
9001572a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001572c:	24026f86 	.word	0x24026f86

90015730 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
90015730:	b570      	push	{r4, r5, r6, lr}
90015732:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
90015736:	4604      	mov	r4, r0
90015738:	b19b      	cbz	r3, 90015762 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
9001573a:	2002      	movs	r0, #2
9001573c:	f7eb f8e2 	bl	90000904 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
90015740:	2300      	movs	r3, #0
90015742:	4620      	mov	r0, r4
90015744:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
90015748:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
9001574c:	6823      	ldr	r3, [r4, #0]
9001574e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
90015752:	f7ff fdbf 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
90015756:	4601      	mov	r1, r0
90015758:	4620      	mov	r0, r4
9001575a:	462b      	mov	r3, r5
9001575c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015760:	4718      	bx	r3
90015762:	bd70      	pop	{r4, r5, r6, pc}

90015764 <_ZN8touchgfx3HAL12setMCUActiveEb>:
90015764:	b570      	push	{r4, r5, r6, lr}
90015766:	4605      	mov	r5, r0
90015768:	460c      	mov	r4, r1
9001576a:	2003      	movs	r0, #3
9001576c:	b149      	cbz	r1, 90015782 <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
9001576e:	f7eb f875 	bl	9000085c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
90015772:	6928      	ldr	r0, [r5, #16]
90015774:	b168      	cbz	r0, 90015792 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
90015776:	6803      	ldr	r3, [r0, #0]
90015778:	2101      	movs	r1, #1
9001577a:	695b      	ldr	r3, [r3, #20]
9001577c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015780:	4718      	bx	r3
90015782:	f7eb f895 	bl	900008b0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
90015786:	6928      	ldr	r0, [r5, #16]
90015788:	b118      	cbz	r0, 90015792 <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
9001578a:	6803      	ldr	r3, [r0, #0]
9001578c:	4621      	mov	r1, r4
9001578e:	695b      	ldr	r3, [r3, #20]
90015790:	e7f4      	b.n	9001577c <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
90015792:	bd70      	pop	{r4, r5, r6, pc}

90015794 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
90015794:	b538      	push	{r3, r4, r5, lr}
90015796:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
9001579a:	4604      	mov	r4, r0
9001579c:	460d      	mov	r5, r1
9001579e:	428b      	cmp	r3, r1
900157a0:	d006      	beq.n	900157b0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
900157a2:	6803      	ldr	r3, [r0, #0]
900157a4:	b929      	cbnz	r1, 900157b2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
900157a6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
900157aa:	4798      	blx	r3
900157ac:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
900157b0:	bd38      	pop	{r3, r4, r5, pc}
900157b2:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
900157b6:	e7f8      	b.n	900157aa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

900157b8 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
900157b8:	4b0d      	ldr	r3, [pc, #52]	; (900157f0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
900157ba:	b510      	push	{r4, lr}
900157bc:	781b      	ldrb	r3, [r3, #0]
900157be:	4604      	mov	r4, r0
900157c0:	b95b      	cbnz	r3, 900157da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900157c2:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
900157c6:	2b02      	cmp	r3, #2
900157c8:	d007      	beq.n	900157da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900157ca:	6840      	ldr	r0, [r0, #4]
900157cc:	f000 f900 	bl	900159d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
900157d0:	b118      	cbz	r0, 900157da <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
900157d2:	6862      	ldr	r2, [r4, #4]
900157d4:	7a53      	ldrb	r3, [r2, #9]
900157d6:	2b00      	cmp	r3, #0
900157d8:	d0fc      	beq.n	900157d4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
900157da:	f7ec fa4b 	bl	90001c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
900157de:	4620      	mov	r0, r4
900157e0:	2100      	movs	r1, #0
900157e2:	f7ff ffd7 	bl	90015794 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
900157e6:	4620      	mov	r0, r4
900157e8:	f7ff fd74 	bl	900152d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
900157ec:	bd10      	pop	{r4, pc}
900157ee:	bf00      	nop
900157f0:	24026f8a 	.word	0x24026f8a

900157f4 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
900157f4:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
900157f8:	1a13      	subs	r3, r2, r0
900157fa:	4258      	negs	r0, r3
900157fc:	4158      	adcs	r0, r3
900157fe:	4770      	bx	lr

90015800 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
90015800:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
90015804:	1a9b      	subs	r3, r3, r2
90015806:	2b00      	cmp	r3, #0
90015808:	bfdc      	itt	le
9001580a:	6882      	ldrle	r2, [r0, #8]
9001580c:	189b      	addle	r3, r3, r2
9001580e:	2b01      	cmp	r3, #1
90015810:	bfcc      	ite	gt
90015812:	2000      	movgt	r0, #0
90015814:	2001      	movle	r0, #1
90015816:	4770      	bx	lr

90015818 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
90015818:	6902      	ldr	r2, [r0, #16]
9001581a:	6843      	ldr	r3, [r0, #4]
9001581c:	2024      	movs	r0, #36	; 0x24
9001581e:	fb00 3002 	mla	r0, r0, r2, r3
90015822:	4770      	bx	lr

90015824 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
90015824:	6803      	ldr	r3, [r0, #0]
90015826:	691b      	ldr	r3, [r3, #16]
90015828:	4718      	bx	r3

9001582a <_ZN8touchgfx13DMA_Interface7executeEv>:
9001582a:	2301      	movs	r3, #1
9001582c:	b570      	push	{r4, r5, r6, lr}
9001582e:	7203      	strb	r3, [r0, #8]
90015830:	4604      	mov	r4, r0
90015832:	6840      	ldr	r0, [r0, #4]
90015834:	6803      	ldr	r3, [r0, #0]
90015836:	699b      	ldr	r3, [r3, #24]
90015838:	4798      	blx	r3
9001583a:	6803      	ldr	r3, [r0, #0]
9001583c:	4605      	mov	r5, r0
9001583e:	2b40      	cmp	r3, #64	; 0x40
90015840:	d00c      	beq.n	9001585c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90015842:	d810      	bhi.n	90015866 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
90015844:	2b04      	cmp	r3, #4
90015846:	d01d      	beq.n	90015884 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
90015848:	d804      	bhi.n	90015854 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
9001584a:	2b01      	cmp	r3, #1
9001584c:	d006      	beq.n	9001585c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001584e:	2b02      	cmp	r3, #2
90015850:	d02c      	beq.n	900158ac <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
90015852:	bd70      	pop	{r4, r5, r6, pc}
90015854:	2b08      	cmp	r3, #8
90015856:	d01d      	beq.n	90015894 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
90015858:	2b20      	cmp	r3, #32
9001585a:	d1fa      	bne.n	90015852 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
9001585c:	6823      	ldr	r3, [r4, #0]
9001585e:	4620      	mov	r0, r4
90015860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90015862:	4798      	blx	r3
90015864:	e013      	b.n	9001588e <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
90015866:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
9001586a:	d0f7      	beq.n	9001585c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001586c:	d804      	bhi.n	90015878 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
9001586e:	2b80      	cmp	r3, #128	; 0x80
90015870:	d0f4      	beq.n	9001585c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
90015872:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
90015876:	e7f0      	b.n	9001585a <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
90015878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
9001587c:	d0ee      	beq.n	9001585c <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
9001587e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
90015882:	e7e5      	b.n	90015850 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
90015884:	6823      	ldr	r3, [r4, #0]
90015886:	7f01      	ldrb	r1, [r0, #28]
90015888:	4620      	mov	r0, r4
9001588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001588c:	4798      	blx	r3
9001588e:	6823      	ldr	r3, [r4, #0]
90015890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90015892:	e006      	b.n	900158a2 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
90015894:	6823      	ldr	r3, [r4, #0]
90015896:	7f01      	ldrb	r1, [r0, #28]
90015898:	4620      	mov	r0, r4
9001589a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001589c:	4798      	blx	r3
9001589e:	6823      	ldr	r3, [r4, #0]
900158a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
900158a2:	4629      	mov	r1, r5
900158a4:	4620      	mov	r0, r4
900158a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900158aa:	4718      	bx	r3
900158ac:	6823      	ldr	r3, [r4, #0]
900158ae:	4620      	mov	r0, r4
900158b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
900158b2:	4798      	blx	r3
900158b4:	e7f3      	b.n	9001589e <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

900158b6 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
900158b6:	4770      	bx	lr

900158b8 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
900158b8:	4770      	bx	lr

900158ba <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
900158ba:	4770      	bx	lr

900158bc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
900158bc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
900158c0:	b510      	push	{r4, lr}
900158c2:	1ad2      	subs	r2, r2, r3
900158c4:	2a00      	cmp	r2, #0
900158c6:	bfdc      	itt	le
900158c8:	6884      	ldrle	r4, [r0, #8]
900158ca:	1912      	addle	r2, r2, r4
900158cc:	2a01      	cmp	r2, #1
900158ce:	dd16      	ble.n	900158fe <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
900158d0:	6842      	ldr	r2, [r0, #4]
900158d2:	2424      	movs	r4, #36	; 0x24
900158d4:	fb04 2303 	mla	r3, r4, r3, r2
900158d8:	f101 0220 	add.w	r2, r1, #32
900158dc:	f851 4b04 	ldr.w	r4, [r1], #4
900158e0:	4291      	cmp	r1, r2
900158e2:	f843 4b04 	str.w	r4, [r3], #4
900158e6:	d1f9      	bne.n	900158dc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
900158e8:	780a      	ldrb	r2, [r1, #0]
900158ea:	701a      	strb	r2, [r3, #0]
900158ec:	68c3      	ldr	r3, [r0, #12]
900158ee:	6882      	ldr	r2, [r0, #8]
900158f0:	f3bf 8f5b 	dmb	ish
900158f4:	3301      	adds	r3, #1
900158f6:	429a      	cmp	r2, r3
900158f8:	bfd8      	it	le
900158fa:	1a9b      	suble	r3, r3, r2
900158fc:	60c3      	str	r3, [r0, #12]
900158fe:	bd10      	pop	{r4, pc}

90015900 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
90015900:	6903      	ldr	r3, [r0, #16]
90015902:	6882      	ldr	r2, [r0, #8]
90015904:	f3bf 8f5b 	dmb	ish
90015908:	3301      	adds	r3, #1
9001590a:	429a      	cmp	r2, r3
9001590c:	bfd8      	it	le
9001590e:	1a9b      	suble	r3, r3, r2
90015910:	6103      	str	r3, [r0, #16]
90015912:	4770      	bx	lr

90015914 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
90015914:	b570      	push	{r4, r5, r6, lr}
90015916:	4604      	mov	r4, r0
90015918:	460e      	mov	r6, r1
9001591a:	6860      	ldr	r0, [r4, #4]
9001591c:	6803      	ldr	r3, [r0, #0]
9001591e:	685b      	ldr	r3, [r3, #4]
90015920:	4798      	blx	r3
90015922:	2800      	cmp	r0, #0
90015924:	d1f9      	bne.n	9001591a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
90015926:	4d0d      	ldr	r5, [pc, #52]	; (9001595c <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
90015928:	6828      	ldr	r0, [r5, #0]
9001592a:	6803      	ldr	r3, [r0, #0]
9001592c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001592e:	4798      	blx	r3
90015930:	f7ec f9ae 	bl	90001c90 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
90015934:	6828      	ldr	r0, [r5, #0]
90015936:	2101      	movs	r1, #1
90015938:	f7ff ff2c 	bl	90015794 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
9001593c:	6860      	ldr	r0, [r4, #4]
9001593e:	4631      	mov	r1, r6
90015940:	6803      	ldr	r3, [r0, #0]
90015942:	689b      	ldr	r3, [r3, #8]
90015944:	4798      	blx	r3
90015946:	6823      	ldr	r3, [r4, #0]
90015948:	4620      	mov	r0, r4
9001594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001594c:	4798      	blx	r3
9001594e:	6828      	ldr	r0, [r5, #0]
90015950:	6803      	ldr	r3, [r0, #0]
90015952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90015956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
90015958:	4718      	bx	r3
9001595a:	bf00      	nop
9001595c:	24026f8c 	.word	0x24026f8c

90015960 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
90015960:	b508      	push	{r3, lr}
90015962:	f7ec f987 	bl	90001c74 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
90015966:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
9001596a:	f7ec b98b 	b.w	90001c84 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

9001596e <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
9001596e:	b510      	push	{r4, lr}
90015970:	4604      	mov	r4, r0
90015972:	2114      	movs	r1, #20
90015974:	f011 fabd 	bl	90026ef2 <_ZdlPvj>
90015978:	4620      	mov	r0, r4
9001597a:	bd10      	pop	{r4, pc}

9001597c <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
9001597c:	b570      	push	{r4, r5, r6, lr}
9001597e:	4604      	mov	r4, r0
90015980:	6840      	ldr	r0, [r0, #4]
90015982:	6803      	ldr	r3, [r0, #0]
90015984:	681b      	ldr	r3, [r3, #0]
90015986:	4798      	blx	r3
90015988:	4605      	mov	r5, r0
9001598a:	b930      	cbnz	r0, 9001599a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
9001598c:	7a23      	ldrb	r3, [r4, #8]
9001598e:	b123      	cbz	r3, 9001599a <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
90015990:	6860      	ldr	r0, [r4, #4]
90015992:	6803      	ldr	r3, [r0, #0]
90015994:	695b      	ldr	r3, [r3, #20]
90015996:	4798      	blx	r3
90015998:	7225      	strb	r5, [r4, #8]
9001599a:	6860      	ldr	r0, [r4, #4]
9001599c:	6803      	ldr	r3, [r0, #0]
9001599e:	681b      	ldr	r3, [r3, #0]
900159a0:	4798      	blx	r3
900159a2:	b928      	cbnz	r0, 900159b0 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
900159a4:	6823      	ldr	r3, [r4, #0]
900159a6:	4620      	mov	r0, r4
900159a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900159aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900159ae:	4718      	bx	r3
900159b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900159b4:	f7ec b974 	b.w	90001ca0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

900159b8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
900159b8:	b510      	push	{r4, lr}
900159ba:	6082      	str	r2, [r0, #8]
900159bc:	2200      	movs	r2, #0
900159be:	4c03      	ldr	r4, [pc, #12]	; (900159cc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
900159c0:	e9c0 2203 	strd	r2, r2, [r0, #12]
900159c4:	e9c0 4100 	strd	r4, r1, [r0]
900159c8:	bd10      	pop	{r4, pc}
900159ca:	bf00      	nop
900159cc:	9002b280 	.word	0x9002b280

900159d0 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
900159d0:	6840      	ldr	r0, [r0, #4]
900159d2:	6803      	ldr	r3, [r0, #0]
900159d4:	681b      	ldr	r3, [r3, #0]
900159d6:	4718      	bx	r3

900159d8 <_ZNK8touchgfx5Image17invalidateContentEv>:
900159d8:	b508      	push	{r3, lr}
900159da:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
900159de:	b10b      	cbz	r3, 900159e4 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
900159e0:	f7ec fdd8 	bl	90002594 <_ZNK8touchgfx8Drawable17invalidateContentEv>
900159e4:	bd08      	pop	{r3, pc}

900159e6 <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
900159e6:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900159ea:	4770      	bx	lr

900159ec <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
900159ec:	f890 0029 	ldrb.w	r0, [r0, #41]	; 0x29
900159f0:	4770      	bx	lr

900159f2 <_ZN8touchgfx13ScalableImageD1Ev>:
900159f2:	4770      	bx	lr

900159f4 <_ZN8touchgfx13ScalableImageD0Ev>:
900159f4:	b510      	push	{r4, lr}
900159f6:	4604      	mov	r4, r0
900159f8:	212c      	movs	r1, #44	; 0x2c
900159fa:	f011 fa7a 	bl	90026ef2 <_ZdlPvj>
900159fe:	4620      	mov	r0, r4
90015a00:	bd10      	pop	{r4, pc}

90015a02 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
90015a02:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
90015a04:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
90015a08:	4605      	mov	r5, r0
90015a0a:	2bff      	cmp	r3, #255	; 0xff
90015a0c:	d11e      	bne.n	90015a4c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90015a0e:	f101 0426 	add.w	r4, r1, #38	; 0x26
90015a12:	4668      	mov	r0, sp
90015a14:	4621      	mov	r1, r4
90015a16:	f005 fcf3 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015a1a:	f9bd 6004 	ldrsh.w	r6, [sp, #4]
90015a1e:	4620      	mov	r0, r4
90015a20:	f005 fc86 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015a24:	4286      	cmp	r6, r0
90015a26:	d111      	bne.n	90015a4c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90015a28:	4621      	mov	r1, r4
90015a2a:	a802      	add	r0, sp, #8
90015a2c:	f005 fce8 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015a30:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
90015a34:	4620      	mov	r0, r4
90015a36:	f005 fcaf 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015a3a:	4286      	cmp	r6, r0
90015a3c:	d106      	bne.n	90015a4c <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x4a>
90015a3e:	4621      	mov	r1, r4
90015a40:	4628      	mov	r0, r5
90015a42:	f005 fcdd 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90015a46:	4628      	mov	r0, r5
90015a48:	b004      	add	sp, #16
90015a4a:	bd70      	pop	{r4, r5, r6, pc}
90015a4c:	2300      	movs	r3, #0
90015a4e:	802b      	strh	r3, [r5, #0]
90015a50:	806b      	strh	r3, [r5, #2]
90015a52:	80ab      	strh	r3, [r5, #4]
90015a54:	80eb      	strh	r3, [r5, #6]
90015a56:	e7f6      	b.n	90015a46 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x44>

90015a58 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
90015a58:	b538      	push	{r3, r4, r5, lr}
90015a5a:	2300      	movs	r3, #0
90015a5c:	2501      	movs	r5, #1
90015a5e:	4604      	mov	r4, r0
90015a60:	8083      	strh	r3, [r0, #4]
90015a62:	80c3      	strh	r3, [r0, #6]
90015a64:	8103      	strh	r3, [r0, #8]
90015a66:	8143      	strh	r3, [r0, #10]
90015a68:	8183      	strh	r3, [r0, #12]
90015a6a:	81c3      	strh	r3, [r0, #14]
90015a6c:	8203      	strh	r3, [r0, #16]
90015a6e:	8243      	strh	r3, [r0, #18]
90015a70:	61c3      	str	r3, [r0, #28]
90015a72:	8403      	strh	r3, [r0, #32]
90015a74:	8443      	strh	r3, [r0, #34]	; 0x22
90015a76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
90015a7a:	f880 5025 	strb.w	r5, [r0, #37]	; 0x25
90015a7e:	e9c0 3305 	strd	r3, r3, [r0, #20]
90015a82:	4b07      	ldr	r3, [pc, #28]	; (90015aa0 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
90015a84:	6003      	str	r3, [r0, #0]
90015a86:	880b      	ldrh	r3, [r1, #0]
90015a88:	84c3      	strh	r3, [r0, #38]	; 0x26
90015a8a:	23ff      	movs	r3, #255	; 0xff
90015a8c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
90015a90:	f000 feba 	bl	90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
90015a94:	4b03      	ldr	r3, [pc, #12]	; (90015aa4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
90015a96:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
90015a9a:	4620      	mov	r0, r4
90015a9c:	6023      	str	r3, [r4, #0]
90015a9e:	bd38      	pop	{r3, r4, r5, pc}
90015aa0:	9002b478 	.word	0x9002b478
90015aa4:	9002b2a4 	.word	0x9002b2a4

90015aa8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
90015aa8:	4603      	mov	r3, r0
90015aaa:	3026      	adds	r0, #38	; 0x26
90015aac:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
90015ab0:	b90b      	cbnz	r3, 90015ab6 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
90015ab2:	f003 bd6d 	b.w	90019590 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
90015ab6:	f003 bd7b 	b.w	900195b0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

90015abc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
90015abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90015ac0:	4604      	mov	r4, r0
90015ac2:	469b      	mov	fp, r3
90015ac4:	f9b0 c008 	ldrsh.w	ip, [r0, #8]
90015ac8:	b0b3      	sub	sp, #204	; 0xcc
90015aca:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90015ace:	f9b1 6000 	ldrsh.w	r6, [r1]
90015ad2:	8888      	ldrh	r0, [r1, #4]
90015ad4:	9206      	str	r2, [sp, #24]
90015ad6:	2200      	movs	r2, #0
90015ad8:	4430      	add	r0, r6
90015ada:	9211      	str	r2, [sp, #68]	; 0x44
90015adc:	b280      	uxth	r0, r0
90015ade:	fa0f fe80 	sxth.w	lr, r0
90015ae2:	4596      	cmp	lr, r2
90015ae4:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	; 0xf0
90015ae8:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	; 0xf8
90015aec:	f340 811a 	ble.w	90015d24 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90015af0:	45b4      	cmp	ip, r6
90015af2:	f340 8117 	ble.w	90015d24 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90015af6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
90015afa:	88ca      	ldrh	r2, [r1, #6]
90015afc:	442a      	add	r2, r5
90015afe:	b292      	uxth	r2, r2
90015b00:	b211      	sxth	r1, r2
90015b02:	2900      	cmp	r1, #0
90015b04:	f340 810e 	ble.w	90015d24 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90015b08:	42ab      	cmp	r3, r5
90015b0a:	f340 810b 	ble.w	90015d24 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x268>
90015b0e:	45f4      	cmp	ip, lr
90015b10:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
90015b14:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
90015b18:	bfb8      	it	lt
90015b1a:	fa1f f08c 	uxthlt.w	r0, ip
90015b1e:	428b      	cmp	r3, r1
90015b20:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
90015b24:	bfb8      	it	lt
90015b26:	b29a      	uxthlt	r2, r3
90015b28:	1b80      	subs	r0, r0, r6
90015b2a:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
90015b2e:	1b52      	subs	r2, r2, r5
90015b30:	f8ad 0048 	strh.w	r0, [sp, #72]	; 0x48
90015b34:	f8ad 204a 	strh.w	r2, [sp, #74]	; 0x4a
90015b38:	ab11      	add	r3, sp, #68	; 0x44
90015b3a:	ad13      	add	r5, sp, #76	; 0x4c
90015b3c:	6822      	ldr	r2, [r4, #0]
90015b3e:	1d26      	adds	r6, r4, #4
90015b40:	9307      	str	r3, [sp, #28]
90015b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
90015b44:	e893 0003 	ldmia.w	r3, {r0, r1}
90015b48:	e885 0003 	stmia.w	r5, {r0, r1}
90015b4c:	4629      	mov	r1, r5
90015b4e:	4620      	mov	r0, r4
90015b50:	4790      	blx	r2
90015b52:	4621      	mov	r1, r4
90015b54:	a815      	add	r0, sp, #84	; 0x54
90015b56:	f003 fc77 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90015b5a:	a815      	add	r0, sp, #84	; 0x54
90015b5c:	f002 f9f6 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90015b60:	9b07      	ldr	r3, [sp, #28]
90015b62:	4631      	mov	r1, r6
90015b64:	4618      	mov	r0, r3
90015b66:	f002 fa35 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
90015b6a:	4628      	mov	r0, r5
90015b6c:	f104 0526 	add.w	r5, r4, #38	; 0x26
90015b70:	f002 f9ec 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90015b74:	4628      	mov	r0, r5
90015b76:	f005 fcc7 	bl	9001b508 <_ZNK8touchgfx6Bitmap7getDataEv>
90015b7a:	9007      	str	r0, [sp, #28]
90015b7c:	2800      	cmp	r0, #0
90015b7e:	f000 80ce 	beq.w	90015d1e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x262>
90015b82:	f8db 2000 	ldr.w	r2, [fp]
90015b86:	a90d      	add	r1, sp, #52	; 0x34
90015b88:	a809      	add	r0, sp, #36	; 0x24
90015b8a:	9209      	str	r2, [sp, #36]	; 0x24
90015b8c:	f8db 2004 	ldr.w	r2, [fp, #4]
90015b90:	920a      	str	r2, [sp, #40]	; 0x28
90015b92:	f8db 2008 	ldr.w	r2, [fp, #8]
90015b96:	920b      	str	r2, [sp, #44]	; 0x2c
90015b98:	f8db 200c 	ldr.w	r2, [fp, #12]
90015b9c:	920c      	str	r2, [sp, #48]	; 0x30
90015b9e:	f8da 2000 	ldr.w	r2, [sl]
90015ba2:	920d      	str	r2, [sp, #52]	; 0x34
90015ba4:	f8da 2004 	ldr.w	r2, [sl, #4]
90015ba8:	920e      	str	r2, [sp, #56]	; 0x38
90015baa:	f8da 2008 	ldr.w	r2, [sl, #8]
90015bae:	920f      	str	r2, [sp, #60]	; 0x3c
90015bb0:	f8da 200c 	ldr.w	r2, [sl, #12]
90015bb4:	9210      	str	r2, [sp, #64]	; 0x40
90015bb6:	4632      	mov	r2, r6
90015bb8:	f002 f9f0 	bl	90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90015bbc:	4632      	mov	r2, r6
90015bbe:	a90e      	add	r1, sp, #56	; 0x38
90015bc0:	a80a      	add	r0, sp, #40	; 0x28
90015bc2:	f002 f9eb 	bl	90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90015bc6:	4632      	mov	r2, r6
90015bc8:	a90f      	add	r1, sp, #60	; 0x3c
90015bca:	a80b      	add	r0, sp, #44	; 0x2c
90015bcc:	f002 f9e6 	bl	90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90015bd0:	4632      	mov	r2, r6
90015bd2:	a910      	add	r1, sp, #64	; 0x40
90015bd4:	a80c      	add	r0, sp, #48	; 0x30
90015bd6:	f002 f9e1 	bl	90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
90015bda:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
90015bde:	edd7 3a00 	vldr	s7, [r7]
90015be2:	eef0 6a67 	vmov.f32	s13, s15
90015be6:	eddd 7a0a 	vldr	s15, [sp, #40]	; 0x28
90015bea:	ed97 5a01 	vldr	s10, [r7, #4]
90015bee:	eeb0 7a67 	vmov.f32	s14, s15
90015bf2:	eddd 7a0e 	vldr	s15, [sp, #56]	; 0x38
90015bf6:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
90015bfa:	edd9 2a00 	vldr	s5, [r9]
90015bfe:	eeb0 6a67 	vmov.f32	s12, s15
90015c02:	eddd 7a0b 	vldr	s15, [sp, #44]	; 0x2c
90015c06:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
90015c0a:	ed98 3a00 	vldr	s6, [r8]
90015c0e:	ed99 4a01 	vldr	s8, [r9, #4]
90015c12:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90015c16:	edd8 4a01 	vldr	s9, [r8, #4]
90015c1a:	edd9 5a02 	vldr	s11, [r9, #8]
90015c1e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
90015c22:	ee16 6a10 	vmov	r6, s12
90015c26:	eeb0 6a67 	vmov.f32	s12, s15
90015c2a:	eddd 7a0f 	vldr	s15, [sp, #60]	; 0x3c
90015c2e:	f8d8 c00c 	ldr.w	ip, [r8, #12]
90015c32:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90015c36:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
90015c3a:	edcd 2a20 	vstr	s5, [sp, #128]	; 0x80
90015c3e:	ed8d 3a21 	vstr	s6, [sp, #132]	; 0x84
90015c42:	ee16 0a10 	vmov	r0, s12
90015c46:	eeb0 6a67 	vmov.f32	s12, s15
90015c4a:	eddd 7a0c 	vldr	s15, [sp, #48]	; 0x30
90015c4e:	edcd 3a22 	vstr	s7, [sp, #136]	; 0x88
90015c52:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90015c56:	ed8d 7a23 	vstr	s14, [sp, #140]	; 0x8c
90015c5a:	ed8d 4a25 	vstr	s8, [sp, #148]	; 0x94
90015c5e:	edcd 4a26 	vstr	s9, [sp, #152]	; 0x98
90015c62:	ee16 1a10 	vmov	r1, s12
90015c66:	eeb0 6a67 	vmov.f32	s12, s15
90015c6a:	eddd 7a10 	vldr	s15, [sp, #64]	; 0x40
90015c6e:	ed8d 5a27 	vstr	s10, [sp, #156]	; 0x9c
90015c72:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90015c76:	f8d7 a008 	ldr.w	sl, [r7, #8]
90015c7a:	f8d8 b008 	ldr.w	fp, [r8, #8]
90015c7e:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
90015c82:	68ff      	ldr	r7, [r7, #12]
90015c84:	ee16 2a10 	vmov	r2, s12
90015c88:	ed9d 6a09 	vldr	s12, [sp, #36]	; 0x24
90015c8c:	9624      	str	r6, [sp, #144]	; 0x90
90015c8e:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
90015c92:	e9cd 0128 	strd	r0, r1, [sp, #160]	; 0xa0
90015c96:	ed8d 6a1e 	vstr	s12, [sp, #120]	; 0x78
90015c9a:	4628      	mov	r0, r5
90015c9c:	edcd 5a2a 	vstr	s11, [sp, #168]	; 0xa8
90015ca0:	9b06      	ldr	r3, [sp, #24]
90015ca2:	922d      	str	r2, [sp, #180]	; 0xb4
90015ca4:	4a21      	ldr	r2, [pc, #132]	; (90015d2c <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x270>)
90015ca6:	9317      	str	r3, [sp, #92]	; 0x5c
90015ca8:	8812      	ldrh	r2, [r2, #0]
90015caa:	9b07      	ldr	r3, [sp, #28]
90015cac:	9218      	str	r2, [sp, #96]	; 0x60
90015cae:	9319      	str	r3, [sp, #100]	; 0x64
90015cb0:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
90015cb4:	f8cd e0bc 	str.w	lr, [sp, #188]	; 0xbc
90015cb8:	f8cd c0c0 	str.w	ip, [sp, #192]	; 0xc0
90015cbc:	f8cd b0ac 	str.w	fp, [sp, #172]	; 0xac
90015cc0:	f8cd a0b0 	str.w	sl, [sp, #176]	; 0xb0
90015cc4:	9731      	str	r7, [sp, #196]	; 0xc4
90015cc6:	f005 fc4f 	bl	9001b568 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
90015cca:	901a      	str	r0, [sp, #104]	; 0x68
90015ccc:	4628      	mov	r0, r5
90015cce:	f005 fb2f 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015cd2:	901b      	str	r0, [sp, #108]	; 0x6c
90015cd4:	4628      	mov	r0, r5
90015cd6:	f005 fb5f 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015cda:	901c      	str	r0, [sp, #112]	; 0x70
90015cdc:	4628      	mov	r0, r5
90015cde:	f005 fb27 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015ce2:	4b13      	ldr	r3, [pc, #76]	; (90015d30 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x274>)
90015ce4:	901d      	str	r0, [sp, #116]	; 0x74
90015ce6:	681b      	ldr	r3, [r3, #0]
90015ce8:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90015cec:	b10a      	cbz	r2, 90015cf2 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x236>
90015cee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
90015cf0:	b905      	cbnz	r5, 90015cf4 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x238>
90015cf2:	689d      	ldr	r5, [r3, #8]
90015cf4:	682b      	ldr	r3, [r5, #0]
90015cf6:	4620      	mov	r0, r4
90015cf8:	6c1e      	ldr	r6, [r3, #64]	; 0x40
90015cfa:	f7ff fed5 	bl	90015aa8 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
90015cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
90015d02:	aa1e      	add	r2, sp, #120	; 0x78
90015d04:	a917      	add	r1, sp, #92	; 0x5c
90015d06:	9304      	str	r3, [sp, #16]
90015d08:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
90015d0c:	e9cd 0302 	strd	r0, r3, [sp, #8]
90015d10:	ab13      	add	r3, sp, #76	; 0x4c
90015d12:	4628      	mov	r0, r5
90015d14:	9301      	str	r3, [sp, #4]
90015d16:	ab15      	add	r3, sp, #84	; 0x54
90015d18:	9300      	str	r3, [sp, #0]
90015d1a:	ab19      	add	r3, sp, #100	; 0x64
90015d1c:	47b0      	blx	r6
90015d1e:	b033      	add	sp, #204	; 0xcc
90015d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90015d24:	2300      	movs	r3, #0
90015d26:	9312      	str	r3, [sp, #72]	; 0x48
90015d28:	e706      	b.n	90015b38 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x7c>
90015d2a:	bf00      	nop
90015d2c:	24026f86 	.word	0x24026f86
90015d30:	24026f8c 	.word	0x24026f8c

90015d34 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
90015d34:	b570      	push	{r4, r5, r6, lr}
90015d36:	ed2d 8b04 	vpush	{d8-d9}
90015d3a:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
90015d3e:	b098      	sub	sp, #96	; 0x60
90015d40:	4604      	mov	r4, r0
90015d42:	460e      	mov	r6, r1
90015d44:	2b00      	cmp	r3, #0
90015d46:	d065      	beq.n	90015e14 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
90015d48:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90015d4c:	f100 0526 	add.w	r5, r0, #38	; 0x26
90015d50:	ed9f 8a37 	vldr	s16, [pc, #220]	; 90015e30 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
90015d54:	ee09 3a10 	vmov	s18, r3
90015d58:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90015d5c:	4628      	mov	r0, r5
90015d5e:	ee08 3a90 	vmov	s17, r3
90015d62:	4b34      	ldr	r3, [pc, #208]	; (90015e34 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
90015d64:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
90015d68:	930c      	str	r3, [sp, #48]	; 0x30
90015d6a:	eef8 8ae8 	vcvt.f32.s32	s17, s17
90015d6e:	930d      	str	r3, [sp, #52]	; 0x34
90015d70:	930e      	str	r3, [sp, #56]	; 0x38
90015d72:	ee39 9a08 	vadd.f32	s18, s18, s16
90015d76:	930f      	str	r3, [sp, #60]	; 0x3c
90015d78:	f005 fada 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
90015d7c:	ee07 0a90 	vmov	s15, r0
90015d80:	4628      	mov	r0, r5
90015d82:	ee78 8a88 	vadd.f32	s17, s17, s16
90015d86:	eef8 9ae7 	vcvt.f32.s32	s19, s15
90015d8a:	f005 fb05 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90015d8e:	4b2a      	ldr	r3, [pc, #168]	; (90015e38 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
90015d90:	ee07 0a90 	vmov	s15, r0
90015d94:	781b      	ldrb	r3, [r3, #0]
90015d96:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
90015d9a:	eef0 7a48 	vmov.f32	s15, s16
90015d9e:	2b01      	cmp	r3, #1
90015da0:	d13c      	bne.n	90015e1c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
90015da2:	eef0 6a69 	vmov.f32	s13, s19
90015da6:	ee19 3a90 	vmov	r3, s19
90015daa:	eeb0 6a47 	vmov.f32	s12, s14
90015dae:	eef0 5a47 	vmov.f32	s11, s14
90015db2:	eef0 9a48 	vmov.f32	s19, s16
90015db6:	eeb0 7a48 	vmov.f32	s14, s16
90015dba:	9314      	str	r3, [sp, #80]	; 0x50
90015dbc:	ab14      	add	r3, sp, #80	; 0x50
90015dbe:	2200      	movs	r2, #0
90015dc0:	4631      	mov	r1, r6
90015dc2:	9303      	str	r3, [sp, #12]
90015dc4:	ab10      	add	r3, sp, #64	; 0x40
90015dc6:	4620      	mov	r0, r4
90015dc8:	edcd 7a04 	vstr	s15, [sp, #16]
90015dcc:	9302      	str	r3, [sp, #8]
90015dce:	ab0c      	add	r3, sp, #48	; 0x30
90015dd0:	ed8d 9a05 	vstr	s18, [sp, #20]
90015dd4:	9301      	str	r3, [sp, #4]
90015dd6:	ab08      	add	r3, sp, #32
90015dd8:	ed8d 9a06 	vstr	s18, [sp, #24]
90015ddc:	9300      	str	r3, [sp, #0]
90015dde:	ab04      	add	r3, sp, #16
90015de0:	edcd 7a07 	vstr	s15, [sp, #28]
90015de4:	edcd 7a08 	vstr	s15, [sp, #32]
90015de8:	edcd 7a09 	vstr	s15, [sp, #36]	; 0x24
90015dec:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
90015df0:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
90015df4:	edcd 7a10 	vstr	s15, [sp, #64]	; 0x40
90015df8:	edcd 9a11 	vstr	s19, [sp, #68]	; 0x44
90015dfc:	edcd 5a12 	vstr	s11, [sp, #72]	; 0x48
90015e00:	ed8d 6a13 	vstr	s12, [sp, #76]	; 0x4c
90015e04:	edcd 7a15 	vstr	s15, [sp, #84]	; 0x54
90015e08:	ed8d 7a16 	vstr	s14, [sp, #88]	; 0x58
90015e0c:	edcd 6a17 	vstr	s13, [sp, #92]	; 0x5c
90015e10:	f7ff fe54 	bl	90015abc <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
90015e14:	b018      	add	sp, #96	; 0x60
90015e16:	ecbd 8b04 	vpop	{d8-d9}
90015e1a:	bd70      	pop	{r4, r5, r6, pc}
90015e1c:	eef0 6a47 	vmov.f32	s13, s14
90015e20:	ee18 3a10 	vmov	r3, s16
90015e24:	eef0 5a69 	vmov.f32	s11, s19
90015e28:	eeb0 6a48 	vmov.f32	s12, s16
90015e2c:	e7c5      	b.n	90015dba <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
90015e2e:	bf00      	nop
90015e30:	00000000 	.word	0x00000000
90015e34:	42c80000 	.word	0x42c80000
90015e38:	24026f84 	.word	0x24026f84

90015e3c <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
90015e3c:	2000      	movs	r0, #0
90015e3e:	4770      	bx	lr

90015e40 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
90015e40:	4b07      	ldr	r3, [pc, #28]	; (90015e60 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
90015e42:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90015e44:	881b      	ldrh	r3, [r3, #0]
90015e46:	4293      	cmp	r3, r2
90015e48:	bf81      	itttt	hi
90015e4a:	4b06      	ldrhi	r3, [pc, #24]	; (90015e64 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
90015e4c:	681b      	ldrhi	r3, [r3, #0]
90015e4e:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
90015e52:	7858      	ldrbhi	r0, [r3, #1]
90015e54:	bf8c      	ite	hi
90015e56:	f000 0003 	andhi.w	r0, r0, #3
90015e5a:	2000      	movls	r0, #0
90015e5c:	4770      	bx	lr
90015e5e:	bf00      	nop
90015e60:	24026fe0 	.word	0x24026fe0
90015e64:	24026fdc 	.word	0x24026fdc

90015e68 <_ZN8touchgfx8TextAreaD1Ev>:
90015e68:	4770      	bx	lr
	...

90015e6c <_ZNK8touchgfx8TextArea13getTextHeightEv>:
90015e6c:	4b11      	ldr	r3, [pc, #68]	; (90015eb4 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
90015e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90015e72:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015e74:	4604      	mov	r4, r0
90015e76:	881b      	ldrh	r3, [r3, #0]
90015e78:	428b      	cmp	r3, r1
90015e7a:	d918      	bls.n	90015eae <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
90015e7c:	6803      	ldr	r3, [r0, #0]
90015e7e:	6f9d      	ldr	r5, [r3, #120]	; 0x78
90015e80:	4b0d      	ldr	r3, [pc, #52]	; (90015eb8 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
90015e82:	6818      	ldr	r0, [r3, #0]
90015e84:	f7f1 faec 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90015e88:	6823      	ldr	r3, [r4, #0]
90015e8a:	4606      	mov	r6, r0
90015e8c:	4620      	mov	r0, r4
90015e8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015e90:	4798      	blx	r3
90015e92:	6823      	ldr	r3, [r4, #0]
90015e94:	4607      	mov	r7, r0
90015e96:	4620      	mov	r0, r4
90015e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015e9c:	4798      	blx	r3
90015e9e:	463a      	mov	r2, r7
90015ea0:	4603      	mov	r3, r0
90015ea2:	4631      	mov	r1, r6
90015ea4:	4620      	mov	r0, r4
90015ea6:	46ac      	mov	ip, r5
90015ea8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
90015eac:	4760      	bx	ip
90015eae:	2000      	movs	r0, #0
90015eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90015eb4:	24026fe0 	.word	0x24026fe0
90015eb8:	24026fe8 	.word	0x24026fe8

90015ebc <_ZNK8touchgfx8TextArea12getTextWidthEv>:
90015ebc:	4b18      	ldr	r3, [pc, #96]	; (90015f20 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
90015ebe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
90015ec2:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
90015ec4:	4604      	mov	r4, r0
90015ec6:	881b      	ldrh	r3, [r3, #0]
90015ec8:	428b      	cmp	r3, r1
90015eca:	d926      	bls.n	90015f1a <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
90015ecc:	4b15      	ldr	r3, [pc, #84]	; (90015f24 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
90015ece:	681b      	ldr	r3, [r3, #0]
90015ed0:	eb03 0241 	add.w	r2, r3, r1, lsl #1
90015ed4:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
90015ed8:	4b13      	ldr	r3, [pc, #76]	; (90015f28 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
90015eda:	7855      	ldrb	r5, [r2, #1]
90015edc:	681b      	ldr	r3, [r3, #0]
90015ede:	f3c5 0581 	ubfx	r5, r5, #2, #2
90015ee2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
90015ee6:	6833      	ldr	r3, [r6, #0]
90015ee8:	69df      	ldr	r7, [r3, #28]
90015eea:	4b10      	ldr	r3, [pc, #64]	; (90015f2c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
90015eec:	6818      	ldr	r0, [r3, #0]
90015eee:	f7f1 fab7 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90015ef2:	6823      	ldr	r3, [r4, #0]
90015ef4:	4680      	mov	r8, r0
90015ef6:	4620      	mov	r0, r4
90015ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90015efa:	4798      	blx	r3
90015efc:	6823      	ldr	r3, [r4, #0]
90015efe:	4681      	mov	r9, r0
90015f00:	4620      	mov	r0, r4
90015f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
90015f06:	4798      	blx	r3
90015f08:	464b      	mov	r3, r9
90015f0a:	9000      	str	r0, [sp, #0]
90015f0c:	4642      	mov	r2, r8
90015f0e:	4629      	mov	r1, r5
90015f10:	4630      	mov	r0, r6
90015f12:	47b8      	blx	r7
90015f14:	b003      	add	sp, #12
90015f16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90015f1a:	2000      	movs	r0, #0
90015f1c:	e7fa      	b.n	90015f14 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
90015f1e:	bf00      	nop
90015f20:	24026fe0 	.word	0x24026fe0
90015f24:	24026fdc 	.word	0x24026fdc
90015f28:	24026fe4 	.word	0x24026fe4
90015f2c:	24026fe8 	.word	0x24026fe8

90015f30 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
90015f30:	b40e      	push	{r1, r2, r3}
90015f32:	4b30      	ldr	r3, [pc, #192]	; (90015ff4 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
90015f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015f38:	881a      	ldrh	r2, [r3, #0]
90015f3a:	b09d      	sub	sp, #116	; 0x74
90015f3c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
90015f3e:	4604      	mov	r4, r0
90015f40:	429a      	cmp	r2, r3
90015f42:	d954      	bls.n	90015fee <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
90015f44:	aa26      	add	r2, sp, #152	; 0x98
90015f46:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 90015ff8 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
90015f4a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 90015ffc <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
90015f4e:	9202      	str	r2, [sp, #8]
90015f50:	f8d9 2000 	ldr.w	r2, [r9]
90015f54:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
90015f58:	f8d8 3000 	ldr.w	r3, [r8]
90015f5c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90015f60:	682b      	ldr	r3, [r5, #0]
90015f62:	4628      	mov	r0, r5
90015f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90015f66:	4798      	blx	r3
90015f68:	4606      	mov	r6, r0
90015f6a:	b207      	sxth	r7, r0
90015f6c:	a803      	add	r0, sp, #12
90015f6e:	f003 fe4d 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90015f72:	682b      	ldr	r3, [r5, #0]
90015f74:	4628      	mov	r0, r5
90015f76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90015f78:	4798      	blx	r3
90015f7a:	682b      	ldr	r3, [r5, #0]
90015f7c:	4682      	mov	sl, r0
90015f7e:	4628      	mov	r0, r5
90015f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90015f82:	4798      	blx	r3
90015f84:	4653      	mov	r3, sl
90015f86:	9000      	str	r0, [sp, #0]
90015f88:	a803      	add	r0, sp, #12
90015f8a:	9a02      	ldr	r2, [sp, #8]
90015f8c:	9925      	ldr	r1, [sp, #148]	; 0x94
90015f8e:	f003 fe98 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90015f92:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
90015f94:	f8d9 3000 	ldr.w	r3, [r9]
90015f98:	f894 c037 	ldrb.w	ip, [r4, #55]	; 0x37
90015f9c:	8925      	ldrh	r5, [r4, #8]
90015f9e:	eb03 0142 	add.w	r1, r3, r2, lsl #1
90015fa2:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
90015fa6:	eba5 050c 	sub.w	r5, r5, ip
90015faa:	784a      	ldrb	r2, [r1, #1]
90015fac:	f8d8 3000 	ldr.w	r3, [r8]
90015fb0:	b22d      	sxth	r5, r5
90015fb2:	f894 1039 	ldrb.w	r1, [r4, #57]	; 0x39
90015fb6:	f3c2 0281 	ubfx	r2, r2, #2, #2
90015fba:	9500      	str	r5, [sp, #0]
90015fbc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
90015fc0:	a803      	add	r0, sp, #12
90015fc2:	f001 fcd1 	bl	90017968 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
90015fc6:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	; 0x34
90015fca:	b203      	sxth	r3, r0
90015fcc:	18b9      	adds	r1, r7, r2
90015fce:	2900      	cmp	r1, #0
90015fd0:	dd0b      	ble.n	90015fea <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
90015fd2:	3b01      	subs	r3, #1
90015fd4:	fb13 f302 	smulbb	r3, r3, r2
90015fd8:	fb16 3300 	smlabb	r3, r6, r0, r3
90015fdc:	b21f      	sxth	r7, r3
90015fde:	4638      	mov	r0, r7
90015fe0:	b01d      	add	sp, #116	; 0x74
90015fe2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90015fe6:	b003      	add	sp, #12
90015fe8:	4770      	bx	lr
90015fea:	2b00      	cmp	r3, #0
90015fec:	dcf7      	bgt.n	90015fde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90015fee:	2700      	movs	r7, #0
90015ff0:	e7f5      	b.n	90015fde <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
90015ff2:	bf00      	nop
90015ff4:	24026fe0 	.word	0x24026fe0
90015ff8:	24026fdc 	.word	0x24026fdc
90015ffc:	24026fe4 	.word	0x24026fe4

90016000 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
90016000:	4bbd      	ldr	r3, [pc, #756]	; (900162f8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
90016002:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016006:	460c      	mov	r4, r1
90016008:	881b      	ldrh	r3, [r3, #0]
9001600a:	8d89      	ldrh	r1, [r1, #44]	; 0x2c
9001600c:	b0a9      	sub	sp, #164	; 0xa4
9001600e:	4680      	mov	r8, r0
90016010:	428b      	cmp	r3, r1
90016012:	d809      	bhi.n	90016028 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
90016014:	2300      	movs	r3, #0
90016016:	f04f 32ff 	mov.w	r2, #4294967295
9001601a:	6083      	str	r3, [r0, #8]
9001601c:	e9c0 3200 	strd	r3, r2, [r0]
90016020:	4640      	mov	r0, r8
90016022:	b029      	add	sp, #164	; 0xa4
90016024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016028:	4eb4      	ldr	r6, [pc, #720]	; (900162fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
9001602a:	6833      	ldr	r3, [r6, #0]
9001602c:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
90016030:	4bb3      	ldr	r3, [pc, #716]	; (90016300 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
90016032:	681b      	ldr	r3, [r3, #0]
90016034:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90016038:	4bb2      	ldr	r3, [pc, #712]	; (90016304 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
9001603a:	6818      	ldr	r0, [r3, #0]
9001603c:	f7f1 fa10 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90016040:	682b      	ldr	r3, [r5, #0]
90016042:	4681      	mov	r9, r0
90016044:	4628      	mov	r0, r5
90016046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90016048:	4798      	blx	r3
9001604a:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
9001604c:	b203      	sxth	r3, r0
9001604e:	4682      	mov	sl, r0
90016050:	4407      	add	r7, r0
90016052:	a80f      	add	r0, sp, #60	; 0x3c
90016054:	9304      	str	r3, [sp, #16]
90016056:	b2bb      	uxth	r3, r7
90016058:	9303      	str	r3, [sp, #12]
9001605a:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
9001605e:	2b00      	cmp	r3, #0
90016060:	f040 80a5 	bne.w	900161ae <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
90016064:	f003 fdd2 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90016068:	682b      	ldr	r3, [r5, #0]
9001606a:	4628      	mov	r0, r5
9001606c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001606e:	4798      	blx	r3
90016070:	682b      	ldr	r3, [r5, #0]
90016072:	4606      	mov	r6, r0
90016074:	4628      	mov	r0, r5
90016076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90016078:	4798      	blx	r3
9001607a:	6823      	ldr	r3, [r4, #0]
9001607c:	4607      	mov	r7, r0
9001607e:	4620      	mov	r0, r4
90016080:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
90016082:	4798      	blx	r3
90016084:	6823      	ldr	r3, [r4, #0]
90016086:	4683      	mov	fp, r0
90016088:	4620      	mov	r0, r4
9001608a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
9001608e:	4798      	blx	r3
90016090:	463b      	mov	r3, r7
90016092:	4649      	mov	r1, r9
90016094:	4632      	mov	r2, r6
90016096:	2600      	movs	r6, #0
90016098:	e9cd b000 	strd	fp, r0, [sp]
9001609c:	a80f      	add	r0, sp, #60	; 0x3c
9001609e:	4637      	mov	r7, r6
900160a0:	f003 fe24 	bl	90019cec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
900160a4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900160a8:	f8df b250 	ldr.w	fp, [pc, #592]	; 900162fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
900160ac:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900160b0:	bf0c      	ite	eq
900160b2:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
900160b6:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
900160ba:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
900160bc:	4629      	mov	r1, r5
900160be:	f8db 3000 	ldr.w	r3, [fp]
900160c2:	a80f      	add	r0, sp, #60	; 0x3c
900160c4:	3701      	adds	r7, #1
900160c6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
900160ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
900160ce:	b2bf      	uxth	r7, r7
900160d0:	785b      	ldrb	r3, [r3, #1]
900160d2:	f3c3 0381 	ubfx	r3, r3, #2, #2
900160d6:	f001 f962 	bl	9001739e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
900160da:	9b03      	ldr	r3, [sp, #12]
900160dc:	4286      	cmp	r6, r0
900160de:	eba9 0903 	sub.w	r9, r9, r3
900160e2:	bfb8      	it	lt
900160e4:	4606      	movlt	r6, r0
900160e6:	a80f      	add	r0, sp, #60	; 0x3c
900160e8:	fa0f f989 	sxth.w	r9, r9
900160ec:	b236      	sxth	r6, r6
900160ee:	f003 fdb4 	bl	90019c5a <_ZN8touchgfx12TextProvider11endOfStringEv>
900160f2:	b918      	cbnz	r0, 900160fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900160f4:	7a2b      	ldrb	r3, [r5, #8]
900160f6:	444b      	add	r3, r9
900160f8:	2b00      	cmp	r3, #0
900160fa:	dcde      	bgt.n	900160ba <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
900160fc:	9b03      	ldr	r3, [sp, #12]
900160fe:	4620      	mov	r0, r4
90016100:	9a04      	ldr	r2, [sp, #16]
90016102:	fb13 f707 	smulbb	r7, r3, r7
90016106:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90016108:	f895 9009 	ldrb.w	r9, [r5, #9]
9001610c:	1aff      	subs	r7, r7, r3
9001610e:	b2bf      	uxth	r7, r7
90016110:	b23b      	sxth	r3, r7
90016112:	429a      	cmp	r2, r3
90016114:	bfa8      	it	ge
90016116:	4657      	movge	r7, sl
90016118:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
9001611c:	f013 0ffd 	tst.w	r3, #253	; 0xfd
90016120:	6823      	ldr	r3, [r4, #0]
90016122:	444f      	add	r7, r9
90016124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90016126:	bf08      	it	eq
90016128:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
9001612c:	fa1f f987 	uxth.w	r9, r7
90016130:	bf18      	it	ne
90016132:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
90016136:	4798      	blx	r3
90016138:	2801      	cmp	r0, #1
9001613a:	fa0f f789 	sxth.w	r7, r9
9001613e:	b2b3      	uxth	r3, r6
90016140:	f000 80e2 	beq.w	90016308 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
90016144:	2802      	cmp	r0, #2
90016146:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
9001614a:	f000 80e3 	beq.w	90016314 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
9001614e:	7aea      	ldrb	r2, [r5, #11]
90016150:	b236      	sxth	r6, r6
90016152:	7b2d      	ldrb	r5, [r5, #12]
90016154:	1ab6      	subs	r6, r6, r2
90016156:	442a      	add	r2, r5
90016158:	fa1f fa86 	uxth.w	sl, r6
9001615c:	4413      	add	r3, r2
9001615e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
90016162:	fa0f fb8a 	sxth.w	fp, sl
90016166:	b29b      	uxth	r3, r3
90016168:	2a02      	cmp	r2, #2
9001616a:	b21e      	sxth	r6, r3
9001616c:	f000 80d6 	beq.w	9001631c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
90016170:	2a03      	cmp	r2, #3
90016172:	f000 80de 	beq.w	90016332 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
90016176:	2a01      	cmp	r2, #1
90016178:	f040 80e6 	bne.w	90016348 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
9001617c:	8925      	ldrh	r5, [r4, #8]
9001617e:	4633      	mov	r3, r6
90016180:	463e      	mov	r6, r7
90016182:	eba5 0909 	sub.w	r9, r5, r9
90016186:	461f      	mov	r7, r3
90016188:	465d      	mov	r5, fp
9001618a:	fa0f fb89 	sxth.w	fp, r9
9001618e:	4b5d      	ldr	r3, [pc, #372]	; (90016304 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
90016190:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90016192:	6818      	ldr	r0, [r3, #0]
90016194:	f7f1 f964 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90016198:	f8a8 b000 	strh.w	fp, [r8]
9001619c:	f8a8 5002 	strh.w	r5, [r8, #2]
900161a0:	f8a8 6004 	strh.w	r6, [r8, #4]
900161a4:	f8a8 7006 	strh.w	r7, [r8, #6]
900161a8:	f8c8 0008 	str.w	r0, [r8, #8]
900161ac:	e738      	b.n	90016020 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
900161ae:	f003 fd2d 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
900161b2:	682b      	ldr	r3, [r5, #0]
900161b4:	4628      	mov	r0, r5
900161b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900161b8:	4798      	blx	r3
900161ba:	682b      	ldr	r3, [r5, #0]
900161bc:	4607      	mov	r7, r0
900161be:	4628      	mov	r0, r5
900161c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900161c2:	4798      	blx	r3
900161c4:	6823      	ldr	r3, [r4, #0]
900161c6:	4683      	mov	fp, r0
900161c8:	4620      	mov	r0, r4
900161ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900161cc:	4798      	blx	r3
900161ce:	6822      	ldr	r2, [r4, #0]
900161d0:	9005      	str	r0, [sp, #20]
900161d2:	4620      	mov	r0, r4
900161d4:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
900161d8:	4790      	blx	r2
900161da:	9b05      	ldr	r3, [sp, #20]
900161dc:	463a      	mov	r2, r7
900161de:	4649      	mov	r1, r9
900161e0:	9001      	str	r0, [sp, #4]
900161e2:	a80f      	add	r0, sp, #60	; 0x3c
900161e4:	9300      	str	r3, [sp, #0]
900161e6:	465b      	mov	r3, fp
900161e8:	f003 fd80 	bl	90019cec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
900161ec:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
900161f0:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
900161f4:	af0f      	add	r7, sp, #60	; 0x3c
900161f6:	f013 0ffd 	tst.w	r3, #253	; 0xfd
900161fa:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
900161fe:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
90016200:	bf0a      	itet	eq
90016202:	464a      	moveq	r2, r9
90016204:	461a      	movne	r2, r3
90016206:	4699      	moveq	r9, r3
90016208:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
9001620c:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
90016210:	1ad2      	subs	r2, r2, r3
90016212:	6833      	ldr	r3, [r6, #0]
90016214:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	; 0x34
90016218:	eb03 0341 	add.w	r3, r3, r1, lsl #1
9001621c:	7859      	ldrb	r1, [r3, #1]
9001621e:	2300      	movs	r3, #0
90016220:	9707      	str	r7, [sp, #28]
90016222:	f3c1 0181 	ubfx	r1, r1, #2, #2
90016226:	f8ad 3018 	strh.w	r3, [sp, #24]
9001622a:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
9001622e:	f88d 1020 	strb.w	r1, [sp, #32]
90016232:	9509      	str	r5, [sp, #36]	; 0x24
90016234:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
90016238:	f8ad 902a 	strh.w	r9, [sp, #42]	; 0x2a
9001623c:	f8ad 602c 	strh.w	r6, [sp, #44]	; 0x2c
90016240:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90016244:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
90016248:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001624c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
90016250:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90016254:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90016258:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
9001625c:	b350      	cbz	r0, 900162b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
9001625e:	682b      	ldr	r3, [r5, #0]
90016260:	4628      	mov	r0, r5
90016262:	695b      	ldr	r3, [r3, #20]
90016264:	4798      	blx	r3
90016266:	4607      	mov	r7, r0
90016268:	b320      	cbz	r0, 900162b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
9001626a:	9809      	ldr	r0, [sp, #36]	; 0x24
9001626c:	4639      	mov	r1, r7
9001626e:	6803      	ldr	r3, [r0, #0]
90016270:	68db      	ldr	r3, [r3, #12]
90016272:	4798      	blx	r3
90016274:	4606      	mov	r6, r0
90016276:	b1e8      	cbz	r0, 900162b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90016278:	7b43      	ldrb	r3, [r0, #13]
9001627a:	7a82      	ldrb	r2, [r0, #10]
9001627c:	005b      	lsls	r3, r3, #1
9001627e:	f403 7380 	and.w	r3, r3, #256	; 0x100
90016282:	4313      	orrs	r3, r2
90016284:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
90016288:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
9001628c:	2b06      	cmp	r3, #6
9001628e:	d111      	bne.n	900162b4 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
90016290:	9809      	ldr	r0, [sp, #36]	; 0x24
90016292:	4632      	mov	r2, r6
90016294:	4639      	mov	r1, r7
90016296:	6803      	ldr	r3, [r0, #0]
90016298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001629a:	4798      	blx	r3
9001629c:	7b73      	ldrb	r3, [r6, #13]
9001629e:	005b      	lsls	r3, r3, #1
900162a0:	f403 7280 	and.w	r2, r3, #256	; 0x100
900162a4:	7ab3      	ldrb	r3, [r6, #10]
900162a6:	4313      	orrs	r3, r2
900162a8:	4418      	add	r0, r3
900162aa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
900162ae:	4418      	add	r0, r3
900162b0:	f8ad 0038 	strh.w	r0, [sp, #56]	; 0x38
900162b4:	2600      	movs	r6, #0
900162b6:	4637      	mov	r7, r6
900162b8:	a806      	add	r0, sp, #24
900162ba:	3701      	adds	r7, #1
900162bc:	f001 fa51 	bl	90017762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900162c0:	f8bd 0036 	ldrh.w	r0, [sp, #54]	; 0x36
900162c4:	9b03      	ldr	r3, [sp, #12]
900162c6:	b2bf      	uxth	r7, r7
900162c8:	4286      	cmp	r6, r0
900162ca:	eba9 0903 	sub.w	r9, r9, r3
900162ce:	f8bd 3018 	ldrh.w	r3, [sp, #24]
900162d2:	bfb8      	it	lt
900162d4:	4606      	movlt	r6, r0
900162d6:	fa0f f989 	sxth.w	r9, r9
900162da:	b236      	sxth	r6, r6
900162dc:	2b00      	cmp	r3, #0
900162de:	f43f af0d 	beq.w	900160fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900162e2:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
900162e6:	2b00      	cmp	r3, #0
900162e8:	f47f af08 	bne.w	900160fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900162ec:	7a2b      	ldrb	r3, [r5, #8]
900162ee:	444b      	add	r3, r9
900162f0:	2b00      	cmp	r3, #0
900162f2:	dce1      	bgt.n	900162b8 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
900162f4:	e702      	b.n	900160fc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
900162f6:	bf00      	nop
900162f8:	24026fe0 	.word	0x24026fe0
900162fc:	24026fdc 	.word	0x24026fdc
90016300:	24026fe4 	.word	0x24026fe4
90016304:	24026fe8 	.word	0x24026fe8
90016308:	ebaa 0606 	sub.w	r6, sl, r6
9001630c:	2002      	movs	r0, #2
9001630e:	fb96 f6f0 	sdiv	r6, r6, r0
90016312:	e71c      	b.n	9001614e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
90016314:	441e      	add	r6, r3
90016316:	ebaa 0606 	sub.w	r6, sl, r6
9001631a:	e718      	b.n	9001614e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
9001631c:	8925      	ldrh	r5, [r4, #8]
9001631e:	1aed      	subs	r5, r5, r3
90016320:	eba5 050a 	sub.w	r5, r5, sl
90016324:	fa0f fb85 	sxth.w	fp, r5
90016328:	8965      	ldrh	r5, [r4, #10]
9001632a:	eba5 0509 	sub.w	r5, r5, r9
9001632e:	b22d      	sxth	r5, r5
90016330:	e72d      	b.n	9001618e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90016332:	8965      	ldrh	r5, [r4, #10]
90016334:	f04f 0b00 	mov.w	fp, #0
90016338:	1aed      	subs	r5, r5, r3
9001633a:	4633      	mov	r3, r6
9001633c:	463e      	mov	r6, r7
9001633e:	eba5 050a 	sub.w	r5, r5, sl
90016342:	461f      	mov	r7, r3
90016344:	b22d      	sxth	r5, r5
90016346:	e722      	b.n	9001618e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
90016348:	2500      	movs	r5, #0
9001634a:	e720      	b.n	9001618e <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

9001634c <_ZN8touchgfx8TextAreaD0Ev>:
9001634c:	b510      	push	{r4, lr}
9001634e:	4604      	mov	r4, r0
90016350:	2148      	movs	r1, #72	; 0x48
90016352:	f010 fdce 	bl	90026ef2 <_ZdlPvj>
90016356:	4620      	mov	r0, r4
90016358:	bd10      	pop	{r4, pc}
	...

9001635c <_ZNK8touchgfx8TextArea17invalidateContentEv>:
9001635c:	b513      	push	{r0, r1, r4, lr}
9001635e:	f890 3036 	ldrb.w	r3, [r0, #54]	; 0x36
90016362:	4604      	mov	r4, r0
90016364:	b1fb      	cbz	r3, 900163a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90016366:	4b16      	ldr	r3, [pc, #88]	; (900163c0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
90016368:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
9001636a:	881b      	ldrh	r3, [r3, #0]
9001636c:	428b      	cmp	r3, r1
9001636e:	d91a      	bls.n	900163a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90016370:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
90016374:	2b00      	cmp	r3, #0
90016376:	dd16      	ble.n	900163a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90016378:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
9001637c:	2b00      	cmp	r3, #0
9001637e:	dd12      	ble.n	900163a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
90016380:	4b10      	ldr	r3, [pc, #64]	; (900163c4 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
90016382:	6818      	ldr	r0, [r3, #0]
90016384:	f7f1 f86c 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90016388:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
9001638c:	6822      	ldr	r2, [r4, #0]
9001638e:	2b00      	cmp	r3, #0
90016390:	db06      	blt.n	900163a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
90016392:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
90016396:	2b00      	cmp	r3, #0
90016398:	db02      	blt.n	900163a0 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
9001639a:	6c63      	ldr	r3, [r4, #68]	; 0x44
9001639c:	4298      	cmp	r0, r3
9001639e:	d004      	beq.n	900163aa <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
900163a0:	6953      	ldr	r3, [r2, #20]
900163a2:	4620      	mov	r0, r4
900163a4:	4798      	blx	r3
900163a6:	b002      	add	sp, #8
900163a8:	bd10      	pop	{r4, pc}
900163aa:	f104 013c 	add.w	r1, r4, #60	; 0x3c
900163ae:	466b      	mov	r3, sp
900163b0:	6912      	ldr	r2, [r2, #16]
900163b2:	c903      	ldmia	r1, {r0, r1}
900163b4:	e883 0003 	stmia.w	r3, {r0, r1}
900163b8:	4619      	mov	r1, r3
900163ba:	4620      	mov	r0, r4
900163bc:	4790      	blx	r2
900163be:	e7f2      	b.n	900163a6 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
900163c0:	24026fe0 	.word	0x24026fe0
900163c4:	24026fe8 	.word	0x24026fe8

900163c8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
900163c8:	4b45      	ldr	r3, [pc, #276]	; (900164e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
900163ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900163ce:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
900163d0:	b08e      	sub	sp, #56	; 0x38
900163d2:	881b      	ldrh	r3, [r3, #0]
900163d4:	4604      	mov	r4, r0
900163d6:	4293      	cmp	r3, r2
900163d8:	d97e      	bls.n	900164d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
900163da:	6808      	ldr	r0, [r1, #0]
900163dc:	ab05      	add	r3, sp, #20
900163de:	6849      	ldr	r1, [r1, #4]
900163e0:	4d40      	ldr	r5, [pc, #256]	; (900164e4 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
900163e2:	c303      	stmia	r3!, {r0, r1}
900163e4:	4611      	mov	r1, r2
900163e6:	6828      	ldr	r0, [r5, #0]
900163e8:	f7f1 f83a 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
900163ec:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	; 0x42
900163f0:	2b00      	cmp	r3, #0
900163f2:	db11      	blt.n	90016418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900163f4:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	; 0x40
900163f8:	2b00      	cmp	r3, #0
900163fa:	db0d      	blt.n	90016418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
900163fc:	6c63      	ldr	r3, [r4, #68]	; 0x44
900163fe:	4298      	cmp	r0, r3
90016400:	d10a      	bne.n	90016418 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
90016402:	f104 023c 	add.w	r2, r4, #60	; 0x3c
90016406:	ab09      	add	r3, sp, #36	; 0x24
90016408:	e892 0003 	ldmia.w	r2, {r0, r1}
9001640c:	e883 0003 	stmia.w	r3, {r0, r1}
90016410:	4619      	mov	r1, r3
90016412:	a805      	add	r0, sp, #20
90016414:	f7fe fad4 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90016418:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
9001641c:	2b00      	cmp	r3, #0
9001641e:	dd5b      	ble.n	900164d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90016420:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
90016424:	2b00      	cmp	r3, #0
90016426:	dd57      	ble.n	900164d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
90016428:	4f2f      	ldr	r7, [pc, #188]	; (900164e8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
9001642a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001642c:	683b      	ldr	r3, [r7, #0]
9001642e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
90016432:	4b2e      	ldr	r3, [pc, #184]	; (900164ec <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
90016434:	681b      	ldr	r3, [r3, #0]
90016436:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
9001643a:	2e00      	cmp	r6, #0
9001643c:	d04c      	beq.n	900164d8 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
9001643e:	6823      	ldr	r3, [r4, #0]
90016440:	4620      	mov	r0, r4
90016442:	f894 8036 	ldrb.w	r8, [r4, #54]	; 0x36
90016446:	6edb      	ldr	r3, [r3, #108]	; 0x6c
90016448:	4798      	blx	r3
9001644a:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
9001644c:	683b      	ldr	r3, [r7, #0]
9001644e:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	; 0x34
90016452:	eb03 0342 	add.w	r3, r3, r2, lsl #1
90016456:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
9001645a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
9001645e:	785b      	ldrb	r3, [r3, #1]
90016460:	f894 7037 	ldrb.w	r7, [r4, #55]	; 0x37
90016464:	f3c3 0381 	ubfx	r3, r3, #2, #2
90016468:	6b21      	ldr	r1, [r4, #48]	; 0x30
9001646a:	9609      	str	r6, [sp, #36]	; 0x24
9001646c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
90016470:	4b1f      	ldr	r3, [pc, #124]	; (900164f0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
90016472:	f88d 0028 	strb.w	r0, [sp, #40]	; 0x28
90016476:	681b      	ldr	r3, [r3, #0]
90016478:	f88d e02a 	strb.w	lr, [sp, #42]	; 0x2a
9001647c:	910b      	str	r1, [sp, #44]	; 0x2c
9001647e:	f8ad c030 	strh.w	ip, [sp, #48]	; 0x30
90016482:	f88d 8032 	strb.w	r8, [sp, #50]	; 0x32
90016486:	f88d 7033 	strb.w	r7, [sp, #51]	; 0x33
9001648a:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
9001648e:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
90016492:	b10a      	cbz	r2, 90016498 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
90016494:	6cde      	ldr	r6, [r3, #76]	; 0x4c
90016496:	b906      	cbnz	r6, 9001649a <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
90016498:	689e      	ldr	r6, [r3, #8]
9001649a:	af07      	add	r7, sp, #28
9001649c:	4621      	mov	r1, r4
9001649e:	4638      	mov	r0, r7
900164a0:	f002 ffd2 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900164a4:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
900164a6:	6828      	ldr	r0, [r5, #0]
900164a8:	f7f0 ffda 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
900164ac:	6823      	ldr	r3, [r4, #0]
900164ae:	4605      	mov	r5, r0
900164b0:	4620      	mov	r0, r4
900164b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
900164b4:	4798      	blx	r3
900164b6:	6823      	ldr	r3, [r4, #0]
900164b8:	4680      	mov	r8, r0
900164ba:	4620      	mov	r0, r4
900164bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900164c0:	4798      	blx	r3
900164c2:	ab09      	add	r3, sp, #36	; 0x24
900164c4:	9501      	str	r5, [sp, #4]
900164c6:	9300      	str	r3, [sp, #0]
900164c8:	ab05      	add	r3, sp, #20
900164ca:	e9cd 8002 	strd	r8, r0, [sp, #8]
900164ce:	4630      	mov	r0, r6
900164d0:	e897 0006 	ldmia.w	r7, {r1, r2}
900164d4:	f7f0 ff74 	bl	900073c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900164d8:	b00e      	add	sp, #56	; 0x38
900164da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900164de:	bf00      	nop
900164e0:	24026fe0 	.word	0x24026fe0
900164e4:	24026fe8 	.word	0x24026fe8
900164e8:	24026fdc 	.word	0x24026fdc
900164ec:	24026fe4 	.word	0x24026fe4
900164f0:	24026f8c 	.word	0x24026f8c

900164f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>:
900164f4:	b570      	push	{r4, r5, r6, lr}
900164f6:	6803      	ldr	r3, [r0, #0]
900164f8:	4604      	mov	r4, r0
900164fa:	4615      	mov	r5, r2
900164fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
900164fe:	4798      	blx	r3
90016500:	6823      	ldr	r3, [r4, #0]
90016502:	4629      	mov	r1, r5
90016504:	4620      	mov	r0, r4
90016506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90016508:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001650c:	4718      	bx	r3
	...

90016510 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
90016510:	b538      	push	{r3, r4, r5, lr}
90016512:	4b0e      	ldr	r3, [pc, #56]	; (9001654c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
90016514:	4604      	mov	r4, r0
90016516:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
90016518:	881b      	ldrh	r3, [r3, #0]
9001651a:	429a      	cmp	r2, r3
9001651c:	d214      	bcs.n	90016548 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
9001651e:	6803      	ldr	r3, [r0, #0]
90016520:	6f5b      	ldr	r3, [r3, #116]	; 0x74
90016522:	4798      	blx	r3
90016524:	6823      	ldr	r3, [r4, #0]
90016526:	4605      	mov	r5, r0
90016528:	4620      	mov	r0, r4
9001652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
9001652c:	4798      	blx	r3
9001652e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90016532:	b22d      	sxth	r5, r5
90016534:	4601      	mov	r1, r0
90016536:	f013 0ffd 	tst.w	r3, #253	; 0xfd
9001653a:	bf06      	itte	eq
9001653c:	4602      	moveq	r2, r0
9001653e:	4629      	moveq	r1, r5
90016540:	462a      	movne	r2, r5
90016542:	4620      	mov	r0, r4
90016544:	f7ff ffd6 	bl	900164f4 <_ZN8touchgfx8Drawable14setWidthHeightEss>
90016548:	bd38      	pop	{r3, r4, r5, pc}
9001654a:	bf00      	nop
9001654c:	24026fe0 	.word	0x24026fe0

90016550 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
90016550:	b530      	push	{r4, r5, lr}
90016552:	888b      	ldrh	r3, [r1, #4]
90016554:	b085      	sub	sp, #20
90016556:	4604      	mov	r4, r0
90016558:	8583      	strh	r3, [r0, #44]	; 0x2c
9001655a:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
9001655e:	b923      	cbnz	r3, 9001656a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90016560:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
90016564:	b90b      	cbnz	r3, 9001656a <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
90016566:	f7ff ffd3 	bl	90016510 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
9001656a:	6823      	ldr	r3, [r4, #0]
9001656c:	466d      	mov	r5, sp
9001656e:	4621      	mov	r1, r4
90016570:	343c      	adds	r4, #60	; 0x3c
90016572:	4628      	mov	r0, r5
90016574:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
90016578:	4798      	blx	r3
9001657a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
9001657e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
90016582:	b005      	add	sp, #20
90016584:	bd30      	pop	{r4, r5, pc}

90016586 <_ZNK8touchgfx3Box12getSolidRectEv>:
90016586:	2300      	movs	r3, #0
90016588:	8083      	strh	r3, [r0, #4]
9001658a:	80c3      	strh	r3, [r0, #6]
9001658c:	8003      	strh	r3, [r0, #0]
9001658e:	8043      	strh	r3, [r0, #2]
90016590:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
90016594:	2bff      	cmp	r3, #255	; 0xff
90016596:	bf01      	itttt	eq
90016598:	890b      	ldrheq	r3, [r1, #8]
9001659a:	8083      	strheq	r3, [r0, #4]
9001659c:	894b      	ldrheq	r3, [r1, #10]
9001659e:	80c3      	strheq	r3, [r0, #6]
900165a0:	4770      	bx	lr
	...

900165a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
900165a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
900165a6:	4604      	mov	r4, r0
900165a8:	466b      	mov	r3, sp
900165aa:	6808      	ldr	r0, [r1, #0]
900165ac:	6849      	ldr	r1, [r1, #4]
900165ae:	c303      	stmia	r3!, {r0, r1}
900165b0:	6823      	ldr	r3, [r4, #0]
900165b2:	4669      	mov	r1, sp
900165b4:	4620      	mov	r0, r4
900165b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900165b8:	4798      	blx	r3
900165ba:	4b08      	ldr	r3, [pc, #32]	; (900165dc <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
900165bc:	681b      	ldr	r3, [r3, #0]
900165be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900165c2:	b10a      	cbz	r2, 900165c8 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
900165c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900165c6:	b900      	cbnz	r0, 900165ca <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
900165c8:	6898      	ldr	r0, [r3, #8]
900165ca:	6803      	ldr	r3, [r0, #0]
900165cc:	4669      	mov	r1, sp
900165ce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
900165d0:	6a1d      	ldr	r5, [r3, #32]
900165d2:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900165d6:	47a8      	blx	r5
900165d8:	b003      	add	sp, #12
900165da:	bd30      	pop	{r4, r5, pc}
900165dc:	24026f8c 	.word	0x24026f8c

900165e0 <_ZN8touchgfx3BoxD1Ev>:
900165e0:	4770      	bx	lr

900165e2 <_ZN8touchgfx3BoxD0Ev>:
900165e2:	b510      	push	{r4, lr}
900165e4:	4604      	mov	r4, r0
900165e6:	212c      	movs	r1, #44	; 0x2c
900165e8:	f010 fc83 	bl	90026ef2 <_ZdlPvj>
900165ec:	4620      	mov	r0, r4
900165ee:	bd10      	pop	{r4, pc}

900165f0 <_ZNK8touchgfx3Box17invalidateContentEv>:
900165f0:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
900165f4:	b12a      	cbz	r2, 90016602 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900165f6:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
900165fa:	b112      	cbz	r2, 90016602 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
900165fc:	6803      	ldr	r3, [r0, #0]
900165fe:	695b      	ldr	r3, [r3, #20]
90016600:	4718      	bx	r3
90016602:	4770      	bx	lr

90016604 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
90016604:	4b30      	ldr	r3, [pc, #192]	; (900166c8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
90016606:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001660a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
9001660c:	b08d      	sub	sp, #52	; 0x34
9001660e:	881b      	ldrh	r3, [r3, #0]
90016610:	4604      	mov	r4, r0
90016612:	460f      	mov	r7, r1
90016614:	4293      	cmp	r3, r2
90016616:	d954      	bls.n	900166c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90016618:	4b2c      	ldr	r3, [pc, #176]	; (900166cc <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
9001661a:	6819      	ldr	r1, [r3, #0]
9001661c:	eb01 0342 	add.w	r3, r1, r2, lsl #1
90016620:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
90016624:	4a2a      	ldr	r2, [pc, #168]	; (900166d0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
90016626:	6812      	ldr	r2, [r2, #0]
90016628:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
9001662c:	2900      	cmp	r1, #0
9001662e:	d048      	beq.n	900166c2 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
90016630:	785a      	ldrb	r2, [r3, #1]
90016632:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
90016636:	f3c2 0801 	ubfx	r8, r2, #0, #2
9001663a:	f3c2 0281 	ubfx	r2, r2, #2, #2
9001663e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
90016642:	4b24      	ldr	r3, [pc, #144]	; (900166d4 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
90016644:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
90016648:	681a      	ldr	r2, [r3, #0]
9001664a:	f890 5036 	ldrb.w	r5, [r0, #54]	; 0x36
9001664e:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	; 0x34
90016652:	f890 e038 	ldrb.w	lr, [r0, #56]	; 0x38
90016656:	6b26      	ldr	r6, [r4, #48]	; 0x30
90016658:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
9001665c:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
90016660:	9107      	str	r1, [sp, #28]
90016662:	f88d 8020 	strb.w	r8, [sp, #32]
90016666:	f88d e022 	strb.w	lr, [sp, #34]	; 0x22
9001666a:	9609      	str	r6, [sp, #36]	; 0x24
9001666c:	f8ad c028 	strh.w	ip, [sp, #40]	; 0x28
90016670:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
90016674:	f88d 002b 	strb.w	r0, [sp, #43]	; 0x2b
90016678:	b10b      	cbz	r3, 9001667e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
9001667a:	6cd5      	ldr	r5, [r2, #76]	; 0x4c
9001667c:	b905      	cbnz	r5, 90016680 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
9001667e:	6895      	ldr	r5, [r2, #8]
90016680:	ae05      	add	r6, sp, #20
90016682:	4621      	mov	r1, r4
90016684:	4630      	mov	r0, r6
90016686:	f002 fedf 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001668a:	4b13      	ldr	r3, [pc, #76]	; (900166d8 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
9001668c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
9001668e:	6818      	ldr	r0, [r3, #0]
90016690:	f7f0 fee6 	bl	90007460 <_ZNK8touchgfx5Texts7getTextEt>
90016694:	6823      	ldr	r3, [r4, #0]
90016696:	4680      	mov	r8, r0
90016698:	4620      	mov	r0, r4
9001669a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
9001669c:	4798      	blx	r3
9001669e:	6823      	ldr	r3, [r4, #0]
900166a0:	4681      	mov	r9, r0
900166a2:	4620      	mov	r0, r4
900166a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
900166a8:	4798      	blx	r3
900166aa:	ab07      	add	r3, sp, #28
900166ac:	f8cd 8004 	str.w	r8, [sp, #4]
900166b0:	9300      	str	r3, [sp, #0]
900166b2:	463b      	mov	r3, r7
900166b4:	e9cd 9002 	strd	r9, r0, [sp, #8]
900166b8:	4628      	mov	r0, r5
900166ba:	e896 0006 	ldmia.w	r6, {r1, r2}
900166be:	f7f0 fe7f 	bl	900073c0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
900166c2:	b00d      	add	sp, #52	; 0x34
900166c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
900166c8:	24026fe0 	.word	0x24026fe0
900166cc:	24026fdc 	.word	0x24026fdc
900166d0:	24026fe4 	.word	0x24026fe4
900166d4:	24026f8c 	.word	0x24026f8c
900166d8:	24026fe8 	.word	0x24026fe8

900166dc <_ZN8touchgfx13BoxWithBorderD1Ev>:
900166dc:	4770      	bx	lr

900166de <_ZN8touchgfx13BoxWithBorderD0Ev>:
900166de:	b510      	push	{r4, lr}
900166e0:	4604      	mov	r4, r0
900166e2:	2134      	movs	r1, #52	; 0x34
900166e4:	f010 fc05 	bl	90026ef2 <_ZdlPvj>
900166e8:	4620      	mov	r0, r4
900166ea:	bd10      	pop	{r4, pc}

900166ec <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
900166ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900166f0:	8e03      	ldrh	r3, [r0, #48]	; 0x30
900166f2:	4604      	mov	r4, r0
900166f4:	460e      	mov	r6, r1
900166f6:	b08e      	sub	sp, #56	; 0x38
900166f8:	b218      	sxth	r0, r3
900166fa:	8921      	ldrh	r1, [r4, #8]
900166fc:	005b      	lsls	r3, r3, #1
900166fe:	8962      	ldrh	r2, [r4, #10]
90016700:	f8ad 0000 	strh.w	r0, [sp]
90016704:	b29b      	uxth	r3, r3
90016706:	f8ad 0002 	strh.w	r0, [sp, #2]
9001670a:	1ac9      	subs	r1, r1, r3
9001670c:	1ad3      	subs	r3, r2, r3
9001670e:	b209      	sxth	r1, r1
90016710:	b21b      	sxth	r3, r3
90016712:	2900      	cmp	r1, #0
90016714:	f8ad 1004 	strh.w	r1, [sp, #4]
90016718:	f8ad 3006 	strh.w	r3, [sp, #6]
9001671c:	dd5e      	ble.n	900167dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
9001671e:	2b00      	cmp	r3, #0
90016720:	dd5c      	ble.n	900167dc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
90016722:	6830      	ldr	r0, [r6, #0]
90016724:	ab02      	add	r3, sp, #8
90016726:	6871      	ldr	r1, [r6, #4]
90016728:	c303      	stmia	r3!, {r0, r1}
9001672a:	4669      	mov	r1, sp
9001672c:	a802      	add	r0, sp, #8
9001672e:	f7fe f947 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90016732:	4620      	mov	r0, r4
90016734:	a902      	add	r1, sp, #8
90016736:	f7ff ff35 	bl	900165a4 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
9001673a:	8e20      	ldrh	r0, [r4, #48]	; 0x30
9001673c:	2800      	cmp	r0, #0
9001673e:	d05f      	beq.n	90016800 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
90016740:	8963      	ldrh	r3, [r4, #10]
90016742:	b202      	sxth	r2, r0
90016744:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
90016748:	2500      	movs	r5, #0
9001674a:	1a1f      	subs	r7, r3, r0
9001674c:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
90016750:	f8ad 101c 	strh.w	r1, [sp, #28]
90016754:	b21b      	sxth	r3, r3
90016756:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
9001675a:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
9001675e:	af04      	add	r7, sp, #16
90016760:	1a09      	subs	r1, r1, r0
90016762:	9506      	str	r5, [sp, #24]
90016764:	f8ad 201e 	strh.w	r2, [sp, #30]
90016768:	f8ad 5020 	strh.w	r5, [sp, #32]
9001676c:	f8ad 2026 	strh.w	r2, [sp, #38]	; 0x26
90016770:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
90016774:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
90016778:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
9001677c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
90016780:	f8ad 1030 	strh.w	r1, [sp, #48]	; 0x30
90016784:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90016788:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
9001678c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90016790:	ab06      	add	r3, sp, #24
90016792:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90016796:	e893 0003 	ldmia.w	r3, {r0, r1}
9001679a:	e887 0003 	stmia.w	r7, {r0, r1}
9001679e:	4631      	mov	r1, r6
900167a0:	4638      	mov	r0, r7
900167a2:	f7fe f90d 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900167a6:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
900167aa:	2b00      	cmp	r3, #0
900167ac:	dd12      	ble.n	900167d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
900167ae:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
900167b2:	2b00      	cmp	r3, #0
900167b4:	dd0e      	ble.n	900167d4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
900167b6:	6823      	ldr	r3, [r4, #0]
900167b8:	4639      	mov	r1, r7
900167ba:	4620      	mov	r0, r4
900167bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900167be:	4798      	blx	r3
900167c0:	f7fe fbdc 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900167c4:	6803      	ldr	r3, [r0, #0]
900167c6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900167c8:	4639      	mov	r1, r7
900167ca:	f8d3 8020 	ldr.w	r8, [r3, #32]
900167ce:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900167d2:	47c0      	blx	r8
900167d4:	3501      	adds	r5, #1
900167d6:	2d04      	cmp	r5, #4
900167d8:	d1da      	bne.n	90016790 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
900167da:	e011      	b.n	90016800 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
900167dc:	6830      	ldr	r0, [r6, #0]
900167de:	ab06      	add	r3, sp, #24
900167e0:	6871      	ldr	r1, [r6, #4]
900167e2:	c303      	stmia	r3!, {r0, r1}
900167e4:	6823      	ldr	r3, [r4, #0]
900167e6:	a906      	add	r1, sp, #24
900167e8:	4620      	mov	r0, r4
900167ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900167ec:	4798      	blx	r3
900167ee:	f7fe fbc5 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
900167f2:	6803      	ldr	r3, [r0, #0]
900167f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
900167f6:	a906      	add	r1, sp, #24
900167f8:	6a1d      	ldr	r5, [r3, #32]
900167fa:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
900167fe:	47a8      	blx	r5
90016800:	b00e      	add	sp, #56	; 0x38
90016802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

90016806 <_ZN8touchgfx5ImageD1Ev>:
90016806:	4770      	bx	lr

90016808 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
90016808:	b570      	push	{r4, r5, r6, lr}
9001680a:	880b      	ldrh	r3, [r1, #0]
9001680c:	460d      	mov	r5, r1
9001680e:	4604      	mov	r4, r0
90016810:	84c3      	strh	r3, [r0, #38]	; 0x26
90016812:	4608      	mov	r0, r1
90016814:	f004 fd8c 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
90016818:	4606      	mov	r6, r0
9001681a:	4628      	mov	r0, r5
9001681c:	f004 fdbc 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016820:	6823      	ldr	r3, [r4, #0]
90016822:	4605      	mov	r5, r0
90016824:	4631      	mov	r1, r6
90016826:	4620      	mov	r0, r4
90016828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001682a:	4798      	blx	r3
9001682c:	6823      	ldr	r3, [r4, #0]
9001682e:	4629      	mov	r1, r5
90016830:	4620      	mov	r0, r4
90016832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90016834:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90016838:	4718      	bx	r3

9001683a <_ZN8touchgfx5ImageD0Ev>:
9001683a:	b510      	push	{r4, lr}
9001683c:	4604      	mov	r4, r0
9001683e:	212c      	movs	r1, #44	; 0x2c
90016840:	f010 fb57 	bl	90026ef2 <_ZdlPvj>
90016844:	4620      	mov	r0, r4
90016846:	bd10      	pop	{r4, pc}

90016848 <_ZNK8touchgfx5Image12getSolidRectEv>:
90016848:	b510      	push	{r4, lr}
9001684a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
9001684e:	4604      	mov	r4, r0
90016850:	2bff      	cmp	r3, #255	; 0xff
90016852:	d006      	beq.n	90016862 <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
90016854:	2300      	movs	r3, #0
90016856:	8003      	strh	r3, [r0, #0]
90016858:	8043      	strh	r3, [r0, #2]
9001685a:	8083      	strh	r3, [r0, #4]
9001685c:	80c3      	strh	r3, [r0, #6]
9001685e:	4620      	mov	r0, r4
90016860:	bd10      	pop	{r4, pc}
90016862:	3126      	adds	r1, #38	; 0x26
90016864:	f004 fdcc 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
90016868:	e7f9      	b.n	9001685e <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

9001686c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
9001686c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90016870:	4604      	mov	r4, r0
90016872:	b088      	sub	sp, #32
90016874:	2500      	movs	r5, #0
90016876:	460f      	mov	r7, r1
90016878:	f854 3b26 	ldr.w	r3, [r4], #38
9001687c:	a904      	add	r1, sp, #16
9001687e:	4606      	mov	r6, r0
90016880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90016882:	e9cd 5504 	strd	r5, r5, [sp, #16]
90016886:	4798      	blx	r3
90016888:	4620      	mov	r0, r4
9001688a:	f004 fd51 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001688e:	4680      	mov	r8, r0
90016890:	4620      	mov	r0, r4
90016892:	f004 fd81 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
90016896:	9506      	str	r5, [sp, #24]
90016898:	ad06      	add	r5, sp, #24
9001689a:	f8ad 001e 	strh.w	r0, [sp, #30]
9001689e:	4639      	mov	r1, r7
900168a0:	f8ad 801c 	strh.w	r8, [sp, #28]
900168a4:	4628      	mov	r0, r5
900168a6:	f7fe f88b 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900168aa:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
900168ae:	2b00      	cmp	r3, #0
900168b0:	dd19      	ble.n	900168e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900168b2:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
900168b6:	2b00      	cmp	r3, #0
900168b8:	dd15      	ble.n	900168e6 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
900168ba:	4b0c      	ldr	r3, [pc, #48]	; (900168ec <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
900168bc:	681b      	ldr	r3, [r3, #0]
900168be:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
900168c2:	b10a      	cbz	r2, 900168c8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
900168c4:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
900168c6:	b900      	cbnz	r0, 900168ca <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
900168c8:	6898      	ldr	r0, [r3, #8]
900168ca:	2701      	movs	r7, #1
900168cc:	6801      	ldr	r1, [r0, #0]
900168ce:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
900168d2:	9702      	str	r7, [sp, #8]
900168d4:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
900168d8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
900168dc:	e9cd 5600 	strd	r5, r6, [sp]
900168e0:	688d      	ldr	r5, [r1, #8]
900168e2:	4621      	mov	r1, r4
900168e4:	47a8      	blx	r5
900168e6:	b008      	add	sp, #32
900168e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
900168ec:	24026f8c 	.word	0x24026f8c

900168f0 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
900168f0:	b510      	push	{r4, lr}
900168f2:	6803      	ldr	r3, [r0, #0]
900168f4:	460c      	mov	r4, r1
900168f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
900168f8:	4798      	blx	r3
900168fa:	1b03      	subs	r3, r0, r4
900168fc:	4258      	negs	r0, r3
900168fe:	4158      	adcs	r0, r3
90016900:	bd10      	pop	{r4, pc}
	...

90016904 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
90016904:	4b01      	ldr	r3, [pc, #4]	; (9001690c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
90016906:	6019      	str	r1, [r3, #0]
90016908:	4770      	bx	lr
9001690a:	bf00      	nop
9001690c:	24026f94 	.word	0x24026f94

90016910 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016914:	4696      	mov	lr, r2
90016916:	b097      	sub	sp, #92	; 0x5c
90016918:	4605      	mov	r5, r0
9001691a:	4614      	mov	r4, r2
9001691c:	460e      	mov	r6, r1
9001691e:	461f      	mov	r7, r3
90016920:	f10d 0c1c 	add.w	ip, sp, #28
90016924:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
90016928:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
9001692c:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
90016930:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016934:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016938:	f8de 3000 	ldr.w	r3, [lr]
9001693c:	f104 0e14 	add.w	lr, r4, #20
90016940:	f8cc 3000 	str.w	r3, [ip]
90016944:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90016948:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001694c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016950:	f8de 3000 	ldr.w	r3, [lr]
90016954:	f104 0e28 	add.w	lr, r4, #40	; 0x28
90016958:	f8cc 3000 	str.w	r3, [ip]
9001695c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
90016960:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
90016964:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
90016968:	f8de 3000 	ldr.w	r3, [lr]
9001696c:	4631      	mov	r1, r6
9001696e:	9a21      	ldr	r2, [sp, #132]	; 0x84
90016970:	4628      	mov	r0, r5
90016972:	f8cc 3000 	str.w	r3, [ip]
90016976:	682b      	ldr	r3, [r5, #0]
90016978:	9201      	str	r2, [sp, #4]
9001697a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9001697c:	f8cd 8008 	str.w	r8, [sp, #8]
90016980:	9200      	str	r2, [sp, #0]
90016982:	aa07      	add	r2, sp, #28
90016984:	e9cd 9a03 	strd	r9, sl, [sp, #12]
90016988:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
9001698c:	463b      	mov	r3, r7
9001698e:	47d8      	blx	fp
90016990:	46a6      	mov	lr, r4
90016992:	f10d 0c1c 	add.w	ip, sp, #28
90016996:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
9001699a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
9001699e:	f8de 3000 	ldr.w	r3, [lr]
900169a2:	f104 0e28 	add.w	lr, r4, #40	; 0x28
900169a6:	343c      	adds	r4, #60	; 0x3c
900169a8:	f8cc 3000 	str.w	r3, [ip]
900169ac:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
900169b0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
900169b4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900169b8:	f8de 3000 	ldr.w	r3, [lr]
900169bc:	f8cc 3000 	str.w	r3, [ip]
900169c0:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
900169c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
900169c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
900169ca:	6823      	ldr	r3, [r4, #0]
900169cc:	4631      	mov	r1, r6
900169ce:	4628      	mov	r0, r5
900169d0:	f8cc 3000 	str.w	r3, [ip]
900169d4:	682b      	ldr	r3, [r5, #0]
900169d6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
900169da:	9a21      	ldr	r2, [sp, #132]	; 0x84
900169dc:	f8cd 8008 	str.w	r8, [sp, #8]
900169e0:	9201      	str	r2, [sp, #4]
900169e2:	9a20      	ldr	r2, [sp, #128]	; 0x80
900169e4:	9200      	str	r2, [sp, #0]
900169e6:	aa07      	add	r2, sp, #28
900169e8:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
900169ea:	463b      	mov	r3, r7
900169ec:	47a0      	blx	r4
900169ee:	b017      	add	sp, #92	; 0x5c
900169f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900169f4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
900169f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900169f8:	b08d      	sub	sp, #52	; 0x34
900169fa:	4688      	mov	r8, r1
900169fc:	f8d3 c000 	ldr.w	ip, [r3]
90016a00:	9916      	ldr	r1, [sp, #88]	; 0x58
90016a02:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
90016a06:	680f      	ldr	r7, [r1, #0]
90016a08:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
90016a0c:	eba7 070c 	sub.w	r7, r7, ip
90016a10:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
90016a14:	edd3 6a07 	vldr	s13, [r3, #28]
90016a18:	42bc      	cmp	r4, r7
90016a1a:	9918      	ldr	r1, [sp, #96]	; 0x60
90016a1c:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
90016a20:	bfa8      	it	ge
90016a22:	463c      	movge	r4, r7
90016a24:	f9b1 9000 	ldrsh.w	r9, [r1]
90016a28:	f9ba 1000 	ldrsh.w	r1, [sl]
90016a2c:	ee07 4a90 	vmov	s15, r4
90016a30:	eb09 0e0c 	add.w	lr, r9, ip
90016a34:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
90016a38:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
90016a3c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
90016a40:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
90016a44:	4571      	cmp	r1, lr
90016a46:	ee25 4a04 	vmul.f32	s8, s10, s8
90016a4a:	ee65 4a24 	vmul.f32	s9, s10, s9
90016a4e:	ee25 5a27 	vmul.f32	s10, s10, s15
90016a52:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
90016a56:	ee71 0aa4 	vadd.f32	s1, s3, s9
90016a5a:	ee32 1a05 	vadd.f32	s2, s4, s10
90016a5e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
90016a62:	ee36 0a84 	vadd.f32	s0, s13, s8
90016a66:	ee61 1a87 	vmul.f32	s3, s3, s14
90016a6a:	ee22 2a07 	vmul.f32	s4, s4, s14
90016a6e:	f340 808c 	ble.w	90016b8a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
90016a72:	eba1 060e 	sub.w	r6, r1, lr
90016a76:	fb96 f5f4 	sdiv	r5, r6, r4
90016a7a:	ee07 5a10 	vmov	s14, r5
90016a7e:	2d00      	cmp	r5, #0
90016a80:	fb04 6615 	mls	r6, r4, r5, r6
90016a84:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
90016a88:	eea7 0a04 	vfma.f32	s0, s14, s8
90016a8c:	eee7 0a24 	vfma.f32	s1, s14, s9
90016a90:	eea7 1a05 	vfma.f32	s2, s14, s10
90016a94:	dd12      	ble.n	90016abc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
90016a96:	ee70 6a44 	vsub.f32	s13, s0, s8
90016a9a:	ee70 1ae4 	vsub.f32	s3, s1, s9
90016a9e:	ee31 2a45 	vsub.f32	s4, s2, s10
90016aa2:	eef5 6a40 	vcmp.f32	s13, #0.0
90016aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016aaa:	bf14      	ite	ne
90016aac:	ee87 7aa6 	vdivne.f32	s14, s15, s13
90016ab0:	eeb0 7a67 	vmoveq.f32	s14, s15
90016ab4:	ee61 1a87 	vmul.f32	s3, s3, s14
90016ab8:	ee22 2a07 	vmul.f32	s4, s4, s14
90016abc:	fb05 f204 	mul.w	r2, r5, r4
90016ac0:	1abf      	subs	r7, r7, r2
90016ac2:	4494      	add	ip, r2
90016ac4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
90016ac8:	4411      	add	r1, r2
90016aca:	eb09 020c 	add.w	r2, r9, ip
90016ace:	b209      	sxth	r1, r1
90016ad0:	443a      	add	r2, r7
90016ad2:	428a      	cmp	r2, r1
90016ad4:	bfc4      	itt	gt
90016ad6:	eba1 0209 	subgt.w	r2, r1, r9
90016ada:	eba2 070c 	subgt.w	r7, r2, ip
90016ade:	2f00      	cmp	r7, #0
90016ae0:	dd50      	ble.n	90016b84 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
90016ae2:	fb97 f1f4 	sdiv	r1, r7, r4
90016ae6:	fb04 7211 	mls	r2, r4, r1, r7
90016aea:	b90a      	cbnz	r2, 90016af0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
90016aec:	3901      	subs	r1, #1
90016aee:	4622      	mov	r2, r4
90016af0:	eec7 3a80 	vdiv.f32	s7, s15, s0
90016af4:	6840      	ldr	r0, [r0, #4]
90016af6:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
90016afa:	44b6      	add	lr, r6
90016afc:	f8d0 a000 	ldr.w	sl, [r0]
90016b00:	2900      	cmp	r1, #0
90016b02:	bfcc      	ite	gt
90016b04:	46a1      	movgt	r9, r4
90016b06:	4691      	movle	r9, r2
90016b08:	900b      	str	r0, [sp, #44]	; 0x2c
90016b0a:	9817      	ldr	r0, [sp, #92]	; 0x5c
90016b0c:	fb04 e505 	mla	r5, r4, r5, lr
90016b10:	eef0 6a42 	vmov.f32	s13, s4
90016b14:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
90016b18:	9008      	str	r0, [sp, #32]
90016b1a:	eeb0 7a61 	vmov.f32	s14, s3
90016b1e:	9818      	ldr	r0, [sp, #96]	; 0x60
90016b20:	695b      	ldr	r3, [r3, #20]
90016b22:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90016b26:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
90016b2a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
90016b2e:	980b      	ldr	r0, [sp, #44]	; 0x2c
90016b30:	445b      	add	r3, fp
90016b32:	9307      	str	r3, [sp, #28]
90016b34:	ee16 3a90 	vmov	r3, s13
90016b38:	e9cd 8505 	strd	r8, r5, [sp, #20]
90016b3c:	ee60 2aa3 	vmul.f32	s5, s1, s7
90016b40:	ee21 3a23 	vmul.f32	s6, s2, s7
90016b44:	ee72 7ae1 	vsub.f32	s15, s5, s3
90016b48:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016b4c:	ee17 7a90 	vmov	r7, s15
90016b50:	ee73 7a42 	vsub.f32	s15, s6, s4
90016b54:	fb97 f7f4 	sdiv	r7, r7, r4
90016b58:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
90016b5c:	ee17 ca90 	vmov	ip, s15
90016b60:	fb9c fcf4 	sdiv	ip, ip, r4
90016b64:	fb0c 3306 	mla	r3, ip, r6, r3
90016b68:	9302      	str	r3, [sp, #8]
90016b6a:	ee17 3a10 	vmov	r3, s14
90016b6e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
90016b72:	fb07 3706 	mla	r7, r7, r6, r3
90016b76:	eba9 0306 	sub.w	r3, r9, r6
90016b7a:	e9cd 4700 	strd	r4, r7, [sp]
90016b7e:	f8da 4008 	ldr.w	r4, [sl, #8]
90016b82:	47a0      	blx	r4
90016b84:	b00d      	add	sp, #52	; 0x34
90016b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90016b8a:	2500      	movs	r5, #0
90016b8c:	462e      	mov	r6, r5
90016b8e:	e799      	b.n	90016ac4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

90016b90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
90016b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90016b94:	b0db      	sub	sp, #364	; 0x16c
90016b96:	461d      	mov	r5, r3
90016b98:	4614      	mov	r4, r2
90016b9a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
90016b9e:	910f      	str	r1, [sp, #60]	; 0x3c
90016ba0:	4629      	mov	r1, r5
90016ba2:	930a      	str	r3, [sp, #40]	; 0x28
90016ba4:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
90016ba8:	9009      	str	r0, [sp, #36]	; 0x24
90016baa:	930b      	str	r3, [sp, #44]	; 0x2c
90016bac:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
90016bb0:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
90016bb4:	9310      	str	r3, [sp, #64]	; 0x40
90016bb6:	6803      	ldr	r3, [r0, #0]
90016bb8:	6c5f      	ldr	r7, [r3, #68]	; 0x44
90016bba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
90016bbe:	47b8      	blx	r7
90016bc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016bc2:	6058      	str	r0, [r3, #4]
90016bc4:	2800      	cmp	r0, #0
90016bc6:	f000 83a1 	beq.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016bca:	682b      	ldr	r3, [r5, #0]
90016bcc:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
90016bd0:	ed94 7a02 	vldr	s14, [r4, #8]
90016bd4:	9314      	str	r3, [sp, #80]	; 0x50
90016bd6:	686b      	ldr	r3, [r5, #4]
90016bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016bdc:	9315      	str	r3, [sp, #84]	; 0x54
90016bde:	4bc1      	ldr	r3, [pc, #772]	; (90016ee4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
90016be0:	7819      	ldrb	r1, [r3, #0]
90016be2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
90016be6:	2900      	cmp	r1, #0
90016be8:	bf16      	itet	ne
90016bea:	4619      	movne	r1, r3
90016bec:	4611      	moveq	r1, r2
90016bee:	4613      	movne	r3, r2
90016bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016bf4:	9116      	str	r1, [sp, #88]	; 0x58
90016bf6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
90016bfa:	f240 8387 	bls.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016bfe:	ed94 7a07 	vldr	s14, [r4, #28]
90016c02:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016c0a:	f240 837f 	bls.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c0e:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
90016c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
90016c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
90016c1a:	f240 8377 	bls.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c1e:	6822      	ldr	r2, [r4, #0]
90016c20:	4bb1      	ldr	r3, [pc, #708]	; (90016ee8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
90016c22:	429a      	cmp	r2, r3
90016c24:	f2c0 8372 	blt.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c28:	49b0      	ldr	r1, [pc, #704]	; (90016eec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
90016c2a:	6963      	ldr	r3, [r4, #20]
90016c2c:	428a      	cmp	r2, r1
90016c2e:	f300 836d 	bgt.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c32:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016c36:	48ae      	ldr	r0, [pc, #696]	; (90016ef0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
90016c38:	33ff      	adds	r3, #255	; 0xff
90016c3a:	4283      	cmp	r3, r0
90016c3c:	f200 8366 	bhi.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c40:	6aa3      	ldr	r3, [r4, #40]	; 0x28
90016c42:	4dac      	ldr	r5, [pc, #688]	; (90016ef4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
90016c44:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
90016c48:	33ff      	adds	r3, #255	; 0xff
90016c4a:	42ab      	cmp	r3, r5
90016c4c:	f200 835e 	bhi.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c50:	6862      	ldr	r2, [r4, #4]
90016c52:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
90016c56:	33ff      	adds	r3, #255	; 0xff
90016c58:	4283      	cmp	r3, r0
90016c5a:	f200 8357 	bhi.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c5e:	69a1      	ldr	r1, [r4, #24]
90016c60:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
90016c64:	33ff      	adds	r3, #255	; 0xff
90016c66:	4283      	cmp	r3, r0
90016c68:	f200 8350 	bhi.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c6c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
90016c6e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
90016c72:	30ff      	adds	r0, #255	; 0xff
90016c74:	42a8      	cmp	r0, r5
90016c76:	f200 8349 	bhi.w	9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90016c7a:	428a      	cmp	r2, r1
90016c7c:	f280 8110 	bge.w	90016ea0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
90016c80:	429a      	cmp	r2, r3
90016c82:	f300 8119 	bgt.w	90016eb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
90016c86:	4299      	cmp	r1, r3
90016c88:	f280 811d 	bge.w	90016ec6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
90016c8c:	2502      	movs	r5, #2
90016c8e:	2701      	movs	r7, #1
90016c90:	46a9      	mov	r9, r5
90016c92:	46b8      	mov	r8, r7
90016c94:	f04f 0a00 	mov.w	sl, #0
90016c98:	4621      	mov	r1, r4
90016c9a:	a849      	add	r0, sp, #292	; 0x124
90016c9c:	f003 fd00 	bl	9001a6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
90016ca0:	4622      	mov	r2, r4
90016ca2:	4653      	mov	r3, sl
90016ca4:	a949      	add	r1, sp, #292	; 0x124
90016ca6:	f8cd 9000 	str.w	r9, [sp]
90016caa:	a819      	add	r0, sp, #100	; 0x64
90016cac:	f003 fe28 	bl	9001a900 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016cb0:	4622      	mov	r2, r4
90016cb2:	4653      	mov	r3, sl
90016cb4:	a949      	add	r1, sp, #292	; 0x124
90016cb6:	f8cd 8000 	str.w	r8, [sp]
90016cba:	a829      	add	r0, sp, #164	; 0xa4
90016cbc:	f003 fe20 	bl	9001a900 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016cc0:	4643      	mov	r3, r8
90016cc2:	4622      	mov	r2, r4
90016cc4:	a949      	add	r1, sp, #292	; 0x124
90016cc6:	f8cd 9000 	str.w	r9, [sp]
90016cca:	a839      	add	r0, sp, #228	; 0xe4
90016ccc:	f003 fe18 	bl	9001a900 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
90016cd0:	42af      	cmp	r7, r5
90016cd2:	af12      	add	r7, sp, #72	; 0x48
90016cd4:	bfb7      	itett	lt
90016cd6:	2300      	movlt	r3, #0
90016cd8:	2301      	movge	r3, #1
90016cda:	ad29      	addlt	r5, sp, #164	; 0xa4
90016cdc:	ac19      	addlt	r4, sp, #100	; 0x64
90016cde:	bfb1      	iteee	lt
90016ce0:	930e      	strlt	r3, [sp, #56]	; 0x38
90016ce2:	ad19      	addge	r5, sp, #100	; 0x64
90016ce4:	930e      	strge	r3, [sp, #56]	; 0x38
90016ce6:	ac29      	addge	r4, sp, #164	; 0xa4
90016ce8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90016cea:	e893 0003 	ldmia.w	r3, {r0, r1}
90016cee:	e887 0003 	stmia.w	r7, {r0, r1}
90016cf2:	b928      	cbnz	r0, 90016d00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
90016cf4:	4b80      	ldr	r3, [pc, #512]	; (90016ef8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
90016cf6:	6818      	ldr	r0, [r3, #0]
90016cf8:	6803      	ldr	r3, [r0, #0]
90016cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90016cfc:	4798      	blx	r3
90016cfe:	6038      	str	r0, [r7, #0]
90016d00:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016d02:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90016d06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
90016d0a:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
90016d0c:	930c      	str	r3, [sp, #48]	; 0x30
90016d0e:	990c      	ldr	r1, [sp, #48]	; 0x30
90016d10:	6963      	ldr	r3, [r4, #20]
90016d12:	440b      	add	r3, r1
90016d14:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90016d18:	4408      	add	r0, r1
90016d1a:	b200      	sxth	r0, r0
90016d1c:	4283      	cmp	r3, r0
90016d1e:	900d      	str	r0, [sp, #52]	; 0x34
90016d20:	f280 80dd 	bge.w	90016ede <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
90016d24:	428b      	cmp	r3, r1
90016d26:	da08      	bge.n	90016d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016d28:	2a00      	cmp	r2, #0
90016d2a:	dd06      	ble.n	90016d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90016d2c:	1acb      	subs	r3, r1, r3
90016d2e:	429a      	cmp	r2, r3
90016d30:	f2c0 80e4 	blt.w	90016efc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
90016d34:	2b00      	cmp	r3, #0
90016d36:	f300 80e2 	bgt.w	90016efe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
90016d3a:	6967      	ldr	r7, [r4, #20]
90016d3c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
90016d40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90016d42:	443b      	add	r3, r7
90016d44:	461f      	mov	r7, r3
90016d46:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90016d48:	1bdf      	subs	r7, r3, r7
90016d4a:	4297      	cmp	r7, r2
90016d4c:	bfa8      	it	ge
90016d4e:	4617      	movge	r7, r2
90016d50:	2f00      	cmp	r7, #0
90016d52:	f340 8166 	ble.w	90017022 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
90016d56:	9b64      	ldr	r3, [sp, #400]	; 0x190
90016d58:	6829      	ldr	r1, [r5, #0]
90016d5a:	f9b3 2000 	ldrsh.w	r2, [r3]
90016d5e:	f9bb 3000 	ldrsh.w	r3, [fp]
90016d62:	4411      	add	r1, r2
90016d64:	6820      	ldr	r0, [r4, #0]
90016d66:	4299      	cmp	r1, r3
90016d68:	dd1a      	ble.n	90016da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016d6a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
90016d6e:	4402      	add	r2, r0
90016d70:	440b      	add	r3, r1
90016d72:	b21b      	sxth	r3, r3
90016d74:	429a      	cmp	r2, r3
90016d76:	dc13      	bgt.n	90016da0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
90016d78:	9a10      	ldr	r2, [sp, #64]	; 0x40
90016d7a:	a912      	add	r1, sp, #72	; 0x48
90016d7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90016d7e:	9809      	ldr	r0, [sp, #36]	; 0x24
90016d80:	681b      	ldr	r3, [r3, #0]
90016d82:	9206      	str	r2, [sp, #24]
90016d84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90016d86:	9500      	str	r5, [sp, #0]
90016d88:	9205      	str	r2, [sp, #20]
90016d8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90016d8c:	e9cd b203 	strd	fp, r2, [sp, #12]
90016d90:	9a64      	ldr	r2, [sp, #400]	; 0x190
90016d92:	e9cd 8201 	strd	r8, r2, [sp, #4]
90016d96:	aa49      	add	r2, sp, #292	; 0x124
90016d98:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
90016d9c:	4623      	mov	r3, r4
90016d9e:	47c8      	blx	r9
90016da0:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
90016da4:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
90016da8:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
90016dac:	ee37 7a27 	vadd.f32	s14, s14, s15
90016db0:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
90016db4:	68a1      	ldr	r1, [r4, #8]
90016db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016dba:	ed94 6a08 	vldr	s12, [r4, #32]
90016dbe:	edd4 6a07 	vldr	s13, [r4, #28]
90016dc2:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016dc6:	ee76 6a86 	vadd.f32	s13, s13, s12
90016dca:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016dce:	e9d4 2300 	ldrd	r2, r3, [r4]
90016dd2:	edc4 6a07 	vstr	s13, [r4, #28]
90016dd6:	441a      	add	r2, r3
90016dd8:	6963      	ldr	r3, [r4, #20]
90016dda:	3301      	adds	r3, #1
90016ddc:	6022      	str	r2, [r4, #0]
90016dde:	6163      	str	r3, [r4, #20]
90016de0:	69a3      	ldr	r3, [r4, #24]
90016de2:	3b01      	subs	r3, #1
90016de4:	61a3      	str	r3, [r4, #24]
90016de6:	6923      	ldr	r3, [r4, #16]
90016de8:	440b      	add	r3, r1
90016dea:	68e1      	ldr	r1, [r4, #12]
90016dec:	428b      	cmp	r3, r1
90016dee:	6123      	str	r3, [r4, #16]
90016df0:	db15      	blt.n	90016e1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
90016df2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90016df6:	3201      	adds	r2, #1
90016df8:	1a5b      	subs	r3, r3, r1
90016dfa:	ee76 6a26 	vadd.f32	s13, s12, s13
90016dfe:	6022      	str	r2, [r4, #0]
90016e00:	6123      	str	r3, [r4, #16]
90016e02:	edc4 6a07 	vstr	s13, [r4, #28]
90016e06:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90016e0a:	ee36 7a87 	vadd.f32	s14, s13, s14
90016e0e:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90016e12:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90016e16:	ee77 7a27 	vadd.f32	s15, s14, s15
90016e1a:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
90016e1e:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90016e22:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90016e26:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90016e2a:	ee37 7a27 	vadd.f32	s14, s14, s15
90016e2e:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90016e32:	68a9      	ldr	r1, [r5, #8]
90016e34:	ee77 7aa6 	vadd.f32	s15, s15, s13
90016e38:	ed95 6a08 	vldr	s12, [r5, #32]
90016e3c:	edd5 6a07 	vldr	s13, [r5, #28]
90016e40:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016e44:	ee76 6a86 	vadd.f32	s13, s13, s12
90016e48:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016e4c:	e9d5 2300 	ldrd	r2, r3, [r5]
90016e50:	edc5 6a07 	vstr	s13, [r5, #28]
90016e54:	441a      	add	r2, r3
90016e56:	696b      	ldr	r3, [r5, #20]
90016e58:	3301      	adds	r3, #1
90016e5a:	602a      	str	r2, [r5, #0]
90016e5c:	616b      	str	r3, [r5, #20]
90016e5e:	69ab      	ldr	r3, [r5, #24]
90016e60:	3b01      	subs	r3, #1
90016e62:	61ab      	str	r3, [r5, #24]
90016e64:	692b      	ldr	r3, [r5, #16]
90016e66:	440b      	add	r3, r1
90016e68:	68e9      	ldr	r1, [r5, #12]
90016e6a:	428b      	cmp	r3, r1
90016e6c:	612b      	str	r3, [r5, #16]
90016e6e:	db15      	blt.n	90016e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
90016e70:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
90016e74:	3201      	adds	r2, #1
90016e76:	1a5b      	subs	r3, r3, r1
90016e78:	ee76 6a26 	vadd.f32	s13, s12, s13
90016e7c:	602a      	str	r2, [r5, #0]
90016e7e:	612b      	str	r3, [r5, #16]
90016e80:	edc5 6a07 	vstr	s13, [r5, #28]
90016e84:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
90016e88:	ee36 7a87 	vadd.f32	s14, s13, s14
90016e8c:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90016e90:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
90016e94:	ee77 7a27 	vadd.f32	s15, s14, s15
90016e98:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
90016e9c:	3f01      	subs	r7, #1
90016e9e:	e757      	b.n	90016d50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
90016ea0:	4299      	cmp	r1, r3
90016ea2:	dc13      	bgt.n	90016ecc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
90016ea4:	429a      	cmp	r2, r3
90016ea6:	da14      	bge.n	90016ed2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
90016ea8:	2502      	movs	r5, #2
90016eaa:	2703      	movs	r7, #3
90016eac:	f04f 0800 	mov.w	r8, #0
90016eb0:	46a9      	mov	r9, r5
90016eb2:	f04f 0a01 	mov.w	sl, #1
90016eb6:	e6ef      	b.n	90016c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016eb8:	2501      	movs	r5, #1
90016eba:	2700      	movs	r7, #0
90016ebc:	46a9      	mov	r9, r5
90016ebe:	46b8      	mov	r8, r7
90016ec0:	f04f 0a02 	mov.w	sl, #2
90016ec4:	e6e8      	b.n	90016c98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
90016ec6:	2501      	movs	r5, #1
90016ec8:	2702      	movs	r7, #2
90016eca:	e6e1      	b.n	90016c90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
90016ecc:	2500      	movs	r5, #0
90016ece:	2701      	movs	r7, #1
90016ed0:	e7f4      	b.n	90016ebc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
90016ed2:	2702      	movs	r7, #2
90016ed4:	2503      	movs	r5, #3
90016ed6:	f04f 0900 	mov.w	r9, #0
90016eda:	46b8      	mov	r8, r7
90016edc:	e7e9      	b.n	90016eb2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
90016ede:	4613      	mov	r3, r2
90016ee0:	e728      	b.n	90016d34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
90016ee2:	bf00      	nop
90016ee4:	24026f84 	.word	0x24026f84
90016ee8:	fffd8f01 	.word	0xfffd8f01
90016eec:	00027100 	.word	0x00027100
90016ef0:	0004e1ff 	.word	0x0004e1ff
90016ef4:	0004e1fe 	.word	0x0004e1fe
90016ef8:	24026f8c 	.word	0x24026f8c
90016efc:	4613      	mov	r3, r2
90016efe:	992b      	ldr	r1, [sp, #172]	; 0xac
90016f00:	469e      	mov	lr, r3
90016f02:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
90016f04:	469c      	mov	ip, r3
90016f06:	9111      	str	r1, [sp, #68]	; 0x44
90016f08:	f04f 0900 	mov.w	r9, #0
90016f0c:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
90016f10:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
90016f14:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
90016f18:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
90016f1c:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
90016f20:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
90016f24:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
90016f28:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
90016f2c:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
90016f30:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
90016f34:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
90016f38:	f1bc 0f00 	cmp.w	ip, #0
90016f3c:	d147      	bne.n	90016fce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
90016f3e:	eb03 0c07 	add.w	ip, r3, r7
90016f42:	1ad7      	subs	r7, r2, r3
90016f44:	f1b9 0f00 	cmp.w	r9, #0
90016f48:	d009      	beq.n	90016f5e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
90016f4a:	9029      	str	r0, [sp, #164]	; 0xa4
90016f4c:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
90016f50:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
90016f54:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
90016f58:	912d      	str	r1, [sp, #180]	; 0xb4
90016f5a:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
90016f5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
90016f60:	f04f 0800 	mov.w	r8, #0
90016f64:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90016f68:	9111      	str	r1, [sp, #68]	; 0x44
90016f6a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
90016f6e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
90016f72:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90016f76:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90016f7a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
90016f7e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
90016f82:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90016f86:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90016f8a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
90016f8e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
90016f92:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90016f96:	f1be 0f00 	cmp.w	lr, #0
90016f9a:	d031      	beq.n	90017000 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
90016f9c:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016f9e:	4450      	add	r0, sl
90016fa0:	ee76 6aa4 	vadd.f32	s13, s13, s9
90016fa4:	4431      	add	r1, r6
90016fa6:	ee37 7a04 	vadd.f32	s14, s14, s8
90016faa:	ee77 7aa3 	vadd.f32	s15, s15, s7
90016fae:	4549      	cmp	r1, r9
90016fb0:	db08      	blt.n	90016fc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
90016fb2:	ee77 7a85 	vadd.f32	s15, s15, s10
90016fb6:	3001      	adds	r0, #1
90016fb8:	ee76 6aa5 	vadd.f32	s13, s13, s11
90016fbc:	eba1 0109 	sub.w	r1, r1, r9
90016fc0:	ee37 7a06 	vadd.f32	s14, s14, s12
90016fc4:	f10e 3eff 	add.w	lr, lr, #4294967295
90016fc8:	f04f 0801 	mov.w	r8, #1
90016fcc:	e7e3      	b.n	90016f96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
90016fce:	9e11      	ldr	r6, [sp, #68]	; 0x44
90016fd0:	4450      	add	r0, sl
90016fd2:	ee37 7a24 	vadd.f32	s14, s14, s9
90016fd6:	4431      	add	r1, r6
90016fd8:	ee77 7a84 	vadd.f32	s15, s15, s8
90016fdc:	ee76 6aa3 	vadd.f32	s13, s13, s7
90016fe0:	4541      	cmp	r1, r8
90016fe2:	db08      	blt.n	90016ff6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
90016fe4:	ee76 6a85 	vadd.f32	s13, s13, s10
90016fe8:	3001      	adds	r0, #1
90016fea:	ee37 7a25 	vadd.f32	s14, s14, s11
90016fee:	eba1 0108 	sub.w	r1, r1, r8
90016ff2:	ee77 7a86 	vadd.f32	s15, s15, s12
90016ff6:	f10c 3cff 	add.w	ip, ip, #4294967295
90016ffa:	f04f 0901 	mov.w	r9, #1
90016ffe:	e79b      	b.n	90016f38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
90017000:	449c      	add	ip, r3
90017002:	1aff      	subs	r7, r7, r3
90017004:	f1b8 0f00 	cmp.w	r8, #0
90017008:	d009      	beq.n	9001701e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
9001700a:	9019      	str	r0, [sp, #100]	; 0x64
9001700c:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
90017010:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
90017014:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
90017018:	911d      	str	r1, [sp, #116]	; 0x74
9001701a:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
9001701e:	1ad2      	subs	r2, r2, r3
90017020:	e68b      	b.n	90016d3a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
90017022:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017024:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
90017026:	2b00      	cmp	r3, #0
90017028:	f000 80d1 	beq.w	900171ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
9001702c:	ad19      	add	r5, sp, #100	; 0x64
9001702e:	ac39      	add	r4, sp, #228	; 0xe4
90017030:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017032:	f8bb 0006 	ldrh.w	r0, [fp, #6]
90017036:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001703a:	930c      	str	r3, [sp, #48]	; 0x30
9001703c:	990c      	ldr	r1, [sp, #48]	; 0x30
9001703e:	6963      	ldr	r3, [r4, #20]
90017040:	440b      	add	r3, r1
90017042:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
90017046:	4408      	add	r0, r1
90017048:	b200      	sxth	r0, r0
9001704a:	4283      	cmp	r3, r0
9001704c:	900d      	str	r0, [sp, #52]	; 0x34
9001704e:	f280 80c1 	bge.w	900171d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
90017052:	428b      	cmp	r3, r1
90017054:	da08      	bge.n	90017068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
90017056:	2a00      	cmp	r2, #0
90017058:	dd06      	ble.n	90017068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
9001705a:	1acb      	subs	r3, r1, r3
9001705c:	429a      	cmp	r2, r3
9001705e:	f2c0 80bb 	blt.w	900171d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
90017062:	2b00      	cmp	r3, #0
90017064:	f300 80b9 	bgt.w	900171da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
90017068:	6967      	ldr	r7, [r4, #20]
9001706a:	f10d 0850 	add.w	r8, sp, #80	; 0x50
9001706e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90017070:	443b      	add	r3, r7
90017072:	461f      	mov	r7, r3
90017074:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90017076:	1bdf      	subs	r7, r3, r7
90017078:	4297      	cmp	r7, r2
9001707a:	bfa8      	it	ge
9001707c:	4617      	movge	r7, r2
9001707e:	2f00      	cmp	r7, #0
90017080:	f340 813c 	ble.w	900172fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
90017084:	9b64      	ldr	r3, [sp, #400]	; 0x190
90017086:	6829      	ldr	r1, [r5, #0]
90017088:	f9b3 2000 	ldrsh.w	r2, [r3]
9001708c:	f9bb 3000 	ldrsh.w	r3, [fp]
90017090:	4411      	add	r1, r2
90017092:	6820      	ldr	r0, [r4, #0]
90017094:	4299      	cmp	r1, r3
90017096:	dd1a      	ble.n	900170ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
90017098:	f8bb 1004 	ldrh.w	r1, [fp, #4]
9001709c:	4402      	add	r2, r0
9001709e:	440b      	add	r3, r1
900170a0:	b21b      	sxth	r3, r3
900170a2:	429a      	cmp	r2, r3
900170a4:	dc13      	bgt.n	900170ce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
900170a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
900170a8:	a912      	add	r1, sp, #72	; 0x48
900170aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
900170ac:	9809      	ldr	r0, [sp, #36]	; 0x24
900170ae:	681b      	ldr	r3, [r3, #0]
900170b0:	9206      	str	r2, [sp, #24]
900170b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900170b4:	9500      	str	r5, [sp, #0]
900170b6:	9205      	str	r2, [sp, #20]
900170b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
900170ba:	e9cd b203 	strd	fp, r2, [sp, #12]
900170be:	9a64      	ldr	r2, [sp, #400]	; 0x190
900170c0:	e9cd 8201 	strd	r8, r2, [sp, #4]
900170c4:	aa49      	add	r2, sp, #292	; 0x124
900170c6:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
900170ca:	4623      	mov	r3, r4
900170cc:	47c8      	blx	r9
900170ce:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
900170d2:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
900170d6:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
900170da:	ee37 7a27 	vadd.f32	s14, s14, s15
900170de:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
900170e2:	68a1      	ldr	r1, [r4, #8]
900170e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
900170e8:	ed94 6a08 	vldr	s12, [r4, #32]
900170ec:	edd4 6a07 	vldr	s13, [r4, #28]
900170f0:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
900170f4:	ee76 6a86 	vadd.f32	s13, s13, s12
900170f8:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
900170fc:	e9d4 2300 	ldrd	r2, r3, [r4]
90017100:	edc4 6a07 	vstr	s13, [r4, #28]
90017104:	441a      	add	r2, r3
90017106:	6963      	ldr	r3, [r4, #20]
90017108:	3301      	adds	r3, #1
9001710a:	6022      	str	r2, [r4, #0]
9001710c:	6163      	str	r3, [r4, #20]
9001710e:	69a3      	ldr	r3, [r4, #24]
90017110:	3b01      	subs	r3, #1
90017112:	61a3      	str	r3, [r4, #24]
90017114:	6923      	ldr	r3, [r4, #16]
90017116:	440b      	add	r3, r1
90017118:	68e1      	ldr	r1, [r4, #12]
9001711a:	428b      	cmp	r3, r1
9001711c:	6123      	str	r3, [r4, #16]
9001711e:	db15      	blt.n	9001714c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
90017120:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
90017124:	3201      	adds	r2, #1
90017126:	1a5b      	subs	r3, r3, r1
90017128:	ee76 6a26 	vadd.f32	s13, s12, s13
9001712c:	6022      	str	r2, [r4, #0]
9001712e:	6123      	str	r3, [r4, #16]
90017130:	edc4 6a07 	vstr	s13, [r4, #28]
90017134:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
90017138:	ee36 7a87 	vadd.f32	s14, s13, s14
9001713c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
90017140:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
90017144:	ee77 7a27 	vadd.f32	s15, s14, s15
90017148:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
9001714c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
90017150:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
90017154:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
90017158:	ee37 7a27 	vadd.f32	s14, s14, s15
9001715c:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
90017160:	68a9      	ldr	r1, [r5, #8]
90017162:	ee77 7aa6 	vadd.f32	s15, s15, s13
90017166:	ed95 6a08 	vldr	s12, [r5, #32]
9001716a:	edd5 6a07 	vldr	s13, [r5, #28]
9001716e:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
90017172:	ee76 6a86 	vadd.f32	s13, s13, s12
90017176:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
9001717a:	e9d5 2300 	ldrd	r2, r3, [r5]
9001717e:	edc5 6a07 	vstr	s13, [r5, #28]
90017182:	441a      	add	r2, r3
90017184:	696b      	ldr	r3, [r5, #20]
90017186:	3301      	adds	r3, #1
90017188:	602a      	str	r2, [r5, #0]
9001718a:	616b      	str	r3, [r5, #20]
9001718c:	69ab      	ldr	r3, [r5, #24]
9001718e:	3b01      	subs	r3, #1
90017190:	61ab      	str	r3, [r5, #24]
90017192:	692b      	ldr	r3, [r5, #16]
90017194:	440b      	add	r3, r1
90017196:	68e9      	ldr	r1, [r5, #12]
90017198:	428b      	cmp	r3, r1
9001719a:	612b      	str	r3, [r5, #16]
9001719c:	db15      	blt.n	900171ca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
9001719e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
900171a2:	3201      	adds	r2, #1
900171a4:	1a5b      	subs	r3, r3, r1
900171a6:	ee76 6a26 	vadd.f32	s13, s12, s13
900171aa:	602a      	str	r2, [r5, #0]
900171ac:	612b      	str	r3, [r5, #16]
900171ae:	edc5 6a07 	vstr	s13, [r5, #28]
900171b2:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
900171b6:	ee36 7a87 	vadd.f32	s14, s13, s14
900171ba:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
900171be:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
900171c2:	ee77 7a27 	vadd.f32	s15, s14, s15
900171c6:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
900171ca:	3f01      	subs	r7, #1
900171cc:	e757      	b.n	9001707e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
900171ce:	ad39      	add	r5, sp, #228	; 0xe4
900171d0:	ac19      	add	r4, sp, #100	; 0x64
900171d2:	e72d      	b.n	90017030 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
900171d4:	4613      	mov	r3, r2
900171d6:	e744      	b.n	90017062 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
900171d8:	4613      	mov	r3, r2
900171da:	9e3b      	ldr	r6, [sp, #236]	; 0xec
900171dc:	469e      	mov	lr, r3
900171de:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
900171e2:	461f      	mov	r7, r3
900171e4:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
900171e8:	f04f 0900 	mov.w	r9, #0
900171ec:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
900171f0:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
900171f4:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
900171f8:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
900171fc:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
90017200:	993d      	ldr	r1, [sp, #244]	; 0xf4
90017202:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
90017206:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
9001720a:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
9001720e:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
90017212:	960e      	str	r6, [sp, #56]	; 0x38
90017214:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
90017218:	2f00      	cmp	r7, #0
9001721a:	d146      	bne.n	900172aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
9001721c:	449c      	add	ip, r3
9001721e:	1ad7      	subs	r7, r2, r3
90017220:	f1b9 0f00 	cmp.w	r9, #0
90017224:	d009      	beq.n	9001723a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
90017226:	9039      	str	r0, [sp, #228]	; 0xe4
90017228:	913d      	str	r1, [sp, #244]	; 0xf4
9001722a:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
9001722e:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
90017232:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
90017236:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
9001723a:	991b      	ldr	r1, [sp, #108]	; 0x6c
9001723c:	f04f 0800 	mov.w	r8, #0
90017240:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
90017244:	910e      	str	r1, [sp, #56]	; 0x38
90017246:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
9001724a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
9001724e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
90017252:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
90017256:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
9001725a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
9001725e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
90017262:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
90017266:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
9001726a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
9001726e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
90017272:	f1be 0f00 	cmp.w	lr, #0
90017276:	d030      	beq.n	900172da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
90017278:	9e0e      	ldr	r6, [sp, #56]	; 0x38
9001727a:	4450      	add	r0, sl
9001727c:	ee76 6aa4 	vadd.f32	s13, s13, s9
90017280:	4431      	add	r1, r6
90017282:	ee37 7a04 	vadd.f32	s14, s14, s8
90017286:	ee77 7aa3 	vadd.f32	s15, s15, s7
9001728a:	4549      	cmp	r1, r9
9001728c:	db08      	blt.n	900172a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
9001728e:	ee77 7a85 	vadd.f32	s15, s15, s10
90017292:	3001      	adds	r0, #1
90017294:	ee76 6aa5 	vadd.f32	s13, s13, s11
90017298:	eba1 0109 	sub.w	r1, r1, r9
9001729c:	ee37 7a06 	vadd.f32	s14, s14, s12
900172a0:	f10e 3eff 	add.w	lr, lr, #4294967295
900172a4:	f04f 0801 	mov.w	r8, #1
900172a8:	e7e3      	b.n	90017272 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
900172aa:	9e0e      	ldr	r6, [sp, #56]	; 0x38
900172ac:	4450      	add	r0, sl
900172ae:	ee37 7a24 	vadd.f32	s14, s14, s9
900172b2:	4431      	add	r1, r6
900172b4:	ee77 7a84 	vadd.f32	s15, s15, s8
900172b8:	ee76 6aa3 	vadd.f32	s13, s13, s7
900172bc:	4541      	cmp	r1, r8
900172be:	db08      	blt.n	900172d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
900172c0:	ee76 6a85 	vadd.f32	s13, s13, s10
900172c4:	3001      	adds	r0, #1
900172c6:	ee37 7a25 	vadd.f32	s14, s14, s11
900172ca:	eba1 0108 	sub.w	r1, r1, r8
900172ce:	ee77 7a86 	vadd.f32	s15, s15, s12
900172d2:	3f01      	subs	r7, #1
900172d4:	f04f 0901 	mov.w	r9, #1
900172d8:	e79e      	b.n	90017218 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
900172da:	449c      	add	ip, r3
900172dc:	1aff      	subs	r7, r7, r3
900172de:	f1b8 0f00 	cmp.w	r8, #0
900172e2:	d009      	beq.n	900172f8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
900172e4:	9019      	str	r0, [sp, #100]	; 0x64
900172e6:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
900172ea:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
900172ee:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
900172f2:	911d      	str	r1, [sp, #116]	; 0x74
900172f4:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
900172f8:	1ad2      	subs	r2, r2, r3
900172fa:	e6b5      	b.n	90017068 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
900172fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900172fe:	681b      	ldr	r3, [r3, #0]
90017300:	b923      	cbnz	r3, 9001730c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
90017302:	4b04      	ldr	r3, [pc, #16]	; (90017314 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
90017304:	6818      	ldr	r0, [r3, #0]
90017306:	6803      	ldr	r3, [r0, #0]
90017308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001730a:	4798      	blx	r3
9001730c:	b05b      	add	sp, #364	; 0x16c
9001730e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017312:	bf00      	nop
90017314:	24026f8c 	.word	0x24026f8c

90017318 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
90017318:	b570      	push	{r4, r5, r6, lr}
9001731a:	4604      	mov	r4, r0
9001731c:	2500      	movs	r5, #0
9001731e:	9805      	ldr	r0, [sp, #20]
90017320:	f89d 601c 	ldrb.w	r6, [sp, #28]
90017324:	6061      	str	r1, [r4, #4]
90017326:	8263      	strh	r3, [r4, #18]
90017328:	f89d 1010 	ldrb.w	r1, [sp, #16]
9001732c:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
90017330:	8025      	strh	r5, [r4, #0]
90017332:	7221      	strb	r1, [r4, #8]
90017334:	7266      	strb	r6, [r4, #9]
90017336:	60e0      	str	r0, [r4, #12]
90017338:	8222      	strh	r2, [r4, #16]
9001733a:	82a3      	strh	r3, [r4, #20]
9001733c:	82e5      	strh	r5, [r4, #22]
9001733e:	8325      	strh	r5, [r4, #24]
90017340:	8365      	strh	r5, [r4, #26]
90017342:	83a5      	strh	r5, [r4, #28]
90017344:	83e5      	strh	r5, [r4, #30]
90017346:	8425      	strh	r5, [r4, #32]
90017348:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
9001734c:	b32e      	cbz	r6, 9001739a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
9001734e:	6803      	ldr	r3, [r0, #0]
90017350:	695b      	ldr	r3, [r3, #20]
90017352:	4798      	blx	r3
90017354:	4606      	mov	r6, r0
90017356:	b300      	cbz	r0, 9001739a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017358:	68e0      	ldr	r0, [r4, #12]
9001735a:	4631      	mov	r1, r6
9001735c:	6803      	ldr	r3, [r0, #0]
9001735e:	68db      	ldr	r3, [r3, #12]
90017360:	4798      	blx	r3
90017362:	4605      	mov	r5, r0
90017364:	b1c8      	cbz	r0, 9001739a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
90017366:	7b43      	ldrb	r3, [r0, #13]
90017368:	7a82      	ldrb	r2, [r0, #10]
9001736a:	005b      	lsls	r3, r3, #1
9001736c:	f403 7380 	and.w	r3, r3, #256	; 0x100
90017370:	4313      	orrs	r3, r2
90017372:	8423      	strh	r3, [r4, #32]
90017374:	7a63      	ldrb	r3, [r4, #9]
90017376:	2b06      	cmp	r3, #6
90017378:	d10f      	bne.n	9001739a <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
9001737a:	68e0      	ldr	r0, [r4, #12]
9001737c:	462a      	mov	r2, r5
9001737e:	4631      	mov	r1, r6
90017380:	6803      	ldr	r3, [r0, #0]
90017382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017384:	4798      	blx	r3
90017386:	7b6b      	ldrb	r3, [r5, #13]
90017388:	005b      	lsls	r3, r3, #1
9001738a:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001738e:	7aab      	ldrb	r3, [r5, #10]
90017390:	4313      	orrs	r3, r2
90017392:	4418      	add	r0, r3
90017394:	8c23      	ldrh	r3, [r4, #32]
90017396:	4418      	add	r0, r3
90017398:	8420      	strh	r0, [r4, #32]
9001739a:	4620      	mov	r0, r4
9001739c:	bd70      	pop	{r4, r5, r6, pc}

9001739e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
9001739e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900173a2:	2400      	movs	r4, #0
900173a4:	b085      	sub	sp, #20
900173a6:	4681      	mov	r9, r0
900173a8:	4688      	mov	r8, r1
900173aa:	4692      	mov	sl, r2
900173ac:	469b      	mov	fp, r3
900173ae:	4627      	mov	r7, r4
900173b0:	4625      	mov	r5, r4
900173b2:	4626      	mov	r6, r4
900173b4:	4554      	cmp	r4, sl
900173b6:	da2a      	bge.n	9001740e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900173b8:	2300      	movs	r3, #0
900173ba:	9303      	str	r3, [sp, #12]
900173bc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900173c0:	429d      	cmp	r5, r3
900173c2:	d004      	beq.n	900173ce <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
900173c4:	f242 030b 	movw	r3, #8203	; 0x200b
900173c8:	429d      	cmp	r5, r3
900173ca:	bf18      	it	ne
900173cc:	462f      	movne	r7, r5
900173ce:	ab03      	add	r3, sp, #12
900173d0:	4642      	mov	r2, r8
900173d2:	4659      	mov	r1, fp
900173d4:	4648      	mov	r0, r9
900173d6:	f002 ff79 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900173da:	4605      	mov	r5, r0
900173dc:	b1b8      	cbz	r0, 9001740e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900173de:	280a      	cmp	r0, #10
900173e0:	d015      	beq.n	9001740e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
900173e2:	9a03      	ldr	r2, [sp, #12]
900173e4:	b18a      	cbz	r2, 9001740a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
900173e6:	7b50      	ldrb	r0, [r2, #13]
900173e8:	4639      	mov	r1, r7
900173ea:	7a93      	ldrb	r3, [r2, #10]
900173ec:	0040      	lsls	r0, r0, #1
900173ee:	8895      	ldrh	r5, [r2, #4]
900173f0:	f400 7080 	and.w	r0, r0, #256	; 0x100
900173f4:	4303      	orrs	r3, r0
900173f6:	4640      	mov	r0, r8
900173f8:	9301      	str	r3, [sp, #4]
900173fa:	f8d8 3000 	ldr.w	r3, [r8]
900173fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017400:	4798      	blx	r3
90017402:	9b01      	ldr	r3, [sp, #4]
90017404:	4418      	add	r0, r3
90017406:	4406      	add	r6, r0
90017408:	b2b6      	uxth	r6, r6
9001740a:	3401      	adds	r4, #1
9001740c:	e7d2      	b.n	900173b4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
9001740e:	4630      	mov	r0, r6
90017410:	b005      	add	sp, #20
90017412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
90017416:	2a02      	cmp	r2, #2
90017418:	b530      	push	{r4, r5, lr}
9001741a:	d011      	beq.n	90017440 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
9001741c:	2a03      	cmp	r2, #3
9001741e:	d01c      	beq.n	9001745a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
90017420:	2a01      	cmp	r2, #1
90017422:	d10c      	bne.n	9001743e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
90017424:	888b      	ldrh	r3, [r1, #4]
90017426:	8801      	ldrh	r1, [r0, #0]
90017428:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
9001742c:	1a5b      	subs	r3, r3, r1
9001742e:	8844      	ldrh	r4, [r0, #2]
90017430:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90017434:	1a9b      	subs	r3, r3, r2
90017436:	8004      	strh	r4, [r0, #0]
90017438:	8081      	strh	r1, [r0, #4]
9001743a:	8043      	strh	r3, [r0, #2]
9001743c:	80c2      	strh	r2, [r0, #6]
9001743e:	bd30      	pop	{r4, r5, pc}
90017440:	88cb      	ldrh	r3, [r1, #6]
90017442:	8842      	ldrh	r2, [r0, #2]
90017444:	1a9b      	subs	r3, r3, r2
90017446:	88c2      	ldrh	r2, [r0, #6]
90017448:	1a9b      	subs	r3, r3, r2
9001744a:	888a      	ldrh	r2, [r1, #4]
9001744c:	8801      	ldrh	r1, [r0, #0]
9001744e:	8043      	strh	r3, [r0, #2]
90017450:	1a52      	subs	r2, r2, r1
90017452:	8881      	ldrh	r1, [r0, #4]
90017454:	1a52      	subs	r2, r2, r1
90017456:	8002      	strh	r2, [r0, #0]
90017458:	e7f1      	b.n	9001743e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
9001745a:	88cb      	ldrh	r3, [r1, #6]
9001745c:	8841      	ldrh	r1, [r0, #2]
9001745e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
90017462:	1a5b      	subs	r3, r3, r1
90017464:	f9b0 5000 	ldrsh.w	r5, [r0]
90017468:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
9001746c:	1a9b      	subs	r3, r3, r2
9001746e:	8045      	strh	r5, [r0, #2]
90017470:	8082      	strh	r2, [r0, #4]
90017472:	8003      	strh	r3, [r0, #0]
90017474:	80c4      	strh	r4, [r0, #6]
90017476:	e7e2      	b.n	9001743e <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

90017478 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
90017478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001747c:	b09f      	sub	sp, #124	; 0x7c
9001747e:	9116      	str	r1, [sp, #88]	; 0x58
90017480:	9317      	str	r3, [sp, #92]	; 0x5c
90017482:	9929      	ldr	r1, [sp, #164]	; 0xa4
90017484:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90017486:	8809      	ldrh	r1, [r1, #0]
90017488:	889b      	ldrh	r3, [r3, #4]
9001748a:	f8dd 80a8 	ldr.w	r8, [sp, #168]	; 0xa8
9001748e:	440b      	add	r3, r1
90017490:	9212      	str	r2, [sp, #72]	; 0x48
90017492:	f89d 20b8 	ldrb.w	r2, [sp, #184]	; 0xb8
90017496:	b21b      	sxth	r3, r3
90017498:	9011      	str	r0, [sp, #68]	; 0x44
9001749a:	f89d b0ac 	ldrb.w	fp, [sp, #172]	; 0xac
9001749e:	9310      	str	r3, [sp, #64]	; 0x40
900174a0:	f8d8 3000 	ldr.w	r3, [r8]
900174a4:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	; 0xa0
900174a8:	7b19      	ldrb	r1, [r3, #12]
900174aa:	7adb      	ldrb	r3, [r3, #11]
900174ac:	9114      	str	r1, [sp, #80]	; 0x50
900174ae:	9315      	str	r3, [sp, #84]	; 0x54
900174b0:	2a00      	cmp	r2, #0
900174b2:	d06a      	beq.n	9001758a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
900174b4:	f898 3010 	ldrb.w	r3, [r8, #16]
900174b8:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
900174ba:	2b06      	cmp	r3, #6
900174bc:	bf14      	ite	ne
900174be:	2301      	movne	r3, #1
900174c0:	2302      	moveq	r3, #2
900174c2:	4413      	add	r3, r2
900174c4:	f04f 0900 	mov.w	r9, #0
900174c8:	930f      	str	r3, [sp, #60]	; 0x3c
900174ca:	464c      	mov	r4, r9
900174cc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
900174d0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
900174d4:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
900174d8:	4293      	cmp	r3, r2
900174da:	f280 808f 	bge.w	900175fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
900174de:	2300      	movs	r3, #0
900174e0:	e9cd 331c 	strd	r3, r3, [sp, #112]	; 0x70
900174e4:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
900174e8:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900174ec:	429c      	cmp	r4, r3
900174ee:	d006      	beq.n	900174fe <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x86>
900174f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900174f2:	f242 020b 	movw	r2, #8203	; 0x200b
900174f6:	4294      	cmp	r4, r2
900174f8:	bf18      	it	ne
900174fa:	4623      	movne	r3, r4
900174fc:	930d      	str	r3, [sp, #52]	; 0x34
900174fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90017500:	992d      	ldr	r1, [sp, #180]	; 0xb4
90017502:	f8d8 2000 	ldr.w	r2, [r8]
90017506:	428b      	cmp	r3, r1
90017508:	db41      	blt.n	9001758e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
9001750a:	6813      	ldr	r3, [r2, #0]
9001750c:	4610      	mov	r0, r2
9001750e:	695b      	ldr	r3, [r3, #20]
90017510:	4798      	blx	r3
90017512:	4604      	mov	r4, r0
90017514:	f8d8 0000 	ldr.w	r0, [r8]
90017518:	aa1d      	add	r2, sp, #116	; 0x74
9001751a:	4621      	mov	r1, r4
9001751c:	6803      	ldr	r3, [r0, #0]
9001751e:	689d      	ldr	r5, [r3, #8]
90017520:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90017524:	47a8      	blx	r5
90017526:	901c      	str	r0, [sp, #112]	; 0x70
90017528:	f64f 63ff 	movw	r3, #65279	; 0xfeff
9001752c:	429c      	cmp	r4, r3
9001752e:	f000 80ec 	beq.w	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017532:	f242 030b 	movw	r3, #8203	; 0x200b
90017536:	429c      	cmp	r4, r3
90017538:	f000 80e7 	beq.w	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001753c:	2c00      	cmp	r4, #0
9001753e:	f000 80f9 	beq.w	90017734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90017542:	2c0a      	cmp	r4, #10
90017544:	d060      	beq.n	90017608 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90017546:	9a1c      	ldr	r2, [sp, #112]	; 0x70
90017548:	b36a      	cbz	r2, 900175a6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
9001754a:	8894      	ldrh	r4, [r2, #4]
9001754c:	f1bb 0f00 	cmp.w	fp, #0
90017550:	d03b      	beq.n	900175ca <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
90017552:	f892 900d 	ldrb.w	r9, [r2, #13]
90017556:	f1bb 0f01 	cmp.w	fp, #1
9001755a:	ea4f 0949 	mov.w	r9, r9, lsl #1
9001755e:	f409 7380 	and.w	r3, r9, #256	; 0x100
90017562:	f892 900a 	ldrb.w	r9, [r2, #10]
90017566:	ea49 0903 	orr.w	r9, r9, r3
9001756a:	d134      	bne.n	900175d6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15e>
9001756c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001756e:	eba6 0609 	sub.w	r6, r6, r9
90017572:	2b00      	cmp	r3, #0
90017574:	d14f      	bne.n	90017616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
90017576:	9a14      	ldr	r2, [sp, #80]	; 0x50
90017578:	eb09 0306 	add.w	r3, r9, r6
9001757c:	4413      	add	r3, r2
9001757e:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90017580:	f9b2 2000 	ldrsh.w	r2, [r2]
90017584:	4293      	cmp	r3, r2
90017586:	da51      	bge.n	9001762c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
90017588:	e038      	b.n	900175fc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x184>
9001758a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
9001758c:	e79a      	b.n	900174c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x4c>
9001758e:	f10d 036f 	add.w	r3, sp, #111	; 0x6f
90017592:	4659      	mov	r1, fp
90017594:	982c      	ldr	r0, [sp, #176]	; 0xb0
90017596:	9301      	str	r3, [sp, #4]
90017598:	ab1d      	add	r3, sp, #116	; 0x74
9001759a:	9300      	str	r3, [sp, #0]
9001759c:	ab1c      	add	r3, sp, #112	; 0x70
9001759e:	f002 fede 	bl	9001a35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
900175a2:	4604      	mov	r4, r0
900175a4:	e7c0      	b.n	90017528 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
900175a6:	f8d8 0000 	ldr.w	r0, [r8]
900175aa:	6803      	ldr	r3, [r0, #0]
900175ac:	691b      	ldr	r3, [r3, #16]
900175ae:	4798      	blx	r3
900175b0:	f64f 63ff 	movw	r3, #65279	; 0xfeff
900175b4:	4298      	cmp	r0, r3
900175b6:	f000 80a8 	beq.w	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900175ba:	f242 030b 	movw	r3, #8203	; 0x200b
900175be:	4298      	cmp	r0, r3
900175c0:	f000 80a3 	beq.w	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900175c4:	f1bb 0f00 	cmp.w	fp, #0
900175c8:	d100      	bne.n	900175cc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x154>
900175ca:	444e      	add	r6, r9
900175cc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
900175ce:	2a00      	cmp	r2, #0
900175d0:	d1bf      	bne.n	90017552 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
900175d2:	4691      	mov	r9, r2
900175d4:	e099      	b.n	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900175d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900175d8:	2b00      	cmp	r3, #0
900175da:	f000 80ad 	beq.w	90017738 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c0>
900175de:	f1bb 0f00 	cmp.w	fp, #0
900175e2:	d118      	bne.n	90017616 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19e>
900175e4:	f8d8 0000 	ldr.w	r0, [r8]
900175e8:	990d      	ldr	r1, [sp, #52]	; 0x34
900175ea:	6803      	ldr	r3, [r0, #0]
900175ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900175ee:	4798      	blx	r3
900175f0:	4406      	add	r6, r0
900175f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
900175f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
900175f6:	1af3      	subs	r3, r6, r3
900175f8:	4293      	cmp	r3, r2
900175fa:	dd17      	ble.n	9001762c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>
900175fc:	2c00      	cmp	r4, #0
900175fe:	f000 8099 	beq.w	90017734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
90017602:	2c0a      	cmp	r4, #10
90017604:	f040 8087 	bne.w	90017716 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29e>
90017608:	240a      	movs	r4, #10
9001760a:	fab4 f084 	clz	r0, r4
9001760e:	0940      	lsrs	r0, r0, #5
90017610:	b01f      	add	sp, #124	; 0x7c
90017612:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017616:	f8d8 0000 	ldr.w	r0, [r8]
9001761a:	990d      	ldr	r1, [sp, #52]	; 0x34
9001761c:	6803      	ldr	r3, [r0, #0]
9001761e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90017620:	4798      	blx	r3
90017622:	f1bb 0f01 	cmp.w	fp, #1
90017626:	eba6 0600 	sub.w	r6, r6, r0
9001762a:	d0a4      	beq.n	90017576 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
9001762c:	981c      	ldr	r0, [sp, #112]	; 0x70
9001762e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90017630:	f990 1009 	ldrsb.w	r1, [r0, #9]
90017634:	f9b3 7000 	ldrsh.w	r7, [r3]
90017638:	7b43      	ldrb	r3, [r0, #13]
9001763a:	4431      	add	r1, r6
9001763c:	015b      	lsls	r3, r3, #5
9001763e:	f403 7280 	and.w	r2, r3, #256	; 0x100
90017642:	7983      	ldrb	r3, [r0, #6]
90017644:	4313      	orrs	r3, r2
90017646:	440b      	add	r3, r1
90017648:	42bb      	cmp	r3, r7
9001764a:	db5e      	blt.n	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
9001764c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001764e:	4299      	cmp	r1, r3
90017650:	da5b      	bge.n	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
90017652:	f8d8 0000 	ldr.w	r0, [r8]
90017656:	42b7      	cmp	r7, r6
90017658:	6803      	ldr	r3, [r0, #0]
9001765a:	bfcc      	ite	gt
9001765c:	1bbf      	subgt	r7, r7, r6
9001765e:	2700      	movle	r7, #0
90017660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90017662:	bfc8      	it	gt
90017664:	b2bf      	uxthgt	r7, r7
90017666:	4798      	blx	r3
90017668:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9001766a:	7b5a      	ldrb	r2, [r3, #13]
9001766c:	00d1      	lsls	r1, r2, #3
9001766e:	f401 7580 	and.w	r5, r1, #256	; 0x100
90017672:	7a19      	ldrb	r1, [r3, #8]
90017674:	4329      	orrs	r1, r5
90017676:	0655      	lsls	r5, r2, #25
90017678:	9d17      	ldr	r5, [sp, #92]	; 0x5c
9001767a:	bf48      	it	mi
9001767c:	f5a1 7100 	submi.w	r1, r1, #512	; 0x200
90017680:	4405      	add	r5, r0
90017682:	bf48      	it	mi
90017684:	b209      	sxthmi	r1, r1
90017686:	1a6d      	subs	r5, r5, r1
90017688:	9929      	ldr	r1, [sp, #164]	; 0xa4
9001768a:	b2ad      	uxth	r5, r5
9001768c:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
90017690:	fa0f fa85 	sxth.w	sl, r5
90017694:	4551      	cmp	r1, sl
90017696:	dd3c      	ble.n	90017712 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29a>
90017698:	0112      	lsls	r2, r2, #4
9001769a:	79d8      	ldrb	r0, [r3, #7]
9001769c:	f402 7280 	and.w	r2, r2, #256	; 0x100
900176a0:	4302      	orrs	r2, r0
900176a2:	4492      	add	sl, r2
900176a4:	4551      	cmp	r1, sl
900176a6:	dc30      	bgt.n	9001770a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x292>
900176a8:	1b4d      	subs	r5, r1, r5
900176aa:	468a      	mov	sl, r1
900176ac:	b22d      	sxth	r5, r5
900176ae:	9319      	str	r3, [sp, #100]	; 0x64
900176b0:	b2ad      	uxth	r5, r5
900176b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
900176b4:	f8d8 0000 	ldr.w	r0, [r8]
900176b8:	681a      	ldr	r2, [r3, #0]
900176ba:	6801      	ldr	r1, [r0, #0]
900176bc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
900176be:	9a1d      	ldr	r2, [sp, #116]	; 0x74
900176c0:	9313      	str	r3, [sp, #76]	; 0x4c
900176c2:	9218      	str	r2, [sp, #96]	; 0x60
900176c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
900176c6:	4788      	blx	r1
900176c8:	f898 1006 	ldrb.w	r1, [r8, #6]
900176cc:	9b19      	ldr	r3, [sp, #100]	; 0x64
900176ce:	910b      	str	r1, [sp, #44]	; 0x2c
900176d0:	f898 100e 	ldrb.w	r1, [r8, #14]
900176d4:	9a18      	ldr	r2, [sp, #96]	; 0x60
900176d6:	910a      	str	r1, [sp, #40]	; 0x28
900176d8:	f89d 106f 	ldrb.w	r1, [sp, #111]	; 0x6f
900176dc:	9109      	str	r1, [sp, #36]	; 0x24
900176de:	f8d8 1008 	ldr.w	r1, [r8, #8]
900176e2:	9305      	str	r3, [sp, #20]
900176e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
900176e6:	9206      	str	r2, [sp, #24]
900176e8:	9304      	str	r3, [sp, #16]
900176ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
900176ec:	f8cd a004 	str.w	sl, [sp, #4]
900176f0:	e9cd 7502 	strd	r7, r5, [sp, #8]
900176f4:	4437      	add	r7, r6
900176f6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900176f8:	b23f      	sxth	r7, r7
900176fa:	e9cd 0107 	strd	r0, r1, [sp, #28]
900176fe:	9700      	str	r7, [sp, #0]
90017700:	9916      	ldr	r1, [sp, #88]	; 0x58
90017702:	681a      	ldr	r2, [r3, #0]
90017704:	9811      	ldr	r0, [sp, #68]	; 0x44
90017706:	685b      	ldr	r3, [r3, #4]
90017708:	47a8      	blx	r5
9001770a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001770c:	3301      	adds	r3, #1
9001770e:	930e      	str	r3, [sp, #56]	; 0x38
90017710:	e6e0      	b.n	900174d4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x5c>
90017712:	2500      	movs	r5, #0
90017714:	e7cb      	b.n	900176ae <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x236>
90017716:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90017718:	3501      	adds	r5, #1
9001771a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
9001771c:	429d      	cmp	r5, r3
9001771e:	f6bf af74 	bge.w	9001760a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90017722:	4659      	mov	r1, fp
90017724:	982c      	ldr	r0, [sp, #176]	; 0xb0
90017726:	f7ef fdf9 	bl	9000731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001772a:	4604      	mov	r4, r0
9001772c:	b110      	cbz	r0, 90017734 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2bc>
9001772e:	280a      	cmp	r0, #10
90017730:	d1f2      	bne.n	90017718 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2a0>
90017732:	e769      	b.n	90017608 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x190>
90017734:	2400      	movs	r4, #0
90017736:	e768      	b.n	9001760a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x192>
90017738:	f1bb 0f00 	cmp.w	fp, #0
9001773c:	f43f af59 	beq.w	900175f2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x17a>
90017740:	e774      	b.n	9001762c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1b4>

90017742 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
90017742:	b530      	push	{r4, r5, lr}
90017744:	8ac4      	ldrh	r4, [r0, #22]
90017746:	8b45      	ldrh	r5, [r0, #26]
90017748:	8343      	strh	r3, [r0, #26]
9001774a:	442c      	add	r4, r5
9001774c:	1ae4      	subs	r4, r4, r3
9001774e:	8b83      	ldrh	r3, [r0, #28]
90017750:	82c4      	strh	r4, [r0, #22]
90017752:	8b04      	ldrh	r4, [r0, #24]
90017754:	4422      	add	r2, r4
90017756:	440c      	add	r4, r1
90017758:	1a59      	subs	r1, r3, r1
9001775a:	83c2      	strh	r2, [r0, #30]
9001775c:	8304      	strh	r4, [r0, #24]
9001775e:	8381      	strh	r1, [r0, #28]
90017760:	bd30      	pop	{r4, r5, pc}

90017762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
90017762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017766:	4604      	mov	r4, r0
90017768:	8a47      	ldrh	r7, [r0, #18]
9001776a:	68c0      	ldr	r0, [r0, #12]
9001776c:	b085      	sub	sp, #20
9001776e:	6803      	ldr	r3, [r0, #0]
90017770:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017772:	4798      	blx	r3
90017774:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
90017778:	7a63      	ldrb	r3, [r4, #9]
9001777a:	eb06 0640 	add.w	r6, r6, r0, lsl #1
9001777e:	3b01      	subs	r3, #1
90017780:	42b7      	cmp	r7, r6
90017782:	bfac      	ite	ge
90017784:	f04f 0900 	movge.w	r9, #0
90017788:	f04f 0901 	movlt.w	r9, #1
9001778c:	2b05      	cmp	r3, #5
9001778e:	d804      	bhi.n	9001779a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
90017790:	e8df f003 	tbb	[pc, r3]
90017794:	470f0854 	.word	0x470f0854
90017798:	4c4c      	.short	0x4c4c
9001779a:	2500      	movs	r5, #0
9001779c:	46a9      	mov	r9, r5
9001779e:	462e      	mov	r6, r5
900177a0:	462f      	mov	r7, r5
900177a2:	e00e      	b.n	900177c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
900177a4:	42b7      	cmp	r7, r6
900177a6:	f04f 0500 	mov.w	r5, #0
900177aa:	bfb4      	ite	lt
900177ac:	2600      	movlt	r6, #0
900177ae:	2601      	movge	r6, #1
900177b0:	e7f6      	b.n	900177a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
900177b2:	42b7      	cmp	r7, r6
900177b4:	464d      	mov	r5, r9
900177b6:	f04f 0900 	mov.w	r9, #0
900177ba:	bfb4      	ite	lt
900177bc:	2600      	movlt	r6, #0
900177be:	2601      	movge	r6, #1
900177c0:	464f      	mov	r7, r9
900177c2:	f04f 0800 	mov.w	r8, #0
900177c6:	f8a4 8016 	strh.w	r8, [r4, #22]
900177ca:	f8a4 8018 	strh.w	r8, [r4, #24]
900177ce:	f8cd 8004 	str.w	r8, [sp, #4]
900177d2:	2300      	movs	r3, #0
900177d4:	9303      	str	r3, [sp, #12]
900177d6:	8823      	ldrh	r3, [r4, #0]
900177d8:	2b20      	cmp	r3, #32
900177da:	d033      	beq.n	90017844 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
900177dc:	f242 010b 	movw	r1, #8203	; 0x200b
900177e0:	1a5a      	subs	r2, r3, r1
900177e2:	f1d2 0a00 	rsbs	sl, r2, #0
900177e6:	eb4a 0a02 	adc.w	sl, sl, r2
900177ea:	f64f 62ff 	movw	r2, #65279	; 0xfeff
900177ee:	4293      	cmp	r3, r2
900177f0:	d008      	beq.n	90017804 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
900177f2:	428b      	cmp	r3, r1
900177f4:	9a01      	ldr	r2, [sp, #4]
900177f6:	bf0e      	itee	eq
900177f8:	f04f 0a01 	moveq.w	sl, #1
900177fc:	461a      	movne	r2, r3
900177fe:	f04f 0a00 	movne.w	sl, #0
90017802:	9201      	str	r2, [sp, #4]
90017804:	ab03      	add	r3, sp, #12
90017806:	68e2      	ldr	r2, [r4, #12]
90017808:	7a21      	ldrb	r1, [r4, #8]
9001780a:	6860      	ldr	r0, [r4, #4]
9001780c:	f002 fd5e 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90017810:	8020      	strh	r0, [r4, #0]
90017812:	b9d8      	cbnz	r0, 9001784c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
90017814:	8ba2      	ldrh	r2, [r4, #28]
90017816:	2300      	movs	r3, #0
90017818:	4611      	mov	r1, r2
9001781a:	4620      	mov	r0, r4
9001781c:	f7ff ff91 	bl	90017742 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90017820:	e06e      	b.n	90017900 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90017822:	2500      	movs	r5, #0
90017824:	2701      	movs	r7, #1
90017826:	46a9      	mov	r9, r5
90017828:	462e      	mov	r6, r5
9001782a:	e7ca      	b.n	900177c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
9001782c:	42b7      	cmp	r7, r6
9001782e:	f04f 0500 	mov.w	r5, #0
90017832:	bfb4      	ite	lt
90017834:	2700      	movlt	r7, #0
90017836:	2701      	movge	r7, #1
90017838:	462e      	mov	r6, r5
9001783a:	e7c2      	b.n	900177c2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
9001783c:	2500      	movs	r5, #0
9001783e:	2601      	movs	r6, #1
90017840:	46a9      	mov	r9, r5
90017842:	e7ad      	b.n	900177a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
90017844:	9301      	str	r3, [sp, #4]
90017846:	f04f 0a01 	mov.w	sl, #1
9001784a:	e7db      	b.n	90017804 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
9001784c:	8b63      	ldrh	r3, [r4, #26]
9001784e:	280a      	cmp	r0, #10
90017850:	f103 0301 	add.w	r3, r3, #1
90017854:	8363      	strh	r3, [r4, #26]
90017856:	d0dd      	beq.n	90017814 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
90017858:	9a03      	ldr	r2, [sp, #12]
9001785a:	bb62      	cbnz	r2, 900178b6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
9001785c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90017860:	4298      	cmp	r0, r3
90017862:	d003      	beq.n	9001786c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
90017864:	f242 030b 	movw	r3, #8203	; 0x200b
90017868:	4298      	cmp	r0, r3
9001786a:	d1b2      	bne.n	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001786c:	8823      	ldrh	r3, [r4, #0]
9001786e:	8ba1      	ldrh	r1, [r4, #28]
90017870:	2b20      	cmp	r3, #32
90017872:	d003      	beq.n	9001787c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
90017874:	f242 000b 	movw	r0, #8203	; 0x200b
90017878:	4283      	cmp	r3, r0
9001787a:	d131      	bne.n	900178e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
9001787c:	f1ba 0f00 	cmp.w	sl, #0
90017880:	bf0a      	itet	eq
90017882:	4688      	moveq	r8, r1
90017884:	4650      	movne	r0, sl
90017886:	2001      	moveq	r0, #1
90017888:	440a      	add	r2, r1
9001788a:	8b23      	ldrh	r3, [r4, #24]
9001788c:	f8b4 c010 	ldrh.w	ip, [r4, #16]
90017890:	b292      	uxth	r2, r2
90017892:	83a2      	strh	r2, [r4, #28]
90017894:	4413      	add	r3, r2
90017896:	f1b9 0f00 	cmp.w	r9, #0
9001789a:	d102      	bne.n	900178a2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
9001789c:	2d00      	cmp	r5, #0
9001789e:	d042      	beq.n	90017926 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
900178a0:	b300      	cbz	r0, 900178e4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
900178a2:	8c21      	ldrh	r1, [r4, #32]
900178a4:	4419      	add	r1, r3
900178a6:	458c      	cmp	ip, r1
900178a8:	da37      	bge.n	9001791a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900178aa:	8ae1      	ldrh	r1, [r4, #22]
900178ac:	2900      	cmp	r1, #0
900178ae:	d034      	beq.n	9001791a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
900178b0:	4563      	cmp	r3, ip
900178b2:	dd8e      	ble.n	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178b4:	e01d      	b.n	900178f2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
900178b6:	8893      	ldrh	r3, [r2, #4]
900178b8:	9901      	ldr	r1, [sp, #4]
900178ba:	8023      	strh	r3, [r4, #0]
900178bc:	f892 b00d 	ldrb.w	fp, [r2, #13]
900178c0:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
900178c4:	f40b 7080 	and.w	r0, fp, #256	; 0x100
900178c8:	f892 b00a 	ldrb.w	fp, [r2, #10]
900178cc:	ea4b 0b00 	orr.w	fp, fp, r0
900178d0:	68e0      	ldr	r0, [r4, #12]
900178d2:	6803      	ldr	r3, [r0, #0]
900178d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900178d6:	4798      	blx	r3
900178d8:	eb0b 0200 	add.w	r2, fp, r0
900178dc:	b292      	uxth	r2, r2
900178de:	e7c5      	b.n	9001786c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
900178e0:	2000      	movs	r0, #0
900178e2:	e7d1      	b.n	90017888 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
900178e4:	4563      	cmp	r3, ip
900178e6:	f77f af74 	ble.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178ea:	8ae3      	ldrh	r3, [r4, #22]
900178ec:	2b00      	cmp	r3, #0
900178ee:	f43f af70 	beq.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
900178f2:	2301      	movs	r3, #1
900178f4:	8c22      	ldrh	r2, [r4, #32]
900178f6:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
900178fa:	8be3      	ldrh	r3, [r4, #30]
900178fc:	4413      	add	r3, r2
900178fe:	83e3      	strh	r3, [r4, #30]
90017900:	68e0      	ldr	r0, [r4, #12]
90017902:	6803      	ldr	r3, [r0, #0]
90017904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017906:	4798      	blx	r3
90017908:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
9001790c:	4418      	add	r0, r3
9001790e:	8a63      	ldrh	r3, [r4, #18]
90017910:	1a18      	subs	r0, r3, r0
90017912:	8260      	strh	r0, [r4, #18]
90017914:	b005      	add	sp, #20
90017916:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001791a:	2300      	movs	r3, #0
9001791c:	4611      	mov	r1, r2
9001791e:	4620      	mov	r0, r4
90017920:	f7ff ff0f 	bl	90017742 <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
90017924:	e755      	b.n	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017926:	4563      	cmp	r3, ip
90017928:	dd14      	ble.n	90017954 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
9001792a:	b117      	cbz	r7, 90017932 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
9001792c:	2301      	movs	r3, #1
9001792e:	460a      	mov	r2, r1
90017930:	e772      	b.n	90017818 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
90017932:	2e00      	cmp	r6, #0
90017934:	f43f af4d 	beq.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017938:	2800      	cmp	r0, #0
9001793a:	f47f af4a 	bne.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001793e:	f1ba 0f00 	cmp.w	sl, #0
90017942:	d002      	beq.n	9001794a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
90017944:	2301      	movs	r3, #1
90017946:	4642      	mov	r2, r8
90017948:	e767      	b.n	9001781a <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
9001794a:	8ae3      	ldrh	r3, [r4, #22]
9001794c:	2b00      	cmp	r3, #0
9001794e:	f43f af40 	beq.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017952:	e7d5      	b.n	90017900 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
90017954:	2800      	cmp	r0, #0
90017956:	f47f af3c 	bne.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
9001795a:	f1ba 0f00 	cmp.w	sl, #0
9001795e:	f43f af38 	beq.w	900177d2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
90017962:	2301      	movs	r3, #1
90017964:	4642      	mov	r2, r8
90017966:	e7da      	b.n	9001791e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

90017968 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
90017968:	b5f0      	push	{r4, r5, r6, r7, lr}
9001796a:	4605      	mov	r5, r0
9001796c:	b08f      	sub	sp, #60	; 0x3c
9001796e:	4617      	mov	r7, r2
90017970:	461c      	mov	r4, r3
90017972:	460e      	mov	r6, r1
90017974:	b1d1      	cbz	r1, 900179ac <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
90017976:	681b      	ldr	r3, [r3, #0]
90017978:	4620      	mov	r0, r4
9001797a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001797c:	4798      	blx	r3
9001797e:	4240      	negs	r0, r0
90017980:	9603      	str	r6, [sp, #12]
90017982:	f64f 73ff 	movw	r3, #65535	; 0xffff
90017986:	b200      	sxth	r0, r0
90017988:	9700      	str	r7, [sp, #0]
9001798a:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001798e:	4629      	mov	r1, r5
90017990:	e9cd 4001 	strd	r4, r0, [sp, #4]
90017994:	2401      	movs	r4, #1
90017996:	a805      	add	r0, sp, #20
90017998:	f7ff fcbe 	bl	90017318 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
9001799c:	a805      	add	r0, sp, #20
9001799e:	f7ff fee0 	bl	90017762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
900179a2:	f8bd 3014 	ldrh.w	r3, [sp, #20]
900179a6:	b163      	cbz	r3, 900179c2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
900179a8:	3401      	adds	r4, #1
900179aa:	e7f7      	b.n	9001799c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
900179ac:	2401      	movs	r4, #1
900179ae:	f002 fd59 	bl	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
900179b2:	280a      	cmp	r0, #10
900179b4:	4628      	mov	r0, r5
900179b6:	bf08      	it	eq
900179b8:	3401      	addeq	r4, #1
900179ba:	f002 fd53 	bl	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
900179be:	2800      	cmp	r0, #0
900179c0:	d1f7      	bne.n	900179b2 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
900179c2:	b2a0      	uxth	r0, r4
900179c4:	b00f      	add	sp, #60	; 0x3c
900179c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

900179c8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
900179c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900179cc:	b0e3      	sub	sp, #396	; 0x18c
900179ce:	461c      	mov	r4, r3
900179d0:	4683      	mov	fp, r0
900179d2:	4688      	mov	r8, r1
900179d4:	9b6c      	ldr	r3, [sp, #432]	; 0x1b0
900179d6:	2b00      	cmp	r3, #0
900179d8:	f000 810f 	beq.w	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179dc:	6823      	ldr	r3, [r4, #0]
900179de:	2b00      	cmp	r3, #0
900179e0:	f000 810b 	beq.w	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179e4:	7ba3      	ldrb	r3, [r4, #14]
900179e6:	2b00      	cmp	r3, #0
900179e8:	f000 8107 	beq.w	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
900179ec:	ad0a      	add	r5, sp, #40	; 0x28
900179ee:	6810      	ldr	r0, [r2, #0]
900179f0:	6851      	ldr	r1, [r2, #4]
900179f2:	462b      	mov	r3, r5
900179f4:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
900179f8:	c303      	stmia	r3!, {r0, r1}
900179fa:	2100      	movs	r1, #0
900179fc:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
90017a00:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
90017a04:	4628      	mov	r0, r5
90017a06:	910c      	str	r1, [sp, #48]	; 0x30
90017a08:	a90c      	add	r1, sp, #48	; 0x30
90017a0a:	79a2      	ldrb	r2, [r4, #6]
90017a0c:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017a10:	f7ff fd01 	bl	90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90017a14:	a90c      	add	r1, sp, #48	; 0x30
90017a16:	79a2      	ldrb	r2, [r4, #6]
90017a18:	4608      	mov	r0, r1
90017a1a:	f7ff fcfc 	bl	90017416 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
90017a1e:	a817      	add	r0, sp, #92	; 0x5c
90017a20:	f002 f8f4 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90017a24:	6820      	ldr	r0, [r4, #0]
90017a26:	6803      	ldr	r3, [r0, #0]
90017a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017a2a:	4798      	blx	r3
90017a2c:	4606      	mov	r6, r0
90017a2e:	6820      	ldr	r0, [r4, #0]
90017a30:	6803      	ldr	r3, [r0, #0]
90017a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90017a34:	4798      	blx	r3
90017a36:	4633      	mov	r3, r6
90017a38:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017a3a:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017a3c:	9000      	str	r0, [sp, #0]
90017a3e:	a817      	add	r0, sp, #92	; 0x5c
90017a40:	f002 f93f 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90017a44:	6820      	ldr	r0, [r4, #0]
90017a46:	f894 a004 	ldrb.w	sl, [r4, #4]
90017a4a:	6803      	ldr	r3, [r0, #0]
90017a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
90017a4e:	4798      	blx	r3
90017a50:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
90017a54:	6823      	ldr	r3, [r4, #0]
90017a56:	4607      	mov	r7, r0
90017a58:	4406      	add	r6, r0
90017a5a:	a830      	add	r0, sp, #192	; 0xc0
90017a5c:	f893 9009 	ldrb.w	r9, [r3, #9]
90017a60:	f002 f8d4 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90017a64:	7c23      	ldrb	r3, [r4, #16]
90017a66:	b17b      	cbz	r3, 90017a88 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
90017a68:	6820      	ldr	r0, [r4, #0]
90017a6a:	6803      	ldr	r3, [r0, #0]
90017a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90017a6e:	4798      	blx	r3
90017a70:	9009      	str	r0, [sp, #36]	; 0x24
90017a72:	6820      	ldr	r0, [r4, #0]
90017a74:	6802      	ldr	r2, [r0, #0]
90017a76:	6d12      	ldr	r2, [r2, #80]	; 0x50
90017a78:	4790      	blx	r2
90017a7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017a7c:	9000      	str	r0, [sp, #0]
90017a7e:	a830      	add	r0, sp, #192	; 0xc0
90017a80:	9a6d      	ldr	r2, [sp, #436]	; 0x1b4
90017a82:	996c      	ldr	r1, [sp, #432]	; 0x1b0
90017a84:	f002 f91d 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90017a88:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
90017a8c:	a80e      	add	r0, sp, #56	; 0x38
90017a8e:	7be2      	ldrb	r2, [r4, #15]
90017a90:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90017a94:	1a8a      	subs	r2, r1, r2
90017a96:	7c21      	ldrb	r1, [r4, #16]
90017a98:	9103      	str	r1, [sp, #12]
90017a9a:	b292      	uxth	r2, r2
90017a9c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
90017aa0:	9102      	str	r1, [sp, #8]
90017aa2:	6821      	ldr	r1, [r4, #0]
90017aa4:	9101      	str	r1, [sp, #4]
90017aa6:	7961      	ldrb	r1, [r4, #5]
90017aa8:	9100      	str	r1, [sp, #0]
90017aaa:	a930      	add	r1, sp, #192	; 0xc0
90017aac:	f7ff fc34 	bl	90017318 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
90017ab0:	2e00      	cmp	r6, #0
90017ab2:	dc5b      	bgt.n	90017b6c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
90017ab4:	af17      	add	r7, sp, #92	; 0x5c
90017ab6:	f04f 0900 	mov.w	r9, #0
90017aba:	7c23      	ldrb	r3, [r4, #16]
90017abc:	2b00      	cmp	r3, #0
90017abe:	f000 80ae 	beq.w	90017c1e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
90017ac2:	a80e      	add	r0, sp, #56	; 0x38
90017ac4:	f7ff fe4d 	bl	90017762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017ac8:	f1ba 0f00 	cmp.w	sl, #0
90017acc:	f000 80a2 	beq.w	90017c14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017ad0:	7c23      	ldrb	r3, [r4, #16]
90017ad2:	2264      	movs	r2, #100	; 0x64
90017ad4:	4639      	mov	r1, r7
90017ad6:	a849      	add	r0, sp, #292	; 0x124
90017ad8:	9309      	str	r3, [sp, #36]	; 0x24
90017ada:	f00f fb29 	bl	90027130 <memcpy>
90017ade:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017ae0:	2b00      	cmp	r3, #0
90017ae2:	f000 80a4 	beq.w	90017c2e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x266>
90017ae6:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
90017aea:	7922      	ldrb	r2, [r4, #4]
90017aec:	2a01      	cmp	r2, #1
90017aee:	f040 8087 	bne.w	90017c00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
90017af2:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	; 0x34
90017af6:	1ac0      	subs	r0, r0, r3
90017af8:	2302      	movs	r3, #2
90017afa:	fb90 f0f3 	sdiv	r0, r0, r3
90017afe:	b200      	sxth	r0, r0
90017b00:	7c23      	ldrb	r3, [r4, #16]
90017b02:	2b00      	cmp	r3, #0
90017b04:	f000 8088 	beq.w	90017c18 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x250>
90017b08:	f8bd 204e 	ldrh.w	r2, [sp, #78]	; 0x4e
90017b0c:	f89d 105a 	ldrb.w	r1, [sp, #90]	; 0x5a
90017b10:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017b14:	e9cd 2105 	strd	r2, r1, [sp, #20]
90017b18:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
90017b1c:	2100      	movs	r1, #0
90017b1e:	4410      	add	r0, r2
90017b20:	4642      	mov	r2, r8
90017b22:	b200      	sxth	r0, r0
90017b24:	e9cd 9703 	strd	r9, r7, [sp, #12]
90017b28:	9000      	str	r0, [sp, #0]
90017b2a:	4658      	mov	r0, fp
90017b2c:	e9cd 5401 	strd	r5, r4, [sp, #4]
90017b30:	f7ff fca2 	bl	90017478 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
90017b34:	2800      	cmp	r0, #0
90017b36:	d160      	bne.n	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b38:	b2b2      	uxth	r2, r6
90017b3a:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017b3e:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90017b42:	4413      	add	r3, r2
90017b44:	1a8a      	subs	r2, r1, r2
90017b46:	b21b      	sxth	r3, r3
90017b48:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
90017b4c:	f89d 205a 	ldrb.w	r2, [sp, #90]	; 0x5a
90017b50:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017b54:	2a00      	cmp	r2, #0
90017b56:	d150      	bne.n	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b58:	6822      	ldr	r2, [r4, #0]
90017b5a:	8869      	ldrh	r1, [r5, #2]
90017b5c:	7a12      	ldrb	r2, [r2, #8]
90017b5e:	1a9b      	subs	r3, r3, r2
90017b60:	88ea      	ldrh	r2, [r5, #6]
90017b62:	440a      	add	r2, r1
90017b64:	b212      	sxth	r2, r2
90017b66:	4293      	cmp	r3, r2
90017b68:	dda7      	ble.n	90017aba <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
90017b6a:	e046      	b.n	90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017b6c:	7c23      	ldrb	r3, [r4, #16]
90017b6e:	444f      	add	r7, r9
90017b70:	b1c3      	cbz	r3, 90017ba4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
90017b72:	f64f 79ff 	movw	r9, #65535	; 0xffff
90017b76:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017b7a:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017b7e:	443b      	add	r3, r7
90017b80:	4293      	cmp	r3, r2
90017b82:	da97      	bge.n	90017ab4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017b84:	a80e      	add	r0, sp, #56	; 0x38
90017b86:	f7ff fdec 	bl	90017762 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
90017b8a:	f8bd 304e 	ldrh.w	r3, [sp, #78]	; 0x4e
90017b8e:	3b01      	subs	r3, #1
90017b90:	b29b      	uxth	r3, r3
90017b92:	454b      	cmp	r3, r9
90017b94:	9309      	str	r3, [sp, #36]	; 0x24
90017b96:	d021      	beq.n	90017bdc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
90017b98:	7961      	ldrb	r1, [r4, #5]
90017b9a:	a817      	add	r0, sp, #92	; 0x5c
90017b9c:	f7ef fbbe 	bl	9000731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
90017ba0:	9b09      	ldr	r3, [sp, #36]	; 0x24
90017ba2:	e7f4      	b.n	90017b8e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
90017ba4:	fa1f f986 	uxth.w	r9, r6
90017ba8:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
90017bac:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90017bb0:	443b      	add	r3, r7
90017bb2:	4293      	cmp	r3, r2
90017bb4:	f6bf af7e 	bge.w	90017ab4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
90017bb8:	a817      	add	r0, sp, #92	; 0x5c
90017bba:	f002 fc53 	bl	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
90017bbe:	b1e0      	cbz	r0, 90017bfa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x232>
90017bc0:	280a      	cmp	r0, #10
90017bc2:	d1f1      	bne.n	90017ba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017bc4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
90017bc8:	444b      	add	r3, r9
90017bca:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
90017bce:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
90017bd2:	eba3 0309 	sub.w	r3, r3, r9
90017bd6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017bda:	e7e5      	b.n	90017ba8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
90017bdc:	b2b3      	uxth	r3, r6
90017bde:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
90017be2:	441a      	add	r2, r3
90017be4:	f8ad 2032 	strh.w	r2, [sp, #50]	; 0x32
90017be8:	f8bd 2036 	ldrh.w	r2, [sp, #54]	; 0x36
90017bec:	1ad3      	subs	r3, r2, r3
90017bee:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
90017bf2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
90017bf6:	2b00      	cmp	r3, #0
90017bf8:	d1bd      	bne.n	90017b76 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
90017bfa:	b063      	add	sp, #396	; 0x18c
90017bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017c00:	2a02      	cmp	r2, #2
90017c02:	d105      	bne.n	90017c10 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x248>
90017c04:	7be2      	ldrb	r2, [r4, #15]
90017c06:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90017c0a:	1a80      	subs	r0, r0, r2
90017c0c:	1ac0      	subs	r0, r0, r3
90017c0e:	e776      	b.n	90017afe <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
90017c10:	2000      	movs	r0, #0
90017c12:	e775      	b.n	90017b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017c14:	7be0      	ldrb	r0, [r4, #15]
90017c16:	e773      	b.n	90017b00 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
90017c18:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017c1c:	e776      	b.n	90017b0c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
90017c1e:	f1ba 0f00 	cmp.w	sl, #0
90017c22:	d0f7      	beq.n	90017c14 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24c>
90017c24:	2264      	movs	r2, #100	; 0x64
90017c26:	4639      	mov	r1, r7
90017c28:	a849      	add	r0, sp, #292	; 0x124
90017c2a:	f00f fa81 	bl	90027130 <memcpy>
90017c2e:	2300      	movs	r3, #0
90017c30:	f647 72ff 	movw	r2, #32767	; 0x7fff
90017c34:	6821      	ldr	r1, [r4, #0]
90017c36:	a849      	add	r0, sp, #292	; 0x124
90017c38:	f7ff fbb1 	bl	9001739e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
90017c3c:	b203      	sxth	r3, r0
90017c3e:	e754      	b.n	90017aea <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

90017c40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
90017c40:	2b03      	cmp	r3, #3
90017c42:	d818      	bhi.n	90017c76 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
90017c44:	e8df f003 	tbb	[pc, r3]
90017c48:	130d0602 	.word	0x130d0602
90017c4c:	f9b0 2000 	ldrsh.w	r2, [r0]
90017c50:	1850      	adds	r0, r2, r1
90017c52:	4770      	bx	lr
90017c54:	8803      	ldrh	r3, [r0, #0]
90017c56:	8880      	ldrh	r0, [r0, #4]
90017c58:	4418      	add	r0, r3
90017c5a:	b200      	sxth	r0, r0
90017c5c:	1a80      	subs	r0, r0, r2
90017c5e:	3801      	subs	r0, #1
90017c60:	4770      	bx	lr
90017c62:	8803      	ldrh	r3, [r0, #0]
90017c64:	8880      	ldrh	r0, [r0, #4]
90017c66:	4418      	add	r0, r3
90017c68:	b200      	sxth	r0, r0
90017c6a:	1a40      	subs	r0, r0, r1
90017c6c:	e7f7      	b.n	90017c5e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
90017c6e:	f9b0 0000 	ldrsh.w	r0, [r0]
90017c72:	4410      	add	r0, r2
90017c74:	4770      	bx	lr
90017c76:	2000      	movs	r0, #0
90017c78:	4770      	bx	lr

90017c7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
90017c7a:	2b03      	cmp	r3, #3
90017c7c:	d817      	bhi.n	90017cae <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
90017c7e:	e8df f003 	tbb	[pc, r3]
90017c82:	0602      	.short	0x0602
90017c84:	1009      	.short	0x1009
90017c86:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90017c8a:	1850      	adds	r0, r2, r1
90017c8c:	4770      	bx	lr
90017c8e:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
90017c92:	e7fa      	b.n	90017c8a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
90017c94:	8843      	ldrh	r3, [r0, #2]
90017c96:	88c0      	ldrh	r0, [r0, #6]
90017c98:	4418      	add	r0, r3
90017c9a:	b200      	sxth	r0, r0
90017c9c:	1a80      	subs	r0, r0, r2
90017c9e:	3801      	subs	r0, #1
90017ca0:	4770      	bx	lr
90017ca2:	8843      	ldrh	r3, [r0, #2]
90017ca4:	88c0      	ldrh	r0, [r0, #6]
90017ca6:	4418      	add	r0, r3
90017ca8:	b200      	sxth	r0, r0
90017caa:	1a40      	subs	r0, r0, r1
90017cac:	e7f7      	b.n	90017c9e <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
90017cae:	2000      	movs	r0, #0
90017cb0:	4770      	bx	lr
	...

90017cb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
90017cb4:	4b01      	ldr	r3, [pc, #4]	; (90017cbc <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
90017cb6:	2200      	movs	r2, #0
90017cb8:	601a      	str	r2, [r3, #0]
90017cba:	4770      	bx	lr
90017cbc:	24026f94 	.word	0x24026f94

90017cc0 <_ZN8touchgfx16TouchCalibration4clzuEm>:
90017cc0:	4603      	mov	r3, r0
90017cc2:	b1c8      	cbz	r0, 90017cf8 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
90017cc4:	0c02      	lsrs	r2, r0, #16
90017cc6:	0412      	lsls	r2, r2, #16
90017cc8:	b9a2      	cbnz	r2, 90017cf4 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
90017cca:	0403      	lsls	r3, r0, #16
90017ccc:	2010      	movs	r0, #16
90017cce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
90017cd2:	bf04      	itt	eq
90017cd4:	021b      	lsleq	r3, r3, #8
90017cd6:	3008      	addeq	r0, #8
90017cd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
90017cdc:	bf04      	itt	eq
90017cde:	011b      	lsleq	r3, r3, #4
90017ce0:	3004      	addeq	r0, #4
90017ce2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
90017ce6:	bf04      	itt	eq
90017ce8:	009b      	lsleq	r3, r3, #2
90017cea:	3002      	addeq	r0, #2
90017cec:	2b00      	cmp	r3, #0
90017cee:	db04      	blt.n	90017cfa <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
90017cf0:	3001      	adds	r0, #1
90017cf2:	4770      	bx	lr
90017cf4:	2000      	movs	r0, #0
90017cf6:	e7ea      	b.n	90017cce <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
90017cf8:	2020      	movs	r0, #32
90017cfa:	4770      	bx	lr

90017cfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
90017cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90017d00:	b087      	sub	sp, #28
90017d02:	4681      	mov	r9, r0
90017d04:	4698      	mov	r8, r3
90017d06:	4610      	mov	r0, r2
90017d08:	460d      	mov	r5, r1
90017d0a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
90017d0e:	b981      	cbnz	r1, 90017d32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
90017d10:	b14b      	cbz	r3, 90017d26 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
90017d12:	460b      	mov	r3, r1
90017d14:	464a      	mov	r2, r9
90017d16:	4641      	mov	r1, r8
90017d18:	e9cd 4700 	strd	r4, r7, [sp]
90017d1c:	f7ff ffee 	bl	90017cfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d20:	b007      	add	sp, #28
90017d22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90017d26:	f04f 33ff 	mov.w	r3, #4294967295
90017d2a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
90017d2e:	603b      	str	r3, [r7, #0]
90017d30:	e7f6      	b.n	90017d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017d32:	fa32 fa01 	lsrs.w	sl, r2, r1
90017d36:	d107      	bne.n	90017d48 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
90017d38:	fb09 f602 	mul.w	r6, r9, r2
90017d3c:	fbb6 f0f4 	udiv	r0, r6, r4
90017d40:	fb04 6610 	mls	r6, r4, r0, r6
90017d44:	603e      	str	r6, [r7, #0]
90017d46:	e7eb      	b.n	90017d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
90017d48:	2601      	movs	r6, #1
90017d4a:	fa09 fb01 	lsl.w	fp, r9, r1
90017d4e:	408e      	lsls	r6, r1
90017d50:	fbbb f3f4 	udiv	r3, fp, r4
90017d54:	3e01      	subs	r6, #1
90017d56:	9302      	str	r3, [sp, #8]
90017d58:	fb0a f303 	mul.w	r3, sl, r3
90017d5c:	4016      	ands	r6, r2
90017d5e:	9303      	str	r3, [sp, #12]
90017d60:	4630      	mov	r0, r6
90017d62:	f7ff ffad 	bl	90017cc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017d66:	464a      	mov	r2, r9
90017d68:	460b      	mov	r3, r1
90017d6a:	4601      	mov	r1, r0
90017d6c:	4630      	mov	r0, r6
90017d6e:	e9cd 4700 	strd	r4, r7, [sp]
90017d72:	f7ff ffc3 	bl	90017cfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d76:	9b02      	ldr	r3, [sp, #8]
90017d78:	4606      	mov	r6, r0
90017d7a:	eb05 0108 	add.w	r1, r5, r8
90017d7e:	fb04 bb13 	mls	fp, r4, r3, fp
90017d82:	4658      	mov	r0, fp
90017d84:	f7ff ff9c 	bl	90017cc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017d88:	ab05      	add	r3, sp, #20
90017d8a:	465a      	mov	r2, fp
90017d8c:	e9cd 4300 	strd	r4, r3, [sp]
90017d90:	4603      	mov	r3, r0
90017d92:	4650      	mov	r0, sl
90017d94:	f7ff ffb2 	bl	90017cfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017d98:	6839      	ldr	r1, [r7, #0]
90017d9a:	9a05      	ldr	r2, [sp, #20]
90017d9c:	9b03      	ldr	r3, [sp, #12]
90017d9e:	4411      	add	r1, r2
90017da0:	fbb1 f2f4 	udiv	r2, r1, r4
90017da4:	18d3      	adds	r3, r2, r3
90017da6:	fb04 1412 	mls	r4, r4, r2, r1
90017daa:	441e      	add	r6, r3
90017dac:	603c      	str	r4, [r7, #0]
90017dae:	4430      	add	r0, r6
90017db0:	e7b6      	b.n	90017d20 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

90017db2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
90017db2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90017db6:	b085      	sub	sp, #20
90017db8:	f1b0 0900 	subs.w	r9, r0, #0
90017dbc:	461d      	mov	r5, r3
90017dbe:	4617      	mov	r7, r2
90017dc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90017dc2:	bfbb      	ittet	lt
90017dc4:	f1c9 0900 	rsblt	r9, r9, #0
90017dc8:	f04f 36ff 	movlt.w	r6, #4294967295
90017dcc:	2601      	movge	r6, #1
90017dce:	6823      	ldrlt	r3, [r4, #0]
90017dd0:	bfbc      	itt	lt
90017dd2:	425b      	neglt	r3, r3
90017dd4:	6023      	strlt	r3, [r4, #0]
90017dd6:	2a00      	cmp	r2, #0
90017dd8:	da04      	bge.n	90017de4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
90017dda:	6823      	ldr	r3, [r4, #0]
90017ddc:	4257      	negs	r7, r2
90017dde:	4276      	negs	r6, r6
90017de0:	425b      	negs	r3, r3
90017de2:	6023      	str	r3, [r4, #0]
90017de4:	2d00      	cmp	r5, #0
90017de6:	4638      	mov	r0, r7
90017de8:	bfba      	itte	lt
90017dea:	426d      	neglt	r5, r5
90017dec:	f04f 38ff 	movlt.w	r8, #4294967295
90017df0:	f04f 0801 	movge.w	r8, #1
90017df4:	f7ff ff64 	bl	90017cc0 <_ZN8touchgfx16TouchCalibration4clzuEm>
90017df8:	ab03      	add	r3, sp, #12
90017dfa:	463a      	mov	r2, r7
90017dfc:	e9cd 5300 	strd	r5, r3, [sp]
90017e00:	4603      	mov	r3, r0
90017e02:	4648      	mov	r0, r9
90017e04:	f7ff ff7a 	bl	90017cfc <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
90017e08:	6823      	ldr	r3, [r4, #0]
90017e0a:	9a03      	ldr	r2, [sp, #12]
90017e0c:	4546      	cmp	r6, r8
90017e0e:	441a      	add	r2, r3
90017e10:	fb92 f3f5 	sdiv	r3, r2, r5
90017e14:	4418      	add	r0, r3
90017e16:	fb05 2313 	mls	r3, r5, r3, r2
90017e1a:	bf18      	it	ne
90017e1c:	4240      	negne	r0, r0
90017e1e:	1c72      	adds	r2, r6, #1
90017e20:	6023      	str	r3, [r4, #0]
90017e22:	d105      	bne.n	90017e30 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
90017e24:	2b00      	cmp	r3, #0
90017e26:	f1c3 0200 	rsb	r2, r3, #0
90017e2a:	db0b      	blt.n	90017e44 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
90017e2c:	6022      	str	r2, [r4, #0]
90017e2e:	e006      	b.n	90017e3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e30:	2e01      	cmp	r6, #1
90017e32:	d104      	bne.n	90017e3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e34:	2b00      	cmp	r3, #0
90017e36:	da02      	bge.n	90017e3e <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
90017e38:	442b      	add	r3, r5
90017e3a:	3801      	subs	r0, #1
90017e3c:	6023      	str	r3, [r4, #0]
90017e3e:	b005      	add	sp, #20
90017e40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90017e44:	3801      	subs	r0, #1
90017e46:	1b52      	subs	r2, r2, r5
90017e48:	e7f0      	b.n	90017e2c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

90017e4c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
90017e4c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90017e50:	4c1c      	ldr	r4, [pc, #112]	; (90017ec4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
90017e52:	4605      	mov	r5, r0
90017e54:	6807      	ldr	r7, [r0, #0]
90017e56:	69a3      	ldr	r3, [r4, #24]
90017e58:	b92b      	cbnz	r3, 90017e66 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
90017e5a:	6840      	ldr	r0, [r0, #4]
90017e5c:	e9c5 7000 	strd	r7, r0, [r5]
90017e60:	b004      	add	sp, #16
90017e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90017e66:	f04f 0802 	mov.w	r8, #2
90017e6a:	68a2      	ldr	r2, [r4, #8]
90017e6c:	ae04      	add	r6, sp, #16
90017e6e:	6820      	ldr	r0, [r4, #0]
90017e70:	fb93 f1f8 	sdiv	r1, r3, r8
90017e74:	440a      	add	r2, r1
90017e76:	69e1      	ldr	r1, [r4, #28]
90017e78:	f846 2d04 	str.w	r2, [r6, #-4]!
90017e7c:	463a      	mov	r2, r7
90017e7e:	9600      	str	r6, [sp, #0]
90017e80:	f7ff ff97 	bl	90017db2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e84:	69a3      	ldr	r3, [r4, #24]
90017e86:	4607      	mov	r7, r0
90017e88:	686a      	ldr	r2, [r5, #4]
90017e8a:	6a21      	ldr	r1, [r4, #32]
90017e8c:	9600      	str	r6, [sp, #0]
90017e8e:	6860      	ldr	r0, [r4, #4]
90017e90:	f7ff ff8f 	bl	90017db2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017e94:	69a3      	ldr	r3, [r4, #24]
90017e96:	6962      	ldr	r2, [r4, #20]
90017e98:	4407      	add	r7, r0
90017e9a:	6a61      	ldr	r1, [r4, #36]	; 0x24
90017e9c:	9600      	str	r6, [sp, #0]
90017e9e:	68e0      	ldr	r0, [r4, #12]
90017ea0:	fb93 f8f8 	sdiv	r8, r3, r8
90017ea4:	4442      	add	r2, r8
90017ea6:	9203      	str	r2, [sp, #12]
90017ea8:	682a      	ldr	r2, [r5, #0]
90017eaa:	f7ff ff82 	bl	90017db2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017eae:	4680      	mov	r8, r0
90017eb0:	9600      	str	r6, [sp, #0]
90017eb2:	69a3      	ldr	r3, [r4, #24]
90017eb4:	686a      	ldr	r2, [r5, #4]
90017eb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
90017eb8:	6920      	ldr	r0, [r4, #16]
90017eba:	f7ff ff7a 	bl	90017db2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
90017ebe:	4440      	add	r0, r8
90017ec0:	e7cc      	b.n	90017e5c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
90017ec2:	bf00      	nop
90017ec4:	24026f98 	.word	0x24026f98

90017ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
90017ec8:	4b07      	ldr	r3, [pc, #28]	; (90017ee8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
90017eca:	781b      	ldrb	r3, [r3, #0]
90017ecc:	2b01      	cmp	r3, #1
90017ece:	d109      	bne.n	90017ee4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
90017ed0:	f9b1 3000 	ldrsh.w	r3, [r1]
90017ed4:	f9b0 2000 	ldrsh.w	r2, [r0]
90017ed8:	8003      	strh	r3, [r0, #0]
90017eda:	4b04      	ldr	r3, [pc, #16]	; (90017eec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
90017edc:	881b      	ldrh	r3, [r3, #0]
90017ede:	3b01      	subs	r3, #1
90017ee0:	1a9b      	subs	r3, r3, r2
90017ee2:	800b      	strh	r3, [r1, #0]
90017ee4:	4770      	bx	lr
90017ee6:	bf00      	nop
90017ee8:	24026f84 	.word	0x24026f84
90017eec:	24026f80 	.word	0x24026f80

90017ef0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
90017ef0:	4b07      	ldr	r3, [pc, #28]	; (90017f10 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
90017ef2:	b510      	push	{r4, lr}
90017ef4:	781b      	ldrb	r3, [r3, #0]
90017ef6:	2b01      	cmp	r3, #1
90017ef8:	d108      	bne.n	90017f0c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
90017efa:	4b06      	ldr	r3, [pc, #24]	; (90017f14 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
90017efc:	880c      	ldrh	r4, [r1, #0]
90017efe:	881b      	ldrh	r3, [r3, #0]
90017f00:	f9b0 2000 	ldrsh.w	r2, [r0]
90017f04:	3b01      	subs	r3, #1
90017f06:	1b1b      	subs	r3, r3, r4
90017f08:	8003      	strh	r3, [r0, #0]
90017f0a:	800a      	strh	r2, [r1, #0]
90017f0c:	bd10      	pop	{r4, pc}
90017f0e:	bf00      	nop
90017f10:	24026f84 	.word	0x24026f84
90017f14:	24026f80 	.word	0x24026f80

90017f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
90017f18:	4b0a      	ldr	r3, [pc, #40]	; (90017f44 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
90017f1a:	b510      	push	{r4, lr}
90017f1c:	781b      	ldrb	r3, [r3, #0]
90017f1e:	2b01      	cmp	r3, #1
90017f20:	d10e      	bne.n	90017f40 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
90017f22:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
90017f26:	8843      	ldrh	r3, [r0, #2]
90017f28:	f9b0 4000 	ldrsh.w	r4, [r0]
90017f2c:	18ca      	adds	r2, r1, r3
90017f2e:	4b06      	ldr	r3, [pc, #24]	; (90017f48 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
90017f30:	8044      	strh	r4, [r0, #2]
90017f32:	881b      	ldrh	r3, [r3, #0]
90017f34:	1a9b      	subs	r3, r3, r2
90017f36:	8003      	strh	r3, [r0, #0]
90017f38:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017f3c:	8081      	strh	r1, [r0, #4]
90017f3e:	80c3      	strh	r3, [r0, #6]
90017f40:	bd10      	pop	{r4, pc}
90017f42:	bf00      	nop
90017f44:	24026f84 	.word	0x24026f84
90017f48:	24026f80 	.word	0x24026f80

90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
90017f4c:	4b08      	ldr	r3, [pc, #32]	; (90017f70 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
90017f4e:	781b      	ldrb	r3, [r3, #0]
90017f50:	2b01      	cmp	r3, #1
90017f52:	d10c      	bne.n	90017f6e <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
90017f54:	8803      	ldrh	r3, [r0, #0]
90017f56:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
90017f5a:	8842      	ldrh	r2, [r0, #2]
90017f5c:	8002      	strh	r2, [r0, #0]
90017f5e:	185a      	adds	r2, r3, r1
90017f60:	4b04      	ldr	r3, [pc, #16]	; (90017f74 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
90017f62:	881b      	ldrh	r3, [r3, #0]
90017f64:	1a9b      	subs	r3, r3, r2
90017f66:	8043      	strh	r3, [r0, #2]
90017f68:	88c3      	ldrh	r3, [r0, #6]
90017f6a:	80c1      	strh	r1, [r0, #6]
90017f6c:	8083      	strh	r3, [r0, #4]
90017f6e:	4770      	bx	lr
90017f70:	24026f84 	.word	0x24026f84
90017f74:	24026f80 	.word	0x24026f80

90017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
90017f78:	4b07      	ldr	r3, [pc, #28]	; (90017f98 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
90017f7a:	b510      	push	{r4, lr}
90017f7c:	781b      	ldrb	r3, [r3, #0]
90017f7e:	2b01      	cmp	r3, #1
90017f80:	d108      	bne.n	90017f94 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
90017f82:	f9b1 3000 	ldrsh.w	r3, [r1]
90017f86:	f9b0 4000 	ldrsh.w	r4, [r0]
90017f8a:	8003      	strh	r3, [r0, #0]
90017f8c:	8893      	ldrh	r3, [r2, #4]
90017f8e:	3b01      	subs	r3, #1
90017f90:	1b1b      	subs	r3, r3, r4
90017f92:	800b      	strh	r3, [r1, #0]
90017f94:	bd10      	pop	{r4, pc}
90017f96:	bf00      	nop
90017f98:	24026f84 	.word	0x24026f84

90017f9c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
90017f9c:	4b0b      	ldr	r3, [pc, #44]	; (90017fcc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
90017f9e:	781b      	ldrb	r3, [r3, #0]
90017fa0:	2b01      	cmp	r3, #1
90017fa2:	d111      	bne.n	90017fc8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
90017fa4:	680b      	ldr	r3, [r1, #0]
90017fa6:	ed90 7a00 	vldr	s14, [r0]
90017faa:	6003      	str	r3, [r0, #0]
90017fac:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
90017fb0:	eddf 6a07 	vldr	s13, [pc, #28]	; 90017fd0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
90017fb4:	ee07 3a90 	vmov	s15, r3
90017fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
90017fbc:	ee77 7ae6 	vsub.f32	s15, s15, s13
90017fc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
90017fc4:	edc1 7a00 	vstr	s15, [r1]
90017fc8:	4770      	bx	lr
90017fca:	bf00      	nop
90017fcc:	24026f84 	.word	0x24026f84
90017fd0:	38d1b717 	.word	0x38d1b717

90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
90017fd4:	4b0a      	ldr	r3, [pc, #40]	; (90018000 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
90017fd6:	460a      	mov	r2, r1
90017fd8:	b510      	push	{r4, lr}
90017fda:	781b      	ldrb	r3, [r3, #0]
90017fdc:	2b01      	cmp	r3, #1
90017fde:	d10d      	bne.n	90017ffc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
90017fe0:	8881      	ldrh	r1, [r0, #4]
90017fe2:	8803      	ldrh	r3, [r0, #0]
90017fe4:	440b      	add	r3, r1
90017fe6:	4601      	mov	r1, r0
90017fe8:	3b01      	subs	r3, #1
90017fea:	f821 3b02 	strh.w	r3, [r1], #2
90017fee:	f7ff ffc3 	bl	90017f78 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
90017ff2:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
90017ff6:	88c2      	ldrh	r2, [r0, #6]
90017ff8:	80c3      	strh	r3, [r0, #6]
90017ffa:	8082      	strh	r2, [r0, #4]
90017ffc:	bd10      	pop	{r4, pc}
90017ffe:	bf00      	nop
90018000:	24026f84 	.word	0x24026f84

90018004 <_ZN8touchgfx11Application19changeToStartScreenEv>:
90018004:	4770      	bx	lr
	...

90018008 <_ZN8touchgfx11Application13requestRedrawEv>:
90018008:	4b06      	ldr	r3, [pc, #24]	; (90018024 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
9001800a:	2100      	movs	r1, #0
9001800c:	f9b3 2000 	ldrsh.w	r2, [r3]
90018010:	4b05      	ldr	r3, [pc, #20]	; (90018028 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
90018012:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
90018016:	f9b3 3000 	ldrsh.w	r3, [r3]
9001801a:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
9001801e:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
90018022:	4770      	bx	lr
90018024:	24026f80 	.word	0x24026f80
90018028:	24026f82 	.word	0x24026f82

9001802c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
9001802c:	4b03      	ldr	r3, [pc, #12]	; (9001803c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
9001802e:	6818      	ldr	r0, [r3, #0]
90018030:	b110      	cbz	r0, 90018038 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
90018032:	6803      	ldr	r3, [r0, #0]
90018034:	699b      	ldr	r3, [r3, #24]
90018036:	4718      	bx	r3
90018038:	4770      	bx	lr
9001803a:	bf00      	nop
9001803c:	24026fc8 	.word	0x24026fc8

90018040 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
90018040:	4770      	bx	lr
	...

90018044 <_ZN8touchgfx11Application4drawEv>:
90018044:	4b09      	ldr	r3, [pc, #36]	; (9001806c <_ZN8touchgfx11Application4drawEv+0x28>)
90018046:	b507      	push	{r0, r1, r2, lr}
90018048:	f9b3 2000 	ldrsh.w	r2, [r3]
9001804c:	2100      	movs	r1, #0
9001804e:	4b08      	ldr	r3, [pc, #32]	; (90018070 <_ZN8touchgfx11Application4drawEv+0x2c>)
90018050:	9100      	str	r1, [sp, #0]
90018052:	4669      	mov	r1, sp
90018054:	f9b3 3000 	ldrsh.w	r3, [r3]
90018058:	f8ad 2004 	strh.w	r2, [sp, #4]
9001805c:	f8ad 3006 	strh.w	r3, [sp, #6]
90018060:	6803      	ldr	r3, [r0, #0]
90018062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018064:	4798      	blx	r3
90018066:	b003      	add	sp, #12
90018068:	f85d fb04 	ldr.w	pc, [sp], #4
9001806c:	24026f80 	.word	0x24026f80
90018070:	24026f82 	.word	0x24026f82

90018074 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
90018074:	4b03      	ldr	r3, [pc, #12]	; (90018084 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
90018076:	6818      	ldr	r0, [r3, #0]
90018078:	b110      	cbz	r0, 90018080 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
9001807a:	6803      	ldr	r3, [r0, #0]
9001807c:	69db      	ldr	r3, [r3, #28]
9001807e:	4718      	bx	r3
90018080:	4770      	bx	lr
90018082:	bf00      	nop
90018084:	24026fc8 	.word	0x24026fc8

90018088 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
90018088:	4b03      	ldr	r3, [pc, #12]	; (90018098 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
9001808a:	6818      	ldr	r0, [r3, #0]
9001808c:	b110      	cbz	r0, 90018094 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
9001808e:	6803      	ldr	r3, [r0, #0]
90018090:	6a1b      	ldr	r3, [r3, #32]
90018092:	4718      	bx	r3
90018094:	4770      	bx	lr
90018096:	bf00      	nop
90018098:	24026fc8 	.word	0x24026fc8

9001809c <_ZN8touchgfx11Application16clearCachedAreasEv>:
9001809c:	2300      	movs	r3, #0
9001809e:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
900180a2:	4770      	bx	lr

900180a4 <_ZN8touchgfx11Application14handleKeyEventEh>:
900180a4:	4b03      	ldr	r3, [pc, #12]	; (900180b4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
900180a6:	6818      	ldr	r0, [r3, #0]
900180a8:	b110      	cbz	r0, 900180b0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
900180aa:	6803      	ldr	r3, [r0, #0]
900180ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900180ae:	4718      	bx	r3
900180b0:	4770      	bx	lr
900180b2:	bf00      	nop
900180b4:	24026fc8 	.word	0x24026fc8

900180b8 <_ZN8touchgfx11ApplicationD1Ev>:
900180b8:	4770      	bx	lr

900180ba <_ZN8touchgfx11ApplicationD0Ev>:
900180ba:	b510      	push	{r4, lr}
900180bc:	4604      	mov	r4, r0
900180be:	f44f 719e 	mov.w	r1, #316	; 0x13c
900180c2:	f00e ff16 	bl	90026ef2 <_ZdlPvj>
900180c6:	4620      	mov	r0, r4
900180c8:	bd10      	pop	{r4, pc}

900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>:
900180ca:	b510      	push	{r4, lr}
900180cc:	f9b1 4000 	ldrsh.w	r4, [r1]
900180d0:	888a      	ldrh	r2, [r1, #4]
900180d2:	f9b0 3000 	ldrsh.w	r3, [r0]
900180d6:	4422      	add	r2, r4
900180d8:	b212      	sxth	r2, r2
900180da:	4293      	cmp	r3, r2
900180dc:	da15      	bge.n	9001810a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
900180de:	8882      	ldrh	r2, [r0, #4]
900180e0:	4413      	add	r3, r2
900180e2:	b21b      	sxth	r3, r3
900180e4:	429c      	cmp	r4, r3
900180e6:	da10      	bge.n	9001810a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
900180e8:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
900180ec:	88c9      	ldrh	r1, [r1, #6]
900180ee:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
900180f2:	4419      	add	r1, r3
900180f4:	b209      	sxth	r1, r1
900180f6:	428a      	cmp	r2, r1
900180f8:	da07      	bge.n	9001810a <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
900180fa:	88c0      	ldrh	r0, [r0, #6]
900180fc:	4410      	add	r0, r2
900180fe:	b200      	sxth	r0, r0
90018100:	4283      	cmp	r3, r0
90018102:	bfac      	ite	ge
90018104:	2000      	movge	r0, #0
90018106:	2001      	movlt	r0, #1
90018108:	bd10      	pop	{r4, pc}
9001810a:	2000      	movs	r0, #0
9001810c:	e7fc      	b.n	90018108 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

9001810e <_ZN8touchgfx4Rect10restrictToEss>:
9001810e:	f9b0 3000 	ldrsh.w	r3, [r0]
90018112:	2b00      	cmp	r3, #0
90018114:	b510      	push	{r4, lr}
90018116:	da04      	bge.n	90018122 <_ZN8touchgfx4Rect10restrictToEss+0x14>
90018118:	8884      	ldrh	r4, [r0, #4]
9001811a:	4423      	add	r3, r4
9001811c:	8083      	strh	r3, [r0, #4]
9001811e:	2300      	movs	r3, #0
90018120:	8003      	strh	r3, [r0, #0]
90018122:	f9b0 4000 	ldrsh.w	r4, [r0]
90018126:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
9001812a:	1b09      	subs	r1, r1, r4
9001812c:	428b      	cmp	r3, r1
9001812e:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
90018132:	bfc8      	it	gt
90018134:	8081      	strhgt	r1, [r0, #4]
90018136:	2b00      	cmp	r3, #0
90018138:	da04      	bge.n	90018144 <_ZN8touchgfx4Rect10restrictToEss+0x36>
9001813a:	88c1      	ldrh	r1, [r0, #6]
9001813c:	440b      	add	r3, r1
9001813e:	80c3      	strh	r3, [r0, #6]
90018140:	2300      	movs	r3, #0
90018142:	8043      	strh	r3, [r0, #2]
90018144:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
90018148:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
9001814c:	1a52      	subs	r2, r2, r1
9001814e:	4293      	cmp	r3, r2
90018150:	bfc8      	it	gt
90018152:	80c2      	strhgt	r2, [r0, #6]
90018154:	bd10      	pop	{r4, pc}
	...

90018158 <_ZN8touchgfx11Application4drawERNS_4RectE>:
90018158:	4b10      	ldr	r3, [pc, #64]	; (9001819c <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
9001815a:	b510      	push	{r4, lr}
9001815c:	460c      	mov	r4, r1
9001815e:	f9b3 2000 	ldrsh.w	r2, [r3]
90018162:	4b0f      	ldr	r3, [pc, #60]	; (900181a0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
90018164:	4620      	mov	r0, r4
90018166:	f9b3 1000 	ldrsh.w	r1, [r3]
9001816a:	f7ff ffd0 	bl	9001810e <_ZN8touchgfx4Rect10restrictToEss>
9001816e:	4b0d      	ldr	r3, [pc, #52]	; (900181a4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
90018170:	6818      	ldr	r0, [r3, #0]
90018172:	b190      	cbz	r0, 9001819a <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
90018174:	6803      	ldr	r3, [r0, #0]
90018176:	4621      	mov	r1, r4
90018178:	689b      	ldr	r3, [r3, #8]
9001817a:	4798      	blx	r3
9001817c:	4b0a      	ldr	r3, [pc, #40]	; (900181a8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
9001817e:	6818      	ldr	r0, [r3, #0]
90018180:	b118      	cbz	r0, 9001818a <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
90018182:	6803      	ldr	r3, [r0, #0]
90018184:	4621      	mov	r1, r4
90018186:	689b      	ldr	r3, [r3, #8]
90018188:	4798      	blx	r3
9001818a:	4b08      	ldr	r3, [pc, #32]	; (900181ac <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
9001818c:	4621      	mov	r1, r4
9001818e:	6818      	ldr	r0, [r3, #0]
90018190:	6803      	ldr	r3, [r0, #0]
90018192:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90018196:	69db      	ldr	r3, [r3, #28]
90018198:	4718      	bx	r3
9001819a:	bd10      	pop	{r4, pc}
9001819c:	24026f82 	.word	0x24026f82
900181a0:	24026f80 	.word	0x24026f80
900181a4:	24026fc8 	.word	0x24026fc8
900181a8:	24026fc4 	.word	0x24026fc4
900181ac:	24026f8c 	.word	0x24026f8c

900181b0 <_ZNK8touchgfx4Rect8includesERKS0_>:
900181b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900181b2:	4606      	mov	r6, r0
900181b4:	4608      	mov	r0, r1
900181b6:	460f      	mov	r7, r1
900181b8:	f7fc fc45 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
900181bc:	b9e8      	cbnz	r0, 900181fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900181be:	f9b7 5000 	ldrsh.w	r5, [r7]
900181c2:	f9b6 4000 	ldrsh.w	r4, [r6]
900181c6:	42a5      	cmp	r5, r4
900181c8:	db17      	blt.n	900181fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900181ca:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
900181ce:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
900181d2:	429a      	cmp	r2, r3
900181d4:	db11      	blt.n	900181fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900181d6:	88b9      	ldrh	r1, [r7, #4]
900181d8:	440d      	add	r5, r1
900181da:	88b1      	ldrh	r1, [r6, #4]
900181dc:	440c      	add	r4, r1
900181de:	b22d      	sxth	r5, r5
900181e0:	b224      	sxth	r4, r4
900181e2:	42a5      	cmp	r5, r4
900181e4:	dc09      	bgt.n	900181fa <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
900181e6:	88f8      	ldrh	r0, [r7, #6]
900181e8:	4410      	add	r0, r2
900181ea:	88f2      	ldrh	r2, [r6, #6]
900181ec:	4413      	add	r3, r2
900181ee:	b200      	sxth	r0, r0
900181f0:	b21b      	sxth	r3, r3
900181f2:	4298      	cmp	r0, r3
900181f4:	bfcc      	ite	gt
900181f6:	2000      	movgt	r0, #0
900181f8:	2001      	movle	r0, #1
900181fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

900181fc <_ZN8touchgfx4Rect11expandToFitERKS0_>:
900181fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900181fe:	4604      	mov	r4, r0
90018200:	4608      	mov	r0, r1
90018202:	460d      	mov	r5, r1
90018204:	f7fc fc1f 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018208:	b978      	cbnz	r0, 9001822a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
9001820a:	4620      	mov	r0, r4
9001820c:	f7fc fc1b 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018210:	f9b5 6000 	ldrsh.w	r6, [r5]
90018214:	b150      	cbz	r0, 9001822c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
90018216:	8026      	strh	r6, [r4, #0]
90018218:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001821c:	8063      	strh	r3, [r4, #2]
9001821e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
90018222:	80a3      	strh	r3, [r4, #4]
90018224:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
90018228:	80e3      	strh	r3, [r4, #6]
9001822a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001822c:	f9b4 1000 	ldrsh.w	r1, [r4]
90018230:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
90018234:	42b1      	cmp	r1, r6
90018236:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
9001823a:	f8b5 c004 	ldrh.w	ip, [r5, #4]
9001823e:	460f      	mov	r7, r1
90018240:	88ed      	ldrh	r5, [r5, #6]
90018242:	bfa8      	it	ge
90018244:	4637      	movge	r7, r6
90018246:	4293      	cmp	r3, r2
90018248:	4618      	mov	r0, r3
9001824a:	4466      	add	r6, ip
9001824c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90018250:	bfa8      	it	ge
90018252:	4610      	movge	r0, r2
90018254:	442a      	add	r2, r5
90018256:	88e5      	ldrh	r5, [r4, #6]
90018258:	4461      	add	r1, ip
9001825a:	b236      	sxth	r6, r6
9001825c:	8027      	strh	r7, [r4, #0]
9001825e:	442b      	add	r3, r5
90018260:	b209      	sxth	r1, r1
90018262:	b212      	sxth	r2, r2
90018264:	8060      	strh	r0, [r4, #2]
90018266:	b21b      	sxth	r3, r3
90018268:	428e      	cmp	r6, r1
9001826a:	bfac      	ite	ge
9001826c:	ebc7 0106 	rsbge	r1, r7, r6
90018270:	ebc7 0101 	rsblt	r1, r7, r1
90018274:	429a      	cmp	r2, r3
90018276:	bfac      	ite	ge
90018278:	ebc0 0202 	rsbge	r2, r0, r2
9001827c:	ebc0 0203 	rsblt	r2, r0, r3
90018280:	80a1      	strh	r1, [r4, #4]
90018282:	80e2      	strh	r2, [r4, #6]
90018284:	e7d1      	b.n	9001822a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

90018288 <_ZN8touchgfx11Application11getInstanceEv>:
90018288:	4b01      	ldr	r3, [pc, #4]	; (90018290 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
9001828a:	6818      	ldr	r0, [r3, #0]
9001828c:	4770      	bx	lr
9001828e:	bf00      	nop
90018290:	24026fd8 	.word	0x24026fd8

90018294 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
90018294:	2300      	movs	r3, #0
90018296:	b510      	push	{r4, lr}
90018298:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
9001829c:	4604      	mov	r4, r0
9001829e:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
900182a2:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
900182a6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900182aa:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
900182ae:	429a      	cmp	r2, r3
900182b0:	d90e      	bls.n	900182d0 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
900182b2:	18e2      	adds	r2, r4, r3
900182b4:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
900182b8:	b122      	cbz	r2, 900182c4 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
900182ba:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
900182be:	6803      	ldr	r3, [r0, #0]
900182c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900182c2:	4798      	blx	r3
900182c4:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
900182c8:	3301      	adds	r3, #1
900182ca:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
900182ce:	e7ea      	b.n	900182a6 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
900182d0:	bd10      	pop	{r4, pc}

900182d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
900182d2:	2300      	movs	r3, #0
900182d4:	f100 0284 	add.w	r2, r0, #132	; 0x84
900182d8:	30a4      	adds	r0, #164	; 0xa4
900182da:	f820 3c24 	strh.w	r3, [r0, #-36]
900182de:	f802 3b01 	strb.w	r3, [r2], #1
900182e2:	4282      	cmp	r2, r0
900182e4:	d1fb      	bne.n	900182de <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
900182e6:	4770      	bx	lr

900182e8 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
900182e8:	b570      	push	{r4, r5, r6, lr}
900182ea:	4c0b      	ldr	r4, [pc, #44]	; (90018318 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
900182ec:	4605      	mov	r5, r0
900182ee:	460e      	mov	r6, r1
900182f0:	6820      	ldr	r0, [r4, #0]
900182f2:	b110      	cbz	r0, 900182fa <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
900182f4:	6803      	ldr	r3, [r0, #0]
900182f6:	695b      	ldr	r3, [r3, #20]
900182f8:	4798      	blx	r3
900182fa:	1d28      	adds	r0, r5, #4
900182fc:	f7ff ffe9 	bl	900182d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90018300:	6026      	str	r6, [r4, #0]
90018302:	6833      	ldr	r3, [r6, #0]
90018304:	4630      	mov	r0, r6
90018306:	68db      	ldr	r3, [r3, #12]
90018308:	4798      	blx	r3
9001830a:	682b      	ldr	r3, [r5, #0]
9001830c:	4628      	mov	r0, r5
9001830e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90018310:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90018314:	4718      	bx	r3
90018316:	bf00      	nop
90018318:	24026fc8 	.word	0x24026fc8

9001831c <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
9001831c:	2300      	movs	r3, #0
9001831e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
90018322:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
90018326:	461a      	mov	r2, r3
90018328:	b5f0      	push	{r4, r5, r6, r7, lr}
9001832a:	461c      	mov	r4, r3
9001832c:	461d      	mov	r5, r3
9001832e:	459c      	cmp	ip, r3
90018330:	dd1a      	ble.n	90018368 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
90018332:	18c6      	adds	r6, r0, r3
90018334:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
90018338:	b16e      	cbz	r6, 90018356 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
9001833a:	429a      	cmp	r2, r3
9001833c:	d008      	beq.n	90018350 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
9001833e:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
90018342:	fa1f fe82 	uxth.w	lr, r2
90018346:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
9001834a:	1887      	adds	r7, r0, r2
9001834c:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
90018350:	3201      	adds	r2, #1
90018352:	3301      	adds	r3, #1
90018354:	e7eb      	b.n	9001832e <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
90018356:	4299      	cmp	r1, r3
90018358:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
9001835c:	bfa8      	it	ge
9001835e:	3501      	addge	r5, #1
90018360:	429e      	cmp	r6, r3
90018362:	bfc8      	it	gt
90018364:	3401      	addgt	r4, #1
90018366:	e7f4      	b.n	90018352 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
90018368:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
9001836c:	1b49      	subs	r1, r1, r5
9001836e:	1b1b      	subs	r3, r3, r4
90018370:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
90018374:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
90018378:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
9001837c:	4293      	cmp	r3, r2
9001837e:	dd03      	ble.n	90018388 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
90018380:	3b01      	subs	r3, #1
90018382:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
90018386:	e7f7      	b.n	90018378 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
90018388:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

9001838c <_ZN8touchgfx11Application15handleTickEventEv>:
9001838c:	b570      	push	{r4, r5, r6, lr}
9001838e:	4d16      	ldr	r5, [pc, #88]	; (900183e8 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
90018390:	4604      	mov	r4, r0
90018392:	6828      	ldr	r0, [r5, #0]
90018394:	b140      	cbz	r0, 900183a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
90018396:	7a03      	ldrb	r3, [r0, #8]
90018398:	b933      	cbnz	r3, 900183a8 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
9001839a:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
9001839e:	6803      	ldr	r3, [r0, #0]
900183a0:	689b      	ldr	r3, [r3, #8]
900183a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900183a6:	4718      	bx	r3
900183a8:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
900183ac:	4e0f      	ldr	r6, [pc, #60]	; (900183ec <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
900183ae:	b973      	cbnz	r3, 900183ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900183b0:	b168      	cbz	r0, 900183ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900183b2:	7a03      	ldrb	r3, [r0, #8]
900183b4:	b15b      	cbz	r3, 900183ce <_ZN8touchgfx11Application15handleTickEventEv+0x42>
900183b6:	6830      	ldr	r0, [r6, #0]
900183b8:	b110      	cbz	r0, 900183c0 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
900183ba:	6803      	ldr	r3, [r0, #0]
900183bc:	691b      	ldr	r3, [r3, #16]
900183be:	4798      	blx	r3
900183c0:	6828      	ldr	r0, [r5, #0]
900183c2:	6803      	ldr	r3, [r0, #0]
900183c4:	68db      	ldr	r3, [r3, #12]
900183c6:	4798      	blx	r3
900183c8:	2301      	movs	r3, #1
900183ca:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
900183ce:	3404      	adds	r4, #4
900183d0:	4620      	mov	r0, r4
900183d2:	f7ff ff5f 	bl	90018294 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
900183d6:	4620      	mov	r0, r4
900183d8:	f7ff ffa0 	bl	9001831c <_ZN8touchgfx11Application12TimerWidgets7compactEv>
900183dc:	6830      	ldr	r0, [r6, #0]
900183de:	b110      	cbz	r0, 900183e6 <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
900183e0:	6803      	ldr	r3, [r0, #0]
900183e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
900183e4:	e7dd      	b.n	900183a2 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
900183e6:	bd70      	pop	{r4, r5, r6, pc}
900183e8:	24026fcc 	.word	0x24026fcc
900183ec:	24026fc8 	.word	0x24026fc8

900183f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
900183f0:	4603      	mov	r3, r0
900183f2:	f100 0140 	add.w	r1, r0, #64	; 0x40
900183f6:	2200      	movs	r2, #0
900183f8:	801a      	strh	r2, [r3, #0]
900183fa:	3308      	adds	r3, #8
900183fc:	f823 2c06 	strh.w	r2, [r3, #-6]
90018400:	f823 2c04 	strh.w	r2, [r3, #-4]
90018404:	f823 2c02 	strh.w	r2, [r3, #-2]
90018408:	428b      	cmp	r3, r1
9001840a:	d1f5      	bne.n	900183f8 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
9001840c:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
90018410:	4770      	bx	lr
	...

90018414 <_ZN8touchgfx11ApplicationC1Ev>:
90018414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90018416:	4b1d      	ldr	r3, [pc, #116]	; (9001848c <_ZN8touchgfx11ApplicationC1Ev+0x78>)
90018418:	4606      	mov	r6, r0
9001841a:	4604      	mov	r4, r0
9001841c:	2500      	movs	r5, #0
9001841e:	f846 3b04 	str.w	r3, [r6], #4
90018422:	22a8      	movs	r2, #168	; 0xa8
90018424:	2100      	movs	r1, #0
90018426:	4630      	mov	r0, r6
90018428:	f00e fe90 	bl	9002714c <memset>
9001842c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
90018430:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90018434:	4f16      	ldr	r7, [pc, #88]	; (90018490 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
90018436:	f7ff ffdb 	bl	900183f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
9001843a:	f104 00ee 	add.w	r0, r4, #238	; 0xee
9001843e:	f7ff ffd7 	bl	900183f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018442:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
90018446:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
9001844a:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
9001844e:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
90018452:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
90018456:	490f      	ldr	r1, [pc, #60]	; (90018494 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
90018458:	480f      	ldr	r0, [pc, #60]	; (90018498 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
9001845a:	f00e fc41 	bl	90026ce0 <CRC_Lock>
9001845e:	4b0f      	ldr	r3, [pc, #60]	; (9001849c <_ZN8touchgfx11ApplicationC1Ev+0x88>)
90018460:	b158      	cbz	r0, 9001847a <_ZN8touchgfx11ApplicationC1Ev+0x66>
90018462:	801d      	strh	r5, [r3, #0]
90018464:	2300      	movs	r3, #0
90018466:	4a0e      	ldr	r2, [pc, #56]	; (900184a0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
90018468:	4630      	mov	r0, r6
9001846a:	6013      	str	r3, [r2, #0]
9001846c:	4a0d      	ldr	r2, [pc, #52]	; (900184a4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
9001846e:	603b      	str	r3, [r7, #0]
90018470:	6013      	str	r3, [r2, #0]
90018472:	f7ff ff2e 	bl	900182d2 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
90018476:	4620      	mov	r0, r4
90018478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
9001847a:	f44f 6280 	mov.w	r2, #1024	; 0x400
9001847e:	2002      	movs	r0, #2
90018480:	801a      	strh	r2, [r3, #0]
90018482:	6038      	str	r0, [r7, #0]
90018484:	f001 fa48 	bl	90019918 <_ZN8touchgfx6Screen4drawEv>
90018488:	e7ec      	b.n	90018464 <_ZN8touchgfx11ApplicationC1Ev+0x50>
9001848a:	bf00      	nop
9001848c:	9002b4e4 	.word	0x9002b4e4
90018490:	24026fc8 	.word	0x24026fc8
90018494:	b5e8b5cd 	.word	0xb5e8b5cd
90018498:	f407a5c2 	.word	0xf407a5c2
9001849c:	24000068 	.word	0x24000068
900184a0:	24026fd8 	.word	0x24026fd8
900184a4:	24026fcc 	.word	0x24026fcc

900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
900184a8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
900184ac:	3b01      	subs	r3, #1
900184ae:	b29b      	uxth	r3, r3
900184b0:	428b      	cmp	r3, r1
900184b2:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
900184b6:	b510      	push	{r4, lr}
900184b8:	d908      	bls.n	900184cc <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
900184ba:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
900184be:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
900184c2:	681a      	ldr	r2, [r3, #0]
900184c4:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
900184c8:	685a      	ldr	r2, [r3, #4]
900184ca:	6062      	str	r2, [r4, #4]
900184cc:	bd10      	pop	{r4, pc}
	...

900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
900184d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900184d4:	b08f      	sub	sp, #60	; 0x3c
900184d6:	4b8f      	ldr	r3, [pc, #572]	; (90018714 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
900184d8:	4683      	mov	fp, r0
900184da:	ac0a      	add	r4, sp, #40	; 0x28
900184dc:	e884 0006 	stmia.w	r4, {r1, r2}
900184e0:	f9b3 2000 	ldrsh.w	r2, [r3]
900184e4:	4620      	mov	r0, r4
900184e6:	4b8c      	ldr	r3, [pc, #560]	; (90018718 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
900184e8:	f9b3 1000 	ldrsh.w	r1, [r3]
900184ec:	f7ff fe0f 	bl	9001810e <_ZN8touchgfx4Rect10restrictToEss>
900184f0:	4620      	mov	r0, r4
900184f2:	f7fc faa8 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
900184f6:	2800      	cmp	r0, #0
900184f8:	d16a      	bne.n	900185d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900184fa:	9403      	str	r4, [sp, #12]
900184fc:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
90018500:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90018504:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
90018508:	9301      	str	r3, [sp, #4]
9001850a:	35a4      	adds	r5, #164	; 0xa4
9001850c:	b15c      	cbz	r4, 90018526 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
9001850e:	4629      	mov	r1, r5
90018510:	9803      	ldr	r0, [sp, #12]
90018512:	f7ff fe4d 	bl	900181b0 <_ZNK8touchgfx4Rect8includesERKS0_>
90018516:	3c01      	subs	r4, #1
90018518:	b118      	cbz	r0, 90018522 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
9001851a:	b2a1      	uxth	r1, r4
9001851c:	9801      	ldr	r0, [sp, #4]
9001851e:	f7ff ffc3 	bl	900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018522:	3d08      	subs	r5, #8
90018524:	e7f2      	b.n	9001850c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
90018526:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
9001852a:	f108 33ff 	add.w	r3, r8, #4294967295
9001852e:	f8cd 8010 	str.w	r8, [sp, #16]
90018532:	9302      	str	r3, [sp, #8]
90018534:	ea4f 03c8 	mov.w	r3, r8, lsl #3
90018538:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
9001853c:	9306      	str	r3, [sp, #24]
9001853e:	445c      	add	r4, fp
90018540:	2500      	movs	r5, #0
90018542:	4626      	mov	r6, r4
90018544:	f8cd 8014 	str.w	r8, [sp, #20]
90018548:	462f      	mov	r7, r5
9001854a:	9b05      	ldr	r3, [sp, #20]
9001854c:	2b00      	cmp	r3, #0
9001854e:	d073      	beq.n	90018638 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
90018550:	9903      	ldr	r1, [sp, #12]
90018552:	4630      	mov	r0, r6
90018554:	f7ff fdb9 	bl	900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018558:	b350      	cbz	r0, 900185b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
9001855a:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
9001855e:	f9b6 c000 	ldrsh.w	ip, [r6]
90018562:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
90018566:	45e6      	cmp	lr, ip
90018568:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
9001856c:	db33      	blt.n	900185d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
9001856e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90018572:	88b3      	ldrh	r3, [r6, #4]
90018574:	4472      	add	r2, lr
90018576:	4463      	add	r3, ip
90018578:	b212      	sxth	r2, r2
9001857a:	b21b      	sxth	r3, r3
9001857c:	429a      	cmp	r2, r3
9001857e:	dc2a      	bgt.n	900185d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
90018580:	fa1f f289 	uxth.w	r2, r9
90018584:	88f3      	ldrh	r3, [r6, #6]
90018586:	45ca      	cmp	sl, r9
90018588:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
9001858c:	4413      	add	r3, r2
9001858e:	fa1f fc8a 	uxth.w	ip, sl
90018592:	b29b      	uxth	r3, r3
90018594:	fa0f fe83 	sxth.w	lr, r3
90018598:	db0f      	blt.n	900185ba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
9001859a:	eba3 030c 	sub.w	r3, r3, ip
9001859e:	1ac9      	subs	r1, r1, r3
900185a0:	b209      	sxth	r1, r1
900185a2:	2900      	cmp	r1, #0
900185a4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900185a8:	dd12      	ble.n	900185d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
900185aa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
900185ae:	4605      	mov	r5, r0
900185b0:	9b05      	ldr	r3, [sp, #20]
900185b2:	3e08      	subs	r6, #8
900185b4:	3b01      	subs	r3, #1
900185b6:	9305      	str	r3, [sp, #20]
900185b8:	e7c7      	b.n	9001854a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
900185ba:	4461      	add	r1, ip
900185bc:	b209      	sxth	r1, r1
900185be:	4571      	cmp	r1, lr
900185c0:	dc38      	bgt.n	90018634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900185c2:	eba2 020c 	sub.w	r2, r2, ip
900185c6:	b212      	sxth	r2, r2
900185c8:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
900185cc:	2a00      	cmp	r2, #0
900185ce:	dcee      	bgt.n	900185ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
900185d0:	b00f      	add	sp, #60	; 0x3c
900185d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900185d6:	45ca      	cmp	sl, r9
900185d8:	db2c      	blt.n	90018634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900185da:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
900185de:	449a      	add	sl, r3
900185e0:	88f3      	ldrh	r3, [r6, #6]
900185e2:	4499      	add	r9, r3
900185e4:	fa0f fa8a 	sxth.w	sl, sl
900185e8:	fa0f f989 	sxth.w	r9, r9
900185ec:	45ca      	cmp	sl, r9
900185ee:	dc21      	bgt.n	90018634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
900185f0:	fa1f f28c 	uxth.w	r2, ip
900185f4:	88b3      	ldrh	r3, [r6, #4]
900185f6:	45e6      	cmp	lr, ip
900185f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
900185fc:	4413      	add	r3, r2
900185fe:	fa1f f98e 	uxth.w	r9, lr
90018602:	b29b      	uxth	r3, r3
90018604:	fa0f fa83 	sxth.w	sl, r3
90018608:	db0a      	blt.n	90018620 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
9001860a:	eba3 0309 	sub.w	r3, r3, r9
9001860e:	1ac9      	subs	r1, r1, r3
90018610:	b209      	sxth	r1, r1
90018612:	2900      	cmp	r1, #0
90018614:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
90018618:	ddda      	ble.n	900185d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
9001861a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
9001861e:	e7c6      	b.n	900185ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
90018620:	4449      	add	r1, r9
90018622:	b209      	sxth	r1, r1
90018624:	4551      	cmp	r1, sl
90018626:	dc05      	bgt.n	90018634 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
90018628:	eba2 0209 	sub.w	r2, r2, r9
9001862c:	b212      	sxth	r2, r2
9001862e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
90018632:	e7cb      	b.n	900185cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
90018634:	4607      	mov	r7, r0
90018636:	e7bb      	b.n	900185b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
90018638:	2d00      	cmp	r5, #0
9001863a:	d181      	bne.n	90018540 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
9001863c:	2f00      	cmp	r7, #0
9001863e:	f000 81dd 	beq.w	900189fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90018642:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
90018646:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
9001864a:	b2b3      	uxth	r3, r6
9001864c:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
90018650:	b2b9      	uxth	r1, r7
90018652:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
90018656:	441a      	add	r2, r3
90018658:	448a      	add	sl, r1
9001865a:	9105      	str	r1, [sp, #20]
9001865c:	b292      	uxth	r2, r2
9001865e:	fa1f fa8a 	uxth.w	sl, sl
90018662:	fa0f f882 	sxth.w	r8, r2
90018666:	fa0f f98a 	sxth.w	r9, sl
9001866a:	e9cd 2307 	strd	r2, r3, [sp, #28]
9001866e:	9b04      	ldr	r3, [sp, #16]
90018670:	2b00      	cmp	r3, #0
90018672:	d053      	beq.n	9001871c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
90018674:	9903      	ldr	r1, [sp, #12]
90018676:	4620      	mov	r0, r4
90018678:	f7ff fd27 	bl	900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>
9001867c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
90018680:	b1c0      	cbz	r0, 900186b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018682:	f9b4 e000 	ldrsh.w	lr, [r4]
90018686:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
9001868a:	4576      	cmp	r6, lr
9001868c:	dc23      	bgt.n	900186d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001868e:	f8b4 c004 	ldrh.w	ip, [r4, #4]
90018692:	44f4      	add	ip, lr
90018694:	fa0f fc8c 	sxth.w	ip, ip
90018698:	45e0      	cmp	r8, ip
9001869a:	db1c      	blt.n	900186d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
9001869c:	428f      	cmp	r7, r1
9001869e:	fa1f fc81 	uxth.w	ip, r1
900186a2:	88e1      	ldrh	r1, [r4, #6]
900186a4:	dc0d      	bgt.n	900186c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
900186a6:	ebaa 0c0c 	sub.w	ip, sl, ip
900186aa:	f8a4 9002 	strh.w	r9, [r4, #2]
900186ae:	eba1 010c 	sub.w	r1, r1, ip
900186b2:	80e1      	strh	r1, [r4, #6]
900186b4:	4628      	mov	r0, r5
900186b6:	9904      	ldr	r1, [sp, #16]
900186b8:	3c08      	subs	r4, #8
900186ba:	4605      	mov	r5, r0
900186bc:	3901      	subs	r1, #1
900186be:	9104      	str	r1, [sp, #16]
900186c0:	e7d3      	b.n	9001866a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
900186c2:	4461      	add	r1, ip
900186c4:	b209      	sxth	r1, r1
900186c6:	4549      	cmp	r1, r9
900186c8:	dcf5      	bgt.n	900186b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900186ca:	9905      	ldr	r1, [sp, #20]
900186cc:	eba1 0c0c 	sub.w	ip, r1, ip
900186d0:	f8a4 c006 	strh.w	ip, [r4, #6]
900186d4:	e7ee      	b.n	900186b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
900186d6:	428f      	cmp	r7, r1
900186d8:	dced      	bgt.n	900186b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900186da:	f8b4 c006 	ldrh.w	ip, [r4, #6]
900186de:	4461      	add	r1, ip
900186e0:	b209      	sxth	r1, r1
900186e2:	4589      	cmp	r9, r1
900186e4:	dbe7      	blt.n	900186b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
900186e6:	4576      	cmp	r6, lr
900186e8:	fa1f fc8e 	uxth.w	ip, lr
900186ec:	88a1      	ldrh	r1, [r4, #4]
900186ee:	dc07      	bgt.n	90018700 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
900186f0:	eba2 0c0c 	sub.w	ip, r2, ip
900186f4:	f8a4 8000 	strh.w	r8, [r4]
900186f8:	eba1 010c 	sub.w	r1, r1, ip
900186fc:	80a1      	strh	r1, [r4, #4]
900186fe:	e7d9      	b.n	900186b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018700:	4461      	add	r1, ip
90018702:	b209      	sxth	r1, r1
90018704:	4588      	cmp	r8, r1
90018706:	dbd6      	blt.n	900186b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
90018708:	eba3 0c0c 	sub.w	ip, r3, ip
9001870c:	f8a4 c004 	strh.w	ip, [r4, #4]
90018710:	e7d0      	b.n	900186b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
90018712:	bf00      	nop
90018714:	24026f82 	.word	0x24026f82
90018718:	24026f80 	.word	0x24026f80
9001871c:	2d00      	cmp	r5, #0
9001871e:	f000 816d 	beq.w	900189fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90018722:	9b06      	ldr	r3, [sp, #24]
90018724:	445b      	add	r3, fp
90018726:	461c      	mov	r4, r3
90018728:	9b02      	ldr	r3, [sp, #8]
9001872a:	3301      	adds	r3, #1
9001872c:	f000 8166 	beq.w	900189fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
90018730:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
90018734:	9803      	ldr	r0, [sp, #12]
90018736:	4629      	mov	r1, r5
90018738:	f7ff fd3a 	bl	900181b0 <_ZNK8touchgfx4Rect8includesERKS0_>
9001873c:	b120      	cbz	r0, 90018748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
9001873e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
90018742:	9801      	ldr	r0, [sp, #4]
90018744:	f7ff feb0 	bl	900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018748:	9903      	ldr	r1, [sp, #12]
9001874a:	4628      	mov	r0, r5
9001874c:	f7ff fcbd 	bl	900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018750:	2800      	cmp	r0, #0
90018752:	f000 809c 	beq.w	9001888e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
90018756:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
9001875a:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
9001875e:	fa1f f189 	uxth.w	r1, r9
90018762:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90018766:	9309      	str	r3, [sp, #36]	; 0x24
90018768:	eb01 0c03 	add.w	ip, r1, r3
9001876c:	b283      	uxth	r3, r0
9001876e:	4548      	cmp	r0, r9
90018770:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
90018774:	fa1f fa8c 	uxth.w	sl, ip
90018778:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001877c:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
90018780:	eb03 050c 	add.w	r5, r3, ip
90018784:	b2ad      	uxth	r5, r5
90018786:	9505      	str	r5, [sp, #20]
90018788:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
9001878c:	9504      	str	r5, [sp, #16]
9001878e:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
90018792:	f340 8099 	ble.w	900188c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
90018796:	1a5b      	subs	r3, r3, r1
90018798:	4596      	cmp	lr, r2
9001879a:	fa0f f08a 	sxth.w	r0, sl
9001879e:	b29b      	uxth	r3, r3
900187a0:	b21e      	sxth	r6, r3
900187a2:	dd2e      	ble.n	90018802 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
900187a4:	9f02      	ldr	r7, [sp, #8]
900187a6:	fa1f fe8e 	uxth.w	lr, lr
900187aa:	b292      	uxth	r2, r2
900187ac:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
900187b0:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
900187b4:	9f04      	ldr	r7, [sp, #16]
900187b6:	ebae 0102 	sub.w	r1, lr, r2
900187ba:	44a6      	add	lr, r4
900187bc:	1a3f      	subs	r7, r7, r0
900187be:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
900187c2:	b289      	uxth	r1, r1
900187c4:	4402      	add	r2, r0
900187c6:	fa0f fe8e 	sxth.w	lr, lr
900187ca:	b20d      	sxth	r5, r1
900187cc:	b212      	sxth	r2, r2
900187ce:	436f      	muls	r7, r5
900187d0:	ebae 0202 	sub.w	r2, lr, r2
900187d4:	4372      	muls	r2, r6
900187d6:	4297      	cmp	r7, r2
900187d8:	db09      	blt.n	900187ee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
900187da:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
900187de:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
900187e2:	449c      	add	ip, r3
900187e4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
900187e8:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900187ec:	e686      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900187ee:	4421      	add	r1, r4
900187f0:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
900187f4:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
900187f8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900187fc:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018800:	e67c      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018802:	9f04      	ldr	r7, [sp, #16]
90018804:	42b8      	cmp	r0, r7
90018806:	da27      	bge.n	90018858 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
90018808:	9902      	ldr	r1, [sp, #8]
9001880a:	1a3f      	subs	r7, r7, r0
9001880c:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
90018810:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
90018814:	eb05 010e 	add.w	r1, r5, lr
90018818:	fa1f f881 	uxth.w	r8, r1
9001881c:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
90018820:	4411      	add	r1, r2
90018822:	fa0f f988 	sxth.w	r9, r8
90018826:	eba2 020e 	sub.w	r2, r2, lr
9001882a:	eba1 0108 	sub.w	r1, r1, r8
9001882e:	4372      	muls	r2, r6
90018830:	b289      	uxth	r1, r1
90018832:	fa0f f881 	sxth.w	r8, r1
90018836:	fb08 f707 	mul.w	r7, r8, r7
9001883a:	42ba      	cmp	r2, r7
9001883c:	dc06      	bgt.n	9001884c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
9001883e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
90018842:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
90018846:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
9001884a:	e7ca      	b.n	900187e2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
9001884c:	4429      	add	r1, r5
9001884e:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
90018852:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
90018856:	e651      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018858:	9805      	ldr	r0, [sp, #20]
9001885a:	2d06      	cmp	r5, #6
9001885c:	ebaa 0000 	sub.w	r0, sl, r0
90018860:	b280      	uxth	r0, r0
90018862:	fa0f fe80 	sxth.w	lr, r0
90018866:	d817      	bhi.n	90018898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
90018868:	9b04      	ldr	r3, [sp, #16]
9001886a:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
9001886e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
90018872:	1c6b      	adds	r3, r5, #1
90018874:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
90018878:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
9001887c:	9b01      	ldr	r3, [sp, #4]
9001887e:	9801      	ldr	r0, [sp, #4]
90018880:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
90018884:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
90018888:	805a      	strh	r2, [r3, #2]
9001888a:	809e      	strh	r6, [r3, #4]
9001888c:	80d9      	strh	r1, [r3, #6]
9001888e:	9b02      	ldr	r3, [sp, #8]
90018890:	3c08      	subs	r4, #8
90018892:	3b01      	subs	r3, #1
90018894:	9302      	str	r3, [sp, #8]
90018896:	e747      	b.n	90018728 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
90018898:	9a02      	ldr	r2, [sp, #8]
9001889a:	45b6      	cmp	lr, r6
9001889c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
900188a0:	db0d      	blt.n	900188be <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
900188a2:	449c      	add	ip, r3
900188a4:	445a      	add	r2, fp
900188a6:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
900188aa:	fa1f fc8c 	uxth.w	ip, ip
900188ae:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
900188b2:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
900188b6:	448c      	add	ip, r1
900188b8:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
900188bc:	e61e      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900188be:	445a      	add	r2, fp
900188c0:	4484      	add	ip, r0
900188c2:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
900188c6:	e78f      	b.n	900187e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
900188c8:	fa1f f18e 	uxth.w	r1, lr
900188cc:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
900188d0:	b293      	uxth	r3, r2
900188d2:	4596      	cmp	lr, r2
900188d4:	eb01 0806 	add.w	r8, r1, r6
900188d8:	9306      	str	r3, [sp, #24]
900188da:	fa1f f888 	uxth.w	r8, r8
900188de:	9f06      	ldr	r7, [sp, #24]
900188e0:	fa0f f388 	sxth.w	r3, r8
900188e4:	9307      	str	r3, [sp, #28]
900188e6:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
900188ea:	443b      	add	r3, r7
900188ec:	b29b      	uxth	r3, r3
900188ee:	9308      	str	r3, [sp, #32]
900188f0:	da24      	bge.n	9001893c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
900188f2:	9905      	ldr	r1, [sp, #20]
900188f4:	eba3 0308 	sub.w	r3, r3, r8
900188f8:	eba2 020e 	sub.w	r2, r2, lr
900188fc:	eba9 0000 	sub.w	r0, r9, r0
90018900:	ebaa 0401 	sub.w	r4, sl, r1
90018904:	b29b      	uxth	r3, r3
90018906:	b2a4      	uxth	r4, r4
90018908:	b219      	sxth	r1, r3
9001890a:	b225      	sxth	r5, r4
9001890c:	4348      	muls	r0, r1
9001890e:	436a      	muls	r2, r5
90018910:	4282      	cmp	r2, r0
90018912:	9a02      	ldr	r2, [sp, #8]
90018914:	ea4f 02c2 	mov.w	r2, r2, lsl #3
90018918:	445a      	add	r2, fp
9001891a:	dc06      	bgt.n	9001892a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
9001891c:	9b07      	ldr	r3, [sp, #28]
9001891e:	44a4      	add	ip, r4
90018920:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
90018924:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
90018928:	e75e      	b.n	900187e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
9001892a:	9904      	ldr	r1, [sp, #16]
9001892c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
90018930:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
90018934:	4433      	add	r3, r6
90018936:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
9001893a:	e5df      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
9001893c:	9f06      	ldr	r7, [sp, #24]
9001893e:	9b04      	ldr	r3, [sp, #16]
90018940:	1bc9      	subs	r1, r1, r7
90018942:	fa0f f78a 	sxth.w	r7, sl
90018946:	b289      	uxth	r1, r1
90018948:	429f      	cmp	r7, r3
9001894a:	fa0f fe81 	sxth.w	lr, r1
9001894e:	dd23      	ble.n	90018998 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
90018950:	9a05      	ldr	r2, [sp, #20]
90018952:	eba9 0000 	sub.w	r0, r9, r0
90018956:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
9001895a:	ebaa 0202 	sub.w	r2, sl, r2
9001895e:	9d07      	ldr	r5, [sp, #28]
90018960:	fb0e f000 	mul.w	r0, lr, r0
90018964:	b292      	uxth	r2, r2
90018966:	eba5 0a03 	sub.w	sl, r5, r3
9001896a:	9b02      	ldr	r3, [sp, #8]
9001896c:	b214      	sxth	r4, r2
9001896e:	00db      	lsls	r3, r3, #3
90018970:	fb04 fa0a 	mul.w	sl, r4, sl
90018974:	445b      	add	r3, fp
90018976:	4550      	cmp	r0, sl
90018978:	db03      	blt.n	90018982 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
9001897a:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
9001897e:	4494      	add	ip, r2
90018980:	e732      	b.n	900187e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
90018982:	9a04      	ldr	r2, [sp, #16]
90018984:	4431      	add	r1, r6
90018986:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
9001898a:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
9001898e:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
90018992:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
90018996:	e75c      	b.n	90018852 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
90018998:	9b08      	ldr	r3, [sp, #32]
9001899a:	2d06      	cmp	r5, #6
9001899c:	eba3 0308 	sub.w	r3, r3, r8
900189a0:	b29b      	uxth	r3, r3
900189a2:	b218      	sxth	r0, r3
900189a4:	d813      	bhi.n	900189ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
900189a6:	9b07      	ldr	r3, [sp, #28]
900189a8:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
900189ac:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
900189b0:	1c6b      	adds	r3, r5, #1
900189b2:	9901      	ldr	r1, [sp, #4]
900189b4:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
900189b8:	9b01      	ldr	r3, [sp, #4]
900189ba:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
900189be:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
900189c2:	805a      	strh	r2, [r3, #2]
900189c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
900189c6:	f8a3 e006 	strh.w	lr, [r3, #6]
900189ca:	809a      	strh	r2, [r3, #4]
900189cc:	e75f      	b.n	9001888e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
900189ce:	9c02      	ldr	r4, [sp, #8]
900189d0:	4570      	cmp	r0, lr
900189d2:	ea4f 04c4 	mov.w	r4, r4, lsl #3
900189d6:	db0d      	blt.n	900189f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
900189d8:	4431      	add	r1, r6
900189da:	9b06      	ldr	r3, [sp, #24]
900189dc:	445c      	add	r4, fp
900189de:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
900189e2:	b289      	uxth	r1, r1
900189e4:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
900189e8:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
900189ec:	4419      	add	r1, r3
900189ee:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
900189f2:	e583      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
900189f4:	445c      	add	r4, fp
900189f6:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
900189fa:	e79b      	b.n	90018934 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
900189fc:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
90018a00:	2e07      	cmp	r6, #7
90018a02:	ea4f 04c6 	mov.w	r4, r6, lsl #3
90018a06:	d812      	bhi.n	90018a2e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x55e>
90018a08:	1c75      	adds	r5, r6, #1
90018a0a:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
90018a0e:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
90018a12:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
90018a16:	9d01      	ldr	r5, [sp, #4]
90018a18:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
90018a1c:	442c      	add	r4, r5
90018a1e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
90018a22:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
90018a26:	8061      	strh	r1, [r4, #2]
90018a28:	80a2      	strh	r2, [r4, #4]
90018a2a:	80e3      	strh	r3, [r4, #6]
90018a2c:	e5d0      	b.n	900185d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
90018a2e:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
90018a32:	3e01      	subs	r6, #1
90018a34:	445c      	add	r4, fp
90018a36:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
90018a3a:	f04f 37ff 	mov.w	r7, #4294967295
90018a3e:	2500      	movs	r5, #0
90018a40:	9305      	str	r3, [sp, #20]
90018a42:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
90018a46:	1e72      	subs	r2, r6, #1
90018a48:	9302      	str	r3, [sp, #8]
90018a4a:	4691      	mov	r9, r2
90018a4c:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
90018a50:	9304      	str	r3, [sp, #16]
90018a52:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
90018a56:	f1b9 3fff 	cmp.w	r9, #4294967295
90018a5a:	6818      	ldr	r0, [r3, #0]
90018a5c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
90018a60:	9207      	str	r2, [sp, #28]
90018a62:	bf16      	itet	ne
90018a64:	9905      	ldrne	r1, [sp, #20]
90018a66:	f8dd e00c 	ldreq.w	lr, [sp, #12]
90018a6a:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
90018a6e:	9306      	str	r3, [sp, #24]
90018a70:	f8be 1006 	ldrh.w	r1, [lr, #6]
90018a74:	f8be 8004 	ldrh.w	r8, [lr, #4]
90018a78:	fb18 f801 	smulbb	r8, r8, r1
90018a7c:	6859      	ldr	r1, [r3, #4]
90018a7e:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90018a82:	4671      	mov	r1, lr
90018a84:	a80c      	add	r0, sp, #48	; 0x30
90018a86:	f7ff fbb9 	bl	900181fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018a8a:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
90018a8e:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
90018a92:	f04f 0c08 	mov.w	ip, #8
90018a96:	9b04      	ldr	r3, [sp, #16]
90018a98:	9a02      	ldr	r2, [sp, #8]
90018a9a:	fb10 f001 	smulbb	r0, r0, r1
90018a9e:	fb02 8803 	mla	r8, r2, r3, r8
90018aa2:	eba0 0108 	sub.w	r1, r0, r8
90018aa6:	fb90 f0fc 	sdiv	r0, r0, ip
90018aaa:	4288      	cmp	r0, r1
90018aac:	dc20      	bgt.n	90018af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018aae:	4551      	cmp	r1, sl
90018ab0:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
90018ab4:	da03      	bge.n	90018abe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ee>
90018ab6:	b1d9      	cbz	r1, 90018af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x620>
90018ab8:	468a      	mov	sl, r1
90018aba:	464f      	mov	r7, r9
90018abc:	4635      	mov	r5, r6
90018abe:	f109 39ff 	add.w	r9, r9, #4294967295
90018ac2:	f119 0f02 	cmn.w	r9, #2
90018ac6:	d1c6      	bne.n	90018a56 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x586>
90018ac8:	4616      	mov	r6, r2
90018aca:	3201      	adds	r2, #1
90018acc:	f1a4 0408 	sub.w	r4, r4, #8
90018ad0:	d1b7      	bne.n	90018a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x572>
90018ad2:	9b01      	ldr	r3, [sp, #4]
90018ad4:	b2ac      	uxth	r4, r5
90018ad6:	00ed      	lsls	r5, r5, #3
90018ad8:	1958      	adds	r0, r3, r5
90018ada:	1c7b      	adds	r3, r7, #1
90018adc:	d10b      	bne.n	90018af6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x626>
90018ade:	4601      	mov	r1, r0
90018ae0:	9803      	ldr	r0, [sp, #12]
90018ae2:	f7ff fb8b 	bl	900181fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018ae6:	4621      	mov	r1, r4
90018ae8:	9801      	ldr	r0, [sp, #4]
90018aea:	f7ff fcdd 	bl	900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018aee:	e505      	b.n	900184fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
90018af0:	464f      	mov	r7, r9
90018af2:	4635      	mov	r5, r6
90018af4:	e7ed      	b.n	90018ad2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x602>
90018af6:	9b01      	ldr	r3, [sp, #4]
90018af8:	00ff      	lsls	r7, r7, #3
90018afa:	445d      	add	r5, fp
90018afc:	19d9      	adds	r1, r3, r7
90018afe:	445f      	add	r7, fp
90018b00:	f7ff fb7c 	bl	900181fc <_ZN8touchgfx4Rect11expandToFitERKS0_>
90018b04:	9b03      	ldr	r3, [sp, #12]
90018b06:	cb03      	ldmia	r3!, {r0, r1}
90018b08:	9b03      	ldr	r3, [sp, #12]
90018b0a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
90018b0e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
90018b12:	f855 0fac 	ldr.w	r0, [r5, #172]!
90018b16:	6869      	ldr	r1, [r5, #4]
90018b18:	c303      	stmia	r3!, {r0, r1}
90018b1a:	e7e4      	b.n	90018ae6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x616>

90018b1c <_ZN8touchgfx11Application10invalidateEv>:
90018b1c:	4b09      	ldr	r3, [pc, #36]	; (90018b44 <_ZN8touchgfx11Application10invalidateEv+0x28>)
90018b1e:	b082      	sub	sp, #8
90018b20:	2100      	movs	r1, #0
90018b22:	f9b3 2000 	ldrsh.w	r2, [r3]
90018b26:	4b08      	ldr	r3, [pc, #32]	; (90018b48 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
90018b28:	9100      	str	r1, [sp, #0]
90018b2a:	f9b3 3000 	ldrsh.w	r3, [r3]
90018b2e:	f8ad 2004 	strh.w	r2, [sp, #4]
90018b32:	f8ad 3006 	strh.w	r3, [sp, #6]
90018b36:	ab02      	add	r3, sp, #8
90018b38:	e913 0006 	ldmdb	r3, {r1, r2}
90018b3c:	b002      	add	sp, #8
90018b3e:	f7ff bcc7 	b.w	900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b42:	bf00      	nop
90018b44:	24026f80 	.word	0x24026f80
90018b48:	24026f82 	.word	0x24026f82

90018b4c <_ZN8touchgfx11Application15drawCachedAreasEv>:
90018b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90018b50:	f500 7698 	add.w	r6, r0, #304	; 0x130
90018b54:	b09b      	sub	sp, #108	; 0x6c
90018b56:	4604      	mov	r4, r0
90018b58:	4630      	mov	r0, r6
90018b5a:	f7fb ff74 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018b5e:	4605      	mov	r5, r0
90018b60:	b940      	cbnz	r0, 90018b74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
90018b62:	4620      	mov	r0, r4
90018b64:	e896 0006 	ldmia.w	r6, {r1, r2}
90018b68:	f7ff fcb2 	bl	900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b6c:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
90018b70:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
90018b74:	4bc8      	ldr	r3, [pc, #800]	; (90018e98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
90018b76:	681b      	ldr	r3, [r3, #0]
90018b78:	2b00      	cmp	r3, #0
90018b7a:	d03e      	beq.n	90018bfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018b7c:	4dc7      	ldr	r5, [pc, #796]	; (90018e9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
90018b7e:	4628      	mov	r0, r5
90018b80:	f7fb ff61 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018b84:	4606      	mov	r6, r0
90018b86:	2800      	cmp	r0, #0
90018b88:	d137      	bne.n	90018bfa <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
90018b8a:	4628      	mov	r0, r5
90018b8c:	f7ff f9c4 	bl	90017f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018b90:	6829      	ldr	r1, [r5, #0]
90018b92:	686a      	ldr	r2, [r5, #4]
90018b94:	4620      	mov	r0, r4
90018b96:	f7ff fc9b 	bl	900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018b9a:	802e      	strh	r6, [r5, #0]
90018b9c:	806e      	strh	r6, [r5, #2]
90018b9e:	80ae      	strh	r6, [r5, #4]
90018ba0:	80ee      	strh	r6, [r5, #6]
90018ba2:	ae09      	add	r6, sp, #36	; 0x24
90018ba4:	4630      	mov	r0, r6
90018ba6:	f7ff fc23 	bl	900183f0 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
90018baa:	4abd      	ldr	r2, [pc, #756]	; (90018ea0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
90018bac:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018bb0:	f104 00ac 	add.w	r0, r4, #172	; 0xac
90018bb4:	8815      	ldrh	r5, [r2, #0]
90018bb6:	9202      	str	r2, [sp, #8]
90018bb8:	462b      	mov	r3, r5
90018bba:	429f      	cmp	r7, r3
90018bbc:	d924      	bls.n	90018c08 <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
90018bbe:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
90018bc2:	2907      	cmp	r1, #7
90018bc4:	d816      	bhi.n	90018bf4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
90018bc6:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
90018bca:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
90018bce:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
90018bd2:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
90018bd6:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
90018bda:	1c4a      	adds	r2, r1, #1
90018bdc:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
90018be0:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
90018be4:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
90018be8:	f8a2 9002 	strh.w	r9, [r2, #2]
90018bec:	f8a2 e004 	strh.w	lr, [r2, #4]
90018bf0:	f8a2 c006 	strh.w	ip, [r2, #6]
90018bf4:	3301      	adds	r3, #1
90018bf6:	b29b      	uxth	r3, r3
90018bf8:	e7df      	b.n	90018bba <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
90018bfa:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018bfe:	2b00      	cmp	r3, #0
90018c00:	d1cf      	bne.n	90018ba2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
90018c02:	b01b      	add	sp, #108	; 0x6c
90018c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90018c08:	462f      	mov	r7, r5
90018c0a:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
90018c0e:	42bb      	cmp	r3, r7
90018c10:	d90b      	bls.n	90018c2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
90018c12:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
90018c16:	3701      	adds	r7, #1
90018c18:	4620      	mov	r0, r4
90018c1a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
90018c1e:	b2bf      	uxth	r7, r7
90018c20:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
90018c24:	f7ff fc54 	bl	900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
90018c28:	e7ef      	b.n	90018c0a <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
90018c2a:	4a9e      	ldr	r2, [pc, #632]	; (90018ea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
90018c2c:	6813      	ldr	r3, [r2, #0]
90018c2e:	4690      	mov	r8, r2
90018c30:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
90018c34:	2b01      	cmp	r3, #1
90018c36:	f040 80e4 	bne.w	90018e02 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b6>
90018c3a:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
90018c3e:	4629      	mov	r1, r5
90018c40:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
90018c44:	2500      	movs	r5, #0
90018c46:	33ae      	adds	r3, #174	; 0xae
90018c48:	428f      	cmp	r7, r1
90018c4a:	f103 0308 	add.w	r3, r3, #8
90018c4e:	dd0a      	ble.n	90018c66 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
90018c50:	f833 2c08 	ldrh.w	r2, [r3, #-8]
90018c54:	3101      	adds	r1, #1
90018c56:	f833 0c04 	ldrh.w	r0, [r3, #-4]
90018c5a:	4402      	add	r2, r0
90018c5c:	b212      	sxth	r2, r2
90018c5e:	4295      	cmp	r5, r2
90018c60:	bfb8      	it	lt
90018c62:	4615      	movlt	r5, r2
90018c64:	e7f0      	b.n	90018c48 <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
90018c66:	4b90      	ldr	r3, [pc, #576]	; (90018ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
90018c68:	f8df b238 	ldr.w	fp, [pc, #568]	; 90018ea4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>
90018c6c:	881b      	ldrh	r3, [r3, #0]
90018c6e:	46d8      	mov	r8, fp
90018c70:	2b0f      	cmp	r3, #15
90018c72:	bf8c      	ite	hi
90018c74:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
90018c78:	f04f 0a01 	movls.w	sl, #1
90018c7c:	2300      	movs	r3, #0
90018c7e:	e9cd 3305 	strd	r3, r3, [sp, #20]
90018c82:	f8bd 701a 	ldrh.w	r7, [sp, #26]
90018c86:	f8bd 0016 	ldrh.w	r0, [sp, #22]
90018c8a:	4438      	add	r0, r7
90018c8c:	b207      	sxth	r7, r0
90018c8e:	f8db 0000 	ldr.w	r0, [fp]
90018c92:	42bd      	cmp	r5, r7
90018c94:	6803      	ldr	r3, [r0, #0]
90018c96:	f340 8084 	ble.w	90018da2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
90018c9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
90018c9e:	4798      	blx	r3
90018ca0:	eb07 030a 	add.w	r3, r7, sl
90018ca4:	4298      	cmp	r0, r3
90018ca6:	da07      	bge.n	90018cb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018ca8:	4285      	cmp	r5, r0
90018caa:	dd05      	ble.n	90018cb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
90018cac:	4287      	cmp	r7, r0
90018cae:	dd6d      	ble.n	90018d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018cb0:	2f00      	cmp	r7, #0
90018cb2:	dd6b      	ble.n	90018d8c <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
90018cb4:	4628      	mov	r0, r5
90018cb6:	e004      	b.n	90018cc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x176>
90018cb8:	4287      	cmp	r7, r0
90018cba:	dcfb      	bgt.n	90018cb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x168>
90018cbc:	42a8      	cmp	r0, r5
90018cbe:	bfa8      	it	ge
90018cc0:	4628      	movge	r0, r5
90018cc2:	4b7a      	ldr	r3, [pc, #488]	; (90018eac <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
90018cc4:	1bc0      	subs	r0, r0, r7
90018cc6:	2200      	movs	r2, #0
90018cc8:	f8ad 7016 	strh.w	r7, [sp, #22]
90018ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
90018cd0:	f8ad 2014 	strh.w	r2, [sp, #20]
90018cd4:	f8ad 3018 	strh.w	r3, [sp, #24]
90018cd8:	9b02      	ldr	r3, [sp, #8]
90018cda:	f8ad 001a 	strh.w	r0, [sp, #26]
90018cde:	881f      	ldrh	r7, [r3, #0]
90018ce0:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90018ce4:	42bb      	cmp	r3, r7
90018ce6:	d9cc      	bls.n	90018c82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018ce8:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
90018cec:	ab07      	add	r3, sp, #28
90018cee:	f852 0fac 	ldr.w	r0, [r2, #172]!
90018cf2:	6851      	ldr	r1, [r2, #4]
90018cf4:	c303      	stmia	r3!, {r0, r1}
90018cf6:	a905      	add	r1, sp, #20
90018cf8:	a807      	add	r0, sp, #28
90018cfa:	f7ff f9e6 	bl	900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>
90018cfe:	2800      	cmp	r0, #0
90018d00:	d04c      	beq.n	90018d9c <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
90018d02:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
90018d06:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
90018d0a:	f8bd 9020 	ldrh.w	r9, [sp, #32]
90018d0e:	4686      	mov	lr, r0
90018d10:	4290      	cmp	r0, r2
90018d12:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
90018d16:	4448      	add	r0, r9
90018d18:	f8bd 9018 	ldrh.w	r9, [sp, #24]
90018d1c:	bfb8      	it	lt
90018d1e:	4696      	movlt	lr, r2
90018d20:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90018d24:	444a      	add	r2, r9
90018d26:	b280      	uxth	r0, r0
90018d28:	4299      	cmp	r1, r3
90018d2a:	468c      	mov	ip, r1
90018d2c:	b292      	uxth	r2, r2
90018d2e:	9303      	str	r3, [sp, #12]
90018d30:	bfb8      	it	lt
90018d32:	469c      	movlt	ip, r3
90018d34:	b203      	sxth	r3, r0
90018d36:	fa0f f982 	sxth.w	r9, r2
90018d3a:	f8ad e01c 	strh.w	lr, [sp, #28]
90018d3e:	f8ad c01e 	strh.w	ip, [sp, #30]
90018d42:	454b      	cmp	r3, r9
90018d44:	bfb8      	it	lt
90018d46:	4602      	movlt	r2, r0
90018d48:	9b03      	ldr	r3, [sp, #12]
90018d4a:	eba2 020e 	sub.w	r2, r2, lr
90018d4e:	f8ad 2020 	strh.w	r2, [sp, #32]
90018d52:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
90018d56:	4411      	add	r1, r2
90018d58:	f8bd 201a 	ldrh.w	r2, [sp, #26]
90018d5c:	4413      	add	r3, r2
90018d5e:	b289      	uxth	r1, r1
90018d60:	b29b      	uxth	r3, r3
90018d62:	b208      	sxth	r0, r1
90018d64:	b21a      	sxth	r2, r3
90018d66:	4290      	cmp	r0, r2
90018d68:	bfb8      	it	lt
90018d6a:	460b      	movlt	r3, r1
90018d6c:	eba3 030c 	sub.w	r3, r3, ip
90018d70:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
90018d74:	a807      	add	r0, sp, #28
90018d76:	f7fb fe66 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018d7a:	b920      	cbnz	r0, 90018d86 <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
90018d7c:	6823      	ldr	r3, [r4, #0]
90018d7e:	a907      	add	r1, sp, #28
90018d80:	4620      	mov	r0, r4
90018d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018d84:	4798      	blx	r3
90018d86:	3701      	adds	r7, #1
90018d88:	b2bf      	uxth	r7, r7
90018d8a:	e7a9      	b.n	90018ce0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
90018d8c:	f8d8 0000 	ldr.w	r0, [r8]
90018d90:	2101      	movs	r1, #1
90018d92:	6803      	ldr	r3, [r0, #0]
90018d94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
90018d98:	4798      	blx	r3
90018d9a:	e772      	b.n	90018c82 <_ZN8touchgfx11Application15drawCachedAreasEv+0x136>
90018d9c:	e9cd 0007 	strd	r0, r0, [sp, #28]
90018da0:	e7e8      	b.n	90018d74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
90018da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
90018da4:	4798      	blx	r3
90018da6:	4b42      	ldr	r3, [pc, #264]	; (90018eb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
90018da8:	781b      	ldrb	r3, [r3, #0]
90018daa:	2b00      	cmp	r3, #0
90018dac:	f43f af29 	beq.w	90018c02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018db0:	2300      	movs	r3, #0
90018db2:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
90018db6:	f104 00ee 	add.w	r0, r4, #238	; 0xee
90018dba:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
90018dbe:	9b02      	ldr	r3, [sp, #8]
90018dc0:	881b      	ldrh	r3, [r3, #0]
90018dc2:	429d      	cmp	r5, r3
90018dc4:	f67f af1d 	bls.w	90018c02 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
90018dc8:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
90018dcc:	2907      	cmp	r1, #7
90018dce:	d815      	bhi.n	90018dfc <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b0>
90018dd0:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
90018dd4:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
90018dd8:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
90018ddc:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
90018de0:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
90018de4:	1c4a      	adds	r2, r1, #1
90018de6:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
90018dea:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
90018dee:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
90018df2:	f8a2 e002 	strh.w	lr, [r2, #2]
90018df6:	f8a2 c004 	strh.w	ip, [r2, #4]
90018dfa:	80d7      	strh	r7, [r2, #6]
90018dfc:	3301      	adds	r3, #1
90018dfe:	b29b      	uxth	r3, r3
90018e00:	e7df      	b.n	90018dc2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x276>
90018e02:	2b02      	cmp	r3, #2
90018e04:	f040 8135 	bne.w	90019072 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
90018e08:	4b2a      	ldr	r3, [pc, #168]	; (90018eb4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
90018e0a:	f104 09ac 	add.w	r9, r4, #172	; 0xac
90018e0e:	781b      	ldrb	r3, [r3, #0]
90018e10:	2b01      	cmp	r3, #1
90018e12:	f000 809c 	beq.w	90018f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018e16:	9b02      	ldr	r3, [sp, #8]
90018e18:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
90018e1c:	f8b3 b000 	ldrh.w	fp, [r3]
90018e20:	f10b 0b01 	add.w	fp, fp, #1
90018e24:	fa1f fb8b 	uxth.w	fp, fp
90018e28:	2a00      	cmp	r2, #0
90018e2a:	d0bc      	beq.n	90018da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018e2c:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
90018e30:	4659      	mov	r1, fp
90018e32:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
90018e36:	f04f 0800 	mov.w	r8, #0
90018e3a:	441d      	add	r5, r3
90018e3c:	b22d      	sxth	r5, r5
90018e3e:	b28b      	uxth	r3, r1
90018e40:	ea4f 07c8 	mov.w	r7, r8, lsl #3
90018e44:	429a      	cmp	r2, r3
90018e46:	f240 80c0 	bls.w	90018fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x47e>
90018e4a:	4427      	add	r7, r4
90018e4c:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
90018e50:	4608      	mov	r0, r1
90018e52:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
90018e56:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
90018e5a:	4563      	cmp	r3, ip
90018e5c:	f340 80a2 	ble.w	90018fa4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
90018e60:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
90018e64:	4465      	add	r5, ip
90018e66:	b22d      	sxth	r5, r5
90018e68:	429d      	cmp	r5, r3
90018e6a:	bfa8      	it	ge
90018e6c:	461d      	movge	r5, r3
90018e6e:	3101      	adds	r1, #1
90018e70:	4680      	mov	r8, r0
90018e72:	e7e4      	b.n	90018e3e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f2>
90018e74:	d10b      	bne.n	90018e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x342>
90018e76:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
90018e7a:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
90018e7e:	458c      	cmp	ip, r1
90018e80:	bfb4      	ite	lt
90018e82:	469c      	movlt	ip, r3
90018e84:	46bc      	movge	ip, r7
90018e86:	4572      	cmp	r2, lr
90018e88:	bfb8      	it	lt
90018e8a:	4672      	movlt	r2, lr
90018e8c:	e087      	b.n	90018f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018e8e:	428a      	cmp	r2, r1
90018e90:	46bc      	mov	ip, r7
90018e92:	bfb8      	it	lt
90018e94:	460a      	movlt	r2, r1
90018e96:	e082      	b.n	90018f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x452>
90018e98:	24026fc4 	.word	0x24026fc4
90018e9c:	24026fd0 	.word	0x24026fd0
90018ea0:	24000068 	.word	0x24000068
90018ea4:	24026f8c 	.word	0x24026f8c
90018ea8:	24026f82 	.word	0x24026f82
90018eac:	24026f80 	.word	0x24026f80
90018eb0:	24026f8a 	.word	0x24026f8a
90018eb4:	24026f84 	.word	0x24026f84
90018eb8:	1961      	adds	r1, r4, r5
90018eba:	ab07      	add	r3, sp, #28
90018ebc:	f851 0fac 	ldr.w	r0, [r1, #172]!
90018ec0:	6849      	ldr	r1, [r1, #4]
90018ec2:	c303      	stmia	r3!, {r0, r1}
90018ec4:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
90018ec8:	a807      	add	r0, sp, #28
90018eca:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018ece:	2b13      	cmp	r3, #19
90018ed0:	440b      	add	r3, r1
90018ed2:	bfd8      	it	le
90018ed4:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
90018ed8:	1a9b      	subs	r3, r3, r2
90018eda:	f8ad 201c 	strh.w	r2, [sp, #28]
90018ede:	f8ad 3020 	strh.w	r3, [sp, #32]
90018ee2:	f7ff f833 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
90018ee6:	a807      	add	r0, sp, #28
90018ee8:	f7fb fdad 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018eec:	bb78      	cbnz	r0, 90018f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018eee:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
90018ef2:	4425      	add	r5, r4
90018ef4:	f8d8 0000 	ldr.w	r0, [r8]
90018ef8:	f1bc 0f14 	cmp.w	ip, #20
90018efc:	f8bd 3020 	ldrh.w	r3, [sp, #32]
90018f00:	f8d0 e000 	ldr.w	lr, [r0]
90018f04:	bfa8      	it	ge
90018f06:	f04f 0c14 	movge.w	ip, #20
90018f0a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
90018f0e:	f8bd 101c 	ldrh.w	r1, [sp, #28]
90018f12:	fa1f fc8c 	uxth.w	ip, ip
90018f16:	f8cd c000 	str.w	ip, [sp]
90018f1a:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
90018f1e:	47d0      	blx	sl
90018f20:	4682      	mov	sl, r0
90018f22:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018f26:	a807      	add	r0, sp, #28
90018f28:	f7fe fff6 	bl	90017f18 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
90018f2c:	6823      	ldr	r3, [r4, #0]
90018f2e:	4620      	mov	r0, r4
90018f30:	a907      	add	r1, sp, #28
90018f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90018f34:	4798      	blx	r3
90018f36:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
90018f3a:	eba0 000a 	sub.w	r0, r0, sl
90018f3e:	b200      	sxth	r0, r0
90018f40:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
90018f44:	b918      	cbnz	r0, 90018f4e <_ZN8touchgfx11Application15drawCachedAreasEv+0x402>
90018f46:	b2b9      	uxth	r1, r7
90018f48:	4648      	mov	r0, r9
90018f4a:	f7ff faad 	bl	900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90018f4e:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
90018f52:	f1bb 0f00 	cmp.w	fp, #0
90018f56:	f43f af26 	beq.w	90018da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
90018f5a:	9b02      	ldr	r3, [sp, #8]
90018f5c:	2700      	movs	r7, #0
90018f5e:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
90018f62:	881b      	ldrh	r3, [r3, #0]
90018f64:	3301      	adds	r3, #1
90018f66:	b29b      	uxth	r3, r3
90018f68:	b299      	uxth	r1, r3
90018f6a:	00fd      	lsls	r5, r7, #3
90018f6c:	458b      	cmp	fp, r1
90018f6e:	d9a3      	bls.n	90018eb8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>
90018f70:	4425      	add	r5, r4
90018f72:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
90018f76:	469c      	mov	ip, r3
90018f78:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
90018f7c:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
90018f80:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
90018f84:	4408      	add	r0, r1
90018f86:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
90018f8a:	4471      	add	r1, lr
90018f8c:	b200      	sxth	r0, r0
90018f8e:	b209      	sxth	r1, r1
90018f90:	4288      	cmp	r0, r1
90018f92:	f6bf af6f 	bge.w	90018e74 <_ZN8touchgfx11Application15drawCachedAreasEv+0x328>
90018f96:	4586      	cmp	lr, r0
90018f98:	4672      	mov	r2, lr
90018f9a:	bfb8      	it	lt
90018f9c:	4602      	movlt	r2, r0
90018f9e:	3301      	adds	r3, #1
90018fa0:	4667      	mov	r7, ip
90018fa2:	e7e1      	b.n	90018f68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x41c>
90018fa4:	d10c      	bne.n	90018fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x474>
90018fa6:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
90018faa:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
90018fae:	4287      	cmp	r7, r0
90018fb0:	bfb4      	ite	lt
90018fb2:	4608      	movlt	r0, r1
90018fb4:	4640      	movge	r0, r8
90018fb6:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
90018fba:	443b      	add	r3, r7
90018fbc:	b21b      	sxth	r3, r3
90018fbe:	e753      	b.n	90018e68 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31c>
90018fc0:	4565      	cmp	r5, ip
90018fc2:	4640      	mov	r0, r8
90018fc4:	bfa8      	it	ge
90018fc6:	4665      	movge	r5, ip
90018fc8:	e751      	b.n	90018e6e <_ZN8touchgfx11Application15drawCachedAreasEv+0x322>
90018fca:	eb09 0007 	add.w	r0, r9, r7
90018fce:	4427      	add	r7, r4
90018fd0:	9203      	str	r2, [sp, #12]
90018fd2:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
90018fd6:	f1ba 0f13 	cmp.w	sl, #19
90018fda:	bfde      	ittt	le
90018fdc:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
90018fe0:	4455      	addle	r5, sl
90018fe2:	b22d      	sxthle	r5, r5
90018fe4:	f7fb fd2f 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90018fe8:	9a03      	ldr	r2, [sp, #12]
90018fea:	2800      	cmp	r0, #0
90018fec:	f47f af1c 	bne.w	90018e28 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2dc>
90018ff0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
90018ff4:	fa1f fa8a 	uxth.w	sl, sl
90018ff8:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
90018ffc:	1aad      	subs	r5, r5, r2
90018ffe:	4829      	ldr	r0, [pc, #164]	; (900190a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x558>)
90019000:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
90019004:	2d14      	cmp	r5, #20
90019006:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
9001900a:	6800      	ldr	r0, [r0, #0]
9001900c:	bfa8      	it	ge
9001900e:	2514      	movge	r5, #20
90019010:	f8ad 101c 	strh.w	r1, [sp, #28]
90019014:	f8ad 201e 	strh.w	r2, [sp, #30]
90019018:	b289      	uxth	r1, r1
9001901a:	f8ad 3020 	strh.w	r3, [sp, #32]
9001901e:	b2ad      	uxth	r5, r5
90019020:	f8d0 c000 	ldr.w	ip, [r0]
90019024:	b292      	uxth	r2, r2
90019026:	4555      	cmp	r5, sl
90019028:	bf94      	ite	ls
9001902a:	9500      	strls	r5, [sp, #0]
9001902c:	f8cd a000 	strhi.w	sl, [sp]
90019030:	b29b      	uxth	r3, r3
90019032:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
90019036:	47a8      	blx	r5
90019038:	6823      	ldr	r3, [r4, #0]
9001903a:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
9001903e:	a907      	add	r1, sp, #28
90019040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
90019042:	4620      	mov	r0, r4
90019044:	4798      	blx	r3
90019046:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
9001904a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
9001904e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
90019052:	1a5b      	subs	r3, r3, r1
90019054:	440a      	add	r2, r1
90019056:	b21b      	sxth	r3, r3
90019058:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
9001905c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
90019060:	2b00      	cmp	r3, #0
90019062:	f47f aed8 	bne.w	90018e16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90019066:	fa1f f188 	uxth.w	r1, r8
9001906a:	4648      	mov	r0, r9
9001906c:	f7ff fa1c 	bl	900184a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
90019070:	e6d1      	b.n	90018e16 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ca>
90019072:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
90019076:	42ab      	cmp	r3, r5
90019078:	f67f ae95 	bls.w	90018da6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
9001907c:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
90019080:	ab07      	add	r3, sp, #28
90019082:	f852 0fac 	ldr.w	r0, [r2, #172]!
90019086:	6851      	ldr	r1, [r2, #4]
90019088:	c303      	stmia	r3!, {r0, r1}
9001908a:	a807      	add	r0, sp, #28
9001908c:	f7fb fcdb 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
90019090:	b920      	cbnz	r0, 9001909c <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>
90019092:	6823      	ldr	r3, [r4, #0]
90019094:	a907      	add	r1, sp, #28
90019096:	4620      	mov	r0, r4
90019098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
9001909a:	4798      	blx	r3
9001909c:	3501      	adds	r5, #1
9001909e:	b2ad      	uxth	r5, r5
900190a0:	e7e7      	b.n	90019072 <_ZN8touchgfx11Application15drawCachedAreasEv+0x526>
900190a2:	bf00      	nop
900190a4:	24026f8c 	.word	0x24026f8c

900190a8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
900190a8:	4b03      	ldr	r3, [pc, #12]	; (900190b8 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
900190aa:	2200      	movs	r2, #0
900190ac:	801a      	strh	r2, [r3, #0]
900190ae:	805a      	strh	r2, [r3, #2]
900190b0:	809a      	strh	r2, [r3, #4]
900190b2:	80da      	strh	r2, [r3, #6]
900190b4:	4770      	bx	lr
900190b6:	bf00      	nop
900190b8:	24026fd0 	.word	0x24026fd0

900190bc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
900190bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900190c0:	b09d      	sub	sp, #116	; 0x74
900190c2:	4606      	mov	r6, r0
900190c4:	4614      	mov	r4, r2
900190c6:	468a      	mov	sl, r1
900190c8:	a803      	add	r0, sp, #12
900190ca:	461d      	mov	r5, r3
900190cc:	f000 fd9e 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
900190d0:	6833      	ldr	r3, [r6, #0]
900190d2:	4630      	mov	r0, r6
900190d4:	f242 0b0b 	movw	fp, #8203	; 0x200b
900190d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
900190da:	4798      	blx	r3
900190dc:	6833      	ldr	r3, [r6, #0]
900190de:	4607      	mov	r7, r0
900190e0:	4630      	mov	r0, r6
900190e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900190e4:	4798      	blx	r3
900190e6:	462a      	mov	r2, r5
900190e8:	2500      	movs	r5, #0
900190ea:	4621      	mov	r1, r4
900190ec:	9000      	str	r0, [sp, #0]
900190ee:	463b      	mov	r3, r7
900190f0:	462c      	mov	r4, r5
900190f2:	46a9      	mov	r9, r5
900190f4:	46a8      	mov	r8, r5
900190f6:	a803      	add	r0, sp, #12
900190f8:	f000 fde3 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900190fc:	2300      	movs	r3, #0
900190fe:	9302      	str	r3, [sp, #8]
90019100:	f64f 63ff 	movw	r3, #65279	; 0xfeff
90019104:	429c      	cmp	r4, r3
90019106:	d002      	beq.n	9001910e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
90019108:	455c      	cmp	r4, fp
9001910a:	bf18      	it	ne
9001910c:	4625      	movne	r5, r4
9001910e:	ab02      	add	r3, sp, #8
90019110:	4632      	mov	r2, r6
90019112:	4651      	mov	r1, sl
90019114:	a803      	add	r0, sp, #12
90019116:	f001 f8d9 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
9001911a:	4604      	mov	r4, r0
9001911c:	b108      	cbz	r0, 90019122 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
9001911e:	280a      	cmp	r0, #10
90019120:	d10a      	bne.n	90019138 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
90019122:	45c1      	cmp	r9, r8
90019124:	bf38      	it	cc
90019126:	46c1      	movcc	r9, r8
90019128:	f04f 0800 	mov.w	r8, #0
9001912c:	2c00      	cmp	r4, #0
9001912e:	d1e5      	bne.n	900190fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
90019130:	4648      	mov	r0, r9
90019132:	b01d      	add	sp, #116	; 0x74
90019134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019138:	9a02      	ldr	r2, [sp, #8]
9001913a:	2a00      	cmp	r2, #0
9001913c:	d0de      	beq.n	900190fc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
9001913e:	7b57      	ldrb	r7, [r2, #13]
90019140:	4629      	mov	r1, r5
90019142:	6833      	ldr	r3, [r6, #0]
90019144:	007f      	lsls	r7, r7, #1
90019146:	8894      	ldrh	r4, [r2, #4]
90019148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
9001914a:	f407 7080 	and.w	r0, r7, #256	; 0x100
9001914e:	7a97      	ldrb	r7, [r2, #10]
90019150:	4307      	orrs	r7, r0
90019152:	4630      	mov	r0, r6
90019154:	4798      	blx	r3
90019156:	4438      	add	r0, r7
90019158:	4480      	add	r8, r0
9001915a:	fa1f f888 	uxth.w	r8, r8
9001915e:	e7e5      	b.n	9001912c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

90019160 <_ZNK8touchgfx4Font12getCharWidthEt>:
90019160:	b508      	push	{r3, lr}
90019162:	6803      	ldr	r3, [r0, #0]
90019164:	68db      	ldr	r3, [r3, #12]
90019166:	4798      	blx	r3
90019168:	b128      	cbz	r0, 90019176 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
9001916a:	7b43      	ldrb	r3, [r0, #13]
9001916c:	7a80      	ldrb	r0, [r0, #10]
9001916e:	005b      	lsls	r3, r3, #1
90019170:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019174:	4318      	orrs	r0, r3
90019176:	bd08      	pop	{r3, pc}

90019178 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
90019178:	b40e      	push	{r1, r2, r3}
9001917a:	b5f0      	push	{r4, r5, r6, r7, lr}
9001917c:	b09e      	sub	sp, #120	; 0x78
9001917e:	4605      	mov	r5, r0
90019180:	ab23      	add	r3, sp, #140	; 0x8c
90019182:	a805      	add	r0, sp, #20
90019184:	f853 4b04 	ldr.w	r4, [r3], #4
90019188:	9303      	str	r3, [sp, #12]
9001918a:	f000 fd3f 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
9001918e:	682b      	ldr	r3, [r5, #0]
90019190:	4628      	mov	r0, r5
90019192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
90019194:	4798      	blx	r3
90019196:	682b      	ldr	r3, [r5, #0]
90019198:	4606      	mov	r6, r0
9001919a:	4628      	mov	r0, r5
9001919c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
9001919e:	4798      	blx	r3
900191a0:	4633      	mov	r3, r6
900191a2:	4621      	mov	r1, r4
900191a4:	ae1e      	add	r6, sp, #120	; 0x78
900191a6:	2400      	movs	r4, #0
900191a8:	9000      	str	r0, [sp, #0]
900191aa:	9a03      	ldr	r2, [sp, #12]
900191ac:	a805      	add	r0, sp, #20
900191ae:	f000 fd88 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900191b2:	f846 4d68 	str.w	r4, [r6, #-104]!
900191b6:	462a      	mov	r2, r5
900191b8:	4633      	mov	r3, r6
900191ba:	4621      	mov	r1, r4
900191bc:	a805      	add	r0, sp, #20
900191be:	f001 f885 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900191c2:	b300      	cbz	r0, 90019206 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
900191c4:	280a      	cmp	r0, #10
900191c6:	d01a      	beq.n	900191fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900191c8:	9f04      	ldr	r7, [sp, #16]
900191ca:	b1c7      	cbz	r7, 900191fe <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
900191cc:	7b78      	ldrb	r0, [r7, #13]
900191ce:	7a3b      	ldrb	r3, [r7, #8]
900191d0:	00c1      	lsls	r1, r0, #3
900191d2:	88ea      	ldrh	r2, [r5, #6]
900191d4:	f401 7180 	and.w	r1, r1, #256	; 0x100
900191d8:	4319      	orrs	r1, r3
900191da:	0643      	lsls	r3, r0, #25
900191dc:	ea4f 1000 	mov.w	r0, r0, lsl #4
900191e0:	bf48      	it	mi
900191e2:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
900191e6:	f400 7080 	and.w	r0, r0, #256	; 0x100
900191ea:	bf48      	it	mi
900191ec:	b219      	sxthmi	r1, r3
900191ee:	79fb      	ldrb	r3, [r7, #7]
900191f0:	4303      	orrs	r3, r0
900191f2:	4413      	add	r3, r2
900191f4:	1a5b      	subs	r3, r3, r1
900191f6:	b21b      	sxth	r3, r3
900191f8:	429c      	cmp	r4, r3
900191fa:	bfb8      	it	lt
900191fc:	461c      	movlt	r4, r3
900191fe:	4633      	mov	r3, r6
90019200:	462a      	mov	r2, r5
90019202:	2100      	movs	r1, #0
90019204:	e7da      	b.n	900191bc <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
90019206:	b2a0      	uxth	r0, r4
90019208:	b01e      	add	sp, #120	; 0x78
9001920a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
9001920e:	b003      	add	sp, #12
90019210:	4770      	bx	lr

90019212 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
90019212:	7a43      	ldrb	r3, [r0, #9]
90019214:	8880      	ldrh	r0, [r0, #4]
90019216:	4418      	add	r0, r3
90019218:	b280      	uxth	r0, r0
9001921a:	4770      	bx	lr

9001921c <_ZNK8touchgfx4Font13getFontHeightEv>:
9001921c:	6803      	ldr	r3, [r0, #0]
9001921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
90019220:	4718      	bx	r3

90019222 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
90019222:	b40e      	push	{r1, r2, r3}
90019224:	b570      	push	{r4, r5, r6, lr}
90019226:	b09d      	sub	sp, #116	; 0x74
90019228:	4604      	mov	r4, r0
9001922a:	ab21      	add	r3, sp, #132	; 0x84
9001922c:	a803      	add	r0, sp, #12
9001922e:	f853 5b04 	ldr.w	r5, [r3], #4
90019232:	9302      	str	r3, [sp, #8]
90019234:	f000 fcea 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90019238:	6823      	ldr	r3, [r4, #0]
9001923a:	4620      	mov	r0, r4
9001923c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001923e:	4798      	blx	r3
90019240:	6823      	ldr	r3, [r4, #0]
90019242:	4606      	mov	r6, r0
90019244:	4620      	mov	r0, r4
90019246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
90019248:	2401      	movs	r4, #1
9001924a:	4798      	blx	r3
9001924c:	4633      	mov	r3, r6
9001924e:	9000      	str	r0, [sp, #0]
90019250:	4629      	mov	r1, r5
90019252:	9a02      	ldr	r2, [sp, #8]
90019254:	a803      	add	r0, sp, #12
90019256:	f000 fd34 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
9001925a:	a803      	add	r0, sp, #12
9001925c:	f001 f902 	bl	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019260:	b2a3      	uxth	r3, r4
90019262:	b138      	cbz	r0, 90019274 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
90019264:	280a      	cmp	r0, #10
90019266:	a803      	add	r0, sp, #12
90019268:	bf04      	itt	eq
9001926a:	3301      	addeq	r3, #1
9001926c:	b21c      	sxtheq	r4, r3
9001926e:	f001 f8f9 	bl	9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>
90019272:	e7f5      	b.n	90019260 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
90019274:	4618      	mov	r0, r3
90019276:	b01d      	add	sp, #116	; 0x74
90019278:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
9001927c:	b003      	add	sp, #12
9001927e:	4770      	bx	lr

90019280 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
90019280:	b40e      	push	{r1, r2, r3}
90019282:	b5f0      	push	{r4, r5, r6, r7, lr}
90019284:	b09e      	sub	sp, #120	; 0x78
90019286:	4604      	mov	r4, r0
90019288:	ab23      	add	r3, sp, #140	; 0x8c
9001928a:	a805      	add	r0, sp, #20
9001928c:	f853 5b04 	ldr.w	r5, [r3], #4
90019290:	9303      	str	r3, [sp, #12]
90019292:	f000 fcbb 	bl	90019c0c <_ZN8touchgfx12TextProviderC1Ev>
90019296:	6823      	ldr	r3, [r4, #0]
90019298:	4620      	mov	r0, r4
9001929a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001929c:	4798      	blx	r3
9001929e:	6823      	ldr	r3, [r4, #0]
900192a0:	4606      	mov	r6, r0
900192a2:	4620      	mov	r0, r4
900192a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
900192a6:	4798      	blx	r3
900192a8:	4633      	mov	r3, r6
900192aa:	4629      	mov	r1, r5
900192ac:	9000      	str	r0, [sp, #0]
900192ae:	9a03      	ldr	r2, [sp, #12]
900192b0:	a805      	add	r0, sp, #20
900192b2:	f000 fd06 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
900192b6:	ad1e      	add	r5, sp, #120	; 0x78
900192b8:	2100      	movs	r1, #0
900192ba:	f647 76ff 	movw	r6, #32767	; 0x7fff
900192be:	4622      	mov	r2, r4
900192c0:	a805      	add	r0, sp, #20
900192c2:	f845 1d68 	str.w	r1, [r5, #-104]!
900192c6:	462b      	mov	r3, r5
900192c8:	f001 f800 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
900192cc:	b1d8      	cbz	r0, 90019306 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
900192ce:	280a      	cmp	r0, #10
900192d0:	d012      	beq.n	900192f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900192d2:	9804      	ldr	r0, [sp, #16]
900192d4:	b180      	cbz	r0, 900192f8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
900192d6:	7b47      	ldrb	r7, [r0, #13]
900192d8:	88e2      	ldrh	r2, [r4, #6]
900192da:	00fb      	lsls	r3, r7, #3
900192dc:	f403 7180 	and.w	r1, r3, #256	; 0x100
900192e0:	7a03      	ldrb	r3, [r0, #8]
900192e2:	430b      	orrs	r3, r1
900192e4:	0679      	lsls	r1, r7, #25
900192e6:	bf44      	itt	mi
900192e8:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
900192ec:	b21b      	sxthmi	r3, r3
900192ee:	1ad3      	subs	r3, r2, r3
900192f0:	b21b      	sxth	r3, r3
900192f2:	429e      	cmp	r6, r3
900192f4:	bfa8      	it	ge
900192f6:	461e      	movge	r6, r3
900192f8:	462b      	mov	r3, r5
900192fa:	4622      	mov	r2, r4
900192fc:	2100      	movs	r1, #0
900192fe:	a805      	add	r0, sp, #20
90019300:	f000 ffe4 	bl	9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
90019304:	e7e2      	b.n	900192cc <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
90019306:	4630      	mov	r0, r6
90019308:	b01e      	add	sp, #120	; 0x78
9001930a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
9001930e:	b003      	add	sp, #12
90019310:	4770      	bx	lr

90019312 <_ZNK8touchgfx8Drawable10invalidateEv>:
90019312:	b513      	push	{r0, r1, r4, lr}
90019314:	6803      	ldr	r3, [r0, #0]
90019316:	2400      	movs	r4, #0
90019318:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
9001931c:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90019320:	f8ad 1004 	strh.w	r1, [sp, #4]
90019324:	4669      	mov	r1, sp
90019326:	691b      	ldr	r3, [r3, #16]
90019328:	9400      	str	r4, [sp, #0]
9001932a:	f8ad 2006 	strh.w	r2, [sp, #6]
9001932e:	4798      	blx	r3
90019330:	b002      	add	sp, #8
90019332:	bd10      	pop	{r4, pc}

90019334 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
90019334:	b538      	push	{r3, r4, r5, lr}
90019336:	680b      	ldr	r3, [r1, #0]
90019338:	460c      	mov	r4, r1
9001933a:	4605      	mov	r5, r0
9001933c:	68db      	ldr	r3, [r3, #12]
9001933e:	4798      	blx	r3
90019340:	6823      	ldr	r3, [r4, #0]
90019342:	4620      	mov	r0, r4
90019344:	4629      	mov	r1, r5
90019346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019348:	4798      	blx	r3
9001934a:	4628      	mov	r0, r5
9001934c:	bd38      	pop	{r3, r4, r5, pc}

9001934e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
9001934e:	b410      	push	{r4}
90019350:	880a      	ldrh	r2, [r1, #0]
90019352:	8884      	ldrh	r4, [r0, #4]
90019354:	4422      	add	r2, r4
90019356:	800a      	strh	r2, [r1, #0]
90019358:	884a      	ldrh	r2, [r1, #2]
9001935a:	88c4      	ldrh	r4, [r0, #6]
9001935c:	4422      	add	r2, r4
9001935e:	804a      	strh	r2, [r1, #2]
90019360:	6940      	ldr	r0, [r0, #20]
90019362:	b120      	cbz	r0, 9001936e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
90019364:	6803      	ldr	r3, [r0, #0]
90019366:	f85d 4b04 	ldr.w	r4, [sp], #4
9001936a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001936c:	4718      	bx	r3
9001936e:	f85d 4b04 	ldr.w	r4, [sp], #4
90019372:	4770      	bx	lr

90019374 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
90019374:	b570      	push	{r4, r5, r6, lr}
90019376:	8882      	ldrh	r2, [r0, #4]
90019378:	460c      	mov	r4, r1
9001937a:	880b      	ldrh	r3, [r1, #0]
9001937c:	4605      	mov	r5, r0
9001937e:	4413      	add	r3, r2
90019380:	800b      	strh	r3, [r1, #0]
90019382:	884b      	ldrh	r3, [r1, #2]
90019384:	88c2      	ldrh	r2, [r0, #6]
90019386:	4413      	add	r3, r2
90019388:	804b      	strh	r3, [r1, #2]
9001938a:	1d01      	adds	r1, r0, #4
9001938c:	4620      	mov	r0, r4
9001938e:	f7fb fb17 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90019392:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
90019396:	2b00      	cmp	r3, #0
90019398:	dd0b      	ble.n	900193b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
9001939a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
9001939e:	2b00      	cmp	r3, #0
900193a0:	dd07      	ble.n	900193b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900193a2:	6968      	ldr	r0, [r5, #20]
900193a4:	b128      	cbz	r0, 900193b2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
900193a6:	6803      	ldr	r3, [r0, #0]
900193a8:	4621      	mov	r1, r4
900193aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
900193ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900193b0:	4718      	bx	r3
900193b2:	bd70      	pop	{r4, r5, r6, pc}

900193b4 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
900193b4:	b570      	push	{r4, r5, r6, lr}
900193b6:	8882      	ldrh	r2, [r0, #4]
900193b8:	460c      	mov	r4, r1
900193ba:	880b      	ldrh	r3, [r1, #0]
900193bc:	4605      	mov	r5, r0
900193be:	4413      	add	r3, r2
900193c0:	800b      	strh	r3, [r1, #0]
900193c2:	884b      	ldrh	r3, [r1, #2]
900193c4:	88c2      	ldrh	r2, [r0, #6]
900193c6:	4413      	add	r3, r2
900193c8:	804b      	strh	r3, [r1, #2]
900193ca:	1d01      	adds	r1, r0, #4
900193cc:	4620      	mov	r0, r4
900193ce:	f7fb faf7 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900193d2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
900193d6:	2b00      	cmp	r3, #0
900193d8:	dd18      	ble.n	9001940c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900193da:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
900193de:	2b00      	cmp	r3, #0
900193e0:	dd14      	ble.n	9001940c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900193e2:	6968      	ldr	r0, [r5, #20]
900193e4:	b128      	cbz	r0, 900193f2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
900193e6:	6803      	ldr	r3, [r0, #0]
900193e8:	4621      	mov	r1, r4
900193ea:	691b      	ldr	r3, [r3, #16]
900193ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
900193f0:	4718      	bx	r3
900193f2:	4b07      	ldr	r3, [pc, #28]	; (90019410 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
900193f4:	681b      	ldr	r3, [r3, #0]
900193f6:	3304      	adds	r3, #4
900193f8:	429d      	cmp	r5, r3
900193fa:	d107      	bne.n	9001940c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
900193fc:	f7fe ff44 	bl	90018288 <_ZN8touchgfx11Application11getInstanceEv>
90019400:	6821      	ldr	r1, [r4, #0]
90019402:	6862      	ldr	r2, [r4, #4]
90019404:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019408:	f7ff b862 	b.w	900184d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
9001940c:	bd70      	pop	{r4, r5, r6, pc}
9001940e:	bf00      	nop
90019410:	24026fc8 	.word	0x24026fc8

90019414 <_ZN8touchgfx8Drawable12moveRelativeEss>:
90019414:	b570      	push	{r4, r5, r6, lr}
90019416:	4604      	mov	r4, r0
90019418:	4616      	mov	r6, r2
9001941a:	460d      	mov	r5, r1
9001941c:	b901      	cbnz	r1, 90019420 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
9001941e:	b192      	cbz	r2, 90019446 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
90019420:	6823      	ldr	r3, [r4, #0]
90019422:	4620      	mov	r0, r4
90019424:	699b      	ldr	r3, [r3, #24]
90019426:	4798      	blx	r3
90019428:	88e2      	ldrh	r2, [r4, #6]
9001942a:	88a1      	ldrh	r1, [r4, #4]
9001942c:	4620      	mov	r0, r4
9001942e:	4432      	add	r2, r6
90019430:	4429      	add	r1, r5
90019432:	b212      	sxth	r2, r2
90019434:	b209      	sxth	r1, r1
90019436:	f7fb fd93 	bl	90014f60 <_ZN8touchgfx8Drawable5setXYEss>
9001943a:	6823      	ldr	r3, [r4, #0]
9001943c:	4620      	mov	r0, r4
9001943e:	699b      	ldr	r3, [r3, #24]
90019440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
90019444:	4718      	bx	r3
90019446:	bd70      	pop	{r4, r5, r6, pc}

90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
90019448:	b510      	push	{r4, lr}
9001944a:	2300      	movs	r3, #0
9001944c:	4604      	mov	r4, r0
9001944e:	4608      	mov	r0, r1
90019450:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
90019454:	8023      	strh	r3, [r4, #0]
90019456:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
9001945a:	8063      	strh	r3, [r4, #2]
9001945c:	6803      	ldr	r3, [r0, #0]
9001945e:	80a1      	strh	r1, [r4, #4]
90019460:	4621      	mov	r1, r4
90019462:	80e2      	strh	r2, [r4, #6]
90019464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
90019466:	4798      	blx	r3
90019468:	4620      	mov	r0, r4
9001946a:	bd10      	pop	{r4, pc}

9001946c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
9001946c:	b530      	push	{r4, r5, lr}
9001946e:	8083      	strh	r3, [r0, #4]
90019470:	f8bd 300c 	ldrh.w	r3, [sp, #12]
90019474:	f89d 5018 	ldrb.w	r5, [sp, #24]
90019478:	80c3      	strh	r3, [r0, #6]
9001947a:	f89d 3010 	ldrb.w	r3, [sp, #16]
9001947e:	6141      	str	r1, [r0, #20]
90019480:	7203      	strb	r3, [r0, #8]
90019482:	f89d 3014 	ldrb.w	r3, [sp, #20]
90019486:	8302      	strh	r2, [r0, #24]
90019488:	7243      	strb	r3, [r0, #9]
9001948a:	7a83      	ldrb	r3, [r0, #10]
9001948c:	f365 0306 	bfi	r3, r5, #0, #7
90019490:	f89d 501c 	ldrb.w	r5, [sp, #28]
90019494:	f365 13c7 	bfi	r3, r5, #7, #1
90019498:	7283      	strb	r3, [r0, #10]
9001949a:	f89d 3020 	ldrb.w	r3, [sp, #32]
9001949e:	72c3      	strb	r3, [r0, #11]
900194a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
900194a4:	7303      	strb	r3, [r0, #12]
900194a6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
900194aa:	81c3      	strh	r3, [r0, #14]
900194ac:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
900194b0:	8203      	strh	r3, [r0, #16]
900194b2:	4b01      	ldr	r3, [pc, #4]	; (900194b8 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
900194b4:	6003      	str	r3, [r0, #0]
900194b6:	bd30      	pop	{r4, r5, pc}
900194b8:	9002b530 	.word	0x9002b530

900194bc <_ZNK8touchgfx9ConstFont4findEt>:
900194bc:	b5f0      	push	{r4, r5, r6, r7, lr}
900194be:	6944      	ldr	r4, [r0, #20]
900194c0:	b3bc      	cbz	r4, 90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194c2:	88a3      	ldrh	r3, [r4, #4]
900194c4:	8b02      	ldrh	r2, [r0, #24]
900194c6:	1acb      	subs	r3, r1, r3
900194c8:	f102 32ff 	add.w	r2, r2, #4294967295
900194cc:	d431      	bmi.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194ce:	4293      	cmp	r3, r2
900194d0:	dd0c      	ble.n	900194ec <_ZNK8touchgfx9ConstFont4findEt+0x30>
900194d2:	230e      	movs	r3, #14
900194d4:	fb03 4302 	mla	r3, r3, r2, r4
900194d8:	889b      	ldrh	r3, [r3, #4]
900194da:	1a5b      	subs	r3, r3, r1
900194dc:	1ad3      	subs	r3, r2, r3
900194de:	429a      	cmp	r2, r3
900194e0:	db27      	blt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194e2:	2b00      	cmp	r3, #0
900194e4:	bfbc      	itt	lt
900194e6:	2302      	movlt	r3, #2
900194e8:	fb92 f3f3 	sdivlt	r3, r2, r3
900194ec:	2500      	movs	r5, #0
900194ee:	260e      	movs	r6, #14
900194f0:	4295      	cmp	r5, r2
900194f2:	dc1e      	bgt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
900194f4:	fb06 4003 	mla	r0, r6, r3, r4
900194f8:	8887      	ldrh	r7, [r0, #4]
900194fa:	42b9      	cmp	r1, r7
900194fc:	d01a      	beq.n	90019534 <_ZNK8touchgfx9ConstFont4findEt+0x78>
900194fe:	d20d      	bcs.n	9001951c <_ZNK8touchgfx9ConstFont4findEt+0x60>
90019500:	1e5a      	subs	r2, r3, #1
90019502:	4295      	cmp	r5, r2
90019504:	dc15      	bgt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90019506:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
9001950a:	1a5b      	subs	r3, r3, r1
9001950c:	1ad3      	subs	r3, r2, r3
9001950e:	429a      	cmp	r2, r3
90019510:	db0f      	blt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90019512:	429d      	cmp	r5, r3
90019514:	ddec      	ble.n	900194f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90019516:	1953      	adds	r3, r2, r5
90019518:	105b      	asrs	r3, r3, #1
9001951a:	e7e9      	b.n	900194f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
9001951c:	1c5d      	adds	r5, r3, #1
9001951e:	42aa      	cmp	r2, r5
90019520:	db07      	blt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
90019522:	8a43      	ldrh	r3, [r0, #18]
90019524:	1acb      	subs	r3, r1, r3
90019526:	442b      	add	r3, r5
90019528:	429d      	cmp	r5, r3
9001952a:	dc02      	bgt.n	90019532 <_ZNK8touchgfx9ConstFont4findEt+0x76>
9001952c:	429a      	cmp	r2, r3
9001952e:	dadf      	bge.n	900194f0 <_ZNK8touchgfx9ConstFont4findEt+0x34>
90019530:	e7f1      	b.n	90019516 <_ZNK8touchgfx9ConstFont4findEt+0x5a>
90019532:	2000      	movs	r0, #0
90019534:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019536 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
90019536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90019538:	4604      	mov	r4, r0
9001953a:	4617      	mov	r7, r2
9001953c:	461e      	mov	r6, r3
9001953e:	b911      	cbnz	r1, 90019546 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
90019540:	2500      	movs	r5, #0
90019542:	4628      	mov	r0, r5
90019544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90019546:	290a      	cmp	r1, #10
90019548:	d0fa      	beq.n	90019540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001954a:	f64f 62ff 	movw	r2, #65279	; 0xfeff
9001954e:	4291      	cmp	r1, r2
90019550:	d0f6      	beq.n	90019540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019552:	f242 020b 	movw	r2, #8203	; 0x200b
90019556:	4291      	cmp	r1, r2
90019558:	d0f2      	beq.n	90019540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
9001955a:	f7ff ffaf 	bl	900194bc <_ZNK8touchgfx9ConstFont4findEt>
9001955e:	4605      	mov	r5, r0
90019560:	b950      	cbnz	r0, 90019578 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
90019562:	6823      	ldr	r3, [r4, #0]
90019564:	4620      	mov	r0, r4
90019566:	691b      	ldr	r3, [r3, #16]
90019568:	4798      	blx	r3
9001956a:	4601      	mov	r1, r0
9001956c:	4620      	mov	r0, r4
9001956e:	f7ff ffa5 	bl	900194bc <_ZNK8touchgfx9ConstFont4findEt>
90019572:	4605      	mov	r5, r0
90019574:	2800      	cmp	r0, #0
90019576:	d0e3      	beq.n	90019540 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
90019578:	6823      	ldr	r3, [r4, #0]
9001957a:	4629      	mov	r1, r5
9001957c:	4620      	mov	r0, r4
9001957e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
90019580:	4798      	blx	r3
90019582:	6038      	str	r0, [r7, #0]
90019584:	6823      	ldr	r3, [r4, #0]
90019586:	4620      	mov	r0, r4
90019588:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
9001958a:	4798      	blx	r3
9001958c:	7030      	strb	r0, [r6, #0]
9001958e:	e7d8      	b.n	90019542 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

90019590 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
90019590:	b538      	push	{r3, r4, r5, lr}
90019592:	4605      	mov	r5, r0
90019594:	f002 f83c 	bl	9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>
90019598:	4604      	mov	r4, r0
9001959a:	4628      	mov	r0, r5
9001959c:	f001 ff7c 	bl	9001b498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
900195a0:	2800      	cmp	r0, #0
900195a2:	bf14      	ite	ne
900195a4:	2002      	movne	r0, #2
900195a6:	2000      	moveq	r0, #0
900195a8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
900195ac:	b280      	uxth	r0, r0
900195ae:	bd38      	pop	{r3, r4, r5, pc}

900195b0 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
900195b0:	b538      	push	{r3, r4, r5, lr}
900195b2:	4605      	mov	r5, r0
900195b4:	f002 f82c 	bl	9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>
900195b8:	4604      	mov	r4, r0
900195ba:	4628      	mov	r0, r5
900195bc:	f001 ff6c 	bl	9001b498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
900195c0:	2800      	cmp	r0, #0
900195c2:	bf14      	ite	ne
900195c4:	2002      	movne	r0, #2
900195c6:	2000      	moveq	r0, #0
900195c8:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
900195cc:	f040 0001 	orr.w	r0, r0, #1
900195d0:	b280      	uxth	r0, r0
900195d2:	bd38      	pop	{r3, r4, r5, pc}

900195d4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
900195d4:	2000      	movs	r0, #0
900195d6:	4770      	bx	lr

900195d8 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
900195d8:	2001      	movs	r0, #1
900195da:	4770      	bx	lr

900195dc <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
900195dc:	2002      	movs	r0, #2
900195de:	4770      	bx	lr

900195e0 <_ZN8touchgfx6ScreenD1Ev>:
900195e0:	4770      	bx	lr

900195e2 <_ZN8touchgfx6Screen11setupScreenEv>:
900195e2:	4770      	bx	lr

900195e4 <_ZN8touchgfx12GestureEventD1Ev>:
900195e4:	4770      	bx	lr

900195e6 <_ZN8touchgfx9DragEventD1Ev>:
900195e6:	4770      	bx	lr

900195e8 <_ZN8touchgfx10ClickEventD1Ev>:
900195e8:	4770      	bx	lr

900195ea <_ZN8touchgfx10ClickEventD0Ev>:
900195ea:	b510      	push	{r4, lr}
900195ec:	4604      	mov	r4, r0
900195ee:	210c      	movs	r1, #12
900195f0:	f00d fc7f 	bl	90026ef2 <_ZdlPvj>
900195f4:	4620      	mov	r0, r4
900195f6:	bd10      	pop	{r4, pc}

900195f8 <_ZN8touchgfx9DragEventD0Ev>:
900195f8:	b510      	push	{r4, lr}
900195fa:	4604      	mov	r4, r0
900195fc:	2110      	movs	r1, #16
900195fe:	f00d fc78 	bl	90026ef2 <_ZdlPvj>
90019602:	4620      	mov	r0, r4
90019604:	bd10      	pop	{r4, pc}

90019606 <_ZN8touchgfx12GestureEventD0Ev>:
90019606:	b510      	push	{r4, lr}
90019608:	4604      	mov	r4, r0
9001960a:	210c      	movs	r1, #12
9001960c:	f00d fc71 	bl	90026ef2 <_ZdlPvj>
90019610:	4620      	mov	r0, r4
90019612:	bd10      	pop	{r4, pc}

90019614 <_ZN8touchgfx6ScreenD0Ev>:
90019614:	b510      	push	{r4, lr}
90019616:	4604      	mov	r4, r0
90019618:	213c      	movs	r1, #60	; 0x3c
9001961a:	f00d fc6a 	bl	90026ef2 <_ZdlPvj>
9001961e:	4620      	mov	r0, r4
90019620:	bd10      	pop	{r4, pc}
	...

90019624 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
90019624:	b530      	push	{r4, r5, lr}
90019626:	460d      	mov	r5, r1
90019628:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001962a:	b087      	sub	sp, #28
9001962c:	4604      	mov	r4, r0
9001962e:	b301      	cbz	r1, 90019672 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
90019630:	a801      	add	r0, sp, #4
90019632:	f7ff ff09 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019636:	892a      	ldrh	r2, [r5, #8]
90019638:	f8bd 3004 	ldrh.w	r3, [sp, #4]
9001963c:	7928      	ldrb	r0, [r5, #4]
9001963e:	1ad2      	subs	r2, r2, r3
90019640:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
90019642:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
90019646:	441a      	add	r2, r3
90019648:	896b      	ldrh	r3, [r5, #10]
9001964a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
9001964e:	f88d 0010 	strb.w	r0, [sp, #16]
90019652:	1b5b      	subs	r3, r3, r5
90019654:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
90019656:	6b20      	ldr	r0, [r4, #48]	; 0x30
90019658:	442b      	add	r3, r5
9001965a:	4d07      	ldr	r5, [pc, #28]	; (90019678 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
9001965c:	f8ad 1012 	strh.w	r1, [sp, #18]
90019660:	a903      	add	r1, sp, #12
90019662:	9503      	str	r5, [sp, #12]
90019664:	f8ad 2014 	strh.w	r2, [sp, #20]
90019668:	f8ad 3016 	strh.w	r3, [sp, #22]
9001966c:	6803      	ldr	r3, [r0, #0]
9001966e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
90019670:	4798      	blx	r3
90019672:	b007      	add	sp, #28
90019674:	bd30      	pop	{r4, r5, pc}
90019676:	bf00      	nop
90019678:	9002b5b8 	.word	0x9002b5b8

9001967c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
9001967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019680:	6b03      	ldr	r3, [r0, #48]	; 0x30
90019682:	b08a      	sub	sp, #40	; 0x28
90019684:	4604      	mov	r4, r0
90019686:	460d      	mov	r5, r1
90019688:	b113      	cbz	r3, 90019690 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
9001968a:	790b      	ldrb	r3, [r1, #4]
9001968c:	2b00      	cmp	r3, #0
9001968e:	d044      	beq.n	9001971a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019690:	f104 0804 	add.w	r8, r4, #4
90019694:	a803      	add	r0, sp, #12
90019696:	4641      	mov	r1, r8
90019698:	f7ff fed6 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001969c:	792b      	ldrb	r3, [r5, #4]
9001969e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
900196a2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
900196a6:	b983      	cbnz	r3, 900196ca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
900196a8:	f104 0336 	add.w	r3, r4, #54	; 0x36
900196ac:	892a      	ldrh	r2, [r5, #8]
900196ae:	88e9      	ldrh	r1, [r5, #6]
900196b0:	4640      	mov	r0, r8
900196b2:	1b92      	subs	r2, r2, r6
900196b4:	9301      	str	r3, [sp, #4]
900196b6:	1bc9      	subs	r1, r1, r7
900196b8:	f104 0334 	add.w	r3, r4, #52	; 0x34
900196bc:	b212      	sxth	r2, r2
900196be:	9300      	str	r3, [sp, #0]
900196c0:	b209      	sxth	r1, r1
900196c2:	f104 0330 	add.w	r3, r4, #48	; 0x30
900196c6:	f7fb f899 	bl	900147fc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
900196ca:	6b21      	ldr	r1, [r4, #48]	; 0x30
900196cc:	b329      	cbz	r1, 9001971a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
900196ce:	a805      	add	r0, sp, #20
900196d0:	f7ff feba 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900196d4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
900196d8:	792b      	ldrb	r3, [r5, #4]
900196da:	a907      	add	r1, sp, #28
900196dc:	1abf      	subs	r7, r7, r2
900196de:	88ea      	ldrh	r2, [r5, #6]
900196e0:	6b20      	ldr	r0, [r4, #48]	; 0x30
900196e2:	4417      	add	r7, r2
900196e4:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
900196e6:	f88d 3020 	strb.w	r3, [sp, #32]
900196ea:	4417      	add	r7, r2
900196ec:	f8bd 2016 	ldrh.w	r2, [sp, #22]
900196f0:	1ab6      	subs	r6, r6, r2
900196f2:	892a      	ldrh	r2, [r5, #8]
900196f4:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
900196f8:	4416      	add	r6, r2
900196fa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
900196fc:	4416      	add	r6, r2
900196fe:	4a08      	ldr	r2, [pc, #32]	; (90019720 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
90019700:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
90019704:	2600      	movs	r6, #0
90019706:	9207      	str	r2, [sp, #28]
90019708:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
9001970c:	6803      	ldr	r3, [r0, #0]
9001970e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
90019710:	4798      	blx	r3
90019712:	792b      	ldrb	r3, [r5, #4]
90019714:	b10b      	cbz	r3, 9001971a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
90019716:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
9001971a:	b00a      	add	sp, #40	; 0x28
9001971c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019720:	9002b590 	.word	0x9002b590

90019724 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
90019724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90019728:	460c      	mov	r4, r1
9001972a:	6b01      	ldr	r1, [r0, #48]	; 0x30
9001972c:	b088      	sub	sp, #32
9001972e:	4605      	mov	r5, r0
90019730:	2900      	cmp	r1, #0
90019732:	d06d      	beq.n	90019810 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
90019734:	4668      	mov	r0, sp
90019736:	f7ff fe87 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001973a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
9001973c:	88e3      	ldrh	r3, [r4, #6]
9001973e:	f9bd 8000 	ldrsh.w	r8, [sp]
90019742:	440b      	add	r3, r1
90019744:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
90019748:	b21b      	sxth	r3, r3
9001974a:	4543      	cmp	r3, r8
9001974c:	db31      	blt.n	900197b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001974e:	f8bd c004 	ldrh.w	ip, [sp, #4]
90019752:	44c4      	add	ip, r8
90019754:	fa0f fc8c 	sxth.w	ip, ip
90019758:	4563      	cmp	r3, ip
9001975a:	da2a      	bge.n	900197b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
9001975c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
9001975e:	8926      	ldrh	r6, [r4, #8]
90019760:	4416      	add	r6, r2
90019762:	b236      	sxth	r6, r6
90019764:	42be      	cmp	r6, r7
90019766:	db24      	blt.n	900197b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019768:	f8bd 0006 	ldrh.w	r0, [sp, #6]
9001976c:	4438      	add	r0, r7
9001976e:	b200      	sxth	r0, r0
90019770:	4286      	cmp	r6, r0
90019772:	da1e      	bge.n	900197b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019774:	8963      	ldrh	r3, [r4, #10]
90019776:	4419      	add	r1, r3
90019778:	b209      	sxth	r1, r1
9001977a:	4541      	cmp	r1, r8
9001977c:	db08      	blt.n	90019790 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001977e:	4561      	cmp	r1, ip
90019780:	da06      	bge.n	90019790 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
90019782:	89a3      	ldrh	r3, [r4, #12]
90019784:	441a      	add	r2, r3
90019786:	b212      	sxth	r2, r2
90019788:	42ba      	cmp	r2, r7
9001978a:	db01      	blt.n	90019790 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
9001978c:	4282      	cmp	r2, r0
9001978e:	db10      	blt.n	900197b2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
90019790:	4b21      	ldr	r3, [pc, #132]	; (90019818 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
90019792:	a904      	add	r1, sp, #16
90019794:	6b28      	ldr	r0, [r5, #48]	; 0x30
90019796:	9304      	str	r3, [sp, #16]
90019798:	2302      	movs	r3, #2
9001979a:	f88d 3014 	strb.w	r3, [sp, #20]
9001979e:	2300      	movs	r3, #0
900197a0:	f8ad 3016 	strh.w	r3, [sp, #22]
900197a4:	f8ad 3018 	strh.w	r3, [sp, #24]
900197a8:	f8ad 301a 	strh.w	r3, [sp, #26]
900197ac:	6803      	ldr	r3, [r0, #0]
900197ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
900197b0:	4798      	blx	r3
900197b2:	1d29      	adds	r1, r5, #4
900197b4:	a802      	add	r0, sp, #8
900197b6:	f7ff fe47 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
900197ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
900197be:	88e0      	ldrh	r0, [r4, #6]
900197c0:	eba3 0808 	sub.w	r8, r3, r8
900197c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900197c8:	7921      	ldrb	r1, [r4, #4]
900197ca:	fa1f f888 	uxth.w	r8, r8
900197ce:	1bdf      	subs	r7, r3, r7
900197d0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
900197d4:	b2bb      	uxth	r3, r7
900197d6:	4440      	add	r0, r8
900197d8:	8922      	ldrh	r2, [r4, #8]
900197da:	8967      	ldrh	r7, [r4, #10]
900197dc:	4460      	add	r0, ip
900197de:	89a4      	ldrh	r4, [r4, #12]
900197e0:	441a      	add	r2, r3
900197e2:	8eee      	ldrh	r6, [r5, #54]	; 0x36
900197e4:	44b8      	add	r8, r7
900197e6:	4423      	add	r3, r4
900197e8:	f8ad 0016 	strh.w	r0, [sp, #22]
900197ec:	4432      	add	r2, r6
900197ee:	44e0      	add	r8, ip
900197f0:	4433      	add	r3, r6
900197f2:	4c0a      	ldr	r4, [pc, #40]	; (9001981c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
900197f4:	6b28      	ldr	r0, [r5, #48]	; 0x30
900197f6:	f88d 1014 	strb.w	r1, [sp, #20]
900197fa:	a904      	add	r1, sp, #16
900197fc:	9404      	str	r4, [sp, #16]
900197fe:	f8ad 2018 	strh.w	r2, [sp, #24]
90019802:	f8ad 801a 	strh.w	r8, [sp, #26]
90019806:	f8ad 301c 	strh.w	r3, [sp, #28]
9001980a:	6803      	ldr	r3, [r0, #0]
9001980c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
9001980e:	4798      	blx	r3
90019810:	b008      	add	sp, #32
90019812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90019816:	bf00      	nop
90019818:	9002b590 	.word	0x9002b590
9001981c:	9002b5a4 	.word	0x9002b5a4

90019820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
90019820:	b537      	push	{r0, r1, r2, r4, r5, lr}
90019822:	4604      	mov	r4, r0
90019824:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
90019828:	3201      	adds	r2, #1
9001982a:	d112      	bne.n	90019852 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
9001982c:	2500      	movs	r5, #0
9001982e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
90019832:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90019836:	6803      	ldr	r3, [r0, #0]
90019838:	9500      	str	r5, [sp, #0]
9001983a:	466d      	mov	r5, sp
9001983c:	f8ad 1004 	strh.w	r1, [sp, #4]
90019840:	f8ad 2006 	strh.w	r2, [sp, #6]
90019844:	4629      	mov	r1, r5
90019846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
90019848:	4798      	blx	r3
9001984a:	e895 0003 	ldmia.w	r5, {r0, r1}
9001984e:	e884 0003 	stmia.w	r4, {r0, r1}
90019852:	4620      	mov	r0, r4
90019854:	b003      	add	sp, #12
90019856:	bd30      	pop	{r4, r5, pc}

90019858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
90019858:	b513      	push	{r0, r1, r4, lr}
9001985a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
9001985e:	4604      	mov	r4, r0
90019860:	3301      	adds	r3, #1
90019862:	d109      	bne.n	90019878 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
90019864:	4601      	mov	r1, r0
90019866:	4668      	mov	r0, sp
90019868:	f7ff fdee 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
9001986c:	f8bd 3000 	ldrh.w	r3, [sp]
90019870:	8423      	strh	r3, [r4, #32]
90019872:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019876:	8463      	strh	r3, [r4, #34]	; 0x22
90019878:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
9001987c:	b002      	add	sp, #8
9001987e:	bd10      	pop	{r4, pc}

90019880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
90019880:	b513      	push	{r0, r1, r4, lr}
90019882:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
90019886:	4604      	mov	r4, r0
90019888:	3301      	adds	r3, #1
9001988a:	d109      	bne.n	900198a0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
9001988c:	4601      	mov	r1, r0
9001988e:	4668      	mov	r0, sp
90019890:	f7ff fdda 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019894:	f8bd 3000 	ldrh.w	r3, [sp]
90019898:	8423      	strh	r3, [r4, #32]
9001989a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
9001989e:	8463      	strh	r3, [r4, #34]	; 0x22
900198a0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
900198a4:	b002      	add	sp, #8
900198a6:	bd10      	pop	{r4, pc}

900198a8 <_ZN8touchgfx6ScreenC1Ev>:
900198a8:	b570      	push	{r4, r5, r6, lr}
900198aa:	4b17      	ldr	r3, [pc, #92]	; (90019908 <_ZN8touchgfx6ScreenC1Ev+0x60>)
900198ac:	4605      	mov	r5, r0
900198ae:	4a17      	ldr	r2, [pc, #92]	; (9001990c <_ZN8touchgfx6ScreenC1Ev+0x64>)
900198b0:	2101      	movs	r1, #1
900198b2:	f845 3b04 	str.w	r3, [r5], #4
900198b6:	2300      	movs	r3, #0
900198b8:	6042      	str	r2, [r0, #4]
900198ba:	4604      	mov	r4, r0
900198bc:	8103      	strh	r3, [r0, #8]
900198be:	8143      	strh	r3, [r0, #10]
900198c0:	8183      	strh	r3, [r0, #12]
900198c2:	81c3      	strh	r3, [r0, #14]
900198c4:	8203      	strh	r3, [r0, #16]
900198c6:	8243      	strh	r3, [r0, #18]
900198c8:	8283      	strh	r3, [r0, #20]
900198ca:	82c3      	strh	r3, [r0, #22]
900198cc:	6203      	str	r3, [r0, #32]
900198ce:	8483      	strh	r3, [r0, #36]	; 0x24
900198d0:	84c3      	strh	r3, [r0, #38]	; 0x26
900198d2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
900198d6:	6343      	str	r3, [r0, #52]	; 0x34
900198d8:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
900198dc:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
900198e0:	e9c0 3306 	strd	r3, r3, [r0, #24]
900198e4:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
900198e8:	4b09      	ldr	r3, [pc, #36]	; (90019910 <_ZN8touchgfx6ScreenC1Ev+0x68>)
900198ea:	4628      	mov	r0, r5
900198ec:	f9b3 6000 	ldrsh.w	r6, [r3]
900198f0:	6b93      	ldr	r3, [r2, #56]	; 0x38
900198f2:	4a08      	ldr	r2, [pc, #32]	; (90019914 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
900198f4:	f9b2 1000 	ldrsh.w	r1, [r2]
900198f8:	4798      	blx	r3
900198fa:	6863      	ldr	r3, [r4, #4]
900198fc:	4628      	mov	r0, r5
900198fe:	4631      	mov	r1, r6
90019900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
90019902:	4798      	blx	r3
90019904:	4620      	mov	r0, r4
90019906:	bd70      	pop	{r4, r5, r6, pc}
90019908:	9002b5cc 	.word	0x9002b5cc
9001990c:	9002b1e4 	.word	0x9002b1e4
90019910:	24026f82 	.word	0x24026f82
90019914:	24026f80 	.word	0x24026f80

90019918 <_ZN8touchgfx6Screen4drawEv>:
90019918:	4b09      	ldr	r3, [pc, #36]	; (90019940 <_ZN8touchgfx6Screen4drawEv+0x28>)
9001991a:	b507      	push	{r0, r1, r2, lr}
9001991c:	f9b3 2000 	ldrsh.w	r2, [r3]
90019920:	2100      	movs	r1, #0
90019922:	4b08      	ldr	r3, [pc, #32]	; (90019944 <_ZN8touchgfx6Screen4drawEv+0x2c>)
90019924:	9100      	str	r1, [sp, #0]
90019926:	4669      	mov	r1, sp
90019928:	f9b3 3000 	ldrsh.w	r3, [r3]
9001992c:	f8ad 2004 	strh.w	r2, [sp, #4]
90019930:	f8ad 3006 	strh.w	r3, [sp, #6]
90019934:	6803      	ldr	r3, [r0, #0]
90019936:	689b      	ldr	r3, [r3, #8]
90019938:	4798      	blx	r3
9001993a:	b003      	add	sp, #12
9001993c:	f85d fb04 	ldr.w	pc, [sp], #4
90019940:	24026f80 	.word	0x24026f80
90019944:	24026f82 	.word	0x24026f82

90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
90019948:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001994c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
90019950:	b089      	sub	sp, #36	; 0x24
90019952:	4680      	mov	r8, r0
90019954:	460c      	mov	r4, r1
90019956:	2b00      	cmp	r3, #0
90019958:	4615      	mov	r5, r2
9001995a:	dd0e      	ble.n	9001997a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
9001995c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
90019960:	2b00      	cmp	r3, #0
90019962:	dd0a      	ble.n	9001997a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019964:	4628      	mov	r0, r5
90019966:	f7ff ff5b 	bl	90019820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
9001996a:	4621      	mov	r1, r4
9001996c:	f7fe fbad 	bl	900180ca <_ZNK8touchgfx4Rect9intersectERKS0_>
90019970:	69eb      	ldr	r3, [r5, #28]
90019972:	b928      	cbnz	r0, 90019980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
90019974:	461d      	mov	r5, r3
90019976:	2b00      	cmp	r3, #0
90019978:	d1f4      	bne.n	90019964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
9001997a:	b009      	add	sp, #36	; 0x24
9001997c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90019980:	ae04      	add	r6, sp, #16
90019982:	2b00      	cmp	r3, #0
90019984:	f000 80b5 	beq.w	90019af2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019988:	682b      	ldr	r3, [r5, #0]
9001998a:	4629      	mov	r1, r5
9001998c:	a802      	add	r0, sp, #8
9001998e:	68db      	ldr	r3, [r3, #12]
90019990:	4798      	blx	r3
90019992:	4628      	mov	r0, r5
90019994:	f7ff ff60 	bl	90019858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019998:	f8bd 7008 	ldrh.w	r7, [sp, #8]
9001999c:	4407      	add	r7, r0
9001999e:	4628      	mov	r0, r5
900199a0:	f7ff ff6e 	bl	90019880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
900199a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
900199a8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
900199ac:	b23f      	sxth	r7, r7
900199ae:	4418      	add	r0, r3
900199b0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
900199b4:	4621      	mov	r1, r4
900199b6:	f8ad 2014 	strh.w	r2, [sp, #20]
900199ba:	f8ad 0012 	strh.w	r0, [sp, #18]
900199be:	4630      	mov	r0, r6
900199c0:	f8ad 3016 	strh.w	r3, [sp, #22]
900199c4:	f8ad 7010 	strh.w	r7, [sp, #16]
900199c8:	f7fa fffa 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900199cc:	4628      	mov	r0, r5
900199ce:	f7ff ff27 	bl	90019820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
900199d2:	ab06      	add	r3, sp, #24
900199d4:	4602      	mov	r2, r0
900199d6:	e896 0003 	ldmia.w	r6, {r0, r1}
900199da:	e883 0003 	stmia.w	r3, {r0, r1}
900199de:	4611      	mov	r1, r2
900199e0:	4618      	mov	r0, r3
900199e2:	f7fa ffed 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
900199e6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900199ea:	f9b4 1000 	ldrsh.w	r1, [r4]
900199ee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
900199f2:	4299      	cmp	r1, r3
900199f4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
900199f8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
900199fc:	d10b      	bne.n	90019a16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
900199fe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019a02:	4552      	cmp	r2, sl
90019a04:	d107      	bne.n	90019a16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019a06:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
90019a0a:	455a      	cmp	r2, fp
90019a0c:	d103      	bne.n	90019a16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
90019a0e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
90019a12:	454a      	cmp	r2, r9
90019a14:	d06d      	beq.n	90019af2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019a16:	f1bb 0f00 	cmp.w	fp, #0
90019a1a:	dd65      	ble.n	90019ae8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019a1c:	f1b9 0f00 	cmp.w	r9, #0
90019a20:	dd62      	ble.n	90019ae8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
90019a22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
90019a26:	fa1f f08a 	uxth.w	r0, sl
90019a2a:	4552      	cmp	r2, sl
90019a2c:	9000      	str	r0, [sp, #0]
90019a2e:	da12      	bge.n	90019a56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
90019a30:	9301      	str	r3, [sp, #4]
90019a32:	9b00      	ldr	r3, [sp, #0]
90019a34:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019a38:	f8ad 2012 	strh.w	r2, [sp, #18]
90019a3c:	1a9a      	subs	r2, r3, r2
90019a3e:	f8ad 1010 	strh.w	r1, [sp, #16]
90019a42:	4631      	mov	r1, r6
90019a44:	f8ad 0014 	strh.w	r0, [sp, #20]
90019a48:	4640      	mov	r0, r8
90019a4a:	f8ad 2016 	strh.w	r2, [sp, #22]
90019a4e:	69ea      	ldr	r2, [r5, #28]
90019a50:	f7ff ff7a 	bl	90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019a54:	9b01      	ldr	r3, [sp, #4]
90019a56:	f9b4 2000 	ldrsh.w	r2, [r4]
90019a5a:	b29f      	uxth	r7, r3
90019a5c:	429a      	cmp	r2, r3
90019a5e:	da0d      	bge.n	90019a7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
90019a60:	f8ad 2010 	strh.w	r2, [sp, #16]
90019a64:	1aba      	subs	r2, r7, r2
90019a66:	f8ad a012 	strh.w	sl, [sp, #18]
90019a6a:	4631      	mov	r1, r6
90019a6c:	f8ad 2014 	strh.w	r2, [sp, #20]
90019a70:	4640      	mov	r0, r8
90019a72:	f8ad 9016 	strh.w	r9, [sp, #22]
90019a76:	69ea      	ldr	r2, [r5, #28]
90019a78:	f7ff ff66 	bl	90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019a7c:	8822      	ldrh	r2, [r4, #0]
90019a7e:	445f      	add	r7, fp
90019a80:	88a3      	ldrh	r3, [r4, #4]
90019a82:	b2bf      	uxth	r7, r7
90019a84:	4413      	add	r3, r2
90019a86:	b23a      	sxth	r2, r7
90019a88:	b29b      	uxth	r3, r3
90019a8a:	b219      	sxth	r1, r3
90019a8c:	4291      	cmp	r1, r2
90019a8e:	dd0d      	ble.n	90019aac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
90019a90:	1bdb      	subs	r3, r3, r7
90019a92:	f8ad 2010 	strh.w	r2, [sp, #16]
90019a96:	f8ad a012 	strh.w	sl, [sp, #18]
90019a9a:	4631      	mov	r1, r6
90019a9c:	f8ad 3014 	strh.w	r3, [sp, #20]
90019aa0:	4640      	mov	r0, r8
90019aa2:	f8ad 9016 	strh.w	r9, [sp, #22]
90019aa6:	69ea      	ldr	r2, [r5, #28]
90019aa8:	f7ff ff4e 	bl	90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019aac:	88e2      	ldrh	r2, [r4, #6]
90019aae:	8863      	ldrh	r3, [r4, #2]
90019ab0:	4413      	add	r3, r2
90019ab2:	9a00      	ldr	r2, [sp, #0]
90019ab4:	444a      	add	r2, r9
90019ab6:	b29b      	uxth	r3, r3
90019ab8:	fa1f f982 	uxth.w	r9, r2
90019abc:	b219      	sxth	r1, r3
90019abe:	fa0f f289 	sxth.w	r2, r9
90019ac2:	428a      	cmp	r2, r1
90019ac4:	da15      	bge.n	90019af2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
90019ac6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90019aca:	eba3 0309 	sub.w	r3, r3, r9
90019ace:	f9b4 0000 	ldrsh.w	r0, [r4]
90019ad2:	f8ad 1014 	strh.w	r1, [sp, #20]
90019ad6:	4631      	mov	r1, r6
90019ad8:	f8ad 0010 	strh.w	r0, [sp, #16]
90019adc:	f8ad 2012 	strh.w	r2, [sp, #18]
90019ae0:	f8ad 3016 	strh.w	r3, [sp, #22]
90019ae4:	69ea      	ldr	r2, [r5, #28]
90019ae6:	e001      	b.n	90019aec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
90019ae8:	69ea      	ldr	r2, [r5, #28]
90019aea:	4621      	mov	r1, r4
90019aec:	4640      	mov	r0, r8
90019aee:	f7ff ff2b 	bl	90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019af2:	4628      	mov	r0, r5
90019af4:	f7ff fe94 	bl	90019820 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
90019af8:	6861      	ldr	r1, [r4, #4]
90019afa:	4602      	mov	r2, r0
90019afc:	4633      	mov	r3, r6
90019afe:	6820      	ldr	r0, [r4, #0]
90019b00:	c303      	stmia	r3!, {r0, r1}
90019b02:	4611      	mov	r1, r2
90019b04:	4630      	mov	r0, r6
90019b06:	f7fa ff5b 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90019b0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
90019b0e:	2b00      	cmp	r3, #0
90019b10:	f77f af33 	ble.w	9001997a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019b14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
90019b18:	2b00      	cmp	r3, #0
90019b1a:	f77f af2e 	ble.w	9001997a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
90019b1e:	4628      	mov	r0, r5
90019b20:	f7ff fe9a 	bl	90019858 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
90019b24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
90019b28:	1a18      	subs	r0, r3, r0
90019b2a:	f8ad 0010 	strh.w	r0, [sp, #16]
90019b2e:	4628      	mov	r0, r5
90019b30:	f7ff fea6 	bl	90019880 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
90019b34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
90019b38:	4631      	mov	r1, r6
90019b3a:	1a18      	subs	r0, r3, r0
90019b3c:	f8ad 0012 	strh.w	r0, [sp, #18]
90019b40:	4628      	mov	r0, r5
90019b42:	682b      	ldr	r3, [r5, #0]
90019b44:	689b      	ldr	r3, [r3, #8]
90019b46:	4798      	blx	r3
90019b48:	e717      	b.n	9001997a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

90019b4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
90019b4a:	b570      	push	{r4, r5, r6, lr}
90019b4c:	1d06      	adds	r6, r0, #4
90019b4e:	b086      	sub	sp, #24
90019b50:	460c      	mov	r4, r1
90019b52:	2300      	movs	r3, #0
90019b54:	4631      	mov	r1, r6
90019b56:	4605      	mov	r5, r0
90019b58:	a802      	add	r0, sp, #8
90019b5a:	9301      	str	r3, [sp, #4]
90019b5c:	f7ff fc74 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019b60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
90019b64:	8822      	ldrh	r2, [r4, #0]
90019b66:	f8bd 100a 	ldrh.w	r1, [sp, #10]
90019b6a:	1ad2      	subs	r2, r2, r3
90019b6c:	8863      	ldrh	r3, [r4, #2]
90019b6e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
90019b72:	1a5b      	subs	r3, r3, r1
90019b74:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
90019b78:	f8ad 2010 	strh.w	r2, [sp, #16]
90019b7c:	aa01      	add	r2, sp, #4
90019b7e:	f8ad 0014 	strh.w	r0, [sp, #20]
90019b82:	4630      	mov	r0, r6
90019b84:	f8ad 1016 	strh.w	r1, [sp, #22]
90019b88:	a904      	add	r1, sp, #16
90019b8a:	f8ad 3012 	strh.w	r3, [sp, #18]
90019b8e:	f7fa ffef 	bl	90014b70 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
90019b92:	9a01      	ldr	r2, [sp, #4]
90019b94:	b11a      	cbz	r2, 90019b9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
90019b96:	4621      	mov	r1, r4
90019b98:	4628      	mov	r0, r5
90019b9a:	f7ff fed5 	bl	90019948 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
90019b9e:	b006      	add	sp, #24
90019ba0:	bd70      	pop	{r4, r5, r6, pc}

90019ba2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
90019ba2:	4602      	mov	r2, r0
90019ba4:	b530      	push	{r4, r5, lr}
90019ba6:	4604      	mov	r4, r0
90019ba8:	b085      	sub	sp, #20
90019baa:	f852 0f08 	ldr.w	r0, [r2, #8]!
90019bae:	460d      	mov	r5, r1
90019bb0:	466b      	mov	r3, sp
90019bb2:	6851      	ldr	r1, [r2, #4]
90019bb4:	c303      	stmia	r3!, {r0, r1}
90019bb6:	4629      	mov	r1, r5
90019bb8:	4668      	mov	r0, sp
90019bba:	f7fa ff01 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
90019bbe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
90019bc2:	b12b      	cbz	r3, 90019bd0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
90019bc4:	4669      	mov	r1, sp
90019bc6:	4620      	mov	r0, r4
90019bc8:	f7ff ffbf 	bl	90019b4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
90019bcc:	b005      	add	sp, #20
90019bce:	bd30      	pop	{r4, r5, pc}
90019bd0:	3404      	adds	r4, #4
90019bd2:	a802      	add	r0, sp, #8
90019bd4:	4621      	mov	r1, r4
90019bd6:	f7ff fc37 	bl	90019448 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
90019bda:	f8bd 3000 	ldrh.w	r3, [sp]
90019bde:	f8bd 2008 	ldrh.w	r2, [sp, #8]
90019be2:	4669      	mov	r1, sp
90019be4:	4620      	mov	r0, r4
90019be6:	1a9b      	subs	r3, r3, r2
90019be8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
90019bec:	f8ad 3000 	strh.w	r3, [sp]
90019bf0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
90019bf4:	1a9b      	subs	r3, r3, r2
90019bf6:	f8ad 3002 	strh.w	r3, [sp, #2]
90019bfa:	f7fa ff80 	bl	90014afe <_ZNK8touchgfx9Container4drawERKNS_4RectE>
90019bfe:	e7e5      	b.n	90019bcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

90019c00 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
90019c00:	460b      	mov	r3, r1
90019c02:	680a      	ldr	r2, [r1, #0]
90019c04:	1d01      	adds	r1, r0, #4
90019c06:	6992      	ldr	r2, [r2, #24]
90019c08:	4618      	mov	r0, r3
90019c0a:	4710      	bx	r2

90019c0c <_ZN8touchgfx12TextProviderC1Ev>:
90019c0c:	b538      	push	{r3, r4, r5, lr}
90019c0e:	2500      	movs	r5, #0
90019c10:	2302      	movs	r3, #2
90019c12:	4604      	mov	r4, r0
90019c14:	220e      	movs	r2, #14
90019c16:	7403      	strb	r3, [r0, #16]
90019c18:	4629      	mov	r1, r5
90019c1a:	6145      	str	r5, [r0, #20]
90019c1c:	7605      	strb	r5, [r0, #24]
90019c1e:	83c5      	strh	r5, [r0, #30]
90019c20:	8405      	strh	r5, [r0, #32]
90019c22:	86c5      	strh	r5, [r0, #54]	; 0x36
90019c24:	8705      	strh	r5, [r0, #56]	; 0x38
90019c26:	87c5      	strh	r5, [r0, #62]	; 0x3e
90019c28:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
90019c2c:	e9c0 5500 	strd	r5, r5, [r0]
90019c30:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
90019c34:	304c      	adds	r0, #76	; 0x4c
90019c36:	f00d fa89 	bl	9002714c <memset>
90019c3a:	2301      	movs	r3, #1
90019c3c:	4620      	mov	r0, r4
90019c3e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
90019c42:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
90019c46:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
90019c4a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
90019c4e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
90019c52:	f7ed fbb3 	bl	900073bc <_ZN8touchgfx12TextProvider18initializeInternalEv>
90019c56:	4620      	mov	r0, r4
90019c58:	bd38      	pop	{r3, r4, r5, pc}

90019c5a <_ZN8touchgfx12TextProvider11endOfStringEv>:
90019c5a:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
90019c5c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
90019c60:	8c40      	ldrh	r0, [r0, #34]	; 0x22
90019c62:	fab0 f080 	clz	r0, r0
90019c66:	0940      	lsrs	r0, r0, #5
90019c68:	4770      	bx	lr

90019c6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
90019c6a:	b530      	push	{r4, r5, lr}
90019c6c:	2500      	movs	r5, #0
90019c6e:	2401      	movs	r4, #1
90019c70:	6843      	ldr	r3, [r0, #4]
90019c72:	b913      	cbnz	r3, 90019c7a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
90019c74:	6803      	ldr	r3, [r0, #0]
90019c76:	b313      	cbz	r3, 90019cbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019c78:	6043      	str	r3, [r0, #4]
90019c7a:	7e03      	ldrb	r3, [r0, #24]
90019c7c:	b143      	cbz	r3, 90019c90 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
90019c7e:	6943      	ldr	r3, [r0, #20]
90019c80:	b12b      	cbz	r3, 90019c8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019c82:	881a      	ldrh	r2, [r3, #0]
90019c84:	b11a      	cbz	r2, 90019c8e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
90019c86:	1c9a      	adds	r2, r3, #2
90019c88:	6142      	str	r2, [r0, #20]
90019c8a:	8818      	ldrh	r0, [r3, #0]
90019c8c:	bd30      	pop	{r4, r5, pc}
90019c8e:	7605      	strb	r5, [r0, #24]
90019c90:	6843      	ldr	r3, [r0, #4]
90019c92:	8819      	ldrh	r1, [r3, #0]
90019c94:	b199      	cbz	r1, 90019cbe <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
90019c96:	1c9a      	adds	r2, r3, #2
90019c98:	2902      	cmp	r1, #2
90019c9a:	6042      	str	r2, [r0, #4]
90019c9c:	d1f5      	bne.n	90019c8a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
90019c9e:	7c03      	ldrb	r3, [r0, #16]
90019ca0:	2b01      	cmp	r3, #1
90019ca2:	d8e5      	bhi.n	90019c70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019ca4:	1c5a      	adds	r2, r3, #1
90019ca6:	3302      	adds	r3, #2
90019ca8:	7402      	strb	r2, [r0, #16]
90019caa:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
90019cae:	6143      	str	r3, [r0, #20]
90019cb0:	2b00      	cmp	r3, #0
90019cb2:	d0dd      	beq.n	90019c70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019cb4:	881b      	ldrh	r3, [r3, #0]
90019cb6:	2b00      	cmp	r3, #0
90019cb8:	d0da      	beq.n	90019c70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019cba:	7604      	strb	r4, [r0, #24]
90019cbc:	e7d8      	b.n	90019c70 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
90019cbe:	2000      	movs	r0, #0
90019cc0:	e7e4      	b.n	90019c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
90019cc2:	6001      	str	r1, [r0, #0]
90019cc4:	2100      	movs	r1, #0
90019cc6:	b430      	push	{r4, r5}
90019cc8:	6041      	str	r1, [r0, #4]
90019cca:	6815      	ldr	r5, [r2, #0]
90019ccc:	6085      	str	r5, [r0, #8]
90019cce:	6852      	ldr	r2, [r2, #4]
90019cd0:	6443      	str	r3, [r0, #68]	; 0x44
90019cd2:	9b02      	ldr	r3, [sp, #8]
90019cd4:	60c2      	str	r2, [r0, #12]
90019cd6:	7401      	strb	r1, [r0, #16]
90019cd8:	6141      	str	r1, [r0, #20]
90019cda:	7601      	strb	r1, [r0, #24]
90019cdc:	8701      	strh	r1, [r0, #56]	; 0x38
90019cde:	8401      	strh	r1, [r0, #32]
90019ce0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
90019ce4:	6483      	str	r3, [r0, #72]	; 0x48
90019ce6:	bc30      	pop	{r4, r5}
90019ce8:	f7ed bb68 	b.w	900073bc <_ZN8touchgfx12TextProvider18initializeInternalEv>

90019cec <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
90019cec:	b408      	push	{r3}
90019cee:	b510      	push	{r4, lr}
90019cf0:	b085      	sub	sp, #20
90019cf2:	ac07      	add	r4, sp, #28
90019cf4:	f854 3b04 	ldr.w	r3, [r4], #4
90019cf8:	9300      	str	r3, [sp, #0]
90019cfa:	4613      	mov	r3, r2
90019cfc:	4622      	mov	r2, r4
90019cfe:	9403      	str	r4, [sp, #12]
90019d00:	f7ff ffdf 	bl	90019cc2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
90019d04:	b005      	add	sp, #20
90019d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90019d0a:	b001      	add	sp, #4
90019d0c:	4770      	bx	lr

90019d0e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
90019d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
90019d10:	4605      	mov	r5, r0
90019d12:	4608      	mov	r0, r1
90019d14:	b1f1      	cbz	r1, 90019d54 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
90019d16:	f105 044c 	add.w	r4, r5, #76	; 0x4c
90019d1a:	460b      	mov	r3, r1
90019d1c:	f101 0708 	add.w	r7, r1, #8
90019d20:	4622      	mov	r2, r4
90019d22:	6818      	ldr	r0, [r3, #0]
90019d24:	3308      	adds	r3, #8
90019d26:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019d2a:	4626      	mov	r6, r4
90019d2c:	42bb      	cmp	r3, r7
90019d2e:	c603      	stmia	r6!, {r0, r1}
90019d30:	4634      	mov	r4, r6
90019d32:	d1f6      	bne.n	90019d22 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
90019d34:	6818      	ldr	r0, [r3, #0]
90019d36:	6030      	str	r0, [r6, #0]
90019d38:	4610      	mov	r0, r2
90019d3a:	889b      	ldrh	r3, [r3, #4]
90019d3c:	80b3      	strh	r3, [r6, #4]
90019d3e:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
90019d42:	015b      	lsls	r3, r3, #5
90019d44:	f403 7180 	and.w	r1, r3, #256	; 0x100
90019d48:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
90019d4c:	430b      	orrs	r3, r1
90019d4e:	425b      	negs	r3, r3
90019d50:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
90019d54:	bdf0      	pop	{r4, r5, r6, r7, pc}

90019d56 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
90019d56:	b538      	push	{r3, r4, r5, lr}
90019d58:	460c      	mov	r4, r1
90019d5a:	6811      	ldr	r1, [r2, #0]
90019d5c:	4610      	mov	r0, r2
90019d5e:	68cd      	ldr	r5, [r1, #12]
90019d60:	4619      	mov	r1, r3
90019d62:	47a8      	blx	r5
90019d64:	2800      	cmp	r0, #0
90019d66:	bf08      	it	eq
90019d68:	4620      	moveq	r0, r4
90019d6a:	bd38      	pop	{r3, r4, r5, pc}

90019d6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
90019d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90019d6e:	4604      	mov	r4, r0
90019d70:	4615      	mov	r5, r2
90019d72:	4608      	mov	r0, r1
90019d74:	b93a      	cbnz	r2, 90019d86 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
90019d76:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019d7a:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
90019d7e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
90019d82:	4628      	mov	r0, r5
90019d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90019d86:	f892 c00d 	ldrb.w	ip, [r2, #13]
90019d8a:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
90019d8e:	8893      	ldrh	r3, [r2, #4]
90019d90:	ea4f 160c 	mov.w	r6, ip, lsl #4
90019d94:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019d98:	79ee      	ldrb	r6, [r5, #7]
90019d9a:	4316      	orrs	r6, r2
90019d9c:	19da      	adds	r2, r3, r7
90019d9e:	b291      	uxth	r1, r2
90019da0:	b2b7      	uxth	r7, r6
90019da2:	291d      	cmp	r1, #29
90019da4:	d87b      	bhi.n	90019e9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019da6:	2201      	movs	r2, #1
90019da8:	10f6      	asrs	r6, r6, #3
90019daa:	408a      	lsls	r2, r1
90019dac:	4974      	ldr	r1, [pc, #464]	; (90019f80 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x214>)
90019dae:	420a      	tst	r2, r1
90019db0:	d12e      	bne.n	90019e10 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
90019db2:	f412 7f60 	tst.w	r2, #896	; 0x380
90019db6:	d072      	beq.n	90019e9e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x132>
90019db8:	f104 024c 	add.w	r2, r4, #76	; 0x4c
90019dbc:	462b      	mov	r3, r5
90019dbe:	f105 0e08 	add.w	lr, r5, #8
90019dc2:	4615      	mov	r5, r2
90019dc4:	6818      	ldr	r0, [r3, #0]
90019dc6:	3308      	adds	r3, #8
90019dc8:	f853 1c04 	ldr.w	r1, [r3, #-4]
90019dcc:	4694      	mov	ip, r2
90019dce:	4573      	cmp	r3, lr
90019dd0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
90019dd4:	4662      	mov	r2, ip
90019dd6:	d1f5      	bne.n	90019dc4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
90019dd8:	6818      	ldr	r0, [r3, #0]
90019dda:	f8cc 0000 	str.w	r0, [ip]
90019dde:	889b      	ldrh	r3, [r3, #4]
90019de0:	f8ac 3004 	strh.w	r3, [ip, #4]
90019de4:	b2b3      	uxth	r3, r6
90019de6:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
90019dea:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
90019dee:	1aca      	subs	r2, r1, r3
90019df0:	1bcf      	subs	r7, r1, r7
90019df2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
90019df6:	b292      	uxth	r2, r2
90019df8:	1afb      	subs	r3, r7, r3
90019dfa:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
90019dfe:	10d2      	asrs	r2, r2, #3
90019e00:	f002 0260 	and.w	r2, r2, #96	; 0x60
90019e04:	4302      	orrs	r2, r0
90019e06:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
90019e0a:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
90019e0e:	e7b8      	b.n	90019d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019e10:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
90019e12:	eb04 0343 	add.w	r3, r4, r3, lsl #1
90019e16:	8c59      	ldrh	r1, [r3, #34]	; 0x22
90019e18:	f640 6333 	movw	r3, #3635	; 0xe33
90019e1c:	4299      	cmp	r1, r3
90019e1e:	d110      	bne.n	90019e42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd6>
90019e20:	6803      	ldr	r3, [r0, #0]
90019e22:	68db      	ldr	r3, [r3, #12]
90019e24:	4798      	blx	r3
90019e26:	7b41      	ldrb	r1, [r0, #13]
90019e28:	00cb      	lsls	r3, r1, #3
90019e2a:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019e2e:	7a03      	ldrb	r3, [r0, #8]
90019e30:	0648      	lsls	r0, r1, #25
90019e32:	ea43 0302 	orr.w	r3, r3, r2
90019e36:	bf44      	itt	mi
90019e38:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019e3c:	b21b      	sxthmi	r3, r3
90019e3e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019e42:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
90019e46:	462a      	mov	r2, r5
90019e48:	f105 0c08 	add.w	ip, r5, #8
90019e4c:	443b      	add	r3, r7
90019e4e:	4433      	add	r3, r6
90019e50:	f104 064c 	add.w	r6, r4, #76	; 0x4c
90019e54:	b29b      	uxth	r3, r3
90019e56:	4635      	mov	r5, r6
90019e58:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019e5c:	6810      	ldr	r0, [r2, #0]
90019e5e:	3208      	adds	r2, #8
90019e60:	f852 1c04 	ldr.w	r1, [r2, #-4]
90019e64:	4637      	mov	r7, r6
90019e66:	4562      	cmp	r2, ip
90019e68:	c703      	stmia	r7!, {r0, r1}
90019e6a:	463e      	mov	r6, r7
90019e6c:	d1f6      	bne.n	90019e5c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xf0>
90019e6e:	6810      	ldr	r0, [r2, #0]
90019e70:	6038      	str	r0, [r7, #0]
90019e72:	8892      	ldrh	r2, [r2, #4]
90019e74:	80ba      	strh	r2, [r7, #4]
90019e76:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
90019e7a:	10db      	asrs	r3, r3, #3
90019e7c:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
90019e80:	f003 0360 	and.w	r3, r3, #96	; 0x60
90019e84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
90019e88:	4313      	orrs	r3, r2
90019e8a:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
90019e8e:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
90019e92:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
90019e96:	1a9b      	subs	r3, r3, r2
90019e98:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
90019e9c:	e771      	b.n	90019d82 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
90019e9e:	f023 0204 	bic.w	r2, r3, #4
90019ea2:	f640 611b 	movw	r1, #3611	; 0xe1b
90019ea6:	428a      	cmp	r2, r1
90019ea8:	d003      	beq.n	90019eb2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x146>
90019eaa:	f640 621d 	movw	r2, #3613	; 0xe1d
90019eae:	4293      	cmp	r3, r2
90019eb0:	d120      	bne.n	90019ef4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x188>
90019eb2:	3b01      	subs	r3, #1
90019eb4:	4602      	mov	r2, r0
90019eb6:	4629      	mov	r1, r5
90019eb8:	4620      	mov	r0, r4
90019eba:	b29b      	uxth	r3, r3
90019ebc:	f7ff ff4b 	bl	90019d56 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019ec0:	7b41      	ldrb	r1, [r0, #13]
90019ec2:	00cb      	lsls	r3, r1, #3
90019ec4:	0649      	lsls	r1, r1, #25
90019ec6:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019eca:	7a03      	ldrb	r3, [r0, #8]
90019ecc:	ea43 0302 	orr.w	r3, r3, r2
90019ed0:	bf44      	itt	mi
90019ed2:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019ed6:	b21b      	sxthmi	r3, r3
90019ed8:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
90019edc:	7b6b      	ldrb	r3, [r5, #13]
90019ede:	7aaa      	ldrb	r2, [r5, #10]
90019ee0:	005b      	lsls	r3, r3, #1
90019ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019ee6:	4313      	orrs	r3, r2
90019ee8:	115a      	asrs	r2, r3, #5
90019eea:	eb02 0393 	add.w	r3, r2, r3, lsr #2
90019eee:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019ef2:	e035      	b.n	90019f60 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f4>
90019ef4:	ea4f 02cc 	mov.w	r2, ip, lsl #3
90019ef8:	f01c 0f40 	tst.w	ip, #64	; 0x40
90019efc:	f402 7180 	and.w	r1, r2, #256	; 0x100
90019f00:	7a2a      	ldrb	r2, [r5, #8]
90019f02:	ea42 0201 	orr.w	r2, r2, r1
90019f06:	f640 6109 	movw	r1, #3593	; 0xe09
90019f0a:	bf1c      	itt	ne
90019f0c:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
90019f10:	b212      	sxthne	r2, r2
90019f12:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
90019f16:	f023 0210 	bic.w	r2, r3, #16
90019f1a:	428a      	cmp	r2, r1
90019f1c:	d003      	beq.n	90019f26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
90019f1e:	f640 6213 	movw	r2, #3603	; 0xe13
90019f22:	4293      	cmp	r3, r2
90019f24:	d129      	bne.n	90019f7a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20e>
90019f26:	7b6e      	ldrb	r6, [r5, #13]
90019f28:	4629      	mov	r1, r5
90019f2a:	0076      	lsls	r6, r6, #1
90019f2c:	f406 7280 	and.w	r2, r6, #256	; 0x100
90019f30:	7aae      	ldrb	r6, [r5, #10]
90019f32:	4316      	orrs	r6, r2
90019f34:	f640 6213 	movw	r2, #3603	; 0xe13
90019f38:	4293      	cmp	r3, r2
90019f3a:	4602      	mov	r2, r0
90019f3c:	4620      	mov	r0, r4
90019f3e:	bf16      	itet	ne
90019f40:	f103 33ff 	addne.w	r3, r3, #4294967295
90019f44:	f640 630c 	movweq	r3, #3596	; 0xe0c
90019f48:	b29b      	uxthne	r3, r3
90019f4a:	f7ff ff04 	bl	90019d56 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
90019f4e:	7b43      	ldrb	r3, [r0, #13]
90019f50:	7a82      	ldrb	r2, [r0, #10]
90019f52:	005b      	lsls	r3, r3, #1
90019f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
90019f58:	4313      	orrs	r3, r2
90019f5a:	1af6      	subs	r6, r6, r3
90019f5c:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
90019f60:	7b69      	ldrb	r1, [r5, #13]
90019f62:	00cb      	lsls	r3, r1, #3
90019f64:	f403 7280 	and.w	r2, r3, #256	; 0x100
90019f68:	7a2b      	ldrb	r3, [r5, #8]
90019f6a:	4313      	orrs	r3, r2
90019f6c:	064a      	lsls	r2, r1, #25
90019f6e:	bf44      	itt	mi
90019f70:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
90019f74:	b21b      	sxthmi	r3, r3
90019f76:	1bdb      	subs	r3, r3, r7
90019f78:	e747      	b.n	90019e0a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
90019f7a:	2300      	movs	r3, #0
90019f7c:	e7b7      	b.n	90019eee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x182>
90019f7e:	bf00      	nop
90019f80:	3fc00079 	.word	0x3fc00079

90019f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
90019f84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90019f88:	4604      	mov	r4, r0
90019f8a:	b942      	cbnz	r2, 90019f9e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
90019f8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
90019f90:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
90019f94:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
90019f98:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
90019f9c:	e047      	b.n	9001a02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
90019f9e:	7b51      	ldrb	r1, [r2, #13]
90019fa0:	8893      	ldrh	r3, [r2, #4]
90019fa2:	010d      	lsls	r5, r1, #4
90019fa4:	f405 7080 	and.w	r0, r5, #256	; 0x100
90019fa8:	79d5      	ldrb	r5, [r2, #7]
90019faa:	4305      	orrs	r5, r0
90019fac:	2d04      	cmp	r5, #4
90019fae:	bfcc      	ite	gt
90019fb0:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
90019fb4:	f04f 0e01 	movle.w	lr, #1
90019fb8:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
90019fbc:	f200 80ab 	bhi.w	9001a116 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
90019fc0:	f240 60e7 	movw	r0, #1767	; 0x6e7
90019fc4:	4283      	cmp	r3, r0
90019fc6:	d216      	bcs.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019fc8:	f240 605b 	movw	r0, #1627	; 0x65b
90019fcc:	4283      	cmp	r3, r0
90019fce:	d859      	bhi.n	9001a084 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
90019fd0:	f240 6057 	movw	r0, #1623	; 0x657
90019fd4:	4283      	cmp	r3, r0
90019fd6:	d20e      	bcs.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019fd8:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
90019fdc:	d24a      	bcs.n	9001a074 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
90019fde:	f240 604e 	movw	r0, #1614	; 0x64e
90019fe2:	4283      	cmp	r3, r0
90019fe4:	d207      	bcs.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
90019fe6:	f240 601a 	movw	r0, #1562	; 0x61a
90019fea:	4283      	cmp	r3, r0
90019fec:	d02a      	beq.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
90019fee:	d821      	bhi.n	9001a034 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
90019ff0:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
90019ff4:	d35b      	bcc.n	9001a0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
90019ff6:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
90019ffa:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
90019ffe:	f040 80d0 	bne.w	9001a1a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a002:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
9001a006:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a00a:	f040 80ca 	bne.w	9001a1a2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
9001a00e:	00cb      	lsls	r3, r1, #3
9001a010:	0649      	lsls	r1, r1, #25
9001a012:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a016:	7a13      	ldrb	r3, [r2, #8]
9001a018:	ea43 0300 	orr.w	r3, r3, r0
9001a01c:	bf44      	itt	mi
9001a01e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a022:	b21b      	sxthmi	r3, r3
9001a024:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a028:	1b5d      	subs	r5, r3, r5
9001a02a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a02e:	4610      	mov	r0, r2
9001a030:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001a034:	f240 604b 	movw	r0, #1611	; 0x64b
9001a038:	4283      	cmp	r3, r0
9001a03a:	d338      	bcc.n	9001a0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a03c:	f240 604c 	movw	r0, #1612	; 0x64c
9001a040:	4283      	cmp	r3, r0
9001a042:	d9d8      	bls.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a044:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
9001a048:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
9001a04c:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a050:	f040 80f3 	bne.w	9001a23a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a054:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a058:	f040 80ef 	bne.w	9001a23a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
9001a05c:	00cb      	lsls	r3, r1, #3
9001a05e:	064e      	lsls	r6, r1, #25
9001a060:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a064:	7a13      	ldrb	r3, [r2, #8]
9001a066:	ea43 0300 	orr.w	r3, r3, r0
9001a06a:	bf44      	itt	mi
9001a06c:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a070:	b21b      	sxthmi	r3, r3
9001a072:	e7d9      	b.n	9001a028 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
9001a074:	f240 6054 	movw	r0, #1620	; 0x654
9001a078:	4283      	cmp	r3, r0
9001a07a:	d8e3      	bhi.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a07c:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
9001a080:	d9e0      	bls.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a082:	e7b8      	b.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a084:	f240 6074 	movw	r0, #1652	; 0x674
9001a088:	4283      	cmp	r3, r0
9001a08a:	d0b4      	beq.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a08c:	d82d      	bhi.n	9001a0ea <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
9001a08e:	f240 605e 	movw	r0, #1630	; 0x65e
9001a092:	4283      	cmp	r3, r0
9001a094:	d804      	bhi.n	9001a0a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
9001a096:	f240 605d 	movw	r0, #1629	; 0x65d
9001a09a:	4283      	cmp	r3, r0
9001a09c:	d3d2      	bcc.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a09e:	e7aa      	b.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a0a0:	f240 605f 	movw	r0, #1631	; 0x65f
9001a0a4:	4283      	cmp	r3, r0
9001a0a6:	d0cd      	beq.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a0a8:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
9001a0ac:	d0a3      	beq.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a0ae:	00cb      	lsls	r3, r1, #3
9001a0b0:	0649      	lsls	r1, r1, #25
9001a0b2:	f403 7080 	and.w	r0, r3, #256	; 0x100
9001a0b6:	7a13      	ldrb	r3, [r2, #8]
9001a0b8:	ea43 0300 	orr.w	r3, r3, r0
9001a0bc:	bf44      	itt	mi
9001a0be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a0c2:	b21b      	sxthmi	r3, r3
9001a0c4:	1b5d      	subs	r5, r3, r5
9001a0c6:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a0ca:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a0ce:	7b53      	ldrb	r3, [r2, #13]
9001a0d0:	015b      	lsls	r3, r3, #5
9001a0d2:	f403 7180 	and.w	r1, r3, #256	; 0x100
9001a0d6:	7993      	ldrb	r3, [r2, #6]
9001a0d8:	430b      	orrs	r3, r1
9001a0da:	2105      	movs	r1, #5
9001a0dc:	005b      	lsls	r3, r3, #1
9001a0de:	fb93 f3f1 	sdiv	r3, r3, r1
9001a0e2:	f992 1009 	ldrsb.w	r1, [r2, #9]
9001a0e6:	440b      	add	r3, r1
9001a0e8:	e756      	b.n	90019f98 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
9001a0ea:	f240 60e2 	movw	r0, #1762	; 0x6e2
9001a0ee:	4283      	cmp	r3, r0
9001a0f0:	d809      	bhi.n	9001a106 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
9001a0f2:	f240 60df 	movw	r0, #1759	; 0x6df
9001a0f6:	4283      	cmp	r3, r0
9001a0f8:	f4bf af7d 	bcs.w	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a0fc:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
9001a100:	2b05      	cmp	r3, #5
9001a102:	d8d4      	bhi.n	9001a0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a104:	e777      	b.n	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a106:	f240 60e3 	movw	r0, #1763	; 0x6e3
9001a10a:	4283      	cmp	r3, r0
9001a10c:	d09a      	beq.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a10e:	f240 60e4 	movw	r0, #1764	; 0x6e4
9001a112:	4283      	cmp	r3, r0
9001a114:	e7ca      	b.n	9001a0ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
9001a116:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
9001a11a:	d22b      	bcs.n	9001a174 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
9001a11c:	f640 00ed 	movw	r0, #2285	; 0x8ed
9001a120:	4283      	cmp	r3, r0
9001a122:	d28f      	bcs.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a124:	f640 00e5 	movw	r0, #2277	; 0x8e5
9001a128:	4283      	cmp	r3, r0
9001a12a:	d816      	bhi.n	9001a15a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
9001a12c:	f640 00e4 	movw	r0, #2276	; 0x8e4
9001a130:	4283      	cmp	r3, r0
9001a132:	f4bf af60 	bcs.w	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a136:	f240 60ec 	movw	r0, #1772	; 0x6ec
9001a13a:	4283      	cmp	r3, r0
9001a13c:	d80a      	bhi.n	9001a154 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
9001a13e:	f240 60eb 	movw	r0, #1771	; 0x6eb
9001a142:	4283      	cmp	r3, r0
9001a144:	f4bf af57 	bcs.w	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a148:	f240 60ea 	movw	r0, #1770	; 0x6ea
9001a14c:	4283      	cmp	r3, r0
9001a14e:	f43f af79 	beq.w	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a152:	e7ac      	b.n	9001a0ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
9001a154:	f240 60ed 	movw	r0, #1773	; 0x6ed
9001a158:	e7f8      	b.n	9001a14c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
9001a15a:	f640 00e8 	movw	r0, #2280	; 0x8e8
9001a15e:	4283      	cmp	r3, r0
9001a160:	d802      	bhi.n	9001a168 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
9001a162:	f640 00e7 	movw	r0, #2279	; 0x8e7
9001a166:	e798      	b.n	9001a09a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
9001a168:	f640 00e9 	movw	r0, #2281	; 0x8e9
9001a16c:	4283      	cmp	r3, r0
9001a16e:	f47f af42 	bne.w	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a172:	e767      	b.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a174:	f640 00f6 	movw	r0, #2294	; 0x8f6
9001a178:	4283      	cmp	r3, r0
9001a17a:	f43f af63 	beq.w	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a17e:	d802      	bhi.n	9001a186 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
9001a180:	f640 00f2 	movw	r0, #2290	; 0x8f2
9001a184:	e7f2      	b.n	9001a16c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
9001a186:	f640 00fa 	movw	r0, #2298	; 0x8fa
9001a18a:	4283      	cmp	r3, r0
9001a18c:	d805      	bhi.n	9001a19a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
9001a18e:	f640 00f9 	movw	r0, #2297	; 0x8f9
9001a192:	4283      	cmp	r3, r0
9001a194:	f4ff af2f 	bcc.w	90019ff6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
9001a198:	e754      	b.n	9001a044 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
9001a19a:	f640 00fe 	movw	r0, #2302	; 0x8fe
9001a19e:	4283      	cmp	r3, r0
9001a1a0:	e7af      	b.n	9001a102 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
9001a1a2:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a1a6:	4617      	mov	r7, r2
9001a1a8:	f102 0808 	add.w	r8, r2, #8
9001a1ac:	4666      	mov	r6, ip
9001a1ae:	6838      	ldr	r0, [r7, #0]
9001a1b0:	3708      	adds	r7, #8
9001a1b2:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a1b6:	46e6      	mov	lr, ip
9001a1b8:	4547      	cmp	r7, r8
9001a1ba:	e8ae 0003 	stmia.w	lr!, {r0, r1}
9001a1be:	46f4      	mov	ip, lr
9001a1c0:	d1f5      	bne.n	9001a1ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
9001a1c2:	6838      	ldr	r0, [r7, #0]
9001a1c4:	f8ce 0000 	str.w	r0, [lr]
9001a1c8:	88b9      	ldrh	r1, [r7, #4]
9001a1ca:	f8ae 1004 	strh.w	r1, [lr, #4]
9001a1ce:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a1d2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a1d6:	d009      	beq.n	9001a1ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
9001a1d8:	7b51      	ldrb	r1, [r2, #13]
9001a1da:	7992      	ldrb	r2, [r2, #6]
9001a1dc:	0149      	lsls	r1, r1, #5
9001a1de:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a1e2:	4311      	orrs	r1, r2
9001a1e4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a1e8:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a1ec:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a1f0:	b2ad      	uxth	r5, r5
9001a1f2:	d00d      	beq.n	9001a210 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
9001a1f4:	442b      	add	r3, r5
9001a1f6:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a1fa:	b29b      	uxth	r3, r3
9001a1fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a200:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a204:	10db      	asrs	r3, r3, #3
9001a206:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a20a:	4313      	orrs	r3, r2
9001a20c:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a210:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a214:	00cb      	lsls	r3, r1, #3
9001a216:	064f      	lsls	r7, r1, #25
9001a218:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a21c:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a220:	ea43 0302 	orr.w	r3, r3, r2
9001a224:	bf44      	itt	mi
9001a226:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a22a:	b21b      	sxthmi	r3, r3
9001a22c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
9001a230:	1b5b      	subs	r3, r3, r5
9001a232:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
9001a236:	4632      	mov	r2, r6
9001a238:	e6f9      	b.n	9001a02e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
9001a23a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
9001a23e:	4617      	mov	r7, r2
9001a240:	f102 0908 	add.w	r9, r2, #8
9001a244:	4666      	mov	r6, ip
9001a246:	6838      	ldr	r0, [r7, #0]
9001a248:	3708      	adds	r7, #8
9001a24a:	f857 1c04 	ldr.w	r1, [r7, #-4]
9001a24e:	46e0      	mov	r8, ip
9001a250:	454f      	cmp	r7, r9
9001a252:	e8a8 0003 	stmia.w	r8!, {r0, r1}
9001a256:	46c4      	mov	ip, r8
9001a258:	d1f5      	bne.n	9001a246 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
9001a25a:	6838      	ldr	r0, [r7, #0]
9001a25c:	f8c8 0000 	str.w	r0, [r8]
9001a260:	88b9      	ldrh	r1, [r7, #4]
9001a262:	f8a8 1004 	strh.w	r1, [r8, #4]
9001a266:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
9001a26a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
9001a26e:	d009      	beq.n	9001a284 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
9001a270:	7b51      	ldrb	r1, [r2, #13]
9001a272:	7992      	ldrb	r2, [r2, #6]
9001a274:	0149      	lsls	r1, r1, #5
9001a276:	f401 7180 	and.w	r1, r1, #256	; 0x100
9001a27a:	4311      	orrs	r1, r2
9001a27c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
9001a280:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
9001a284:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
9001a288:	d00e      	beq.n	9001a2a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
9001a28a:	eba3 030e 	sub.w	r3, r3, lr
9001a28e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
9001a292:	b29b      	uxth	r3, r3
9001a294:	f022 0260 	bic.w	r2, r2, #96	; 0x60
9001a298:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
9001a29c:	10db      	asrs	r3, r3, #3
9001a29e:	f003 0360 	and.w	r3, r3, #96	; 0x60
9001a2a2:	4313      	orrs	r3, r2
9001a2a4:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
9001a2a8:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
9001a2ac:	00cb      	lsls	r3, r1, #3
9001a2ae:	0648      	lsls	r0, r1, #25
9001a2b0:	f403 7280 	and.w	r2, r3, #256	; 0x100
9001a2b4:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
9001a2b8:	ea43 0302 	orr.w	r3, r3, r2
9001a2bc:	bf44      	itt	mi
9001a2be:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
9001a2c2:	b21b      	sxthmi	r3, r3
9001a2c4:	1b5d      	subs	r5, r3, r5
9001a2c6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
9001a2ca:	e7b4      	b.n	9001a236 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

9001a2cc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
9001a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a2d0:	461e      	mov	r6, r3
9001a2d2:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a2d4:	4604      	mov	r4, r0
9001a2d6:	4617      	mov	r7, r2
9001a2d8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a2dc:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a2e0:	f7ed f81c 	bl	9000731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a2e4:	4605      	mov	r5, r0
9001a2e6:	b918      	cbnz	r0, 9001a2f0 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
9001a2e8:	6030      	str	r0, [r6, #0]
9001a2ea:	4628      	mov	r0, r5
9001a2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9001a2f0:	683b      	ldr	r3, [r7, #0]
9001a2f2:	4601      	mov	r1, r0
9001a2f4:	4638      	mov	r0, r7
9001a2f6:	68db      	ldr	r3, [r3, #12]
9001a2f8:	4798      	blx	r3
9001a2fa:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a2fe:	4602      	mov	r2, r0
9001a300:	6030      	str	r0, [r6, #0]
9001a302:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a306:	d213      	bcs.n	9001a330 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
9001a308:	4643      	mov	r3, r8
9001a30a:	4639      	mov	r1, r7
9001a30c:	4620      	mov	r0, r4
9001a30e:	f7ff fe39 	bl	90019f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a312:	6030      	str	r0, [r6, #0]
9001a314:	6833      	ldr	r3, [r6, #0]
9001a316:	b143      	cbz	r3, 9001a32a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
9001a318:	7b5a      	ldrb	r2, [r3, #13]
9001a31a:	7a9b      	ldrb	r3, [r3, #10]
9001a31c:	0052      	lsls	r2, r2, #1
9001a31e:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a322:	4313      	orrs	r3, r2
9001a324:	bf0c      	ite	eq
9001a326:	2301      	moveq	r3, #1
9001a328:	2300      	movne	r3, #0
9001a32a:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a32e:	e7dc      	b.n	9001a2ea <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
9001a330:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a334:	b29b      	uxth	r3, r3
9001a336:	2b7f      	cmp	r3, #127	; 0x7f
9001a338:	d804      	bhi.n	9001a344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
9001a33a:	4639      	mov	r1, r7
9001a33c:	4620      	mov	r0, r4
9001a33e:	f7ff fd15 	bl	90019d6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a342:	e7e6      	b.n	9001a312 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
9001a344:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a348:	2b00      	cmp	r3, #0
9001a34a:	d0e3      	beq.n	9001a314 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a34c:	f640 1302 	movw	r3, #2306	; 0x902
9001a350:	429d      	cmp	r5, r3
9001a352:	d1df      	bne.n	9001a314 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
9001a354:	4601      	mov	r1, r0
9001a356:	4620      	mov	r0, r4
9001a358:	f7ff fcd9 	bl	90019d0e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a35c:	e7d9      	b.n	9001a312 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

9001a35e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
9001a35e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
9001a362:	461e      	mov	r6, r3
9001a364:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a366:	4604      	mov	r4, r0
9001a368:	4617      	mov	r7, r2
9001a36a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001a36e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a372:	f7ec ffd3 	bl	9000731c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
9001a376:	4605      	mov	r5, r0
9001a378:	b918      	cbnz	r0, 9001a382 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
9001a37a:	6030      	str	r0, [r6, #0]
9001a37c:	4628      	mov	r0, r5
9001a37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
9001a382:	683b      	ldr	r3, [r7, #0]
9001a384:	4601      	mov	r1, r0
9001a386:	4638      	mov	r0, r7
9001a388:	f8d3 9008 	ldr.w	r9, [r3, #8]
9001a38c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
9001a390:	47c8      	blx	r9
9001a392:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
9001a396:	4602      	mov	r2, r0
9001a398:	6030      	str	r0, [r6, #0]
9001a39a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
9001a39e:	d213      	bcs.n	9001a3c8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
9001a3a0:	4643      	mov	r3, r8
9001a3a2:	4639      	mov	r1, r7
9001a3a4:	4620      	mov	r0, r4
9001a3a6:	f7ff fded 	bl	90019f84 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
9001a3aa:	6030      	str	r0, [r6, #0]
9001a3ac:	6833      	ldr	r3, [r6, #0]
9001a3ae:	b143      	cbz	r3, 9001a3c2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
9001a3b0:	7b5a      	ldrb	r2, [r3, #13]
9001a3b2:	7a9b      	ldrb	r3, [r3, #10]
9001a3b4:	0052      	lsls	r2, r2, #1
9001a3b6:	f402 7280 	and.w	r2, r2, #256	; 0x100
9001a3ba:	4313      	orrs	r3, r2
9001a3bc:	bf0c      	ite	eq
9001a3be:	2301      	moveq	r3, #1
9001a3c0:	2300      	movne	r3, #0
9001a3c2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
9001a3c6:	e7d9      	b.n	9001a37c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
9001a3c8:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
9001a3cc:	b29b      	uxth	r3, r3
9001a3ce:	2b7f      	cmp	r3, #127	; 0x7f
9001a3d0:	d804      	bhi.n	9001a3dc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
9001a3d2:	4639      	mov	r1, r7
9001a3d4:	4620      	mov	r0, r4
9001a3d6:	f7ff fcc9 	bl	90019d6c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
9001a3da:	e7e6      	b.n	9001a3aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
9001a3dc:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
9001a3e0:	2b00      	cmp	r3, #0
9001a3e2:	d0e3      	beq.n	9001a3ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a3e4:	f640 1302 	movw	r3, #2306	; 0x902
9001a3e8:	429d      	cmp	r5, r3
9001a3ea:	d1df      	bne.n	9001a3ac <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
9001a3ec:	4601      	mov	r1, r0
9001a3ee:	4620      	mov	r0, r4
9001a3f0:	f7ff fc8d 	bl	90019d0e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
9001a3f4:	e7d9      	b.n	9001a3aa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

9001a3f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
9001a3f6:	b510      	push	{r4, lr}
9001a3f8:	4604      	mov	r4, r0
9001a3fa:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
9001a3fe:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a400:	b1e1      	cbz	r1, 9001a43c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a402:	2b0a      	cmp	r3, #10
9001a404:	d02d      	beq.n	9001a462 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a406:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
9001a408:	3901      	subs	r1, #1
9001a40a:	eb04 0042 	add.w	r0, r4, r2, lsl #1
9001a40e:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
9001a410:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
9001a414:	1c51      	adds	r1, r2, #1
9001a416:	b289      	uxth	r1, r1
9001a418:	2901      	cmp	r1, #1
9001a41a:	bf8a      	itet	hi
9001a41c:	f102 32ff 	addhi.w	r2, r2, #4294967295
9001a420:	87e1      	strhls	r1, [r4, #62]	; 0x3e
9001a422:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
9001a424:	1c5a      	adds	r2, r3, #1
9001a426:	8722      	strh	r2, [r4, #56]	; 0x38
9001a428:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a42a:	4413      	add	r3, r2
9001a42c:	b29b      	uxth	r3, r3
9001a42e:	2b09      	cmp	r3, #9
9001a430:	bf88      	it	hi
9001a432:	3b0a      	subhi	r3, #10
9001a434:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a438:	8458      	strh	r0, [r3, #34]	; 0x22
9001a43a:	e7de      	b.n	9001a3fa <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
9001a43c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a43e:	2b0a      	cmp	r3, #10
9001a440:	d00f      	beq.n	9001a462 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
9001a442:	4620      	mov	r0, r4
9001a444:	f7ff fc11 	bl	90019c6a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
9001a448:	8f23      	ldrh	r3, [r4, #56]	; 0x38
9001a44a:	1c5a      	adds	r2, r3, #1
9001a44c:	8722      	strh	r2, [r4, #56]	; 0x38
9001a44e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
9001a450:	4413      	add	r3, r2
9001a452:	b29b      	uxth	r3, r3
9001a454:	2b09      	cmp	r3, #9
9001a456:	bf88      	it	hi
9001a458:	3b0a      	subhi	r3, #10
9001a45a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a45e:	8458      	strh	r0, [r3, #34]	; 0x22
9001a460:	e7ec      	b.n	9001a43c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
9001a462:	bd10      	pop	{r4, pc}

9001a464 <_ZN8touchgfx12TextProvider11getNextCharEv>:
9001a464:	b538      	push	{r3, r4, r5, lr}
9001a466:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
9001a468:	4604      	mov	r4, r0
9001a46a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
9001a46e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
9001a470:	8f02      	ldrh	r2, [r0, #56]	; 0x38
9001a472:	3a01      	subs	r2, #1
9001a474:	8702      	strh	r2, [r0, #56]	; 0x38
9001a476:	1c5a      	adds	r2, r3, #1
9001a478:	b292      	uxth	r2, r2
9001a47a:	2a09      	cmp	r2, #9
9001a47c:	bf8a      	itet	hi
9001a47e:	3b09      	subhi	r3, #9
9001a480:	86c2      	strhls	r2, [r0, #54]	; 0x36
9001a482:	86c3      	strhhi	r3, [r0, #54]	; 0x36
9001a484:	f7ff ffb7 	bl	9001a3f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
9001a488:	8c23      	ldrh	r3, [r4, #32]
9001a48a:	2b01      	cmp	r3, #1
9001a48c:	bf9c      	itt	ls
9001a48e:	3301      	addls	r3, #1
9001a490:	8423      	strhls	r3, [r4, #32]
9001a492:	8be3      	ldrh	r3, [r4, #30]
9001a494:	b90b      	cbnz	r3, 9001a49a <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
9001a496:	2302      	movs	r3, #2
9001a498:	83e3      	strh	r3, [r4, #30]
9001a49a:	8be3      	ldrh	r3, [r4, #30]
9001a49c:	4628      	mov	r0, r5
9001a49e:	3b01      	subs	r3, #1
9001a4a0:	b29b      	uxth	r3, r3
9001a4a2:	83e3      	strh	r3, [r4, #30]
9001a4a4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001a4a8:	8365      	strh	r5, [r4, #26]
9001a4aa:	bd38      	pop	{r3, r4, r5, pc}

9001a4ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
9001a4ac:	428a      	cmp	r2, r1
9001a4ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a4b2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
9001a4b4:	d932      	bls.n	9001a51c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
9001a4b6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
9001a4b8:	1a54      	subs	r4, r2, r1
9001a4ba:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
9001a4be:	19ee      	adds	r6, r5, r7
9001a4c0:	fa1f fe84 	uxth.w	lr, r4
9001a4c4:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
9001a4c8:	3e01      	subs	r6, #1
9001a4ca:	b2b4      	uxth	r4, r6
9001a4cc:	eba4 090e 	sub.w	r9, r4, lr
9001a4d0:	fa1f f989 	uxth.w	r9, r9
9001a4d4:	2c09      	cmp	r4, #9
9001a4d6:	4626      	mov	r6, r4
9001a4d8:	bf88      	it	hi
9001a4da:	f1a4 060a 	subhi.w	r6, r4, #10
9001a4de:	f1bc 0f00 	cmp.w	ip, #0
9001a4e2:	f104 34ff 	add.w	r4, r4, #4294967295
9001a4e6:	bf08      	it	eq
9001a4e8:	f04f 0c02 	moveq.w	ip, #2
9001a4ec:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001a4f0:	b2a4      	uxth	r4, r4
9001a4f2:	f10c 3cff 	add.w	ip, ip, #4294967295
9001a4f6:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
9001a4fa:	454c      	cmp	r4, r9
9001a4fc:	fa1f fc8c 	uxth.w	ip, ip
9001a500:	eb00 064c 	add.w	r6, r0, ip, lsl #1
9001a504:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
9001a508:	d1e4      	bne.n	9001a4d4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
9001a50a:	eba5 050e 	sub.w	r5, r5, lr
9001a50e:	eb0e 0408 	add.w	r4, lr, r8
9001a512:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
9001a516:	8705      	strh	r5, [r0, #56]	; 0x38
9001a518:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
9001a51c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
9001a51e:	250a      	movs	r5, #10
9001a520:	1a64      	subs	r4, r4, r1
9001a522:	4439      	add	r1, r7
9001a524:	b289      	uxth	r1, r1
9001a526:	8704      	strh	r4, [r0, #56]	; 0x38
9001a528:	2909      	cmp	r1, #9
9001a52a:	bf88      	it	hi
9001a52c:	390a      	subhi	r1, #10
9001a52e:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a530:	b18a      	cbz	r2, 9001a556 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
9001a532:	8f01      	ldrh	r1, [r0, #56]	; 0x38
9001a534:	3a01      	subs	r2, #1
9001a536:	3101      	adds	r1, #1
9001a538:	b292      	uxth	r2, r2
9001a53a:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
9001a53e:	8701      	strh	r1, [r0, #56]	; 0x38
9001a540:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a542:	b901      	cbnz	r1, 9001a546 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
9001a544:	86c5      	strh	r5, [r0, #54]	; 0x36
9001a546:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
9001a548:	3901      	subs	r1, #1
9001a54a:	b289      	uxth	r1, r1
9001a54c:	86c1      	strh	r1, [r0, #54]	; 0x36
9001a54e:	eb00 0141 	add.w	r1, r0, r1, lsl #1
9001a552:	844c      	strh	r4, [r1, #34]	; 0x22
9001a554:	e7ec      	b.n	9001a530 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
9001a556:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a55a:	f7ff bf4c 	b.w	9001a3f6 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

9001a55e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
9001a55e:	b570      	push	{r4, r5, r6, lr}
9001a560:	2500      	movs	r5, #0
9001a562:	4295      	cmp	r5, r2
9001a564:	d011      	beq.n	9001a58a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
9001a566:	8bc4      	ldrh	r4, [r0, #30]
9001a568:	f831 6b02 	ldrh.w	r6, [r1], #2
9001a56c:	4414      	add	r4, r2
9001a56e:	3c01      	subs	r4, #1
9001a570:	1b64      	subs	r4, r4, r5
9001a572:	b2a4      	uxth	r4, r4
9001a574:	2c01      	cmp	r4, #1
9001a576:	bf88      	it	hi
9001a578:	3c02      	subhi	r4, #2
9001a57a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001a57e:	8b64      	ldrh	r4, [r4, #26]
9001a580:	42b4      	cmp	r4, r6
9001a582:	d117      	bne.n	9001a5b4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
9001a584:	3501      	adds	r5, #1
9001a586:	b2ad      	uxth	r5, r5
9001a588:	e7eb      	b.n	9001a562 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
9001a58a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001a58e:	2400      	movs	r4, #0
9001a590:	4413      	add	r3, r2
9001a592:	b2a2      	uxth	r2, r4
9001a594:	429a      	cmp	r2, r3
9001a596:	da0f      	bge.n	9001a5b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
9001a598:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
9001a59a:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
9001a59e:	3401      	adds	r4, #1
9001a5a0:	4432      	add	r2, r6
9001a5a2:	b292      	uxth	r2, r2
9001a5a4:	2a09      	cmp	r2, #9
9001a5a6:	bf88      	it	hi
9001a5a8:	3a0a      	subhi	r2, #10
9001a5aa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001a5ae:	8c52      	ldrh	r2, [r2, #34]	; 0x22
9001a5b0:	42aa      	cmp	r2, r5
9001a5b2:	d0ee      	beq.n	9001a592 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
9001a5b4:	2000      	movs	r0, #0
9001a5b6:	bd70      	pop	{r4, r5, r6, pc}
9001a5b8:	2001      	movs	r0, #1
9001a5ba:	e7fc      	b.n	9001a5b6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

9001a5bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
9001a5bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001a5c0:	4605      	mov	r5, r0
9001a5c2:	4616      	mov	r6, r2
9001a5c4:	1c8c      	adds	r4, r1, #2
9001a5c6:	8809      	ldrh	r1, [r1, #0]
9001a5c8:	ea4f 3a11 	mov.w	sl, r1, lsr #12
9001a5cc:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
9001a5d0:	42b3      	cmp	r3, r6
9001a5d2:	d124      	bne.n	9001a61e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
9001a5d4:	f3c1 2903 	ubfx	r9, r1, #8, #4
9001a5d8:	f3c1 1803 	ubfx	r8, r1, #4, #4
9001a5dc:	f001 070f 	and.w	r7, r1, #15
9001a5e0:	4652      	mov	r2, sl
9001a5e2:	f8cd 8000 	str.w	r8, [sp]
9001a5e6:	464b      	mov	r3, r9
9001a5e8:	4621      	mov	r1, r4
9001a5ea:	4628      	mov	r0, r5
9001a5ec:	f7ff ffb7 	bl	9001a55e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
9001a5f0:	4683      	mov	fp, r0
9001a5f2:	b168      	cbz	r0, 9001a610 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
9001a5f4:	eb0a 0109 	add.w	r1, sl, r9
9001a5f8:	463a      	mov	r2, r7
9001a5fa:	4628      	mov	r0, r5
9001a5fc:	4441      	add	r1, r8
9001a5fe:	eb04 0341 	add.w	r3, r4, r1, lsl #1
9001a602:	4649      	mov	r1, r9
9001a604:	f7ff ff52 	bl	9001a4ac <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
9001a608:	4658      	mov	r0, fp
9001a60a:	b003      	add	sp, #12
9001a60c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001a610:	eb07 010a 	add.w	r1, r7, sl
9001a614:	4449      	add	r1, r9
9001a616:	4441      	add	r1, r8
9001a618:	eb04 0141 	add.w	r1, r4, r1, lsl #1
9001a61c:	e7d2      	b.n	9001a5c4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
9001a61e:	f04f 0b00 	mov.w	fp, #0
9001a622:	e7f1      	b.n	9001a608 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

9001a624 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
9001a624:	b570      	push	{r4, r5, r6, lr}
9001a626:	8810      	ldrh	r0, [r2, #0]
9001a628:	4298      	cmp	r0, r3
9001a62a:	d817      	bhi.n	9001a65c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a62c:	1e48      	subs	r0, r1, #1
9001a62e:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
9001a632:	4298      	cmp	r0, r3
9001a634:	d312      	bcc.n	9001a65c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a636:	2400      	movs	r4, #0
9001a638:	428c      	cmp	r4, r1
9001a63a:	d20f      	bcs.n	9001a65c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
9001a63c:	1860      	adds	r0, r4, r1
9001a63e:	1040      	asrs	r0, r0, #1
9001a640:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
9001a644:	0085      	lsls	r5, r0, #2
9001a646:	42b3      	cmp	r3, r6
9001a648:	d902      	bls.n	9001a650 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
9001a64a:	3001      	adds	r0, #1
9001a64c:	b284      	uxth	r4, r0
9001a64e:	e7f3      	b.n	9001a638 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a650:	d201      	bcs.n	9001a656 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
9001a652:	b281      	uxth	r1, r0
9001a654:	e7f0      	b.n	9001a638 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
9001a656:	442a      	add	r2, r5
9001a658:	8850      	ldrh	r0, [r2, #2]
9001a65a:	bd70      	pop	{r4, r5, r6, pc}
9001a65c:	2000      	movs	r0, #0
9001a65e:	e7fc      	b.n	9001a65a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

9001a660 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
9001a660:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
9001a664:	6c45      	ldr	r5, [r0, #68]	; 0x44
9001a666:	4604      	mov	r4, r0
9001a668:	260b      	movs	r6, #11
9001a66a:	886f      	ldrh	r7, [r5, #2]
9001a66c:	087f      	lsrs	r7, r7, #1
9001a66e:	3e01      	subs	r6, #1
9001a670:	d013      	beq.n	9001a69a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a672:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
9001a674:	462a      	mov	r2, r5
9001a676:	4639      	mov	r1, r7
9001a678:	4620      	mov	r0, r4
9001a67a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9001a67e:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
9001a682:	4643      	mov	r3, r8
9001a684:	f7ff ffce 	bl	9001a624 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
9001a688:	b138      	cbz	r0, 9001a69a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
9001a68a:	eb05 0140 	add.w	r1, r5, r0, lsl #1
9001a68e:	4642      	mov	r2, r8
9001a690:	4620      	mov	r0, r4
9001a692:	f7ff ff93 	bl	9001a5bc <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
9001a696:	2800      	cmp	r0, #0
9001a698:	d1e9      	bne.n	9001a66e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
9001a69a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

9001a6a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
9001a6a0:	b570      	push	{r4, r5, r6, lr}
9001a6a2:	694a      	ldr	r2, [r1, #20]
9001a6a4:	6a8d      	ldr	r5, [r1, #40]	; 0x28
9001a6a6:	684b      	ldr	r3, [r1, #4]
9001a6a8:	1b54      	subs	r4, r2, r5
9001a6aa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
9001a6ac:	f000 8106 	beq.w	9001a8bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
9001a6b0:	1b9b      	subs	r3, r3, r6
9001a6b2:	d003      	beq.n	9001a6bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a6b4:	4363      	muls	r3, r4
9001a6b6:	2210      	movs	r2, #16
9001a6b8:	fb93 f3f2 	sdiv	r3, r3, r2
9001a6bc:	680c      	ldr	r4, [r1, #0]
9001a6be:	698a      	ldr	r2, [r1, #24]
9001a6c0:	1b65      	subs	r5, r4, r5
9001a6c2:	f000 80fd 	beq.w	9001a8c0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
9001a6c6:	1b92      	subs	r2, r2, r6
9001a6c8:	d003      	beq.n	9001a6d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a6ca:	436a      	muls	r2, r5
9001a6cc:	2410      	movs	r4, #16
9001a6ce:	fb92 f2f4 	sdiv	r2, r2, r4
9001a6d2:	1a9b      	subs	r3, r3, r2
9001a6d4:	ed9f 4a89 	vldr	s8, [pc, #548]	; 9001a8fc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
9001a6d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001a6dc:	460a      	mov	r2, r1
9001a6de:	ee07 3a90 	vmov	s15, r3
9001a6e2:	f100 040c 	add.w	r4, r0, #12
9001a6e6:	4603      	mov	r3, r0
9001a6e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a6ec:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a6f0:	ee87 3a27 	vdiv.f32	s6, s14, s15
9001a6f4:	eeb1 6a43 	vneg.f32	s12, s6
9001a6f8:	edd2 7a02 	vldr	s15, [r2, #8]
9001a6fc:	3214      	adds	r2, #20
9001a6fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
9001a702:	ece3 6a01 	vstmia	r3!, {s13}
9001a706:	429c      	cmp	r4, r3
9001a708:	ed52 7a02 	vldr	s15, [r2, #-8]
9001a70c:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a710:	edc3 7a02 	vstr	s15, [r3, #8]
9001a714:	ed52 7a01 	vldr	s15, [r2, #-4]
9001a718:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a71c:	edc3 7a05 	vstr	s15, [r3, #20]
9001a720:	d1ea      	bne.n	9001a6f8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
9001a722:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a724:	698b      	ldr	r3, [r1, #24]
9001a726:	edd0 4a02 	vldr	s9, [r0, #8]
9001a72a:	1a9b      	subs	r3, r3, r2
9001a72c:	edd0 3a00 	vldr	s7, [r0]
9001a730:	edd0 6a01 	vldr	s13, [r0, #4]
9001a734:	ee07 3a90 	vmov	s15, r3
9001a738:	684b      	ldr	r3, [r1, #4]
9001a73a:	ee76 6ae4 	vsub.f32	s13, s13, s9
9001a73e:	ed90 5a05 	vldr	s10, [r0, #20]
9001a742:	1a9b      	subs	r3, r3, r2
9001a744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a748:	ee73 4ae4 	vsub.f32	s9, s7, s9
9001a74c:	ed90 2a03 	vldr	s4, [r0, #12]
9001a750:	ee07 3a10 	vmov	s14, r3
9001a754:	edd0 5a04 	vldr	s11, [r0, #16]
9001a758:	ee67 7a84 	vmul.f32	s15, s15, s8
9001a75c:	ed90 1a07 	vldr	s2, [r0, #28]
9001a760:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a764:	edd0 2a06 	vldr	s5, [r0, #24]
9001a768:	ee75 5ac5 	vsub.f32	s11, s11, s10
9001a76c:	ee64 7ae7 	vnmul.f32	s15, s9, s15
9001a770:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a774:	ee32 5a45 	vsub.f32	s10, s4, s10
9001a778:	eee6 7a87 	vfma.f32	s15, s13, s14
9001a77c:	ee67 7a83 	vmul.f32	s15, s15, s6
9001a780:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
9001a784:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a786:	694a      	ldr	r2, [r1, #20]
9001a788:	1b13      	subs	r3, r2, r4
9001a78a:	ee07 3a10 	vmov	s14, r3
9001a78e:	680b      	ldr	r3, [r1, #0]
9001a790:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a794:	1b1b      	subs	r3, r3, r4
9001a796:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a79a:	ee64 4ac7 	vnmul.f32	s9, s9, s14
9001a79e:	ee07 3a10 	vmov	s14, r3
9001a7a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a7a6:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a7aa:	eee6 4a87 	vfma.f32	s9, s13, s14
9001a7ae:	ee64 4a86 	vmul.f32	s9, s9, s12
9001a7b2:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
9001a7b6:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a7b8:	698b      	ldr	r3, [r1, #24]
9001a7ba:	1a9b      	subs	r3, r3, r2
9001a7bc:	ee06 3a90 	vmov	s13, r3
9001a7c0:	684b      	ldr	r3, [r1, #4]
9001a7c2:	1a9b      	subs	r3, r3, r2
9001a7c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a7c8:	ee07 3a10 	vmov	s14, r3
9001a7cc:	ee66 6a84 	vmul.f32	s13, s13, s8
9001a7d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a7d4:	ee65 6a66 	vnmul.f32	s13, s10, s13
9001a7d8:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a7dc:	eee5 6a87 	vfma.f32	s13, s11, s14
9001a7e0:	ee66 6a83 	vmul.f32	s13, s13, s6
9001a7e4:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
9001a7e8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a7ea:	694a      	ldr	r2, [r1, #20]
9001a7ec:	1b13      	subs	r3, r2, r4
9001a7ee:	ee07 3a10 	vmov	s14, r3
9001a7f2:	680b      	ldr	r3, [r1, #0]
9001a7f4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a7f8:	1b1b      	subs	r3, r3, r4
9001a7fa:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a7fe:	ee25 5a47 	vnmul.f32	s10, s10, s14
9001a802:	ee07 3a10 	vmov	s14, r3
9001a806:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a80a:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a80e:	eea5 5a87 	vfma.f32	s10, s11, s14
9001a812:	edd0 5a08 	vldr	s11, [r0, #32]
9001a816:	ee31 1a65 	vsub.f32	s2, s2, s11
9001a81a:	ee72 5ae5 	vsub.f32	s11, s5, s11
9001a81e:	ee25 5a06 	vmul.f32	s10, s10, s12
9001a822:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
9001a826:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001a828:	698b      	ldr	r3, [r1, #24]
9001a82a:	1a9b      	subs	r3, r3, r2
9001a82c:	ee07 3a10 	vmov	s14, r3
9001a830:	684b      	ldr	r3, [r1, #4]
9001a832:	1a9b      	subs	r3, r3, r2
9001a834:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a838:	ee01 3a90 	vmov	s3, r3
9001a83c:	ee27 7a04 	vmul.f32	s14, s14, s8
9001a840:	eef8 1ae1 	vcvt.f32.s32	s3, s3
9001a844:	ee25 7ac7 	vnmul.f32	s14, s11, s14
9001a848:	ee61 1a84 	vmul.f32	s3, s3, s8
9001a84c:	eea1 7a21 	vfma.f32	s14, s2, s3
9001a850:	ee27 7a03 	vmul.f32	s14, s14, s6
9001a854:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001a858:	6a8c      	ldr	r4, [r1, #40]	; 0x28
9001a85a:	694a      	ldr	r2, [r1, #20]
9001a85c:	1b13      	subs	r3, r2, r4
9001a85e:	ee03 3a10 	vmov	s6, r3
9001a862:	680b      	ldr	r3, [r1, #0]
9001a864:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a868:	1b1b      	subs	r3, r3, r4
9001a86a:	ee23 3a04 	vmul.f32	s6, s6, s8
9001a86e:	ee65 5ac3 	vnmul.f32	s11, s11, s6
9001a872:	ee03 3a10 	vmov	s6, r3
9001a876:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
9001a87a:	ee23 4a04 	vmul.f32	s8, s6, s8
9001a87e:	eee1 5a04 	vfma.f32	s11, s2, s8
9001a882:	ee25 6a86 	vmul.f32	s12, s11, s12
9001a886:	ee62 5a67 	vnmul.f32	s11, s4, s15
9001a88a:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
9001a88e:	eee3 5aa6 	vfma.f32	s11, s7, s13
9001a892:	eef5 5ac0 	vcmpe.f32	s11, #0.0
9001a896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a89a:	dd13      	ble.n	9001a8c4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
9001a89c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a8a0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
9001a8a4:	63c3      	str	r3, [r0, #60]	; 0x3c
9001a8a6:	eee3 7a87 	vfma.f32	s15, s7, s14
9001a8aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
9001a8ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a8b2:	dd15      	ble.n	9001a8e0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
9001a8b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
9001a8b8:	6403      	str	r3, [r0, #64]	; 0x40
9001a8ba:	bd70      	pop	{r4, r5, r6, pc}
9001a8bc:	4623      	mov	r3, r4
9001a8be:	e6fd      	b.n	9001a6bc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
9001a8c0:	462a      	mov	r2, r5
9001a8c2:	e706      	b.n	9001a6d2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
9001a8c4:	d502      	bpl.n	9001a8cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
9001a8c6:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a8ca:	e7e9      	b.n	9001a8a0 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
9001a8cc:	ee22 2a64 	vnmul.f32	s4, s4, s9
9001a8d0:	eea3 2a85 	vfma.f32	s4, s7, s10
9001a8d4:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
9001a8d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a8dc:	dade      	bge.n	9001a89c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
9001a8de:	e7f2      	b.n	9001a8c6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
9001a8e0:	d502      	bpl.n	9001a8e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
9001a8e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
9001a8e6:	e7e7      	b.n	9001a8b8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
9001a8e8:	ee62 4ae4 	vnmul.f32	s9, s5, s9
9001a8ec:	eee3 4a86 	vfma.f32	s9, s7, s12
9001a8f0:	eef5 4ac0 	vcmpe.f32	s9, #0.0
9001a8f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
9001a8f8:	dadc      	bge.n	9001a8b4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
9001a8fa:	e7f2      	b.n	9001a8e2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
9001a8fc:	3d800000 	.word	0x3d800000

9001a900 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
9001a900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001a904:	2714      	movs	r7, #20
9001a906:	435f      	muls	r7, r3
9001a908:	eb02 0c07 	add.w	ip, r2, r7
9001a90c:	f8dc 5004 	ldr.w	r5, [ip, #4]
9001a910:	f115 0e0f 	adds.w	lr, r5, #15
9001a914:	f100 80a2 	bmi.w	9001aa5c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
9001a918:	ea4f 1e2e 	mov.w	lr, lr, asr #4
9001a91c:	9c08      	ldr	r4, [sp, #32]
9001a91e:	2614      	movs	r6, #20
9001a920:	f8c0 e014 	str.w	lr, [r0, #20]
9001a924:	4366      	muls	r6, r4
9001a926:	eb02 0806 	add.w	r8, r2, r6
9001a92a:	f8d8 5004 	ldr.w	r5, [r8, #4]
9001a92e:	f115 040f 	adds.w	r4, r5, #15
9001a932:	f100 809f 	bmi.w	9001aa74 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
9001a936:	1124      	asrs	r4, r4, #4
9001a938:	eba4 040e 	sub.w	r4, r4, lr
9001a93c:	6184      	str	r4, [r0, #24]
9001a93e:	2c00      	cmp	r4, #0
9001a940:	f000 808a 	beq.w	9001aa58 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
9001a944:	f8dc 9004 	ldr.w	r9, [ip, #4]
9001a948:	f8d8 4004 	ldr.w	r4, [r8, #4]
9001a94c:	5995      	ldr	r5, [r2, r6]
9001a94e:	eba4 0809 	sub.w	r8, r4, r9
9001a952:	59d4      	ldr	r4, [r2, r7]
9001a954:	eba5 0a04 	sub.w	sl, r5, r4
9001a958:	ea4f 1608 	mov.w	r6, r8, lsl #4
9001a95c:	ea4f 150a 	mov.w	r5, sl, lsl #4
9001a960:	fb0e fe05 	mul.w	lr, lr, r5
9001a964:	fb0a ee19 	mls	lr, sl, r9, lr
9001a968:	fb08 e404 	mla	r4, r8, r4, lr
9001a96c:	3c01      	subs	r4, #1
9001a96e:	19a4      	adds	r4, r4, r6
9001a970:	f100 808c 	bmi.w	9001aa8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
9001a974:	fb94 fef6 	sdiv	lr, r4, r6
9001a978:	fb06 441e 	mls	r4, r6, lr, r4
9001a97c:	f8c0 e000 	str.w	lr, [r0]
9001a980:	6104      	str	r4, [r0, #16]
9001a982:	2d00      	cmp	r5, #0
9001a984:	f2c0 8095 	blt.w	9001aab2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
9001a988:	fb95 f4f6 	sdiv	r4, r5, r6
9001a98c:	fb06 5514 	mls	r5, r6, r4, r5
9001a990:	6044      	str	r4, [r0, #4]
9001a992:	6085      	str	r5, [r0, #8]
9001a994:	60c6      	str	r6, [r0, #12]
9001a996:	eb01 0383 	add.w	r3, r1, r3, lsl #2
9001a99a:	f8dc 4004 	ldr.w	r4, [ip, #4]
9001a99e:	6945      	ldr	r5, [r0, #20]
9001a9a0:	59d2      	ldr	r2, [r2, r7]
9001a9a2:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
9001a9a6:	eddf 6a4b 	vldr	s13, [pc, #300]	; 9001aad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
9001a9aa:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a9ae:	ee07 4a10 	vmov	s14, r4
9001a9b2:	6804      	ldr	r4, [r0, #0]
9001a9b4:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
9001a9b8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
9001a9bc:	ee07 2a90 	vmov	s15, r2
9001a9c0:	ee27 7a26 	vmul.f32	s14, s14, s13
9001a9c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
9001a9c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
9001a9cc:	edd3 6a00 	vldr	s13, [r3]
9001a9d0:	eee6 6a07 	vfma.f32	s13, s12, s14
9001a9d4:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
9001a9d8:	eee6 6a27 	vfma.f32	s13, s12, s15
9001a9dc:	edc0 6a07 	vstr	s13, [r0, #28]
9001a9e0:	edd0 6a01 	vldr	s13, [r0, #4]
9001a9e4:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
9001a9e8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
9001a9ec:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
9001a9f0:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001a9f4:	ed80 6a08 	vstr	s12, [r0, #32]
9001a9f8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
9001a9fa:	6242      	str	r2, [r0, #36]	; 0x24
9001a9fc:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
9001aa00:	ed93 6a03 	vldr	s12, [r3, #12]
9001aa04:	eea5 6a87 	vfma.f32	s12, s11, s14
9001aa08:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001aa0c:	eea5 6aa7 	vfma.f32	s12, s11, s15
9001aa10:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
9001aa14:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
9001aa18:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
9001aa1c:	eea6 6aa5 	vfma.f32	s12, s13, s11
9001aa20:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
9001aa24:	6aca      	ldr	r2, [r1, #44]	; 0x2c
9001aa26:	6302      	str	r2, [r0, #48]	; 0x30
9001aa28:	ed93 6a06 	vldr	s12, [r3, #24]
9001aa2c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
9001aa30:	eea5 6a87 	vfma.f32	s12, s11, s14
9001aa34:	eeb0 7a46 	vmov.f32	s14, s12
9001aa38:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
9001aa3c:	eea6 7a27 	vfma.f32	s14, s12, s15
9001aa40:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
9001aa44:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
9001aa48:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
9001aa4c:	eee6 7a87 	vfma.f32	s15, s13, s14
9001aa50:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
9001aa54:	6b4b      	ldr	r3, [r1, #52]	; 0x34
9001aa56:	63c3      	str	r3, [r0, #60]	; 0x3c
9001aa58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001aa5c:	2410      	movs	r4, #16
9001aa5e:	f1c5 0501 	rsb	r5, r5, #1
9001aa62:	fb9e fef4 	sdiv	lr, lr, r4
9001aa66:	f015 050f 	ands.w	r5, r5, #15
9001aa6a:	bf18      	it	ne
9001aa6c:	2501      	movne	r5, #1
9001aa6e:	ebae 0e05 	sub.w	lr, lr, r5
9001aa72:	e753      	b.n	9001a91c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
9001aa74:	f04f 0910 	mov.w	r9, #16
9001aa78:	f1c5 0501 	rsb	r5, r5, #1
9001aa7c:	fb94 f4f9 	sdiv	r4, r4, r9
9001aa80:	f015 050f 	ands.w	r5, r5, #15
9001aa84:	bf18      	it	ne
9001aa86:	2501      	movne	r5, #1
9001aa88:	1b64      	subs	r4, r4, r5
9001aa8a:	e755      	b.n	9001a938 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
9001aa8c:	4264      	negs	r4, r4
9001aa8e:	fb94 fef6 	sdiv	lr, r4, r6
9001aa92:	f1ce 0800 	rsb	r8, lr, #0
9001aa96:	fb06 441e 	mls	r4, r6, lr, r4
9001aa9a:	f8c0 8000 	str.w	r8, [r0]
9001aa9e:	6104      	str	r4, [r0, #16]
9001aaa0:	2c00      	cmp	r4, #0
9001aaa2:	f43f af6e 	beq.w	9001a982 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
9001aaa6:	ea6f 0e0e 	mvn.w	lr, lr
9001aaaa:	1b34      	subs	r4, r6, r4
9001aaac:	f8c0 e000 	str.w	lr, [r0]
9001aab0:	e766      	b.n	9001a980 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
9001aab2:	426d      	negs	r5, r5
9001aab4:	fb95 f4f6 	sdiv	r4, r5, r6
9001aab8:	f1c4 0e00 	rsb	lr, r4, #0
9001aabc:	fb06 5514 	mls	r5, r6, r4, r5
9001aac0:	f8c0 e004 	str.w	lr, [r0, #4]
9001aac4:	6085      	str	r5, [r0, #8]
9001aac6:	2d00      	cmp	r5, #0
9001aac8:	f43f af64 	beq.w	9001a994 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
9001aacc:	43e4      	mvns	r4, r4
9001aace:	1b75      	subs	r5, r6, r5
9001aad0:	6044      	str	r4, [r0, #4]
9001aad2:	e75e      	b.n	9001a992 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
9001aad4:	3d800000 	.word	0x3d800000

9001aad8 <_ZN8touchgfx7Unicode6strlenEPKt>:
9001aad8:	4602      	mov	r2, r0
9001aada:	b148      	cbz	r0, 9001aaf0 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
9001aadc:	2300      	movs	r3, #0
9001aade:	b298      	uxth	r0, r3
9001aae0:	3301      	adds	r3, #1
9001aae2:	eb02 0143 	add.w	r1, r2, r3, lsl #1
9001aae6:	f831 1c02 	ldrh.w	r1, [r1, #-2]
9001aaea:	2900      	cmp	r1, #0
9001aaec:	d1f7      	bne.n	9001aade <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
9001aaee:	4770      	bx	lr
9001aaf0:	4770      	bx	lr

9001aaf2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
9001aaf2:	b530      	push	{r4, r5, lr}
9001aaf4:	4604      	mov	r4, r0
9001aaf6:	b159      	cbz	r1, 9001ab10 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
9001aaf8:	b148      	cbz	r0, 9001ab0e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001aafa:	2300      	movs	r3, #0
9001aafc:	b298      	uxth	r0, r3
9001aafe:	4282      	cmp	r2, r0
9001ab00:	d905      	bls.n	9001ab0e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
9001ab02:	5ccd      	ldrb	r5, [r1, r3]
9001ab04:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
9001ab08:	3301      	adds	r3, #1
9001ab0a:	2d00      	cmp	r5, #0
9001ab0c:	d1f6      	bne.n	9001aafc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
9001ab0e:	bd30      	pop	{r4, r5, pc}
9001ab10:	4608      	mov	r0, r1
9001ab12:	e7fc      	b.n	9001ab0e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

9001ab14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>:
9001ab14:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ab16:	468c      	mov	ip, r1
9001ab18:	b08b      	sub	sp, #44	; 0x2c
9001ab1a:	2100      	movs	r1, #0
9001ab1c:	ae01      	add	r6, sp, #4
9001ab1e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001ab22:	211f      	movs	r1, #31
9001ab24:	fbb0 f7f3 	udiv	r7, r0, r3
9001ab28:	fb03 0517 	mls	r5, r3, r7, r0
9001ab2c:	4638      	mov	r0, r7
9001ab2e:	b2ec      	uxtb	r4, r5
9001ab30:	2d09      	cmp	r5, #9
9001ab32:	bfd4      	ite	le
9001ab34:	3430      	addle	r4, #48	; 0x30
9001ab36:	3457      	addgt	r4, #87	; 0x57
9001ab38:	b2e4      	uxtb	r4, r4
9001ab3a:	558c      	strb	r4, [r1, r6]
9001ab3c:	1e4c      	subs	r4, r1, #1
9001ab3e:	b92f      	cbnz	r7, 9001ab4c <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x38>
9001ab40:	4431      	add	r1, r6
9001ab42:	4660      	mov	r0, ip
9001ab44:	f7ff ffd5 	bl	9001aaf2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001ab48:	b00b      	add	sp, #44	; 0x2c
9001ab4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001ab4c:	4621      	mov	r1, r4
9001ab4e:	e7e9      	b.n	9001ab24 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2+0x10>

9001ab50 <_ZN8touchgfx7Unicode4itoaElPtti>:
9001ab50:	b5f0      	push	{r4, r5, r6, r7, lr}
9001ab52:	4607      	mov	r7, r0
9001ab54:	b08b      	sub	sp, #44	; 0x2c
9001ab56:	4608      	mov	r0, r1
9001ab58:	b341      	cbz	r1, 9001abac <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001ab5a:	1e99      	subs	r1, r3, #2
9001ab5c:	2922      	cmp	r1, #34	; 0x22
9001ab5e:	d825      	bhi.n	9001abac <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
9001ab60:	2100      	movs	r1, #0
9001ab62:	463c      	mov	r4, r7
9001ab64:	261f      	movs	r6, #31
9001ab66:	f10d 0c04 	add.w	ip, sp, #4
9001ab6a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
9001ab6e:	1e71      	subs	r1, r6, #1
9001ab70:	fb94 fef3 	sdiv	lr, r4, r3
9001ab74:	fb03 441e 	mls	r4, r3, lr, r4
9001ab78:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
9001ab7c:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
9001ab80:	b2ec      	uxtb	r4, r5
9001ab82:	2d09      	cmp	r5, #9
9001ab84:	bfd4      	ite	le
9001ab86:	3430      	addle	r4, #48	; 0x30
9001ab88:	3457      	addgt	r4, #87	; 0x57
9001ab8a:	b2e4      	uxtb	r4, r4
9001ab8c:	f80c 4006 	strb.w	r4, [ip, r6]
9001ab90:	4674      	mov	r4, lr
9001ab92:	b96c      	cbnz	r4, 9001abb0 <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
9001ab94:	2f00      	cmp	r7, #0
9001ab96:	da05      	bge.n	9001aba4 <_ZN8touchgfx7Unicode4itoaElPtti+0x54>
9001ab98:	ab0a      	add	r3, sp, #40	; 0x28
9001ab9a:	4419      	add	r1, r3
9001ab9c:	232d      	movs	r3, #45	; 0x2d
9001ab9e:	f801 3c24 	strb.w	r3, [r1, #-36]
9001aba2:	1eb1      	subs	r1, r6, #2
9001aba4:	3101      	adds	r1, #1
9001aba6:	4461      	add	r1, ip
9001aba8:	f7ff ffa3 	bl	9001aaf2 <_ZN8touchgfx7Unicode7strncpyEPtPKct>
9001abac:	b00b      	add	sp, #44	; 0x2c
9001abae:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001abb0:	460e      	mov	r6, r1
9001abb2:	e7dc      	b.n	9001ab6e <_ZN8touchgfx7Unicode4itoaElPtti+0x1e>

9001abb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
9001abb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001abb8:	b085      	sub	sp, #20
9001abba:	4691      	mov	r9, r2
9001abbc:	6802      	ldr	r2, [r0, #0]
9001abbe:	4688      	mov	r8, r1
9001abc0:	461c      	mov	r4, r3
9001abc2:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
9001abc6:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
9001abca:	4683      	mov	fp, r0
9001abcc:	4610      	mov	r0, r2
9001abce:	9103      	str	r1, [sp, #12]
9001abd0:	9302      	str	r3, [sp, #8]
9001abd2:	9201      	str	r2, [sp, #4]
9001abd4:	f7ff ff80 	bl	9001aad8 <_ZN8touchgfx7Unicode6strlenEPKt>
9001abd8:	f1b8 0f00 	cmp.w	r8, #0
9001abdc:	bf0c      	ite	eq
9001abde:	4684      	moveq	ip, r0
9001abe0:	f100 0c01 	addne.w	ip, r0, #1
9001abe4:	f1b9 0f69 	cmp.w	r9, #105	; 0x69
9001abe8:	f89d 6038 	ldrb.w	r6, [sp, #56]	; 0x38
9001abec:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9001abee:	fa1f fc8c 	uxth.w	ip, ip
9001abf2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001abf4:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
9001abf8:	9903      	ldr	r1, [sp, #12]
9001abfa:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
9001abfe:	d041      	beq.n	9001ac84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001ac00:	d834      	bhi.n	9001ac6c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
9001ac02:	f1b9 0f63 	cmp.w	r9, #99	; 0x63
9001ac06:	d059      	beq.n	9001acbc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
9001ac08:	f1b9 0f64 	cmp.w	r9, #100	; 0x64
9001ac0c:	d03a      	beq.n	9001ac84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
9001ac0e:	f1b9 0f58 	cmp.w	r9, #88	; 0x58
9001ac12:	d034      	beq.n	9001ac7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001ac14:	2400      	movs	r4, #0
9001ac16:	f8bd 2050 	ldrh.w	r2, [sp, #80]	; 0x50
9001ac1a:	3a01      	subs	r2, #1
9001ac1c:	b169      	cbz	r1, 9001ac3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ac1e:	9911      	ldr	r1, [sp, #68]	; 0x44
9001ac20:	458c      	cmp	ip, r1
9001ac22:	da09      	bge.n	9001ac38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ac24:	eba1 010c 	sub.w	r1, r1, ip
9001ac28:	b289      	uxth	r1, r1
9001ac2a:	b933      	cbnz	r3, 9001ac3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ac2c:	2e00      	cmp	r6, #0
9001ac2e:	d051      	beq.n	9001acd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001ac30:	2800      	cmp	r0, #0
9001ac32:	d04f      	beq.n	9001acd4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
9001ac34:	440c      	add	r4, r1
9001ac36:	b2a4      	uxth	r4, r4
9001ac38:	2100      	movs	r1, #0
9001ac3a:	682b      	ldr	r3, [r5, #0]
9001ac3c:	4293      	cmp	r3, r2
9001ac3e:	da07      	bge.n	9001ac50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ac40:	f1b8 0f00 	cmp.w	r8, #0
9001ac44:	d004      	beq.n	9001ac50 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
9001ac46:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
9001ac4a:	682b      	ldr	r3, [r5, #0]
9001ac4c:	3301      	adds	r3, #1
9001ac4e:	602b      	str	r3, [r5, #0]
9001ac50:	2730      	movs	r7, #48	; 0x30
9001ac52:	2c00      	cmp	r4, #0
9001ac54:	d04e      	beq.n	9001acf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ac56:	682e      	ldr	r6, [r5, #0]
9001ac58:	3c01      	subs	r4, #1
9001ac5a:	42b2      	cmp	r2, r6
9001ac5c:	b2a4      	uxth	r4, r4
9001ac5e:	dd49      	ble.n	9001acf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ac60:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001ac64:	682b      	ldr	r3, [r5, #0]
9001ac66:	3301      	adds	r3, #1
9001ac68:	602b      	str	r3, [r5, #0]
9001ac6a:	e7f2      	b.n	9001ac52 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
9001ac6c:	f1b9 0f73 	cmp.w	r9, #115	; 0x73
9001ac70:	d01d      	beq.n	9001acae <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
9001ac72:	f1b9 0f78 	cmp.w	r9, #120	; 0x78
9001ac76:	d002      	beq.n	9001ac7e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
9001ac78:	f1b9 0f6f 	cmp.w	r9, #111	; 0x6f
9001ac7c:	e7c9      	b.n	9001ac12 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
9001ac7e:	4684      	mov	ip, r0
9001ac80:	f04f 0800 	mov.w	r8, #0
9001ac84:	2c00      	cmp	r4, #0
9001ac86:	d0c6      	beq.n	9001ac16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001ac88:	b947      	cbnz	r7, 9001ac9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001ac8a:	2801      	cmp	r0, #1
9001ac8c:	d106      	bne.n	9001ac9c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
9001ac8e:	8814      	ldrh	r4, [r2, #0]
9001ac90:	2c30      	cmp	r4, #48	; 0x30
9001ac92:	bf02      	ittt	eq
9001ac94:	3202      	addeq	r2, #2
9001ac96:	4638      	moveq	r0, r7
9001ac98:	f8cb 2000 	streq.w	r2, [fp]
9001ac9c:	45bc      	cmp	ip, r7
9001ac9e:	da14      	bge.n	9001acca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
9001aca0:	b2bf      	uxth	r7, r7
9001aca2:	eba7 040c 	sub.w	r4, r7, ip
9001aca6:	46bc      	mov	ip, r7
9001aca8:	b2a4      	uxth	r4, r4
9001acaa:	2600      	movs	r6, #0
9001acac:	e7b3      	b.n	9001ac16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001acae:	4684      	mov	ip, r0
9001acb0:	b16c      	cbz	r4, 9001acce <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
9001acb2:	42b8      	cmp	r0, r7
9001acb4:	dd00      	ble.n	9001acb8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
9001acb6:	b2b8      	uxth	r0, r7
9001acb8:	2400      	movs	r4, #0
9001acba:	e003      	b.n	9001acc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
9001acbc:	f04f 0c01 	mov.w	ip, #1
9001acc0:	2400      	movs	r4, #0
9001acc2:	4660      	mov	r0, ip
9001acc4:	4626      	mov	r6, r4
9001acc6:	46a0      	mov	r8, r4
9001acc8:	e7a5      	b.n	9001ac16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001acca:	2400      	movs	r4, #0
9001accc:	e7ed      	b.n	9001acaa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
9001acce:	4626      	mov	r6, r4
9001acd0:	46a0      	mov	r8, r4
9001acd2:	e7a0      	b.n	9001ac16 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
9001acd4:	2900      	cmp	r1, #0
9001acd6:	d0b0      	beq.n	9001ac3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001acd8:	2720      	movs	r7, #32
9001acda:	682e      	ldr	r6, [r5, #0]
9001acdc:	2900      	cmp	r1, #0
9001acde:	d0ac      	beq.n	9001ac3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
9001ace0:	3901      	subs	r1, #1
9001ace2:	4296      	cmp	r6, r2
9001ace4:	b289      	uxth	r1, r1
9001ace6:	daa7      	bge.n	9001ac38 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
9001ace8:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
9001acec:	682b      	ldr	r3, [r5, #0]
9001acee:	3301      	adds	r3, #1
9001acf0:	602b      	str	r3, [r5, #0]
9001acf2:	e7f2      	b.n	9001acda <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
9001acf4:	b188      	cbz	r0, 9001ad1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001acf6:	682b      	ldr	r3, [r5, #0]
9001acf8:	3801      	subs	r0, #1
9001acfa:	429a      	cmp	r2, r3
9001acfc:	b280      	uxth	r0, r0
9001acfe:	dd0c      	ble.n	9001ad1a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
9001ad00:	f8db 3000 	ldr.w	r3, [fp]
9001ad04:	1c9c      	adds	r4, r3, #2
9001ad06:	f8cb 4000 	str.w	r4, [fp]
9001ad0a:	881c      	ldrh	r4, [r3, #0]
9001ad0c:	682b      	ldr	r3, [r5, #0]
9001ad0e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
9001ad12:	682b      	ldr	r3, [r5, #0]
9001ad14:	3301      	adds	r3, #1
9001ad16:	602b      	str	r3, [r5, #0]
9001ad18:	e7ec      	b.n	9001acf4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
9001ad1a:	2620      	movs	r6, #32
9001ad1c:	b151      	cbz	r1, 9001ad34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001ad1e:	6828      	ldr	r0, [r5, #0]
9001ad20:	3901      	subs	r1, #1
9001ad22:	4282      	cmp	r2, r0
9001ad24:	b289      	uxth	r1, r1
9001ad26:	dd05      	ble.n	9001ad34 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
9001ad28:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
9001ad2c:	682b      	ldr	r3, [r5, #0]
9001ad2e:	3301      	adds	r3, #1
9001ad30:	602b      	str	r3, [r5, #0]
9001ad32:	e7f3      	b.n	9001ad1c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
9001ad34:	b005      	add	sp, #20
9001ad36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ad3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
9001ad3a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001ad3e:	2400      	movs	r4, #0
9001ad40:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
9001ad44:	e9dd e609 	ldrd	lr, r6, [sp, #36]	; 0x24
9001ad48:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	; 0x2c
9001ad4c:	8014      	strh	r4, [r2, #0]
9001ad4e:	701c      	strb	r4, [r3, #0]
9001ad50:	f888 4000 	strb.w	r4, [r8]
9001ad54:	f88c 4000 	strb.w	r4, [ip]
9001ad58:	f88e 4000 	strb.w	r4, [lr]
9001ad5c:	703c      	strb	r4, [r7, #0]
9001ad5e:	6804      	ldr	r4, [r0, #0]
9001ad60:	b1a4      	cbz	r4, 9001ad8c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
9001ad62:	8824      	ldrh	r4, [r4, #0]
9001ad64:	f04f 0901 	mov.w	r9, #1
9001ad68:	b314      	cbz	r4, 9001adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001ad6a:	2c2b      	cmp	r4, #43	; 0x2b
9001ad6c:	d001      	beq.n	9001ad72 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
9001ad6e:	2c20      	cmp	r4, #32
9001ad70:	d110      	bne.n	9001ad94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
9001ad72:	8014      	strh	r4, [r2, #0]
9001ad74:	6804      	ldr	r4, [r0, #0]
9001ad76:	b10c      	cbz	r4, 9001ad7c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
9001ad78:	3402      	adds	r4, #2
9001ad7a:	6004      	str	r4, [r0, #0]
9001ad7c:	680c      	ldr	r4, [r1, #0]
9001ad7e:	b10c      	cbz	r4, 9001ad84 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
9001ad80:	3401      	adds	r4, #1
9001ad82:	600c      	str	r4, [r1, #0]
9001ad84:	6804      	ldr	r4, [r0, #0]
9001ad86:	b17c      	cbz	r4, 9001ada8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
9001ad88:	8824      	ldrh	r4, [r4, #0]
9001ad8a:	e7ed      	b.n	9001ad68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001ad8c:	680c      	ldr	r4, [r1, #0]
9001ad8e:	b17c      	cbz	r4, 9001adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001ad90:	7824      	ldrb	r4, [r4, #0]
9001ad92:	e7e7      	b.n	9001ad64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
9001ad94:	2c2d      	cmp	r4, #45	; 0x2d
9001ad96:	d102      	bne.n	9001ad9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
9001ad98:	f883 9000 	strb.w	r9, [r3]
9001ad9c:	e7ea      	b.n	9001ad74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001ad9e:	2c23      	cmp	r4, #35	; 0x23
9001ada0:	d107      	bne.n	9001adb2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
9001ada2:	f888 9000 	strb.w	r9, [r8]
9001ada6:	e7e5      	b.n	9001ad74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
9001ada8:	680c      	ldr	r4, [r1, #0]
9001adaa:	b10c      	cbz	r4, 9001adb0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
9001adac:	7824      	ldrb	r4, [r4, #0]
9001adae:	e7db      	b.n	9001ad68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
9001adb0:	2400      	movs	r4, #0
9001adb2:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
9001adb6:	2b09      	cmp	r3, #9
9001adb8:	d901      	bls.n	9001adbe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
9001adba:	2c2a      	cmp	r4, #42	; 0x2a
9001adbc:	d122      	bne.n	9001ae04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001adbe:	2301      	movs	r3, #1
9001adc0:	2c30      	cmp	r4, #48	; 0x30
9001adc2:	f88e 3000 	strb.w	r3, [lr]
9001adc6:	d10d      	bne.n	9001ade4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001adc8:	f88c 3000 	strb.w	r3, [ip]
9001adcc:	6803      	ldr	r3, [r0, #0]
9001adce:	b10b      	cbz	r3, 9001add4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
9001add0:	3302      	adds	r3, #2
9001add2:	6003      	str	r3, [r0, #0]
9001add4:	680b      	ldr	r3, [r1, #0]
9001add6:	b10b      	cbz	r3, 9001addc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
9001add8:	3301      	adds	r3, #1
9001adda:	600b      	str	r3, [r1, #0]
9001addc:	6803      	ldr	r3, [r0, #0]
9001adde:	2b00      	cmp	r3, #0
9001ade0:	d02f      	beq.n	9001ae42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
9001ade2:	881c      	ldrh	r4, [r3, #0]
9001ade4:	2c2a      	cmp	r4, #42	; 0x2a
9001ade6:	d135      	bne.n	9001ae54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001ade8:	f04f 33ff 	mov.w	r3, #4294967295
9001adec:	6033      	str	r3, [r6, #0]
9001adee:	6803      	ldr	r3, [r0, #0]
9001adf0:	b10b      	cbz	r3, 9001adf6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
9001adf2:	3302      	adds	r3, #2
9001adf4:	6003      	str	r3, [r0, #0]
9001adf6:	680b      	ldr	r3, [r1, #0]
9001adf8:	b10b      	cbz	r3, 9001adfe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
9001adfa:	3301      	adds	r3, #1
9001adfc:	600b      	str	r3, [r1, #0]
9001adfe:	6803      	ldr	r3, [r0, #0]
9001ae00:	b31b      	cbz	r3, 9001ae4a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
9001ae02:	881c      	ldrh	r4, [r3, #0]
9001ae04:	2c2e      	cmp	r4, #46	; 0x2e
9001ae06:	d11a      	bne.n	9001ae3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001ae08:	2301      	movs	r3, #1
9001ae0a:	703b      	strb	r3, [r7, #0]
9001ae0c:	6803      	ldr	r3, [r0, #0]
9001ae0e:	b10b      	cbz	r3, 9001ae14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
9001ae10:	3302      	adds	r3, #2
9001ae12:	6003      	str	r3, [r0, #0]
9001ae14:	680b      	ldr	r3, [r1, #0]
9001ae16:	b10b      	cbz	r3, 9001ae1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
9001ae18:	3301      	adds	r3, #1
9001ae1a:	600b      	str	r3, [r1, #0]
9001ae1c:	6803      	ldr	r3, [r0, #0]
9001ae1e:	2b00      	cmp	r3, #0
9001ae20:	d036      	beq.n	9001ae90 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
9001ae22:	881b      	ldrh	r3, [r3, #0]
9001ae24:	2b2a      	cmp	r3, #42	; 0x2a
9001ae26:	d137      	bne.n	9001ae98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001ae28:	f04f 33ff 	mov.w	r3, #4294967295
9001ae2c:	602b      	str	r3, [r5, #0]
9001ae2e:	6803      	ldr	r3, [r0, #0]
9001ae30:	b10b      	cbz	r3, 9001ae36 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
9001ae32:	3302      	adds	r3, #2
9001ae34:	6003      	str	r3, [r0, #0]
9001ae36:	680b      	ldr	r3, [r1, #0]
9001ae38:	b10b      	cbz	r3, 9001ae3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001ae3a:	3301      	adds	r3, #1
9001ae3c:	600b      	str	r3, [r1, #0]
9001ae3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001ae42:	680c      	ldr	r4, [r1, #0]
9001ae44:	b134      	cbz	r4, 9001ae54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
9001ae46:	7824      	ldrb	r4, [r4, #0]
9001ae48:	e7cc      	b.n	9001ade4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
9001ae4a:	680b      	ldr	r3, [r1, #0]
9001ae4c:	2b00      	cmp	r3, #0
9001ae4e:	d0f6      	beq.n	9001ae3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
9001ae50:	781c      	ldrb	r4, [r3, #0]
9001ae52:	e7d7      	b.n	9001ae04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001ae54:	2300      	movs	r3, #0
9001ae56:	220a      	movs	r2, #10
9001ae58:	6033      	str	r3, [r6, #0]
9001ae5a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
9001ae5e:	fa1f f38c 	uxth.w	r3, ip
9001ae62:	2b09      	cmp	r3, #9
9001ae64:	d8ce      	bhi.n	9001ae04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
9001ae66:	6833      	ldr	r3, [r6, #0]
9001ae68:	fb02 c303 	mla	r3, r2, r3, ip
9001ae6c:	6033      	str	r3, [r6, #0]
9001ae6e:	6803      	ldr	r3, [r0, #0]
9001ae70:	b10b      	cbz	r3, 9001ae76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
9001ae72:	3302      	adds	r3, #2
9001ae74:	6003      	str	r3, [r0, #0]
9001ae76:	680b      	ldr	r3, [r1, #0]
9001ae78:	b10b      	cbz	r3, 9001ae7e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
9001ae7a:	3301      	adds	r3, #1
9001ae7c:	600b      	str	r3, [r1, #0]
9001ae7e:	6803      	ldr	r3, [r0, #0]
9001ae80:	b10b      	cbz	r3, 9001ae86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
9001ae82:	881c      	ldrh	r4, [r3, #0]
9001ae84:	e7e9      	b.n	9001ae5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001ae86:	680c      	ldr	r4, [r1, #0]
9001ae88:	2c00      	cmp	r4, #0
9001ae8a:	d0e6      	beq.n	9001ae5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001ae8c:	7824      	ldrb	r4, [r4, #0]
9001ae8e:	e7e4      	b.n	9001ae5a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
9001ae90:	680b      	ldr	r3, [r1, #0]
9001ae92:	b10b      	cbz	r3, 9001ae98 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
9001ae94:	781b      	ldrb	r3, [r3, #0]
9001ae96:	e7c5      	b.n	9001ae24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
9001ae98:	2200      	movs	r2, #0
9001ae9a:	240a      	movs	r4, #10
9001ae9c:	602a      	str	r2, [r5, #0]
9001ae9e:	3b30      	subs	r3, #48	; 0x30
9001aea0:	682a      	ldr	r2, [r5, #0]
9001aea2:	b29e      	uxth	r6, r3
9001aea4:	2e09      	cmp	r6, #9
9001aea6:	d813      	bhi.n	9001aed0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
9001aea8:	fb04 3302 	mla	r3, r4, r2, r3
9001aeac:	602b      	str	r3, [r5, #0]
9001aeae:	6803      	ldr	r3, [r0, #0]
9001aeb0:	b10b      	cbz	r3, 9001aeb6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
9001aeb2:	3302      	adds	r3, #2
9001aeb4:	6003      	str	r3, [r0, #0]
9001aeb6:	680b      	ldr	r3, [r1, #0]
9001aeb8:	b10b      	cbz	r3, 9001aebe <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
9001aeba:	3301      	adds	r3, #1
9001aebc:	600b      	str	r3, [r1, #0]
9001aebe:	6803      	ldr	r3, [r0, #0]
9001aec0:	b10b      	cbz	r3, 9001aec6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
9001aec2:	881b      	ldrh	r3, [r3, #0]
9001aec4:	e7eb      	b.n	9001ae9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aec6:	680b      	ldr	r3, [r1, #0]
9001aec8:	2b00      	cmp	r3, #0
9001aeca:	d0e8      	beq.n	9001ae9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aecc:	781b      	ldrb	r3, [r3, #0]
9001aece:	e7e6      	b.n	9001ae9e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
9001aed0:	2a06      	cmp	r2, #6
9001aed2:	bfa8      	it	ge
9001aed4:	2206      	movge	r2, #6
9001aed6:	602a      	str	r2, [r5, #0]
9001aed8:	e7b1      	b.n	9001ae3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

9001aeda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
9001aeda:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001aede:	b0a3      	sub	sp, #140	; 0x8c
9001aee0:	2600      	movs	r6, #0
9001aee2:	4607      	mov	r7, r0
9001aee4:	4688      	mov	r8, r1
9001aee6:	f10d 0944 	add.w	r9, sp, #68	; 0x44
9001aeea:	4631      	mov	r1, r6
9001aeec:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
9001aeee:	4648      	mov	r0, r9
9001aef0:	960d      	str	r6, [sp, #52]	; 0x34
9001aef2:	e9cd 3208 	strd	r3, r2, [sp, #32]
9001aef6:	2242      	movs	r2, #66	; 0x42
9001aef8:	f00c f928 	bl	9002714c <memset>
9001aefc:	b15f      	cbz	r7, 9001af16 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
9001aefe:	f108 3aff 	add.w	sl, r8, #4294967295
9001af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001af04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001af06:	b152      	cbz	r2, 9001af1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
9001af08:	8812      	ldrh	r2, [r2, #0]
9001af0a:	b10a      	cbz	r2, 9001af10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001af0c:	459a      	cmp	sl, r3
9001af0e:	dc2e      	bgt.n	9001af6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
9001af10:	2200      	movs	r2, #0
9001af12:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001af16:	4638      	mov	r0, r7
9001af18:	b023      	add	sp, #140	; 0x8c
9001af1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001af1e:	9a08      	ldr	r2, [sp, #32]
9001af20:	2a00      	cmp	r2, #0
9001af22:	d0f5      	beq.n	9001af10 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
9001af24:	7812      	ldrb	r2, [r2, #0]
9001af26:	e7f0      	b.n	9001af0a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
9001af28:	2d00      	cmp	r5, #0
9001af2a:	d0ea      	beq.n	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001af2c:	782a      	ldrb	r2, [r5, #0]
9001af2e:	b142      	cbz	r2, 9001af42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
9001af30:	2a25      	cmp	r2, #37	; 0x25
9001af32:	d001      	beq.n	9001af38 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
9001af34:	459a      	cmp	sl, r3
9001af36:	dc08      	bgt.n	9001af4a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
9001af38:	f1bb 0f00 	cmp.w	fp, #0
9001af3c:	d121      	bne.n	9001af82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
9001af3e:	2d00      	cmp	r5, #0
9001af40:	d0df      	beq.n	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001af42:	782a      	ldrb	r2, [r5, #0]
9001af44:	f04f 0b00 	mov.w	fp, #0
9001af48:	e01d      	b.n	9001af86 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
9001af4a:	f1bb 0f00 	cmp.w	fp, #0
9001af4e:	d077      	beq.n	9001b040 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
9001af50:	f8bb 2000 	ldrh.w	r2, [fp]
9001af54:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
9001af58:	f1bb 0f00 	cmp.w	fp, #0
9001af5c:	d002      	beq.n	9001af64 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
9001af5e:	f10b 0202 	add.w	r2, fp, #2
9001af62:	9209      	str	r2, [sp, #36]	; 0x24
9001af64:	b10d      	cbz	r5, 9001af6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
9001af66:	3501      	adds	r5, #1
9001af68:	9508      	str	r5, [sp, #32]
9001af6a:	3301      	adds	r3, #1
9001af6c:	930d      	str	r3, [sp, #52]	; 0x34
9001af6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001af70:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
9001af74:	f1bb 0f00 	cmp.w	fp, #0
9001af78:	d0d6      	beq.n	9001af28 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
9001af7a:	f8bb 2000 	ldrh.w	r2, [fp]
9001af7e:	2a00      	cmp	r2, #0
9001af80:	d1d6      	bne.n	9001af30 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
9001af82:	f8bb 2000 	ldrh.w	r2, [fp]
9001af86:	2a00      	cmp	r2, #0
9001af88:	d0bb      	beq.n	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001af8a:	459a      	cmp	sl, r3
9001af8c:	ddb9      	ble.n	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001af8e:	f8ad 6032 	strh.w	r6, [sp, #50]	; 0x32
9001af92:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
9001af96:	f88d 602e 	strb.w	r6, [sp, #46]	; 0x2e
9001af9a:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
9001af9e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
9001afa2:	960e      	str	r6, [sp, #56]	; 0x38
9001afa4:	f88d 6031 	strb.w	r6, [sp, #49]	; 0x31
9001afa8:	960f      	str	r6, [sp, #60]	; 0x3c
9001afaa:	f1bb 0f00 	cmp.w	fp, #0
9001afae:	d002      	beq.n	9001afb6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
9001afb0:	f10b 0302 	add.w	r3, fp, #2
9001afb4:	9309      	str	r3, [sp, #36]	; 0x24
9001afb6:	b10d      	cbz	r5, 9001afbc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
9001afb8:	1c6b      	adds	r3, r5, #1
9001afba:	9308      	str	r3, [sp, #32]
9001afbc:	ab0f      	add	r3, sp, #60	; 0x3c
9001afbe:	f10d 0232 	add.w	r2, sp, #50	; 0x32
9001afc2:	a908      	add	r1, sp, #32
9001afc4:	a809      	add	r0, sp, #36	; 0x24
9001afc6:	9305      	str	r3, [sp, #20]
9001afc8:	f10d 0331 	add.w	r3, sp, #49	; 0x31
9001afcc:	9304      	str	r3, [sp, #16]
9001afce:	ab0e      	add	r3, sp, #56	; 0x38
9001afd0:	9303      	str	r3, [sp, #12]
9001afd2:	ab0c      	add	r3, sp, #48	; 0x30
9001afd4:	9302      	str	r3, [sp, #8]
9001afd6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
9001afda:	9301      	str	r3, [sp, #4]
9001afdc:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
9001afe0:	9300      	str	r3, [sp, #0]
9001afe2:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
9001afe6:	f7ff fea8 	bl	9001ad3a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
9001afea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001afec:	2b00      	cmp	r3, #0
9001afee:	bfbf      	itttt	lt
9001aff0:	6823      	ldrlt	r3, [r4, #0]
9001aff2:	3404      	addlt	r4, #4
9001aff4:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001aff8:	930e      	strlt	r3, [sp, #56]	; 0x38
9001affa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001affc:	2b00      	cmp	r3, #0
9001affe:	bfbe      	ittt	lt
9001b000:	6823      	ldrlt	r3, [r4, #0]
9001b002:	3404      	addlt	r4, #4
9001b004:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
9001b008:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001b00c:	bfb8      	it	lt
9001b00e:	930f      	strlt	r3, [sp, #60]	; 0x3c
9001b010:	b1d9      	cbz	r1, 9001b04a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
9001b012:	880b      	ldrh	r3, [r1, #0]
9001b014:	2b69      	cmp	r3, #105	; 0x69
9001b016:	d01f      	beq.n	9001b058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b018:	d82f      	bhi.n	9001b07a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
9001b01a:	2b58      	cmp	r3, #88	; 0x58
9001b01c:	d01c      	beq.n	9001b058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b01e:	d818      	bhi.n	9001b052 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
9001b020:	2b25      	cmp	r3, #37	; 0x25
9001b022:	d034      	beq.n	9001b08e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
9001b024:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001b026:	e9cd 5b08 	strd	r5, fp, [sp, #32]
9001b02a:	f1bb 0f00 	cmp.w	fp, #0
9001b02e:	f000 80b7 	beq.w	9001b1a0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
9001b032:	f8bb 5000 	ldrh.w	r5, [fp]
9001b036:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
9001b03a:	3301      	adds	r3, #1
9001b03c:	930d      	str	r3, [sp, #52]	; 0x34
9001b03e:	e029      	b.n	9001b094 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b040:	b10d      	cbz	r5, 9001b046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
9001b042:	782a      	ldrb	r2, [r5, #0]
9001b044:	e786      	b.n	9001af54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b046:	462a      	mov	r2, r5
9001b048:	e784      	b.n	9001af54 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
9001b04a:	2a00      	cmp	r2, #0
9001b04c:	d0ea      	beq.n	9001b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b04e:	7813      	ldrb	r3, [r2, #0]
9001b050:	e7e0      	b.n	9001b014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
9001b052:	3b63      	subs	r3, #99	; 0x63
9001b054:	2b01      	cmp	r3, #1
9001b056:	d8e5      	bhi.n	9001b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b058:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
9001b05c:	b329      	cbz	r1, 9001b0aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
9001b05e:	880b      	ldrh	r3, [r1, #0]
9001b060:	2b69      	cmp	r3, #105	; 0x69
9001b062:	d063      	beq.n	9001b12c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b064:	d825      	bhi.n	9001b0b2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
9001b066:	2b63      	cmp	r3, #99	; 0x63
9001b068:	d038      	beq.n	9001b0dc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
9001b06a:	2b64      	cmp	r3, #100	; 0x64
9001b06c:	d05e      	beq.n	9001b12c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
9001b06e:	2b58      	cmp	r3, #88	; 0x58
9001b070:	d07a      	beq.n	9001b168 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
9001b072:	f8ad 6044 	strh.w	r6, [sp, #68]	; 0x44
9001b076:	4625      	mov	r5, r4
9001b078:	e036      	b.n	9001b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b07a:	2b73      	cmp	r3, #115	; 0x73
9001b07c:	d0ec      	beq.n	9001b058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b07e:	d802      	bhi.n	9001b086 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
9001b080:	2b6f      	cmp	r3, #111	; 0x6f
9001b082:	d1cf      	bne.n	9001b024 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
9001b084:	e7e8      	b.n	9001b058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b086:	2b75      	cmp	r3, #117	; 0x75
9001b088:	d0e6      	beq.n	9001b058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
9001b08a:	2b78      	cmp	r3, #120	; 0x78
9001b08c:	e7f9      	b.n	9001b082 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
9001b08e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b090:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
9001b094:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b096:	b10b      	cbz	r3, 9001b09c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
9001b098:	3302      	adds	r3, #2
9001b09a:	9309      	str	r3, [sp, #36]	; 0x24
9001b09c:	9b08      	ldr	r3, [sp, #32]
9001b09e:	2b00      	cmp	r3, #0
9001b0a0:	f43f af2f 	beq.w	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b0a4:	3301      	adds	r3, #1
9001b0a6:	9308      	str	r3, [sp, #32]
9001b0a8:	e72b      	b.n	9001af02 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
9001b0aa:	2a00      	cmp	r2, #0
9001b0ac:	d0e1      	beq.n	9001b072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b0ae:	7813      	ldrb	r3, [r2, #0]
9001b0b0:	e7d6      	b.n	9001b060 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
9001b0b2:	2b73      	cmp	r3, #115	; 0x73
9001b0b4:	d036      	beq.n	9001b124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
9001b0b6:	d807      	bhi.n	9001b0c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
9001b0b8:	2b6f      	cmp	r3, #111	; 0x6f
9001b0ba:	d1da      	bne.n	9001b072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b0bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b0be:	1d25      	adds	r5, r4, #4
9001b0c0:	2308      	movs	r3, #8
9001b0c2:	eba8 0202 	sub.w	r2, r8, r2
9001b0c6:	e049      	b.n	9001b15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b0c8:	2b75      	cmp	r3, #117	; 0x75
9001b0ca:	d042      	beq.n	9001b152 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
9001b0cc:	2b78      	cmp	r3, #120	; 0x78
9001b0ce:	d1d0      	bne.n	9001b072 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
9001b0d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b0d2:	1d25      	adds	r5, r4, #4
9001b0d4:	2310      	movs	r3, #16
9001b0d6:	eba8 0202 	sub.w	r2, r8, r2
9001b0da:	e03f      	b.n	9001b15c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
9001b0dc:	6823      	ldr	r3, [r4, #0]
9001b0de:	1d25      	adds	r5, r4, #4
9001b0e0:	f8ad 6046 	strh.w	r6, [sp, #70]	; 0x46
9001b0e4:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
9001b0e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001b0ea:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
9001b0ee:	2b00      	cmp	r3, #0
9001b0f0:	d051      	beq.n	9001b196 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
9001b0f2:	881a      	ldrh	r2, [r3, #0]
9001b0f4:	a80d      	add	r0, sp, #52	; 0x34
9001b0f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
9001b0fa:	462c      	mov	r4, r5
9001b0fc:	9005      	str	r0, [sp, #20]
9001b0fe:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
9001b102:	9004      	str	r0, [sp, #16]
9001b104:	980e      	ldr	r0, [sp, #56]	; 0x38
9001b106:	9003      	str	r0, [sp, #12]
9001b108:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
9001b10c:	9002      	str	r0, [sp, #8]
9001b10e:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001b110:	9001      	str	r0, [sp, #4]
9001b112:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
9001b116:	e9cd 8706 	strd	r8, r7, [sp, #24]
9001b11a:	9000      	str	r0, [sp, #0]
9001b11c:	a810      	add	r0, sp, #64	; 0x40
9001b11e:	f7ff fd49 	bl	9001abb4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
9001b122:	e7b7      	b.n	9001b094 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
9001b124:	1d25      	adds	r5, r4, #4
9001b126:	6823      	ldr	r3, [r4, #0]
9001b128:	9310      	str	r3, [sp, #64]	; 0x40
9001b12a:	e7dd      	b.n	9001b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b12e:	230a      	movs	r3, #10
9001b130:	4649      	mov	r1, r9
9001b132:	6820      	ldr	r0, [r4, #0]
9001b134:	eba8 0202 	sub.w	r2, r8, r2
9001b138:	1d25      	adds	r5, r4, #4
9001b13a:	b292      	uxth	r2, r2
9001b13c:	f7ff fd08 	bl	9001ab50 <_ZN8touchgfx7Unicode4itoaElPtti>
9001b140:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
9001b144:	2b2d      	cmp	r3, #45	; 0x2d
9001b146:	d1cf      	bne.n	9001b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b148:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001b14c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b14e:	3302      	adds	r3, #2
9001b150:	e7ea      	b.n	9001b128 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
9001b152:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b154:	1d25      	adds	r5, r4, #4
9001b156:	230a      	movs	r3, #10
9001b158:	eba8 0202 	sub.w	r2, r8, r2
9001b15c:	b292      	uxth	r2, r2
9001b15e:	4649      	mov	r1, r9
9001b160:	6820      	ldr	r0, [r4, #0]
9001b162:	f7ff fcd7 	bl	9001ab14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b166:	e7bf      	b.n	9001b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9001b16a:	2310      	movs	r3, #16
9001b16c:	4649      	mov	r1, r9
9001b16e:	6820      	ldr	r0, [r4, #0]
9001b170:	eba8 0202 	sub.w	r2, r8, r2
9001b174:	1d25      	adds	r5, r4, #4
9001b176:	b292      	uxth	r2, r2
9001b178:	f7ff fccc 	bl	9001ab14 <_ZN8touchgfx7Unicode4utoaEmPtti.part.2>
9001b17c:	f10d 0242 	add.w	r2, sp, #66	; 0x42
9001b180:	f832 3f02 	ldrh.w	r3, [r2, #2]!
9001b184:	2b00      	cmp	r3, #0
9001b186:	d0af      	beq.n	9001b0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
9001b188:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
9001b18c:	2919      	cmp	r1, #25
9001b18e:	d8f7      	bhi.n	9001b180 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b190:	3b20      	subs	r3, #32
9001b192:	8013      	strh	r3, [r2, #0]
9001b194:	e7f4      	b.n	9001b180 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
9001b196:	9a08      	ldr	r2, [sp, #32]
9001b198:	2a00      	cmp	r2, #0
9001b19a:	d0ab      	beq.n	9001b0f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b19c:	7812      	ldrb	r2, [r2, #0]
9001b19e:	e7a9      	b.n	9001b0f4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
9001b1a0:	2d00      	cmp	r5, #0
9001b1a2:	f43f af48 	beq.w	9001b036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
9001b1a6:	782d      	ldrb	r5, [r5, #0]
9001b1a8:	e745      	b.n	9001b036 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

9001b1aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
9001b1aa:	b507      	push	{r0, r1, r2, lr}
9001b1ac:	9300      	str	r3, [sp, #0]
9001b1ae:	4613      	mov	r3, r2
9001b1b0:	2200      	movs	r2, #0
9001b1b2:	f7ff fe92 	bl	9001aeda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
9001b1b6:	b003      	add	sp, #12
9001b1b8:	f85d fb04 	ldr.w	pc, [sp], #4

9001b1bc <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
9001b1bc:	b40c      	push	{r2, r3}
9001b1be:	b507      	push	{r0, r1, r2, lr}
9001b1c0:	ab04      	add	r3, sp, #16
9001b1c2:	f853 2b04 	ldr.w	r2, [r3], #4
9001b1c6:	9301      	str	r3, [sp, #4]
9001b1c8:	f7ff ffef 	bl	9001b1aa <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
9001b1cc:	b003      	add	sp, #12
9001b1ce:	f85d eb04 	ldr.w	lr, [sp], #4
9001b1d2:	b002      	add	sp, #8
9001b1d4:	4770      	bx	lr
	...

9001b1d8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
9001b1d8:	4b01      	ldr	r3, [pc, #4]	; (9001b1e0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
9001b1da:	6018      	str	r0, [r3, #0]
9001b1dc:	4770      	bx	lr
9001b1de:	bf00      	nop
9001b1e0:	24026fec 	.word	0x24026fec

9001b1e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
9001b1e4:	4b06      	ldr	r3, [pc, #24]	; (9001b200 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
9001b1e6:	881a      	ldrh	r2, [r3, #0]
9001b1e8:	4282      	cmp	r2, r0
9001b1ea:	d807      	bhi.n	9001b1fc <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
9001b1ec:	4b05      	ldr	r3, [pc, #20]	; (9001b204 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
9001b1ee:	881b      	ldrh	r3, [r3, #0]
9001b1f0:	4413      	add	r3, r2
9001b1f2:	4298      	cmp	r0, r3
9001b1f4:	bfac      	ite	ge
9001b1f6:	2000      	movge	r0, #0
9001b1f8:	2001      	movlt	r0, #1
9001b1fa:	4770      	bx	lr
9001b1fc:	2000      	movs	r0, #0
9001b1fe:	4770      	bx	lr
9001b200:	2402700c 	.word	0x2402700c
9001b204:	24027010 	.word	0x24027010

9001b208 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
9001b208:	b508      	push	{r3, lr}
9001b20a:	4601      	mov	r1, r0
9001b20c:	f7ff ffea 	bl	9001b1e4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
9001b210:	b118      	cbz	r0, 9001b21a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
9001b212:	4b02      	ldr	r3, [pc, #8]	; (9001b21c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
9001b214:	681b      	ldr	r3, [r3, #0]
9001b216:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
9001b21a:	bd08      	pop	{r3, pc}
9001b21c:	24026ff0 	.word	0x24026ff0

9001b220 <_ZN8touchgfx6Bitmap10clearCacheEv>:
9001b220:	b5f0      	push	{r4, r5, r6, r7, lr}
9001b222:	4c24      	ldr	r4, [pc, #144]	; (9001b2b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
9001b224:	6823      	ldr	r3, [r4, #0]
9001b226:	2b00      	cmp	r3, #0
9001b228:	d042      	beq.n	9001b2b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b22a:	4a23      	ldr	r2, [pc, #140]	; (9001b2b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
9001b22c:	4d23      	ldr	r5, [pc, #140]	; (9001b2bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
9001b22e:	8811      	ldrh	r1, [r2, #0]
9001b230:	f8b5 c000 	ldrh.w	ip, [r5]
9001b234:	4822      	ldr	r0, [pc, #136]	; (9001b2c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
9001b236:	4461      	add	r1, ip
9001b238:	1c4a      	adds	r2, r1, #1
9001b23a:	008f      	lsls	r7, r1, #2
9001b23c:	f022 0201 	bic.w	r2, r2, #1
9001b240:	19de      	adds	r6, r3, r7
9001b242:	0412      	lsls	r2, r2, #16
9001b244:	6006      	str	r6, [r0, #0]
9001b246:	4e1f      	ldr	r6, [pc, #124]	; (9001b2c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
9001b248:	0c12      	lsrs	r2, r2, #16
9001b24a:	eb07 0742 	add.w	r7, r7, r2, lsl #1
9001b24e:	19da      	adds	r2, r3, r7
9001b250:	6032      	str	r2, [r6, #0]
9001b252:	220e      	movs	r2, #14
9001b254:	fb02 f20c 	mul.w	r2, r2, ip
9001b258:	3203      	adds	r2, #3
9001b25a:	f022 0203 	bic.w	r2, r2, #3
9001b25e:	443a      	add	r2, r7
9001b260:	4f19      	ldr	r7, [pc, #100]	; (9001b2c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
9001b262:	4413      	add	r3, r2
9001b264:	603b      	str	r3, [r7, #0]
9001b266:	2300      	movs	r3, #0
9001b268:	4f18      	ldr	r7, [pc, #96]	; (9001b2cc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
9001b26a:	469c      	mov	ip, r3
9001b26c:	803b      	strh	r3, [r7, #0]
9001b26e:	4f18      	ldr	r7, [pc, #96]	; (9001b2d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
9001b270:	683f      	ldr	r7, [r7, #0]
9001b272:	1aba      	subs	r2, r7, r2
9001b274:	4f17      	ldr	r7, [pc, #92]	; (9001b2d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
9001b276:	603a      	str	r2, [r7, #0]
9001b278:	f64f 77ff 	movw	r7, #65535	; 0xffff
9001b27c:	4a16      	ldr	r2, [pc, #88]	; (9001b2d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
9001b27e:	8013      	strh	r3, [r2, #0]
9001b280:	428b      	cmp	r3, r1
9001b282:	d10d      	bne.n	9001b2a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
9001b284:	882d      	ldrh	r5, [r5, #0]
9001b286:	2300      	movs	r3, #0
9001b288:	6830      	ldr	r0, [r6, #0]
9001b28a:	240e      	movs	r4, #14
9001b28c:	429d      	cmp	r5, r3
9001b28e:	d90f      	bls.n	9001b2b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
9001b290:	fb04 0203 	mla	r2, r4, r3, r0
9001b294:	3301      	adds	r3, #1
9001b296:	7b11      	ldrb	r1, [r2, #12]
9001b298:	f36f 1145 	bfc	r1, #5, #1
9001b29c:	7311      	strb	r1, [r2, #12]
9001b29e:	e7f5      	b.n	9001b28c <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
9001b2a0:	6822      	ldr	r2, [r4, #0]
9001b2a2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
9001b2a6:	6802      	ldr	r2, [r0, #0]
9001b2a8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
9001b2ac:	3301      	adds	r3, #1
9001b2ae:	e7e7      	b.n	9001b280 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
9001b2b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001b2b2:	bf00      	nop
9001b2b4:	24026ff0 	.word	0x24026ff0
9001b2b8:	2402700c 	.word	0x2402700c
9001b2bc:	24027010 	.word	0x24027010
9001b2c0:	24027004 	.word	0x24027004
9001b2c4:	24026ff4 	.word	0x24026ff4
9001b2c8:	24026ffc 	.word	0x24026ffc
9001b2cc:	2402700e 	.word	0x2402700e
9001b2d0:	24026ff8 	.word	0x24026ff8
9001b2d4:	24027008 	.word	0x24027008
9001b2d8:	24027000 	.word	0x24027000

9001b2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
9001b2dc:	4b06      	ldr	r3, [pc, #24]	; (9001b2f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
9001b2de:	681b      	ldr	r3, [r3, #0]
9001b2e0:	b943      	cbnz	r3, 9001b2f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b2e2:	b139      	cbz	r1, 9001b2f4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
9001b2e4:	4b05      	ldr	r3, [pc, #20]	; (9001b2fc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
9001b2e6:	801a      	strh	r2, [r3, #0]
9001b2e8:	4b05      	ldr	r3, [pc, #20]	; (9001b300 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
9001b2ea:	6019      	str	r1, [r3, #0]
9001b2ec:	4b05      	ldr	r3, [pc, #20]	; (9001b304 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
9001b2ee:	6018      	str	r0, [r3, #0]
9001b2f0:	f7ff bf96 	b.w	9001b220 <_ZN8touchgfx6Bitmap10clearCacheEv>
9001b2f4:	4770      	bx	lr
9001b2f6:	bf00      	nop
9001b2f8:	24026ffc 	.word	0x24026ffc
9001b2fc:	24027010 	.word	0x24027010
9001b300:	24026ff8 	.word	0x24026ff8
9001b304:	24026ff0 	.word	0x24026ff0

9001b308 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
9001b308:	b470      	push	{r4, r5, r6}
9001b30a:	4c07      	ldr	r4, [pc, #28]	; (9001b328 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
9001b30c:	4605      	mov	r5, r0
9001b30e:	4610      	mov	r0, r2
9001b310:	9a03      	ldr	r2, [sp, #12]
9001b312:	6826      	ldr	r6, [r4, #0]
9001b314:	b936      	cbnz	r6, 9001b324 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
9001b316:	6025      	str	r5, [r4, #0]
9001b318:	4c04      	ldr	r4, [pc, #16]	; (9001b32c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
9001b31a:	8021      	strh	r1, [r4, #0]
9001b31c:	4619      	mov	r1, r3
9001b31e:	bc70      	pop	{r4, r5, r6}
9001b320:	f7ff bfdc 	b.w	9001b2dc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
9001b324:	bc70      	pop	{r4, r5, r6}
9001b326:	4770      	bx	lr
9001b328:	24027014 	.word	0x24027014
9001b32c:	2402700c 	.word	0x2402700c

9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>:
9001b330:	4a12      	ldr	r2, [pc, #72]	; (9001b37c <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
9001b332:	8803      	ldrh	r3, [r0, #0]
9001b334:	8812      	ldrh	r2, [r2, #0]
9001b336:	4293      	cmp	r3, r2
9001b338:	d207      	bcs.n	9001b34a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
9001b33a:	4a11      	ldr	r2, [pc, #68]	; (9001b380 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
9001b33c:	2114      	movs	r1, #20
9001b33e:	6812      	ldr	r2, [r2, #0]
9001b340:	fb01 2303 	mla	r3, r1, r3, r2
9001b344:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
9001b348:	4770      	bx	lr
9001b34a:	490e      	ldr	r1, [pc, #56]	; (9001b384 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
9001b34c:	8809      	ldrh	r1, [r1, #0]
9001b34e:	4411      	add	r1, r2
9001b350:	428b      	cmp	r3, r1
9001b352:	da04      	bge.n	9001b35e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
9001b354:	1a9b      	subs	r3, r3, r2
9001b356:	4a0c      	ldr	r2, [pc, #48]	; (9001b388 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
9001b358:	210e      	movs	r1, #14
9001b35a:	6812      	ldr	r2, [r2, #0]
9001b35c:	e7f0      	b.n	9001b340 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
9001b35e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b362:	4293      	cmp	r3, r2
9001b364:	d108      	bne.n	9001b378 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
9001b366:	4b09      	ldr	r3, [pc, #36]	; (9001b38c <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
9001b368:	781b      	ldrb	r3, [r3, #0]
9001b36a:	b91b      	cbnz	r3, 9001b374 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
9001b36c:	4b08      	ldr	r3, [pc, #32]	; (9001b390 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
9001b36e:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b372:	4770      	bx	lr
9001b374:	4b07      	ldr	r3, [pc, #28]	; (9001b394 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
9001b376:	e7fa      	b.n	9001b36e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
9001b378:	2000      	movs	r0, #0
9001b37a:	4770      	bx	lr
9001b37c:	2402700c 	.word	0x2402700c
9001b380:	24027014 	.word	0x24027014
9001b384:	24027010 	.word	0x24027010
9001b388:	24026ff4 	.word	0x24026ff4
9001b38c:	24026f84 	.word	0x24026f84
9001b390:	24026f86 	.word	0x24026f86
9001b394:	24026f88 	.word	0x24026f88

9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>:
9001b398:	4a12      	ldr	r2, [pc, #72]	; (9001b3e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
9001b39a:	8803      	ldrh	r3, [r0, #0]
9001b39c:	8812      	ldrh	r2, [r2, #0]
9001b39e:	4293      	cmp	r3, r2
9001b3a0:	d207      	bcs.n	9001b3b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
9001b3a2:	4a11      	ldr	r2, [pc, #68]	; (9001b3e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
9001b3a4:	2114      	movs	r1, #20
9001b3a6:	6812      	ldr	r2, [r2, #0]
9001b3a8:	fb01 2303 	mla	r3, r1, r3, r2
9001b3ac:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
9001b3b0:	4770      	bx	lr
9001b3b2:	490e      	ldr	r1, [pc, #56]	; (9001b3ec <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
9001b3b4:	8809      	ldrh	r1, [r1, #0]
9001b3b6:	4411      	add	r1, r2
9001b3b8:	428b      	cmp	r3, r1
9001b3ba:	da04      	bge.n	9001b3c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
9001b3bc:	1a9b      	subs	r3, r3, r2
9001b3be:	4a0c      	ldr	r2, [pc, #48]	; (9001b3f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
9001b3c0:	210e      	movs	r1, #14
9001b3c2:	6812      	ldr	r2, [r2, #0]
9001b3c4:	e7f0      	b.n	9001b3a8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
9001b3c6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b3ca:	4293      	cmp	r3, r2
9001b3cc:	d108      	bne.n	9001b3e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
9001b3ce:	4b09      	ldr	r3, [pc, #36]	; (9001b3f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
9001b3d0:	781b      	ldrb	r3, [r3, #0]
9001b3d2:	b91b      	cbnz	r3, 9001b3dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
9001b3d4:	4b08      	ldr	r3, [pc, #32]	; (9001b3f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
9001b3d6:	f9b3 0000 	ldrsh.w	r0, [r3]
9001b3da:	4770      	bx	lr
9001b3dc:	4b07      	ldr	r3, [pc, #28]	; (9001b3fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
9001b3de:	e7fa      	b.n	9001b3d6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
9001b3e0:	2000      	movs	r0, #0
9001b3e2:	4770      	bx	lr
9001b3e4:	2402700c 	.word	0x2402700c
9001b3e8:	24027014 	.word	0x24027014
9001b3ec:	24027010 	.word	0x24027010
9001b3f0:	24026ff4 	.word	0x24026ff4
9001b3f4:	24026f84 	.word	0x24026f84
9001b3f8:	24026f88 	.word	0x24026f88
9001b3fc:	24026f86 	.word	0x24026f86

9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
9001b400:	4a1f      	ldr	r2, [pc, #124]	; (9001b480 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
9001b402:	b510      	push	{r4, lr}
9001b404:	880b      	ldrh	r3, [r1, #0]
9001b406:	8812      	ldrh	r2, [r2, #0]
9001b408:	4293      	cmp	r3, r2
9001b40a:	d213      	bcs.n	9001b434 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
9001b40c:	4a1d      	ldr	r2, [pc, #116]	; (9001b484 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
9001b40e:	2114      	movs	r1, #20
9001b410:	6812      	ldr	r2, [r2, #0]
9001b412:	fb01 2303 	mla	r3, r1, r3, r2
9001b416:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
9001b41a:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
9001b41e:	8a1a      	ldrh	r2, [r3, #16]
9001b420:	8a5b      	ldrh	r3, [r3, #18]
9001b422:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b426:	8004      	strh	r4, [r0, #0]
9001b428:	f3c3 030c 	ubfx	r3, r3, #0, #13
9001b42c:	8041      	strh	r1, [r0, #2]
9001b42e:	8082      	strh	r2, [r0, #4]
9001b430:	80c3      	strh	r3, [r0, #6]
9001b432:	e00e      	b.n	9001b452 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b434:	4914      	ldr	r1, [pc, #80]	; (9001b488 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
9001b436:	8809      	ldrh	r1, [r1, #0]
9001b438:	4411      	add	r1, r2
9001b43a:	428b      	cmp	r3, r1
9001b43c:	da0a      	bge.n	9001b454 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
9001b43e:	1a9b      	subs	r3, r3, r2
9001b440:	4a12      	ldr	r2, [pc, #72]	; (9001b48c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
9001b442:	210e      	movs	r1, #14
9001b444:	6812      	ldr	r2, [r2, #0]
9001b446:	fb01 2303 	mla	r3, r1, r3, r2
9001b44a:	681a      	ldr	r2, [r3, #0]
9001b44c:	6002      	str	r2, [r0, #0]
9001b44e:	685a      	ldr	r2, [r3, #4]
9001b450:	6042      	str	r2, [r0, #4]
9001b452:	bd10      	pop	{r4, pc}
9001b454:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b458:	4293      	cmp	r3, r2
9001b45a:	d10b      	bne.n	9001b474 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
9001b45c:	4b0c      	ldr	r3, [pc, #48]	; (9001b490 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
9001b45e:	f9b3 1000 	ldrsh.w	r1, [r3]
9001b462:	4b0c      	ldr	r3, [pc, #48]	; (9001b494 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
9001b464:	8081      	strh	r1, [r0, #4]
9001b466:	f9b3 2000 	ldrsh.w	r2, [r3]
9001b46a:	2300      	movs	r3, #0
9001b46c:	80c2      	strh	r2, [r0, #6]
9001b46e:	8003      	strh	r3, [r0, #0]
9001b470:	8043      	strh	r3, [r0, #2]
9001b472:	e7ee      	b.n	9001b452 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
9001b474:	2300      	movs	r3, #0
9001b476:	8003      	strh	r3, [r0, #0]
9001b478:	8043      	strh	r3, [r0, #2]
9001b47a:	8083      	strh	r3, [r0, #4]
9001b47c:	e7d8      	b.n	9001b430 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
9001b47e:	bf00      	nop
9001b480:	2402700c 	.word	0x2402700c
9001b484:	24027014 	.word	0x24027014
9001b488:	24027010 	.word	0x24027010
9001b48c:	24026ff4 	.word	0x24026ff4
9001b490:	24026f80 	.word	0x24026f80
9001b494:	24026f82 	.word	0x24026f82

9001b498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
9001b498:	4a17      	ldr	r2, [pc, #92]	; (9001b4f8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
9001b49a:	8803      	ldrh	r3, [r0, #0]
9001b49c:	8812      	ldrh	r2, [r2, #0]
9001b49e:	4293      	cmp	r3, r2
9001b4a0:	d213      	bcs.n	9001b4ca <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
9001b4a2:	4a16      	ldr	r2, [pc, #88]	; (9001b4fc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
9001b4a4:	2114      	movs	r1, #20
9001b4a6:	6812      	ldr	r2, [r2, #0]
9001b4a8:	fb01 2303 	mla	r3, r1, r3, r2
9001b4ac:	8a1a      	ldrh	r2, [r3, #16]
9001b4ae:	8919      	ldrh	r1, [r3, #8]
9001b4b0:	f3c2 020c 	ubfx	r2, r2, #0, #13
9001b4b4:	428a      	cmp	r2, r1
9001b4b6:	db1d      	blt.n	9001b4f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b4b8:	8a58      	ldrh	r0, [r3, #18]
9001b4ba:	f3c0 000c 	ubfx	r0, r0, #0, #13
9001b4be:	895b      	ldrh	r3, [r3, #10]
9001b4c0:	4298      	cmp	r0, r3
9001b4c2:	bfac      	ite	ge
9001b4c4:	2000      	movge	r0, #0
9001b4c6:	2001      	movlt	r0, #1
9001b4c8:	4770      	bx	lr
9001b4ca:	490d      	ldr	r1, [pc, #52]	; (9001b500 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
9001b4cc:	8809      	ldrh	r1, [r1, #0]
9001b4ce:	4411      	add	r1, r2
9001b4d0:	428b      	cmp	r3, r1
9001b4d2:	da0d      	bge.n	9001b4f0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
9001b4d4:	1a9b      	subs	r3, r3, r2
9001b4d6:	4a0b      	ldr	r2, [pc, #44]	; (9001b504 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
9001b4d8:	210e      	movs	r1, #14
9001b4da:	6812      	ldr	r2, [r2, #0]
9001b4dc:	fb01 2303 	mla	r3, r1, r3, r2
9001b4e0:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
9001b4e4:	891a      	ldrh	r2, [r3, #8]
9001b4e6:	4291      	cmp	r1, r2
9001b4e8:	db04      	blt.n	9001b4f4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
9001b4ea:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
9001b4ee:	e7e6      	b.n	9001b4be <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
9001b4f0:	2000      	movs	r0, #0
9001b4f2:	4770      	bx	lr
9001b4f4:	2001      	movs	r0, #1
9001b4f6:	4770      	bx	lr
9001b4f8:	2402700c 	.word	0x2402700c
9001b4fc:	24027014 	.word	0x24027014
9001b500:	24027010 	.word	0x24027010
9001b504:	24026ff4 	.word	0x24026ff4

9001b508 <_ZNK8touchgfx6Bitmap7getDataEv>:
9001b508:	4a12      	ldr	r2, [pc, #72]	; (9001b554 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
9001b50a:	8803      	ldrh	r3, [r0, #0]
9001b50c:	8811      	ldrh	r1, [r2, #0]
9001b50e:	428b      	cmp	r3, r1
9001b510:	d20b      	bcs.n	9001b52a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
9001b512:	4a11      	ldr	r2, [pc, #68]	; (9001b558 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b514:	6812      	ldr	r2, [r2, #0]
9001b516:	b112      	cbz	r2, 9001b51e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
9001b518:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b51c:	b9c0      	cbnz	r0, 9001b550 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
9001b51e:	4a0f      	ldr	r2, [pc, #60]	; (9001b55c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
9001b520:	6811      	ldr	r1, [r2, #0]
9001b522:	2214      	movs	r2, #20
9001b524:	4353      	muls	r3, r2
9001b526:	58c8      	ldr	r0, [r1, r3]
9001b528:	4770      	bx	lr
9001b52a:	4a0d      	ldr	r2, [pc, #52]	; (9001b560 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
9001b52c:	8812      	ldrh	r2, [r2, #0]
9001b52e:	440a      	add	r2, r1
9001b530:	4293      	cmp	r3, r2
9001b532:	da04      	bge.n	9001b53e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
9001b534:	4a08      	ldr	r2, [pc, #32]	; (9001b558 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
9001b536:	6812      	ldr	r2, [r2, #0]
9001b538:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
9001b53c:	4770      	bx	lr
9001b53e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b542:	4293      	cmp	r3, r2
9001b544:	d103      	bne.n	9001b54e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
9001b546:	4b07      	ldr	r3, [pc, #28]	; (9001b564 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
9001b548:	681b      	ldr	r3, [r3, #0]
9001b54a:	6c58      	ldr	r0, [r3, #68]	; 0x44
9001b54c:	4770      	bx	lr
9001b54e:	2000      	movs	r0, #0
9001b550:	4770      	bx	lr
9001b552:	bf00      	nop
9001b554:	2402700c 	.word	0x2402700c
9001b558:	24026ff0 	.word	0x24026ff0
9001b55c:	24027014 	.word	0x24027014
9001b560:	24027010 	.word	0x24027010
9001b564:	24026f8c 	.word	0x24026f8c

9001b568 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
9001b568:	4b24      	ldr	r3, [pc, #144]	; (9001b5fc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
9001b56a:	8802      	ldrh	r2, [r0, #0]
9001b56c:	8818      	ldrh	r0, [r3, #0]
9001b56e:	4282      	cmp	r2, r0
9001b570:	d221      	bcs.n	9001b5b6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
9001b572:	4b23      	ldr	r3, [pc, #140]	; (9001b600 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
9001b574:	6819      	ldr	r1, [r3, #0]
9001b576:	2314      	movs	r3, #20
9001b578:	fb03 1302 	mla	r3, r3, r2, r1
9001b57c:	6858      	ldr	r0, [r3, #4]
9001b57e:	2800      	cmp	r0, #0
9001b580:	d03a      	beq.n	9001b5f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b582:	4920      	ldr	r1, [pc, #128]	; (9001b604 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b584:	6809      	ldr	r1, [r1, #0]
9001b586:	2900      	cmp	r1, #0
9001b588:	d036      	beq.n	9001b5f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b58a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
9001b58e:	2900      	cmp	r1, #0
9001b590:	d032      	beq.n	9001b5f8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
9001b592:	891a      	ldrh	r2, [r3, #8]
9001b594:	8958      	ldrh	r0, [r3, #10]
9001b596:	4350      	muls	r0, r2
9001b598:	7c5a      	ldrb	r2, [r3, #17]
9001b59a:	7cdb      	ldrb	r3, [r3, #19]
9001b59c:	0952      	lsrs	r2, r2, #5
9001b59e:	f3c3 1342 	ubfx	r3, r3, #5, #3
9001b5a2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
9001b5a6:	2b0b      	cmp	r3, #11
9001b5a8:	bf18      	it	ne
9001b5aa:	0040      	lslne	r0, r0, #1
9001b5ac:	3003      	adds	r0, #3
9001b5ae:	f020 0003 	bic.w	r0, r0, #3
9001b5b2:	4408      	add	r0, r1
9001b5b4:	4770      	bx	lr
9001b5b6:	4b14      	ldr	r3, [pc, #80]	; (9001b608 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
9001b5b8:	881b      	ldrh	r3, [r3, #0]
9001b5ba:	4403      	add	r3, r0
9001b5bc:	429a      	cmp	r2, r3
9001b5be:	da1a      	bge.n	9001b5f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b5c0:	4b12      	ldr	r3, [pc, #72]	; (9001b60c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
9001b5c2:	1a10      	subs	r0, r2, r0
9001b5c4:	210e      	movs	r1, #14
9001b5c6:	681b      	ldr	r3, [r3, #0]
9001b5c8:	fb01 3000 	mla	r0, r1, r0, r3
9001b5cc:	7b03      	ldrb	r3, [r0, #12]
9001b5ce:	f003 031f 	and.w	r3, r3, #31
9001b5d2:	2b0b      	cmp	r3, #11
9001b5d4:	d10b      	bne.n	9001b5ee <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
9001b5d6:	8903      	ldrh	r3, [r0, #8]
9001b5d8:	8940      	ldrh	r0, [r0, #10]
9001b5da:	4358      	muls	r0, r3
9001b5dc:	4b09      	ldr	r3, [pc, #36]	; (9001b604 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
9001b5de:	3003      	adds	r0, #3
9001b5e0:	6819      	ldr	r1, [r3, #0]
9001b5e2:	f020 0303 	bic.w	r3, r0, #3
9001b5e6:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
9001b5ea:	4418      	add	r0, r3
9001b5ec:	4770      	bx	lr
9001b5ee:	2b0d      	cmp	r3, #13
9001b5f0:	d101      	bne.n	9001b5f6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
9001b5f2:	300d      	adds	r0, #13
9001b5f4:	4770      	bx	lr
9001b5f6:	2000      	movs	r0, #0
9001b5f8:	4770      	bx	lr
9001b5fa:	bf00      	nop
9001b5fc:	2402700c 	.word	0x2402700c
9001b600:	24027014 	.word	0x24027014
9001b604:	24026ff0 	.word	0x24026ff0
9001b608:	24027010 	.word	0x24027010
9001b60c:	24026ff4 	.word	0x24026ff4

9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>:
9001b610:	4a17      	ldr	r2, [pc, #92]	; (9001b670 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
9001b612:	b510      	push	{r4, lr}
9001b614:	8803      	ldrh	r3, [r0, #0]
9001b616:	8812      	ldrh	r2, [r2, #0]
9001b618:	4293      	cmp	r3, r2
9001b61a:	d20c      	bcs.n	9001b636 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
9001b61c:	4a15      	ldr	r2, [pc, #84]	; (9001b674 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
9001b61e:	2114      	movs	r1, #20
9001b620:	6812      	ldr	r2, [r2, #0]
9001b622:	fb01 2303 	mla	r3, r1, r3, r2
9001b626:	7c58      	ldrb	r0, [r3, #17]
9001b628:	0942      	lsrs	r2, r0, #5
9001b62a:	7cd8      	ldrb	r0, [r3, #19]
9001b62c:	f3c0 1042 	ubfx	r0, r0, #5, #3
9001b630:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
9001b634:	bd10      	pop	{r4, pc}
9001b636:	4910      	ldr	r1, [pc, #64]	; (9001b678 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
9001b638:	8809      	ldrh	r1, [r1, #0]
9001b63a:	4411      	add	r1, r2
9001b63c:	428b      	cmp	r3, r1
9001b63e:	da09      	bge.n	9001b654 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
9001b640:	1a9b      	subs	r3, r3, r2
9001b642:	4a0e      	ldr	r2, [pc, #56]	; (9001b67c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
9001b644:	210e      	movs	r1, #14
9001b646:	6812      	ldr	r2, [r2, #0]
9001b648:	fb01 2303 	mla	r3, r1, r3, r2
9001b64c:	7b18      	ldrb	r0, [r3, #12]
9001b64e:	f000 001f 	and.w	r0, r0, #31
9001b652:	e7ef      	b.n	9001b634 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b654:	f64f 72fe 	movw	r2, #65534	; 0xfffe
9001b658:	4293      	cmp	r3, r2
9001b65a:	d106      	bne.n	9001b66a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
9001b65c:	f7f9 fc8e 	bl	90014f7c <_ZN8touchgfx3HAL3lcdEv>
9001b660:	6803      	ldr	r3, [r0, #0]
9001b662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001b666:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001b668:	4718      	bx	r3
9001b66a:	2000      	movs	r0, #0
9001b66c:	e7e2      	b.n	9001b634 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
9001b66e:	bf00      	nop
9001b670:	2402700c 	.word	0x2402700c
9001b674:	24027014 	.word	0x24027014
9001b678:	24027010 	.word	0x24027010
9001b67c:	24026ff4 	.word	0x24026ff4

9001b680 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
9001b680:	2010      	movs	r0, #16
9001b682:	4770      	bx	lr

9001b684 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
9001b684:	4b02      	ldr	r3, [pc, #8]	; (9001b690 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
9001b686:	8818      	ldrh	r0, [r3, #0]
9001b688:	0040      	lsls	r0, r0, #1
9001b68a:	b280      	uxth	r0, r0
9001b68c:	4770      	bx	lr
9001b68e:	bf00      	nop
9001b690:	24026f86 	.word	0x24026f86

9001b694 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
9001b694:	2bff      	cmp	r3, #255	; 0xff
9001b696:	d050      	beq.n	9001b73a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
9001b698:	2a0b      	cmp	r2, #11
9001b69a:	d04a      	beq.n	9001b732 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b69c:	d80e      	bhi.n	9001b6bc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
9001b69e:	2a03      	cmp	r2, #3
9001b6a0:	d03f      	beq.n	9001b722 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
9001b6a2:	d804      	bhi.n	9001b6ae <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
9001b6a4:	2a01      	cmp	r2, #1
9001b6a6:	d03e      	beq.n	9001b726 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
9001b6a8:	d93f      	bls.n	9001b72a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
9001b6aa:	6b80      	ldr	r0, [r0, #56]	; 0x38
9001b6ac:	4770      	bx	lr
9001b6ae:	2a09      	cmp	r2, #9
9001b6b0:	d03f      	beq.n	9001b732 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
9001b6b2:	d83c      	bhi.n	9001b72e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b6b4:	2a08      	cmp	r2, #8
9001b6b6:	d03a      	beq.n	9001b72e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
9001b6b8:	2000      	movs	r0, #0
9001b6ba:	4770      	bx	lr
9001b6bc:	2a2f      	cmp	r2, #47	; 0x2f
9001b6be:	d024      	beq.n	9001b70a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
9001b6c0:	d80d      	bhi.n	9001b6de <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
9001b6c2:	2a2d      	cmp	r2, #45	; 0x2d
9001b6c4:	d014      	beq.n	9001b6f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
9001b6c6:	d826      	bhi.n	9001b716 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
9001b6c8:	2a2c      	cmp	r2, #44	; 0x2c
9001b6ca:	d1f5      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b6cc:	684b      	ldr	r3, [r1, #4]
9001b6ce:	781b      	ldrb	r3, [r3, #0]
9001b6d0:	2b01      	cmp	r3, #1
9001b6d2:	d018      	beq.n	9001b706 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
9001b6d4:	d323      	bcc.n	9001b71e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
9001b6d6:	2b02      	cmp	r3, #2
9001b6d8:	d1ee      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b6da:	6880      	ldr	r0, [r0, #8]
9001b6dc:	4770      	bx	lr
9001b6de:	2a31      	cmp	r2, #49	; 0x31
9001b6e0:	d004      	beq.n	9001b6ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
9001b6e2:	d328      	bcc.n	9001b736 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b6e4:	2a32      	cmp	r2, #50	; 0x32
9001b6e6:	d026      	beq.n	9001b736 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
9001b6e8:	2a33      	cmp	r2, #51	; 0x33
9001b6ea:	d1e5      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b6ec:	6f00      	ldr	r0, [r0, #112]	; 0x70
9001b6ee:	4770      	bx	lr
9001b6f0:	684b      	ldr	r3, [r1, #4]
9001b6f2:	781b      	ldrb	r3, [r3, #0]
9001b6f4:	2b01      	cmp	r3, #1
9001b6f6:	d004      	beq.n	9001b702 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
9001b6f8:	d30b      	bcc.n	9001b712 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
9001b6fa:	2b02      	cmp	r3, #2
9001b6fc:	d1dc      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b6fe:	6900      	ldr	r0, [r0, #16]
9001b700:	4770      	bx	lr
9001b702:	6a00      	ldr	r0, [r0, #32]
9001b704:	4770      	bx	lr
9001b706:	6980      	ldr	r0, [r0, #24]
9001b708:	4770      	bx	lr
9001b70a:	684b      	ldr	r3, [r1, #4]
9001b70c:	781b      	ldrb	r3, [r3, #0]
9001b70e:	2b00      	cmp	r3, #0
9001b710:	d1d2      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b712:	6b00      	ldr	r0, [r0, #48]	; 0x30
9001b714:	4770      	bx	lr
9001b716:	684b      	ldr	r3, [r1, #4]
9001b718:	781b      	ldrb	r3, [r3, #0]
9001b71a:	2b00      	cmp	r3, #0
9001b71c:	d1cc      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b71e:	6a80      	ldr	r0, [r0, #40]	; 0x28
9001b720:	4770      	bx	lr
9001b722:	6c80      	ldr	r0, [r0, #72]	; 0x48
9001b724:	4770      	bx	lr
9001b726:	6d00      	ldr	r0, [r0, #80]	; 0x50
9001b728:	4770      	bx	lr
9001b72a:	6c00      	ldr	r0, [r0, #64]	; 0x40
9001b72c:	4770      	bx	lr
9001b72e:	6d80      	ldr	r0, [r0, #88]	; 0x58
9001b730:	4770      	bx	lr
9001b732:	6e00      	ldr	r0, [r0, #96]	; 0x60
9001b734:	4770      	bx	lr
9001b736:	6e80      	ldr	r0, [r0, #104]	; 0x68
9001b738:	4770      	bx	lr
9001b73a:	2a0b      	cmp	r2, #11
9001b73c:	d049      	beq.n	9001b7d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b73e:	d80e      	bhi.n	9001b75e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
9001b740:	2a03      	cmp	r2, #3
9001b742:	d040      	beq.n	9001b7c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
9001b744:	d804      	bhi.n	9001b750 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
9001b746:	2a01      	cmp	r2, #1
9001b748:	d03f      	beq.n	9001b7ca <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
9001b74a:	d940      	bls.n	9001b7ce <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
9001b74c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
9001b74e:	4770      	bx	lr
9001b750:	2a09      	cmp	r2, #9
9001b752:	d03e      	beq.n	9001b7d2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
9001b754:	d801      	bhi.n	9001b75a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
9001b756:	2a08      	cmp	r2, #8
9001b758:	d1ae      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b75a:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
9001b75c:	4770      	bx	lr
9001b75e:	2a2f      	cmp	r2, #47	; 0x2f
9001b760:	d024      	beq.n	9001b7ac <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
9001b762:	d80d      	bhi.n	9001b780 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
9001b764:	2a2d      	cmp	r2, #45	; 0x2d
9001b766:	d014      	beq.n	9001b792 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
9001b768:	d826      	bhi.n	9001b7b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
9001b76a:	2a2c      	cmp	r2, #44	; 0x2c
9001b76c:	d1a4      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b76e:	684b      	ldr	r3, [r1, #4]
9001b770:	781b      	ldrb	r3, [r3, #0]
9001b772:	2b01      	cmp	r3, #1
9001b774:	d018      	beq.n	9001b7a8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
9001b776:	d324      	bcc.n	9001b7c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
9001b778:	2b02      	cmp	r3, #2
9001b77a:	d19d      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b77c:	68c0      	ldr	r0, [r0, #12]
9001b77e:	4770      	bx	lr
9001b780:	2a31      	cmp	r2, #49	; 0x31
9001b782:	d004      	beq.n	9001b78e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
9001b784:	d327      	bcc.n	9001b7d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b786:	2a32      	cmp	r2, #50	; 0x32
9001b788:	d025      	beq.n	9001b7d6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
9001b78a:	2a33      	cmp	r2, #51	; 0x33
9001b78c:	d194      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b78e:	6f40      	ldr	r0, [r0, #116]	; 0x74
9001b790:	4770      	bx	lr
9001b792:	684b      	ldr	r3, [r1, #4]
9001b794:	781b      	ldrb	r3, [r3, #0]
9001b796:	2b01      	cmp	r3, #1
9001b798:	d004      	beq.n	9001b7a4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
9001b79a:	d30b      	bcc.n	9001b7b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
9001b79c:	2b02      	cmp	r3, #2
9001b79e:	d18b      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7a0:	6940      	ldr	r0, [r0, #20]
9001b7a2:	4770      	bx	lr
9001b7a4:	6a40      	ldr	r0, [r0, #36]	; 0x24
9001b7a6:	4770      	bx	lr
9001b7a8:	69c0      	ldr	r0, [r0, #28]
9001b7aa:	4770      	bx	lr
9001b7ac:	684b      	ldr	r3, [r1, #4]
9001b7ae:	781b      	ldrb	r3, [r3, #0]
9001b7b0:	2b00      	cmp	r3, #0
9001b7b2:	d181      	bne.n	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7b4:	6b40      	ldr	r0, [r0, #52]	; 0x34
9001b7b6:	4770      	bx	lr
9001b7b8:	684b      	ldr	r3, [r1, #4]
9001b7ba:	781b      	ldrb	r3, [r3, #0]
9001b7bc:	2b00      	cmp	r3, #0
9001b7be:	f47f af7b 	bne.w	9001b6b8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
9001b7c2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
9001b7c4:	4770      	bx	lr
9001b7c6:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
9001b7c8:	4770      	bx	lr
9001b7ca:	6d40      	ldr	r0, [r0, #84]	; 0x54
9001b7cc:	4770      	bx	lr
9001b7ce:	6c40      	ldr	r0, [r0, #68]	; 0x44
9001b7d0:	4770      	bx	lr
9001b7d2:	6e40      	ldr	r0, [r0, #100]	; 0x64
9001b7d4:	4770      	bx	lr
9001b7d6:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
9001b7d8:	4770      	bx	lr

9001b7da <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001b7da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001b7de:	b087      	sub	sp, #28
9001b7e0:	9815      	ldr	r0, [sp, #84]	; 0x54
9001b7e2:	9205      	str	r2, [sp, #20]
9001b7e4:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001b7e8:	9101      	str	r1, [sp, #4]
9001b7ea:	9202      	str	r2, [sp, #8]
9001b7ec:	6841      	ldr	r1, [r0, #4]
9001b7ee:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001b7f2:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001b7f6:	fb01 2404 	mla	r4, r1, r4, r2
9001b7fa:	6802      	ldr	r2, [r0, #0]
9001b7fc:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001b800:	f8de 2000 	ldr.w	r2, [lr]
9001b804:	9203      	str	r2, [sp, #12]
9001b806:	f8de 2004 	ldr.w	r2, [lr, #4]
9001b80a:	3204      	adds	r2, #4
9001b80c:	9204      	str	r2, [sp, #16]
9001b80e:	9a02      	ldr	r2, [sp, #8]
9001b810:	43d6      	mvns	r6, r2
9001b812:	b2f6      	uxtb	r6, r6
9001b814:	9a01      	ldr	r2, [sp, #4]
9001b816:	2a00      	cmp	r2, #0
9001b818:	dc03      	bgt.n	9001b822 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001b81a:	9a05      	ldr	r2, [sp, #20]
9001b81c:	2a00      	cmp	r2, #0
9001b81e:	f340 8129 	ble.w	9001ba74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b822:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001b824:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001b828:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001b82c:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001b82e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001b832:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001b836:	2b00      	cmp	r3, #0
9001b838:	dd0e      	ble.n	9001b858 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001b83a:	1408      	asrs	r0, r1, #16
9001b83c:	d405      	bmi.n	9001b84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b83e:	4560      	cmp	r0, ip
9001b840:	da03      	bge.n	9001b84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b842:	1410      	asrs	r0, r2, #16
9001b844:	d401      	bmi.n	9001b84a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001b846:	42b8      	cmp	r0, r7
9001b848:	db07      	blt.n	9001b85a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001b84a:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b84c:	3b01      	subs	r3, #1
9001b84e:	3402      	adds	r4, #2
9001b850:	4401      	add	r1, r0
9001b852:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b854:	4402      	add	r2, r0
9001b856:	e7ee      	b.n	9001b836 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001b858:	d071      	beq.n	9001b93e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001b85a:	1e58      	subs	r0, r3, #1
9001b85c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001b85e:	fb05 1500 	mla	r5, r5, r0, r1
9001b862:	142d      	asrs	r5, r5, #16
9001b864:	d45f      	bmi.n	9001b926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b866:	4565      	cmp	r5, ip
9001b868:	da5d      	bge.n	9001b926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b86a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001b86c:	fb05 2000 	mla	r0, r5, r0, r2
9001b870:	1400      	asrs	r0, r0, #16
9001b872:	d458      	bmi.n	9001b926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b874:	42b8      	cmp	r0, r7
9001b876:	da56      	bge.n	9001b926 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
9001b878:	4699      	mov	r9, r3
9001b87a:	46a2      	mov	sl, r4
9001b87c:	f8bd b008 	ldrh.w	fp, [sp, #8]
9001b880:	f1b9 0f00 	cmp.w	r9, #0
9001b884:	dd57      	ble.n	9001b936 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
9001b886:	ea4f 4c22 	mov.w	ip, r2, asr #16
9001b88a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001b88e:	9803      	ldr	r0, [sp, #12]
9001b890:	140d      	asrs	r5, r1, #16
9001b892:	f109 39ff 	add.w	r9, r9, #4294967295
9001b896:	fb07 000c 	mla	r0, r7, ip, r0
9001b89a:	5d40      	ldrb	r0, [r0, r5]
9001b89c:	9d04      	ldr	r5, [sp, #16]
9001b89e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b8a2:	f8ba 5000 	ldrh.w	r5, [sl]
9001b8a6:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b8aa:	122f      	asrs	r7, r5, #8
9001b8ac:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001b8b0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b8b4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001b8b8:	00ed      	lsls	r5, r5, #3
9001b8ba:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001b8be:	fb17 f706 	smulbb	r7, r7, r6
9001b8c2:	b2ed      	uxtb	r5, r5
9001b8c4:	fb18 f806 	smulbb	r8, r8, r6
9001b8c8:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001b8cc:	10c7      	asrs	r7, r0, #3
9001b8ce:	fb15 f506 	smulbb	r5, r5, r6
9001b8d2:	00c0      	lsls	r0, r0, #3
9001b8d4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001b8d8:	fa1f fc8c 	uxth.w	ip, ip
9001b8dc:	b2c0      	uxtb	r0, r0
9001b8de:	fb07 870b 	mla	r7, r7, fp, r8
9001b8e2:	fb00 500b 	mla	r0, r0, fp, r5
9001b8e6:	f10c 0501 	add.w	r5, ip, #1
9001b8ea:	b2bf      	uxth	r7, r7
9001b8ec:	b280      	uxth	r0, r0
9001b8ee:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001b8f2:	f107 0801 	add.w	r8, r7, #1
9001b8f6:	1c45      	adds	r5, r0, #1
9001b8f8:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001b8fc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001b900:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001b904:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001b906:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001b90a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001b90e:	4401      	add	r1, r0
9001b910:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001b914:	9814      	ldr	r0, [sp, #80]	; 0x50
9001b916:	ea45 0c0c 	orr.w	ip, r5, ip
9001b91a:	4402      	add	r2, r0
9001b91c:	ea4c 0c08 	orr.w	ip, ip, r8
9001b920:	f82a cb02 	strh.w	ip, [sl], #2
9001b924:	e7ac      	b.n	9001b880 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001b926:	f04f 0800 	mov.w	r8, #0
9001b92a:	f8bd a008 	ldrh.w	sl, [sp, #8]
9001b92e:	eb03 0008 	add.w	r0, r3, r8
9001b932:	2800      	cmp	r0, #0
9001b934:	dc41      	bgt.n	9001b9ba <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9001b936:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001b93a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001b93e:	9b01      	ldr	r3, [sp, #4]
9001b940:	2b00      	cmp	r3, #0
9001b942:	f340 8097 	ble.w	9001ba74 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
9001b946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001b94a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b94c:	ee30 0a04 	vadd.f32	s0, s0, s8
9001b950:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001b954:	eef0 6a62 	vmov.f32	s13, s5
9001b958:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001b95c:	ee31 1a05 	vadd.f32	s2, s2, s10
9001b960:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b964:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001b968:	eef0 6a43 	vmov.f32	s13, s6
9001b96c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001b970:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001b974:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001b978:	ee61 7a27 	vmul.f32	s15, s2, s15
9001b97c:	ee77 2a62 	vsub.f32	s5, s14, s5
9001b980:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001b984:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001b988:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001b98c:	ee12 2a90 	vmov	r2, s5
9001b990:	eef0 2a47 	vmov.f32	s5, s14
9001b994:	fb92 f3f3 	sdiv	r3, r2, r3
9001b998:	ee13 2a10 	vmov	r2, s6
9001b99c:	9313      	str	r3, [sp, #76]	; 0x4c
9001b99e:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b9a0:	eeb0 3a67 	vmov.f32	s6, s15
9001b9a4:	fb92 f3f3 	sdiv	r3, r2, r3
9001b9a8:	9314      	str	r3, [sp, #80]	; 0x50
9001b9aa:	9b01      	ldr	r3, [sp, #4]
9001b9ac:	9a05      	ldr	r2, [sp, #20]
9001b9ae:	3b01      	subs	r3, #1
9001b9b0:	9301      	str	r3, [sp, #4]
9001b9b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001b9b4:	bf08      	it	eq
9001b9b6:	4613      	moveq	r3, r2
9001b9b8:	e72c      	b.n	9001b814 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001b9ba:	140f      	asrs	r7, r1, #16
9001b9bc:	d453      	bmi.n	9001ba66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b9be:	f8de 5008 	ldr.w	r5, [lr, #8]
9001b9c2:	42bd      	cmp	r5, r7
9001b9c4:	dd4f      	ble.n	9001ba66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b9c6:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001b9ca:	d44c      	bmi.n	9001ba66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b9cc:	f8de 000c 	ldr.w	r0, [lr, #12]
9001b9d0:	4560      	cmp	r0, ip
9001b9d2:	dd48      	ble.n	9001ba66 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
9001b9d4:	9803      	ldr	r0, [sp, #12]
9001b9d6:	b22d      	sxth	r5, r5
9001b9d8:	fb0c 0505 	mla	r5, ip, r5, r0
9001b9dc:	5de8      	ldrb	r0, [r5, r7]
9001b9de:	9d04      	ldr	r5, [sp, #16]
9001b9e0:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001b9e4:	f06f 0501 	mvn.w	r5, #1
9001b9e8:	fb05 fb08 	mul.w	fp, r5, r8
9001b9ec:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001b9f0:	f834 500b 	ldrh.w	r5, [r4, fp]
9001b9f4:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001b9f8:	122f      	asrs	r7, r5, #8
9001b9fa:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001b9fe:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ba02:	00ed      	lsls	r5, r5, #3
9001ba04:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ba08:	fb17 f706 	smulbb	r7, r7, r6
9001ba0c:	b2ed      	uxtb	r5, r5
9001ba0e:	fb19 f906 	smulbb	r9, r9, r6
9001ba12:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001ba16:	10c7      	asrs	r7, r0, #3
9001ba18:	fb15 f506 	smulbb	r5, r5, r6
9001ba1c:	00c0      	lsls	r0, r0, #3
9001ba1e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ba22:	fa1f fc8c 	uxth.w	ip, ip
9001ba26:	b2c0      	uxtb	r0, r0
9001ba28:	fb07 970a 	mla	r7, r7, sl, r9
9001ba2c:	fb00 500a 	mla	r0, r0, sl, r5
9001ba30:	f10c 0501 	add.w	r5, ip, #1
9001ba34:	b2bf      	uxth	r7, r7
9001ba36:	b280      	uxth	r0, r0
9001ba38:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ba3c:	f107 0901 	add.w	r9, r7, #1
9001ba40:	1c45      	adds	r5, r0, #1
9001ba42:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001ba46:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ba4a:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ba4e:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001ba52:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ba56:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ba5a:	ea45 0c0c 	orr.w	ip, r5, ip
9001ba5e:	ea4c 0c09 	orr.w	ip, ip, r9
9001ba62:	f824 c00b 	strh.w	ip, [r4, fp]
9001ba66:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001ba68:	f108 38ff 	add.w	r8, r8, #4294967295
9001ba6c:	4401      	add	r1, r0
9001ba6e:	9814      	ldr	r0, [sp, #80]	; 0x50
9001ba70:	4402      	add	r2, r0
9001ba72:	e75c      	b.n	9001b92e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9001ba74:	b007      	add	sp, #28
9001ba76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ba7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ba7a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ba7e:	b085      	sub	sp, #20
9001ba80:	4693      	mov	fp, r2
9001ba82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ba86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001ba88:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001ba8a:	6870      	ldr	r0, [r6, #4]
9001ba8c:	9100      	str	r1, [sp, #0]
9001ba8e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ba92:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001ba96:	fb00 2404 	mla	r4, r0, r4, r2
9001ba9a:	6832      	ldr	r2, [r6, #0]
9001ba9c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001baa0:	682a      	ldr	r2, [r5, #0]
9001baa2:	9201      	str	r2, [sp, #4]
9001baa4:	686a      	ldr	r2, [r5, #4]
9001baa6:	3204      	adds	r2, #4
9001baa8:	9202      	str	r2, [sp, #8]
9001baaa:	9a00      	ldr	r2, [sp, #0]
9001baac:	2a00      	cmp	r2, #0
9001baae:	dc03      	bgt.n	9001bab8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001bab0:	f1bb 0f00 	cmp.w	fp, #0
9001bab4:	f340 80a0 	ble.w	9001bbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001baba:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001babe:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001bac2:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bac4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bac8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bacc:	2b00      	cmp	r3, #0
9001bace:	dd0c      	ble.n	9001baea <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001bad0:	1406      	asrs	r6, r0, #16
9001bad2:	d405      	bmi.n	9001bae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bad4:	454e      	cmp	r6, r9
9001bad6:	da03      	bge.n	9001bae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001bad8:	1416      	asrs	r6, r2, #16
9001bada:	d401      	bmi.n	9001bae0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001badc:	4546      	cmp	r6, r8
9001bade:	db05      	blt.n	9001baec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bae0:	4470      	add	r0, lr
9001bae2:	4462      	add	r2, ip
9001bae4:	3b01      	subs	r3, #1
9001bae6:	3402      	adds	r4, #2
9001bae8:	e7f0      	b.n	9001bacc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001baea:	d00f      	beq.n	9001bb0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001baec:	1e5e      	subs	r6, r3, #1
9001baee:	fb0e 0706 	mla	r7, lr, r6, r0
9001baf2:	143f      	asrs	r7, r7, #16
9001baf4:	d541      	bpl.n	9001bb7a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
9001baf6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001bafa:	4698      	mov	r8, r3
9001bafc:	9603      	str	r6, [sp, #12]
9001bafe:	f1b8 0f00 	cmp.w	r8, #0
9001bb02:	dc59      	bgt.n	9001bbb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001bb04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bb08:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bb0c:	9b00      	ldr	r3, [sp, #0]
9001bb0e:	2b00      	cmp	r3, #0
9001bb10:	dd72      	ble.n	9001bbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
9001bb12:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bb16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bb18:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bb1c:	eeb0 6a62 	vmov.f32	s12, s5
9001bb20:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bb24:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bb28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bb2c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bb30:	eeb0 6a43 	vmov.f32	s12, s6
9001bb34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bb38:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bb3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bb40:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bb44:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bb48:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bb4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bb50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bb54:	ee12 2a90 	vmov	r2, s5
9001bb58:	eef0 2a47 	vmov.f32	s5, s14
9001bb5c:	fb92 fef3 	sdiv	lr, r2, r3
9001bb60:	ee13 2a10 	vmov	r2, s6
9001bb64:	eeb0 3a67 	vmov.f32	s6, s15
9001bb68:	fb92 fcf3 	sdiv	ip, r2, r3
9001bb6c:	9b00      	ldr	r3, [sp, #0]
9001bb6e:	3b01      	subs	r3, #1
9001bb70:	9300      	str	r3, [sp, #0]
9001bb72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bb74:	bf08      	it	eq
9001bb76:	465b      	moveq	r3, fp
9001bb78:	e797      	b.n	9001baaa <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001bb7a:	454f      	cmp	r7, r9
9001bb7c:	dabb      	bge.n	9001baf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bb7e:	fb0c 2606 	mla	r6, ip, r6, r2
9001bb82:	1436      	asrs	r6, r6, #16
9001bb84:	d4b7      	bmi.n	9001baf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bb86:	4546      	cmp	r6, r8
9001bb88:	dab5      	bge.n	9001baf6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001bb8a:	461e      	mov	r6, r3
9001bb8c:	46a0      	mov	r8, r4
9001bb8e:	2e00      	cmp	r6, #0
9001bb90:	ddb8      	ble.n	9001bb04 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bb92:	1417      	asrs	r7, r2, #16
9001bb94:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001bb98:	9901      	ldr	r1, [sp, #4]
9001bb9a:	ea4f 4920 	mov.w	r9, r0, asr #16
9001bb9e:	4462      	add	r2, ip
9001bba0:	4470      	add	r0, lr
9001bba2:	fb0a 1707 	mla	r7, sl, r7, r1
9001bba6:	9902      	ldr	r1, [sp, #8]
9001bba8:	3e01      	subs	r6, #1
9001bbaa:	f817 7009 	ldrb.w	r7, [r7, r9]
9001bbae:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001bbb2:	f828 7b02 	strh.w	r7, [r8], #2
9001bbb6:	e7ea      	b.n	9001bb8e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
9001bbb8:	ea5f 4920 	movs.w	r9, r0, asr #16
9001bbbc:	d417      	bmi.n	9001bbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bbbe:	68ae      	ldr	r6, [r5, #8]
9001bbc0:	454e      	cmp	r6, r9
9001bbc2:	dd14      	ble.n	9001bbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bbc4:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001bbc8:	d411      	bmi.n	9001bbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bbca:	68ef      	ldr	r7, [r5, #12]
9001bbcc:	4557      	cmp	r7, sl
9001bbce:	dd0e      	ble.n	9001bbee <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
9001bbd0:	9f01      	ldr	r7, [sp, #4]
9001bbd2:	b236      	sxth	r6, r6
9001bbd4:	f06f 0101 	mvn.w	r1, #1
9001bbd8:	fb0a 7606 	mla	r6, sl, r6, r7
9001bbdc:	9f02      	ldr	r7, [sp, #8]
9001bbde:	f816 6009 	ldrb.w	r6, [r6, r9]
9001bbe2:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001bbe6:	fb01 f608 	mul.w	r6, r1, r8
9001bbea:	9903      	ldr	r1, [sp, #12]
9001bbec:	538f      	strh	r7, [r1, r6]
9001bbee:	4470      	add	r0, lr
9001bbf0:	4462      	add	r2, ip
9001bbf2:	f108 38ff 	add.w	r8, r8, #4294967295
9001bbf6:	e782      	b.n	9001bafe <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bbf8:	b005      	add	sp, #20
9001bbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001bbfe <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bbfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001bc02:	b087      	sub	sp, #28
9001bc04:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001bc06:	9205      	str	r2, [sp, #20]
9001bc08:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001bc0c:	9102      	str	r1, [sp, #8]
9001bc0e:	9203      	str	r2, [sp, #12]
9001bc10:	6861      	ldr	r1, [r4, #4]
9001bc12:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001bc16:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001bc1a:	fb01 2000 	mla	r0, r1, r0, r2
9001bc1e:	6822      	ldr	r2, [r4, #0]
9001bc20:	eb02 0240 	add.w	r2, r2, r0, lsl #1
9001bc24:	9200      	str	r2, [sp, #0]
9001bc26:	f8dc 2000 	ldr.w	r2, [ip]
9001bc2a:	9204      	str	r2, [sp, #16]
9001bc2c:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001bc30:	3204      	adds	r2, #4
9001bc32:	9201      	str	r2, [sp, #4]
9001bc34:	9a03      	ldr	r2, [sp, #12]
9001bc36:	43d5      	mvns	r5, r2
9001bc38:	b2ed      	uxtb	r5, r5
9001bc3a:	9a02      	ldr	r2, [sp, #8]
9001bc3c:	2a00      	cmp	r2, #0
9001bc3e:	dc03      	bgt.n	9001bc48 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001bc40:	9a05      	ldr	r2, [sp, #20]
9001bc42:	2a00      	cmp	r2, #0
9001bc44:	f340 812c 	ble.w	9001bea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001bc48:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001bc4a:	f9bc e008 	ldrsh.w	lr, [ip, #8]
9001bc4e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001bc52:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001bc54:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
9001bc58:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bc5c:	2b00      	cmp	r3, #0
9001bc5e:	dd10      	ble.n	9001bc82 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001bc60:	140c      	asrs	r4, r1, #16
9001bc62:	d405      	bmi.n	9001bc70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bc64:	4574      	cmp	r4, lr
9001bc66:	da03      	bge.n	9001bc70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bc68:	1414      	asrs	r4, r2, #16
9001bc6a:	d401      	bmi.n	9001bc70 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bc6c:	42bc      	cmp	r4, r7
9001bc6e:	db09      	blt.n	9001bc84 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9001bc70:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001bc72:	3b01      	subs	r3, #1
9001bc74:	9800      	ldr	r0, [sp, #0]
9001bc76:	4421      	add	r1, r4
9001bc78:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001bc7a:	3002      	adds	r0, #2
9001bc7c:	4422      	add	r2, r4
9001bc7e:	9000      	str	r0, [sp, #0]
9001bc80:	e7ec      	b.n	9001bc5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001bc82:	d071      	beq.n	9001bd68 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
9001bc84:	1e5c      	subs	r4, r3, #1
9001bc86:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001bc88:	fb06 1604 	mla	r6, r6, r4, r1
9001bc8c:	1436      	asrs	r6, r6, #16
9001bc8e:	d45d      	bmi.n	9001bd4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bc90:	4576      	cmp	r6, lr
9001bc92:	da5b      	bge.n	9001bd4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bc94:	9e14      	ldr	r6, [sp, #80]	; 0x50
9001bc96:	fb06 2404 	mla	r4, r6, r4, r2
9001bc9a:	1424      	asrs	r4, r4, #16
9001bc9c:	d456      	bmi.n	9001bd4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bc9e:	42bc      	cmp	r4, r7
9001bca0:	da54      	bge.n	9001bd4c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001bca2:	4698      	mov	r8, r3
9001bca4:	f8dd 9000 	ldr.w	r9, [sp]
9001bca8:	f8bd a00c 	ldrh.w	sl, [sp, #12]
9001bcac:	f1b8 0f00 	cmp.w	r8, #0
9001bcb0:	dd54      	ble.n	9001bd5c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001bcb2:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001bcb6:	1414      	asrs	r4, r2, #16
9001bcb8:	9804      	ldr	r0, [sp, #16]
9001bcba:	140e      	asrs	r6, r1, #16
9001bcbc:	f108 38ff 	add.w	r8, r8, #4294967295
9001bcc0:	fb07 0404 	mla	r4, r7, r4, r0
9001bcc4:	9801      	ldr	r0, [sp, #4]
9001bcc6:	f814 e006 	ldrb.w	lr, [r4, r6]
9001bcca:	f8b9 4000 	ldrh.w	r4, [r9]
9001bcce:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bcd2:	1227      	asrs	r7, r4, #8
9001bcd4:	eb00 0b0e 	add.w	fp, r0, lr
9001bcd8:	f810 e00e 	ldrb.w	lr, [r0, lr]
9001bcdc:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001bce0:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001bce2:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001bce6:	f89b b001 	ldrb.w	fp, [fp, #1]
9001bcea:	4401      	add	r1, r0
9001bcec:	fb16 f60a 	smulbb	r6, r6, sl
9001bcf0:	9814      	ldr	r0, [sp, #80]	; 0x50
9001bcf2:	fb1b fb0a 	smulbb	fp, fp, sl
9001bcf6:	fb07 6705 	mla	r7, r7, r5, r6
9001bcfa:	10e6      	asrs	r6, r4, #3
9001bcfc:	00e4      	lsls	r4, r4, #3
9001bcfe:	4402      	add	r2, r0
9001bd00:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001bd04:	b2bf      	uxth	r7, r7
9001bd06:	b2e4      	uxtb	r4, r4
9001bd08:	fb06 b605 	mla	r6, r6, r5, fp
9001bd0c:	fb14 f405 	smulbb	r4, r4, r5
9001bd10:	b2b6      	uxth	r6, r6
9001bd12:	fb0e 4e0a 	mla	lr, lr, sl, r4
9001bd16:	1c7c      	adds	r4, r7, #1
9001bd18:	f106 0b01 	add.w	fp, r6, #1
9001bd1c:	fa1f fe8e 	uxth.w	lr, lr
9001bd20:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001bd24:	f10e 0401 	add.w	r4, lr, #1
9001bd28:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001bd2c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001bd30:	eb04 241e 	add.w	r4, r4, lr, lsr #8
9001bd34:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001bd38:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001bd3c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001bd40:	4327      	orrs	r7, r4
9001bd42:	ea47 070b 	orr.w	r7, r7, fp
9001bd46:	f829 7b02 	strh.w	r7, [r9], #2
9001bd4a:	e7af      	b.n	9001bcac <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
9001bd4c:	f04f 0e00 	mov.w	lr, #0
9001bd50:	f8bd 900c 	ldrh.w	r9, [sp, #12]
9001bd54:	eb03 040e 	add.w	r4, r3, lr
9001bd58:	2c00      	cmp	r4, #0
9001bd5a:	dc43      	bgt.n	9001bde4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
9001bd5c:	9a00      	ldr	r2, [sp, #0]
9001bd5e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bd62:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9001bd66:	9300      	str	r3, [sp, #0]
9001bd68:	9b02      	ldr	r3, [sp, #8]
9001bd6a:	2b00      	cmp	r3, #0
9001bd6c:	f340 8098 	ble.w	9001bea0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001bd70:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001bd74:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bd76:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bd7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bd7e:	eef0 6a62 	vmov.f32	s13, s5
9001bd82:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001bd86:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bd8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001bd8e:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
9001bd92:	eef0 6a43 	vmov.f32	s13, s6
9001bd96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001bd9a:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
9001bd9e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bda2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bda6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bdaa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bdae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bdb2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bdb6:	ee12 2a90 	vmov	r2, s5
9001bdba:	eef0 2a47 	vmov.f32	s5, s14
9001bdbe:	fb92 f3f3 	sdiv	r3, r2, r3
9001bdc2:	ee13 2a10 	vmov	r2, s6
9001bdc6:	9313      	str	r3, [sp, #76]	; 0x4c
9001bdc8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bdca:	eeb0 3a67 	vmov.f32	s6, s15
9001bdce:	fb92 f3f3 	sdiv	r3, r2, r3
9001bdd2:	9314      	str	r3, [sp, #80]	; 0x50
9001bdd4:	9b02      	ldr	r3, [sp, #8]
9001bdd6:	9a05      	ldr	r2, [sp, #20]
9001bdd8:	3b01      	subs	r3, #1
9001bdda:	9302      	str	r3, [sp, #8]
9001bddc:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001bdde:	bf08      	it	eq
9001bde0:	4613      	moveq	r3, r2
9001bde2:	e72a      	b.n	9001bc3a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bde4:	140f      	asrs	r7, r1, #16
9001bde6:	d454      	bmi.n	9001be92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bde8:	f8dc 6008 	ldr.w	r6, [ip, #8]
9001bdec:	42be      	cmp	r6, r7
9001bdee:	dd50      	ble.n	9001be92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bdf0:	ea5f 4822 	movs.w	r8, r2, asr #16
9001bdf4:	d44d      	bmi.n	9001be92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bdf6:	f8dc 400c 	ldr.w	r4, [ip, #12]
9001bdfa:	4544      	cmp	r4, r8
9001bdfc:	dd49      	ble.n	9001be92 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001bdfe:	9c04      	ldr	r4, [sp, #16]
9001be00:	b236      	sxth	r6, r6
9001be02:	f06f 0001 	mvn.w	r0, #1
9001be06:	fb08 4606 	mla	r6, r8, r6, r4
9001be0a:	9c01      	ldr	r4, [sp, #4]
9001be0c:	fb00 fa0e 	mul.w	sl, r0, lr
9001be10:	9800      	ldr	r0, [sp, #0]
9001be12:	f816 8007 	ldrb.w	r8, [r6, r7]
9001be16:	eb08 0848 	add.w	r8, r8, r8, lsl #1
9001be1a:	eb04 0b08 	add.w	fp, r4, r8
9001be1e:	f830 400a 	ldrh.w	r4, [r0, sl]
9001be22:	9801      	ldr	r0, [sp, #4]
9001be24:	f89b 6002 	ldrb.w	r6, [fp, #2]
9001be28:	1227      	asrs	r7, r4, #8
9001be2a:	f89b b001 	ldrb.w	fp, [fp, #1]
9001be2e:	fb16 f609 	smulbb	r6, r6, r9
9001be32:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001be36:	f810 8008 	ldrb.w	r8, [r0, r8]
9001be3a:	fb1b fb09 	smulbb	fp, fp, r9
9001be3e:	fb07 6705 	mla	r7, r7, r5, r6
9001be42:	10e6      	asrs	r6, r4, #3
9001be44:	00e4      	lsls	r4, r4, #3
9001be46:	9800      	ldr	r0, [sp, #0]
9001be48:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001be4c:	b2bf      	uxth	r7, r7
9001be4e:	b2e4      	uxtb	r4, r4
9001be50:	fb06 b605 	mla	r6, r6, r5, fp
9001be54:	fb14 f405 	smulbb	r4, r4, r5
9001be58:	b2b6      	uxth	r6, r6
9001be5a:	fb08 4809 	mla	r8, r8, r9, r4
9001be5e:	1c7c      	adds	r4, r7, #1
9001be60:	f106 0b01 	add.w	fp, r6, #1
9001be64:	fa1f f888 	uxth.w	r8, r8
9001be68:	eb04 2717 	add.w	r7, r4, r7, lsr #8
9001be6c:	f108 0401 	add.w	r4, r8, #1
9001be70:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
9001be74:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001be78:	eb04 2418 	add.w	r4, r4, r8, lsr #8
9001be7c:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
9001be80:	f3c4 24c4 	ubfx	r4, r4, #11, #5
9001be84:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001be88:	4327      	orrs	r7, r4
9001be8a:	ea47 070b 	orr.w	r7, r7, fp
9001be8e:	f820 700a 	strh.w	r7, [r0, sl]
9001be92:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001be94:	f10e 3eff 	add.w	lr, lr, #4294967295
9001be98:	4401      	add	r1, r0
9001be9a:	9814      	ldr	r0, [sp, #80]	; 0x50
9001be9c:	4402      	add	r2, r0
9001be9e:	e759      	b.n	9001bd54 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001bea0:	b007      	add	sp, #28
9001bea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001bea8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001bea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001beac:	b085      	sub	sp, #20
9001beae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001beb2:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001beb4:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001beb6:	9203      	str	r2, [sp, #12]
9001beb8:	6870      	ldr	r0, [r6, #4]
9001beba:	686f      	ldr	r7, [r5, #4]
9001bebc:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
9001bec0:	3704      	adds	r7, #4
9001bec2:	9101      	str	r1, [sp, #4]
9001bec4:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001bec8:	fb00 2404 	mla	r4, r0, r4, r2
9001becc:	6832      	ldr	r2, [r6, #0]
9001bece:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001bed2:	682a      	ldr	r2, [r5, #0]
9001bed4:	9202      	str	r2, [sp, #8]
9001bed6:	9a01      	ldr	r2, [sp, #4]
9001bed8:	2a00      	cmp	r2, #0
9001beda:	dc03      	bgt.n	9001bee4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001bedc:	9a03      	ldr	r2, [sp, #12]
9001bede:	2a00      	cmp	r2, #0
9001bee0:	f340 80cc 	ble.w	9001c07c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001bee4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001bee6:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001beea:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001beee:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001bef0:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001bef4:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001bef8:	2b00      	cmp	r3, #0
9001befa:	dd0d      	ble.n	9001bf18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001befc:	1406      	asrs	r6, r0, #16
9001befe:	d405      	bmi.n	9001bf0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bf00:	454e      	cmp	r6, r9
9001bf02:	da03      	bge.n	9001bf0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bf04:	1416      	asrs	r6, r2, #16
9001bf06:	d401      	bmi.n	9001bf0c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
9001bf08:	4546      	cmp	r6, r8
9001bf0a:	db06      	blt.n	9001bf1a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001bf0c:	9e12      	ldr	r6, [sp, #72]	; 0x48
9001bf0e:	4460      	add	r0, ip
9001bf10:	3b01      	subs	r3, #1
9001bf12:	3402      	adds	r4, #2
9001bf14:	4432      	add	r2, r6
9001bf16:	e7ef      	b.n	9001bef8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
9001bf18:	d00f      	beq.n	9001bf3a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001bf1a:	1e5e      	subs	r6, r3, #1
9001bf1c:	fb0c 0e06 	mla	lr, ip, r6, r0
9001bf20:	ea5f 4e2e 	movs.w	lr, lr, asr #16
9001bf24:	d543      	bpl.n	9001bfae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
9001bf26:	4698      	mov	r8, r3
9001bf28:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
9001bf2c:	f1b8 0f00 	cmp.w	r8, #0
9001bf30:	dc71      	bgt.n	9001c016 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
9001bf32:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001bf36:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001bf3a:	9b01      	ldr	r3, [sp, #4]
9001bf3c:	2b00      	cmp	r3, #0
9001bf3e:	f340 809d 	ble.w	9001c07c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
9001bf42:	ee30 0a04 	vadd.f32	s0, s0, s8
9001bf46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bf48:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001bf4c:	eeb0 6a62 	vmov.f32	s12, s5
9001bf50:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001bf54:	ee31 1a05 	vadd.f32	s2, s2, s10
9001bf58:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bf5c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001bf60:	eeb0 6a43 	vmov.f32	s12, s6
9001bf64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001bf68:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001bf6c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001bf70:	ee61 7a27 	vmul.f32	s15, s2, s15
9001bf74:	ee77 2a62 	vsub.f32	s5, s14, s5
9001bf78:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001bf7c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001bf80:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001bf84:	ee12 2a90 	vmov	r2, s5
9001bf88:	eef0 2a47 	vmov.f32	s5, s14
9001bf8c:	fb92 fcf3 	sdiv	ip, r2, r3
9001bf90:	ee13 2a10 	vmov	r2, s6
9001bf94:	eeb0 3a67 	vmov.f32	s6, s15
9001bf98:	fb92 f3f3 	sdiv	r3, r2, r3
9001bf9c:	9312      	str	r3, [sp, #72]	; 0x48
9001bf9e:	9b01      	ldr	r3, [sp, #4]
9001bfa0:	9a03      	ldr	r2, [sp, #12]
9001bfa2:	3b01      	subs	r3, #1
9001bfa4:	9301      	str	r3, [sp, #4]
9001bfa6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001bfa8:	bf08      	it	eq
9001bfaa:	4613      	moveq	r3, r2
9001bfac:	e793      	b.n	9001bed6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
9001bfae:	45ce      	cmp	lr, r9
9001bfb0:	dab9      	bge.n	9001bf26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bfb2:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bfb4:	fb01 2606 	mla	r6, r1, r6, r2
9001bfb8:	1436      	asrs	r6, r6, #16
9001bfba:	d4b4      	bmi.n	9001bf26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bfbc:	4546      	cmp	r6, r8
9001bfbe:	dab2      	bge.n	9001bf26 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001bfc0:	4698      	mov	r8, r3
9001bfc2:	46a2      	mov	sl, r4
9001bfc4:	f1b8 0f00 	cmp.w	r8, #0
9001bfc8:	ddb3      	ble.n	9001bf32 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9001bfca:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001bfce:	1416      	asrs	r6, r2, #16
9001bfd0:	9902      	ldr	r1, [sp, #8]
9001bfd2:	ea4f 4e20 	mov.w	lr, r0, asr #16
9001bfd6:	f108 38ff 	add.w	r8, r8, #4294967295
9001bfda:	4460      	add	r0, ip
9001bfdc:	fb09 1606 	mla	r6, r9, r6, r1
9001bfe0:	4928      	ldr	r1, [pc, #160]	; (9001c084 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
9001bfe2:	f816 e00e 	ldrb.w	lr, [r6, lr]
9001bfe6:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001bfea:	eb07 0b0e 	add.w	fp, r7, lr
9001bfee:	f89b 6001 	ldrb.w	r6, [fp, #1]
9001bff2:	f89b 9002 	ldrb.w	r9, [fp, #2]
9001bff6:	00f6      	lsls	r6, r6, #3
9001bff8:	ea01 2909 	and.w	r9, r1, r9, lsl #8
9001bffc:	9912      	ldr	r1, [sp, #72]	; 0x48
9001bffe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c002:	440a      	add	r2, r1
9001c004:	ea49 0606 	orr.w	r6, r9, r6
9001c008:	f817 900e 	ldrb.w	r9, [r7, lr]
9001c00c:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
9001c010:	f82a 6b02 	strh.w	r6, [sl], #2
9001c014:	e7d6      	b.n	9001bfc4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c016:	ea5f 4920 	movs.w	r9, r0, asr #16
9001c01a:	d429      	bmi.n	9001c070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c01c:	68ae      	ldr	r6, [r5, #8]
9001c01e:	454e      	cmp	r6, r9
9001c020:	dd26      	ble.n	9001c070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c022:	ea5f 4b22 	movs.w	fp, r2, asr #16
9001c026:	d423      	bmi.n	9001c070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c028:	68e9      	ldr	r1, [r5, #12]
9001c02a:	4559      	cmp	r1, fp
9001c02c:	dd20      	ble.n	9001c070 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
9001c02e:	fa0f fe86 	sxth.w	lr, r6
9001c032:	9902      	ldr	r1, [sp, #8]
9001c034:	fb0b 1e0e 	mla	lr, fp, lr, r1
9001c038:	f06f 0101 	mvn.w	r1, #1
9001c03c:	f81e e009 	ldrb.w	lr, [lr, r9]
9001c040:	fb01 f908 	mul.w	r9, r1, r8
9001c044:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
9001c048:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
9001c04c:	eb07 060e 	add.w	r6, r7, lr
9001c050:	f896 b002 	ldrb.w	fp, [r6, #2]
9001c054:	7876      	ldrb	r6, [r6, #1]
9001c056:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
9001c05a:	00f6      	lsls	r6, r6, #3
9001c05c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001c060:	ea4b 0606 	orr.w	r6, fp, r6
9001c064:	f817 b00e 	ldrb.w	fp, [r7, lr]
9001c068:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
9001c06c:	f82a 6009 	strh.w	r6, [sl, r9]
9001c070:	9912      	ldr	r1, [sp, #72]	; 0x48
9001c072:	4460      	add	r0, ip
9001c074:	f108 38ff 	add.w	r8, r8, #4294967295
9001c078:	440a      	add	r2, r1
9001c07a:	e757      	b.n	9001bf2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001c07c:	b005      	add	sp, #20
9001c07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c082:	bf00      	nop
9001c084:	fffff800 	.word	0xfffff800

9001c088 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c08c:	b087      	sub	sp, #28
9001c08e:	468b      	mov	fp, r1
9001c090:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c094:	9815      	ldr	r0, [sp, #84]	; 0x54
9001c096:	9204      	str	r2, [sp, #16]
9001c098:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c09c:	6841      	ldr	r1, [r0, #4]
9001c09e:	9205      	str	r2, [sp, #20]
9001c0a0:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
9001c0a4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001c0a8:	fb01 2404 	mla	r4, r1, r4, r2
9001c0ac:	6802      	ldr	r2, [r0, #0]
9001c0ae:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c0b2:	f8dc 2000 	ldr.w	r2, [ip]
9001c0b6:	9201      	str	r2, [sp, #4]
9001c0b8:	f8dc 2004 	ldr.w	r2, [ip, #4]
9001c0bc:	3204      	adds	r2, #4
9001c0be:	9202      	str	r2, [sp, #8]
9001c0c0:	f1bb 0f00 	cmp.w	fp, #0
9001c0c4:	dc03      	bgt.n	9001c0ce <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
9001c0c6:	9a04      	ldr	r2, [sp, #16]
9001c0c8:	2a00      	cmp	r2, #0
9001c0ca:	f340 8138 	ble.w	9001c33e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c0ce:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c0d0:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
9001c0d4:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001c0d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c0da:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
9001c0de:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c0e2:	2b00      	cmp	r3, #0
9001c0e4:	dd0e      	ble.n	9001c104 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c0e6:	1402      	asrs	r2, r0, #16
9001c0e8:	d405      	bmi.n	9001c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c0ea:	42ba      	cmp	r2, r7
9001c0ec:	da03      	bge.n	9001c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c0ee:	140a      	asrs	r2, r1, #16
9001c0f0:	d401      	bmi.n	9001c0f6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001c0f2:	42b2      	cmp	r2, r6
9001c0f4:	db07      	blt.n	9001c106 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001c0f6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c0f8:	3b01      	subs	r3, #1
9001c0fa:	3402      	adds	r4, #2
9001c0fc:	4410      	add	r0, r2
9001c0fe:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c100:	4411      	add	r1, r2
9001c102:	e7ee      	b.n	9001c0e2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
9001c104:	d019      	beq.n	9001c13a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001c106:	1e5a      	subs	r2, r3, #1
9001c108:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c10a:	fb05 0502 	mla	r5, r5, r2, r0
9001c10e:	142d      	asrs	r5, r5, #16
9001c110:	d409      	bmi.n	9001c126 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c112:	42bd      	cmp	r5, r7
9001c114:	da07      	bge.n	9001c126 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c116:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c118:	fb05 1202 	mla	r2, r5, r2, r1
9001c11c:	1412      	asrs	r2, r2, #16
9001c11e:	d402      	bmi.n	9001c126 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001c120:	42b2      	cmp	r2, r6
9001c122:	f2c0 80ac 	blt.w	9001c27e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
9001c126:	f04f 0e00 	mov.w	lr, #0
9001c12a:	eb03 020e 	add.w	r2, r3, lr
9001c12e:	2a00      	cmp	r2, #0
9001c130:	dc3e      	bgt.n	9001c1b0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001c132:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c136:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c13a:	f1bb 0f00 	cmp.w	fp, #0
9001c13e:	f340 80fe 	ble.w	9001c33e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
9001c142:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c146:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c148:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c14c:	f1bb 0b01 	subs.w	fp, fp, #1
9001c150:	eeb0 6a62 	vmov.f32	s12, s5
9001c154:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c158:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c15c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c160:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c164:	eeb0 6a43 	vmov.f32	s12, s6
9001c168:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c16c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c170:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c174:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c178:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c17c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c180:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c184:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c188:	ee12 2a90 	vmov	r2, s5
9001c18c:	eef0 2a47 	vmov.f32	s5, s14
9001c190:	fb92 f3f3 	sdiv	r3, r2, r3
9001c194:	ee13 2a10 	vmov	r2, s6
9001c198:	9313      	str	r3, [sp, #76]	; 0x4c
9001c19a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c19c:	eeb0 3a67 	vmov.f32	s6, s15
9001c1a0:	fb92 f3f3 	sdiv	r3, r2, r3
9001c1a4:	9a04      	ldr	r2, [sp, #16]
9001c1a6:	9314      	str	r3, [sp, #80]	; 0x50
9001c1a8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c1aa:	bf08      	it	eq
9001c1ac:	4613      	moveq	r3, r2
9001c1ae:	e787      	b.n	9001c0c0 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001c1b0:	1406      	asrs	r6, r0, #16
9001c1b2:	d45d      	bmi.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c1b4:	f8dc 5008 	ldr.w	r5, [ip, #8]
9001c1b8:	42b5      	cmp	r5, r6
9001c1ba:	dd59      	ble.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c1bc:	140f      	asrs	r7, r1, #16
9001c1be:	d457      	bmi.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c1c0:	f8dc 200c 	ldr.w	r2, [ip, #12]
9001c1c4:	42ba      	cmp	r2, r7
9001c1c6:	dd53      	ble.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c1c8:	9a01      	ldr	r2, [sp, #4]
9001c1ca:	b22d      	sxth	r5, r5
9001c1cc:	fb07 2505 	mla	r5, r7, r5, r2
9001c1d0:	5daa      	ldrb	r2, [r5, r6]
9001c1d2:	9d02      	ldr	r5, [sp, #8]
9001c1d4:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c1d8:	0e2e      	lsrs	r6, r5, #24
9001c1da:	d049      	beq.n	9001c270 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
9001c1dc:	f06f 0201 	mvn.w	r2, #1
9001c1e0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c1e4:	fb02 f20e 	mul.w	r2, r2, lr
9001c1e8:	f834 8002 	ldrh.w	r8, [r4, r2]
9001c1ec:	9203      	str	r2, [sp, #12]
9001c1ee:	9a05      	ldr	r2, [sp, #20]
9001c1f0:	ea4f 2728 	mov.w	r7, r8, asr #8
9001c1f4:	4356      	muls	r6, r2
9001c1f6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c1fa:	1c72      	adds	r2, r6, #1
9001c1fc:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c200:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c204:	b2ed      	uxtb	r5, r5
9001c206:	1212      	asrs	r2, r2, #8
9001c208:	fa1f f982 	uxth.w	r9, r2
9001c20c:	43d2      	mvns	r2, r2
9001c20e:	fb16 f609 	smulbb	r6, r6, r9
9001c212:	b2d2      	uxtb	r2, r2
9001c214:	fb15 f509 	smulbb	r5, r5, r9
9001c218:	fb07 6702 	mla	r7, r7, r2, r6
9001c21c:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c220:	fb1a fa09 	smulbb	sl, sl, r9
9001c224:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c228:	b2bf      	uxth	r7, r7
9001c22a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c22e:	fa5f f888 	uxtb.w	r8, r8
9001c232:	fb06 a602 	mla	r6, r6, r2, sl
9001c236:	fb08 5502 	mla	r5, r8, r2, r5
9001c23a:	1c7a      	adds	r2, r7, #1
9001c23c:	b2b6      	uxth	r6, r6
9001c23e:	b2ad      	uxth	r5, r5
9001c240:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c244:	9a03      	ldr	r2, [sp, #12]
9001c246:	f105 0a01 	add.w	sl, r5, #1
9001c24a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c24e:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c252:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c256:	ea4a 0707 	orr.w	r7, sl, r7
9001c25a:	f106 0a01 	add.w	sl, r6, #1
9001c25e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c262:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c266:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c26a:	ea47 070a 	orr.w	r7, r7, sl
9001c26e:	52a7      	strh	r7, [r4, r2]
9001c270:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c272:	f10e 3eff 	add.w	lr, lr, #4294967295
9001c276:	4410      	add	r0, r2
9001c278:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c27a:	4411      	add	r1, r2
9001c27c:	e755      	b.n	9001c12a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001c27e:	f04f 0800 	mov.w	r8, #0
9001c282:	eba3 0208 	sub.w	r2, r3, r8
9001c286:	2a00      	cmp	r2, #0
9001c288:	f77f af53 	ble.w	9001c132 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001c28c:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
9001c290:	140a      	asrs	r2, r1, #16
9001c292:	9f01      	ldr	r7, [sp, #4]
9001c294:	1405      	asrs	r5, r0, #16
9001c296:	fb06 7202 	mla	r2, r6, r2, r7
9001c29a:	5d52      	ldrb	r2, [r2, r5]
9001c29c:	9d02      	ldr	r5, [sp, #8]
9001c29e:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
9001c2a2:	0e2e      	lsrs	r6, r5, #24
9001c2a4:	d044      	beq.n	9001c330 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
9001c2a6:	9a05      	ldr	r2, [sp, #20]
9001c2a8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c2ac:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001c2b0:	4356      	muls	r6, r2
9001c2b2:	ea4f 272e 	mov.w	r7, lr, asr #8
9001c2b6:	1c72      	adds	r2, r6, #1
9001c2b8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c2bc:	eb02 2226 	add.w	r2, r2, r6, asr #8
9001c2c0:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c2c4:	b2ed      	uxtb	r5, r5
9001c2c6:	1212      	asrs	r2, r2, #8
9001c2c8:	fa1f f982 	uxth.w	r9, r2
9001c2cc:	43d2      	mvns	r2, r2
9001c2ce:	fb16 f609 	smulbb	r6, r6, r9
9001c2d2:	b2d2      	uxtb	r2, r2
9001c2d4:	fb15 f509 	smulbb	r5, r5, r9
9001c2d8:	fb07 6702 	mla	r7, r7, r2, r6
9001c2dc:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001c2e0:	fb1a fa09 	smulbb	sl, sl, r9
9001c2e4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001c2e8:	b2bf      	uxth	r7, r7
9001c2ea:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c2ee:	fa5f fe8e 	uxtb.w	lr, lr
9001c2f2:	fb06 a602 	mla	r6, r6, r2, sl
9001c2f6:	fb0e 5502 	mla	r5, lr, r2, r5
9001c2fa:	1c7a      	adds	r2, r7, #1
9001c2fc:	b2b6      	uxth	r6, r6
9001c2fe:	b2ad      	uxth	r5, r5
9001c300:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001c304:	f105 0a01 	add.w	sl, r5, #1
9001c308:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c30c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c310:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c314:	ea4a 0707 	orr.w	r7, sl, r7
9001c318:	f106 0a01 	add.w	sl, r6, #1
9001c31c:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c320:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c324:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c328:	ea47 070a 	orr.w	r7, r7, sl
9001c32c:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c330:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001c332:	f108 0801 	add.w	r8, r8, #1
9001c336:	4410      	add	r0, r2
9001c338:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001c33a:	4411      	add	r1, r2
9001c33c:	e7a1      	b.n	9001c282 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
9001c33e:	b007      	add	sp, #28
9001c340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c344 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c348:	b085      	sub	sp, #20
9001c34a:	468b      	mov	fp, r1
9001c34c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c350:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001c352:	9203      	str	r2, [sp, #12]
9001c354:	6841      	ldr	r1, [r0, #4]
9001c356:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001c35a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001c35e:	fb01 2404 	mla	r4, r1, r4, r2
9001c362:	6802      	ldr	r2, [r0, #0]
9001c364:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001c368:	f8de 2000 	ldr.w	r2, [lr]
9001c36c:	9200      	str	r2, [sp, #0]
9001c36e:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c372:	3204      	adds	r2, #4
9001c374:	9201      	str	r2, [sp, #4]
9001c376:	f1bb 0f00 	cmp.w	fp, #0
9001c37a:	dc03      	bgt.n	9001c384 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001c37c:	9a03      	ldr	r2, [sp, #12]
9001c37e:	2a00      	cmp	r2, #0
9001c380:	f340 8153 	ble.w	9001c62a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c384:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c386:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c38a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c38e:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c390:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c394:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c398:	2b00      	cmp	r3, #0
9001c39a:	dd0e      	ble.n	9001c3ba <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c39c:	1408      	asrs	r0, r1, #16
9001c39e:	d405      	bmi.n	9001c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c3a0:	42b8      	cmp	r0, r7
9001c3a2:	da03      	bge.n	9001c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c3a4:	1410      	asrs	r0, r2, #16
9001c3a6:	d401      	bmi.n	9001c3ac <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001c3a8:	42b0      	cmp	r0, r6
9001c3aa:	db07      	blt.n	9001c3bc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001c3ac:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c3ae:	3b01      	subs	r3, #1
9001c3b0:	3402      	adds	r4, #2
9001c3b2:	4401      	add	r1, r0
9001c3b4:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c3b6:	4402      	add	r2, r0
9001c3b8:	e7ee      	b.n	9001c398 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001c3ba:	d017      	beq.n	9001c3ec <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c3bc:	1e58      	subs	r0, r3, #1
9001c3be:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c3c0:	fb05 1500 	mla	r5, r5, r0, r1
9001c3c4:	142d      	asrs	r5, r5, #16
9001c3c6:	d409      	bmi.n	9001c3dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c3c8:	42bd      	cmp	r5, r7
9001c3ca:	da07      	bge.n	9001c3dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c3cc:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c3ce:	fb05 2000 	mla	r0, r5, r0, r2
9001c3d2:	1400      	asrs	r0, r0, #16
9001c3d4:	d402      	bmi.n	9001c3dc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001c3d6:	42b0      	cmp	r0, r6
9001c3d8:	f2c0 80bc 	blt.w	9001c554 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
9001c3dc:	2600      	movs	r6, #0
9001c3de:	1998      	adds	r0, r3, r6
9001c3e0:	2800      	cmp	r0, #0
9001c3e2:	dc3e      	bgt.n	9001c462 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
9001c3e4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c3e8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001c3ec:	f1bb 0f00 	cmp.w	fp, #0
9001c3f0:	f340 811b 	ble.w	9001c62a <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
9001c3f4:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c3f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c3fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c3fe:	f1bb 0b01 	subs.w	fp, fp, #1
9001c402:	eeb0 6a62 	vmov.f32	s12, s5
9001c406:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c40a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c40e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c412:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c416:	eeb0 6a43 	vmov.f32	s12, s6
9001c41a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c41e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c422:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c426:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c42a:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c42e:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c432:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c436:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c43a:	ee12 2a90 	vmov	r2, s5
9001c43e:	eef0 2a47 	vmov.f32	s5, s14
9001c442:	fb92 f3f3 	sdiv	r3, r2, r3
9001c446:	ee13 2a10 	vmov	r2, s6
9001c44a:	9311      	str	r3, [sp, #68]	; 0x44
9001c44c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c44e:	eeb0 3a67 	vmov.f32	s6, s15
9001c452:	fb92 f3f3 	sdiv	r3, r2, r3
9001c456:	9a03      	ldr	r2, [sp, #12]
9001c458:	9312      	str	r3, [sp, #72]	; 0x48
9001c45a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c45c:	bf08      	it	eq
9001c45e:	4613      	moveq	r3, r2
9001c460:	e789      	b.n	9001c376 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001c462:	140f      	asrs	r7, r1, #16
9001c464:	d426      	bmi.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c466:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c46a:	42bd      	cmp	r5, r7
9001c46c:	dd22      	ble.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c46e:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001c472:	d41f      	bmi.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c474:	f8de 000c 	ldr.w	r0, [lr, #12]
9001c478:	4560      	cmp	r0, ip
9001c47a:	dd1b      	ble.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c47c:	9800      	ldr	r0, [sp, #0]
9001c47e:	b22d      	sxth	r5, r5
9001c480:	fb0c 0505 	mla	r5, ip, r5, r0
9001c484:	5de8      	ldrb	r0, [r5, r7]
9001c486:	9d01      	ldr	r5, [sp, #4]
9001c488:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
9001c48c:	0e07      	lsrs	r7, r0, #24
9001c48e:	2fff      	cmp	r7, #255	; 0xff
9001c490:	d116      	bne.n	9001c4c0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001c492:	f06f 0501 	mvn.w	r5, #1
9001c496:	fb05 f706 	mul.w	r7, r5, r6
9001c49a:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001c49e:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001c4a2:	0945      	lsrs	r5, r0, #5
9001c4a4:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001c4a8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001c4ac:	ea4c 0505 	orr.w	r5, ip, r5
9001c4b0:	4305      	orrs	r5, r0
9001c4b2:	53e5      	strh	r5, [r4, r7]
9001c4b4:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c4b6:	3e01      	subs	r6, #1
9001c4b8:	4401      	add	r1, r0
9001c4ba:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c4bc:	4402      	add	r2, r0
9001c4be:	e78e      	b.n	9001c3de <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
9001c4c0:	b2fd      	uxtb	r5, r7
9001c4c2:	2f00      	cmp	r7, #0
9001c4c4:	d0f6      	beq.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c4c6:	f06f 0701 	mvn.w	r7, #1
9001c4ca:	fa1f f985 	uxth.w	r9, r5
9001c4ce:	43ed      	mvns	r5, r5
9001c4d0:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001c4d4:	4377      	muls	r7, r6
9001c4d6:	fb1a fa09 	smulbb	sl, sl, r9
9001c4da:	b2ed      	uxtb	r5, r5
9001c4dc:	f834 8007 	ldrh.w	r8, [r4, r7]
9001c4e0:	9702      	str	r7, [sp, #8]
9001c4e2:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001c4e6:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c4ea:	fb17 f709 	smulbb	r7, r7, r9
9001c4ee:	b2c0      	uxtb	r0, r0
9001c4f0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c4f4:	fb10 f009 	smulbb	r0, r0, r9
9001c4f8:	fb0c 7c05 	mla	ip, ip, r5, r7
9001c4fc:	ea4f 07e8 	mov.w	r7, r8, asr #3
9001c500:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c504:	fa1f fc8c 	uxth.w	ip, ip
9001c508:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001c50c:	fa5f f888 	uxtb.w	r8, r8
9001c510:	fb07 a705 	mla	r7, r7, r5, sl
9001c514:	fb08 0005 	mla	r0, r8, r5, r0
9001c518:	f10c 0501 	add.w	r5, ip, #1
9001c51c:	b2bf      	uxth	r7, r7
9001c51e:	b280      	uxth	r0, r0
9001c520:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001c524:	f100 0a01 	add.w	sl, r0, #1
9001c528:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c52c:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001c530:	9802      	ldr	r0, [sp, #8]
9001c532:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c536:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c53a:	f107 0a01 	add.w	sl, r7, #1
9001c53e:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001c542:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c546:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c54a:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c54e:	f824 c000 	strh.w	ip, [r4, r0]
9001c552:	e7af      	b.n	9001c4b4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001c554:	f04f 0800 	mov.w	r8, #0
9001c558:	eba3 0008 	sub.w	r0, r3, r8
9001c55c:	2800      	cmp	r0, #0
9001c55e:	f77f af41 	ble.w	9001c3e4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c562:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c566:	1410      	asrs	r0, r2, #16
9001c568:	9f00      	ldr	r7, [sp, #0]
9001c56a:	140d      	asrs	r5, r1, #16
9001c56c:	fb06 7000 	mla	r0, r6, r0, r7
9001c570:	5d40      	ldrb	r0, [r0, r5]
9001c572:	9d01      	ldr	r5, [sp, #4]
9001c574:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001c578:	0e2e      	lsrs	r6, r5, #24
9001c57a:	2eff      	cmp	r6, #255	; 0xff
9001c57c:	d112      	bne.n	9001c5a4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
9001c57e:	482c      	ldr	r0, [pc, #176]	; (9001c630 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
9001c580:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001c584:	0968      	lsrs	r0, r5, #5
9001c586:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001c58a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001c58e:	4330      	orrs	r0, r6
9001c590:	4328      	orrs	r0, r5
9001c592:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
9001c596:	9811      	ldr	r0, [sp, #68]	; 0x44
9001c598:	f108 0801 	add.w	r8, r8, #1
9001c59c:	4401      	add	r1, r0
9001c59e:	9812      	ldr	r0, [sp, #72]	; 0x48
9001c5a0:	4402      	add	r2, r0
9001c5a2:	e7d9      	b.n	9001c558 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001c5a4:	b2f0      	uxtb	r0, r6
9001c5a6:	2e00      	cmp	r6, #0
9001c5a8:	d0f5      	beq.n	9001c596 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c5aa:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
9001c5ae:	fa1f f980 	uxth.w	r9, r0
9001c5b2:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001c5b6:	43c0      	mvns	r0, r0
9001c5b8:	ea4f 272c 	mov.w	r7, ip, asr #8
9001c5bc:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001c5c0:	fb16 f609 	smulbb	r6, r6, r9
9001c5c4:	b2c0      	uxtb	r0, r0
9001c5c6:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001c5ca:	b2ed      	uxtb	r5, r5
9001c5cc:	fb1a fa09 	smulbb	sl, sl, r9
9001c5d0:	fb07 6700 	mla	r7, r7, r0, r6
9001c5d4:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001c5d8:	fb15 f509 	smulbb	r5, r5, r9
9001c5dc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001c5e0:	b2bf      	uxth	r7, r7
9001c5e2:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c5e6:	fa5f fc8c 	uxtb.w	ip, ip
9001c5ea:	fb06 a600 	mla	r6, r6, r0, sl
9001c5ee:	fb0c 5500 	mla	r5, ip, r0, r5
9001c5f2:	1c78      	adds	r0, r7, #1
9001c5f4:	b2b6      	uxth	r6, r6
9001c5f6:	b2ad      	uxth	r5, r5
9001c5f8:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001c5fc:	f105 0a01 	add.w	sl, r5, #1
9001c600:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001c604:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c608:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c60c:	ea4a 0707 	orr.w	r7, sl, r7
9001c610:	f106 0a01 	add.w	sl, r6, #1
9001c614:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c618:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c61c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c620:	ea47 070a 	orr.w	r7, r7, sl
9001c624:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
9001c628:	e7b5      	b.n	9001c596 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
9001c62a:	b005      	add	sp, #20
9001c62c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001c630:	fffff800 	.word	0xfffff800

9001c634 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c638:	b087      	sub	sp, #28
9001c63a:	468b      	mov	fp, r1
9001c63c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c640:	9c15      	ldr	r4, [sp, #84]	; 0x54
9001c642:	9204      	str	r2, [sp, #16]
9001c644:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001c648:	6861      	ldr	r1, [r4, #4]
9001c64a:	9205      	str	r2, [sp, #20]
9001c64c:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
9001c650:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
9001c654:	fb01 2000 	mla	r0, r1, r0, r2
9001c658:	6822      	ldr	r2, [r4, #0]
9001c65a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c65e:	f8de 2000 	ldr.w	r2, [lr]
9001c662:	9201      	str	r2, [sp, #4]
9001c664:	f8de 2004 	ldr.w	r2, [lr, #4]
9001c668:	9202      	str	r2, [sp, #8]
9001c66a:	f1bb 0f00 	cmp.w	fp, #0
9001c66e:	dc03      	bgt.n	9001c678 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
9001c670:	9a04      	ldr	r2, [sp, #16]
9001c672:	2a00      	cmp	r2, #0
9001c674:	f340 8142 	ble.w	9001c8fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c678:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001c67a:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001c67e:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c682:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001c684:	f9be 600c 	ldrsh.w	r6, [lr, #12]
9001c688:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c68c:	2b00      	cmp	r3, #0
9001c68e:	dd0e      	ble.n	9001c6ae <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9001c690:	140c      	asrs	r4, r1, #16
9001c692:	d405      	bmi.n	9001c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c694:	42bc      	cmp	r4, r7
9001c696:	da03      	bge.n	9001c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c698:	1414      	asrs	r4, r2, #16
9001c69a:	d401      	bmi.n	9001c6a0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001c69c:	42b4      	cmp	r4, r6
9001c69e:	db07      	blt.n	9001c6b0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
9001c6a0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c6a2:	3b01      	subs	r3, #1
9001c6a4:	3002      	adds	r0, #2
9001c6a6:	4421      	add	r1, r4
9001c6a8:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c6aa:	4422      	add	r2, r4
9001c6ac:	e7ee      	b.n	9001c68c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
9001c6ae:	d019      	beq.n	9001c6e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001c6b0:	1e5c      	subs	r4, r3, #1
9001c6b2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001c6b4:	fb05 1504 	mla	r5, r5, r4, r1
9001c6b8:	142d      	asrs	r5, r5, #16
9001c6ba:	d409      	bmi.n	9001c6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c6bc:	42bd      	cmp	r5, r7
9001c6be:	da07      	bge.n	9001c6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c6c0:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001c6c2:	fb05 2404 	mla	r4, r5, r4, r2
9001c6c6:	1424      	asrs	r4, r4, #16
9001c6c8:	d402      	bmi.n	9001c6d0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9001c6ca:	42b4      	cmp	r4, r6
9001c6cc:	f2c0 80b1 	blt.w	9001c832 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
9001c6d0:	f04f 0800 	mov.w	r8, #0
9001c6d4:	eb03 0408 	add.w	r4, r3, r8
9001c6d8:	2c00      	cmp	r4, #0
9001c6da:	dc3e      	bgt.n	9001c75a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
9001c6dc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c6e0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c6e4:	f1bb 0f00 	cmp.w	fp, #0
9001c6e8:	f340 8108 	ble.w	9001c8fc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
9001c6ec:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c6f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c6f2:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c6f6:	f1bb 0b01 	subs.w	fp, fp, #1
9001c6fa:	eeb0 6a62 	vmov.f32	s12, s5
9001c6fe:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c702:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c706:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c70a:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001c70e:	eeb0 6a43 	vmov.f32	s12, s6
9001c712:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c716:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001c71a:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c71e:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c722:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c726:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c72a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c72e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c732:	ee12 2a90 	vmov	r2, s5
9001c736:	eef0 2a47 	vmov.f32	s5, s14
9001c73a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c73e:	ee13 2a10 	vmov	r2, s6
9001c742:	9313      	str	r3, [sp, #76]	; 0x4c
9001c744:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c746:	eeb0 3a67 	vmov.f32	s6, s15
9001c74a:	fb92 f3f3 	sdiv	r3, r2, r3
9001c74e:	9a04      	ldr	r2, [sp, #16]
9001c750:	9314      	str	r3, [sp, #80]	; 0x50
9001c752:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001c754:	bf08      	it	eq
9001c756:	4613      	moveq	r3, r2
9001c758:	e787      	b.n	9001c66a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
9001c75a:	140e      	asrs	r6, r1, #16
9001c75c:	d462      	bmi.n	9001c824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c75e:	f8de 5008 	ldr.w	r5, [lr, #8]
9001c762:	42b5      	cmp	r5, r6
9001c764:	dd5e      	ble.n	9001c824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c766:	1417      	asrs	r7, r2, #16
9001c768:	d45c      	bmi.n	9001c824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c76a:	f8de 400c 	ldr.w	r4, [lr, #12]
9001c76e:	42bc      	cmp	r4, r7
9001c770:	dd58      	ble.n	9001c824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c772:	b22d      	sxth	r5, r5
9001c774:	9c02      	ldr	r4, [sp, #8]
9001c776:	fb07 6505 	mla	r5, r7, r5, r6
9001c77a:	5d66      	ldrb	r6, [r4, r5]
9001c77c:	2e00      	cmp	r6, #0
9001c77e:	d051      	beq.n	9001c824 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
9001c780:	9c01      	ldr	r4, [sp, #4]
9001c782:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
9001c786:	f06f 0401 	mvn.w	r4, #1
9001c78a:	fb04 f408 	mul.w	r4, r4, r8
9001c78e:	ea4f 2c29 	mov.w	ip, r9, asr #8
9001c792:	5b05      	ldrh	r5, [r0, r4]
9001c794:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c798:	9403      	str	r4, [sp, #12]
9001c79a:	9c05      	ldr	r4, [sp, #20]
9001c79c:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c7a0:	4366      	muls	r6, r4
9001c7a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c7a6:	1c74      	adds	r4, r6, #1
9001c7a8:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c7ac:	122e      	asrs	r6, r5, #8
9001c7ae:	1224      	asrs	r4, r4, #8
9001c7b0:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c7b4:	00ed      	lsls	r5, r5, #3
9001c7b6:	b2a7      	uxth	r7, r4
9001c7b8:	43e4      	mvns	r4, r4
9001c7ba:	b2ed      	uxtb	r5, r5
9001c7bc:	b2e4      	uxtb	r4, r4
9001c7be:	fb16 f604 	smulbb	r6, r6, r4
9001c7c2:	fb15 f504 	smulbb	r5, r5, r4
9001c7c6:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c7ca:	ea4f 06e9 	mov.w	r6, r9, asr #3
9001c7ce:	fb1a fa04 	smulbb	sl, sl, r4
9001c7d2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001c7d6:	fa1f fc8c 	uxth.w	ip, ip
9001c7da:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c7de:	fa5f f989 	uxtb.w	r9, r9
9001c7e2:	fb06 a607 	mla	r6, r6, r7, sl
9001c7e6:	f10c 0401 	add.w	r4, ip, #1
9001c7ea:	fb09 5507 	mla	r5, r9, r7, r5
9001c7ee:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c7f2:	9c03      	ldr	r4, [sp, #12]
9001c7f4:	b2ad      	uxth	r5, r5
9001c7f6:	b2b6      	uxth	r6, r6
9001c7f8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c7fc:	f105 0a01 	add.w	sl, r5, #1
9001c800:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c804:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c808:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c80c:	f106 0a01 	add.w	sl, r6, #1
9001c810:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c814:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c818:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c81c:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c820:	f820 c004 	strh.w	ip, [r0, r4]
9001c824:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c826:	f108 38ff 	add.w	r8, r8, #4294967295
9001c82a:	4421      	add	r1, r4
9001c82c:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c82e:	4422      	add	r2, r4
9001c830:	e750      	b.n	9001c6d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001c832:	f04f 0900 	mov.w	r9, #0
9001c836:	eba3 0409 	sub.w	r4, r3, r9
9001c83a:	2c00      	cmp	r4, #0
9001c83c:	f77f af4e 	ble.w	9001c6dc <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001c840:	f9be 6008 	ldrsh.w	r6, [lr, #8]
9001c844:	140d      	asrs	r5, r1, #16
9001c846:	1414      	asrs	r4, r2, #16
9001c848:	fb06 5404 	mla	r4, r6, r4, r5
9001c84c:	9d02      	ldr	r5, [sp, #8]
9001c84e:	5d2e      	ldrb	r6, [r5, r4]
9001c850:	2e00      	cmp	r6, #0
9001c852:	d04c      	beq.n	9001c8ee <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
9001c854:	9d01      	ldr	r5, [sp, #4]
9001c856:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
9001c85a:	9c05      	ldr	r4, [sp, #20]
9001c85c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001c860:	ea4f 2c28 	mov.w	ip, r8, asr #8
9001c864:	4366      	muls	r6, r4
9001c866:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001c86a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001c86e:	1c74      	adds	r4, r6, #1
9001c870:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001c874:	eb04 2416 	add.w	r4, r4, r6, lsr #8
9001c878:	122e      	asrs	r6, r5, #8
9001c87a:	1224      	asrs	r4, r4, #8
9001c87c:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001c880:	00ed      	lsls	r5, r5, #3
9001c882:	b2a7      	uxth	r7, r4
9001c884:	43e4      	mvns	r4, r4
9001c886:	b2ed      	uxtb	r5, r5
9001c888:	b2e4      	uxtb	r4, r4
9001c88a:	fb16 f604 	smulbb	r6, r6, r4
9001c88e:	fb15 f504 	smulbb	r5, r5, r4
9001c892:	fb0c 6c07 	mla	ip, ip, r7, r6
9001c896:	ea4f 06e8 	mov.w	r6, r8, asr #3
9001c89a:	fb1a fa04 	smulbb	sl, sl, r4
9001c89e:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001c8a2:	fa1f fc8c 	uxth.w	ip, ip
9001c8a6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001c8aa:	fa5f f888 	uxtb.w	r8, r8
9001c8ae:	fb06 a607 	mla	r6, r6, r7, sl
9001c8b2:	f10c 0401 	add.w	r4, ip, #1
9001c8b6:	fb08 5507 	mla	r5, r8, r7, r5
9001c8ba:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001c8be:	b2ad      	uxth	r5, r5
9001c8c0:	b2b6      	uxth	r6, r6
9001c8c2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001c8c6:	f105 0a01 	add.w	sl, r5, #1
9001c8ca:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001c8ce:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001c8d2:	ea4a 0c0c 	orr.w	ip, sl, ip
9001c8d6:	f106 0a01 	add.w	sl, r6, #1
9001c8da:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001c8de:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001c8e2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001c8e6:	ea4c 0c0a 	orr.w	ip, ip, sl
9001c8ea:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001c8ee:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c8f0:	f109 0901 	add.w	r9, r9, #1
9001c8f4:	4421      	add	r1, r4
9001c8f6:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001c8f8:	4422      	add	r2, r4
9001c8fa:	e79c      	b.n	9001c836 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
9001c8fc:	b007      	add	sp, #28
9001c8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001c902 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001c902:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001c906:	b085      	sub	sp, #20
9001c908:	468b      	mov	fp, r1
9001c90a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001c90e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001c910:	9203      	str	r2, [sp, #12]
9001c912:	6861      	ldr	r1, [r4, #4]
9001c914:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001c918:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
9001c91c:	fb01 2000 	mla	r0, r1, r0, r2
9001c920:	6822      	ldr	r2, [r4, #0]
9001c922:	eb02 0040 	add.w	r0, r2, r0, lsl #1
9001c926:	f8d8 2000 	ldr.w	r2, [r8]
9001c92a:	9200      	str	r2, [sp, #0]
9001c92c:	f8d8 2004 	ldr.w	r2, [r8, #4]
9001c930:	9201      	str	r2, [sp, #4]
9001c932:	f1bb 0f00 	cmp.w	fp, #0
9001c936:	dc03      	bgt.n	9001c940 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001c938:	9a03      	ldr	r2, [sp, #12]
9001c93a:	2a00      	cmp	r2, #0
9001c93c:	f340 8146 	ble.w	9001cbcc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c940:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001c942:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001c946:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001c94a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001c94c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001c950:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001c954:	2b00      	cmp	r3, #0
9001c956:	dd0e      	ble.n	9001c976 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001c958:	140c      	asrs	r4, r1, #16
9001c95a:	d405      	bmi.n	9001c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c95c:	42bc      	cmp	r4, r7
9001c95e:	da03      	bge.n	9001c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c960:	1414      	asrs	r4, r2, #16
9001c962:	d401      	bmi.n	9001c968 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001c964:	42b4      	cmp	r4, r6
9001c966:	db07      	blt.n	9001c978 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001c968:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001c96a:	3b01      	subs	r3, #1
9001c96c:	3002      	adds	r0, #2
9001c96e:	4421      	add	r1, r4
9001c970:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001c972:	4422      	add	r2, r4
9001c974:	e7ee      	b.n	9001c954 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001c976:	d017      	beq.n	9001c9a8 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001c978:	1e5c      	subs	r4, r3, #1
9001c97a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001c97c:	fb05 1504 	mla	r5, r5, r4, r1
9001c980:	142d      	asrs	r5, r5, #16
9001c982:	d409      	bmi.n	9001c998 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c984:	42bd      	cmp	r5, r7
9001c986:	da07      	bge.n	9001c998 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c988:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001c98a:	fb05 2404 	mla	r4, r5, r4, r2
9001c98e:	1424      	asrs	r4, r4, #16
9001c990:	d402      	bmi.n	9001c998 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001c992:	42b4      	cmp	r4, r6
9001c994:	f2c0 80b3 	blt.w	9001cafe <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
9001c998:	2600      	movs	r6, #0
9001c99a:	199c      	adds	r4, r3, r6
9001c99c:	2c00      	cmp	r4, #0
9001c99e:	dc3e      	bgt.n	9001ca1e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001c9a0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001c9a4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001c9a8:	f1bb 0f00 	cmp.w	fp, #0
9001c9ac:	f340 810e 	ble.w	9001cbcc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
9001c9b0:	ee30 0a04 	vadd.f32	s0, s0, s8
9001c9b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001c9b6:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001c9ba:	f1bb 0b01 	subs.w	fp, fp, #1
9001c9be:	eeb0 6a62 	vmov.f32	s12, s5
9001c9c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001c9c6:	ee31 1a05 	vadd.f32	s2, s2, s10
9001c9ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c9ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001c9d2:	eeb0 6a43 	vmov.f32	s12, s6
9001c9d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001c9da:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001c9de:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001c9e2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001c9e6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001c9ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001c9ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001c9f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001c9f6:	ee12 2a90 	vmov	r2, s5
9001c9fa:	eef0 2a47 	vmov.f32	s5, s14
9001c9fe:	fb92 f3f3 	sdiv	r3, r2, r3
9001ca02:	ee13 2a10 	vmov	r2, s6
9001ca06:	9311      	str	r3, [sp, #68]	; 0x44
9001ca08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca0a:	eeb0 3a67 	vmov.f32	s6, s15
9001ca0e:	fb92 f3f3 	sdiv	r3, r2, r3
9001ca12:	9a03      	ldr	r2, [sp, #12]
9001ca14:	9312      	str	r3, [sp, #72]	; 0x48
9001ca16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001ca18:	bf08      	it	eq
9001ca1a:	4613      	moveq	r3, r2
9001ca1c:	e789      	b.n	9001c932 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001ca1e:	140f      	asrs	r7, r1, #16
9001ca20:	d418      	bmi.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001ca22:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001ca26:	42bd      	cmp	r5, r7
9001ca28:	dd14      	ble.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001ca2a:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001ca2e:	d411      	bmi.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001ca30:	f8d8 400c 	ldr.w	r4, [r8, #12]
9001ca34:	4564      	cmp	r4, ip
9001ca36:	dd0d      	ble.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001ca38:	b22d      	sxth	r5, r5
9001ca3a:	9c01      	ldr	r4, [sp, #4]
9001ca3c:	fb0c 7505 	mla	r5, ip, r5, r7
9001ca40:	5d64      	ldrb	r4, [r4, r5]
9001ca42:	2cff      	cmp	r4, #255	; 0xff
9001ca44:	d10c      	bne.n	9001ca60 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
9001ca46:	9c00      	ldr	r4, [sp, #0]
9001ca48:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
9001ca4c:	f06f 0401 	mvn.w	r4, #1
9001ca50:	4374      	muls	r4, r6
9001ca52:	5305      	strh	r5, [r0, r4]
9001ca54:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001ca56:	3e01      	subs	r6, #1
9001ca58:	4421      	add	r1, r4
9001ca5a:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001ca5c:	4422      	add	r2, r4
9001ca5e:	e79c      	b.n	9001c99a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001ca60:	2c00      	cmp	r4, #0
9001ca62:	d0f7      	beq.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001ca64:	9f00      	ldr	r7, [sp, #0]
9001ca66:	fa1f fc84 	uxth.w	ip, r4
9001ca6a:	43e4      	mvns	r4, r4
9001ca6c:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
9001ca70:	f06f 0501 	mvn.w	r5, #1
9001ca74:	b2e4      	uxtb	r4, r4
9001ca76:	4375      	muls	r5, r6
9001ca78:	ea4f 2e29 	mov.w	lr, r9, asr #8
9001ca7c:	9502      	str	r5, [sp, #8]
9001ca7e:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001ca82:	5b45      	ldrh	r5, [r0, r5]
9001ca84:	122f      	asrs	r7, r5, #8
9001ca86:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001ca8a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ca8e:	00ed      	lsls	r5, r5, #3
9001ca90:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001ca94:	fb17 f704 	smulbb	r7, r7, r4
9001ca98:	b2ed      	uxtb	r5, r5
9001ca9a:	fb1a fa04 	smulbb	sl, sl, r4
9001ca9e:	fb0e 7e0c 	mla	lr, lr, ip, r7
9001caa2:	ea4f 07e9 	mov.w	r7, r9, asr #3
9001caa6:	fb15 f504 	smulbb	r5, r5, r4
9001caaa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
9001caae:	fa1f fe8e 	uxth.w	lr, lr
9001cab2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001cab6:	fa5f f989 	uxtb.w	r9, r9
9001caba:	fb07 a70c 	mla	r7, r7, ip, sl
9001cabe:	f10e 0401 	add.w	r4, lr, #1
9001cac2:	fb09 550c 	mla	r5, r9, ip, r5
9001cac6:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
9001caca:	9c02      	ldr	r4, [sp, #8]
9001cacc:	b2ad      	uxth	r5, r5
9001cace:	b2bf      	uxth	r7, r7
9001cad0:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001cad4:	f105 0a01 	add.w	sl, r5, #1
9001cad8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cadc:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cae0:	ea4a 0e0e 	orr.w	lr, sl, lr
9001cae4:	f107 0a01 	add.w	sl, r7, #1
9001cae8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001caec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001caf0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001caf4:	ea4e 0e0a 	orr.w	lr, lr, sl
9001caf8:	f820 e004 	strh.w	lr, [r0, r4]
9001cafc:	e7aa      	b.n	9001ca54 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
9001cafe:	f04f 0900 	mov.w	r9, #0
9001cb02:	eba3 0409 	sub.w	r4, r3, r9
9001cb06:	2c00      	cmp	r4, #0
9001cb08:	f77f af4a 	ble.w	9001c9a0 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cb0c:	1414      	asrs	r4, r2, #16
9001cb0e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001cb12:	140d      	asrs	r5, r1, #16
9001cb14:	fb06 5504 	mla	r5, r6, r4, r5
9001cb18:	9c01      	ldr	r4, [sp, #4]
9001cb1a:	5d64      	ldrb	r4, [r4, r5]
9001cb1c:	2cff      	cmp	r4, #255	; 0xff
9001cb1e:	d10b      	bne.n	9001cb38 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001cb20:	9c00      	ldr	r4, [sp, #0]
9001cb22:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
9001cb26:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
9001cb2a:	9c11      	ldr	r4, [sp, #68]	; 0x44
9001cb2c:	f109 0901 	add.w	r9, r9, #1
9001cb30:	4421      	add	r1, r4
9001cb32:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001cb34:	4422      	add	r2, r4
9001cb36:	e7e4      	b.n	9001cb02 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9001cb38:	2c00      	cmp	r4, #0
9001cb3a:	d0f6      	beq.n	9001cb2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cb3c:	9e00      	ldr	r6, [sp, #0]
9001cb3e:	b2a7      	uxth	r7, r4
9001cb40:	43e4      	mvns	r4, r4
9001cb42:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
9001cb46:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
9001cb4a:	b2e4      	uxtb	r4, r4
9001cb4c:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001cb50:	122e      	asrs	r6, r5, #8
9001cb52:	ea4f 0ae5 	mov.w	sl, r5, asr #3
9001cb56:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cb5a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001cb5e:	00ed      	lsls	r5, r5, #3
9001cb60:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001cb64:	fb16 f604 	smulbb	r6, r6, r4
9001cb68:	b2ed      	uxtb	r5, r5
9001cb6a:	fb1a fa04 	smulbb	sl, sl, r4
9001cb6e:	fb0c 6c07 	mla	ip, ip, r7, r6
9001cb72:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001cb76:	fb15 f504 	smulbb	r5, r5, r4
9001cb7a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001cb7e:	fa1f fc8c 	uxth.w	ip, ip
9001cb82:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001cb86:	fa5f fe8e 	uxtb.w	lr, lr
9001cb8a:	fb06 a607 	mla	r6, r6, r7, sl
9001cb8e:	f10c 0401 	add.w	r4, ip, #1
9001cb92:	fb0e 5507 	mla	r5, lr, r7, r5
9001cb96:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
9001cb9a:	b2ad      	uxth	r5, r5
9001cb9c:	b2b6      	uxth	r6, r6
9001cb9e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001cba2:	f105 0a01 	add.w	sl, r5, #1
9001cba6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001cbaa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001cbae:	ea4a 0c0c 	orr.w	ip, sl, ip
9001cbb2:	f106 0a01 	add.w	sl, r6, #1
9001cbb6:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001cbba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001cbbe:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001cbc2:	ea4c 0c0a 	orr.w	ip, ip, sl
9001cbc6:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
9001cbca:	e7ae      	b.n	9001cb2a <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9001cbcc:	b005      	add	sp, #20
9001cbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cbd2 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cbd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cbd6:	b085      	sub	sp, #20
9001cbd8:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001cbda:	9203      	str	r2, [sp, #12]
9001cbdc:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
9001cbe0:	9100      	str	r1, [sp, #0]
9001cbe2:	9201      	str	r2, [sp, #4]
9001cbe4:	6841      	ldr	r1, [r0, #4]
9001cbe6:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
9001cbea:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001cbee:	fb01 2404 	mla	r4, r1, r4, r2
9001cbf2:	6802      	ldr	r2, [r0, #0]
9001cbf4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001cbf8:	f8de 2000 	ldr.w	r2, [lr]
9001cbfc:	9202      	str	r2, [sp, #8]
9001cbfe:	9a01      	ldr	r2, [sp, #4]
9001cc00:	43d6      	mvns	r6, r2
9001cc02:	b2f6      	uxtb	r6, r6
9001cc04:	9a00      	ldr	r2, [sp, #0]
9001cc06:	2a00      	cmp	r2, #0
9001cc08:	dc03      	bgt.n	9001cc12 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
9001cc0a:	9a03      	ldr	r2, [sp, #12]
9001cc0c:	2a00      	cmp	r2, #0
9001cc0e:	f340 8124 	ble.w	9001ce5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001cc12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001cc14:	f9be c008 	ldrsh.w	ip, [lr, #8]
9001cc18:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001cc1c:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cc1e:	f9be 700c 	ldrsh.w	r7, [lr, #12]
9001cc22:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001cc26:	2b00      	cmp	r3, #0
9001cc28:	dd0e      	ble.n	9001cc48 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cc2a:	1408      	asrs	r0, r1, #16
9001cc2c:	d405      	bmi.n	9001cc3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cc2e:	4560      	cmp	r0, ip
9001cc30:	da03      	bge.n	9001cc3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cc32:	1410      	asrs	r0, r2, #16
9001cc34:	d401      	bmi.n	9001cc3a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
9001cc36:	42b8      	cmp	r0, r7
9001cc38:	db07      	blt.n	9001cc4a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9001cc3a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001cc3c:	3b01      	subs	r3, #1
9001cc3e:	3402      	adds	r4, #2
9001cc40:	4401      	add	r1, r0
9001cc42:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cc44:	4402      	add	r2, r0
9001cc46:	e7ee      	b.n	9001cc26 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
9001cc48:	d06e      	beq.n	9001cd28 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
9001cc4a:	1e58      	subs	r0, r3, #1
9001cc4c:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001cc4e:	fb05 1500 	mla	r5, r5, r0, r1
9001cc52:	142d      	asrs	r5, r5, #16
9001cc54:	d45c      	bmi.n	9001cd10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cc56:	4565      	cmp	r5, ip
9001cc58:	da5a      	bge.n	9001cd10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cc5a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001cc5c:	fb05 2000 	mla	r0, r5, r0, r2
9001cc60:	1400      	asrs	r0, r0, #16
9001cc62:	d455      	bmi.n	9001cd10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cc64:	42b8      	cmp	r0, r7
9001cc66:	da53      	bge.n	9001cd10 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
9001cc68:	4699      	mov	r9, r3
9001cc6a:	46a2      	mov	sl, r4
9001cc6c:	f8bd b004 	ldrh.w	fp, [sp, #4]
9001cc70:	f1b9 0f00 	cmp.w	r9, #0
9001cc74:	dd54      	ble.n	9001cd20 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
9001cc76:	f9be 7008 	ldrsh.w	r7, [lr, #8]
9001cc7a:	140d      	asrs	r5, r1, #16
9001cc7c:	1410      	asrs	r0, r2, #16
9001cc7e:	f109 39ff 	add.w	r9, r9, #4294967295
9001cc82:	fb07 5000 	mla	r0, r7, r0, r5
9001cc86:	9d02      	ldr	r5, [sp, #8]
9001cc88:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
9001cc8c:	f8ba 5000 	ldrh.w	r5, [sl]
9001cc90:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cc94:	122f      	asrs	r7, r5, #8
9001cc96:	ea4f 08e5 	mov.w	r8, r5, asr #3
9001cc9a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cc9e:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cca2:	00ed      	lsls	r5, r5, #3
9001cca4:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
9001cca8:	fb17 f706 	smulbb	r7, r7, r6
9001ccac:	b2ed      	uxtb	r5, r5
9001ccae:	fb18 f806 	smulbb	r8, r8, r6
9001ccb2:	fb0c 7c0b 	mla	ip, ip, fp, r7
9001ccb6:	10c7      	asrs	r7, r0, #3
9001ccb8:	fb15 f506 	smulbb	r5, r5, r6
9001ccbc:	00c0      	lsls	r0, r0, #3
9001ccbe:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ccc2:	fa1f fc8c 	uxth.w	ip, ip
9001ccc6:	b2c0      	uxtb	r0, r0
9001ccc8:	fb07 870b 	mla	r7, r7, fp, r8
9001cccc:	fb00 500b 	mla	r0, r0, fp, r5
9001ccd0:	f10c 0501 	add.w	r5, ip, #1
9001ccd4:	b2bf      	uxth	r7, r7
9001ccd6:	b280      	uxth	r0, r0
9001ccd8:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ccdc:	f107 0801 	add.w	r8, r7, #1
9001cce0:	1c45      	adds	r5, r0, #1
9001cce2:	eb08 2817 	add.w	r8, r8, r7, lsr #8
9001cce6:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ccea:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ccee:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ccf0:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ccf4:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ccf8:	4401      	add	r1, r0
9001ccfa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ccfe:	9812      	ldr	r0, [sp, #72]	; 0x48
9001cd00:	ea45 0c0c 	orr.w	ip, r5, ip
9001cd04:	4402      	add	r2, r0
9001cd06:	ea4c 0c08 	orr.w	ip, ip, r8
9001cd0a:	f82a cb02 	strh.w	ip, [sl], #2
9001cd0e:	e7af      	b.n	9001cc70 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001cd10:	f04f 0800 	mov.w	r8, #0
9001cd14:	f8bd a004 	ldrh.w	sl, [sp, #4]
9001cd18:	eb03 0008 	add.w	r0, r3, r8
9001cd1c:	2800      	cmp	r0, #0
9001cd1e:	dc41      	bgt.n	9001cda4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9001cd20:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cd24:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001cd28:	9b00      	ldr	r3, [sp, #0]
9001cd2a:	2b00      	cmp	r3, #0
9001cd2c:	f340 8095 	ble.w	9001ce5a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
9001cd30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9001cd34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cd36:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cd3a:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cd3e:	eef0 6a62 	vmov.f32	s13, s5
9001cd42:	eec7 7a00 	vdiv.f32	s15, s14, s0
9001cd46:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cd4a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cd4e:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
9001cd52:	eef0 6a43 	vmov.f32	s13, s6
9001cd56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9001cd5a:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
9001cd5e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cd62:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cd66:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cd6a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cd6e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cd72:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cd76:	ee12 2a90 	vmov	r2, s5
9001cd7a:	eef0 2a47 	vmov.f32	s5, s14
9001cd7e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cd82:	ee13 2a10 	vmov	r2, s6
9001cd86:	9311      	str	r3, [sp, #68]	; 0x44
9001cd88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cd8a:	eeb0 3a67 	vmov.f32	s6, s15
9001cd8e:	fb92 f3f3 	sdiv	r3, r2, r3
9001cd92:	9312      	str	r3, [sp, #72]	; 0x48
9001cd94:	9b00      	ldr	r3, [sp, #0]
9001cd96:	9a03      	ldr	r2, [sp, #12]
9001cd98:	3b01      	subs	r3, #1
9001cd9a:	9300      	str	r3, [sp, #0]
9001cd9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cd9e:	bf08      	it	eq
9001cda0:	4613      	moveq	r3, r2
9001cda2:	e72f      	b.n	9001cc04 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
9001cda4:	140f      	asrs	r7, r1, #16
9001cda6:	d451      	bmi.n	9001ce4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cda8:	f8de 5008 	ldr.w	r5, [lr, #8]
9001cdac:	42bd      	cmp	r5, r7
9001cdae:	dd4d      	ble.n	9001ce4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cdb0:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001cdb4:	d44a      	bmi.n	9001ce4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cdb6:	f8de 000c 	ldr.w	r0, [lr, #12]
9001cdba:	4560      	cmp	r0, ip
9001cdbc:	dd46      	ble.n	9001ce4c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
9001cdbe:	b22d      	sxth	r5, r5
9001cdc0:	9802      	ldr	r0, [sp, #8]
9001cdc2:	fb0c 7505 	mla	r5, ip, r5, r7
9001cdc6:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
9001cdca:	f06f 0501 	mvn.w	r5, #1
9001cdce:	fb05 fb08 	mul.w	fp, r5, r8
9001cdd2:	ea4f 2c20 	mov.w	ip, r0, asr #8
9001cdd6:	f834 500b 	ldrh.w	r5, [r4, fp]
9001cdda:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001cdde:	122f      	asrs	r7, r5, #8
9001cde0:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001cde4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001cde8:	00ed      	lsls	r5, r5, #3
9001cdea:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001cdee:	fb17 f706 	smulbb	r7, r7, r6
9001cdf2:	b2ed      	uxtb	r5, r5
9001cdf4:	fb19 f906 	smulbb	r9, r9, r6
9001cdf8:	fb0c 7c0a 	mla	ip, ip, sl, r7
9001cdfc:	10c7      	asrs	r7, r0, #3
9001cdfe:	fb15 f506 	smulbb	r5, r5, r6
9001ce02:	00c0      	lsls	r0, r0, #3
9001ce04:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ce08:	fa1f fc8c 	uxth.w	ip, ip
9001ce0c:	b2c0      	uxtb	r0, r0
9001ce0e:	fb07 970a 	mla	r7, r7, sl, r9
9001ce12:	fb00 500a 	mla	r0, r0, sl, r5
9001ce16:	f10c 0501 	add.w	r5, ip, #1
9001ce1a:	b2bf      	uxth	r7, r7
9001ce1c:	b280      	uxth	r0, r0
9001ce1e:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001ce22:	f107 0901 	add.w	r9, r7, #1
9001ce26:	1c45      	adds	r5, r0, #1
9001ce28:	eb09 2917 	add.w	r9, r9, r7, lsr #8
9001ce2c:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001ce30:	eb05 2510 	add.w	r5, r5, r0, lsr #8
9001ce34:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001ce38:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001ce3c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001ce40:	ea45 0c0c 	orr.w	ip, r5, ip
9001ce44:	ea4c 0c09 	orr.w	ip, ip, r9
9001ce48:	f824 c00b 	strh.w	ip, [r4, fp]
9001ce4c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001ce4e:	f108 38ff 	add.w	r8, r8, #4294967295
9001ce52:	4401      	add	r1, r0
9001ce54:	9812      	ldr	r0, [sp, #72]	; 0x48
9001ce56:	4402      	add	r2, r0
9001ce58:	e75e      	b.n	9001cd18 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
9001ce5a:	b005      	add	sp, #20
9001ce5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001ce60 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001ce60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ce64:	b085      	sub	sp, #20
9001ce66:	4693      	mov	fp, r2
9001ce68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001ce6c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
9001ce6e:	9d16      	ldr	r5, [sp, #88]	; 0x58
9001ce70:	6870      	ldr	r0, [r6, #4]
9001ce72:	9101      	str	r1, [sp, #4]
9001ce74:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001ce78:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
9001ce7c:	fb00 2404 	mla	r4, r0, r4, r2
9001ce80:	6832      	ldr	r2, [r6, #0]
9001ce82:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001ce86:	682a      	ldr	r2, [r5, #0]
9001ce88:	9202      	str	r2, [sp, #8]
9001ce8a:	9a01      	ldr	r2, [sp, #4]
9001ce8c:	2a00      	cmp	r2, #0
9001ce8e:	dc03      	bgt.n	9001ce98 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001ce90:	f1bb 0f00 	cmp.w	fp, #0
9001ce94:	f340 809a 	ble.w	9001cfcc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001ce98:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001ce9a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
9001ce9e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001cea2:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001cea4:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
9001cea8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001ceac:	2b00      	cmp	r3, #0
9001ceae:	dd0c      	ble.n	9001ceca <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
9001ceb0:	1406      	asrs	r6, r0, #16
9001ceb2:	d405      	bmi.n	9001cec0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ceb4:	454e      	cmp	r6, r9
9001ceb6:	da03      	bge.n	9001cec0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001ceb8:	1416      	asrs	r6, r2, #16
9001ceba:	d401      	bmi.n	9001cec0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001cebc:	4546      	cmp	r6, r8
9001cebe:	db05      	blt.n	9001cecc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
9001cec0:	4470      	add	r0, lr
9001cec2:	4462      	add	r2, ip
9001cec4:	3b01      	subs	r3, #1
9001cec6:	3402      	adds	r4, #2
9001cec8:	e7f0      	b.n	9001ceac <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001ceca:	d00f      	beq.n	9001ceec <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
9001cecc:	1e5e      	subs	r6, r3, #1
9001cece:	fb0e 0706 	mla	r7, lr, r6, r0
9001ced2:	143f      	asrs	r7, r7, #16
9001ced4:	d541      	bpl.n	9001cf5a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
9001ced6:	eb04 0643 	add.w	r6, r4, r3, lsl #1
9001ceda:	4698      	mov	r8, r3
9001cedc:	9603      	str	r6, [sp, #12]
9001cede:	f1b8 0f00 	cmp.w	r8, #0
9001cee2:	dc56      	bgt.n	9001cf92 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
9001cee4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001cee8:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001ceec:	9b01      	ldr	r3, [sp, #4]
9001ceee:	2b00      	cmp	r3, #0
9001cef0:	dd6c      	ble.n	9001cfcc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
9001cef2:	ee30 0a04 	vadd.f32	s0, s0, s8
9001cef6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cef8:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001cefc:	eeb0 6a62 	vmov.f32	s12, s5
9001cf00:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001cf04:	ee31 1a05 	vadd.f32	s2, s2, s10
9001cf08:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cf0c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001cf10:	eeb0 6a43 	vmov.f32	s12, s6
9001cf14:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001cf18:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001cf1c:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001cf20:	ee61 7a27 	vmul.f32	s15, s2, s15
9001cf24:	ee77 2a62 	vsub.f32	s5, s14, s5
9001cf28:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001cf2c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001cf30:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001cf34:	ee12 2a90 	vmov	r2, s5
9001cf38:	eef0 2a47 	vmov.f32	s5, s14
9001cf3c:	fb92 fef3 	sdiv	lr, r2, r3
9001cf40:	ee13 2a10 	vmov	r2, s6
9001cf44:	eeb0 3a67 	vmov.f32	s6, s15
9001cf48:	fb92 fcf3 	sdiv	ip, r2, r3
9001cf4c:	9b01      	ldr	r3, [sp, #4]
9001cf4e:	3b01      	subs	r3, #1
9001cf50:	9301      	str	r3, [sp, #4]
9001cf52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001cf54:	bf08      	it	eq
9001cf56:	465b      	moveq	r3, fp
9001cf58:	e797      	b.n	9001ce8a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001cf5a:	454f      	cmp	r7, r9
9001cf5c:	dabb      	bge.n	9001ced6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cf5e:	fb0c 2606 	mla	r6, ip, r6, r2
9001cf62:	1436      	asrs	r6, r6, #16
9001cf64:	d4b7      	bmi.n	9001ced6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cf66:	4546      	cmp	r6, r8
9001cf68:	dab5      	bge.n	9001ced6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001cf6a:	461e      	mov	r6, r3
9001cf6c:	46a0      	mov	r8, r4
9001cf6e:	2e00      	cmp	r6, #0
9001cf70:	ddb8      	ble.n	9001cee4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
9001cf72:	1417      	asrs	r7, r2, #16
9001cf74:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
9001cf78:	ea4f 4920 	mov.w	r9, r0, asr #16
9001cf7c:	9902      	ldr	r1, [sp, #8]
9001cf7e:	4470      	add	r0, lr
9001cf80:	4462      	add	r2, ip
9001cf82:	fb0a 9707 	mla	r7, sl, r7, r9
9001cf86:	3e01      	subs	r6, #1
9001cf88:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
9001cf8c:	f828 7b02 	strh.w	r7, [r8], #2
9001cf90:	e7ed      	b.n	9001cf6e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
9001cf92:	ea5f 4920 	movs.w	r9, r0, asr #16
9001cf96:	d414      	bmi.n	9001cfc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cf98:	68ae      	ldr	r6, [r5, #8]
9001cf9a:	454e      	cmp	r6, r9
9001cf9c:	dd11      	ble.n	9001cfc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cf9e:	ea5f 4a22 	movs.w	sl, r2, asr #16
9001cfa2:	d40e      	bmi.n	9001cfc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cfa4:	68ef      	ldr	r7, [r5, #12]
9001cfa6:	4557      	cmp	r7, sl
9001cfa8:	dd0b      	ble.n	9001cfc2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
9001cfaa:	b236      	sxth	r6, r6
9001cfac:	f06f 0101 	mvn.w	r1, #1
9001cfb0:	9f02      	ldr	r7, [sp, #8]
9001cfb2:	fb0a 9606 	mla	r6, sl, r6, r9
9001cfb6:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
9001cfba:	fb01 f608 	mul.w	r6, r1, r8
9001cfbe:	9903      	ldr	r1, [sp, #12]
9001cfc0:	538f      	strh	r7, [r1, r6]
9001cfc2:	4470      	add	r0, lr
9001cfc4:	4462      	add	r2, ip
9001cfc6:	f108 38ff 	add.w	r8, r8, #4294967295
9001cfca:	e788      	b.n	9001cede <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001cfcc:	b005      	add	sp, #20
9001cfce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9001cfd2 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001cfd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001cfd6:	b087      	sub	sp, #28
9001cfd8:	468b      	mov	fp, r1
9001cfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001cfde:	9815      	ldr	r0, [sp, #84]	; 0x54
9001cfe0:	9203      	str	r2, [sp, #12]
9001cfe2:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001cfe6:	6841      	ldr	r1, [r0, #4]
9001cfe8:	9204      	str	r2, [sp, #16]
9001cfea:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001cfee:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
9001cff2:	fb01 2505 	mla	r5, r1, r5, r2
9001cff6:	6802      	ldr	r2, [r0, #0]
9001cff8:	eb02 0545 	add.w	r5, r2, r5, lsl #1
9001cffc:	f8d9 2000 	ldr.w	r2, [r9]
9001d000:	9201      	str	r2, [sp, #4]
9001d002:	f1bb 0f00 	cmp.w	fp, #0
9001d006:	dc03      	bgt.n	9001d010 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
9001d008:	9a03      	ldr	r2, [sp, #12]
9001d00a:	2a00      	cmp	r2, #0
9001d00c:	f340 8158 	ble.w	9001d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d010:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d012:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d016:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d01a:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d01c:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d020:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d024:	2b00      	cmp	r3, #0
9001d026:	dd0e      	ble.n	9001d046 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
9001d028:	1402      	asrs	r2, r0, #16
9001d02a:	d405      	bmi.n	9001d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d02c:	42ba      	cmp	r2, r7
9001d02e:	da03      	bge.n	9001d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d030:	140a      	asrs	r2, r1, #16
9001d032:	d401      	bmi.n	9001d038 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9001d034:	42b2      	cmp	r2, r6
9001d036:	db07      	blt.n	9001d048 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9001d038:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d03a:	3b01      	subs	r3, #1
9001d03c:	3502      	adds	r5, #2
9001d03e:	4410      	add	r0, r2
9001d040:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d042:	4411      	add	r1, r2
9001d044:	e7ee      	b.n	9001d024 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9001d046:	d017      	beq.n	9001d078 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
9001d048:	1e5a      	subs	r2, r3, #1
9001d04a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
9001d04c:	fb04 0402 	mla	r4, r4, r2, r0
9001d050:	1424      	asrs	r4, r4, #16
9001d052:	d409      	bmi.n	9001d068 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d054:	42bc      	cmp	r4, r7
9001d056:	da07      	bge.n	9001d068 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d058:	9c14      	ldr	r4, [sp, #80]	; 0x50
9001d05a:	fb04 1202 	mla	r2, r4, r2, r1
9001d05e:	1412      	asrs	r2, r2, #16
9001d060:	d402      	bmi.n	9001d068 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
9001d062:	42b2      	cmp	r2, r6
9001d064:	f2c0 80bf 	blt.w	9001d1e6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9001d068:	2700      	movs	r7, #0
9001d06a:	19da      	adds	r2, r3, r7
9001d06c:	2a00      	cmp	r2, #0
9001d06e:	dc3e      	bgt.n	9001d0ee <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9001d070:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d074:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001d078:	f1bb 0f00 	cmp.w	fp, #0
9001d07c:	f340 8120 	ble.w	9001d2c0 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ee>
9001d080:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d084:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d086:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d08a:	f1bb 0b01 	subs.w	fp, fp, #1
9001d08e:	eeb0 6a62 	vmov.f32	s12, s5
9001d092:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d096:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d09a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d09e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d0a2:	eeb0 6a43 	vmov.f32	s12, s6
9001d0a6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d0aa:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d0ae:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d0b2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d0b6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d0ba:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d0be:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d0c2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d0c6:	ee12 2a90 	vmov	r2, s5
9001d0ca:	eef0 2a47 	vmov.f32	s5, s14
9001d0ce:	fb92 f3f3 	sdiv	r3, r2, r3
9001d0d2:	ee13 2a10 	vmov	r2, s6
9001d0d6:	9313      	str	r3, [sp, #76]	; 0x4c
9001d0d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d0da:	eeb0 3a67 	vmov.f32	s6, s15
9001d0de:	fb92 f3f3 	sdiv	r3, r2, r3
9001d0e2:	9a03      	ldr	r2, [sp, #12]
9001d0e4:	9314      	str	r3, [sp, #80]	; 0x50
9001d0e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d0e8:	bf08      	it	eq
9001d0ea:	4613      	moveq	r3, r2
9001d0ec:	e789      	b.n	9001d002 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
9001d0ee:	1406      	asrs	r6, r0, #16
9001d0f0:	d42d      	bmi.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d0f2:	f8d9 4008 	ldr.w	r4, [r9, #8]
9001d0f6:	42b4      	cmp	r4, r6
9001d0f8:	dd29      	ble.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d0fa:	ea5f 4c21 	movs.w	ip, r1, asr #16
9001d0fe:	d426      	bmi.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d100:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d104:	4562      	cmp	r2, ip
9001d106:	dd22      	ble.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d108:	b224      	sxth	r4, r4
9001d10a:	9a01      	ldr	r2, [sp, #4]
9001d10c:	fb0c 6404 	mla	r4, ip, r4, r6
9001d110:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
9001d114:	0e22      	lsrs	r2, r4, #24
9001d116:	d01a      	beq.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d118:	9e04      	ldr	r6, [sp, #16]
9001d11a:	4372      	muls	r2, r6
9001d11c:	1c56      	adds	r6, r2, #1
9001d11e:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d122:	0a26      	lsrs	r6, r4, #8
9001d124:	1212      	asrs	r2, r2, #8
9001d126:	9605      	str	r6, [sp, #20]
9001d128:	2aff      	cmp	r2, #255	; 0xff
9001d12a:	d116      	bne.n	9001d15a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
9001d12c:	f06f 0201 	mvn.w	r2, #1
9001d130:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d134:	fb02 fc07 	mul.w	ip, r2, r7
9001d138:	0962      	lsrs	r2, r4, #5
9001d13a:	f026 0607 	bic.w	r6, r6, #7
9001d13e:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d146:	4316      	orrs	r6, r2
9001d148:	4326      	orrs	r6, r4
9001d14a:	f825 600c 	strh.w	r6, [r5, ip]
9001d14e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d150:	3f01      	subs	r7, #1
9001d152:	4410      	add	r0, r2
9001d154:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d156:	4411      	add	r1, r2
9001d158:	e787      	b.n	9001d06a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d15a:	f06f 0601 	mvn.w	r6, #1
9001d15e:	fa1f fa82 	uxth.w	sl, r2
9001d162:	f3c4 4c07 	ubfx	ip, r4, #16, #8
9001d166:	43d2      	mvns	r2, r2
9001d168:	437e      	muls	r6, r7
9001d16a:	b2e4      	uxtb	r4, r4
9001d16c:	fb1c fc0a 	smulbb	ip, ip, sl
9001d170:	b2d2      	uxtb	r2, r2
9001d172:	f835 8006 	ldrh.w	r8, [r5, r6]
9001d176:	fb14 f40a 	smulbb	r4, r4, sl
9001d17a:	9602      	str	r6, [sp, #8]
9001d17c:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d180:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d184:	fb16 f60a 	smulbb	r6, r6, sl
9001d188:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d18c:	fb0e ce02 	mla	lr, lr, r2, ip
9001d190:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d194:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d198:	fa1f fe8e 	uxth.w	lr, lr
9001d19c:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d1a0:	fa5f f888 	uxtb.w	r8, r8
9001d1a4:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d1a8:	fb08 4402 	mla	r4, r8, r2, r4
9001d1ac:	f10e 0201 	add.w	r2, lr, #1
9001d1b0:	fa1f fc8c 	uxth.w	ip, ip
9001d1b4:	b2a4      	uxth	r4, r4
9001d1b6:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d1ba:	9a02      	ldr	r2, [sp, #8]
9001d1bc:	1c66      	adds	r6, r4, #1
9001d1be:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d1c2:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d1c6:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d1ca:	ea46 0e0e 	orr.w	lr, r6, lr
9001d1ce:	f10c 0601 	add.w	r6, ip, #1
9001d1d2:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d1d6:	0976      	lsrs	r6, r6, #5
9001d1d8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d1dc:	ea4e 0e06 	orr.w	lr, lr, r6
9001d1e0:	f825 e002 	strh.w	lr, [r5, r2]
9001d1e4:	e7b3      	b.n	9001d14e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
9001d1e6:	f04f 0800 	mov.w	r8, #0
9001d1ea:	eba3 0208 	sub.w	r2, r3, r8
9001d1ee:	2a00      	cmp	r2, #0
9001d1f0:	f77f af3e 	ble.w	9001d070 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
9001d1f4:	1404      	asrs	r4, r0, #16
9001d1f6:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
9001d1fa:	140a      	asrs	r2, r1, #16
9001d1fc:	fb06 4202 	mla	r2, r6, r2, r4
9001d200:	9c01      	ldr	r4, [sp, #4]
9001d202:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
9001d206:	0e22      	lsrs	r2, r4, #24
9001d208:	d015      	beq.n	9001d236 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d20a:	9e04      	ldr	r6, [sp, #16]
9001d20c:	4372      	muls	r2, r6
9001d20e:	1c56      	adds	r6, r2, #1
9001d210:	eb06 2222 	add.w	r2, r6, r2, asr #8
9001d214:	0a26      	lsrs	r6, r4, #8
9001d216:	1212      	asrs	r2, r2, #8
9001d218:	2aff      	cmp	r2, #255	; 0xff
9001d21a:	d113      	bne.n	9001d244 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
9001d21c:	0962      	lsrs	r2, r4, #5
9001d21e:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d222:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001d226:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d22a:	f026 0607 	bic.w	r6, r6, #7
9001d22e:	4316      	orrs	r6, r2
9001d230:	4326      	orrs	r6, r4
9001d232:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
9001d236:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d238:	f108 0801 	add.w	r8, r8, #1
9001d23c:	4410      	add	r0, r2
9001d23e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d240:	4411      	add	r1, r2
9001d242:	e7d2      	b.n	9001d1ea <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
9001d244:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
9001d248:	fa1f fa82 	uxth.w	sl, r2
9001d24c:	f3c4 4707 	ubfx	r7, r4, #16, #8
9001d250:	43d2      	mvns	r2, r2
9001d252:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d256:	fb17 f70a 	smulbb	r7, r7, sl
9001d25a:	b2d2      	uxtb	r2, r2
9001d25c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d260:	b2e4      	uxtb	r4, r4
9001d262:	b2f6      	uxtb	r6, r6
9001d264:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d268:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d26c:	fb14 f40a 	smulbb	r4, r4, sl
9001d270:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d274:	fa1f fc8c 	uxth.w	ip, ip
9001d278:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d27c:	fb16 f60a 	smulbb	r6, r6, sl
9001d280:	fa5f fe8e 	uxtb.w	lr, lr
9001d284:	fb0e 4402 	mla	r4, lr, r2, r4
9001d288:	fb07 6702 	mla	r7, r7, r2, r6
9001d28c:	f10c 0201 	add.w	r2, ip, #1
9001d290:	b2a4      	uxth	r4, r4
9001d292:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d296:	1c66      	adds	r6, r4, #1
9001d298:	b2bf      	uxth	r7, r7
9001d29a:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d29e:	eb06 2614 	add.w	r6, r6, r4, lsr #8
9001d2a2:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d2a6:	ea46 0c0c 	orr.w	ip, r6, ip
9001d2aa:	1c7e      	adds	r6, r7, #1
9001d2ac:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001d2b0:	0976      	lsrs	r6, r6, #5
9001d2b2:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d2b6:	ea4c 0c06 	orr.w	ip, ip, r6
9001d2ba:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
9001d2be:	e7ba      	b.n	9001d236 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x264>
9001d2c0:	b007      	add	sp, #28
9001d2c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

9001d2c8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d2cc:	b085      	sub	sp, #20
9001d2ce:	468b      	mov	fp, r1
9001d2d0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d2d4:	9813      	ldr	r0, [sp, #76]	; 0x4c
9001d2d6:	9203      	str	r2, [sp, #12]
9001d2d8:	6841      	ldr	r1, [r0, #4]
9001d2da:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
9001d2de:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
9001d2e2:	fb01 2404 	mla	r4, r1, r4, r2
9001d2e6:	6802      	ldr	r2, [r0, #0]
9001d2e8:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d2ec:	f8d8 2000 	ldr.w	r2, [r8]
9001d2f0:	9201      	str	r2, [sp, #4]
9001d2f2:	f1bb 0f00 	cmp.w	fp, #0
9001d2f6:	dc03      	bgt.n	9001d300 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9001d2f8:	9a03      	ldr	r2, [sp, #12]
9001d2fa:	2a00      	cmp	r2, #0
9001d2fc:	f340 814f 	ble.w	9001d59e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d300:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
9001d302:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
9001d306:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d30a:	9a10      	ldr	r2, [sp, #64]	; 0x40
9001d30c:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
9001d310:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
9001d314:	2b00      	cmp	r3, #0
9001d316:	dd0e      	ble.n	9001d336 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
9001d318:	1408      	asrs	r0, r1, #16
9001d31a:	d405      	bmi.n	9001d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d31c:	42b8      	cmp	r0, r7
9001d31e:	da03      	bge.n	9001d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d320:	1410      	asrs	r0, r2, #16
9001d322:	d401      	bmi.n	9001d328 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
9001d324:	42b0      	cmp	r0, r6
9001d326:	db07      	blt.n	9001d338 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d328:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d32a:	3b01      	subs	r3, #1
9001d32c:	3402      	adds	r4, #2
9001d32e:	4401      	add	r1, r0
9001d330:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d332:	4402      	add	r2, r0
9001d334:	e7ee      	b.n	9001d314 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
9001d336:	d017      	beq.n	9001d368 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d338:	1e58      	subs	r0, r3, #1
9001d33a:	9d11      	ldr	r5, [sp, #68]	; 0x44
9001d33c:	fb05 1500 	mla	r5, r5, r0, r1
9001d340:	142d      	asrs	r5, r5, #16
9001d342:	d409      	bmi.n	9001d358 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d344:	42bd      	cmp	r5, r7
9001d346:	da07      	bge.n	9001d358 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d348:	9d12      	ldr	r5, [sp, #72]	; 0x48
9001d34a:	fb05 2000 	mla	r0, r5, r0, r2
9001d34e:	1400      	asrs	r0, r0, #16
9001d350:	d402      	bmi.n	9001d358 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9001d352:	42b0      	cmp	r0, r6
9001d354:	f2c0 80ba 	blt.w	9001d4cc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9001d358:	2600      	movs	r6, #0
9001d35a:	1998      	adds	r0, r3, r6
9001d35c:	2800      	cmp	r0, #0
9001d35e:	dc3e      	bgt.n	9001d3de <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9001d360:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d364:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d368:	f1bb 0f00 	cmp.w	fp, #0
9001d36c:	f340 8117 	ble.w	9001d59e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9001d370:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d374:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d376:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d37a:	f1bb 0b01 	subs.w	fp, fp, #1
9001d37e:	eeb0 6a62 	vmov.f32	s12, s5
9001d382:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d386:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d38a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d38e:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
9001d392:	eeb0 6a43 	vmov.f32	s12, s6
9001d396:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d39a:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
9001d39e:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d3a2:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d3a6:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d3aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d3ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d3b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d3b6:	ee12 2a90 	vmov	r2, s5
9001d3ba:	eef0 2a47 	vmov.f32	s5, s14
9001d3be:	fb92 f3f3 	sdiv	r3, r2, r3
9001d3c2:	ee13 2a10 	vmov	r2, s6
9001d3c6:	9311      	str	r3, [sp, #68]	; 0x44
9001d3c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d3ca:	eeb0 3a67 	vmov.f32	s6, s15
9001d3ce:	fb92 f3f3 	sdiv	r3, r2, r3
9001d3d2:	9a03      	ldr	r2, [sp, #12]
9001d3d4:	9312      	str	r3, [sp, #72]	; 0x48
9001d3d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001d3d8:	bf08      	it	eq
9001d3da:	4613      	moveq	r3, r2
9001d3dc:	e789      	b.n	9001d2f2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
9001d3de:	140f      	asrs	r7, r1, #16
9001d3e0:	d424      	bmi.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d3e2:	f8d8 5008 	ldr.w	r5, [r8, #8]
9001d3e6:	42bd      	cmp	r5, r7
9001d3e8:	dd20      	ble.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d3ea:	ea5f 4c22 	movs.w	ip, r2, asr #16
9001d3ee:	d41d      	bmi.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d3f0:	f8d8 000c 	ldr.w	r0, [r8, #12]
9001d3f4:	4560      	cmp	r0, ip
9001d3f6:	dd19      	ble.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d3f8:	b22d      	sxth	r5, r5
9001d3fa:	9801      	ldr	r0, [sp, #4]
9001d3fc:	fb0c 7505 	mla	r5, ip, r5, r7
9001d400:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
9001d404:	0e07      	lsrs	r7, r0, #24
9001d406:	2fff      	cmp	r7, #255	; 0xff
9001d408:	d116      	bne.n	9001d438 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
9001d40a:	f06f 0501 	mvn.w	r5, #1
9001d40e:	fb05 f706 	mul.w	r7, r5, r6
9001d412:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
9001d416:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
9001d41a:	0945      	lsrs	r5, r0, #5
9001d41c:	f3c0 00c4 	ubfx	r0, r0, #3, #5
9001d420:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d424:	ea4c 0505 	orr.w	r5, ip, r5
9001d428:	4305      	orrs	r5, r0
9001d42a:	53e5      	strh	r5, [r4, r7]
9001d42c:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d42e:	3e01      	subs	r6, #1
9001d430:	4401      	add	r1, r0
9001d432:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d434:	4402      	add	r2, r0
9001d436:	e790      	b.n	9001d35a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9001d438:	b2fd      	uxtb	r5, r7
9001d43a:	2f00      	cmp	r7, #0
9001d43c:	d0f6      	beq.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d43e:	f06f 0701 	mvn.w	r7, #1
9001d442:	fa1f f985 	uxth.w	r9, r5
9001d446:	43ed      	mvns	r5, r5
9001d448:	f3c0 2a07 	ubfx	sl, r0, #8, #8
9001d44c:	4377      	muls	r7, r6
9001d44e:	fb1a fa09 	smulbb	sl, sl, r9
9001d452:	b2ed      	uxtb	r5, r5
9001d454:	f834 e007 	ldrh.w	lr, [r4, r7]
9001d458:	9702      	str	r7, [sp, #8]
9001d45a:	f3c0 4707 	ubfx	r7, r0, #16, #8
9001d45e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d462:	fb17 f709 	smulbb	r7, r7, r9
9001d466:	b2c0      	uxtb	r0, r0
9001d468:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d46c:	fb10 f009 	smulbb	r0, r0, r9
9001d470:	fb0c 7c05 	mla	ip, ip, r5, r7
9001d474:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d478:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d47c:	fa1f fc8c 	uxth.w	ip, ip
9001d480:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d484:	fa5f fe8e 	uxtb.w	lr, lr
9001d488:	fb07 a705 	mla	r7, r7, r5, sl
9001d48c:	fb0e 0005 	mla	r0, lr, r5, r0
9001d490:	f10c 0501 	add.w	r5, ip, #1
9001d494:	b2bf      	uxth	r7, r7
9001d496:	b280      	uxth	r0, r0
9001d498:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
9001d49c:	f100 0a01 	add.w	sl, r0, #1
9001d4a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d4a4:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
9001d4a8:	9802      	ldr	r0, [sp, #8]
9001d4aa:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d4ae:	ea4a 0c0c 	orr.w	ip, sl, ip
9001d4b2:	f107 0a01 	add.w	sl, r7, #1
9001d4b6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001d4ba:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d4be:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d4c2:	ea4c 0c0a 	orr.w	ip, ip, sl
9001d4c6:	f824 c000 	strh.w	ip, [r4, r0]
9001d4ca:	e7af      	b.n	9001d42c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
9001d4cc:	f04f 0e00 	mov.w	lr, #0
9001d4d0:	eba3 000e 	sub.w	r0, r3, lr
9001d4d4:	2800      	cmp	r0, #0
9001d4d6:	f77f af43 	ble.w	9001d360 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
9001d4da:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
9001d4de:	140d      	asrs	r5, r1, #16
9001d4e0:	1410      	asrs	r0, r2, #16
9001d4e2:	fb06 5000 	mla	r0, r6, r0, r5
9001d4e6:	9d01      	ldr	r5, [sp, #4]
9001d4e8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
9001d4ec:	0e2e      	lsrs	r6, r5, #24
9001d4ee:	2eff      	cmp	r6, #255	; 0xff
9001d4f0:	d112      	bne.n	9001d518 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
9001d4f2:	482c      	ldr	r0, [pc, #176]	; (9001d5a4 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
9001d4f4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
9001d4f8:	0968      	lsrs	r0, r5, #5
9001d4fa:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d4fe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001d502:	4330      	orrs	r0, r6
9001d504:	4328      	orrs	r0, r5
9001d506:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
9001d50a:	9811      	ldr	r0, [sp, #68]	; 0x44
9001d50c:	f10e 0e01 	add.w	lr, lr, #1
9001d510:	4401      	add	r1, r0
9001d512:	9812      	ldr	r0, [sp, #72]	; 0x48
9001d514:	4402      	add	r2, r0
9001d516:	e7db      	b.n	9001d4d0 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
9001d518:	b2f0      	uxtb	r0, r6
9001d51a:	2e00      	cmp	r6, #0
9001d51c:	d0f5      	beq.n	9001d50a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d51e:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001d522:	fa1f f980 	uxth.w	r9, r0
9001d526:	f3c5 4607 	ubfx	r6, r5, #16, #8
9001d52a:	43c0      	mvns	r0, r0
9001d52c:	ea4f 272c 	mov.w	r7, ip, asr #8
9001d530:	f3c5 2a07 	ubfx	sl, r5, #8, #8
9001d534:	fb16 f609 	smulbb	r6, r6, r9
9001d538:	b2c0      	uxtb	r0, r0
9001d53a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001d53e:	b2ed      	uxtb	r5, r5
9001d540:	fb1a fa09 	smulbb	sl, sl, r9
9001d544:	fb07 6700 	mla	r7, r7, r0, r6
9001d548:	ea4f 06ec 	mov.w	r6, ip, asr #3
9001d54c:	fb15 f509 	smulbb	r5, r5, r9
9001d550:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001d554:	b2bf      	uxth	r7, r7
9001d556:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001d55a:	fa5f fc8c 	uxtb.w	ip, ip
9001d55e:	fb06 a600 	mla	r6, r6, r0, sl
9001d562:	fb0c 5500 	mla	r5, ip, r0, r5
9001d566:	1c78      	adds	r0, r7, #1
9001d568:	b2b6      	uxth	r6, r6
9001d56a:	b2ad      	uxth	r5, r5
9001d56c:	eb00 2717 	add.w	r7, r0, r7, lsr #8
9001d570:	f105 0a01 	add.w	sl, r5, #1
9001d574:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001d578:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001d57c:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001d580:	ea4a 0707 	orr.w	r7, sl, r7
9001d584:	f106 0a01 	add.w	sl, r6, #1
9001d588:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001d58c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001d590:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001d594:	ea47 070a 	orr.w	r7, r7, sl
9001d598:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
9001d59c:	e7b5      	b.n	9001d50a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
9001d59e:	b005      	add	sp, #20
9001d5a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d5a4:	fffff800 	.word	0xfffff800

9001d5a8 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d5a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d5ac:	b087      	sub	sp, #28
9001d5ae:	468b      	mov	fp, r1
9001d5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d5b4:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d5b6:	9203      	str	r2, [sp, #12]
9001d5b8:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
9001d5bc:	6841      	ldr	r1, [r0, #4]
9001d5be:	9204      	str	r2, [sp, #16]
9001d5c0:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
9001d5c4:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d5c8:	fb01 2404 	mla	r4, r1, r4, r2
9001d5cc:	6802      	ldr	r2, [r0, #0]
9001d5ce:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d5d2:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d5d6:	3201      	adds	r2, #1
9001d5d8:	f022 0201 	bic.w	r2, r2, #1
9001d5dc:	9200      	str	r2, [sp, #0]
9001d5de:	f8d9 2000 	ldr.w	r2, [r9]
9001d5e2:	9201      	str	r2, [sp, #4]
9001d5e4:	f1bb 0f00 	cmp.w	fp, #0
9001d5e8:	dc03      	bgt.n	9001d5f2 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
9001d5ea:	9a03      	ldr	r2, [sp, #12]
9001d5ec:	2a00      	cmp	r2, #0
9001d5ee:	f340 816a 	ble.w	9001d8c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d5f2:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d5f4:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
9001d5f8:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d5fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d5fe:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
9001d602:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d606:	2b00      	cmp	r3, #0
9001d608:	dd0e      	ble.n	9001d628 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d60a:	1402      	asrs	r2, r0, #16
9001d60c:	d405      	bmi.n	9001d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d60e:	42ba      	cmp	r2, r7
9001d610:	da03      	bge.n	9001d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d612:	140a      	asrs	r2, r1, #16
9001d614:	d401      	bmi.n	9001d61a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
9001d616:	42b2      	cmp	r2, r6
9001d618:	db07      	blt.n	9001d62a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
9001d61a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d61c:	3b01      	subs	r3, #1
9001d61e:	3402      	adds	r4, #2
9001d620:	4410      	add	r0, r2
9001d622:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d624:	4411      	add	r1, r2
9001d626:	e7ee      	b.n	9001d606 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
9001d628:	d017      	beq.n	9001d65a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
9001d62a:	1e5a      	subs	r2, r3, #1
9001d62c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d62e:	fb05 0502 	mla	r5, r5, r2, r0
9001d632:	142d      	asrs	r5, r5, #16
9001d634:	d409      	bmi.n	9001d64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d636:	42bd      	cmp	r5, r7
9001d638:	da07      	bge.n	9001d64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d63a:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d63c:	fb05 1202 	mla	r2, r5, r2, r1
9001d640:	1412      	asrs	r2, r2, #16
9001d642:	d402      	bmi.n	9001d64a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001d644:	42b2      	cmp	r2, r6
9001d646:	f2c0 80c8 	blt.w	9001d7da <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
9001d64a:	2700      	movs	r7, #0
9001d64c:	19da      	adds	r2, r3, r7
9001d64e:	2a00      	cmp	r2, #0
9001d650:	dc3e      	bgt.n	9001d6d0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d652:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d656:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d65a:	f1bb 0f00 	cmp.w	fp, #0
9001d65e:	f340 8132 	ble.w	9001d8c6 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
9001d662:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d666:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d668:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d66c:	f1bb 0b01 	subs.w	fp, fp, #1
9001d670:	eeb0 6a62 	vmov.f32	s12, s5
9001d674:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d678:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d67c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d680:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d684:	eeb0 6a43 	vmov.f32	s12, s6
9001d688:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d68c:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d690:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d694:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d698:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d69c:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d6a0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d6a4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d6a8:	ee12 2a90 	vmov	r2, s5
9001d6ac:	eef0 2a47 	vmov.f32	s5, s14
9001d6b0:	fb92 f3f3 	sdiv	r3, r2, r3
9001d6b4:	ee13 2a10 	vmov	r2, s6
9001d6b8:	9313      	str	r3, [sp, #76]	; 0x4c
9001d6ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d6bc:	eeb0 3a67 	vmov.f32	s6, s15
9001d6c0:	fb92 f3f3 	sdiv	r3, r2, r3
9001d6c4:	9a03      	ldr	r2, [sp, #12]
9001d6c6:	9314      	str	r3, [sp, #80]	; 0x50
9001d6c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d6ca:	bf08      	it	eq
9001d6cc:	4613      	moveq	r3, r2
9001d6ce:	e789      	b.n	9001d5e4 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
9001d6d0:	1405      	asrs	r5, r0, #16
9001d6d2:	d436      	bmi.n	9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d6d4:	f8d9 2008 	ldr.w	r2, [r9, #8]
9001d6d8:	42aa      	cmp	r2, r5
9001d6da:	dd32      	ble.n	9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d6dc:	140e      	asrs	r6, r1, #16
9001d6de:	d430      	bmi.n	9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d6e0:	f8d9 200c 	ldr.w	r2, [r9, #12]
9001d6e4:	42b2      	cmp	r2, r6
9001d6e6:	dd2c      	ble.n	9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d6e8:	9a00      	ldr	r2, [sp, #0]
9001d6ea:	fb06 5502 	mla	r5, r6, r2, r5
9001d6ee:	9e01      	ldr	r6, [sp, #4]
9001d6f0:	086a      	lsrs	r2, r5, #1
9001d6f2:	5cb2      	ldrb	r2, [r6, r2]
9001d6f4:	07ee      	lsls	r6, r5, #31
9001d6f6:	bf54      	ite	pl
9001d6f8:	f002 020f 	andpl.w	r2, r2, #15
9001d6fc:	1112      	asrmi	r2, r2, #4
9001d6fe:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d702:	b2d2      	uxtb	r2, r2
9001d704:	b1ea      	cbz	r2, 9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d706:	9d04      	ldr	r5, [sp, #16]
9001d708:	436a      	muls	r2, r5
9001d70a:	1c55      	adds	r5, r2, #1
9001d70c:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d710:	4d6e      	ldr	r5, [pc, #440]	; (9001d8cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d712:	1212      	asrs	r2, r2, #8
9001d714:	682d      	ldr	r5, [r5, #0]
9001d716:	2aff      	cmp	r2, #255	; 0xff
9001d718:	ea4f 2615 	mov.w	r6, r5, lsr #8
9001d71c:	9605      	str	r6, [sp, #20]
9001d71e:	d116      	bne.n	9001d74e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
9001d720:	f06f 0201 	mvn.w	r2, #1
9001d724:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
9001d728:	fb02 fc07 	mul.w	ip, r2, r7
9001d72c:	096a      	lsrs	r2, r5, #5
9001d72e:	f026 0607 	bic.w	r6, r6, #7
9001d732:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001d736:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d73a:	4316      	orrs	r6, r2
9001d73c:	432e      	orrs	r6, r5
9001d73e:	f824 600c 	strh.w	r6, [r4, ip]
9001d742:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d744:	3f01      	subs	r7, #1
9001d746:	4410      	add	r0, r2
9001d748:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d74a:	4411      	add	r1, r2
9001d74c:	e77e      	b.n	9001d64c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
9001d74e:	f06f 0601 	mvn.w	r6, #1
9001d752:	fa1f fa82 	uxth.w	sl, r2
9001d756:	f3c5 4c07 	ubfx	ip, r5, #16, #8
9001d75a:	43d2      	mvns	r2, r2
9001d75c:	437e      	muls	r6, r7
9001d75e:	b2ed      	uxtb	r5, r5
9001d760:	fb1c fc0a 	smulbb	ip, ip, sl
9001d764:	b2d2      	uxtb	r2, r2
9001d766:	f834 8006 	ldrh.w	r8, [r4, r6]
9001d76a:	fb15 f50a 	smulbb	r5, r5, sl
9001d76e:	9602      	str	r6, [sp, #8]
9001d770:	ea4f 2e28 	mov.w	lr, r8, asr #8
9001d774:	f89d 6014 	ldrb.w	r6, [sp, #20]
9001d778:	fb16 f60a 	smulbb	r6, r6, sl
9001d77c:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
9001d780:	fb0e ce02 	mla	lr, lr, r2, ip
9001d784:	ea4f 0ce8 	mov.w	ip, r8, asr #3
9001d788:	ea4f 08c8 	mov.w	r8, r8, lsl #3
9001d78c:	fa1f fe8e 	uxth.w	lr, lr
9001d790:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
9001d794:	fa5f f888 	uxtb.w	r8, r8
9001d798:	fb0c 6c02 	mla	ip, ip, r2, r6
9001d79c:	fb08 5502 	mla	r5, r8, r2, r5
9001d7a0:	f10e 0201 	add.w	r2, lr, #1
9001d7a4:	fa1f fc8c 	uxth.w	ip, ip
9001d7a8:	b2ad      	uxth	r5, r5
9001d7aa:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
9001d7ae:	9a02      	ldr	r2, [sp, #8]
9001d7b0:	1c6e      	adds	r6, r5, #1
9001d7b2:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
9001d7b6:	eb06 2615 	add.w	r6, r6, r5, lsr #8
9001d7ba:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001d7be:	ea46 0e0e 	orr.w	lr, r6, lr
9001d7c2:	f10c 0601 	add.w	r6, ip, #1
9001d7c6:	eb06 261c 	add.w	r6, r6, ip, lsr #8
9001d7ca:	0976      	lsrs	r6, r6, #5
9001d7cc:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001d7d0:	ea4e 0e06 	orr.w	lr, lr, r6
9001d7d4:	f824 e002 	strh.w	lr, [r4, r2]
9001d7d8:	e7b3      	b.n	9001d742 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
9001d7da:	f04f 0800 	mov.w	r8, #0
9001d7de:	eba3 0208 	sub.w	r2, r3, r8
9001d7e2:	2a00      	cmp	r2, #0
9001d7e4:	f77f af35 	ble.w	9001d652 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
9001d7e8:	1402      	asrs	r2, r0, #16
9001d7ea:	9e00      	ldr	r6, [sp, #0]
9001d7ec:	140d      	asrs	r5, r1, #16
9001d7ee:	fb06 2505 	mla	r5, r6, r5, r2
9001d7f2:	9e01      	ldr	r6, [sp, #4]
9001d7f4:	086a      	lsrs	r2, r5, #1
9001d7f6:	07ed      	lsls	r5, r5, #31
9001d7f8:	5cb2      	ldrb	r2, [r6, r2]
9001d7fa:	bf54      	ite	pl
9001d7fc:	f002 020f 	andpl.w	r2, r2, #15
9001d800:	1112      	asrmi	r2, r2, #4
9001d802:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001d806:	b2d2      	uxtb	r2, r2
9001d808:	b1c2      	cbz	r2, 9001d83c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d80a:	9d04      	ldr	r5, [sp, #16]
9001d80c:	436a      	muls	r2, r5
9001d80e:	1c55      	adds	r5, r2, #1
9001d810:	eb05 2222 	add.w	r2, r5, r2, asr #8
9001d814:	4d2d      	ldr	r5, [pc, #180]	; (9001d8cc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
9001d816:	1212      	asrs	r2, r2, #8
9001d818:	682e      	ldr	r6, [r5, #0]
9001d81a:	2aff      	cmp	r2, #255	; 0xff
9001d81c:	ea4f 2516 	mov.w	r5, r6, lsr #8
9001d820:	d113      	bne.n	9001d84a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
9001d822:	0972      	lsrs	r2, r6, #5
9001d824:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
9001d828:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001d82c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001d830:	f025 0507 	bic.w	r5, r5, #7
9001d834:	4315      	orrs	r5, r2
9001d836:	4335      	orrs	r5, r6
9001d838:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
9001d83c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d83e:	f108 0801 	add.w	r8, r8, #1
9001d842:	4410      	add	r0, r2
9001d844:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d846:	4411      	add	r1, r2
9001d848:	e7c9      	b.n	9001d7de <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
9001d84a:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
9001d84e:	fa1f fa82 	uxth.w	sl, r2
9001d852:	f3c6 4707 	ubfx	r7, r6, #16, #8
9001d856:	43d2      	mvns	r2, r2
9001d858:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001d85c:	fb17 f70a 	smulbb	r7, r7, sl
9001d860:	b2d2      	uxtb	r2, r2
9001d862:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001d866:	b2f6      	uxtb	r6, r6
9001d868:	b2ed      	uxtb	r5, r5
9001d86a:	fb0c 7c02 	mla	ip, ip, r2, r7
9001d86e:	ea4f 07ee 	mov.w	r7, lr, asr #3
9001d872:	fb16 f60a 	smulbb	r6, r6, sl
9001d876:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001d87a:	fa1f fc8c 	uxth.w	ip, ip
9001d87e:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001d882:	fb15 f50a 	smulbb	r5, r5, sl
9001d886:	fa5f fe8e 	uxtb.w	lr, lr
9001d88a:	fb0e 6602 	mla	r6, lr, r2, r6
9001d88e:	fb07 5702 	mla	r7, r7, r2, r5
9001d892:	f10c 0201 	add.w	r2, ip, #1
9001d896:	b2b6      	uxth	r6, r6
9001d898:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001d89c:	1c75      	adds	r5, r6, #1
9001d89e:	b2bf      	uxth	r7, r7
9001d8a0:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
9001d8a4:	eb05 2516 	add.w	r5, r5, r6, lsr #8
9001d8a8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
9001d8ac:	ea45 0c0c 	orr.w	ip, r5, ip
9001d8b0:	1c7d      	adds	r5, r7, #1
9001d8b2:	eb05 2517 	add.w	r5, r5, r7, lsr #8
9001d8b6:	096d      	lsrs	r5, r5, #5
9001d8b8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001d8bc:	ea4c 0c05 	orr.w	ip, ip, r5
9001d8c0:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
9001d8c4:	e7ba      	b.n	9001d83c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
9001d8c6:	b007      	add	sp, #28
9001d8c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001d8cc:	24026f94 	.word	0x24026f94

9001d8d0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9001d8d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001d8d4:	b087      	sub	sp, #28
9001d8d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
9001d8da:	f8df 8308 	ldr.w	r8, [pc, #776]	; 9001dbe4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
9001d8de:	9815      	ldr	r0, [sp, #84]	; 0x54
9001d8e0:	9101      	str	r1, [sp, #4]
9001d8e2:	9205      	str	r2, [sp, #20]
9001d8e4:	6841      	ldr	r1, [r0, #4]
9001d8e6:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
9001d8ea:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
9001d8ee:	fb01 2404 	mla	r4, r1, r4, r2
9001d8f2:	6802      	ldr	r2, [r0, #0]
9001d8f4:	eb02 0444 	add.w	r4, r2, r4, lsl #1
9001d8f8:	f8db 2008 	ldr.w	r2, [fp, #8]
9001d8fc:	3201      	adds	r2, #1
9001d8fe:	f022 0201 	bic.w	r2, r2, #1
9001d902:	9202      	str	r2, [sp, #8]
9001d904:	f8db 2000 	ldr.w	r2, [fp]
9001d908:	9203      	str	r2, [sp, #12]
9001d90a:	9a01      	ldr	r2, [sp, #4]
9001d90c:	2a00      	cmp	r2, #0
9001d90e:	dc03      	bgt.n	9001d918 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
9001d910:	9a05      	ldr	r2, [sp, #20]
9001d912:	2a00      	cmp	r2, #0
9001d914:	f340 8162 	ble.w	9001dbdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d918:	9a11      	ldr	r2, [sp, #68]	; 0x44
9001d91a:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
9001d91e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
9001d922:	9a12      	ldr	r2, [sp, #72]	; 0x48
9001d924:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
9001d928:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
9001d92c:	2b00      	cmp	r3, #0
9001d92e:	dd0e      	ble.n	9001d94e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
9001d930:	1402      	asrs	r2, r0, #16
9001d932:	d405      	bmi.n	9001d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d934:	42ba      	cmp	r2, r7
9001d936:	da03      	bge.n	9001d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d938:	140a      	asrs	r2, r1, #16
9001d93a:	d401      	bmi.n	9001d940 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9001d93c:	42b2      	cmp	r2, r6
9001d93e:	db07      	blt.n	9001d950 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
9001d940:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001d942:	3b01      	subs	r3, #1
9001d944:	3402      	adds	r4, #2
9001d946:	4410      	add	r0, r2
9001d948:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001d94a:	4411      	add	r1, r2
9001d94c:	e7ee      	b.n	9001d92c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
9001d94e:	d017      	beq.n	9001d980 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
9001d950:	1e5a      	subs	r2, r3, #1
9001d952:	9d13      	ldr	r5, [sp, #76]	; 0x4c
9001d954:	fb05 0502 	mla	r5, r5, r2, r0
9001d958:	142d      	asrs	r5, r5, #16
9001d95a:	d409      	bmi.n	9001d970 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d95c:	42bd      	cmp	r5, r7
9001d95e:	da07      	bge.n	9001d970 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d960:	9d14      	ldr	r5, [sp, #80]	; 0x50
9001d962:	fb05 1202 	mla	r2, r5, r2, r1
9001d966:	1412      	asrs	r2, r2, #16
9001d968:	d402      	bmi.n	9001d970 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
9001d96a:	42b2      	cmp	r2, r6
9001d96c:	f2c0 80c3 	blt.w	9001daf6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
9001d970:	2500      	movs	r5, #0
9001d972:	195a      	adds	r2, r3, r5
9001d974:	2a00      	cmp	r2, #0
9001d976:	dc3f      	bgt.n	9001d9f8 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
9001d978:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
9001d97c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001d980:	9b01      	ldr	r3, [sp, #4]
9001d982:	2b00      	cmp	r3, #0
9001d984:	f340 812a 	ble.w	9001dbdc <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
9001d988:	ee30 0a04 	vadd.f32	s0, s0, s8
9001d98c:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d98e:	ee70 0aa4 	vadd.f32	s1, s1, s9
9001d992:	eeb0 6a62 	vmov.f32	s12, s5
9001d996:	eec6 7a80 	vdiv.f32	s15, s13, s0
9001d99a:	ee31 1a05 	vadd.f32	s2, s2, s10
9001d99e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d9a2:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
9001d9a6:	eeb0 6a43 	vmov.f32	s12, s6
9001d9aa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
9001d9ae:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
9001d9b2:	ee20 7aa7 	vmul.f32	s14, s1, s15
9001d9b6:	ee61 7a27 	vmul.f32	s15, s2, s15
9001d9ba:	ee77 2a62 	vsub.f32	s5, s14, s5
9001d9be:	ee37 3ac3 	vsub.f32	s6, s15, s6
9001d9c2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9001d9c6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9001d9ca:	ee12 2a90 	vmov	r2, s5
9001d9ce:	eef0 2a47 	vmov.f32	s5, s14
9001d9d2:	fb92 f3f3 	sdiv	r3, r2, r3
9001d9d6:	ee13 2a10 	vmov	r2, s6
9001d9da:	9313      	str	r3, [sp, #76]	; 0x4c
9001d9dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d9de:	eeb0 3a67 	vmov.f32	s6, s15
9001d9e2:	fb92 f3f3 	sdiv	r3, r2, r3
9001d9e6:	9314      	str	r3, [sp, #80]	; 0x50
9001d9e8:	9b01      	ldr	r3, [sp, #4]
9001d9ea:	9a05      	ldr	r2, [sp, #20]
9001d9ec:	3b01      	subs	r3, #1
9001d9ee:	9301      	str	r3, [sp, #4]
9001d9f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001d9f2:	bf08      	it	eq
9001d9f4:	4613      	moveq	r3, r2
9001d9f6:	e788      	b.n	9001d90a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9001d9f8:	1406      	asrs	r6, r0, #16
9001d9fa:	d42c      	bmi.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001d9fc:	f8db 2008 	ldr.w	r2, [fp, #8]
9001da00:	42b2      	cmp	r2, r6
9001da02:	dd28      	ble.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001da04:	140f      	asrs	r7, r1, #16
9001da06:	d426      	bmi.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001da08:	f8db 200c 	ldr.w	r2, [fp, #12]
9001da0c:	42ba      	cmp	r2, r7
9001da0e:	dd22      	ble.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001da10:	9a02      	ldr	r2, [sp, #8]
9001da12:	fb07 6602 	mla	r6, r7, r2, r6
9001da16:	9f03      	ldr	r7, [sp, #12]
9001da18:	0872      	lsrs	r2, r6, #1
9001da1a:	07f6      	lsls	r6, r6, #31
9001da1c:	5cba      	ldrb	r2, [r7, r2]
9001da1e:	bf54      	ite	pl
9001da20:	f002 020f 	andpl.w	r2, r2, #15
9001da24:	1112      	asrmi	r2, r2, #4
9001da26:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001da2a:	b2d2      	uxtb	r2, r2
9001da2c:	2aff      	cmp	r2, #255	; 0xff
9001da2e:	d118      	bne.n	9001da62 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
9001da30:	f06f 0601 	mvn.w	r6, #1
9001da34:	f8d8 2000 	ldr.w	r2, [r8]
9001da38:	fb06 f705 	mul.w	r7, r6, r5
9001da3c:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
9001da40:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
9001da44:	0956      	lsrs	r6, r2, #5
9001da46:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001da4a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001da4e:	ea4c 0606 	orr.w	r6, ip, r6
9001da52:	4316      	orrs	r6, r2
9001da54:	53e6      	strh	r6, [r4, r7]
9001da56:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001da58:	3d01      	subs	r5, #1
9001da5a:	4410      	add	r0, r2
9001da5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001da5e:	4411      	add	r1, r2
9001da60:	e787      	b.n	9001d972 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
9001da62:	2a00      	cmp	r2, #0
9001da64:	d0f7      	beq.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001da66:	f06f 0601 	mvn.w	r6, #1
9001da6a:	f8d8 c000 	ldr.w	ip, [r8]
9001da6e:	fa1f f982 	uxth.w	r9, r2
9001da72:	43d2      	mvns	r2, r2
9001da74:	436e      	muls	r6, r5
9001da76:	f3cc 2a07 	ubfx	sl, ip, #8, #8
9001da7a:	b2d2      	uxtb	r2, r2
9001da7c:	f834 e006 	ldrh.w	lr, [r4, r6]
9001da80:	fb1a fa09 	smulbb	sl, sl, r9
9001da84:	9604      	str	r6, [sp, #16]
9001da86:	f3cc 4607 	ubfx	r6, ip, #16, #8
9001da8a:	ea4f 272e 	mov.w	r7, lr, asr #8
9001da8e:	fb16 f609 	smulbb	r6, r6, r9
9001da92:	fa5f fc8c 	uxtb.w	ip, ip
9001da96:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001da9a:	fb1c fc09 	smulbb	ip, ip, r9
9001da9e:	fb07 6702 	mla	r7, r7, r2, r6
9001daa2:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001daa6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001daaa:	b2bf      	uxth	r7, r7
9001daac:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001dab0:	fa5f fe8e 	uxtb.w	lr, lr
9001dab4:	fb06 a602 	mla	r6, r6, r2, sl
9001dab8:	fb0e cc02 	mla	ip, lr, r2, ip
9001dabc:	1c7a      	adds	r2, r7, #1
9001dabe:	b2b6      	uxth	r6, r6
9001dac0:	fa1f fc8c 	uxth.w	ip, ip
9001dac4:	eb02 2717 	add.w	r7, r2, r7, lsr #8
9001dac8:	9a04      	ldr	r2, [sp, #16]
9001daca:	f10c 0a01 	add.w	sl, ip, #1
9001dace:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
9001dad2:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
9001dad6:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dada:	ea4a 0707 	orr.w	r7, sl, r7
9001dade:	f106 0a01 	add.w	sl, r6, #1
9001dae2:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
9001dae6:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001daea:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001daee:	ea47 070a 	orr.w	r7, r7, sl
9001daf2:	52a7      	strh	r7, [r4, r2]
9001daf4:	e7af      	b.n	9001da56 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9001daf6:	f04f 0e00 	mov.w	lr, #0
9001dafa:	eba3 020e 	sub.w	r2, r3, lr
9001dafe:	2a00      	cmp	r2, #0
9001db00:	f77f af3a 	ble.w	9001d978 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
9001db04:	1402      	asrs	r2, r0, #16
9001db06:	9e02      	ldr	r6, [sp, #8]
9001db08:	140d      	asrs	r5, r1, #16
9001db0a:	fb06 2505 	mla	r5, r6, r5, r2
9001db0e:	9e03      	ldr	r6, [sp, #12]
9001db10:	086a      	lsrs	r2, r5, #1
9001db12:	07ed      	lsls	r5, r5, #31
9001db14:	5cb2      	ldrb	r2, [r6, r2]
9001db16:	bf54      	ite	pl
9001db18:	f002 020f 	andpl.w	r2, r2, #15
9001db1c:	1112      	asrmi	r2, r2, #4
9001db1e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
9001db22:	b2d2      	uxtb	r2, r2
9001db24:	2aff      	cmp	r2, #255	; 0xff
9001db26:	d115      	bne.n	9001db54 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
9001db28:	f8d8 5000 	ldr.w	r5, [r8]
9001db2c:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
9001db30:	ea02 2615 	and.w	r6, r2, r5, lsr #8
9001db34:	096a      	lsrs	r2, r5, #5
9001db36:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9001db3a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001db3e:	4332      	orrs	r2, r6
9001db40:	432a      	orrs	r2, r5
9001db42:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
9001db46:	9a13      	ldr	r2, [sp, #76]	; 0x4c
9001db48:	f10e 0e01 	add.w	lr, lr, #1
9001db4c:	4410      	add	r0, r2
9001db4e:	9a14      	ldr	r2, [sp, #80]	; 0x50
9001db50:	4411      	add	r1, r2
9001db52:	e7d2      	b.n	9001dafa <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
9001db54:	2a00      	cmp	r2, #0
9001db56:	d0f6      	beq.n	9001db46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001db58:	f8d8 7000 	ldr.w	r7, [r8]
9001db5c:	fa1f f982 	uxth.w	r9, r2
9001db60:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
9001db64:	43d2      	mvns	r2, r2
9001db66:	f3c7 4507 	ubfx	r5, r7, #16, #8
9001db6a:	f3c7 2a07 	ubfx	sl, r7, #8, #8
9001db6e:	ea4f 262c 	mov.w	r6, ip, asr #8
9001db72:	fb15 f509 	smulbb	r5, r5, r9
9001db76:	b2d2      	uxtb	r2, r2
9001db78:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001db7c:	b2ff      	uxtb	r7, r7
9001db7e:	fb1a fa09 	smulbb	sl, sl, r9
9001db82:	fb06 5602 	mla	r6, r6, r2, r5
9001db86:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001db8a:	fb17 f709 	smulbb	r7, r7, r9
9001db8e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001db92:	b2b6      	uxth	r6, r6
9001db94:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001db98:	fa5f fc8c 	uxtb.w	ip, ip
9001db9c:	fb05 a502 	mla	r5, r5, r2, sl
9001dba0:	fb0c 7702 	mla	r7, ip, r2, r7
9001dba4:	1c72      	adds	r2, r6, #1
9001dba6:	b2ad      	uxth	r5, r5
9001dba8:	b2bf      	uxth	r7, r7
9001dbaa:	eb02 2616 	add.w	r6, r2, r6, lsr #8
9001dbae:	f107 0a01 	add.w	sl, r7, #1
9001dbb2:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9001dbb6:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
9001dbba:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
9001dbbe:	ea4a 0606 	orr.w	r6, sl, r6
9001dbc2:	f105 0a01 	add.w	sl, r5, #1
9001dbc6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
9001dbca:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
9001dbce:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
9001dbd2:	ea46 060a 	orr.w	r6, r6, sl
9001dbd6:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
9001dbda:	e7b4      	b.n	9001db46 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
9001dbdc:	b007      	add	sp, #28
9001dbde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001dbe2:	bf00      	nop
9001dbe4:	24026f94 	.word	0x24026f94

9001dbe8 <_ZN8touchgfx8LCD16bppD1Ev>:
9001dbe8:	4770      	bx	lr

9001dbea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
9001dbea:	4770      	bx	lr

9001dbec <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
9001dbec:	4770      	bx	lr

9001dbee <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
9001dbee:	4770      	bx	lr

9001dbf0 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
9001dbf0:	4770      	bx	lr

9001dbf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dbf2:	4770      	bx	lr

9001dbf4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dbf4:	4770      	bx	lr

9001dbf6 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dbf6:	4770      	bx	lr

9001dbf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dbf8:	4770      	bx	lr

9001dbfa <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dbfa:	4770      	bx	lr

9001dbfc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dbfc:	4770      	bx	lr

9001dbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dbfe:	4770      	bx	lr

9001dc00 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dc00:	4770      	bx	lr

9001dc02 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dc02:	4770      	bx	lr

9001dc04 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dc04:	4770      	bx	lr

9001dc06 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dc06:	4770      	bx	lr

9001dc08 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dc08:	4770      	bx	lr

9001dc0a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
9001dc0a:	4770      	bx	lr

9001dc0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
9001dc0c:	4770      	bx	lr

9001dc0e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
9001dc0e:	4770      	bx	lr

9001dc10 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
9001dc10:	4770      	bx	lr

9001dc12 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dc12:	4770      	bx	lr

9001dc14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
9001dc14:	4770      	bx	lr

9001dc16 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dc16:	4770      	bx	lr

9001dc18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
9001dc18:	4770      	bx	lr

9001dc1a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
9001dc1a:	4770      	bx	lr

9001dc1c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
9001dc1c:	4770      	bx	lr

9001dc1e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
9001dc1e:	4770      	bx	lr

9001dc20 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
9001dc20:	4770      	bx	lr

9001dc22 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
9001dc22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001dc26:	b088      	sub	sp, #32
9001dc28:	4606      	mov	r6, r0
9001dc2a:	4688      	mov	r8, r1
9001dc2c:	4691      	mov	r9, r2
9001dc2e:	ac08      	add	r4, sp, #32
9001dc30:	f824 3d0c 	strh.w	r3, [r4, #-12]!
9001dc34:	4620      	mov	r0, r4
9001dc36:	f7fd fc67 	bl	9001b508 <_ZNK8touchgfx6Bitmap7getDataEv>
9001dc3a:	6833      	ldr	r3, [r6, #0]
9001dc3c:	4605      	mov	r5, r0
9001dc3e:	4620      	mov	r0, r4
9001dc40:	699f      	ldr	r7, [r3, #24]
9001dc42:	f7fd fb75 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001dc46:	4682      	mov	sl, r0
9001dc48:	4620      	mov	r0, r4
9001dc4a:	f7fd fba5 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001dc4e:	9500      	str	r5, [sp, #0]
9001dc50:	464b      	mov	r3, r9
9001dc52:	4642      	mov	r2, r8
9001dc54:	4631      	mov	r1, r6
9001dc56:	e9cd a001 	strd	sl, r0, [sp, #4]
9001dc5a:	a806      	add	r0, sp, #24
9001dc5c:	47b8      	blx	r7
9001dc5e:	4628      	mov	r0, r5
9001dc60:	b008      	add	sp, #32
9001dc62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

9001dc68 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
9001dc68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
9001dc6c:	2300      	movs	r3, #0
9001dc6e:	9300      	str	r3, [sp, #0]
9001dc70:	4b3d      	ldr	r3, [pc, #244]	; (9001dd68 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
9001dc72:	781b      	ldrb	r3, [r3, #0]
9001dc74:	2b00      	cmp	r3, #0
9001dc76:	d137      	bne.n	9001dce8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
9001dc78:	4a3c      	ldr	r2, [pc, #240]	; (9001dd6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001dc7a:	f9b2 2000 	ldrsh.w	r2, [r2]
9001dc7e:	f8ad 2004 	strh.w	r2, [sp, #4]
9001dc82:	2b00      	cmp	r3, #0
9001dc84:	d132      	bne.n	9001dcec <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
9001dc86:	4b3a      	ldr	r3, [pc, #232]	; (9001dd70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001dc88:	f9b3 3000 	ldrsh.w	r3, [r3]
9001dc8c:	ac02      	add	r4, sp, #8
9001dc8e:	6808      	ldr	r0, [r1, #0]
9001dc90:	f8ad 3006 	strh.w	r3, [sp, #6]
9001dc94:	ab02      	add	r3, sp, #8
9001dc96:	6849      	ldr	r1, [r1, #4]
9001dc98:	4d36      	ldr	r5, [pc, #216]	; (9001dd74 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
9001dc9a:	c303      	stmia	r3!, {r0, r1}
9001dc9c:	4669      	mov	r1, sp
9001dc9e:	4620      	mov	r0, r4
9001dca0:	f7fa f998 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001dca4:	4668      	mov	r0, sp
9001dca6:	f7fa f951 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dcaa:	f8bd 3008 	ldrh.w	r3, [sp, #8]
9001dcae:	f8bd 2000 	ldrh.w	r2, [sp]
9001dcb2:	462f      	mov	r7, r5
9001dcb4:	6828      	ldr	r0, [r5, #0]
9001dcb6:	4413      	add	r3, r2
9001dcb8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001dcbc:	f8ad 3008 	strh.w	r3, [sp, #8]
9001dcc0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
9001dcc4:	4413      	add	r3, r2
9001dcc6:	f8ad 300a 	strh.w	r3, [sp, #10]
9001dcca:	6803      	ldr	r3, [r0, #0]
9001dccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001dcce:	4798      	blx	r3
9001dcd0:	f010 0f01 	tst.w	r0, #1
9001dcd4:	d00c      	beq.n	9001dcf0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
9001dcd6:	6828      	ldr	r0, [r5, #0]
9001dcd8:	6803      	ldr	r3, [r0, #0]
9001dcda:	e894 0006 	ldmia.w	r4, {r1, r2}
9001dcde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
9001dce0:	4798      	blx	r3
9001dce2:	b004      	add	sp, #16
9001dce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001dce8:	4a21      	ldr	r2, [pc, #132]	; (9001dd70 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
9001dcea:	e7c6      	b.n	9001dc7a <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
9001dcec:	4b1f      	ldr	r3, [pc, #124]	; (9001dd6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001dcee:	e7cb      	b.n	9001dc88 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
9001dcf0:	6838      	ldr	r0, [r7, #0]
9001dcf2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
9001dcf6:	6803      	ldr	r3, [r0, #0]
9001dcf8:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
9001dcfc:	ea4f 0848 	mov.w	r8, r8, lsl #1
9001dd00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001dd02:	4798      	blx	r3
9001dd04:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
9001dd08:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001dd0c:	f8bd 6004 	ldrh.w	r6, [sp, #4]
9001dd10:	fb16 3602 	smlabb	r6, r6, r2, r3
9001dd14:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001dd18:	6838      	ldr	r0, [r7, #0]
9001dd1a:	6803      	ldr	r3, [r0, #0]
9001dd1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001dd1e:	4798      	blx	r3
9001dd20:	4a12      	ldr	r2, [pc, #72]	; (9001dd6c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
9001dd22:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
9001dd26:	8813      	ldrh	r3, [r2, #0]
9001dd28:	4691      	mov	r9, r2
9001dd2a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001dd2e:	435d      	muls	r5, r3
9001dd30:	fb03 1404 	mla	r4, r3, r4, r1
9001dd34:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001dd38:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001dd3c:	6838      	ldr	r0, [r7, #0]
9001dd3e:	42ac      	cmp	r4, r5
9001dd40:	6803      	ldr	r3, [r0, #0]
9001dd42:	d20e      	bcs.n	9001dd62 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
9001dd44:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
9001dd48:	4632      	mov	r2, r6
9001dd4a:	4643      	mov	r3, r8
9001dd4c:	4621      	mov	r1, r4
9001dd4e:	47d0      	blx	sl
9001dd50:	f8b9 3000 	ldrh.w	r3, [r9]
9001dd54:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001dd58:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
9001dd5c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001dd60:	e7ec      	b.n	9001dd3c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
9001dd62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001dd64:	4798      	blx	r3
9001dd66:	e7bc      	b.n	9001dce2 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
9001dd68:	24026f84 	.word	0x24026f84
9001dd6c:	24026f86 	.word	0x24026f86
9001dd70:	24026f88 	.word	0x24026f88
9001dd74:	24026f8c 	.word	0x24026f8c

9001dd78 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
9001dd78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001dd7c:	b08b      	sub	sp, #44	; 0x2c
9001dd7e:	460f      	mov	r7, r1
9001dd80:	4616      	mov	r6, r2
9001dd82:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
9001dd86:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
9001dd8a:	f1bb 0f00 	cmp.w	fp, #0
9001dd8e:	d049      	beq.n	9001de24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001dd90:	6810      	ldr	r0, [r2, #0]
9001dd92:	ad06      	add	r5, sp, #24
9001dd94:	6851      	ldr	r1, [r2, #4]
9001dd96:	c503      	stmia	r5!, {r0, r1}
9001dd98:	6818      	ldr	r0, [r3, #0]
9001dd9a:	ad08      	add	r5, sp, #32
9001dd9c:	6859      	ldr	r1, [r3, #4]
9001dd9e:	c503      	stmia	r5!, {r0, r1}
9001dda0:	a806      	add	r0, sp, #24
9001dda2:	f7fa f8d3 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001dda6:	4631      	mov	r1, r6
9001dda8:	a808      	add	r0, sp, #32
9001ddaa:	f7fa f913 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ddae:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
9001ddb2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
9001ddb6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
9001ddba:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
9001ddbe:	fb16 2103 	smlabb	r1, r6, r3, r2
9001ddc2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
9001ddc6:	eb07 0641 	add.w	r6, r7, r1, lsl #1
9001ddca:	f8bd 1018 	ldrh.w	r1, [sp, #24]
9001ddce:	4f5f      	ldr	r7, [pc, #380]	; (9001df4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001ddd0:	440a      	add	r2, r1
9001ddd2:	6838      	ldr	r0, [r7, #0]
9001ddd4:	46b9      	mov	r9, r7
9001ddd6:	f8ad 2020 	strh.w	r2, [sp, #32]
9001ddda:	f8bd 201a 	ldrh.w	r2, [sp, #26]
9001ddde:	4413      	add	r3, r2
9001dde0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
9001dde4:	6803      	ldr	r3, [r0, #0]
9001dde6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001dde8:	4798      	blx	r3
9001ddea:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001ddee:	d01c      	beq.n	9001de2a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
9001ddf0:	f010 0f04 	tst.w	r0, #4
9001ddf4:	d01d      	beq.n	9001de32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001ddf6:	f8d9 0000 	ldr.w	r0, [r9]
9001ddfa:	2700      	movs	r7, #0
9001ddfc:	b2ad      	uxth	r5, r5
9001ddfe:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
9001de02:	6801      	ldr	r1, [r0, #0]
9001de04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
9001de08:	f8cd b00c 	str.w	fp, [sp, #12]
9001de0c:	9501      	str	r5, [sp, #4]
9001de0e:	e9cd 4704 	strd	r4, r7, [sp, #16]
9001de12:	f8bd 401c 	ldrh.w	r4, [sp, #28]
9001de16:	9402      	str	r4, [sp, #8]
9001de18:	fa1f f488 	uxth.w	r4, r8
9001de1c:	9400      	str	r4, [sp, #0]
9001de1e:	6c4c      	ldr	r4, [r1, #68]	; 0x44
9001de20:	4631      	mov	r1, r6
9001de22:	47a0      	blx	r4
9001de24:	b00b      	add	sp, #44	; 0x2c
9001de26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001de2a:	b914      	cbnz	r4, 9001de32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
9001de2c:	f010 0f01 	tst.w	r0, #1
9001de30:	e7e0      	b.n	9001ddf4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
9001de32:	f8d9 0000 	ldr.w	r0, [r9]
9001de36:	ea4f 0748 	mov.w	r7, r8, lsl #1
9001de3a:	6803      	ldr	r3, [r0, #0]
9001de3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001de3e:	4798      	blx	r3
9001de40:	4b43      	ldr	r3, [pc, #268]	; (9001df50 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
9001de42:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
9001de46:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
9001de4a:	881a      	ldrh	r2, [r3, #0]
9001de4c:	469a      	mov	sl, r3
9001de4e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
9001de52:	fb05 f502 	mul.w	r5, r5, r2
9001de56:	fb02 1404 	mla	r4, r2, r4, r1
9001de5a:	eb00 0444 	add.w	r4, r0, r4, lsl #1
9001de5e:	d059      	beq.n	9001df14 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
9001de60:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
9001de64:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001de68:	fa1f f28b 	uxth.w	r2, fp
9001de6c:	469e      	mov	lr, r3
9001de6e:	fa1f f989 	uxth.w	r9, r9
9001de72:	42ac      	cmp	r4, r5
9001de74:	d264      	bcs.n	9001df40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001de76:	eb04 0a07 	add.w	sl, r4, r7
9001de7a:	4554      	cmp	r4, sl
9001de7c:	d23d      	bcs.n	9001defa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
9001de7e:	8821      	ldrh	r1, [r4, #0]
9001de80:	f836 3b02 	ldrh.w	r3, [r6], #2
9001de84:	1208      	asrs	r0, r1, #8
9001de86:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001de8a:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001de8e:	ea4f 0be1 	mov.w	fp, r1, asr #3
9001de92:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001de96:	00c9      	lsls	r1, r1, #3
9001de98:	fb10 f009 	smulbb	r0, r0, r9
9001de9c:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9001dea0:	b2c9      	uxtb	r1, r1
9001dea2:	fb0c 0c02 	mla	ip, ip, r2, r0
9001dea6:	10d8      	asrs	r0, r3, #3
9001dea8:	fb1b fb09 	smulbb	fp, fp, r9
9001deac:	00db      	lsls	r3, r3, #3
9001deae:	fa1f fc8c 	uxth.w	ip, ip
9001deb2:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9001deb6:	fb11 f109 	smulbb	r1, r1, r9
9001deba:	b2db      	uxtb	r3, r3
9001debc:	fb00 b002 	mla	r0, r0, r2, fp
9001dec0:	f10c 0b01 	add.w	fp, ip, #1
9001dec4:	fb03 1302 	mla	r3, r3, r2, r1
9001dec8:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
9001decc:	b29b      	uxth	r3, r3
9001dece:	b280      	uxth	r0, r0
9001ded0:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
9001ded4:	f103 0c01 	add.w	ip, r3, #1
9001ded8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001dedc:	1c43      	adds	r3, r0, #1
9001dede:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001dee2:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001dee6:	0940      	lsrs	r0, r0, #5
9001dee8:	ea4c 0c0b 	orr.w	ip, ip, fp
9001deec:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9001def0:	ea4c 0c00 	orr.w	ip, ip, r0
9001def4:	f824 cb02 	strh.w	ip, [r4], #2
9001def8:	e7bf      	b.n	9001de7a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
9001defa:	f8be 3000 	ldrh.w	r3, [lr]
9001defe:	eba3 0308 	sub.w	r3, r3, r8
9001df02:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001df06:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001df0a:	eba3 0308 	sub.w	r3, r3, r8
9001df0e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001df12:	e7ae      	b.n	9001de72 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
9001df14:	eb04 0545 	add.w	r5, r4, r5, lsl #1
9001df18:	f8d9 0000 	ldr.w	r0, [r9]
9001df1c:	42ac      	cmp	r4, r5
9001df1e:	6803      	ldr	r3, [r0, #0]
9001df20:	d20e      	bcs.n	9001df40 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
9001df22:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
9001df26:	4632      	mov	r2, r6
9001df28:	463b      	mov	r3, r7
9001df2a:	4621      	mov	r1, r4
9001df2c:	47c0      	blx	r8
9001df2e:	f8ba 3000 	ldrh.w	r3, [sl]
9001df32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
9001df36:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
9001df3a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
9001df3e:	e7eb      	b.n	9001df18 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
9001df40:	4b02      	ldr	r3, [pc, #8]	; (9001df4c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
9001df42:	6818      	ldr	r0, [r3, #0]
9001df44:	6803      	ldr	r3, [r0, #0]
9001df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001df48:	4798      	blx	r3
9001df4a:	e76b      	b.n	9001de24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
9001df4c:	24026f8c 	.word	0x24026f8c
9001df50:	24026f86 	.word	0x24026f86

9001df54 <_ZN8touchgfx8LCD16bppD0Ev>:
9001df54:	b510      	push	{r4, lr}
9001df56:	4604      	mov	r4, r0
9001df58:	2178      	movs	r1, #120	; 0x78
9001df5a:	f008 ffca 	bl	90026ef2 <_ZdlPvj>
9001df5e:	4620      	mov	r0, r4
9001df60:	bd10      	pop	{r4, pc}

9001df62 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001df62:	b510      	push	{r4, lr}
9001df64:	4604      	mov	r4, r0
9001df66:	2104      	movs	r1, #4
9001df68:	f008 ffc3 	bl	90026ef2 <_ZdlPvj>
9001df6c:	4620      	mov	r0, r4
9001df6e:	bd10      	pop	{r4, pc}

9001df70 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001df70:	b510      	push	{r4, lr}
9001df72:	4604      	mov	r4, r0
9001df74:	2104      	movs	r1, #4
9001df76:	f008 ffbc 	bl	90026ef2 <_ZdlPvj>
9001df7a:	4620      	mov	r0, r4
9001df7c:	bd10      	pop	{r4, pc}

9001df7e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001df7e:	b510      	push	{r4, lr}
9001df80:	4604      	mov	r4, r0
9001df82:	2104      	movs	r1, #4
9001df84:	f008 ffb5 	bl	90026ef2 <_ZdlPvj>
9001df88:	4620      	mov	r0, r4
9001df8a:	bd10      	pop	{r4, pc}

9001df8c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001df8c:	b510      	push	{r4, lr}
9001df8e:	4604      	mov	r4, r0
9001df90:	2104      	movs	r1, #4
9001df92:	f008 ffae 	bl	90026ef2 <_ZdlPvj>
9001df96:	4620      	mov	r0, r4
9001df98:	bd10      	pop	{r4, pc}

9001df9a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001df9a:	b510      	push	{r4, lr}
9001df9c:	4604      	mov	r4, r0
9001df9e:	2104      	movs	r1, #4
9001dfa0:	f008 ffa7 	bl	90026ef2 <_ZdlPvj>
9001dfa4:	4620      	mov	r0, r4
9001dfa6:	bd10      	pop	{r4, pc}

9001dfa8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
9001dfa8:	b510      	push	{r4, lr}
9001dfaa:	4604      	mov	r4, r0
9001dfac:	2104      	movs	r1, #4
9001dfae:	f008 ffa0 	bl	90026ef2 <_ZdlPvj>
9001dfb2:	4620      	mov	r0, r4
9001dfb4:	bd10      	pop	{r4, pc}

9001dfb6 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
9001dfb6:	b510      	push	{r4, lr}
9001dfb8:	4604      	mov	r4, r0
9001dfba:	2104      	movs	r1, #4
9001dfbc:	f008 ff99 	bl	90026ef2 <_ZdlPvj>
9001dfc0:	4620      	mov	r0, r4
9001dfc2:	bd10      	pop	{r4, pc}

9001dfc4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
9001dfc4:	b510      	push	{r4, lr}
9001dfc6:	4604      	mov	r4, r0
9001dfc8:	2104      	movs	r1, #4
9001dfca:	f008 ff92 	bl	90026ef2 <_ZdlPvj>
9001dfce:	4620      	mov	r0, r4
9001dfd0:	bd10      	pop	{r4, pc}

9001dfd2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001dfd2:	b510      	push	{r4, lr}
9001dfd4:	4604      	mov	r4, r0
9001dfd6:	2104      	movs	r1, #4
9001dfd8:	f008 ff8b 	bl	90026ef2 <_ZdlPvj>
9001dfdc:	4620      	mov	r0, r4
9001dfde:	bd10      	pop	{r4, pc}

9001dfe0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001dfe0:	b510      	push	{r4, lr}
9001dfe2:	4604      	mov	r4, r0
9001dfe4:	2104      	movs	r1, #4
9001dfe6:	f008 ff84 	bl	90026ef2 <_ZdlPvj>
9001dfea:	4620      	mov	r0, r4
9001dfec:	bd10      	pop	{r4, pc}

9001dfee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001dfee:	b510      	push	{r4, lr}
9001dff0:	4604      	mov	r4, r0
9001dff2:	2104      	movs	r1, #4
9001dff4:	f008 ff7d 	bl	90026ef2 <_ZdlPvj>
9001dff8:	4620      	mov	r0, r4
9001dffa:	bd10      	pop	{r4, pc}

9001dffc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001dffc:	b510      	push	{r4, lr}
9001dffe:	4604      	mov	r4, r0
9001e000:	2104      	movs	r1, #4
9001e002:	f008 ff76 	bl	90026ef2 <_ZdlPvj>
9001e006:	4620      	mov	r0, r4
9001e008:	bd10      	pop	{r4, pc}

9001e00a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
9001e00a:	b510      	push	{r4, lr}
9001e00c:	4604      	mov	r4, r0
9001e00e:	2104      	movs	r1, #4
9001e010:	f008 ff6f 	bl	90026ef2 <_ZdlPvj>
9001e014:	4620      	mov	r0, r4
9001e016:	bd10      	pop	{r4, pc}

9001e018 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
9001e018:	b510      	push	{r4, lr}
9001e01a:	4604      	mov	r4, r0
9001e01c:	2104      	movs	r1, #4
9001e01e:	f008 ff68 	bl	90026ef2 <_ZdlPvj>
9001e022:	4620      	mov	r0, r4
9001e024:	bd10      	pop	{r4, pc}

9001e026 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e026:	b510      	push	{r4, lr}
9001e028:	4604      	mov	r4, r0
9001e02a:	2104      	movs	r1, #4
9001e02c:	f008 ff61 	bl	90026ef2 <_ZdlPvj>
9001e030:	4620      	mov	r0, r4
9001e032:	bd10      	pop	{r4, pc}

9001e034 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e034:	b510      	push	{r4, lr}
9001e036:	4604      	mov	r4, r0
9001e038:	2104      	movs	r1, #4
9001e03a:	f008 ff5a 	bl	90026ef2 <_ZdlPvj>
9001e03e:	4620      	mov	r0, r4
9001e040:	bd10      	pop	{r4, pc}

9001e042 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
9001e042:	b510      	push	{r4, lr}
9001e044:	4604      	mov	r4, r0
9001e046:	2104      	movs	r1, #4
9001e048:	f008 ff53 	bl	90026ef2 <_ZdlPvj>
9001e04c:	4620      	mov	r0, r4
9001e04e:	bd10      	pop	{r4, pc}

9001e050 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
9001e050:	b510      	push	{r4, lr}
9001e052:	4604      	mov	r4, r0
9001e054:	2104      	movs	r1, #4
9001e056:	f008 ff4c 	bl	90026ef2 <_ZdlPvj>
9001e05a:	4620      	mov	r0, r4
9001e05c:	bd10      	pop	{r4, pc}

9001e05e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e05e:	b510      	push	{r4, lr}
9001e060:	4604      	mov	r4, r0
9001e062:	2104      	movs	r1, #4
9001e064:	f008 ff45 	bl	90026ef2 <_ZdlPvj>
9001e068:	4620      	mov	r0, r4
9001e06a:	bd10      	pop	{r4, pc}

9001e06c <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e06c:	b510      	push	{r4, lr}
9001e06e:	4604      	mov	r4, r0
9001e070:	2104      	movs	r1, #4
9001e072:	f008 ff3e 	bl	90026ef2 <_ZdlPvj>
9001e076:	4620      	mov	r0, r4
9001e078:	bd10      	pop	{r4, pc}

9001e07a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
9001e07a:	b510      	push	{r4, lr}
9001e07c:	4604      	mov	r4, r0
9001e07e:	2104      	movs	r1, #4
9001e080:	f008 ff37 	bl	90026ef2 <_ZdlPvj>
9001e084:	4620      	mov	r0, r4
9001e086:	bd10      	pop	{r4, pc}

9001e088 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
9001e088:	b510      	push	{r4, lr}
9001e08a:	4604      	mov	r4, r0
9001e08c:	2104      	movs	r1, #4
9001e08e:	f008 ff30 	bl	90026ef2 <_ZdlPvj>
9001e092:	4620      	mov	r0, r4
9001e094:	bd10      	pop	{r4, pc}

9001e096 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
9001e096:	b510      	push	{r4, lr}
9001e098:	4604      	mov	r4, r0
9001e09a:	2104      	movs	r1, #4
9001e09c:	f008 ff29 	bl	90026ef2 <_ZdlPvj>
9001e0a0:	4620      	mov	r0, r4
9001e0a2:	bd10      	pop	{r4, pc}

9001e0a4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
9001e0a4:	b510      	push	{r4, lr}
9001e0a6:	4604      	mov	r4, r0
9001e0a8:	2104      	movs	r1, #4
9001e0aa:	f008 ff22 	bl	90026ef2 <_ZdlPvj>
9001e0ae:	4620      	mov	r0, r4
9001e0b0:	bd10      	pop	{r4, pc}

9001e0b2 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
9001e0b2:	b510      	push	{r4, lr}
9001e0b4:	4604      	mov	r4, r0
9001e0b6:	2104      	movs	r1, #4
9001e0b8:	f008 ff1b 	bl	90026ef2 <_ZdlPvj>
9001e0bc:	4620      	mov	r0, r4
9001e0be:	bd10      	pop	{r4, pc}

9001e0c0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
9001e0c0:	b510      	push	{r4, lr}
9001e0c2:	4604      	mov	r4, r0
9001e0c4:	2104      	movs	r1, #4
9001e0c6:	f008 ff14 	bl	90026ef2 <_ZdlPvj>
9001e0ca:	4620      	mov	r0, r4
9001e0cc:	bd10      	pop	{r4, pc}

9001e0ce <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
9001e0ce:	b510      	push	{r4, lr}
9001e0d0:	4604      	mov	r4, r0
9001e0d2:	2104      	movs	r1, #4
9001e0d4:	f008 ff0d 	bl	90026ef2 <_ZdlPvj>
9001e0d8:	4620      	mov	r0, r4
9001e0da:	bd10      	pop	{r4, pc}

9001e0dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
9001e0dc:	b510      	push	{r4, lr}
9001e0de:	4604      	mov	r4, r0
9001e0e0:	2104      	movs	r1, #4
9001e0e2:	f008 ff06 	bl	90026ef2 <_ZdlPvj>
9001e0e6:	4620      	mov	r0, r4
9001e0e8:	bd10      	pop	{r4, pc}
	...

9001e0ec <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
9001e0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e0f0:	b091      	sub	sp, #68	; 0x44
9001e0f2:	469b      	mov	fp, r3
9001e0f4:	4616      	mov	r6, r2
9001e0f6:	f9b3 2000 	ldrsh.w	r2, [r3]
9001e0fa:	f10d 0828 	add.w	r8, sp, #40	; 0x28
9001e0fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
9001e102:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
9001e106:	4604      	mov	r4, r0
9001e108:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
9001e10c:	4640      	mov	r0, r8
9001e10e:	460d      	mov	r5, r1
9001e110:	4659      	mov	r1, fp
9001e112:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e116:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e11a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
9001e11e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
9001e122:	f7f6 fc4d 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
9001e126:	4631      	mov	r1, r6
9001e128:	4640      	mov	r0, r8
9001e12a:	f7f6 fc49 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
9001e12e:	4b74      	ldr	r3, [pc, #464]	; (9001e300 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
9001e130:	8818      	ldrh	r0, [r3, #0]
9001e132:	4b74      	ldr	r3, [pc, #464]	; (9001e304 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
9001e134:	b202      	sxth	r2, r0
9001e136:	8819      	ldrh	r1, [r3, #0]
9001e138:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e13c:	b20e      	sxth	r6, r1
9001e13e:	2b00      	cmp	r3, #0
9001e140:	da07      	bge.n	9001e152 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
9001e142:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
9001e146:	4463      	add	r3, ip
9001e148:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
9001e14c:	2300      	movs	r3, #0
9001e14e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
9001e152:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
9001e156:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e15a:	1ad2      	subs	r2, r2, r3
9001e15c:	4594      	cmp	ip, r2
9001e15e:	bfc4      	itt	gt
9001e160:	1ac2      	subgt	r2, r0, r3
9001e162:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
9001e166:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e16a:	2a00      	cmp	r2, #0
9001e16c:	da07      	bge.n	9001e17e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
9001e16e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
9001e172:	4462      	add	r2, ip
9001e174:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
9001e178:	2200      	movs	r2, #0
9001e17a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
9001e17e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
9001e182:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e186:	eba6 060a 	sub.w	r6, r6, sl
9001e18a:	42b2      	cmp	r2, r6
9001e18c:	bfc4      	itt	gt
9001e18e:	eba1 020a 	subgt.w	r2, r1, sl
9001e192:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
9001e196:	4a5c      	ldr	r2, [pc, #368]	; (9001e308 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
9001e198:	7812      	ldrb	r2, [r2, #0]
9001e19a:	b9a2      	cbnz	r2, 9001e1c6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
9001e19c:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
9001e1a0:	4286      	cmp	r6, r0
9001e1a2:	4640      	mov	r0, r8
9001e1a4:	9303      	str	r3, [sp, #12]
9001e1a6:	bf14      	ite	ne
9001e1a8:	2600      	movne	r6, #0
9001e1aa:	2601      	moveq	r6, #1
9001e1ac:	f7f6 fc4b 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
9001e1b0:	9b03      	ldr	r3, [sp, #12]
9001e1b2:	b160      	cbz	r0, 9001e1ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
9001e1b4:	2300      	movs	r3, #0
9001e1b6:	8023      	strh	r3, [r4, #0]
9001e1b8:	8063      	strh	r3, [r4, #2]
9001e1ba:	80a3      	strh	r3, [r4, #4]
9001e1bc:	4620      	mov	r0, r4
9001e1be:	80e3      	strh	r3, [r4, #6]
9001e1c0:	b011      	add	sp, #68	; 0x44
9001e1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e1c6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e1ca:	428e      	cmp	r6, r1
9001e1cc:	e7e9      	b.n	9001e1a2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
9001e1ce:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
9001e1d2:	a90e      	add	r1, sp, #56	; 0x38
9001e1d4:	900e      	str	r0, [sp, #56]	; 0x38
9001e1d6:	a80c      	add	r0, sp, #48	; 0x30
9001e1d8:	9205      	str	r2, [sp, #20]
9001e1da:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
9001e1de:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
9001e1e2:	9206      	str	r2, [sp, #24]
9001e1e4:	f8bb 2000 	ldrh.w	r2, [fp]
9001e1e8:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
9001e1ec:	1a9b      	subs	r3, r3, r2
9001e1ee:	b21b      	sxth	r3, r3
9001e1f0:	9303      	str	r3, [sp, #12]
9001e1f2:	f8bb 3002 	ldrh.w	r3, [fp, #2]
9001e1f6:	f8df b118 	ldr.w	fp, [pc, #280]	; 9001e310 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e1fa:	ebaa 0a03 	sub.w	sl, sl, r3
9001e1fe:	fa0f f38a 	sxth.w	r3, sl
9001e202:	9304      	str	r3, [sp, #16]
9001e204:	9b03      	ldr	r3, [sp, #12]
9001e206:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
9001e20a:	9b04      	ldr	r3, [sp, #16]
9001e20c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e210:	9b05      	ldr	r3, [sp, #20]
9001e212:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
9001e216:	9b06      	ldr	r3, [sp, #24]
9001e218:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
9001e21c:	f7f9 feda 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e220:	4640      	mov	r0, r8
9001e222:	f7f9 fe93 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e226:	a80e      	add	r0, sp, #56	; 0x38
9001e228:	f7f9 fe90 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e22c:	4b37      	ldr	r3, [pc, #220]	; (9001e30c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
9001e22e:	4628      	mov	r0, r5
9001e230:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
9001e234:	881b      	ldrh	r3, [r3, #0]
9001e236:	9307      	str	r3, [sp, #28]
9001e238:	682b      	ldr	r3, [r5, #0]
9001e23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e23c:	4798      	blx	r3
9001e23e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
9001e242:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
9001e246:	4681      	mov	r9, r0
9001e248:	f8db 0000 	ldr.w	r0, [fp]
9001e24c:	fb1a 3305 	smlabb	r3, sl, r5, r3
9001e250:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9001e252:	eb05 0543 	add.w	r5, r5, r3, lsl #1
9001e256:	6803      	ldr	r3, [r0, #0]
9001e258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
9001e25a:	4798      	blx	r3
9001e25c:	4607      	mov	r7, r0
9001e25e:	f8db 0000 	ldr.w	r0, [fp]
9001e262:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
9001e266:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e26a:	6803      	ldr	r3, [r0, #0]
9001e26c:	9109      	str	r1, [sp, #36]	; 0x24
9001e26e:	9208      	str	r2, [sp, #32]
9001e270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e272:	4798      	blx	r3
9001e274:	f010 0f01 	tst.w	r0, #1
9001e278:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9001e27c:	d012      	beq.n	9001e2a4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
9001e27e:	f8db 0000 	ldr.w	r0, [fp]
9001e282:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
9001e286:	6803      	ldr	r3, [r0, #0]
9001e288:	9200      	str	r2, [sp, #0]
9001e28a:	6ede      	ldr	r6, [r3, #108]	; 0x6c
9001e28c:	462b      	mov	r3, r5
9001e28e:	e898 0006 	ldmia.w	r8, {r1, r2}
9001e292:	47b0      	blx	r6
9001e294:	9b03      	ldr	r3, [sp, #12]
9001e296:	8023      	strh	r3, [r4, #0]
9001e298:	9b04      	ldr	r3, [sp, #16]
9001e29a:	8063      	strh	r3, [r4, #2]
9001e29c:	9b05      	ldr	r3, [sp, #20]
9001e29e:	80a3      	strh	r3, [r4, #4]
9001e2a0:	9b06      	ldr	r3, [sp, #24]
9001e2a2:	e78b      	b.n	9001e1bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
9001e2a4:	fb09 f202 	mul.w	r2, r9, r2
9001e2a8:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
9001e2ac:	eb02 0141 	add.w	r1, r2, r1, lsl #1
9001e2b0:	440f      	add	r7, r1
9001e2b2:	b166      	cbz	r6, 9001e2ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e2b4:	9a07      	ldr	r2, [sp, #28]
9001e2b6:	4592      	cmp	sl, r2
9001e2b8:	d109      	bne.n	9001e2ce <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
9001e2ba:	f8db 0000 	ldr.w	r0, [fp]
9001e2be:	fb09 f303 	mul.w	r3, r9, r3
9001e2c2:	4629      	mov	r1, r5
9001e2c4:	6802      	ldr	r2, [r0, #0]
9001e2c6:	6b56      	ldr	r6, [r2, #52]	; 0x34
9001e2c8:	463a      	mov	r2, r7
9001e2ca:	47b0      	blx	r6
9001e2cc:	e7e2      	b.n	9001e294 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e2ce:	fb0a f303 	mul.w	r3, sl, r3
9001e2d2:	ea4f 064a 	mov.w	r6, sl, lsl #1
9001e2d6:	f8df b038 	ldr.w	fp, [pc, #56]	; 9001e310 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
9001e2da:	eb05 0843 	add.w	r8, r5, r3, lsl #1
9001e2de:	4545      	cmp	r5, r8
9001e2e0:	d2d8      	bcs.n	9001e294 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
9001e2e2:	f8db 0000 	ldr.w	r0, [fp]
9001e2e6:	4629      	mov	r1, r5
9001e2e8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001e2ec:	4435      	add	r5, r6
9001e2ee:	6802      	ldr	r2, [r0, #0]
9001e2f0:	005b      	lsls	r3, r3, #1
9001e2f2:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
9001e2f6:	463a      	mov	r2, r7
9001e2f8:	47d0      	blx	sl
9001e2fa:	444f      	add	r7, r9
9001e2fc:	e7ef      	b.n	9001e2de <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
9001e2fe:	bf00      	nop
9001e300:	24026f80 	.word	0x24026f80
9001e304:	24026f82 	.word	0x24026f82
9001e308:	24026f84 	.word	0x24026f84
9001e30c:	24026f86 	.word	0x24026f86
9001e310:	24026f8c 	.word	0x24026f8c

9001e314 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
9001e314:	b5f0      	push	{r4, r5, r6, r7, lr}
9001e316:	4606      	mov	r6, r0
9001e318:	b087      	sub	sp, #28
9001e31a:	460c      	mov	r4, r1
9001e31c:	4617      	mov	r7, r2
9001e31e:	461d      	mov	r5, r3
9001e320:	b333      	cbz	r3, 9001e370 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e322:	4608      	mov	r0, r1
9001e324:	f7f6 fb8f 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
9001e328:	bb10      	cbnz	r0, 9001e370 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e32a:	6820      	ldr	r0, [r4, #0]
9001e32c:	ab04      	add	r3, sp, #16
9001e32e:	6861      	ldr	r1, [r4, #4]
9001e330:	4c1b      	ldr	r4, [pc, #108]	; (9001e3a0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
9001e332:	c303      	stmia	r3!, {r0, r1}
9001e334:	a804      	add	r0, sp, #16
9001e336:	f7f9 fe09 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e33a:	6820      	ldr	r0, [r4, #0]
9001e33c:	6803      	ldr	r3, [r0, #0]
9001e33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e340:	4798      	blx	r3
9001e342:	2dff      	cmp	r5, #255	; 0xff
9001e344:	d016      	beq.n	9001e374 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
9001e346:	f010 0f08 	tst.w	r0, #8
9001e34a:	6820      	ldr	r0, [r4, #0]
9001e34c:	d015      	beq.n	9001e37a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
9001e34e:	2400      	movs	r4, #0
9001e350:	6801      	ldr	r1, [r0, #0]
9001e352:	f8bd 3012 	ldrh.w	r3, [sp, #18]
9001e356:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001e35a:	e9cd 5402 	strd	r5, r4, [sp, #8]
9001e35e:	f8bd 4016 	ldrh.w	r4, [sp, #22]
9001e362:	9401      	str	r4, [sp, #4]
9001e364:	f8bd 4014 	ldrh.w	r4, [sp, #20]
9001e368:	9400      	str	r4, [sp, #0]
9001e36a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
9001e36c:	4639      	mov	r1, r7
9001e36e:	47a0      	blx	r4
9001e370:	b007      	add	sp, #28
9001e372:	bdf0      	pop	{r4, r5, r6, r7, pc}
9001e374:	f010 0f02 	tst.w	r0, #2
9001e378:	e7e7      	b.n	9001e34a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
9001e37a:	6803      	ldr	r3, [r0, #0]
9001e37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e37e:	4798      	blx	r3
9001e380:	4b08      	ldr	r3, [pc, #32]	; (9001e3a4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
9001e382:	4601      	mov	r1, r0
9001e384:	4630      	mov	r0, r6
9001e386:	881a      	ldrh	r2, [r3, #0]
9001e388:	6833      	ldr	r3, [r6, #0]
9001e38a:	e9cd 7500 	strd	r7, r5, [sp]
9001e38e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
9001e390:	ab04      	add	r3, sp, #16
9001e392:	47a8      	blx	r5
9001e394:	6820      	ldr	r0, [r4, #0]
9001e396:	6803      	ldr	r3, [r0, #0]
9001e398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e39a:	4798      	blx	r3
9001e39c:	e7e8      	b.n	9001e370 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
9001e39e:	bf00      	nop
9001e3a0:	24026f8c 	.word	0x24026f8c
9001e3a4:	24026f86 	.word	0x24026f86

9001e3a8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
9001e3a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e3ac:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
9001e3b0:	4688      	mov	r8, r1
9001e3b2:	4614      	mov	r4, r2
9001e3b4:	461d      	mov	r5, r3
9001e3b6:	9e08      	ldr	r6, [sp, #32]
9001e3b8:	2f00      	cmp	r7, #0
9001e3ba:	f000 80ab 	beq.w	9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e3be:	4618      	mov	r0, r3
9001e3c0:	f7f6 fb41 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
9001e3c4:	2800      	cmp	r0, #0
9001e3c6:	f040 80a5 	bne.w	9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e3ca:	f9b5 1000 	ldrsh.w	r1, [r5]
9001e3ce:	2fff      	cmp	r7, #255	; 0xff
9001e3d0:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
9001e3d4:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
9001e3d8:	fb04 1303 	mla	r3, r4, r3, r1
9001e3dc:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
9001e3e0:	eba4 0200 	sub.w	r2, r4, r0
9001e3e4:	eb08 0143 	add.w	r1, r8, r3, lsl #1
9001e3e8:	fb04 f505 	mul.w	r5, r4, r5
9001e3ec:	ea4f 2816 	mov.w	r8, r6, lsr #8
9001e3f0:	eb01 0545 	add.w	r5, r1, r5, lsl #1
9001e3f4:	d04a      	beq.n	9001e48c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe4>
9001e3f6:	b2bc      	uxth	r4, r7
9001e3f8:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
9001e3fc:	f3c6 4e07 	ubfx	lr, r6, #16, #8
9001e400:	fa5f f788 	uxtb.w	r7, r8
9001e404:	b2f3      	uxtb	r3, r6
9001e406:	0040      	lsls	r0, r0, #1
9001e408:	fb0e fe04 	mul.w	lr, lr, r4
9001e40c:	4367      	muls	r7, r4
9001e40e:	ea4f 0842 	mov.w	r8, r2, lsl #1
9001e412:	4363      	muls	r3, r4
9001e414:	fa1f fc8c 	uxth.w	ip, ip
9001e418:	42a9      	cmp	r1, r5
9001e41a:	d27b      	bcs.n	9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e41c:	eb01 0900 	add.w	r9, r1, r0
9001e420:	4549      	cmp	r1, r9
9001e422:	d231      	bcs.n	9001e488 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe0>
9001e424:	880a      	ldrh	r2, [r1, #0]
9001e426:	1214      	asrs	r4, r2, #8
9001e428:	10d6      	asrs	r6, r2, #3
9001e42a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9001e42e:	00d2      	lsls	r2, r2, #3
9001e430:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001e434:	b2d2      	uxtb	r2, r2
9001e436:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001e43a:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e43e:	fb14 f40c 	smulbb	r4, r4, ip
9001e442:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
9001e446:	fb12 f20c 	smulbb	r2, r2, ip
9001e44a:	fb16 f60c 	smulbb	r6, r6, ip
9001e44e:	4474      	add	r4, lr
9001e450:	441a      	add	r2, r3
9001e452:	b2a4      	uxth	r4, r4
9001e454:	443e      	add	r6, r7
9001e456:	b292      	uxth	r2, r2
9001e458:	f104 0a01 	add.w	sl, r4, #1
9001e45c:	b2b6      	uxth	r6, r6
9001e45e:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
9001e462:	f102 0a01 	add.w	sl, r2, #1
9001e466:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
9001e46a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9001e46e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e472:	4322      	orrs	r2, r4
9001e474:	1c74      	adds	r4, r6, #1
9001e476:	eb04 2616 	add.w	r6, r4, r6, lsr #8
9001e47a:	0976      	lsrs	r6, r6, #5
9001e47c:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001e480:	4332      	orrs	r2, r6
9001e482:	f821 2b02 	strh.w	r2, [r1], #2
9001e486:	e7cb      	b.n	9001e420 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x78>
9001e488:	4441      	add	r1, r8
9001e48a:	e7c5      	b.n	9001e418 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x70>
9001e48c:	0973      	lsrs	r3, r6, #5
9001e48e:	4f22      	ldr	r7, [pc, #136]	; (9001e518 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x170>)
9001e490:	f3c6 06c4 	ubfx	r6, r6, #3, #5
9001e494:	ea08 0707 	and.w	r7, r8, r7
9001e498:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e49c:	433b      	orrs	r3, r7
9001e49e:	07e7      	lsls	r7, r4, #31
9001e4a0:	ea43 0306 	orr.w	r3, r3, r6
9001e4a4:	b29b      	uxth	r3, r3
9001e4a6:	d50b      	bpl.n	9001e4c0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x118>
9001e4a8:	0040      	lsls	r0, r0, #1
9001e4aa:	0052      	lsls	r2, r2, #1
9001e4ac:	42a9      	cmp	r1, r5
9001e4ae:	d231      	bcs.n	9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e4b0:	180c      	adds	r4, r1, r0
9001e4b2:	42a1      	cmp	r1, r4
9001e4b4:	d202      	bcs.n	9001e4bc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
9001e4b6:	f821 3b02 	strh.w	r3, [r1], #2
9001e4ba:	e7fa      	b.n	9001e4b2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x10a>
9001e4bc:	4411      	add	r1, r2
9001e4be:	e7f5      	b.n	9001e4ac <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x104>
9001e4c0:	078e      	lsls	r6, r1, #30
9001e4c2:	d008      	beq.n	9001e4d6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12e>
9001e4c4:	0066      	lsls	r6, r4, #1
9001e4c6:	460a      	mov	r2, r1
9001e4c8:	42aa      	cmp	r2, r5
9001e4ca:	d202      	bcs.n	9001e4d2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
9001e4cc:	8013      	strh	r3, [r2, #0]
9001e4ce:	4432      	add	r2, r6
9001e4d0:	e7fa      	b.n	9001e4c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x120>
9001e4d2:	3102      	adds	r1, #2
9001e4d4:	3801      	subs	r0, #1
9001e4d6:	07c2      	lsls	r2, r0, #31
9001e4d8:	d50b      	bpl.n	9001e4f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x14a>
9001e4da:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
9001e4de:	0066      	lsls	r6, r4, #1
9001e4e0:	3a01      	subs	r2, #1
9001e4e2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
9001e4e6:	42aa      	cmp	r2, r5
9001e4e8:	d202      	bcs.n	9001e4f0 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x148>
9001e4ea:	8013      	strh	r3, [r2, #0]
9001e4ec:	4432      	add	r2, r6
9001e4ee:	e7fa      	b.n	9001e4e6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13e>
9001e4f0:	3801      	subs	r0, #1
9001e4f2:	b178      	cbz	r0, 9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e4f4:	1040      	asrs	r0, r0, #1
9001e4f6:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
9001e4fa:	0080      	lsls	r0, r0, #2
9001e4fc:	0064      	lsls	r4, r4, #1
9001e4fe:	42a9      	cmp	r1, r5
9001e500:	d208      	bcs.n	9001e514 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>
9001e502:	180e      	adds	r6, r1, r0
9001e504:	460a      	mov	r2, r1
9001e506:	42b2      	cmp	r2, r6
9001e508:	d202      	bcs.n	9001e510 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
9001e50a:	f842 3b04 	str.w	r3, [r2], #4
9001e50e:	e7fa      	b.n	9001e506 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15e>
9001e510:	4421      	add	r1, r4
9001e512:	e7f4      	b.n	9001e4fe <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x156>
9001e514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e518:	00fff800 	.word	0x00fff800

9001e51c <_ZN8touchgfx8LCD16bppC1Ev>:
9001e51c:	2200      	movs	r2, #0
9001e51e:	4910      	ldr	r1, [pc, #64]	; (9001e560 <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
9001e520:	6042      	str	r2, [r0, #4]
9001e522:	6001      	str	r1, [r0, #0]
9001e524:	e9c0 2202 	strd	r2, r2, [r0, #8]
9001e528:	e9c0 2204 	strd	r2, r2, [r0, #16]
9001e52c:	e9c0 2206 	strd	r2, r2, [r0, #24]
9001e530:	e9c0 2208 	strd	r2, r2, [r0, #32]
9001e534:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
9001e538:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
9001e53c:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
9001e540:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
9001e544:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
9001e548:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
9001e54c:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
9001e550:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
9001e554:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
9001e558:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
9001e55c:	4770      	bx	lr
9001e55e:	bf00      	nop
9001e560:	9002b830 	.word	0x9002b830

9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
9001e564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001e568:	b08d      	sub	sp, #52	; 0x34
9001e56a:	460d      	mov	r5, r1
9001e56c:	4604      	mov	r4, r0
9001e56e:	4699      	mov	r9, r3
9001e570:	6808      	ldr	r0, [r1, #0]
9001e572:	ab08      	add	r3, sp, #32
9001e574:	6849      	ldr	r1, [r1, #4]
9001e576:	c303      	stmia	r3!, {r0, r1}
9001e578:	6810      	ldr	r0, [r2, #0]
9001e57a:	ab0a      	add	r3, sp, #40	; 0x28
9001e57c:	6851      	ldr	r1, [r2, #4]
9001e57e:	c303      	stmia	r3!, {r0, r1}
9001e580:	a808      	add	r0, sp, #32
9001e582:	f7f9 fce3 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e586:	4629      	mov	r1, r5
9001e588:	a80a      	add	r0, sp, #40	; 0x28
9001e58a:	4d67      	ldr	r5, [pc, #412]	; (9001e728 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e58c:	f7f9 fd22 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e590:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
9001e594:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
9001e598:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
9001e59c:	6828      	ldr	r0, [r5, #0]
9001e59e:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e5a2:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
9001e5a6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
9001e5aa:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e5ae:	f8bd 1020 	ldrh.w	r1, [sp, #32]
9001e5b2:	440a      	add	r2, r1
9001e5b4:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
9001e5b8:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
9001e5bc:	4413      	add	r3, r2
9001e5be:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
9001e5c2:	6803      	ldr	r3, [r0, #0]
9001e5c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e5c6:	4798      	blx	r3
9001e5c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e5cc:	d119      	bne.n	9001e602 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
9001e5ce:	f010 0f20 	tst.w	r0, #32
9001e5d2:	6828      	ldr	r0, [r5, #0]
9001e5d4:	d018      	beq.n	9001e608 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
9001e5d6:	2500      	movs	r5, #0
9001e5d8:	6801      	ldr	r1, [r0, #0]
9001e5da:	b2b6      	uxth	r6, r6
9001e5dc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
9001e5e0:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
9001e5e4:	9601      	str	r6, [sp, #4]
9001e5e6:	e9cd 9503 	strd	r9, r5, [sp, #12]
9001e5ea:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
9001e5ee:	9502      	str	r5, [sp, #8]
9001e5f0:	fa1f f588 	uxth.w	r5, r8
9001e5f4:	9500      	str	r5, [sp, #0]
9001e5f6:	6d0d      	ldr	r5, [r1, #80]	; 0x50
9001e5f8:	4621      	mov	r1, r4
9001e5fa:	47a8      	blx	r5
9001e5fc:	b00d      	add	sp, #52	; 0x34
9001e5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001e602:	f010 0f40 	tst.w	r0, #64	; 0x40
9001e606:	e7e4      	b.n	9001e5d2 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
9001e608:	6803      	ldr	r3, [r0, #0]
9001e60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e60c:	4798      	blx	r3
9001e60e:	4947      	ldr	r1, [pc, #284]	; (9001e72c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
9001e610:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
9001e614:	880b      	ldrh	r3, [r1, #0]
9001e616:	468a      	mov	sl, r1
9001e618:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
9001e61c:	fb03 5202 	mla	r2, r3, r2, r5
9001e620:	4373      	muls	r3, r6
9001e622:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e626:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e62a:	9307      	str	r3, [sp, #28]
9001e62c:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001e630:	9306      	str	r3, [sp, #24]
9001e632:	9b07      	ldr	r3, [sp, #28]
9001e634:	4298      	cmp	r0, r3
9001e636:	d270      	bcs.n	9001e71a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
9001e638:	9b06      	ldr	r3, [sp, #24]
9001e63a:	4621      	mov	r1, r4
9001e63c:	eb00 0b03 	add.w	fp, r0, r3
9001e640:	4558      	cmp	r0, fp
9001e642:	d25d      	bcs.n	9001e700 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
9001e644:	f851 4b04 	ldr.w	r4, [r1], #4
9001e648:	0e23      	lsrs	r3, r4, #24
9001e64a:	d014      	beq.n	9001e676 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e64c:	2bff      	cmp	r3, #255	; 0xff
9001e64e:	ea4f 2c14 	mov.w	ip, r4, lsr #8
9001e652:	d112      	bne.n	9001e67a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e654:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9001e658:	d10f      	bne.n	9001e67a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
9001e65a:	0963      	lsrs	r3, r4, #5
9001e65c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9001e660:	f3c4 04c4 	ubfx	r4, r4, #3, #5
9001e664:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e668:	f02c 0c07 	bic.w	ip, ip, #7
9001e66c:	ea43 0c0c 	orr.w	ip, r3, ip
9001e670:	ea4c 0404 	orr.w	r4, ip, r4
9001e674:	8004      	strh	r4, [r0, #0]
9001e676:	3002      	adds	r0, #2
9001e678:	e7e2      	b.n	9001e640 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
9001e67a:	fb09 f303 	mul.w	r3, r9, r3
9001e67e:	8807      	ldrh	r7, [r0, #0]
9001e680:	f3c4 4e07 	ubfx	lr, r4, #16, #8
9001e684:	fa5f fc8c 	uxtb.w	ip, ip
9001e688:	1c5a      	adds	r2, r3, #1
9001e68a:	123e      	asrs	r6, r7, #8
9001e68c:	10fd      	asrs	r5, r7, #3
9001e68e:	eb02 2223 	add.w	r2, r2, r3, asr #8
9001e692:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001e696:	00ff      	lsls	r7, r7, #3
9001e698:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e69c:	1212      	asrs	r2, r2, #8
9001e69e:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001e6a2:	b293      	uxth	r3, r2
9001e6a4:	43d2      	mvns	r2, r2
9001e6a6:	b2ff      	uxtb	r7, r7
9001e6a8:	fb1e fe03 	smulbb	lr, lr, r3
9001e6ac:	b2d2      	uxtb	r2, r2
9001e6ae:	fb1c fc03 	smulbb	ip, ip, r3
9001e6b2:	b2e4      	uxtb	r4, r4
9001e6b4:	fb06 e602 	mla	r6, r6, r2, lr
9001e6b8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e6bc:	fb14 f403 	smulbb	r4, r4, r3
9001e6c0:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
9001e6c4:	b2b6      	uxth	r6, r6
9001e6c6:	fb05 c502 	mla	r5, r5, r2, ip
9001e6ca:	fb07 4702 	mla	r7, r7, r2, r4
9001e6ce:	f106 0e01 	add.w	lr, r6, #1
9001e6d2:	b2ad      	uxth	r5, r5
9001e6d4:	b2bf      	uxth	r7, r7
9001e6d6:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
9001e6da:	f105 0c01 	add.w	ip, r5, #1
9001e6de:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
9001e6e2:	1c7e      	adds	r6, r7, #1
9001e6e4:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001e6e8:	eb06 2617 	add.w	r6, r6, r7, lsr #8
9001e6ec:	096d      	lsrs	r5, r5, #5
9001e6ee:	f3c6 26c4 	ubfx	r6, r6, #11, #5
9001e6f2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e6f6:	ea46 060e 	orr.w	r6, r6, lr
9001e6fa:	432e      	orrs	r6, r5
9001e6fc:	8006      	strh	r6, [r0, #0]
9001e6fe:	e7ba      	b.n	9001e676 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
9001e700:	f8ba 3000 	ldrh.w	r3, [sl]
9001e704:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
9001e708:	eba3 0308 	sub.w	r3, r3, r8
9001e70c:	eba4 0408 	sub.w	r4, r4, r8
9001e710:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001e714:	eb01 0484 	add.w	r4, r1, r4, lsl #2
9001e718:	e78b      	b.n	9001e632 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
9001e71a:	4b03      	ldr	r3, [pc, #12]	; (9001e728 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
9001e71c:	6818      	ldr	r0, [r3, #0]
9001e71e:	6803      	ldr	r3, [r0, #0]
9001e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e722:	4798      	blx	r3
9001e724:	e76a      	b.n	9001e5fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
9001e726:	bf00      	nop
9001e728:	24026f8c 	.word	0x24026f8c
9001e72c:	24026f86 	.word	0x24026f86

9001e730 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
9001e730:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
9001e734:	b085      	sub	sp, #20
9001e736:	6810      	ldr	r0, [r2, #0]
9001e738:	460c      	mov	r4, r1
9001e73a:	6851      	ldr	r1, [r2, #4]
9001e73c:	466d      	mov	r5, sp
9001e73e:	4616      	mov	r6, r2
9001e740:	c503      	stmia	r5!, {r0, r1}
9001e742:	6818      	ldr	r0, [r3, #0]
9001e744:	6859      	ldr	r1, [r3, #4]
9001e746:	c503      	stmia	r5!, {r0, r1}
9001e748:	4668      	mov	r0, sp
9001e74a:	4d2e      	ldr	r5, [pc, #184]	; (9001e804 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
9001e74c:	f7f9 fbfe 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e750:	4631      	mov	r1, r6
9001e752:	a802      	add	r0, sp, #8
9001e754:	4e2c      	ldr	r6, [pc, #176]	; (9001e808 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
9001e756:	f7f9 fc3d 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e75a:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
9001e75e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
9001e762:	f8bd 1004 	ldrh.w	r1, [sp, #4]
9001e766:	6828      	ldr	r0, [r5, #0]
9001e768:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e76c:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
9001e770:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
9001e774:	eb04 0481 	add.w	r4, r4, r1, lsl #2
9001e778:	f8bd 1000 	ldrh.w	r1, [sp]
9001e77c:	440a      	add	r2, r1
9001e77e:	f8ad 2008 	strh.w	r2, [sp, #8]
9001e782:	f8bd 2002 	ldrh.w	r2, [sp, #2]
9001e786:	4413      	add	r3, r2
9001e788:	f8ad 300a 	strh.w	r3, [sp, #10]
9001e78c:	6803      	ldr	r3, [r0, #0]
9001e78e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e790:	4798      	blx	r3
9001e792:	8833      	ldrh	r3, [r6, #0]
9001e794:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
9001e798:	ea4f 0c47 	mov.w	ip, r7, lsl #1
9001e79c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
9001e7a0:	f8df e068 	ldr.w	lr, [pc, #104]	; 9001e80c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
9001e7a4:	fb03 1202 	mla	r2, r3, r2, r1
9001e7a8:	fb08 f303 	mul.w	r3, r8, r3
9001e7ac:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e7b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001e7b4:	4298      	cmp	r0, r3
9001e7b6:	d21d      	bcs.n	9001e7f4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
9001e7b8:	eb00 080c 	add.w	r8, r0, ip
9001e7bc:	4540      	cmp	r0, r8
9001e7be:	d20f      	bcs.n	9001e7e0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
9001e7c0:	f854 1b04 	ldr.w	r1, [r4], #4
9001e7c4:	ea4f 1951 	mov.w	r9, r1, lsr #5
9001e7c8:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
9001e7cc:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9001e7d0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001e7d4:	ea42 0209 	orr.w	r2, r2, r9
9001e7d8:	430a      	orrs	r2, r1
9001e7da:	f820 2b02 	strh.w	r2, [r0], #2
9001e7de:	e7ed      	b.n	9001e7bc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
9001e7e0:	8832      	ldrh	r2, [r6, #0]
9001e7e2:	1bd2      	subs	r2, r2, r7
9001e7e4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e7e8:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
9001e7ec:	1bd2      	subs	r2, r2, r7
9001e7ee:	eb04 0482 	add.w	r4, r4, r2, lsl #2
9001e7f2:	e7df      	b.n	9001e7b4 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
9001e7f4:	6828      	ldr	r0, [r5, #0]
9001e7f6:	6803      	ldr	r3, [r0, #0]
9001e7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e7fa:	4798      	blx	r3
9001e7fc:	b005      	add	sp, #20
9001e7fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
9001e802:	bf00      	nop
9001e804:	24026f8c 	.word	0x24026f8c
9001e808:	24026f86 	.word	0x24026f86
9001e80c:	fffff800 	.word	0xfffff800

9001e810 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
9001e810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9001e814:	b08e      	sub	sp, #56	; 0x38
9001e816:	460e      	mov	r6, r1
9001e818:	4604      	mov	r4, r0
9001e81a:	461d      	mov	r5, r3
9001e81c:	6808      	ldr	r0, [r1, #0]
9001e81e:	ab0a      	add	r3, sp, #40	; 0x28
9001e820:	6849      	ldr	r1, [r1, #4]
9001e822:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 9001e9f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
9001e826:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 9001e9fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
9001e82a:	c303      	stmia	r3!, {r0, r1}
9001e82c:	6810      	ldr	r0, [r2, #0]
9001e82e:	ab0c      	add	r3, sp, #48	; 0x30
9001e830:	6851      	ldr	r1, [r2, #4]
9001e832:	c303      	stmia	r3!, {r0, r1}
9001e834:	a80a      	add	r0, sp, #40	; 0x28
9001e836:	f7f9 fb89 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001e83a:	4631      	mov	r1, r6
9001e83c:	a80c      	add	r0, sp, #48	; 0x30
9001e83e:	f7f9 fbc9 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001e842:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
9001e846:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
9001e84a:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e84e:	f8d8 0000 	ldr.w	r0, [r8]
9001e852:	fb11 2103 	smlabb	r1, r1, r3, r2
9001e856:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
9001e85a:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
9001e85e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
9001e862:	440c      	add	r4, r1
9001e864:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
9001e868:	440a      	add	r2, r1
9001e86a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
9001e86e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
9001e872:	4413      	add	r3, r2
9001e874:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
9001e878:	6803      	ldr	r3, [r0, #0]
9001e87a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001e87c:	4798      	blx	r3
9001e87e:	2dff      	cmp	r5, #255	; 0xff
9001e880:	d124      	bne.n	9001e8cc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
9001e882:	f010 0f01 	tst.w	r0, #1
9001e886:	f8d8 0000 	ldr.w	r0, [r8]
9001e88a:	d022      	beq.n	9001e8d2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
9001e88c:	2100      	movs	r1, #0
9001e88e:	f04f 0e01 	mov.w	lr, #1
9001e892:	f8d0 c000 	ldr.w	ip, [r0]
9001e896:	b2b6      	uxth	r6, r6
9001e898:	f8cd e018 	str.w	lr, [sp, #24]
9001e89c:	b2bf      	uxth	r7, r7
9001e89e:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
9001e8a2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
9001e8a6:	e9cd 1107 	strd	r1, r1, [sp, #28]
9001e8aa:	f8b9 e000 	ldrh.w	lr, [r9]
9001e8ae:	9503      	str	r5, [sp, #12]
9001e8b0:	9601      	str	r6, [sp, #4]
9001e8b2:	9700      	str	r7, [sp, #0]
9001e8b4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
9001e8b8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
9001e8bc:	9102      	str	r1, [sp, #8]
9001e8be:	4621      	mov	r1, r4
9001e8c0:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
9001e8c4:	47a8      	blx	r5
9001e8c6:	b00e      	add	sp, #56	; 0x38
9001e8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9001e8cc:	f010 0f04 	tst.w	r0, #4
9001e8d0:	e7d9      	b.n	9001e886 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
9001e8d2:	6803      	ldr	r3, [r0, #0]
9001e8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001e8d6:	4798      	blx	r3
9001e8d8:	f8b9 3000 	ldrh.w	r3, [r9]
9001e8dc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
9001e8e0:	ea4f 0e47 	mov.w	lr, r7, lsl #1
9001e8e4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
9001e8e8:	435e      	muls	r6, r3
9001e8ea:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
9001e8ee:	2dff      	cmp	r5, #255	; 0xff
9001e8f0:	fb03 1202 	mla	r2, r3, r2, r1
9001e8f4:	ebac 0c07 	sub.w	ip, ip, r7
9001e8f8:	eba3 0707 	sub.w	r7, r3, r7
9001e8fc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001e900:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
9001e904:	eb00 0646 	add.w	r6, r0, r6, lsl #1
9001e908:	ea4f 0747 	mov.w	r7, r7, lsl #1
9001e90c:	d049      	beq.n	9001e9a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
9001e90e:	43eb      	mvns	r3, r5
9001e910:	fa1f f985 	uxth.w	r9, r5
9001e914:	b2db      	uxtb	r3, r3
9001e916:	42b0      	cmp	r0, r6
9001e918:	d266      	bcs.n	9001e9e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e91a:	eb00 0a0e 	add.w	sl, r0, lr
9001e91e:	4550      	cmp	r0, sl
9001e920:	4621      	mov	r1, r4
9001e922:	f104 0403 	add.w	r4, r4, #3
9001e926:	d25b      	bcs.n	9001e9e0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
9001e928:	8802      	ldrh	r2, [r0, #0]
9001e92a:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e92e:	ea4f 2822 	mov.w	r8, r2, asr #8
9001e932:	fb11 f109 	smulbb	r1, r1, r9
9001e936:	10d5      	asrs	r5, r2, #3
9001e938:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
9001e93c:	00d2      	lsls	r2, r2, #3
9001e93e:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001e942:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
9001e946:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
9001e94a:	fb08 1803 	mla	r8, r8, r3, r1
9001e94e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
9001e952:	b2d2      	uxtb	r2, r2
9001e954:	fb11 f109 	smulbb	r1, r1, r9
9001e958:	fa1f f888 	uxth.w	r8, r8
9001e95c:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
9001e960:	fb05 1503 	mla	r5, r5, r3, r1
9001e964:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e968:	fb11 f109 	smulbb	r1, r1, r9
9001e96c:	b2ad      	uxth	r5, r5
9001e96e:	fb02 1203 	mla	r2, r2, r3, r1
9001e972:	f108 0101 	add.w	r1, r8, #1
9001e976:	b292      	uxth	r2, r2
9001e978:	eb01 2818 	add.w	r8, r1, r8, lsr #8
9001e97c:	1c51      	adds	r1, r2, #1
9001e97e:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
9001e982:	eb01 2212 	add.w	r2, r1, r2, lsr #8
9001e986:	1c69      	adds	r1, r5, #1
9001e988:	eb01 2515 	add.w	r5, r1, r5, lsr #8
9001e98c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
9001e990:	096d      	lsrs	r5, r5, #5
9001e992:	ea42 0208 	orr.w	r2, r2, r8
9001e996:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001e99a:	432a      	orrs	r2, r5
9001e99c:	f820 2b02 	strh.w	r2, [r0], #2
9001e9a0:	e7bd      	b.n	9001e91e <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
9001e9a2:	4a14      	ldr	r2, [pc, #80]	; (9001e9f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
9001e9a4:	42b0      	cmp	r0, r6
9001e9a6:	d21f      	bcs.n	9001e9e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
9001e9a8:	eb00 050e 	add.w	r5, r0, lr
9001e9ac:	42a8      	cmp	r0, r5
9001e9ae:	4621      	mov	r1, r4
9001e9b0:	f104 0403 	add.w	r4, r4, #3
9001e9b4:	d210      	bcs.n	9001e9d8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
9001e9b6:	f814 3c02 	ldrb.w	r3, [r4, #-2]
9001e9ba:	f814 1c01 	ldrb.w	r1, [r4, #-1]
9001e9be:	00db      	lsls	r3, r3, #3
9001e9c0:	ea02 2101 	and.w	r1, r2, r1, lsl #8
9001e9c4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001e9c8:	430b      	orrs	r3, r1
9001e9ca:	f814 1c03 	ldrb.w	r1, [r4, #-3]
9001e9ce:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
9001e9d2:	f820 3b02 	strh.w	r3, [r0], #2
9001e9d6:	e7e9      	b.n	9001e9ac <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
9001e9d8:	4438      	add	r0, r7
9001e9da:	eb01 040c 	add.w	r4, r1, ip
9001e9de:	e7e1      	b.n	9001e9a4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
9001e9e0:	4438      	add	r0, r7
9001e9e2:	eb01 040c 	add.w	r4, r1, ip
9001e9e6:	e796      	b.n	9001e916 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
9001e9e8:	4b03      	ldr	r3, [pc, #12]	; (9001e9f8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
9001e9ea:	6818      	ldr	r0, [r3, #0]
9001e9ec:	6803      	ldr	r3, [r0, #0]
9001e9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001e9f0:	4798      	blx	r3
9001e9f2:	e768      	b.n	9001e8c6 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
9001e9f4:	fffff800 	.word	0xfffff800
9001e9f8:	24026f8c 	.word	0x24026f8c
9001e9fc:	24026f86 	.word	0x24026f86

9001ea00 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
9001ea00:	b4f0      	push	{r4, r5, r6, r7}
9001ea02:	4616      	mov	r6, r2
9001ea04:	461c      	mov	r4, r3
9001ea06:	460d      	mov	r5, r1
9001ea08:	9a04      	ldr	r2, [sp, #16]
9001ea0a:	2e01      	cmp	r6, #1
9001ea0c:	f89d 3014 	ldrb.w	r3, [sp, #20]
9001ea10:	f89d 7018 	ldrb.w	r7, [sp, #24]
9001ea14:	d012      	beq.n	9001ea3c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
9001ea16:	d303      	bcc.n	9001ea20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
9001ea18:	2e02      	cmp	r6, #2
9001ea1a:	d00a      	beq.n	9001ea32 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
9001ea1c:	bcf0      	pop	{r4, r5, r6, r7}
9001ea1e:	4770      	bx	lr
9001ea20:	6805      	ldr	r5, [r0, #0]
9001ea22:	e9cd 3704 	strd	r3, r7, [sp, #16]
9001ea26:	68ed      	ldr	r5, [r5, #12]
9001ea28:	4613      	mov	r3, r2
9001ea2a:	4622      	mov	r2, r4
9001ea2c:	46ac      	mov	ip, r5
9001ea2e:	bcf0      	pop	{r4, r5, r6, r7}
9001ea30:	4760      	bx	ip
9001ea32:	4621      	mov	r1, r4
9001ea34:	4628      	mov	r0, r5
9001ea36:	bcf0      	pop	{r4, r5, r6, r7}
9001ea38:	f7ff bd94 	b.w	9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001ea3c:	4621      	mov	r1, r4
9001ea3e:	4628      	mov	r0, r5
9001ea40:	bcf0      	pop	{r4, r5, r6, r7}
9001ea42:	f7ff bee5 	b.w	9001e810 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

9001ea48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
9001ea48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ea4c:	b093      	sub	sp, #76	; 0x4c
9001ea4e:	4681      	mov	r9, r0
9001ea50:	4688      	mov	r8, r1
9001ea52:	6810      	ldr	r0, [r2, #0]
9001ea54:	6851      	ldr	r1, [r2, #4]
9001ea56:	ac0e      	add	r4, sp, #56	; 0x38
9001ea58:	4616      	mov	r6, r2
9001ea5a:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
9001ea5e:	4f6b      	ldr	r7, [pc, #428]	; (9001ec0c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
9001ea60:	c403      	stmia	r4!, {r0, r1}
9001ea62:	6818      	ldr	r0, [r3, #0]
9001ea64:	ac10      	add	r4, sp, #64	; 0x40
9001ea66:	6859      	ldr	r1, [r3, #4]
9001ea68:	c403      	stmia	r4!, {r0, r1}
9001ea6a:	a80e      	add	r0, sp, #56	; 0x38
9001ea6c:	f7f9 fa6e 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ea70:	4631      	mov	r1, r6
9001ea72:	a810      	add	r0, sp, #64	; 0x40
9001ea74:	4e66      	ldr	r6, [pc, #408]	; (9001ec10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ea76:	f7f9 faad 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ea7a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
9001ea7e:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
9001ea82:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
9001ea86:	6830      	ldr	r0, [r6, #0]
9001ea88:	fb11 2103 	smlabb	r1, r1, r3, r2
9001ea8c:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
9001ea90:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
9001ea94:	4489      	add	r9, r1
9001ea96:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
9001ea9a:	440a      	add	r2, r1
9001ea9c:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
9001eaa0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001eaa4:	4413      	add	r3, r2
9001eaa6:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
9001eaaa:	6803      	ldr	r3, [r0, #0]
9001eaac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001eaae:	4798      	blx	r3
9001eab0:	f010 0f80 	tst.w	r0, #128	; 0x80
9001eab4:	6830      	ldr	r0, [r6, #0]
9001eab6:	d01d      	beq.n	9001eaf4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
9001eab8:	2200      	movs	r2, #0
9001eaba:	6801      	ldr	r1, [r0, #0]
9001eabc:	b2a4      	uxth	r4, r4
9001eabe:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
9001eac2:	b2ad      	uxth	r5, r5
9001eac4:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001eac8:	220b      	movs	r2, #11
9001eaca:	9207      	str	r2, [sp, #28]
9001eacc:	883a      	ldrh	r2, [r7, #0]
9001eace:	9502      	str	r5, [sp, #8]
9001ead0:	9206      	str	r2, [sp, #24]
9001ead2:	2201      	movs	r2, #1
9001ead4:	9401      	str	r4, [sp, #4]
9001ead6:	e9cd a204 	strd	sl, r2, [sp, #16]
9001eada:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
9001eade:	9203      	str	r2, [sp, #12]
9001eae0:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
9001eae4:	9200      	str	r2, [sp, #0]
9001eae6:	4642      	mov	r2, r8
9001eae8:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
9001eaea:	4649      	mov	r1, r9
9001eaec:	47a0      	blx	r4
9001eaee:	b013      	add	sp, #76	; 0x4c
9001eaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eaf4:	6803      	ldr	r3, [r0, #0]
9001eaf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001eaf8:	4798      	blx	r3
9001eafa:	883b      	ldrh	r3, [r7, #0]
9001eafc:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
9001eb00:	f04f 0e04 	mov.w	lr, #4
9001eb04:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
9001eb08:	435d      	muls	r5, r3
9001eb0a:	fb03 1202 	mla	r2, r3, r2, r1
9001eb0e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
9001eb12:	eb00 0245 	add.w	r2, r0, r5, lsl #1
9001eb16:	920c      	str	r2, [sp, #48]	; 0x30
9001eb18:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
9001eb1c:	1b12      	subs	r2, r2, r4
9001eb1e:	920d      	str	r2, [sp, #52]	; 0x34
9001eb20:	0062      	lsls	r2, r4, #1
9001eb22:	1b1c      	subs	r4, r3, r4
9001eb24:	920a      	str	r2, [sp, #40]	; 0x28
9001eb26:	0063      	lsls	r3, r4, #1
9001eb28:	930b      	str	r3, [sp, #44]	; 0x2c
9001eb2a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9001eb2c:	4298      	cmp	r0, r3
9001eb2e:	d266      	bcs.n	9001ebfe <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
9001eb30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001eb32:	eb00 0b03 	add.w	fp, r0, r3
9001eb36:	4558      	cmp	r0, fp
9001eb38:	d25c      	bcs.n	9001ebf4 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
9001eb3a:	f819 3b01 	ldrb.w	r3, [r9], #1
9001eb3e:	fb1e e303 	smlabb	r3, lr, r3, lr
9001eb42:	f858 2003 	ldr.w	r2, [r8, r3]
9001eb46:	0e11      	lsrs	r1, r2, #24
9001eb48:	d012      	beq.n	9001eb70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001eb4a:	29ff      	cmp	r1, #255	; 0xff
9001eb4c:	ea4f 2712 	mov.w	r7, r2, lsr #8
9001eb50:	d110      	bne.n	9001eb74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001eb52:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001eb56:	d10d      	bne.n	9001eb74 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
9001eb58:	0953      	lsrs	r3, r2, #5
9001eb5a:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
9001eb5e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001eb62:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9001eb66:	f027 0707 	bic.w	r7, r7, #7
9001eb6a:	431f      	orrs	r7, r3
9001eb6c:	433a      	orrs	r2, r7
9001eb6e:	8002      	strh	r2, [r0, #0]
9001eb70:	3002      	adds	r0, #2
9001eb72:	e7e0      	b.n	9001eb36 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
9001eb74:	fb0a f101 	mul.w	r1, sl, r1
9001eb78:	8806      	ldrh	r6, [r0, #0]
9001eb7a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
9001eb7e:	b2d2      	uxtb	r2, r2
9001eb80:	1c4b      	adds	r3, r1, #1
9001eb82:	1235      	asrs	r5, r6, #8
9001eb84:	10f4      	asrs	r4, r6, #3
9001eb86:	eb03 2321 	add.w	r3, r3, r1, asr #8
9001eb8a:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001eb8e:	00f6      	lsls	r6, r6, #3
9001eb90:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
9001eb94:	121b      	asrs	r3, r3, #8
9001eb96:	b2f6      	uxtb	r6, r6
9001eb98:	b299      	uxth	r1, r3
9001eb9a:	43db      	mvns	r3, r3
9001eb9c:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
9001eba0:	fb1c fc01 	smulbb	ip, ip, r1
9001eba4:	b2db      	uxtb	r3, r3
9001eba6:	fb12 f201 	smulbb	r2, r2, r1
9001ebaa:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
9001ebae:	fb05 c503 	mla	r5, r5, r3, ip
9001ebb2:	b2ff      	uxtb	r7, r7
9001ebb4:	fb06 2203 	mla	r2, r6, r3, r2
9001ebb8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
9001ebbc:	fb17 f701 	smulbb	r7, r7, r1
9001ebc0:	b2ad      	uxth	r5, r5
9001ebc2:	b292      	uxth	r2, r2
9001ebc4:	fb04 7403 	mla	r4, r4, r3, r7
9001ebc8:	f105 0c01 	add.w	ip, r5, #1
9001ebcc:	1c57      	adds	r7, r2, #1
9001ebce:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9001ebd2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
9001ebd6:	b2a4      	uxth	r4, r4
9001ebd8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9001ebdc:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001ebe0:	433d      	orrs	r5, r7
9001ebe2:	1c67      	adds	r7, r4, #1
9001ebe4:	eb07 2414 	add.w	r4, r7, r4, lsr #8
9001ebe8:	0964      	lsrs	r4, r4, #5
9001ebea:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
9001ebee:	4325      	orrs	r5, r4
9001ebf0:	8005      	strh	r5, [r0, #0]
9001ebf2:	e7bd      	b.n	9001eb70 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
9001ebf4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ebf6:	4418      	add	r0, r3
9001ebf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001ebfa:	4499      	add	r9, r3
9001ebfc:	e795      	b.n	9001eb2a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
9001ebfe:	4b04      	ldr	r3, [pc, #16]	; (9001ec10 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
9001ec00:	6818      	ldr	r0, [r3, #0]
9001ec02:	6803      	ldr	r3, [r0, #0]
9001ec04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ec06:	4798      	blx	r3
9001ec08:	e771      	b.n	9001eaee <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
9001ec0a:	bf00      	nop
9001ec0c:	24026f86 	.word	0x24026f86
9001ec10:	24026f8c 	.word	0x24026f8c

9001ec14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
9001ec14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001ec18:	b087      	sub	sp, #28
9001ec1a:	4680      	mov	r8, r0
9001ec1c:	460d      	mov	r5, r1
9001ec1e:	4614      	mov	r4, r2
9001ec20:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
9001ec24:	2e00      	cmp	r6, #0
9001ec26:	f000 80b9 	beq.w	9001ed9c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
9001ec2a:	6810      	ldr	r0, [r2, #0]
9001ec2c:	af02      	add	r7, sp, #8
9001ec2e:	6851      	ldr	r1, [r2, #4]
9001ec30:	c703      	stmia	r7!, {r0, r1}
9001ec32:	6818      	ldr	r0, [r3, #0]
9001ec34:	af04      	add	r7, sp, #16
9001ec36:	6859      	ldr	r1, [r3, #4]
9001ec38:	c703      	stmia	r7!, {r0, r1}
9001ec3a:	a802      	add	r0, sp, #8
9001ec3c:	f7f9 f986 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001ec40:	4621      	mov	r1, r4
9001ec42:	a804      	add	r0, sp, #16
9001ec44:	f7f9 f9c6 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ec48:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001ec4c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001ec50:	f8bd 400c 	ldrh.w	r4, [sp, #12]
9001ec54:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
9001ec58:	fb14 2103 	smlabb	r1, r4, r3, r2
9001ec5c:	eb08 0401 	add.w	r4, r8, r1
9001ec60:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001ec64:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001ec68:	440a      	add	r2, r1
9001ec6a:	ea4f 0a48 	mov.w	sl, r8, lsl #1
9001ec6e:	f8ad 2010 	strh.w	r2, [sp, #16]
9001ec72:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001ec76:	4413      	add	r3, r2
9001ec78:	f8ad 3012 	strh.w	r3, [sp, #18]
9001ec7c:	4b49      	ldr	r3, [pc, #292]	; (9001eda4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ec7e:	6818      	ldr	r0, [r3, #0]
9001ec80:	6803      	ldr	r3, [r0, #0]
9001ec82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ec84:	4798      	blx	r3
9001ec86:	4b48      	ldr	r3, [pc, #288]	; (9001eda8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
9001ec88:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
9001ec8c:	2eff      	cmp	r6, #255	; 0xff
9001ec8e:	881a      	ldrh	r2, [r3, #0]
9001ec90:	f9bd c010 	ldrsh.w	ip, [sp, #16]
9001ec94:	fb02 c101 	mla	r1, r2, r1, ip
9001ec98:	fb02 f207 	mul.w	r2, r2, r7
9001ec9c:	eb00 0041 	add.w	r0, r0, r1, lsl #1
9001eca0:	f105 0104 	add.w	r1, r5, #4
9001eca4:	461d      	mov	r5, r3
9001eca6:	d05a      	beq.n	9001ed5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
9001eca8:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
9001ecac:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ecb0:	b2b6      	uxth	r6, r6
9001ecb2:	9301      	str	r3, [sp, #4]
9001ecb4:	fa1f fe8e 	uxth.w	lr, lr
9001ecb8:	4282      	cmp	r2, r0
9001ecba:	d96a      	bls.n	9001ed92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ecbc:	eb00 0b0a 	add.w	fp, r0, sl
9001ecc0:	4583      	cmp	fp, r0
9001ecc2:	d940      	bls.n	9001ed46 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
9001ecc4:	8805      	ldrh	r5, [r0, #0]
9001ecc6:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ecca:	122f      	asrs	r7, r5, #8
9001eccc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ecd0:	ea4f 09e5 	mov.w	r9, r5, asr #3
9001ecd4:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001ecd8:	00ed      	lsls	r5, r5, #3
9001ecda:	ea4f 2c23 	mov.w	ip, r3, asr #8
9001ecde:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
9001ece2:	fb17 f70e 	smulbb	r7, r7, lr
9001ece6:	b2ed      	uxtb	r5, r5
9001ece8:	fb19 f90e 	smulbb	r9, r9, lr
9001ecec:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001ecf0:	fb15 f50e 	smulbb	r5, r5, lr
9001ecf4:	fb0c 7c06 	mla	ip, ip, r6, r7
9001ecf8:	10df      	asrs	r7, r3, #3
9001ecfa:	00db      	lsls	r3, r3, #3
9001ecfc:	fa1f fc8c 	uxth.w	ip, ip
9001ed00:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9001ed04:	b2db      	uxtb	r3, r3
9001ed06:	fb07 9706 	mla	r7, r7, r6, r9
9001ed0a:	f10c 0901 	add.w	r9, ip, #1
9001ed0e:	fb03 5306 	mla	r3, r3, r6, r5
9001ed12:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
9001ed16:	b29b      	uxth	r3, r3
9001ed18:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
9001ed1c:	b2bf      	uxth	r7, r7
9001ed1e:	f103 0c01 	add.w	ip, r3, #1
9001ed22:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001ed26:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001ed2a:	ea4c 0c09 	orr.w	ip, ip, r9
9001ed2e:	f107 0901 	add.w	r9, r7, #1
9001ed32:	eb09 2717 	add.w	r7, r9, r7, lsr #8
9001ed36:	097f      	lsrs	r7, r7, #5
9001ed38:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
9001ed3c:	ea4c 0c07 	orr.w	ip, ip, r7
9001ed40:	f820 cb02 	strh.w	ip, [r0], #2
9001ed44:	e7bc      	b.n	9001ecc0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
9001ed46:	9b01      	ldr	r3, [sp, #4]
9001ed48:	881b      	ldrh	r3, [r3, #0]
9001ed4a:	eba3 0308 	sub.w	r3, r3, r8
9001ed4e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ed52:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ed56:	eba3 0308 	sub.w	r3, r3, r8
9001ed5a:	441c      	add	r4, r3
9001ed5c:	e7ac      	b.n	9001ecb8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
9001ed5e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
9001ed62:	4282      	cmp	r2, r0
9001ed64:	d915      	bls.n	9001ed92 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
9001ed66:	eb00 060a 	add.w	r6, r0, sl
9001ed6a:	4286      	cmp	r6, r0
9001ed6c:	d906      	bls.n	9001ed7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
9001ed6e:	f814 3b01 	ldrb.w	r3, [r4], #1
9001ed72:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
9001ed76:	f820 3b02 	strh.w	r3, [r0], #2
9001ed7a:	e7f6      	b.n	9001ed6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
9001ed7c:	882b      	ldrh	r3, [r5, #0]
9001ed7e:	eba3 0308 	sub.w	r3, r3, r8
9001ed82:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ed86:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
9001ed8a:	eba3 0308 	sub.w	r3, r3, r8
9001ed8e:	441c      	add	r4, r3
9001ed90:	e7e7      	b.n	9001ed62 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
9001ed92:	4b04      	ldr	r3, [pc, #16]	; (9001eda4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
9001ed94:	6818      	ldr	r0, [r3, #0]
9001ed96:	6803      	ldr	r3, [r0, #0]
9001ed98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001ed9a:	4798      	blx	r3
9001ed9c:	b007      	add	sp, #28
9001ed9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001eda2:	bf00      	nop
9001eda4:	24026f8c 	.word	0x24026f8c
9001eda8:	24026f86 	.word	0x24026f86

9001edac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
9001edac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001edb0:	b091      	sub	sp, #68	; 0x44
9001edb2:	4680      	mov	r8, r0
9001edb4:	460f      	mov	r7, r1
9001edb6:	4614      	mov	r4, r2
9001edb8:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
9001edbc:	2d00      	cmp	r5, #0
9001edbe:	d051      	beq.n	9001ee64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001edc0:	6810      	ldr	r0, [r2, #0]
9001edc2:	ae0c      	add	r6, sp, #48	; 0x30
9001edc4:	6851      	ldr	r1, [r2, #4]
9001edc6:	f8df 9200 	ldr.w	r9, [pc, #512]	; 9001efc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
9001edca:	c603      	stmia	r6!, {r0, r1}
9001edcc:	6818      	ldr	r0, [r3, #0]
9001edce:	ae0e      	add	r6, sp, #56	; 0x38
9001edd0:	6859      	ldr	r1, [r3, #4]
9001edd2:	c603      	stmia	r6!, {r0, r1}
9001edd4:	a80c      	add	r0, sp, #48	; 0x30
9001edd6:	f7f9 f8b9 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001edda:	4621      	mov	r1, r4
9001eddc:	a80e      	add	r0, sp, #56	; 0x38
9001edde:	f7f9 f8f9 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001ede2:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
9001ede6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001edea:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
9001edee:	f8d9 0000 	ldr.w	r0, [r9]
9001edf2:	fb11 2103 	smlabb	r1, r1, r3, r2
9001edf6:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
9001edfa:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
9001edfe:	eb08 0401 	add.w	r4, r8, r1
9001ee02:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
9001ee06:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 9001efcc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
9001ee0a:	440a      	add	r2, r1
9001ee0c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
9001ee10:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
9001ee14:	4413      	add	r3, r2
9001ee16:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
9001ee1a:	6803      	ldr	r3, [r0, #0]
9001ee1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001ee1e:	4798      	blx	r3
9001ee20:	f010 0f80 	tst.w	r0, #128	; 0x80
9001ee24:	f8d9 0000 	ldr.w	r0, [r9]
9001ee28:	d01f      	beq.n	9001ee6a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
9001ee2a:	2200      	movs	r2, #0
9001ee2c:	6801      	ldr	r1, [r0, #0]
9001ee2e:	b2b6      	uxth	r6, r6
9001ee30:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
9001ee34:	e9cd 2208 	strd	r2, r2, [sp, #32]
9001ee38:	220b      	movs	r2, #11
9001ee3a:	9207      	str	r2, [sp, #28]
9001ee3c:	f8b8 2000 	ldrh.w	r2, [r8]
9001ee40:	9601      	str	r6, [sp, #4]
9001ee42:	9206      	str	r2, [sp, #24]
9001ee44:	2201      	movs	r2, #1
9001ee46:	e9cd 5204 	strd	r5, r2, [sp, #16]
9001ee4a:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
9001ee4e:	9203      	str	r2, [sp, #12]
9001ee50:	fa1f f28a 	uxth.w	r2, sl
9001ee54:	9202      	str	r2, [sp, #8]
9001ee56:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
9001ee5a:	9200      	str	r2, [sp, #0]
9001ee5c:	463a      	mov	r2, r7
9001ee5e:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
9001ee60:	4621      	mov	r1, r4
9001ee62:	47a8      	blx	r5
9001ee64:	b011      	add	sp, #68	; 0x44
9001ee66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001ee6a:	6803      	ldr	r3, [r0, #0]
9001ee6c:	ea4f 0946 	mov.w	r9, r6, lsl #1
9001ee70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001ee72:	4798      	blx	r3
9001ee74:	f8b8 2000 	ldrh.w	r2, [r8]
9001ee78:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
9001ee7c:	2dff      	cmp	r5, #255	; 0xff
9001ee7e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
9001ee82:	fb0a fa02 	mul.w	sl, sl, r2
9001ee86:	fb02 1303 	mla	r3, r2, r3, r1
9001ee8a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ee8e:	d062      	beq.n	9001ef56 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
9001ee90:	ea6f 0c05 	mvn.w	ip, r5
9001ee94:	eb00 034a 	add.w	r3, r0, sl, lsl #1
9001ee98:	b2ad      	uxth	r5, r5
9001ee9a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
9001ee9e:	fa5f fc8c 	uxtb.w	ip, ip
9001eea2:	930a      	str	r3, [sp, #40]	; 0x28
9001eea4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001eea6:	4298      	cmp	r0, r3
9001eea8:	f080 8085 	bcs.w	9001efb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001eeac:	eb00 0b09 	add.w	fp, r0, r9
9001eeb0:	4558      	cmp	r0, fp
9001eeb2:	d246      	bcs.n	9001ef42 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
9001eeb4:	f814 eb01 	ldrb.w	lr, [r4], #1
9001eeb8:	2303      	movs	r3, #3
9001eeba:	2204      	movs	r2, #4
9001eebc:	fb13 2e0e 	smlabb	lr, r3, lr, r2
9001eec0:	8803      	ldrh	r3, [r0, #0]
9001eec2:	eb07 0a0e 	add.w	sl, r7, lr
9001eec6:	1219      	asrs	r1, r3, #8
9001eec8:	10da      	asrs	r2, r3, #3
9001eeca:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001eece:	f89a 8002 	ldrb.w	r8, [sl, #2]
9001eed2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
9001eed6:	00db      	lsls	r3, r3, #3
9001eed8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
9001eedc:	fb18 f805 	smulbb	r8, r8, r5
9001eee0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
9001eee4:	fb1e fe05 	smulbb	lr, lr, r5
9001eee8:	b2db      	uxtb	r3, r3
9001eeea:	fb01 810c 	mla	r1, r1, ip, r8
9001eeee:	f89a 8001 	ldrb.w	r8, [sl, #1]
9001eef2:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
9001eef6:	fb18 f805 	smulbb	r8, r8, r5
9001eefa:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
9001eefe:	b289      	uxth	r1, r1
9001ef00:	fb02 820c 	mla	r2, r2, ip, r8
9001ef04:	fb03 e30c 	mla	r3, r3, ip, lr
9001ef08:	f101 0801 	add.w	r8, r1, #1
9001ef0c:	b292      	uxth	r2, r2
9001ef0e:	b29b      	uxth	r3, r3
9001ef10:	eb08 2111 	add.w	r1, r8, r1, lsr #8
9001ef14:	f102 0801 	add.w	r8, r2, #1
9001ef18:	f103 0e01 	add.w	lr, r3, #1
9001ef1c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
9001ef20:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
9001ef24:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
9001ef28:	ea4f 1858 	mov.w	r8, r8, lsr #5
9001ef2c:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
9001ef30:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
9001ef34:	ea4e 0101 	orr.w	r1, lr, r1
9001ef38:	ea41 0108 	orr.w	r1, r1, r8
9001ef3c:	f820 1b02 	strh.w	r1, [r0], #2
9001ef40:	e7b6      	b.n	9001eeb0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
9001ef42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001ef44:	881b      	ldrh	r3, [r3, #0]
9001ef46:	1b9b      	subs	r3, r3, r6
9001ef48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001ef4c:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001ef50:	1b9b      	subs	r3, r3, r6
9001ef52:	441c      	add	r4, r3
9001ef54:	e7a6      	b.n	9001eea4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
9001ef56:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
9001ef5a:	2203      	movs	r2, #3
9001ef5c:	2504      	movs	r5, #4
9001ef5e:	4919      	ldr	r1, [pc, #100]	; (9001efc4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
9001ef60:	4550      	cmp	r0, sl
9001ef62:	d228      	bcs.n	9001efb6 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
9001ef64:	eb00 0c09 	add.w	ip, r0, r9
9001ef68:	4560      	cmp	r0, ip
9001ef6a:	4623      	mov	r3, r4
9001ef6c:	d219      	bcs.n	9001efa2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
9001ef6e:	f893 e000 	ldrb.w	lr, [r3]
9001ef72:	3401      	adds	r4, #1
9001ef74:	fb12 5e0e 	smlabb	lr, r2, lr, r5
9001ef78:	eb07 0b0e 	add.w	fp, r7, lr
9001ef7c:	f817 e00e 	ldrb.w	lr, [r7, lr]
9001ef80:	f89b 3002 	ldrb.w	r3, [fp, #2]
9001ef84:	f89b b001 	ldrb.w	fp, [fp, #1]
9001ef88:	ea01 2303 	and.w	r3, r1, r3, lsl #8
9001ef8c:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
9001ef90:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
9001ef94:	ea43 030b 	orr.w	r3, r3, fp
9001ef98:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
9001ef9c:	f820 3b02 	strh.w	r3, [r0], #2
9001efa0:	e7e2      	b.n	9001ef68 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
9001efa2:	f8b8 3000 	ldrh.w	r3, [r8]
9001efa6:	1b9b      	subs	r3, r3, r6
9001efa8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001efac:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
9001efb0:	1b9b      	subs	r3, r3, r6
9001efb2:	441c      	add	r4, r3
9001efb4:	e7d4      	b.n	9001ef60 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
9001efb6:	4b04      	ldr	r3, [pc, #16]	; (9001efc8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
9001efb8:	6818      	ldr	r0, [r3, #0]
9001efba:	6803      	ldr	r3, [r0, #0]
9001efbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001efbe:	4798      	blx	r3
9001efc0:	e750      	b.n	9001ee64 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
9001efc2:	bf00      	nop
9001efc4:	fffff800 	.word	0xfffff800
9001efc8:	24026f8c 	.word	0x24026f8c
9001efcc:	24026f86 	.word	0x24026f86

9001efd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
9001efd0:	b430      	push	{r4, r5}
9001efd2:	780d      	ldrb	r5, [r1, #0]
9001efd4:	f89d 4008 	ldrb.w	r4, [sp, #8]
9001efd8:	2d01      	cmp	r5, #1
9001efda:	d00a      	beq.n	9001eff2 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
9001efdc:	d305      	bcc.n	9001efea <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
9001efde:	2d02      	cmp	r5, #2
9001efe0:	d10b      	bne.n	9001effa <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
9001efe2:	9402      	str	r4, [sp, #8]
9001efe4:	bc30      	pop	{r4, r5}
9001efe6:	f7ff be15 	b.w	9001ec14 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
9001efea:	9402      	str	r4, [sp, #8]
9001efec:	bc30      	pop	{r4, r5}
9001efee:	f7ff bd2b 	b.w	9001ea48 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
9001eff2:	9402      	str	r4, [sp, #8]
9001eff4:	bc30      	pop	{r4, r5}
9001eff6:	f7ff bed9 	b.w	9001edac <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
9001effa:	bc30      	pop	{r4, r5}
9001effc:	4770      	bx	lr
	...

9001f000 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
9001f000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f004:	b087      	sub	sp, #28
9001f006:	4604      	mov	r4, r0
9001f008:	460e      	mov	r6, r1
9001f00a:	6810      	ldr	r0, [r2, #0]
9001f00c:	6851      	ldr	r1, [r2, #4]
9001f00e:	ad02      	add	r5, sp, #8
9001f010:	4617      	mov	r7, r2
9001f012:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
9001f016:	f8df 9230 	ldr.w	r9, [pc, #560]	; 9001f248 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
9001f01a:	c503      	stmia	r5!, {r0, r1}
9001f01c:	6818      	ldr	r0, [r3, #0]
9001f01e:	ad04      	add	r5, sp, #16
9001f020:	6859      	ldr	r1, [r3, #4]
9001f022:	c503      	stmia	r5!, {r0, r1}
9001f024:	a802      	add	r0, sp, #8
9001f026:	f7f8 ff91 	bl	90017f4c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
9001f02a:	4639      	mov	r1, r7
9001f02c:	a804      	add	r0, sp, #16
9001f02e:	f7f8 ffd1 	bl	90017fd4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
9001f032:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f036:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f03a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
9001f03e:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
9001f042:	fb11 2103 	smlabb	r1, r1, r3, r2
9001f046:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
9001f04a:	eb04 0441 	add.w	r4, r4, r1, lsl #1
9001f04e:	440e      	add	r6, r1
9001f050:	f8bd 1008 	ldrh.w	r1, [sp, #8]
9001f054:	440a      	add	r2, r1
9001f056:	f8ad 2010 	strh.w	r2, [sp, #16]
9001f05a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
9001f05e:	4413      	add	r3, r2
9001f060:	f8ad 3012 	strh.w	r3, [sp, #18]
9001f064:	4b77      	ldr	r3, [pc, #476]	; (9001f244 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f066:	6818      	ldr	r0, [r3, #0]
9001f068:	6803      	ldr	r3, [r0, #0]
9001f06a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f06c:	4798      	blx	r3
9001f06e:	f8b9 b000 	ldrh.w	fp, [r9]
9001f072:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f076:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
9001f07a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
9001f07e:	fb05 f50b 	mul.w	r5, r5, fp
9001f082:	fb0b 2303 	mla	r3, fp, r3, r2
9001f086:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f08a:	ea4f 0348 	mov.w	r3, r8, lsl #1
9001f08e:	9300      	str	r3, [sp, #0]
9001f090:	d069      	beq.n	9001f166 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
9001f092:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
9001f096:	4558      	cmp	r0, fp
9001f098:	f080 80cc 	bcs.w	9001f234 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f09c:	9b00      	ldr	r3, [sp, #0]
9001f09e:	4631      	mov	r1, r6
9001f0a0:	18c3      	adds	r3, r0, r3
9001f0a2:	9301      	str	r3, [sp, #4]
9001f0a4:	9b01      	ldr	r3, [sp, #4]
9001f0a6:	4298      	cmp	r0, r3
9001f0a8:	d24f      	bcs.n	9001f14a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
9001f0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
9001f0ae:	2a00      	cmp	r2, #0
9001f0b0:	d048      	beq.n	9001f144 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f0b2:	fb0a f202 	mul.w	r2, sl, r2
9001f0b6:	1c53      	adds	r3, r2, #1
9001f0b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9001f0bc:	121b      	asrs	r3, r3, #8
9001f0be:	d041      	beq.n	9001f144 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
9001f0c0:	8802      	ldrh	r2, [r0, #0]
9001f0c2:	b29e      	uxth	r6, r3
9001f0c4:	f8b4 c000 	ldrh.w	ip, [r4]
9001f0c8:	43db      	mvns	r3, r3
9001f0ca:	1215      	asrs	r5, r2, #8
9001f0cc:	b2db      	uxtb	r3, r3
9001f0ce:	ea4f 272c 	mov.w	r7, ip, asr #8
9001f0d2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9001f0d6:	ea4f 0ee2 	mov.w	lr, r2, asr #3
9001f0da:	fb15 f503 	smulbb	r5, r5, r3
9001f0de:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
9001f0e2:	00d2      	lsls	r2, r2, #3
9001f0e4:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9001f0e8:	fb07 5706 	mla	r7, r7, r6, r5
9001f0ec:	ea4f 05ec 	mov.w	r5, ip, asr #3
9001f0f0:	b2d2      	uxtb	r2, r2
9001f0f2:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9001f0f6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
9001f0fa:	fb1e fe03 	smulbb	lr, lr, r3
9001f0fe:	b2bf      	uxth	r7, r7
9001f100:	fb12 f203 	smulbb	r2, r2, r3
9001f104:	fa5f fc8c 	uxtb.w	ip, ip
9001f108:	fb05 e506 	mla	r5, r5, r6, lr
9001f10c:	f107 0e01 	add.w	lr, r7, #1
9001f110:	fb0c 2c06 	mla	ip, ip, r6, r2
9001f114:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
9001f118:	fa1f fc8c 	uxth.w	ip, ip
9001f11c:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
9001f120:	b2ad      	uxth	r5, r5
9001f122:	f10c 0701 	add.w	r7, ip, #1
9001f126:	eb07 271c 	add.w	r7, r7, ip, lsr #8
9001f12a:	f3c7 27c4 	ubfx	r7, r7, #11, #5
9001f12e:	ea47 070e 	orr.w	r7, r7, lr
9001f132:	f105 0e01 	add.w	lr, r5, #1
9001f136:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
9001f13a:	096d      	lsrs	r5, r5, #5
9001f13c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9001f140:	432f      	orrs	r7, r5
9001f142:	8007      	strh	r7, [r0, #0]
9001f144:	3002      	adds	r0, #2
9001f146:	3402      	adds	r4, #2
9001f148:	e7ac      	b.n	9001f0a4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
9001f14a:	f8b9 3000 	ldrh.w	r3, [r9]
9001f14e:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f152:	eba3 0308 	sub.w	r3, r3, r8
9001f156:	eba6 0608 	sub.w	r6, r6, r8
9001f15a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f15e:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f162:	440e      	add	r6, r1
9001f164:	e797      	b.n	9001f096 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
9001f166:	eb00 0545 	add.w	r5, r0, r5, lsl #1
9001f16a:	42a8      	cmp	r0, r5
9001f16c:	d262      	bcs.n	9001f234 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
9001f16e:	9b00      	ldr	r3, [sp, #0]
9001f170:	4631      	mov	r1, r6
9001f172:	eb00 0b03 	add.w	fp, r0, r3
9001f176:	4558      	cmp	r0, fp
9001f178:	d24e      	bcs.n	9001f218 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
9001f17a:	f811 3b01 	ldrb.w	r3, [r1], #1
9001f17e:	b12b      	cbz	r3, 9001f18c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f180:	2bff      	cmp	r3, #255	; 0xff
9001f182:	f8b4 e000 	ldrh.w	lr, [r4]
9001f186:	d104      	bne.n	9001f192 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
9001f188:	f8a0 e000 	strh.w	lr, [r0]
9001f18c:	3002      	adds	r0, #2
9001f18e:	3402      	adds	r4, #2
9001f190:	e7f1      	b.n	9001f176 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
9001f192:	8802      	ldrh	r2, [r0, #0]
9001f194:	b29f      	uxth	r7, r3
9001f196:	43db      	mvns	r3, r3
9001f198:	ea4f 2c2e 	mov.w	ip, lr, asr #8
9001f19c:	1216      	asrs	r6, r2, #8
9001f19e:	b2db      	uxtb	r3, r3
9001f1a0:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9001f1a4:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
9001f1a8:	ea4f 0ae2 	mov.w	sl, r2, asr #3
9001f1ac:	00d2      	lsls	r2, r2, #3
9001f1ae:	fb16 f603 	smulbb	r6, r6, r3
9001f1b2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
9001f1b6:	b2d2      	uxtb	r2, r2
9001f1b8:	fb0c 6c07 	mla	ip, ip, r7, r6
9001f1bc:	ea4f 06ee 	mov.w	r6, lr, asr #3
9001f1c0:	fb1a fa03 	smulbb	sl, sl, r3
9001f1c4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
9001f1c8:	fa1f fc8c 	uxth.w	ip, ip
9001f1cc:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9001f1d0:	fb12 f303 	smulbb	r3, r2, r3
9001f1d4:	fa5f fe8e 	uxtb.w	lr, lr
9001f1d8:	fb06 a607 	mla	r6, r6, r7, sl
9001f1dc:	f10c 0201 	add.w	r2, ip, #1
9001f1e0:	fb0e 3307 	mla	r3, lr, r7, r3
9001f1e4:	b2b6      	uxth	r6, r6
9001f1e6:	b29b      	uxth	r3, r3
9001f1e8:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
9001f1ec:	f106 0a01 	add.w	sl, r6, #1
9001f1f0:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
9001f1f4:	f103 0c01 	add.w	ip, r3, #1
9001f1f8:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
9001f1fc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
9001f200:	0976      	lsrs	r6, r6, #5
9001f202:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
9001f206:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
9001f20a:	ea4c 0c02 	orr.w	ip, ip, r2
9001f20e:	ea4c 0c06 	orr.w	ip, ip, r6
9001f212:	f8a0 c000 	strh.w	ip, [r0]
9001f216:	e7b9      	b.n	9001f18c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
9001f218:	f8b9 3000 	ldrh.w	r3, [r9]
9001f21c:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
9001f220:	eba3 0308 	sub.w	r3, r3, r8
9001f224:	eba6 0608 	sub.w	r6, r6, r8
9001f228:	eb00 0043 	add.w	r0, r0, r3, lsl #1
9001f22c:	eb04 0446 	add.w	r4, r4, r6, lsl #1
9001f230:	440e      	add	r6, r1
9001f232:	e79a      	b.n	9001f16a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
9001f234:	4b03      	ldr	r3, [pc, #12]	; (9001f244 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
9001f236:	6818      	ldr	r0, [r3, #0]
9001f238:	6803      	ldr	r3, [r0, #0]
9001f23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f23c:	4798      	blx	r3
9001f23e:	b007      	add	sp, #28
9001f240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f244:	24026f8c 	.word	0x24026f8c
9001f248:	24026f86 	.word	0x24026f86

9001f24c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
9001f24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f250:	b089      	sub	sp, #36	; 0x24
9001f252:	4682      	mov	sl, r0
9001f254:	460f      	mov	r7, r1
9001f256:	4691      	mov	r9, r2
9001f258:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
9001f25c:	4698      	mov	r8, r3
9001f25e:	9c12      	ldr	r4, [sp, #72]	; 0x48
9001f260:	2e00      	cmp	r6, #0
9001f262:	d036      	beq.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f264:	4608      	mov	r0, r1
9001f266:	f7fc f863 	bl	9001b330 <_ZNK8touchgfx6Bitmap8getWidthEv>
9001f26a:	4605      	mov	r5, r0
9001f26c:	4638      	mov	r0, r7
9001f26e:	f7fc f893 	bl	9001b398 <_ZNK8touchgfx6Bitmap9getHeightEv>
9001f272:	f8ad 000e 	strh.w	r0, [sp, #14]
9001f276:	4638      	mov	r0, r7
9001f278:	f8ad 9008 	strh.w	r9, [sp, #8]
9001f27c:	f8ad 500c 	strh.w	r5, [sp, #12]
9001f280:	f8ad 800a 	strh.w	r8, [sp, #10]
9001f284:	f7fc f940 	bl	9001b508 <_ZNK8touchgfx6Bitmap7getDataEv>
9001f288:	4605      	mov	r5, r0
9001f28a:	4638      	mov	r0, r7
9001f28c:	f7fc f96c 	bl	9001b568 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
9001f290:	4681      	mov	r9, r0
9001f292:	4638      	mov	r0, r7
9001f294:	f7fc f9bc 	bl	9001b610 <_ZNK8touchgfx6Bitmap9getFormatEv>
9001f298:	280b      	cmp	r0, #11
9001f29a:	d81a      	bhi.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f29c:	e8df f000 	tbb	[pc, r0]
9001f2a0:	1906aebd 	.word	0x1906aebd
9001f2a4:	19191919 	.word	0x19191919
9001f2a8:	b5191919 	.word	0xb5191919
9001f2ac:	4bb0      	ldr	r3, [pc, #704]	; (9001f570 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
9001f2ae:	6818      	ldr	r0, [r3, #0]
9001f2b0:	6803      	ldr	r3, [r0, #0]
9001f2b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f2b4:	4798      	blx	r3
9001f2b6:	2eff      	cmp	r6, #255	; 0xff
9001f2b8:	d121      	bne.n	9001f2fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f2ba:	0683      	lsls	r3, r0, #26
9001f2bc:	d41f      	bmi.n	9001f2fe <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
9001f2be:	4638      	mov	r0, r7
9001f2c0:	f7fc f8ea 	bl	9001b498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f2c4:	b940      	cbnz	r0, 9001f2d8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
9001f2c6:	4623      	mov	r3, r4
9001f2c8:	aa02      	add	r2, sp, #8
9001f2ca:	4629      	mov	r1, r5
9001f2cc:	4650      	mov	r0, sl
9001f2ce:	f7ff fa2f 	bl	9001e730 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f2d2:	b009      	add	sp, #36	; 0x24
9001f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f2d8:	f10d 0818 	add.w	r8, sp, #24
9001f2dc:	4639      	mov	r1, r7
9001f2de:	af04      	add	r7, sp, #16
9001f2e0:	4640      	mov	r0, r8
9001f2e2:	f7fc f88d 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f2e6:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f2ea:	e887 0003 	stmia.w	r7, {r0, r1}
9001f2ee:	4638      	mov	r0, r7
9001f2f0:	4621      	mov	r1, r4
9001f2f2:	f7f5 fb65 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
9001f2f6:	4638      	mov	r0, r7
9001f2f8:	f7f5 fba5 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
9001f2fc:	b130      	cbz	r0, 9001f30c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
9001f2fe:	4633      	mov	r3, r6
9001f300:	4622      	mov	r2, r4
9001f302:	a902      	add	r1, sp, #8
9001f304:	4628      	mov	r0, r5
9001f306:	f7ff f92d 	bl	9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f30a:	e7e2      	b.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f30c:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f310:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f314:	4293      	cmp	r3, r2
9001f316:	dd12      	ble.n	9001f33e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
9001f318:	1a9b      	subs	r3, r3, r2
9001f31a:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f31e:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f322:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f326:	4628      	mov	r0, r5
9001f328:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f32c:	4642      	mov	r2, r8
9001f32e:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f332:	a902      	add	r1, sp, #8
9001f334:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f338:	4633      	mov	r3, r6
9001f33a:	f7ff f913 	bl	9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f33e:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f342:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f346:	4293      	cmp	r3, r2
9001f348:	dd12      	ble.n	9001f370 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
9001f34a:	1a9b      	subs	r3, r3, r2
9001f34c:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f350:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f354:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f358:	4642      	mov	r2, r8
9001f35a:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f35e:	4628      	mov	r0, r5
9001f360:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f364:	23ff      	movs	r3, #255	; 0xff
9001f366:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f36a:	a902      	add	r1, sp, #8
9001f36c:	f7ff f8fa 	bl	9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f370:	463b      	mov	r3, r7
9001f372:	aa02      	add	r2, sp, #8
9001f374:	4629      	mov	r1, r5
9001f376:	4650      	mov	r0, sl
9001f378:	f7ff f9da 	bl	9001e730 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
9001f37c:	88a2      	ldrh	r2, [r4, #4]
9001f37e:	8823      	ldrh	r3, [r4, #0]
9001f380:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f384:	4413      	add	r3, r2
9001f386:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f38a:	440a      	add	r2, r1
9001f38c:	b29b      	uxth	r3, r3
9001f38e:	b292      	uxth	r2, r2
9001f390:	b218      	sxth	r0, r3
9001f392:	b211      	sxth	r1, r2
9001f394:	4288      	cmp	r0, r1
9001f396:	dd12      	ble.n	9001f3be <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
9001f398:	1a9b      	subs	r3, r3, r2
9001f39a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f39e:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
9001f3a2:	4642      	mov	r2, r8
9001f3a4:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f3a8:	a902      	add	r1, sp, #8
9001f3aa:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f3ae:	23ff      	movs	r3, #255	; 0xff
9001f3b0:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f3b4:	4628      	mov	r0, r5
9001f3b6:	f8ad 601a 	strh.w	r6, [sp, #26]
9001f3ba:	f7ff f8d3 	bl	9001e564 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
9001f3be:	88e2      	ldrh	r2, [r4, #6]
9001f3c0:	8863      	ldrh	r3, [r4, #2]
9001f3c2:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f3c6:	4413      	add	r3, r2
9001f3c8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f3cc:	440a      	add	r2, r1
9001f3ce:	b29b      	uxth	r3, r3
9001f3d0:	b292      	uxth	r2, r2
9001f3d2:	b218      	sxth	r0, r3
9001f3d4:	b211      	sxth	r1, r2
9001f3d6:	4288      	cmp	r0, r1
9001f3d8:	f77f af7b 	ble.w	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f3dc:	1a9b      	subs	r3, r3, r2
9001f3de:	f9b4 6000 	ldrsh.w	r6, [r4]
9001f3e2:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f3e6:	4642      	mov	r2, r8
9001f3e8:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f3ec:	23ff      	movs	r3, #255	; 0xff
9001f3ee:	f8ad 6018 	strh.w	r6, [sp, #24]
9001f3f2:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f3f6:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f3fa:	e782      	b.n	9001f302 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
9001f3fc:	4633      	mov	r3, r6
9001f3fe:	4622      	mov	r2, r4
9001f400:	a902      	add	r1, sp, #8
9001f402:	4628      	mov	r0, r5
9001f404:	f7ff fa04 	bl	9001e810 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
9001f408:	e763      	b.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f40a:	9600      	str	r6, [sp, #0]
9001f40c:	4623      	mov	r3, r4
9001f40e:	aa02      	add	r2, sp, #8
9001f410:	4649      	mov	r1, r9
9001f412:	4628      	mov	r0, r5
9001f414:	f7ff fddc 	bl	9001efd0 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
9001f418:	e75b      	b.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f41a:	4638      	mov	r0, r7
9001f41c:	f7fc f83c 	bl	9001b498 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
9001f420:	b950      	cbnz	r0, 9001f438 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
9001f422:	f8da 3000 	ldr.w	r3, [sl]
9001f426:	aa02      	add	r2, sp, #8
9001f428:	4629      	mov	r1, r5
9001f42a:	e9cd 6000 	strd	r6, r0, [sp]
9001f42e:	4650      	mov	r0, sl
9001f430:	68de      	ldr	r6, [r3, #12]
9001f432:	4623      	mov	r3, r4
9001f434:	47b0      	blx	r6
9001f436:	e74c      	b.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f438:	f10d 0818 	add.w	r8, sp, #24
9001f43c:	4639      	mov	r1, r7
9001f43e:	af04      	add	r7, sp, #16
9001f440:	4640      	mov	r0, r8
9001f442:	f7fb ffdd 	bl	9001b400 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
9001f446:	e898 0003 	ldmia.w	r8, {r0, r1}
9001f44a:	e887 0003 	stmia.w	r7, {r0, r1}
9001f44e:	4638      	mov	r0, r7
9001f450:	4621      	mov	r1, r4
9001f452:	f7f5 fab5 	bl	900149c0 <_ZN8touchgfx4RectaNERKS0_>
9001f456:	4638      	mov	r0, r7
9001f458:	f7f5 faf5 	bl	90014a46 <_ZNK8touchgfx4Rect7isEmptyEv>
9001f45c:	b138      	cbz	r0, 9001f46e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
9001f45e:	4623      	mov	r3, r4
9001f460:	9600      	str	r6, [sp, #0]
9001f462:	aa02      	add	r2, sp, #8
9001f464:	4649      	mov	r1, r9
9001f466:	4628      	mov	r0, r5
9001f468:	f7ff fdca 	bl	9001f000 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f46c:	e731      	b.n	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f46e:	f8da 3000 	ldr.w	r3, [sl]
9001f472:	aa02      	add	r2, sp, #8
9001f474:	4629      	mov	r1, r5
9001f476:	e9cd 6000 	strd	r6, r0, [sp]
9001f47a:	4650      	mov	r0, sl
9001f47c:	f8d3 b00c 	ldr.w	fp, [r3, #12]
9001f480:	463b      	mov	r3, r7
9001f482:	47d8      	blx	fp
9001f484:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
9001f488:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
9001f48c:	4293      	cmp	r3, r2
9001f48e:	dd13      	ble.n	9001f4b8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
9001f490:	f9b4 0000 	ldrsh.w	r0, [r4]
9001f494:	1a9b      	subs	r3, r3, r2
9001f496:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
9001f49a:	f8ad 0018 	strh.w	r0, [sp, #24]
9001f49e:	4628      	mov	r0, r5
9001f4a0:	f8ad 201a 	strh.w	r2, [sp, #26]
9001f4a4:	aa02      	add	r2, sp, #8
9001f4a6:	f8ad 101c 	strh.w	r1, [sp, #28]
9001f4aa:	4649      	mov	r1, r9
9001f4ac:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f4b0:	4643      	mov	r3, r8
9001f4b2:	9600      	str	r6, [sp, #0]
9001f4b4:	f7ff fda4 	bl	9001f000 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f4b8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
9001f4bc:	f9b4 2000 	ldrsh.w	r2, [r4]
9001f4c0:	4293      	cmp	r3, r2
9001f4c2:	dd13      	ble.n	9001f4ec <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
9001f4c4:	1a9b      	subs	r3, r3, r2
9001f4c6:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
9001f4ca:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
9001f4ce:	f8ad 2018 	strh.w	r2, [sp, #24]
9001f4d2:	aa02      	add	r2, sp, #8
9001f4d4:	f8ad 001a 	strh.w	r0, [sp, #26]
9001f4d8:	4628      	mov	r0, r5
9001f4da:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f4de:	4643      	mov	r3, r8
9001f4e0:	f8ad 101e 	strh.w	r1, [sp, #30]
9001f4e4:	4649      	mov	r1, r9
9001f4e6:	9600      	str	r6, [sp, #0]
9001f4e8:	f7ff fd8a 	bl	9001f000 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f4ec:	88a2      	ldrh	r2, [r4, #4]
9001f4ee:	8823      	ldrh	r3, [r4, #0]
9001f4f0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
9001f4f4:	4413      	add	r3, r2
9001f4f6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
9001f4fa:	440a      	add	r2, r1
9001f4fc:	b29b      	uxth	r3, r3
9001f4fe:	b292      	uxth	r2, r2
9001f500:	b218      	sxth	r0, r3
9001f502:	b211      	sxth	r1, r2
9001f504:	4288      	cmp	r0, r1
9001f506:	dd13      	ble.n	9001f530 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
9001f508:	1a9b      	subs	r3, r3, r2
9001f50a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
9001f50e:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
9001f512:	aa02      	add	r2, sp, #8
9001f514:	f8ad 1018 	strh.w	r1, [sp, #24]
9001f518:	4649      	mov	r1, r9
9001f51a:	f8ad 301c 	strh.w	r3, [sp, #28]
9001f51e:	4643      	mov	r3, r8
9001f520:	f8ad 001e 	strh.w	r0, [sp, #30]
9001f524:	4628      	mov	r0, r5
9001f526:	9600      	str	r6, [sp, #0]
9001f528:	f8ad 701a 	strh.w	r7, [sp, #26]
9001f52c:	f7ff fd68 	bl	9001f000 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
9001f530:	88e2      	ldrh	r2, [r4, #6]
9001f532:	8863      	ldrh	r3, [r4, #2]
9001f534:	f8bd 1016 	ldrh.w	r1, [sp, #22]
9001f538:	4413      	add	r3, r2
9001f53a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
9001f53e:	440a      	add	r2, r1
9001f540:	b29b      	uxth	r3, r3
9001f542:	b292      	uxth	r2, r2
9001f544:	b218      	sxth	r0, r3
9001f546:	b211      	sxth	r1, r2
9001f548:	4288      	cmp	r0, r1
9001f54a:	f77f aec2 	ble.w	9001f2d2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
9001f54e:	f9b4 7000 	ldrsh.w	r7, [r4]
9001f552:	1a9b      	subs	r3, r3, r2
9001f554:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
9001f558:	f8ad 301e 	strh.w	r3, [sp, #30]
9001f55c:	4643      	mov	r3, r8
9001f55e:	f8ad 7018 	strh.w	r7, [sp, #24]
9001f562:	f8ad 101a 	strh.w	r1, [sp, #26]
9001f566:	f8ad 001c 	strh.w	r0, [sp, #28]
9001f56a:	9600      	str	r6, [sp, #0]
9001f56c:	e779      	b.n	9001f462 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
9001f56e:	bf00      	nop
9001f570:	24026f8c 	.word	0x24026f8c

9001f574 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
9001f574:	b180      	cbz	r0, 9001f598 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
9001f576:	2903      	cmp	r1, #3
9001f578:	d81c      	bhi.n	9001f5b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f57a:	e8df f001 	tbb	[pc, r1]
9001f57e:	1d02      	.short	0x1d02
9001f580:	1f08      	.short	0x1f08
9001f582:	4b10      	ldr	r3, [pc, #64]	; (9001f5c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f584:	8818      	ldrh	r0, [r3, #0]
9001f586:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f58a:	4240      	negs	r0, r0
9001f58c:	4770      	bx	lr
9001f58e:	4b0d      	ldr	r3, [pc, #52]	; (9001f5c4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
9001f590:	8818      	ldrh	r0, [r3, #0]
9001f592:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f596:	4770      	bx	lr
9001f598:	2903      	cmp	r1, #3
9001f59a:	d80b      	bhi.n	9001f5b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
9001f59c:	a301      	add	r3, pc, #4	; (adr r3, 9001f5a4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
9001f59e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f5a2:	bf00      	nop
9001f5a4:	9001f5b9 	.word	0x9001f5b9
9001f5a8:	9001f58f 	.word	0x9001f58f
9001f5ac:	9001f5bd 	.word	0x9001f5bd
9001f5b0:	9001f583 	.word	0x9001f583
9001f5b4:	2000      	movs	r0, #0
9001f5b6:	4770      	bx	lr
9001f5b8:	2001      	movs	r0, #1
9001f5ba:	4770      	bx	lr
9001f5bc:	f04f 30ff 	mov.w	r0, #4294967295
9001f5c0:	4770      	bx	lr
9001f5c2:	bf00      	nop
9001f5c4:	24026f86 	.word	0x24026f86

9001f5c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
9001f5c8:	b180      	cbz	r0, 9001f5ec <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
9001f5ca:	2903      	cmp	r1, #3
9001f5cc:	d81c      	bhi.n	9001f608 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f5ce:	e8df f001 	tbb	[pc, r1]
9001f5d2:	021d      	.short	0x021d
9001f5d4:	071f      	.short	0x071f
9001f5d6:	4b10      	ldr	r3, [pc, #64]	; (9001f618 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f5d8:	8818      	ldrh	r0, [r3, #0]
9001f5da:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f5de:	4770      	bx	lr
9001f5e0:	4b0d      	ldr	r3, [pc, #52]	; (9001f618 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
9001f5e2:	8818      	ldrh	r0, [r3, #0]
9001f5e4:	f3c0 000e 	ubfx	r0, r0, #0, #15
9001f5e8:	4240      	negs	r0, r0
9001f5ea:	4770      	bx	lr
9001f5ec:	2903      	cmp	r1, #3
9001f5ee:	d80b      	bhi.n	9001f608 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
9001f5f0:	a301      	add	r3, pc, #4	; (adr r3, 9001f5f8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
9001f5f2:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
9001f5f6:	bf00      	nop
9001f5f8:	9001f5d7 	.word	0x9001f5d7
9001f5fc:	9001f611 	.word	0x9001f611
9001f600:	9001f5e1 	.word	0x9001f5e1
9001f604:	9001f60d 	.word	0x9001f60d
9001f608:	2000      	movs	r0, #0
9001f60a:	4770      	bx	lr
9001f60c:	2001      	movs	r0, #1
9001f60e:	4770      	bx	lr
9001f610:	f04f 30ff 	mov.w	r0, #4294967295
9001f614:	4770      	bx	lr
9001f616:	bf00      	nop
9001f618:	24026f86 	.word	0x24026f86

9001f61c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
9001f61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9001f620:	b099      	sub	sp, #100	; 0x64
9001f622:	910b      	str	r1, [sp, #44]	; 0x2c
9001f624:	a914      	add	r1, sp, #80	; 0x50
9001f626:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
9001f62a:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
9001f62e:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
9001f632:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
9001f636:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
9001f63a:	e881 000c 	stmia.w	r1, {r2, r3}
9001f63e:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
9001f642:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
9001f646:	9309      	str	r3, [sp, #36]	; 0x24
9001f648:	f891 900d 	ldrb.w	r9, [r1, #13]
9001f64c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
9001f650:	ea4f 1749 	mov.w	r7, r9, lsl #5
9001f654:	9310      	str	r3, [sp, #64]	; 0x40
9001f656:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
9001f65a:	930c      	str	r3, [sp, #48]	; 0x30
9001f65c:	f407 7380 	and.w	r3, r7, #256	; 0x100
9001f660:	798f      	ldrb	r7, [r1, #6]
9001f662:	431f      	orrs	r7, r3
9001f664:	f000 8195 	beq.w	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f668:	ea4f 1909 	mov.w	r9, r9, lsl #4
9001f66c:	f409 7380 	and.w	r3, r9, #256	; 0x100
9001f670:	f891 9007 	ldrb.w	r9, [r1, #7]
9001f674:	ea59 0903 	orrs.w	r9, r9, r3
9001f678:	f000 818b 	beq.w	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f67c:	f991 3009 	ldrsb.w	r3, [r1, #9]
9001f680:	b29b      	uxth	r3, r3
9001f682:	2d00      	cmp	r5, #0
9001f684:	f000 812e 	beq.w	9001f8e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2c8>
9001f688:	1aed      	subs	r5, r5, r3
9001f68a:	b2ad      	uxth	r5, r5
9001f68c:	042b      	lsls	r3, r5, #16
9001f68e:	d502      	bpl.n	9001f696 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f690:	1b64      	subs	r4, r4, r5
9001f692:	2500      	movs	r5, #0
9001f694:	b224      	sxth	r4, r4
9001f696:	f9b2 1000 	ldrsh.w	r1, [r2]
9001f69a:	a814      	add	r0, sp, #80	; 0x50
9001f69c:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
9001f6a0:	428c      	cmp	r4, r1
9001f6a2:	b28b      	uxth	r3, r1
9001f6a4:	bfbf      	itttt	lt
9001f6a6:	18ed      	addlt	r5, r5, r3
9001f6a8:	1b2c      	sublt	r4, r5, r4
9001f6aa:	b2a5      	uxthlt	r5, r4
9001f6ac:	460c      	movlt	r4, r1
9001f6ae:	8891      	ldrh	r1, [r2, #4]
9001f6b0:	440b      	add	r3, r1
9001f6b2:	4621      	mov	r1, r4
9001f6b4:	b21b      	sxth	r3, r3
9001f6b6:	930f      	str	r3, [sp, #60]	; 0x3c
9001f6b8:	88d3      	ldrh	r3, [r2, #6]
9001f6ba:	8852      	ldrh	r2, [r2, #2]
9001f6bc:	4413      	add	r3, r2
9001f6be:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f6c0:	b21b      	sxth	r3, r3
9001f6c2:	930d      	str	r3, [sp, #52]	; 0x34
9001f6c4:	4bbd      	ldr	r3, [pc, #756]	; (9001f9bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
9001f6c6:	f893 b000 	ldrb.w	fp, [r3]
9001f6ca:	f10b 3cff 	add.w	ip, fp, #4294967295
9001f6ce:	f1dc 0300 	rsbs	r3, ip, #0
9001f6d2:	eb43 030c 	adc.w	r3, r3, ip
9001f6d6:	930e      	str	r3, [sp, #56]	; 0x38
9001f6d8:	4653      	mov	r3, sl
9001f6da:	f7f8 fab1 	bl	90017c40 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
9001f6de:	4621      	mov	r1, r4
9001f6e0:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
9001f6e4:	4653      	mov	r3, sl
9001f6e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
9001f6e8:	a814      	add	r0, sp, #80	; 0x50
9001f6ea:	f7f8 fac6 	bl	90017c7a <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
9001f6ee:	a918      	add	r1, sp, #96	; 0x60
9001f6f0:	f821 0d02 	strh.w	r0, [r1, #-2]!
9001f6f4:	a817      	add	r0, sp, #92	; 0x5c
9001f6f6:	f7f8 fbe7 	bl	90017ec8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
9001f6fa:	f1ba 0f00 	cmp.w	sl, #0
9001f6fe:	f040 80f4 	bne.w	9001f8ea <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ce>
9001f702:	f1bb 0f01 	cmp.w	fp, #1
9001f706:	f040 80f8 	bne.w	9001f8fa <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2de>
9001f70a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f70c:	2b00      	cmp	r3, #0
9001f70e:	f040 8145 	bne.w	9001f99c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>
9001f712:	b2ba      	uxth	r2, r7
9001f714:	b905      	cbnz	r5, 9001f718 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
9001f716:	b16e      	cbz	r6, 9001f734 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
9001f718:	fb06 5302 	mla	r3, r6, r2, r5
9001f71c:	9828      	ldr	r0, [sp, #160]	; 0xa0
9001f71e:	4631      	mov	r1, r6
9001f720:	fb08 f303 	mul.w	r3, r8, r3
9001f724:	f003 0607 	and.w	r6, r3, #7
9001f728:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
9001f72c:	9328      	str	r3, [sp, #160]	; 0xa0
9001f72e:	eba9 0301 	sub.w	r3, r9, r1
9001f732:	930a      	str	r3, [sp, #40]	; 0x28
9001f734:	4651      	mov	r1, sl
9001f736:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f738:	f7ff ff1c 	bl	9001f574 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
9001f73c:	4681      	mov	r9, r0
9001f73e:	980e      	ldr	r0, [sp, #56]	; 0x38
9001f740:	f7ff ff42 	bl	9001f5c8 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
9001f744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f746:	9909      	ldr	r1, [sp, #36]	; 0x24
9001f748:	4683      	mov	fp, r0
9001f74a:	eba3 0a01 	sub.w	sl, r3, r1
9001f74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f750:	459a      	cmp	sl, r3
9001f752:	bfa8      	it	ge
9001f754:	469a      	movge	sl, r3
9001f756:	f1ba 0f00 	cmp.w	sl, #0
9001f75a:	f340 811a 	ble.w	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f75e:	1b64      	subs	r4, r4, r5
9001f760:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f762:	1b1c      	subs	r4, r3, r4
9001f764:	42bc      	cmp	r4, r7
9001f766:	bfd4      	ite	le
9001f768:	ebc5 0504 	rsble	r5, r5, r4
9001f76c:	ebc5 0507 	rsbgt	r5, r5, r7
9001f770:	2d00      	cmp	r5, #0
9001f772:	f340 810e 	ble.w	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f776:	1b52      	subs	r2, r2, r5
9001f778:	fb08 f302 	mul.w	r3, r8, r2
9001f77c:	930f      	str	r3, [sp, #60]	; 0x3c
9001f77e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f780:	2b00      	cmp	r3, #0
9001f782:	f040 8116 	bne.w	9001f9b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x396>
9001f786:	4b8e      	ldr	r3, [pc, #568]	; (9001f9c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
9001f788:	6818      	ldr	r0, [r3, #0]
9001f78a:	6803      	ldr	r3, [r0, #0]
9001f78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
9001f78e:	4798      	blx	r3
9001f790:	2301      	movs	r3, #1
9001f792:	4a8c      	ldr	r2, [pc, #560]	; (9001f9c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
9001f794:	fa03 f308 	lsl.w	r3, r3, r8
9001f798:	8811      	ldrh	r1, [r2, #0]
9001f79a:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
9001f79e:	3b01      	subs	r3, #1
9001f7a0:	b2db      	uxtb	r3, r3
9001f7a2:	930e      	str	r3, [sp, #56]	; 0x38
9001f7a4:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
9001f7a8:	fb01 2303 	mla	r3, r1, r3, r2
9001f7ac:	eb00 0343 	add.w	r3, r0, r3, lsl #1
9001f7b0:	930a      	str	r3, [sp, #40]	; 0x28
9001f7b2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f7b4:	f3c3 4307 	ubfx	r3, r3, #16, #8
9001f7b8:	9313      	str	r3, [sp, #76]	; 0x4c
9001f7ba:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f7bc:	0a19      	lsrs	r1, r3, #8
9001f7be:	b2cb      	uxtb	r3, r1
9001f7c0:	9312      	str	r3, [sp, #72]	; 0x48
9001f7c2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f7c4:	b2db      	uxtb	r3, r3
9001f7c6:	9311      	str	r3, [sp, #68]	; 0x44
9001f7c8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
9001f7ca:	095a      	lsrs	r2, r3, #5
9001f7cc:	4b7e      	ldr	r3, [pc, #504]	; (9001f9c8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
9001f7ce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9001f7d2:	400b      	ands	r3, r1
9001f7d4:	4313      	orrs	r3, r2
9001f7d6:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9001f7d8:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9001f7dc:	4313      	orrs	r3, r2
9001f7de:	b29b      	uxth	r3, r3
9001f7e0:	9310      	str	r3, [sp, #64]	; 0x40
9001f7e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f7e4:	781a      	ldrb	r2, [r3, #0]
9001f7e6:	ea4f 0349 	mov.w	r3, r9, lsl #1
9001f7ea:	fb05 b919 	mls	r9, r5, r9, fp
9001f7ee:	4132      	asrs	r2, r6
9001f7f0:	fb03 fb05 	mul.w	fp, r3, r5
9001f7f4:	930d      	str	r3, [sp, #52]	; 0x34
9001f7f6:	b2d2      	uxtb	r2, r2
9001f7f8:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
9001f7fc:	f11a 3aff 	adds.w	sl, sl, #4294967295
9001f800:	f0c0 80f5 	bcc.w	9001f9ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3d2>
9001f804:	46ae      	mov	lr, r5
9001f806:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
9001f80a:	f11e 3eff 	adds.w	lr, lr, #4294967295
9001f80e:	f0c0 80dd 	bcc.w	9001f9cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3b0>
9001f812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
9001f814:	4013      	ands	r3, r2
9001f816:	d055      	beq.n	9001f8c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
9001f818:	20ff      	movs	r0, #255	; 0xff
9001f81a:	990e      	ldr	r1, [sp, #56]	; 0x38
9001f81c:	fb90 f1f1 	sdiv	r1, r0, r1
9001f820:	434b      	muls	r3, r1
9001f822:	2bfe      	cmp	r3, #254	; 0xfe
9001f824:	dd03      	ble.n	9001f82e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
9001f826:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f828:	4281      	cmp	r1, r0
9001f82a:	f000 80c4 	beq.w	9001f9b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39a>
9001f82e:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f830:	f8bc 4000 	ldrh.w	r4, [ip]
9001f834:	fb11 f303 	smulbb	r3, r1, r3
9001f838:	1220      	asrs	r0, r4, #8
9001f83a:	b29b      	uxth	r3, r3
9001f83c:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
9001f840:	1c59      	adds	r1, r3, #1
9001f842:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
9001f846:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9001f84a:	10e1      	asrs	r1, r4, #3
9001f84c:	f3c3 2307 	ubfx	r3, r3, #8, #8
9001f850:	00e4      	lsls	r4, r4, #3
9001f852:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9001f856:	b29f      	uxth	r7, r3
9001f858:	43db      	mvns	r3, r3
9001f85a:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
9001f85e:	b2db      	uxtb	r3, r3
9001f860:	b2e4      	uxtb	r4, r4
9001f862:	9309      	str	r3, [sp, #36]	; 0x24
9001f864:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9001f866:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
9001f86a:	fb13 f907 	smulbb	r9, r3, r7
9001f86e:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f870:	fb00 9003 	mla	r0, r0, r3, r9
9001f874:	9b12      	ldr	r3, [sp, #72]	; 0x48
9001f876:	fb13 f907 	smulbb	r9, r3, r7
9001f87a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f87c:	b280      	uxth	r0, r0
9001f87e:	fb01 9103 	mla	r1, r1, r3, r9
9001f882:	9b11      	ldr	r3, [sp, #68]	; 0x44
9001f884:	fb13 f707 	smulbb	r7, r3, r7
9001f888:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f88a:	b289      	uxth	r1, r1
9001f88c:	fb04 7403 	mla	r4, r4, r3, r7
9001f890:	1c43      	adds	r3, r0, #1
9001f892:	b2a4      	uxth	r4, r4
9001f894:	eb03 2010 	add.w	r0, r3, r0, lsr #8
9001f898:	f104 0901 	add.w	r9, r4, #1
9001f89c:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9001f8a0:	eb09 2914 	add.w	r9, r9, r4, lsr #8
9001f8a4:	f3c9 29c4 	ubfx	r9, r9, #11, #5
9001f8a8:	ea49 0000 	orr.w	r0, r9, r0
9001f8ac:	f101 0901 	add.w	r9, r1, #1
9001f8b0:	eb09 2911 	add.w	r9, r9, r1, lsr #8
9001f8b4:	ea4f 1959 	mov.w	r9, r9, lsr #5
9001f8b8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9001f8bc:	ea40 0009 	orr.w	r0, r0, r9
9001f8c0:	f8ac 0000 	strh.w	r0, [ip]
9001f8c4:	4446      	add	r6, r8
9001f8c6:	b2b6      	uxth	r6, r6
9001f8c8:	2e07      	cmp	r6, #7
9001f8ca:	bf89      	itett	hi
9001f8cc:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
9001f8ce:	fa42 f208 	asrls.w	r2, r2, r8
9001f8d2:	2600      	movhi	r6, #0
9001f8d4:	785a      	ldrbhi	r2, [r3, #1]
9001f8d6:	bf8a      	itet	hi
9001f8d8:	3301      	addhi	r3, #1
9001f8da:	b2d2      	uxtbls	r2, r2
9001f8dc:	9328      	strhi	r3, [sp, #160]	; 0xa0
9001f8de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9001f8e0:	449c      	add	ip, r3
9001f8e2:	e792      	b.n	9001f80a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
9001f8e4:	441c      	add	r4, r3
9001f8e6:	b224      	sxth	r4, r4
9001f8e8:	e6d5      	b.n	9001f696 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
9001f8ea:	f1ba 0f01 	cmp.w	sl, #1
9001f8ee:	f47f af0c 	bne.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f8f2:	f1bb 0f01 	cmp.w	fp, #1
9001f8f6:	f47f af08 	bne.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f8fa:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 9001f9c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>
9001f8fe:	f8db 0000 	ldr.w	r0, [fp]
9001f902:	6803      	ldr	r3, [r0, #0]
9001f904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
9001f906:	4798      	blx	r3
9001f908:	f410 7380 	ands.w	r3, r0, #256	; 0x100
9001f90c:	465a      	mov	r2, fp
9001f90e:	d006      	beq.n	9001f91e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f910:	f1b8 0f04 	cmp.w	r8, #4
9001f914:	d140      	bne.n	9001f998 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37c>
9001f916:	9b10      	ldr	r3, [sp, #64]	; 0x40
9001f918:	3300      	adds	r3, #0
9001f91a:	bf18      	it	ne
9001f91c:	2301      	movne	r3, #1
9001f91e:	0580      	lsls	r0, r0, #22
9001f920:	d56e      	bpl.n	9001fa00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f922:	f1b8 0f08 	cmp.w	r8, #8
9001f926:	d16b      	bne.n	9001fa00 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e4>
9001f928:	2b00      	cmp	r3, #0
9001f92a:	bf0c      	ite	eq
9001f92c:	f44f 7100 	moveq.w	r1, #512	; 0x200
9001f930:	f44f 7180 	movne.w	r1, #256	; 0x100
9001f934:	2d00      	cmp	r5, #0
9001f936:	f47f aee8 	bne.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f93a:	2e00      	cmp	r6, #0
9001f93c:	f47f aee5 	bne.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f940:	19e3      	adds	r3, r4, r7
9001f942:	980f      	ldr	r0, [sp, #60]	; 0x3c
9001f944:	4283      	cmp	r3, r0
9001f946:	f73f aee0 	bgt.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9001f94c:	980d      	ldr	r0, [sp, #52]	; 0x34
9001f94e:	444b      	add	r3, r9
9001f950:	4283      	cmp	r3, r0
9001f952:	f73f aeda 	bgt.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001f956:	b2bf      	uxth	r7, r7
9001f958:	f1b8 0f08 	cmp.w	r8, #8
9001f95c:	6810      	ldr	r0, [r2, #0]
9001f95e:	f04f 0500 	mov.w	r5, #0
9001f962:	bf18      	it	ne
9001f964:	3701      	addne	r7, #1
9001f966:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
9001f96a:	6804      	ldr	r4, [r0, #0]
9001f96c:	bf18      	it	ne
9001f96e:	f027 0701 	bicne.w	r7, r7, #1
9001f972:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
9001f976:	e9cd 1505 	strd	r1, r5, [sp, #20]
9001f97a:	990c      	ldr	r1, [sp, #48]	; 0x30
9001f97c:	bf18      	it	ne
9001f97e:	b2bf      	uxthne	r7, r7
9001f980:	9104      	str	r1, [sp, #16]
9001f982:	992a      	ldr	r1, [sp, #168]	; 0xa8
9001f984:	e9cd 7900 	strd	r7, r9, [sp]
9001f988:	e9cd 7102 	strd	r7, r1, [sp, #8]
9001f98c:	9928      	ldr	r1, [sp, #160]	; 0xa0
9001f98e:	6d64      	ldr	r4, [r4, #84]	; 0x54
9001f990:	47a0      	blx	r4
9001f992:	b019      	add	sp, #100	; 0x64
9001f994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9001f998:	2300      	movs	r3, #0
9001f99a:	e7c0      	b.n	9001f91e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x302>
9001f99c:	2208      	movs	r2, #8
9001f99e:	fb92 f3f8 	sdiv	r3, r2, r8
9001f9a2:	1e5a      	subs	r2, r3, #1
9001f9a4:	443a      	add	r2, r7
9001f9a6:	fb92 f2f3 	sdiv	r2, r2, r3
9001f9aa:	fb12 f203 	smulbb	r2, r2, r3
9001f9ae:	b292      	uxth	r2, r2
9001f9b0:	e6b0      	b.n	9001f714 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
9001f9b2:	980b      	ldr	r0, [sp, #44]	; 0x2c
9001f9b4:	e6ec      	b.n	9001f790 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
9001f9b6:	9810      	ldr	r0, [sp, #64]	; 0x40
9001f9b8:	e782      	b.n	9001f8c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
9001f9ba:	bf00      	nop
9001f9bc:	24026f84 	.word	0x24026f84
9001f9c0:	24026f8c 	.word	0x24026f8c
9001f9c4:	24026f86 	.word	0x24026f86
9001f9c8:	00fff800 	.word	0x00fff800
9001f9cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9001f9ce:	b153      	cbz	r3, 9001f9e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ca>
9001f9d0:	441e      	add	r6, r3
9001f9d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9001f9d4:	b2b6      	uxth	r6, r6
9001f9d6:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
9001f9da:	f006 0607 	and.w	r6, r6, #7
9001f9de:	781a      	ldrb	r2, [r3, #0]
9001f9e0:	9328      	str	r3, [sp, #160]	; 0xa0
9001f9e2:	4132      	asrs	r2, r6
9001f9e4:	b2d2      	uxtb	r2, r2
9001f9e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9001f9e8:	445b      	add	r3, fp
9001f9ea:	930a      	str	r3, [sp, #40]	; 0x28
9001f9ec:	e706      	b.n	9001f7fc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
9001f9ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9001f9f0:	2b00      	cmp	r3, #0
9001f9f2:	d1ce      	bne.n	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001f9f4:	4b05      	ldr	r3, [pc, #20]	; (9001fa0c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3f0>)
9001f9f6:	6818      	ldr	r0, [r3, #0]
9001f9f8:	6803      	ldr	r3, [r0, #0]
9001f9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
9001f9fc:	4798      	blx	r3
9001f9fe:	e7c8      	b.n	9001f992 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x376>
9001fa00:	2b00      	cmp	r3, #0
9001fa02:	f43f ae82 	beq.w	9001f70a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
9001fa06:	f44f 7180 	mov.w	r1, #256	; 0x100
9001fa0a:	e793      	b.n	9001f934 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x318>
9001fa0c:	24026f8c 	.word	0x24026f8c

9001fa10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
9001fa10:	b538      	push	{r3, r4, r5, lr}
9001fa12:	4c15      	ldr	r4, [pc, #84]	; (9001fa68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
9001fa14:	4605      	mov	r5, r0
9001fa16:	7823      	ldrb	r3, [r4, #0]
9001fa18:	f3bf 8f5b 	dmb	ish
9001fa1c:	07da      	lsls	r2, r3, #31
9001fa1e:	d40b      	bmi.n	9001fa38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fa20:	4620      	mov	r0, r4
9001fa22:	f007 fa68 	bl	90026ef6 <__cxa_guard_acquire>
9001fa26:	b138      	cbz	r0, 9001fa38 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x28>
9001fa28:	4620      	mov	r0, r4
9001fa2a:	f007 fa70 	bl	90026f0e <__cxa_guard_release>
9001fa2e:	4a0f      	ldr	r2, [pc, #60]	; (9001fa6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001fa30:	490f      	ldr	r1, [pc, #60]	; (9001fa70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
9001fa32:	4810      	ldr	r0, [pc, #64]	; (9001fa74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001fa34:	f007 fa58 	bl	90026ee8 <__aeabi_atexit>
9001fa38:	4c0f      	ldr	r4, [pc, #60]	; (9001fa78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
9001fa3a:	7823      	ldrb	r3, [r4, #0]
9001fa3c:	f3bf 8f5b 	dmb	ish
9001fa40:	07db      	lsls	r3, r3, #31
9001fa42:	d40b      	bmi.n	9001fa5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fa44:	4620      	mov	r0, r4
9001fa46:	f007 fa56 	bl	90026ef6 <__cxa_guard_acquire>
9001fa4a:	b138      	cbz	r0, 9001fa5c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x4c>
9001fa4c:	4620      	mov	r0, r4
9001fa4e:	f007 fa5e 	bl	90026f0e <__cxa_guard_release>
9001fa52:	4a06      	ldr	r2, [pc, #24]	; (9001fa6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
9001fa54:	4909      	ldr	r1, [pc, #36]	; (9001fa7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
9001fa56:	480a      	ldr	r0, [pc, #40]	; (9001fa80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fa58:	f007 fa46 	bl	90026ee8 <__aeabi_atexit>
9001fa5c:	4b05      	ldr	r3, [pc, #20]	; (9001fa74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
9001fa5e:	612b      	str	r3, [r5, #16]
9001fa60:	4b07      	ldr	r3, [pc, #28]	; (9001fa80 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x70>)
9001fa62:	616b      	str	r3, [r5, #20]
9001fa64:	bd38      	pop	{r3, r4, r5, pc}
9001fa66:	bf00      	nop
9001fa68:	24027058 	.word	0x24027058
9001fa6c:	24000000 	.word	0x24000000
9001fa70:	9001dc1d 	.word	0x9001dc1d
9001fa74:	240000ac 	.word	0x240000ac
9001fa78:	2402705c 	.word	0x2402705c
9001fa7c:	9001dc1b 	.word	0x9001dc1b
9001fa80:	240000b0 	.word	0x240000b0

9001fa84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
9001fa84:	b538      	push	{r3, r4, r5, lr}
9001fa86:	4c15      	ldr	r4, [pc, #84]	; (9001fadc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
9001fa88:	4605      	mov	r5, r0
9001fa8a:	7823      	ldrb	r3, [r4, #0]
9001fa8c:	f3bf 8f5b 	dmb	ish
9001fa90:	07da      	lsls	r2, r3, #31
9001fa92:	d40b      	bmi.n	9001faac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fa94:	4620      	mov	r0, r4
9001fa96:	f007 fa2e 	bl	90026ef6 <__cxa_guard_acquire>
9001fa9a:	b138      	cbz	r0, 9001faac <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x28>
9001fa9c:	4620      	mov	r0, r4
9001fa9e:	f007 fa36 	bl	90026f0e <__cxa_guard_release>
9001faa2:	4a0f      	ldr	r2, [pc, #60]	; (9001fae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001faa4:	490f      	ldr	r1, [pc, #60]	; (9001fae4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
9001faa6:	4810      	ldr	r0, [pc, #64]	; (9001fae8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001faa8:	f007 fa1e 	bl	90026ee8 <__aeabi_atexit>
9001faac:	4c0f      	ldr	r4, [pc, #60]	; (9001faec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
9001faae:	7823      	ldrb	r3, [r4, #0]
9001fab0:	f3bf 8f5b 	dmb	ish
9001fab4:	07db      	lsls	r3, r3, #31
9001fab6:	d40b      	bmi.n	9001fad0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fab8:	4620      	mov	r0, r4
9001faba:	f007 fa1c 	bl	90026ef6 <__cxa_guard_acquire>
9001fabe:	b138      	cbz	r0, 9001fad0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x4c>
9001fac0:	4620      	mov	r0, r4
9001fac2:	f007 fa24 	bl	90026f0e <__cxa_guard_release>
9001fac6:	4a06      	ldr	r2, [pc, #24]	; (9001fae0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
9001fac8:	4909      	ldr	r1, [pc, #36]	; (9001faf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
9001faca:	480a      	ldr	r0, [pc, #40]	; (9001faf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001facc:	f007 fa0c 	bl	90026ee8 <__aeabi_atexit>
9001fad0:	4b05      	ldr	r3, [pc, #20]	; (9001fae8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
9001fad2:	60ab      	str	r3, [r5, #8]
9001fad4:	4b07      	ldr	r3, [pc, #28]	; (9001faf4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x70>)
9001fad6:	60eb      	str	r3, [r5, #12]
9001fad8:	bd38      	pop	{r3, r4, r5, pc}
9001fada:	bf00      	nop
9001fadc:	24027030 	.word	0x24027030
9001fae0:	24000000 	.word	0x24000000
9001fae4:	9001dc21 	.word	0x9001dc21
9001fae8:	24000084 	.word	0x24000084
9001faec:	24027034 	.word	0x24027034
9001faf0:	9001dc1f 	.word	0x9001dc1f
9001faf4:	24000088 	.word	0x24000088

9001faf8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
9001faf8:	b510      	push	{r4, lr}
9001fafa:	4604      	mov	r4, r0
9001fafc:	f7ff ff88 	bl	9001fa10 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
9001fb00:	4620      	mov	r0, r4
9001fb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fb06:	f7ff bfbd 	b.w	9001fa84 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

9001fb0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
9001fb0c:	b538      	push	{r3, r4, r5, lr}
9001fb0e:	4c15      	ldr	r4, [pc, #84]	; (9001fb64 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
9001fb10:	4605      	mov	r5, r0
9001fb12:	7823      	ldrb	r3, [r4, #0]
9001fb14:	f3bf 8f5b 	dmb	ish
9001fb18:	07da      	lsls	r2, r3, #31
9001fb1a:	d40b      	bmi.n	9001fb34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fb1c:	4620      	mov	r0, r4
9001fb1e:	f007 f9ea 	bl	90026ef6 <__cxa_guard_acquire>
9001fb22:	b138      	cbz	r0, 9001fb34 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
9001fb24:	4620      	mov	r0, r4
9001fb26:	f007 f9f2 	bl	90026f0e <__cxa_guard_release>
9001fb2a:	4a0f      	ldr	r2, [pc, #60]	; (9001fb68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fb2c:	490f      	ldr	r1, [pc, #60]	; (9001fb6c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
9001fb2e:	4810      	ldr	r0, [pc, #64]	; (9001fb70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fb30:	f007 f9da 	bl	90026ee8 <__aeabi_atexit>
9001fb34:	4c0f      	ldr	r4, [pc, #60]	; (9001fb74 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
9001fb36:	7823      	ldrb	r3, [r4, #0]
9001fb38:	f3bf 8f5b 	dmb	ish
9001fb3c:	07db      	lsls	r3, r3, #31
9001fb3e:	d40b      	bmi.n	9001fb58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fb40:	4620      	mov	r0, r4
9001fb42:	f007 f9d8 	bl	90026ef6 <__cxa_guard_acquire>
9001fb46:	b138      	cbz	r0, 9001fb58 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
9001fb48:	4620      	mov	r0, r4
9001fb4a:	f007 f9e0 	bl	90026f0e <__cxa_guard_release>
9001fb4e:	4a06      	ldr	r2, [pc, #24]	; (9001fb68 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
9001fb50:	4909      	ldr	r1, [pc, #36]	; (9001fb78 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
9001fb52:	480a      	ldr	r0, [pc, #40]	; (9001fb7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fb54:	f007 f9c8 	bl	90026ee8 <__aeabi_atexit>
9001fb58:	4b05      	ldr	r3, [pc, #20]	; (9001fb70 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
9001fb5a:	622b      	str	r3, [r5, #32]
9001fb5c:	4b07      	ldr	r3, [pc, #28]	; (9001fb7c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
9001fb5e:	626b      	str	r3, [r5, #36]	; 0x24
9001fb60:	bd38      	pop	{r3, r4, r5, pc}
9001fb62:	bf00      	nop
9001fb64:	24027060 	.word	0x24027060
9001fb68:	24000000 	.word	0x24000000
9001fb6c:	9001dc15 	.word	0x9001dc15
9001fb70:	240000b4 	.word	0x240000b4
9001fb74:	24027064 	.word	0x24027064
9001fb78:	9001dc13 	.word	0x9001dc13
9001fb7c:	240000b8 	.word	0x240000b8

9001fb80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
9001fb80:	b538      	push	{r3, r4, r5, lr}
9001fb82:	4c15      	ldr	r4, [pc, #84]	; (9001fbd8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
9001fb84:	4605      	mov	r5, r0
9001fb86:	7823      	ldrb	r3, [r4, #0]
9001fb88:	f3bf 8f5b 	dmb	ish
9001fb8c:	07da      	lsls	r2, r3, #31
9001fb8e:	d40b      	bmi.n	9001fba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fb90:	4620      	mov	r0, r4
9001fb92:	f007 f9b0 	bl	90026ef6 <__cxa_guard_acquire>
9001fb96:	b138      	cbz	r0, 9001fba8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
9001fb98:	4620      	mov	r0, r4
9001fb9a:	f007 f9b8 	bl	90026f0e <__cxa_guard_release>
9001fb9e:	4a0f      	ldr	r2, [pc, #60]	; (9001fbdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fba0:	490f      	ldr	r1, [pc, #60]	; (9001fbe0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
9001fba2:	4810      	ldr	r0, [pc, #64]	; (9001fbe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fba4:	f007 f9a0 	bl	90026ee8 <__aeabi_atexit>
9001fba8:	4c0f      	ldr	r4, [pc, #60]	; (9001fbe8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
9001fbaa:	7823      	ldrb	r3, [r4, #0]
9001fbac:	f3bf 8f5b 	dmb	ish
9001fbb0:	07db      	lsls	r3, r3, #31
9001fbb2:	d40b      	bmi.n	9001fbcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fbb4:	4620      	mov	r0, r4
9001fbb6:	f007 f99e 	bl	90026ef6 <__cxa_guard_acquire>
9001fbba:	b138      	cbz	r0, 9001fbcc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
9001fbbc:	4620      	mov	r0, r4
9001fbbe:	f007 f9a6 	bl	90026f0e <__cxa_guard_release>
9001fbc2:	4a06      	ldr	r2, [pc, #24]	; (9001fbdc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
9001fbc4:	4909      	ldr	r1, [pc, #36]	; (9001fbec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
9001fbc6:	480a      	ldr	r0, [pc, #40]	; (9001fbf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fbc8:	f007 f98e 	bl	90026ee8 <__aeabi_atexit>
9001fbcc:	4b05      	ldr	r3, [pc, #20]	; (9001fbe4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
9001fbce:	61ab      	str	r3, [r5, #24]
9001fbd0:	4b07      	ldr	r3, [pc, #28]	; (9001fbf0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
9001fbd2:	61eb      	str	r3, [r5, #28]
9001fbd4:	bd38      	pop	{r3, r4, r5, pc}
9001fbd6:	bf00      	nop
9001fbd8:	24027038 	.word	0x24027038
9001fbdc:	24000000 	.word	0x24000000
9001fbe0:	9001dc19 	.word	0x9001dc19
9001fbe4:	2400008c 	.word	0x2400008c
9001fbe8:	2402703c 	.word	0x2402703c
9001fbec:	9001dc17 	.word	0x9001dc17
9001fbf0:	24000090 	.word	0x24000090

9001fbf4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
9001fbf4:	b510      	push	{r4, lr}
9001fbf6:	4604      	mov	r4, r0
9001fbf8:	f7ff ff88 	bl	9001fb0c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
9001fbfc:	4620      	mov	r0, r4
9001fbfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fc02:	f7ff bfbd 	b.w	9001fb80 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

9001fc08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
9001fc08:	b538      	push	{r3, r4, r5, lr}
9001fc0a:	4c15      	ldr	r4, [pc, #84]	; (9001fc60 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
9001fc0c:	4605      	mov	r5, r0
9001fc0e:	7823      	ldrb	r3, [r4, #0]
9001fc10:	f3bf 8f5b 	dmb	ish
9001fc14:	07da      	lsls	r2, r3, #31
9001fc16:	d40b      	bmi.n	9001fc30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fc18:	4620      	mov	r0, r4
9001fc1a:	f007 f96c 	bl	90026ef6 <__cxa_guard_acquire>
9001fc1e:	b138      	cbz	r0, 9001fc30 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
9001fc20:	4620      	mov	r0, r4
9001fc22:	f007 f974 	bl	90026f0e <__cxa_guard_release>
9001fc26:	4a0f      	ldr	r2, [pc, #60]	; (9001fc64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fc28:	490f      	ldr	r1, [pc, #60]	; (9001fc68 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
9001fc2a:	4810      	ldr	r0, [pc, #64]	; (9001fc6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fc2c:	f007 f95c 	bl	90026ee8 <__aeabi_atexit>
9001fc30:	4c0f      	ldr	r4, [pc, #60]	; (9001fc70 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
9001fc32:	7823      	ldrb	r3, [r4, #0]
9001fc34:	f3bf 8f5b 	dmb	ish
9001fc38:	07db      	lsls	r3, r3, #31
9001fc3a:	d40b      	bmi.n	9001fc54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fc3c:	4620      	mov	r0, r4
9001fc3e:	f007 f95a 	bl	90026ef6 <__cxa_guard_acquire>
9001fc42:	b138      	cbz	r0, 9001fc54 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
9001fc44:	4620      	mov	r0, r4
9001fc46:	f007 f962 	bl	90026f0e <__cxa_guard_release>
9001fc4a:	4a06      	ldr	r2, [pc, #24]	; (9001fc64 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
9001fc4c:	4909      	ldr	r1, [pc, #36]	; (9001fc74 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
9001fc4e:	480a      	ldr	r0, [pc, #40]	; (9001fc78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fc50:	f007 f94a 	bl	90026ee8 <__aeabi_atexit>
9001fc54:	4b05      	ldr	r3, [pc, #20]	; (9001fc6c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
9001fc56:	632b      	str	r3, [r5, #48]	; 0x30
9001fc58:	4b07      	ldr	r3, [pc, #28]	; (9001fc78 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
9001fc5a:	636b      	str	r3, [r5, #52]	; 0x34
9001fc5c:	bd38      	pop	{r3, r4, r5, pc}
9001fc5e:	bf00      	nop
9001fc60:	24027070 	.word	0x24027070
9001fc64:	24000000 	.word	0x24000000
9001fc68:	9001dc0d 	.word	0x9001dc0d
9001fc6c:	240000c4 	.word	0x240000c4
9001fc70:	24027074 	.word	0x24027074
9001fc74:	9001dc0b 	.word	0x9001dc0b
9001fc78:	240000c8 	.word	0x240000c8

9001fc7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
9001fc7c:	b538      	push	{r3, r4, r5, lr}
9001fc7e:	4c15      	ldr	r4, [pc, #84]	; (9001fcd4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
9001fc80:	4605      	mov	r5, r0
9001fc82:	7823      	ldrb	r3, [r4, #0]
9001fc84:	f3bf 8f5b 	dmb	ish
9001fc88:	07da      	lsls	r2, r3, #31
9001fc8a:	d40b      	bmi.n	9001fca4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fc8c:	4620      	mov	r0, r4
9001fc8e:	f007 f932 	bl	90026ef6 <__cxa_guard_acquire>
9001fc92:	b138      	cbz	r0, 9001fca4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
9001fc94:	4620      	mov	r0, r4
9001fc96:	f007 f93a 	bl	90026f0e <__cxa_guard_release>
9001fc9a:	4a0f      	ldr	r2, [pc, #60]	; (9001fcd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fc9c:	490f      	ldr	r1, [pc, #60]	; (9001fcdc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
9001fc9e:	4810      	ldr	r0, [pc, #64]	; (9001fce0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fca0:	f007 f922 	bl	90026ee8 <__aeabi_atexit>
9001fca4:	4c0f      	ldr	r4, [pc, #60]	; (9001fce4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
9001fca6:	7823      	ldrb	r3, [r4, #0]
9001fca8:	f3bf 8f5b 	dmb	ish
9001fcac:	07db      	lsls	r3, r3, #31
9001fcae:	d40b      	bmi.n	9001fcc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fcb0:	4620      	mov	r0, r4
9001fcb2:	f007 f920 	bl	90026ef6 <__cxa_guard_acquire>
9001fcb6:	b138      	cbz	r0, 9001fcc8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
9001fcb8:	4620      	mov	r0, r4
9001fcba:	f007 f928 	bl	90026f0e <__cxa_guard_release>
9001fcbe:	4a06      	ldr	r2, [pc, #24]	; (9001fcd8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
9001fcc0:	4909      	ldr	r1, [pc, #36]	; (9001fce8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
9001fcc2:	480a      	ldr	r0, [pc, #40]	; (9001fcec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fcc4:	f007 f910 	bl	90026ee8 <__aeabi_atexit>
9001fcc8:	4b05      	ldr	r3, [pc, #20]	; (9001fce0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
9001fcca:	62ab      	str	r3, [r5, #40]	; 0x28
9001fccc:	4b07      	ldr	r3, [pc, #28]	; (9001fcec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
9001fcce:	62eb      	str	r3, [r5, #44]	; 0x2c
9001fcd0:	bd38      	pop	{r3, r4, r5, pc}
9001fcd2:	bf00      	nop
9001fcd4:	24027040 	.word	0x24027040
9001fcd8:	24000000 	.word	0x24000000
9001fcdc:	9001dc11 	.word	0x9001dc11
9001fce0:	24000094 	.word	0x24000094
9001fce4:	24027044 	.word	0x24027044
9001fce8:	9001dc0f 	.word	0x9001dc0f
9001fcec:	24000098 	.word	0x24000098

9001fcf0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
9001fcf0:	b510      	push	{r4, lr}
9001fcf2:	4604      	mov	r4, r0
9001fcf4:	f7ff ff88 	bl	9001fc08 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
9001fcf8:	4620      	mov	r0, r4
9001fcfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001fcfe:	f7ff bfbd 	b.w	9001fc7c <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

9001fd04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
9001fd04:	b538      	push	{r3, r4, r5, lr}
9001fd06:	4c15      	ldr	r4, [pc, #84]	; (9001fd5c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
9001fd08:	4605      	mov	r5, r0
9001fd0a:	7823      	ldrb	r3, [r4, #0]
9001fd0c:	f3bf 8f5b 	dmb	ish
9001fd10:	07da      	lsls	r2, r3, #31
9001fd12:	d40b      	bmi.n	9001fd2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fd14:	4620      	mov	r0, r4
9001fd16:	f007 f8ee 	bl	90026ef6 <__cxa_guard_acquire>
9001fd1a:	b138      	cbz	r0, 9001fd2c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x28>
9001fd1c:	4620      	mov	r0, r4
9001fd1e:	f007 f8f6 	bl	90026f0e <__cxa_guard_release>
9001fd22:	4a0f      	ldr	r2, [pc, #60]	; (9001fd60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fd24:	490f      	ldr	r1, [pc, #60]	; (9001fd64 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
9001fd26:	4810      	ldr	r0, [pc, #64]	; (9001fd68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001fd28:	f007 f8de 	bl	90026ee8 <__aeabi_atexit>
9001fd2c:	4c0f      	ldr	r4, [pc, #60]	; (9001fd6c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
9001fd2e:	7823      	ldrb	r3, [r4, #0]
9001fd30:	f3bf 8f5b 	dmb	ish
9001fd34:	07db      	lsls	r3, r3, #31
9001fd36:	d40b      	bmi.n	9001fd50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fd38:	4620      	mov	r0, r4
9001fd3a:	f007 f8dc 	bl	90026ef6 <__cxa_guard_acquire>
9001fd3e:	b138      	cbz	r0, 9001fd50 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x4c>
9001fd40:	4620      	mov	r0, r4
9001fd42:	f007 f8e4 	bl	90026f0e <__cxa_guard_release>
9001fd46:	4a06      	ldr	r2, [pc, #24]	; (9001fd60 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
9001fd48:	4909      	ldr	r1, [pc, #36]	; (9001fd70 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
9001fd4a:	480a      	ldr	r0, [pc, #40]	; (9001fd74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001fd4c:	f007 f8cc 	bl	90026ee8 <__aeabi_atexit>
9001fd50:	4b05      	ldr	r3, [pc, #20]	; (9001fd68 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
9001fd52:	652b      	str	r3, [r5, #80]	; 0x50
9001fd54:	4b07      	ldr	r3, [pc, #28]	; (9001fd74 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x70>)
9001fd56:	656b      	str	r3, [r5, #84]	; 0x54
9001fd58:	bd38      	pop	{r3, r4, r5, pc}
9001fd5a:	bf00      	nop
9001fd5c:	24027078 	.word	0x24027078
9001fd60:	24000000 	.word	0x24000000
9001fd64:	9001dbfd 	.word	0x9001dbfd
9001fd68:	240000cc 	.word	0x240000cc
9001fd6c:	2402707c 	.word	0x2402707c
9001fd70:	9001dbfb 	.word	0x9001dbfb
9001fd74:	240000d0 	.word	0x240000d0

9001fd78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
9001fd78:	b538      	push	{r3, r4, r5, lr}
9001fd7a:	4c15      	ldr	r4, [pc, #84]	; (9001fdd0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
9001fd7c:	4605      	mov	r5, r0
9001fd7e:	7823      	ldrb	r3, [r4, #0]
9001fd80:	f3bf 8f5b 	dmb	ish
9001fd84:	07da      	lsls	r2, r3, #31
9001fd86:	d40b      	bmi.n	9001fda0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fd88:	4620      	mov	r0, r4
9001fd8a:	f007 f8b4 	bl	90026ef6 <__cxa_guard_acquire>
9001fd8e:	b138      	cbz	r0, 9001fda0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x28>
9001fd90:	4620      	mov	r0, r4
9001fd92:	f007 f8bc 	bl	90026f0e <__cxa_guard_release>
9001fd96:	4a0f      	ldr	r2, [pc, #60]	; (9001fdd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001fd98:	490f      	ldr	r1, [pc, #60]	; (9001fdd8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
9001fd9a:	4810      	ldr	r0, [pc, #64]	; (9001fddc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001fd9c:	f007 f8a4 	bl	90026ee8 <__aeabi_atexit>
9001fda0:	4c0f      	ldr	r4, [pc, #60]	; (9001fde0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
9001fda2:	7823      	ldrb	r3, [r4, #0]
9001fda4:	f3bf 8f5b 	dmb	ish
9001fda8:	07db      	lsls	r3, r3, #31
9001fdaa:	d40b      	bmi.n	9001fdc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001fdac:	4620      	mov	r0, r4
9001fdae:	f007 f8a2 	bl	90026ef6 <__cxa_guard_acquire>
9001fdb2:	b138      	cbz	r0, 9001fdc4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x4c>
9001fdb4:	4620      	mov	r0, r4
9001fdb6:	f007 f8aa 	bl	90026f0e <__cxa_guard_release>
9001fdba:	4a06      	ldr	r2, [pc, #24]	; (9001fdd4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
9001fdbc:	4909      	ldr	r1, [pc, #36]	; (9001fde4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
9001fdbe:	480a      	ldr	r0, [pc, #40]	; (9001fde8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001fdc0:	f007 f892 	bl	90026ee8 <__aeabi_atexit>
9001fdc4:	4b05      	ldr	r3, [pc, #20]	; (9001fddc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
9001fdc6:	64ab      	str	r3, [r5, #72]	; 0x48
9001fdc8:	4b07      	ldr	r3, [pc, #28]	; (9001fde8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x70>)
9001fdca:	64eb      	str	r3, [r5, #76]	; 0x4c
9001fdcc:	bd38      	pop	{r3, r4, r5, pc}
9001fdce:	bf00      	nop
9001fdd0:	24027080 	.word	0x24027080
9001fdd4:	24000000 	.word	0x24000000
9001fdd8:	9001dc01 	.word	0x9001dc01
9001fddc:	240000d4 	.word	0x240000d4
9001fde0:	24027084 	.word	0x24027084
9001fde4:	9001dbff 	.word	0x9001dbff
9001fde8:	240000d8 	.word	0x240000d8

9001fdec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
9001fdec:	b538      	push	{r3, r4, r5, lr}
9001fdee:	4c15      	ldr	r4, [pc, #84]	; (9001fe44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
9001fdf0:	4605      	mov	r5, r0
9001fdf2:	7823      	ldrb	r3, [r4, #0]
9001fdf4:	f3bf 8f5b 	dmb	ish
9001fdf8:	07da      	lsls	r2, r3, #31
9001fdfa:	d40b      	bmi.n	9001fe14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001fdfc:	4620      	mov	r0, r4
9001fdfe:	f007 f87a 	bl	90026ef6 <__cxa_guard_acquire>
9001fe02:	b138      	cbz	r0, 9001fe14 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x28>
9001fe04:	4620      	mov	r0, r4
9001fe06:	f007 f882 	bl	90026f0e <__cxa_guard_release>
9001fe0a:	4a0f      	ldr	r2, [pc, #60]	; (9001fe48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001fe0c:	490f      	ldr	r1, [pc, #60]	; (9001fe4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
9001fe0e:	4810      	ldr	r0, [pc, #64]	; (9001fe50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001fe10:	f007 f86a 	bl	90026ee8 <__aeabi_atexit>
9001fe14:	4c0f      	ldr	r4, [pc, #60]	; (9001fe54 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
9001fe16:	7823      	ldrb	r3, [r4, #0]
9001fe18:	f3bf 8f5b 	dmb	ish
9001fe1c:	07db      	lsls	r3, r3, #31
9001fe1e:	d40b      	bmi.n	9001fe38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001fe20:	4620      	mov	r0, r4
9001fe22:	f007 f868 	bl	90026ef6 <__cxa_guard_acquire>
9001fe26:	b138      	cbz	r0, 9001fe38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x4c>
9001fe28:	4620      	mov	r0, r4
9001fe2a:	f007 f870 	bl	90026f0e <__cxa_guard_release>
9001fe2e:	4a06      	ldr	r2, [pc, #24]	; (9001fe48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
9001fe30:	4909      	ldr	r1, [pc, #36]	; (9001fe58 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
9001fe32:	480a      	ldr	r0, [pc, #40]	; (9001fe5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001fe34:	f007 f858 	bl	90026ee8 <__aeabi_atexit>
9001fe38:	4b05      	ldr	r3, [pc, #20]	; (9001fe50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
9001fe3a:	642b      	str	r3, [r5, #64]	; 0x40
9001fe3c:	4b07      	ldr	r3, [pc, #28]	; (9001fe5c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x70>)
9001fe3e:	646b      	str	r3, [r5, #68]	; 0x44
9001fe40:	bd38      	pop	{r3, r4, r5, pc}
9001fe42:	bf00      	nop
9001fe44:	24027048 	.word	0x24027048
9001fe48:	24000000 	.word	0x24000000
9001fe4c:	9001dc05 	.word	0x9001dc05
9001fe50:	2400009c 	.word	0x2400009c
9001fe54:	2402704c 	.word	0x2402704c
9001fe58:	9001dc03 	.word	0x9001dc03
9001fe5c:	240000a0 	.word	0x240000a0

9001fe60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
9001fe60:	b538      	push	{r3, r4, r5, lr}
9001fe62:	4c15      	ldr	r4, [pc, #84]	; (9001feb8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
9001fe64:	4605      	mov	r5, r0
9001fe66:	7823      	ldrb	r3, [r4, #0]
9001fe68:	f3bf 8f5b 	dmb	ish
9001fe6c:	07da      	lsls	r2, r3, #31
9001fe6e:	d40b      	bmi.n	9001fe88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001fe70:	4620      	mov	r0, r4
9001fe72:	f007 f840 	bl	90026ef6 <__cxa_guard_acquire>
9001fe76:	b138      	cbz	r0, 9001fe88 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x28>
9001fe78:	4620      	mov	r0, r4
9001fe7a:	f007 f848 	bl	90026f0e <__cxa_guard_release>
9001fe7e:	4a0f      	ldr	r2, [pc, #60]	; (9001febc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001fe80:	490f      	ldr	r1, [pc, #60]	; (9001fec0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
9001fe82:	4810      	ldr	r0, [pc, #64]	; (9001fec4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001fe84:	f007 f830 	bl	90026ee8 <__aeabi_atexit>
9001fe88:	4c0f      	ldr	r4, [pc, #60]	; (9001fec8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
9001fe8a:	7823      	ldrb	r3, [r4, #0]
9001fe8c:	f3bf 8f5b 	dmb	ish
9001fe90:	07db      	lsls	r3, r3, #31
9001fe92:	d40b      	bmi.n	9001feac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fe94:	4620      	mov	r0, r4
9001fe96:	f007 f82e 	bl	90026ef6 <__cxa_guard_acquire>
9001fe9a:	b138      	cbz	r0, 9001feac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x4c>
9001fe9c:	4620      	mov	r0, r4
9001fe9e:	f007 f836 	bl	90026f0e <__cxa_guard_release>
9001fea2:	4a06      	ldr	r2, [pc, #24]	; (9001febc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
9001fea4:	4909      	ldr	r1, [pc, #36]	; (9001fecc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
9001fea6:	480a      	ldr	r0, [pc, #40]	; (9001fed0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001fea8:	f007 f81e 	bl	90026ee8 <__aeabi_atexit>
9001feac:	4b05      	ldr	r3, [pc, #20]	; (9001fec4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
9001feae:	63ab      	str	r3, [r5, #56]	; 0x38
9001feb0:	4b07      	ldr	r3, [pc, #28]	; (9001fed0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x70>)
9001feb2:	63eb      	str	r3, [r5, #60]	; 0x3c
9001feb4:	bd38      	pop	{r3, r4, r5, pc}
9001feb6:	bf00      	nop
9001feb8:	24027068 	.word	0x24027068
9001febc:	24000000 	.word	0x24000000
9001fec0:	9001dc09 	.word	0x9001dc09
9001fec4:	240000bc 	.word	0x240000bc
9001fec8:	2402706c 	.word	0x2402706c
9001fecc:	9001dc07 	.word	0x9001dc07
9001fed0:	240000c0 	.word	0x240000c0

9001fed4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
9001fed4:	b510      	push	{r4, lr}
9001fed6:	4604      	mov	r4, r0
9001fed8:	f7ff ff14 	bl	9001fd04 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
9001fedc:	4620      	mov	r0, r4
9001fede:	f7ff ff85 	bl	9001fdec <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
9001fee2:	4620      	mov	r0, r4
9001fee4:	f7ff ff48 	bl	9001fd78 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
9001fee8:	4620      	mov	r0, r4
9001feea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001feee:	f7ff bfb7 	b.w	9001fe60 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

9001fef4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
9001fef4:	b538      	push	{r3, r4, r5, lr}
9001fef6:	4c15      	ldr	r4, [pc, #84]	; (9001ff4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
9001fef8:	4605      	mov	r5, r0
9001fefa:	7823      	ldrb	r3, [r4, #0]
9001fefc:	f3bf 8f5b 	dmb	ish
9001ff00:	07da      	lsls	r2, r3, #31
9001ff02:	d40b      	bmi.n	9001ff1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001ff04:	4620      	mov	r0, r4
9001ff06:	f006 fff6 	bl	90026ef6 <__cxa_guard_acquire>
9001ff0a:	b138      	cbz	r0, 9001ff1c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
9001ff0c:	4620      	mov	r0, r4
9001ff0e:	f006 fffe 	bl	90026f0e <__cxa_guard_release>
9001ff12:	4a0f      	ldr	r2, [pc, #60]	; (9001ff50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001ff14:	490f      	ldr	r1, [pc, #60]	; (9001ff54 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
9001ff16:	4810      	ldr	r0, [pc, #64]	; (9001ff58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001ff18:	f006 ffe6 	bl	90026ee8 <__aeabi_atexit>
9001ff1c:	4c0f      	ldr	r4, [pc, #60]	; (9001ff5c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
9001ff1e:	7823      	ldrb	r3, [r4, #0]
9001ff20:	f3bf 8f5b 	dmb	ish
9001ff24:	07db      	lsls	r3, r3, #31
9001ff26:	d40b      	bmi.n	9001ff40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001ff28:	4620      	mov	r0, r4
9001ff2a:	f006 ffe4 	bl	90026ef6 <__cxa_guard_acquire>
9001ff2e:	b138      	cbz	r0, 9001ff40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
9001ff30:	4620      	mov	r0, r4
9001ff32:	f006 ffec 	bl	90026f0e <__cxa_guard_release>
9001ff36:	4a06      	ldr	r2, [pc, #24]	; (9001ff50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
9001ff38:	4909      	ldr	r1, [pc, #36]	; (9001ff60 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
9001ff3a:	480a      	ldr	r0, [pc, #40]	; (9001ff64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001ff3c:	f006 ffd4 	bl	90026ee8 <__aeabi_atexit>
9001ff40:	4b05      	ldr	r3, [pc, #20]	; (9001ff58 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
9001ff42:	662b      	str	r3, [r5, #96]	; 0x60
9001ff44:	4b07      	ldr	r3, [pc, #28]	; (9001ff64 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
9001ff46:	666b      	str	r3, [r5, #100]	; 0x64
9001ff48:	bd38      	pop	{r3, r4, r5, pc}
9001ff4a:	bf00      	nop
9001ff4c:	24027050 	.word	0x24027050
9001ff50:	24000000 	.word	0x24000000
9001ff54:	9001dbf5 	.word	0x9001dbf5
9001ff58:	240000a4 	.word	0x240000a4
9001ff5c:	24027054 	.word	0x24027054
9001ff60:	9001dbf3 	.word	0x9001dbf3
9001ff64:	240000a8 	.word	0x240000a8

9001ff68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
9001ff68:	b538      	push	{r3, r4, r5, lr}
9001ff6a:	4c15      	ldr	r4, [pc, #84]	; (9001ffc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
9001ff6c:	4605      	mov	r5, r0
9001ff6e:	7823      	ldrb	r3, [r4, #0]
9001ff70:	f3bf 8f5b 	dmb	ish
9001ff74:	07da      	lsls	r2, r3, #31
9001ff76:	d40b      	bmi.n	9001ff90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001ff78:	4620      	mov	r0, r4
9001ff7a:	f006 ffbc 	bl	90026ef6 <__cxa_guard_acquire>
9001ff7e:	b138      	cbz	r0, 9001ff90 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
9001ff80:	4620      	mov	r0, r4
9001ff82:	f006 ffc4 	bl	90026f0e <__cxa_guard_release>
9001ff86:	4a0f      	ldr	r2, [pc, #60]	; (9001ffc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001ff88:	490f      	ldr	r1, [pc, #60]	; (9001ffc8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
9001ff8a:	4810      	ldr	r0, [pc, #64]	; (9001ffcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001ff8c:	f006 ffac 	bl	90026ee8 <__aeabi_atexit>
9001ff90:	4c0f      	ldr	r4, [pc, #60]	; (9001ffd0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
9001ff92:	7823      	ldrb	r3, [r4, #0]
9001ff94:	f3bf 8f5b 	dmb	ish
9001ff98:	07db      	lsls	r3, r3, #31
9001ff9a:	d40b      	bmi.n	9001ffb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001ff9c:	4620      	mov	r0, r4
9001ff9e:	f006 ffaa 	bl	90026ef6 <__cxa_guard_acquire>
9001ffa2:	b138      	cbz	r0, 9001ffb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
9001ffa4:	4620      	mov	r0, r4
9001ffa6:	f006 ffb2 	bl	90026f0e <__cxa_guard_release>
9001ffaa:	4a06      	ldr	r2, [pc, #24]	; (9001ffc4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
9001ffac:	4909      	ldr	r1, [pc, #36]	; (9001ffd4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
9001ffae:	480a      	ldr	r0, [pc, #40]	; (9001ffd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001ffb0:	f006 ff9a 	bl	90026ee8 <__aeabi_atexit>
9001ffb4:	4b05      	ldr	r3, [pc, #20]	; (9001ffcc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
9001ffb6:	65ab      	str	r3, [r5, #88]	; 0x58
9001ffb8:	4b07      	ldr	r3, [pc, #28]	; (9001ffd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
9001ffba:	65eb      	str	r3, [r5, #92]	; 0x5c
9001ffbc:	bd38      	pop	{r3, r4, r5, pc}
9001ffbe:	bf00      	nop
9001ffc0:	24027028 	.word	0x24027028
9001ffc4:	24000000 	.word	0x24000000
9001ffc8:	9001dbf9 	.word	0x9001dbf9
9001ffcc:	2400007c 	.word	0x2400007c
9001ffd0:	2402702c 	.word	0x2402702c
9001ffd4:	9001dbf7 	.word	0x9001dbf7
9001ffd8:	24000080 	.word	0x24000080

9001ffdc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
9001ffdc:	b510      	push	{r4, lr}
9001ffde:	4604      	mov	r4, r0
9001ffe0:	f7ff ff88 	bl	9001fef4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
9001ffe4:	4620      	mov	r0, r4
9001ffe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
9001ffea:	f7ff bfbd 	b.w	9001ff68 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

9001fff0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
9001fff0:	b538      	push	{r3, r4, r5, lr}
9001fff2:	4c15      	ldr	r4, [pc, #84]	; (90020048 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
9001fff4:	4605      	mov	r5, r0
9001fff6:	7823      	ldrb	r3, [r4, #0]
9001fff8:	f3bf 8f5b 	dmb	ish
9001fffc:	07da      	lsls	r2, r3, #31
9001fffe:	d40b      	bmi.n	90020018 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020000:	4620      	mov	r0, r4
90020002:	f006 ff78 	bl	90026ef6 <__cxa_guard_acquire>
90020006:	b138      	cbz	r0, 90020018 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
90020008:	4620      	mov	r0, r4
9002000a:	f006 ff80 	bl	90026f0e <__cxa_guard_release>
9002000e:	4a0f      	ldr	r2, [pc, #60]	; (9002004c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020010:	490f      	ldr	r1, [pc, #60]	; (90020050 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
90020012:	4810      	ldr	r0, [pc, #64]	; (90020054 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
90020014:	f006 ff68 	bl	90026ee8 <__aeabi_atexit>
90020018:	4c0f      	ldr	r4, [pc, #60]	; (90020058 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
9002001a:	7823      	ldrb	r3, [r4, #0]
9002001c:	f3bf 8f5b 	dmb	ish
90020020:	07db      	lsls	r3, r3, #31
90020022:	d40b      	bmi.n	9002003c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
90020024:	4620      	mov	r0, r4
90020026:	f006 ff66 	bl	90026ef6 <__cxa_guard_acquire>
9002002a:	b138      	cbz	r0, 9002003c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
9002002c:	4620      	mov	r0, r4
9002002e:	f006 ff6e 	bl	90026f0e <__cxa_guard_release>
90020032:	4a06      	ldr	r2, [pc, #24]	; (9002004c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
90020034:	4909      	ldr	r1, [pc, #36]	; (9002005c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
90020036:	480a      	ldr	r0, [pc, #40]	; (90020060 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020038:	f006 ff56 	bl	90026ee8 <__aeabi_atexit>
9002003c:	4b05      	ldr	r3, [pc, #20]	; (90020054 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
9002003e:	672b      	str	r3, [r5, #112]	; 0x70
90020040:	4b07      	ldr	r3, [pc, #28]	; (90020060 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
90020042:	676b      	str	r3, [r5, #116]	; 0x74
90020044:	bd38      	pop	{r3, r4, r5, pc}
90020046:	bf00      	nop
90020048:	24027020 	.word	0x24027020
9002004c:	24000000 	.word	0x24000000
90020050:	9001dbed 	.word	0x9001dbed
90020054:	24000074 	.word	0x24000074
90020058:	24027024 	.word	0x24027024
9002005c:	9001dbeb 	.word	0x9001dbeb
90020060:	24000078 	.word	0x24000078

90020064 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
90020064:	b538      	push	{r3, r4, r5, lr}
90020066:	4c15      	ldr	r4, [pc, #84]	; (900200bc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
90020068:	4605      	mov	r5, r0
9002006a:	7823      	ldrb	r3, [r4, #0]
9002006c:	f3bf 8f5b 	dmb	ish
90020070:	07da      	lsls	r2, r3, #31
90020072:	d40b      	bmi.n	9002008c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
90020074:	4620      	mov	r0, r4
90020076:	f006 ff3e 	bl	90026ef6 <__cxa_guard_acquire>
9002007a:	b138      	cbz	r0, 9002008c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
9002007c:	4620      	mov	r0, r4
9002007e:	f006 ff46 	bl	90026f0e <__cxa_guard_release>
90020082:	4a0f      	ldr	r2, [pc, #60]	; (900200c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
90020084:	490f      	ldr	r1, [pc, #60]	; (900200c4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
90020086:	4810      	ldr	r0, [pc, #64]	; (900200c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
90020088:	f006 ff2e 	bl	90026ee8 <__aeabi_atexit>
9002008c:	4c0f      	ldr	r4, [pc, #60]	; (900200cc <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
9002008e:	7823      	ldrb	r3, [r4, #0]
90020090:	f3bf 8f5b 	dmb	ish
90020094:	07db      	lsls	r3, r3, #31
90020096:	d40b      	bmi.n	900200b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
90020098:	4620      	mov	r0, r4
9002009a:	f006 ff2c 	bl	90026ef6 <__cxa_guard_acquire>
9002009e:	b138      	cbz	r0, 900200b0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
900200a0:	4620      	mov	r0, r4
900200a2:	f006 ff34 	bl	90026f0e <__cxa_guard_release>
900200a6:	4a06      	ldr	r2, [pc, #24]	; (900200c0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
900200a8:	4909      	ldr	r1, [pc, #36]	; (900200d0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
900200aa:	480a      	ldr	r0, [pc, #40]	; (900200d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
900200ac:	f006 ff1c 	bl	90026ee8 <__aeabi_atexit>
900200b0:	4b05      	ldr	r3, [pc, #20]	; (900200c8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
900200b2:	66ab      	str	r3, [r5, #104]	; 0x68
900200b4:	4b07      	ldr	r3, [pc, #28]	; (900200d4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
900200b6:	66eb      	str	r3, [r5, #108]	; 0x6c
900200b8:	bd38      	pop	{r3, r4, r5, pc}
900200ba:	bf00      	nop
900200bc:	24027018 	.word	0x24027018
900200c0:	24000000 	.word	0x24000000
900200c4:	9001dbf1 	.word	0x9001dbf1
900200c8:	2400006c 	.word	0x2400006c
900200cc:	2402701c 	.word	0x2402701c
900200d0:	9001dbef 	.word	0x9001dbef
900200d4:	24000070 	.word	0x24000070

900200d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
900200d8:	b510      	push	{r4, lr}
900200da:	4604      	mov	r4, r0
900200dc:	f7ff ff88 	bl	9001fff0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
900200e0:	4620      	mov	r0, r4
900200e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
900200e6:	f7ff bfbd 	b.w	90020064 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

900200ea <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
900200ea:	b510      	push	{r4, lr}
900200ec:	4604      	mov	r4, r0
900200ee:	f7ff fff3 	bl	900200d8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
900200f2:	4620      	mov	r0, r4
900200f4:	f7ff ff72 	bl	9001ffdc <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
900200f8:	4620      	mov	r0, r4
900200fa:	f7ff fdf9 	bl	9001fcf0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
900200fe:	4620      	mov	r0, r4
90020100:	f7ff fcfa 	bl	9001faf8 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
90020104:	4620      	mov	r0, r4
90020106:	f7ff fd75 	bl	9001fbf4 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
9002010a:	4620      	mov	r0, r4
9002010c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90020110:	f7ff bee0 	b.w	9001fed4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

90020114 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
90020114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020118:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
9002011c:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
90020120:	2d00      	cmp	r5, #0
90020122:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
90020126:	fb05 4c0e 	mla	ip, r5, lr, r4
9002012a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
9002012e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
90020132:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
90020136:	eb02 0a0c 	add.w	sl, r2, ip
9002013a:	8808      	ldrh	r0, [r1, #0]
9002013c:	f2c0 80b0 	blt.w	900202a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
90020140:	45ab      	cmp	fp, r5
90020142:	f340 80ad 	ble.w	900202a0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
90020146:	2c00      	cmp	r4, #0
90020148:	f2c0 80a8 	blt.w	9002029c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
9002014c:	45a6      	cmp	lr, r4
9002014e:	f340 80a5 	ble.w	9002029c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
90020152:	f812 200c 	ldrb.w	r2, [r2, ip]
90020156:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
9002015a:	1c62      	adds	r2, r4, #1
9002015c:	f100 80a3 	bmi.w	900202a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
90020160:	4596      	cmp	lr, r2
90020162:	f340 80a0 	ble.w	900202a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
90020166:	f1b9 0f00 	cmp.w	r9, #0
9002016a:	f000 809c 	beq.w	900202a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
9002016e:	f89a 2001 	ldrb.w	r2, [sl, #1]
90020172:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
90020176:	3501      	adds	r5, #1
90020178:	f100 8099 	bmi.w	900202ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
9002017c:	45ab      	cmp	fp, r5
9002017e:	f340 8096 	ble.w	900202ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
90020182:	2f00      	cmp	r7, #0
90020184:	f000 8093 	beq.w	900202ae <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
90020188:	2c00      	cmp	r4, #0
9002018a:	f2c0 808e 	blt.w	900202aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
9002018e:	45a6      	cmp	lr, r4
90020190:	f340 808b 	ble.w	900202aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
90020194:	f81a 200e 	ldrb.w	r2, [sl, lr]
90020198:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
9002019c:	3401      	adds	r4, #1
9002019e:	f100 8089 	bmi.w	900202b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
900201a2:	45a6      	cmp	lr, r4
900201a4:	f340 8086 	ble.w	900202b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
900201a8:	f1b9 0f00 	cmp.w	r9, #0
900201ac:	f000 8082 	beq.w	900202b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
900201b0:	44d6      	add	lr, sl
900201b2:	f89e 2001 	ldrb.w	r2, [lr, #1]
900201b6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
900201ba:	ea4f 4408 	mov.w	r4, r8, lsl #16
900201be:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
900201c2:	fb19 fe07 	smulbb	lr, r9, r7
900201c6:	f1c7 0210 	rsb	r2, r7, #16
900201ca:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900201ce:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
900201d2:	eba2 0209 	sub.w	r2, r2, r9
900201d6:	ea44 0808 	orr.w	r8, r4, r8
900201da:	ea4f 440c 	mov.w	r4, ip, lsl #16
900201de:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900201e2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
900201e6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900201ea:	ebce 0747 	rsb	r7, lr, r7, lsl #1
900201ee:	ea44 0c0c 	orr.w	ip, r4, ip
900201f2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
900201f6:	fb04 f40c 	mul.w	r4, r4, ip
900201fa:	fb02 4808 	mla	r8, r2, r8, r4
900201fe:	041a      	lsls	r2, r3, #16
90020200:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020204:	b2b4      	uxth	r4, r6
90020206:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002020a:	43f6      	mvns	r6, r6
9002020c:	4313      	orrs	r3, r2
9002020e:	042a      	lsls	r2, r5, #16
90020210:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90020214:	b2f6      	uxtb	r6, r6
90020216:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002021a:	fb0e 8303 	mla	r3, lr, r3, r8
9002021e:	432a      	orrs	r2, r5
90020220:	fb07 3202 	mla	r2, r7, r2, r3
90020224:	10c7      	asrs	r7, r0, #3
90020226:	0d53      	lsrs	r3, r2, #21
90020228:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002022c:	0952      	lsrs	r2, r2, #5
9002022e:	fb17 f706 	smulbb	r7, r7, r6
90020232:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020236:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002023a:	431a      	orrs	r2, r3
9002023c:	b293      	uxth	r3, r2
9002023e:	1202      	asrs	r2, r0, #8
90020240:	121d      	asrs	r5, r3, #8
90020242:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90020246:	00c0      	lsls	r0, r0, #3
90020248:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002024c:	fb12 f206 	smulbb	r2, r2, r6
90020250:	b2c0      	uxtb	r0, r0
90020252:	fb05 2504 	mla	r5, r5, r4, r2
90020256:	10da      	asrs	r2, r3, #3
90020258:	fb10 f006 	smulbb	r0, r0, r6
9002025c:	00db      	lsls	r3, r3, #3
9002025e:	b2ad      	uxth	r5, r5
90020260:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90020264:	b2db      	uxtb	r3, r3
90020266:	fb02 7204 	mla	r2, r2, r4, r7
9002026a:	fb03 0004 	mla	r0, r3, r4, r0
9002026e:	1c6b      	adds	r3, r5, #1
90020270:	b292      	uxth	r2, r2
90020272:	b280      	uxth	r0, r0
90020274:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90020278:	1c43      	adds	r3, r0, #1
9002027a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002027e:	eb03 2310 	add.w	r3, r3, r0, lsr #8
90020282:	1c50      	adds	r0, r2, #1
90020284:	eb00 2212 	add.w	r2, r0, r2, lsr #8
90020288:	f3c3 23c4 	ubfx	r3, r3, #11, #5
9002028c:	0952      	lsrs	r2, r2, #5
9002028e:	432b      	orrs	r3, r5
90020290:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90020294:	4313      	orrs	r3, r2
90020296:	800b      	strh	r3, [r1, #0]
90020298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002029c:	4680      	mov	r8, r0
9002029e:	e75c      	b.n	9002015a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
900202a0:	4684      	mov	ip, r0
900202a2:	4680      	mov	r8, r0
900202a4:	e767      	b.n	90020176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
900202a6:	4684      	mov	ip, r0
900202a8:	e765      	b.n	90020176 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
900202aa:	4605      	mov	r5, r0
900202ac:	e776      	b.n	9002019c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
900202ae:	4603      	mov	r3, r0
900202b0:	4605      	mov	r5, r0
900202b2:	e782      	b.n	900201ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
900202b4:	4603      	mov	r3, r0
900202b6:	e780      	b.n	900201ba <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

900202b8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900202b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900202bc:	b099      	sub	sp, #100	; 0x64
900202be:	9215      	str	r2, [sp, #84]	; 0x54
900202c0:	9309      	str	r3, [sp, #36]	; 0x24
900202c2:	9a27      	ldr	r2, [sp, #156]	; 0x9c
900202c4:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
900202c8:	9016      	str	r0, [sp, #88]	; 0x58
900202ca:	930d      	str	r3, [sp, #52]	; 0x34
900202cc:	6850      	ldr	r0, [r2, #4]
900202ce:	910c      	str	r1, [sp, #48]	; 0x30
900202d0:	6812      	ldr	r2, [r2, #0]
900202d2:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
900202d6:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
900202da:	fb00 1303 	mla	r3, r0, r3, r1
900202de:	eb02 0843 	add.w	r8, r2, r3, lsl #1
900202e2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900202e4:	681b      	ldr	r3, [r3, #0]
900202e6:	930b      	str	r3, [sp, #44]	; 0x2c
900202e8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900202ea:	685e      	ldr	r6, [r3, #4]
900202ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900202ee:	3604      	adds	r6, #4
900202f0:	43db      	mvns	r3, r3
900202f2:	b2db      	uxtb	r3, r3
900202f4:	930a      	str	r3, [sp, #40]	; 0x28
900202f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900202f8:	2b00      	cmp	r3, #0
900202fa:	dc03      	bgt.n	90020304 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
900202fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
900202fe:	2b00      	cmp	r3, #0
90020300:	f340 8225 	ble.w	9002074e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
90020304:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020306:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002030a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002030e:	1e48      	subs	r0, r1, #1
90020310:	1e57      	subs	r7, r2, #1
90020312:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020314:	2b00      	cmp	r3, #0
90020316:	f340 80e3 	ble.w	900204e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
9002031a:	ea5f 4c2a 	movs.w	ip, sl, asr #16
9002031e:	ea4f 4325 	mov.w	r3, r5, asr #16
90020322:	d406      	bmi.n	90020332 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020324:	4584      	cmp	ip, r0
90020326:	da04      	bge.n	90020332 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020328:	2b00      	cmp	r3, #0
9002032a:	db02      	blt.n	90020332 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
9002032c:	42bb      	cmp	r3, r7
9002032e:	f2c0 80d8 	blt.w	900204e2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90020332:	f11c 0c01 	adds.w	ip, ip, #1
90020336:	f100 80c9 	bmi.w	900204cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002033a:	4561      	cmp	r1, ip
9002033c:	f2c0 80c6 	blt.w	900204cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020340:	3301      	adds	r3, #1
90020342:	f100 80c3 	bmi.w	900204cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
90020346:	429a      	cmp	r2, r3
90020348:	f2c0 80c0 	blt.w	900204cc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002034c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90020350:	4647      	mov	r7, r8
90020352:	f1bb 0f00 	cmp.w	fp, #0
90020356:	f340 80e3 	ble.w	90020520 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
9002035a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
9002035c:	ea4f 4c25 	mov.w	ip, r5, asr #16
90020360:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90020362:	f3ca 3003 	ubfx	r0, sl, #12, #4
90020366:	f8d2 e00c 	ldr.w	lr, [r2, #12]
9002036a:	ea5f 422a 	movs.w	r2, sl, asr #16
9002036e:	f3c5 3103 	ubfx	r1, r5, #12, #4
90020372:	689b      	ldr	r3, [r3, #8]
90020374:	f100 8121 	bmi.w	900205ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020378:	f103 39ff 	add.w	r9, r3, #4294967295
9002037c:	454a      	cmp	r2, r9
9002037e:	f280 811c 	bge.w	900205ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020382:	f1bc 0f00 	cmp.w	ip, #0
90020386:	f2c0 8118 	blt.w	900205ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
9002038a:	f10e 39ff 	add.w	r9, lr, #4294967295
9002038e:	45cc      	cmp	ip, r9
90020390:	f280 8113 	bge.w	900205ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
90020394:	b21b      	sxth	r3, r3
90020396:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90020398:	fb0c 2203 	mla	r2, ip, r3, r2
9002039c:	eb04 0902 	add.w	r9, r4, r2
900203a0:	5ca2      	ldrb	r2, [r4, r2]
900203a2:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
900203a6:	2800      	cmp	r0, #0
900203a8:	f000 80fe 	beq.w	900205a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
900203ac:	f899 2001 	ldrb.w	r2, [r9, #1]
900203b0:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
900203b4:	9211      	str	r2, [sp, #68]	; 0x44
900203b6:	b151      	cbz	r1, 900203ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900203b8:	eb09 0203 	add.w	r2, r9, r3
900203bc:	f819 3003 	ldrb.w	r3, [r9, r3]
900203c0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900203c4:	930f      	str	r3, [sp, #60]	; 0x3c
900203c6:	7853      	ldrb	r3, [r2, #1]
900203c8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900203cc:	9312      	str	r3, [sp, #72]	; 0x48
900203ce:	9b11      	ldr	r3, [sp, #68]	; 0x44
900203d0:	fb10 f201 	smulbb	r2, r0, r1
900203d4:	9c12      	ldr	r4, [sp, #72]	; 0x48
900203d6:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900203da:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900203de:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
900203e2:	10d2      	asrs	r2, r2, #3
900203e4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900203e8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
900203ec:	ea4c 0c03 	orr.w	ip, ip, r3
900203f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
900203f2:	041b      	lsls	r3, r3, #16
900203f4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900203f8:	4323      	orrs	r3, r4
900203fa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900203fc:	4353      	muls	r3, r2
900203fe:	fb09 330c 	mla	r3, r9, ip, r3
90020402:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
90020406:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
9002040a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
9002040e:	ea4c 0e0e 	orr.w	lr, ip, lr
90020412:	f1c1 0c10 	rsb	ip, r1, #16
90020416:	ebac 0c00 	sub.w	ip, ip, r0
9002041a:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002041e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
90020422:	fb0c 3c0e 	mla	ip, ip, lr, r3
90020426:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020428:	0418      	lsls	r0, r3, #16
9002042a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002042e:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90020432:	4318      	orrs	r0, r3
90020434:	fb02 c200 	mla	r2, r2, r0, ip
90020438:	8838      	ldrh	r0, [r7, #0]
9002043a:	0d53      	lsrs	r3, r2, #21
9002043c:	0952      	lsrs	r2, r2, #5
9002043e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020442:	1201      	asrs	r1, r0, #8
90020444:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020448:	ea4f 0ee0 	mov.w	lr, r0, asr #3
9002044c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90020450:	00c0      	lsls	r0, r0, #3
90020452:	431a      	orrs	r2, r3
90020454:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
90020458:	fb11 f104 	smulbb	r1, r1, r4
9002045c:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
90020460:	b292      	uxth	r2, r2
90020462:	fb1e fe04 	smulbb	lr, lr, r4
90020466:	b2c0      	uxtb	r0, r0
90020468:	ea4f 2c22 	mov.w	ip, r2, asr #8
9002046c:	fb10 f004 	smulbb	r0, r0, r4
90020470:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90020474:	fb0c 1c03 	mla	ip, ip, r3, r1
90020478:	10d1      	asrs	r1, r2, #3
9002047a:	00d2      	lsls	r2, r2, #3
9002047c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90020480:	fa1f fc8c 	uxth.w	ip, ip
90020484:	b2d2      	uxtb	r2, r2
90020486:	fb01 e103 	mla	r1, r1, r3, lr
9002048a:	fb02 0303 	mla	r3, r2, r3, r0
9002048e:	b289      	uxth	r1, r1
90020490:	b29a      	uxth	r2, r3
90020492:	f10c 0301 	add.w	r3, ip, #1
90020496:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
9002049a:	1c53      	adds	r3, r2, #1
9002049c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900204a0:	1c4a      	adds	r2, r1, #1
900204a2:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900204a6:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900204aa:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900204ae:	0949      	lsrs	r1, r1, #5
900204b0:	ea43 030c 	orr.w	r3, r3, ip
900204b4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900204b8:	430b      	orrs	r3, r1
900204ba:	803b      	strh	r3, [r7, #0]
900204bc:	9b25      	ldr	r3, [sp, #148]	; 0x94
900204be:	3702      	adds	r7, #2
900204c0:	f10b 3bff 	add.w	fp, fp, #4294967295
900204c4:	449a      	add	sl, r3
900204c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
900204c8:	441d      	add	r5, r3
900204ca:	e742      	b.n	90020352 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
900204cc:	9b25      	ldr	r3, [sp, #148]	; 0x94
900204ce:	f108 0802 	add.w	r8, r8, #2
900204d2:	449a      	add	sl, r3
900204d4:	9b26      	ldr	r3, [sp, #152]	; 0x98
900204d6:	441d      	add	r5, r3
900204d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
900204da:	3b01      	subs	r3, #1
900204dc:	9309      	str	r3, [sp, #36]	; 0x24
900204de:	e718      	b.n	90020312 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
900204e0:	d023      	beq.n	9002052a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900204e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900204e4:	9825      	ldr	r0, [sp, #148]	; 0x94
900204e6:	3b01      	subs	r3, #1
900204e8:	fb00 a003 	mla	r0, r0, r3, sl
900204ec:	1400      	asrs	r0, r0, #16
900204ee:	f53f af2d 	bmi.w	9002034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900204f2:	3901      	subs	r1, #1
900204f4:	4288      	cmp	r0, r1
900204f6:	f6bf af29 	bge.w	9002034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
900204fa:	9926      	ldr	r1, [sp, #152]	; 0x98
900204fc:	fb01 5303 	mla	r3, r1, r3, r5
90020500:	141b      	asrs	r3, r3, #16
90020502:	f53f af23 	bmi.w	9002034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
90020506:	3a01      	subs	r2, #1
90020508:	4293      	cmp	r3, r2
9002050a:	f6bf af1f 	bge.w	9002034c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002050e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
90020512:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
90020516:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
9002051a:	f1be 0f00 	cmp.w	lr, #0
9002051e:	dc6c      	bgt.n	900205fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
90020520:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020522:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90020526:	eb08 0844 	add.w	r8, r8, r4, lsl #1
9002052a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002052c:	2b00      	cmp	r3, #0
9002052e:	f340 810e 	ble.w	9002074e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
90020532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90020536:	9b22      	ldr	r3, [sp, #136]	; 0x88
90020538:	ee30 0a04 	vadd.f32	s0, s0, s8
9002053c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020540:	eef0 6a62 	vmov.f32	s13, s5
90020544:	eec7 7a00 	vdiv.f32	s15, s14, s0
90020548:	ee31 1a05 	vadd.f32	s2, s2, s10
9002054c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90020550:	ee16 aa90 	vmov	sl, s13
90020554:	eef0 6a43 	vmov.f32	s13, s6
90020558:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002055c:	ee16 5a90 	vmov	r5, s13
90020560:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020564:	ee61 7a27 	vmul.f32	s15, s2, s15
90020568:	ee77 2a62 	vsub.f32	s5, s14, s5
9002056c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020570:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020574:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020578:	ee12 2a90 	vmov	r2, s5
9002057c:	eef0 2a47 	vmov.f32	s5, s14
90020580:	fb92 f3f3 	sdiv	r3, r2, r3
90020584:	ee13 2a10 	vmov	r2, s6
90020588:	9325      	str	r3, [sp, #148]	; 0x94
9002058a:	9b22      	ldr	r3, [sp, #136]	; 0x88
9002058c:	eeb0 3a67 	vmov.f32	s6, s15
90020590:	fb92 f3f3 	sdiv	r3, r2, r3
90020594:	9326      	str	r3, [sp, #152]	; 0x98
90020596:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020598:	9a15      	ldr	r2, [sp, #84]	; 0x54
9002059a:	3b01      	subs	r3, #1
9002059c:	930c      	str	r3, [sp, #48]	; 0x30
9002059e:	9b22      	ldr	r3, [sp, #136]	; 0x88
900205a0:	bf08      	it	eq
900205a2:	4613      	moveq	r3, r2
900205a4:	9309      	str	r3, [sp, #36]	; 0x24
900205a6:	e6a6      	b.n	900202f6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900205a8:	2900      	cmp	r1, #0
900205aa:	f43f af10 	beq.w	900203ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900205ae:	f819 3003 	ldrb.w	r3, [r9, r3]
900205b2:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
900205b6:	930f      	str	r3, [sp, #60]	; 0x3c
900205b8:	e709      	b.n	900203ce <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
900205ba:	f112 0901 	adds.w	r9, r2, #1
900205be:	f53f af7d 	bmi.w	900204bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900205c2:	454b      	cmp	r3, r9
900205c4:	f6ff af7a 	blt.w	900204bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900205c8:	f11c 0901 	adds.w	r9, ip, #1
900205cc:	f53f af76 	bmi.w	900204bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900205d0:	45ce      	cmp	lr, r9
900205d2:	f6ff af73 	blt.w	900204bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900205d6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900205d8:	b21b      	sxth	r3, r3
900205da:	9202      	str	r2, [sp, #8]
900205dc:	fa0f f28e 	sxth.w	r2, lr
900205e0:	9300      	str	r3, [sp, #0]
900205e2:	4633      	mov	r3, r6
900205e4:	9201      	str	r2, [sp, #4]
900205e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900205e8:	e9cd 1405 	strd	r1, r4, [sp, #20]
900205ec:	e9cd c003 	strd	ip, r0, [sp, #12]
900205f0:	4639      	mov	r1, r7
900205f2:	9816      	ldr	r0, [sp, #88]	; 0x58
900205f4:	f7ff fd8e 	bl	90020114 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
900205f8:	e760      	b.n	900204bc <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
900205fa:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
900205fc:	ea4f 422a 	mov.w	r2, sl, asr #16
90020600:	1429      	asrs	r1, r5, #16
90020602:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90020604:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020608:	f3ca 3c03 	ubfx	ip, sl, #12, #4
9002060c:	f3c5 3003 	ubfx	r0, r5, #12, #4
90020610:	fb03 2101 	mla	r1, r3, r1, r2
90020614:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90020616:	440a      	add	r2, r1
90020618:	5c61      	ldrb	r1, [r4, r1]
9002061a:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
9002061e:	f1bc 0f00 	cmp.w	ip, #0
90020622:	f000 808c 	beq.w	9002073e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
90020626:	7857      	ldrb	r7, [r2, #1]
90020628:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
9002062c:	9413      	str	r4, [sp, #76]	; 0x4c
9002062e:	b140      	cbz	r0, 90020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020630:	18d7      	adds	r7, r2, r3
90020632:	5cd3      	ldrb	r3, [r2, r3]
90020634:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020638:	9310      	str	r3, [sp, #64]	; 0x40
9002063a:	787b      	ldrb	r3, [r7, #1]
9002063c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
90020640:	9314      	str	r3, [sp, #80]	; 0x50
90020642:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90020644:	fb1c f200 	smulbb	r2, ip, r0
90020648:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002064a:	f10e 3eff 	add.w	lr, lr, #4294967295
9002064e:	041f      	lsls	r7, r3, #16
90020650:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020654:	10d2      	asrs	r2, r2, #3
90020656:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
9002065a:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
9002065e:	431f      	orrs	r7, r3
90020660:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
90020664:	9317      	str	r3, [sp, #92]	; 0x5c
90020666:	9b14      	ldr	r3, [sp, #80]	; 0x50
90020668:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9002066a:	041b      	lsls	r3, r3, #16
9002066c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020670:	ea43 030b 	orr.w	r3, r3, fp
90020674:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020678:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002067c:	4353      	muls	r3, r2
9002067e:	fb04 3707 	mla	r7, r4, r7, r3
90020682:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020686:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90020688:	ea43 0b01 	orr.w	fp, r3, r1
9002068c:	f1c0 0110 	rsb	r1, r0, #16
90020690:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020692:	eba1 0c0c 	sub.w	ip, r1, ip
90020696:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
9002069a:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
9002069e:	fb0c 770b 	mla	r7, ip, fp, r7
900206a2:	ea4f 4c03 	mov.w	ip, r3, lsl #16
900206a6:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
900206aa:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900206ae:	ea4c 0c0b 	orr.w	ip, ip, fp
900206b2:	fb02 770c 	mla	r7, r2, ip, r7
900206b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
900206b8:	0d79      	lsrs	r1, r7, #21
900206ba:	8812      	ldrh	r2, [r2, #0]
900206bc:	097f      	lsrs	r7, r7, #5
900206be:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900206c2:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900206c6:	430f      	orrs	r7, r1
900206c8:	1211      	asrs	r1, r2, #8
900206ca:	b2bb      	uxth	r3, r7
900206cc:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900206d0:	10d7      	asrs	r7, r2, #3
900206d2:	fb11 f104 	smulbb	r1, r1, r4
900206d6:	1218      	asrs	r0, r3, #8
900206d8:	00d2      	lsls	r2, r2, #3
900206da:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900206de:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900206e2:	fb17 f704 	smulbb	r7, r7, r4
900206e6:	b2d2      	uxtb	r2, r2
900206e8:	fb00 1009 	mla	r0, r0, r9, r1
900206ec:	10d9      	asrs	r1, r3, #3
900206ee:	fb12 f204 	smulbb	r2, r2, r4
900206f2:	00db      	lsls	r3, r3, #3
900206f4:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900206f8:	b280      	uxth	r0, r0
900206fa:	b2db      	uxtb	r3, r3
900206fc:	fb01 7109 	mla	r1, r1, r9, r7
90020700:	fb03 2309 	mla	r3, r3, r9, r2
90020704:	1c42      	adds	r2, r0, #1
90020706:	b289      	uxth	r1, r1
90020708:	b29b      	uxth	r3, r3
9002070a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002070e:	1c4f      	adds	r7, r1, #1
90020710:	1c5a      	adds	r2, r3, #1
90020712:	eb07 2111 	add.w	r1, r7, r1, lsr #8
90020716:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
9002071a:	eb02 2213 	add.w	r2, r2, r3, lsr #8
9002071e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020720:	0949      	lsrs	r1, r1, #5
90020722:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90020726:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002072a:	4310      	orrs	r0, r2
9002072c:	4308      	orrs	r0, r1
9002072e:	f823 0b02 	strh.w	r0, [r3], #2
90020732:	930e      	str	r3, [sp, #56]	; 0x38
90020734:	9b25      	ldr	r3, [sp, #148]	; 0x94
90020736:	449a      	add	sl, r3
90020738:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002073a:	441d      	add	r5, r3
9002073c:	e6ed      	b.n	9002051a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
9002073e:	2800      	cmp	r0, #0
90020740:	f43f af7f 	beq.w	90020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90020744:	5cd3      	ldrb	r3, [r2, r3]
90020746:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
9002074a:	9310      	str	r3, [sp, #64]	; 0x40
9002074c:	e779      	b.n	90020642 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
9002074e:	b019      	add	sp, #100	; 0x64
90020750:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
90020754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90020758:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
9002075c:	f9bd e020 	ldrsh.w	lr, [sp, #32]
90020760:	f1b8 0f00 	cmp.w	r8, #0
90020764:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
90020768:	fb08 470e 	mla	r7, r8, lr, r4
9002076c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
90020770:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
90020774:	eb02 0907 	add.w	r9, r2, r7
90020778:	8808      	ldrh	r0, [r1, #0]
9002077a:	db67      	blt.n	9002084c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
9002077c:	45c2      	cmp	sl, r8
9002077e:	dd65      	ble.n	9002084c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
90020780:	2c00      	cmp	r4, #0
90020782:	db61      	blt.n	90020848 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020784:	45a6      	cmp	lr, r4
90020786:	dd5f      	ble.n	90020848 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
90020788:	5dd2      	ldrb	r2, [r2, r7]
9002078a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
9002078e:	1c62      	adds	r2, r4, #1
90020790:	d45f      	bmi.n	90020852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020792:	4596      	cmp	lr, r2
90020794:	dd5d      	ble.n	90020852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
90020796:	2d00      	cmp	r5, #0
90020798:	d05b      	beq.n	90020852 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
9002079a:	f899 2001 	ldrb.w	r2, [r9, #1]
9002079e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
900207a2:	f118 0801 	adds.w	r8, r8, #1
900207a6:	d458      	bmi.n	9002085a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900207a8:	45c2      	cmp	sl, r8
900207aa:	dd56      	ble.n	9002085a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900207ac:	2e00      	cmp	r6, #0
900207ae:	d054      	beq.n	9002085a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
900207b0:	2c00      	cmp	r4, #0
900207b2:	db50      	blt.n	90020856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
900207b4:	45a6      	cmp	lr, r4
900207b6:	dd4e      	ble.n	90020856 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
900207b8:	f819 200e 	ldrb.w	r2, [r9, lr]
900207bc:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
900207c0:	3401      	adds	r4, #1
900207c2:	d407      	bmi.n	900207d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
900207c4:	45a6      	cmp	lr, r4
900207c6:	dd05      	ble.n	900207d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
900207c8:	b125      	cbz	r5, 900207d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
900207ca:	44ce      	add	lr, r9
900207cc:	f89e 0001 	ldrb.w	r0, [lr, #1]
900207d0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
900207d4:	fb15 f406 	smulbb	r4, r5, r6
900207d8:	ea4f 430c 	mov.w	r3, ip, lsl #16
900207dc:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900207e0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900207e4:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900207e8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900207ec:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900207f0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900207f4:	ea43 0c0c 	orr.w	ip, r3, ip
900207f8:	f1c6 0310 	rsb	r3, r6, #16
900207fc:	ea4e 0707 	orr.w	r7, lr, r7
90020800:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
90020804:	1b5b      	subs	r3, r3, r5
90020806:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
9002080a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
9002080e:	437d      	muls	r5, r7
90020810:	fb03 5c0c 	mla	ip, r3, ip, r5
90020814:	0403      	lsls	r3, r0, #16
90020816:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002081a:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002081e:	4318      	orrs	r0, r3
90020820:	0413      	lsls	r3, r2, #16
90020822:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90020826:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
9002082a:	fb04 c000 	mla	r0, r4, r0, ip
9002082e:	4313      	orrs	r3, r2
90020830:	fb06 0003 	mla	r0, r6, r3, r0
90020834:	0d43      	lsrs	r3, r0, #21
90020836:	0940      	lsrs	r0, r0, #5
90020838:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002083c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90020840:	4318      	orrs	r0, r3
90020842:	8008      	strh	r0, [r1, #0]
90020844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90020848:	4684      	mov	ip, r0
9002084a:	e7a0      	b.n	9002078e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
9002084c:	4607      	mov	r7, r0
9002084e:	4684      	mov	ip, r0
90020850:	e7a7      	b.n	900207a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020852:	4607      	mov	r7, r0
90020854:	e7a5      	b.n	900207a2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
90020856:	4602      	mov	r2, r0
90020858:	e7b2      	b.n	900207c0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
9002085a:	4602      	mov	r2, r0
9002085c:	e7ba      	b.n	900207d4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

9002085e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
9002085e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020862:	b093      	sub	sp, #76	; 0x4c
90020864:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
90020868:	920f      	str	r2, [sp, #60]	; 0x3c
9002086a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002086c:	9010      	str	r0, [sp, #64]	; 0x40
9002086e:	9108      	str	r1, [sp, #32]
90020870:	6850      	ldr	r0, [r2, #4]
90020872:	9306      	str	r3, [sp, #24]
90020874:	6812      	ldr	r2, [r2, #0]
90020876:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
9002087a:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
9002087e:	fb00 1303 	mla	r3, r0, r3, r1
90020882:	eb02 0943 	add.w	r9, r2, r3, lsl #1
90020886:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020888:	681b      	ldr	r3, [r3, #0]
9002088a:	9307      	str	r3, [sp, #28]
9002088c:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002088e:	685f      	ldr	r7, [r3, #4]
90020890:	3704      	adds	r7, #4
90020892:	9b08      	ldr	r3, [sp, #32]
90020894:	2b00      	cmp	r3, #0
90020896:	dc03      	bgt.n	900208a0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
90020898:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
9002089a:	2b00      	cmp	r3, #0
9002089c:	f340 81b2 	ble.w	90020c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
900208a0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900208a2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900208a6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900208aa:	1e48      	subs	r0, r1, #1
900208ac:	f102 3cff 	add.w	ip, r2, #4294967295
900208b0:	9b06      	ldr	r3, [sp, #24]
900208b2:	2b00      	cmp	r3, #0
900208b4:	f340 80a9 	ble.w	90020a0a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900208b8:	ea5f 4e24 	movs.w	lr, r4, asr #16
900208bc:	ea4f 4326 	mov.w	r3, r6, asr #16
900208c0:	d406      	bmi.n	900208d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900208c2:	4586      	cmp	lr, r0
900208c4:	da04      	bge.n	900208d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900208c6:	2b00      	cmp	r3, #0
900208c8:	db02      	blt.n	900208d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
900208ca:	4563      	cmp	r3, ip
900208cc:	f2c0 809e 	blt.w	90020a0c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
900208d0:	f11e 0e01 	adds.w	lr, lr, #1
900208d4:	f100 808f 	bmi.w	900209f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900208d8:	4571      	cmp	r1, lr
900208da:	f2c0 808c 	blt.w	900209f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900208de:	3301      	adds	r3, #1
900208e0:	f100 8089 	bmi.w	900209f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900208e4:	429a      	cmp	r2, r3
900208e6:	f2c0 8086 	blt.w	900209f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
900208ea:	f8dd b018 	ldr.w	fp, [sp, #24]
900208ee:	46c8      	mov	r8, r9
900208f0:	f1bb 0f00 	cmp.w	fp, #0
900208f4:	f340 80a6 	ble.w	90020a44 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
900208f8:	9a24      	ldr	r2, [sp, #144]	; 0x90
900208fa:	ea4f 4c26 	mov.w	ip, r6, asr #16
900208fe:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020900:	f3c4 3003 	ubfx	r0, r4, #12, #4
90020904:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90020908:	1422      	asrs	r2, r4, #16
9002090a:	f3c6 3103 	ubfx	r1, r6, #12, #4
9002090e:	689b      	ldr	r3, [r3, #8]
90020910:	f100 80e3 	bmi.w	90020ada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020914:	f103 3aff 	add.w	sl, r3, #4294967295
90020918:	4552      	cmp	r2, sl
9002091a:	f280 80de 	bge.w	90020ada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
9002091e:	f1bc 0f00 	cmp.w	ip, #0
90020922:	f2c0 80da 	blt.w	90020ada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020926:	f10e 3aff 	add.w	sl, lr, #4294967295
9002092a:	45d4      	cmp	ip, sl
9002092c:	f280 80d5 	bge.w	90020ada <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
90020930:	b21b      	sxth	r3, r3
90020932:	9d07      	ldr	r5, [sp, #28]
90020934:	fb0c 2203 	mla	r2, ip, r3, r2
90020938:	eb05 0a02 	add.w	sl, r5, r2
9002093c:	5caa      	ldrb	r2, [r5, r2]
9002093e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
90020942:	2800      	cmp	r0, #0
90020944:	f000 80c0 	beq.w	90020ac8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
90020948:	f89a 2001 	ldrb.w	r2, [sl, #1]
9002094c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
90020950:	920b      	str	r2, [sp, #44]	; 0x2c
90020952:	b151      	cbz	r1, 9002096a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020954:	eb0a 0203 	add.w	r2, sl, r3
90020958:	f81a 3003 	ldrb.w	r3, [sl, r3]
9002095c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020960:	9309      	str	r3, [sp, #36]	; 0x24
90020962:	7853      	ldrb	r3, [r2, #1]
90020964:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020968:	930c      	str	r3, [sp, #48]	; 0x30
9002096a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002096c:	fb10 f201 	smulbb	r2, r0, r1
90020970:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90020972:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020976:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002097a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002097e:	10d2      	asrs	r2, r2, #3
90020980:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020984:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
90020988:	ea4c 0c03 	orr.w	ip, ip, r3
9002098c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002098e:	041b      	lsls	r3, r3, #16
90020990:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020994:	432b      	orrs	r3, r5
90020996:	4353      	muls	r3, r2
90020998:	fb0a 330c 	mla	r3, sl, ip, r3
9002099c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
900209a0:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900209a4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900209a8:	ea4c 0e0e 	orr.w	lr, ip, lr
900209ac:	f1c1 0c10 	rsb	ip, r1, #16
900209b0:	ebac 0c00 	sub.w	ip, ip, r0
900209b4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
900209b8:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
900209bc:	fb0c 3c0e 	mla	ip, ip, lr, r3
900209c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900209c2:	0418      	lsls	r0, r3, #16
900209c4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
900209c8:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900209cc:	4318      	orrs	r0, r3
900209ce:	fb02 c200 	mla	r2, r2, r0, ip
900209d2:	0d53      	lsrs	r3, r2, #21
900209d4:	0952      	lsrs	r2, r2, #5
900209d6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900209da:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900209de:	431a      	orrs	r2, r3
900209e0:	f8a8 2000 	strh.w	r2, [r8]
900209e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900209e6:	f108 0802 	add.w	r8, r8, #2
900209ea:	f10b 3bff 	add.w	fp, fp, #4294967295
900209ee:	441c      	add	r4, r3
900209f0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900209f2:	441e      	add	r6, r3
900209f4:	e77c      	b.n	900208f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900209f6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900209f8:	f109 0902 	add.w	r9, r9, #2
900209fc:	441c      	add	r4, r3
900209fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020a00:	441e      	add	r6, r3
90020a02:	9b06      	ldr	r3, [sp, #24]
90020a04:	3b01      	subs	r3, #1
90020a06:	9306      	str	r3, [sp, #24]
90020a08:	e752      	b.n	900208b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
90020a0a:	d020      	beq.n	90020a4e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
90020a0c:	9b06      	ldr	r3, [sp, #24]
90020a0e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020a10:	3b01      	subs	r3, #1
90020a12:	fb00 4003 	mla	r0, r0, r3, r4
90020a16:	1400      	asrs	r0, r0, #16
90020a18:	f53f af67 	bmi.w	900208ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020a1c:	3901      	subs	r1, #1
90020a1e:	4288      	cmp	r0, r1
90020a20:	f6bf af63 	bge.w	900208ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020a24:	9920      	ldr	r1, [sp, #128]	; 0x80
90020a26:	fb01 6303 	mla	r3, r1, r3, r6
90020a2a:	141b      	asrs	r3, r3, #16
90020a2c:	f53f af5d 	bmi.w	900208ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020a30:	3a01      	subs	r2, #1
90020a32:	4293      	cmp	r3, r2
90020a34:	f6bf af59 	bge.w	900208ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
90020a38:	f8dd 8018 	ldr.w	r8, [sp, #24]
90020a3c:	46ca      	mov	sl, r9
90020a3e:	f1b8 0f00 	cmp.w	r8, #0
90020a42:	dc67      	bgt.n	90020b14 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
90020a44:	9b06      	ldr	r3, [sp, #24]
90020a46:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90020a4a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
90020a4e:	9b08      	ldr	r3, [sp, #32]
90020a50:	2b00      	cmp	r3, #0
90020a52:	f340 80d7 	ble.w	90020c04 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
90020a56:	ee30 0a04 	vadd.f32	s0, s0, s8
90020a5a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020a5c:	ee70 0aa4 	vadd.f32	s1, s1, s9
90020a60:	eeb0 6a62 	vmov.f32	s12, s5
90020a64:	eec6 7a80 	vdiv.f32	s15, s13, s0
90020a68:	ee31 1a05 	vadd.f32	s2, s2, s10
90020a6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020a70:	ee16 4a10 	vmov	r4, s12
90020a74:	eeb0 6a43 	vmov.f32	s12, s6
90020a78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
90020a7c:	ee16 6a10 	vmov	r6, s12
90020a80:	ee20 7aa7 	vmul.f32	s14, s1, s15
90020a84:	ee61 7a27 	vmul.f32	s15, s2, s15
90020a88:	ee77 2a62 	vsub.f32	s5, s14, s5
90020a8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
90020a90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90020a94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90020a98:	ee12 2a90 	vmov	r2, s5
90020a9c:	eef0 2a47 	vmov.f32	s5, s14
90020aa0:	fb92 f3f3 	sdiv	r3, r2, r3
90020aa4:	ee13 2a10 	vmov	r2, s6
90020aa8:	931f      	str	r3, [sp, #124]	; 0x7c
90020aaa:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020aac:	eeb0 3a67 	vmov.f32	s6, s15
90020ab0:	fb92 f3f3 	sdiv	r3, r2, r3
90020ab4:	9320      	str	r3, [sp, #128]	; 0x80
90020ab6:	9b08      	ldr	r3, [sp, #32]
90020ab8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90020aba:	3b01      	subs	r3, #1
90020abc:	9308      	str	r3, [sp, #32]
90020abe:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90020ac0:	bf08      	it	eq
90020ac2:	4613      	moveq	r3, r2
90020ac4:	9306      	str	r3, [sp, #24]
90020ac6:	e6e4      	b.n	90020892 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90020ac8:	2900      	cmp	r1, #0
90020aca:	f43f af4e 	beq.w	9002096a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020ace:	f81a 3003 	ldrb.w	r3, [sl, r3]
90020ad2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020ad6:	9309      	str	r3, [sp, #36]	; 0x24
90020ad8:	e747      	b.n	9002096a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
90020ada:	f112 0a01 	adds.w	sl, r2, #1
90020ade:	d481      	bmi.n	900209e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020ae0:	4553      	cmp	r3, sl
90020ae2:	f6ff af7f 	blt.w	900209e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020ae6:	f11c 0a01 	adds.w	sl, ip, #1
90020aea:	f53f af7b 	bmi.w	900209e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020aee:	45d6      	cmp	lr, sl
90020af0:	f6ff af78 	blt.w	900209e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020af4:	b21b      	sxth	r3, r3
90020af6:	e9cd 2c02 	strd	r2, ip, [sp, #8]
90020afa:	fa0f f28e 	sxth.w	r2, lr
90020afe:	9300      	str	r3, [sp, #0]
90020b00:	463b      	mov	r3, r7
90020b02:	9201      	str	r2, [sp, #4]
90020b04:	9a07      	ldr	r2, [sp, #28]
90020b06:	e9cd 0104 	strd	r0, r1, [sp, #16]
90020b0a:	4641      	mov	r1, r8
90020b0c:	9810      	ldr	r0, [sp, #64]	; 0x40
90020b0e:	f7ff fe21 	bl	90020754 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90020b12:	e767      	b.n	900209e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
90020b14:	9b24      	ldr	r3, [sp, #144]	; 0x90
90020b16:	1422      	asrs	r2, r4, #16
90020b18:	1431      	asrs	r1, r6, #16
90020b1a:	9d07      	ldr	r5, [sp, #28]
90020b1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90020b20:	f3c4 3e03 	ubfx	lr, r4, #12, #4
90020b24:	f3c6 3003 	ubfx	r0, r6, #12, #4
90020b28:	fb03 2101 	mla	r1, r3, r1, r2
90020b2c:	9a07      	ldr	r2, [sp, #28]
90020b2e:	440a      	add	r2, r1
90020b30:	5c69      	ldrb	r1, [r5, r1]
90020b32:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
90020b36:	f1be 0f00 	cmp.w	lr, #0
90020b3a:	d05c      	beq.n	90020bf6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
90020b3c:	f892 c001 	ldrb.w	ip, [r2, #1]
90020b40:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
90020b44:	950d      	str	r5, [sp, #52]	; 0x34
90020b46:	b150      	cbz	r0, 90020b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020b48:	eb02 0c03 	add.w	ip, r2, r3
90020b4c:	5cd3      	ldrb	r3, [r2, r3]
90020b4e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020b52:	930a      	str	r3, [sp, #40]	; 0x28
90020b54:	f89c 3001 	ldrb.w	r3, [ip, #1]
90020b58:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020b5c:	930e      	str	r3, [sp, #56]	; 0x38
90020b5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90020b60:	fb1e f200 	smulbb	r2, lr, r0
90020b64:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90020b66:	f108 38ff 	add.w	r8, r8, #4294967295
90020b6a:	ea4f 4c03 	mov.w	ip, r3, lsl #16
90020b6e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90020b72:	10d2      	asrs	r2, r2, #3
90020b74:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
90020b78:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90020b7c:	ea4c 0c03 	orr.w	ip, ip, r3
90020b80:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
90020b84:	9311      	str	r3, [sp, #68]	; 0x44
90020b86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020b88:	9d11      	ldr	r5, [sp, #68]	; 0x44
90020b8a:	041b      	lsls	r3, r3, #16
90020b8c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90020b90:	ea43 030b 	orr.w	r3, r3, fp
90020b94:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90020b98:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90020b9c:	4353      	muls	r3, r2
90020b9e:	fb05 3c0c 	mla	ip, r5, ip, r3
90020ba2:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
90020ba6:	ea43 0b01 	orr.w	fp, r3, r1
90020baa:	f1c0 0110 	rsb	r1, r0, #16
90020bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020bb0:	eba1 0e0e 	sub.w	lr, r1, lr
90020bb4:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
90020bb8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
90020bbc:	fb0e cc0b 	mla	ip, lr, fp, ip
90020bc0:	ea4f 4b03 	mov.w	fp, r3, lsl #16
90020bc4:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
90020bc8:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90020bcc:	ea4b 0e0e 	orr.w	lr, fp, lr
90020bd0:	fb02 cc0e 	mla	ip, r2, lr, ip
90020bd4:	ea4f 535c 	mov.w	r3, ip, lsr #21
90020bd8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90020bdc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90020be0:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90020be4:	ea43 0c0c 	orr.w	ip, r3, ip
90020be8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020bea:	441c      	add	r4, r3
90020bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020bee:	f82a cb02 	strh.w	ip, [sl], #2
90020bf2:	441e      	add	r6, r3
90020bf4:	e723      	b.n	90020a3e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
90020bf6:	2800      	cmp	r0, #0
90020bf8:	d0b1      	beq.n	90020b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020bfa:	5cd3      	ldrb	r3, [r2, r3]
90020bfc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
90020c00:	930a      	str	r3, [sp, #40]	; 0x28
90020c02:	e7ac      	b.n	90020b5e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
90020c04:	b013      	add	sp, #76	; 0x4c
90020c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90020c0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
90020c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020c0e:	880d      	ldrh	r5, [r1, #0]
90020c10:	b087      	sub	sp, #28
90020c12:	10ef      	asrs	r7, r5, #3
90020c14:	9103      	str	r1, [sp, #12]
90020c16:	ea4f 2a25 	mov.w	sl, r5, asr #8
90020c1a:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
90020c1e:	00ed      	lsls	r5, r5, #3
90020c20:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
90020c24:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
90020c28:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
90020c2c:	b2ed      	uxtb	r5, r5
90020c2e:	9701      	str	r7, [sp, #4]
90020c30:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
90020c34:	9502      	str	r5, [sp, #8]
90020c36:	9d01      	ldr	r5, [sp, #4]
90020c38:	9902      	ldr	r1, [sp, #8]
90020c3a:	022d      	lsls	r5, r5, #8
90020c3c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
90020c40:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
90020c44:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
90020c48:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
90020c4c:	430d      	orrs	r5, r1
90020c4e:	fb06 0709 	mla	r7, r6, r9, r0
90020c52:	2e00      	cmp	r6, #0
90020c54:	9505      	str	r5, [sp, #20]
90020c56:	eb02 0c07 	add.w	ip, r2, r7
90020c5a:	f2c0 80b6 	blt.w	90020dca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020c5e:	45b3      	cmp	fp, r6
90020c60:	f340 80b3 	ble.w	90020dca <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
90020c64:	2800      	cmp	r0, #0
90020c66:	f2c0 80ae 	blt.w	90020dc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020c6a:	4581      	cmp	r9, r0
90020c6c:	f340 80ab 	ble.w	90020dc6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
90020c70:	5dd7      	ldrb	r7, [r2, r7]
90020c72:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90020c76:	441f      	add	r7, r3
90020c78:	1c42      	adds	r2, r0, #1
90020c7a:	f100 80a9 	bmi.w	90020dd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020c7e:	4591      	cmp	r9, r2
90020c80:	f340 80a6 	ble.w	90020dd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020c84:	2c00      	cmp	r4, #0
90020c86:	f000 80a3 	beq.w	90020dd0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
90020c8a:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020c8e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90020c92:	441d      	add	r5, r3
90020c94:	3601      	adds	r6, #1
90020c96:	f100 809f 	bmi.w	90020dd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020c9a:	45b3      	cmp	fp, r6
90020c9c:	f340 809c 	ble.w	90020dd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020ca0:	f1be 0f00 	cmp.w	lr, #0
90020ca4:	f000 8098 	beq.w	90020dd8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
90020ca8:	2800      	cmp	r0, #0
90020caa:	f2c0 8093 	blt.w	90020dd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020cae:	4581      	cmp	r9, r0
90020cb0:	f340 8090 	ble.w	90020dd4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
90020cb4:	f81c 6009 	ldrb.w	r6, [ip, r9]
90020cb8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90020cbc:	441e      	add	r6, r3
90020cbe:	3001      	adds	r0, #1
90020cc0:	f100 808d 	bmi.w	90020dde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020cc4:	4581      	cmp	r9, r0
90020cc6:	f340 808a 	ble.w	90020dde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020cca:	2c00      	cmp	r4, #0
90020ccc:	f000 8087 	beq.w	90020dde <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
90020cd0:	44e1      	add	r9, ip
90020cd2:	f899 2001 	ldrb.w	r2, [r9, #1]
90020cd6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020cda:	4413      	add	r3, r2
90020cdc:	b2a4      	uxth	r4, r4
90020cde:	f897 c002 	ldrb.w	ip, [r7, #2]
90020ce2:	fa1f fe8e 	uxth.w	lr, lr
90020ce6:	9901      	ldr	r1, [sp, #4]
90020ce8:	fb04 fb0e 	mul.w	fp, r4, lr
90020cec:	0124      	lsls	r4, r4, #4
90020cee:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
90020cf2:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
90020cf6:	eba4 040b 	sub.w	r4, r4, fp
90020cfa:	fa1f f08e 	uxth.w	r0, lr
90020cfe:	b2a2      	uxth	r2, r4
90020d00:	78ac      	ldrb	r4, [r5, #2]
90020d02:	eba9 0900 	sub.w	r9, r9, r0
90020d06:	fa1f fe88 	uxth.w	lr, r8
90020d0a:	4354      	muls	r4, r2
90020d0c:	ea6f 0808 	mvn.w	r8, r8
90020d10:	fa1f f989 	uxth.w	r9, r9
90020d14:	fa5f f888 	uxtb.w	r8, r8
90020d18:	fb09 440c 	mla	r4, r9, ip, r4
90020d1c:	f896 c002 	ldrb.w	ip, [r6, #2]
90020d20:	fb1a fa08 	smulbb	sl, sl, r8
90020d24:	fb00 440c 	mla	r4, r0, ip, r4
90020d28:	f893 c002 	ldrb.w	ip, [r3, #2]
90020d2c:	fb0b 4c0c 	mla	ip, fp, ip, r4
90020d30:	787c      	ldrb	r4, [r7, #1]
90020d32:	783f      	ldrb	r7, [r7, #0]
90020d34:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020d38:	fb0c ac0e 	mla	ip, ip, lr, sl
90020d3c:	f895 a001 	ldrb.w	sl, [r5, #1]
90020d40:	782d      	ldrb	r5, [r5, #0]
90020d42:	fb02 fa0a 	mul.w	sl, r2, sl
90020d46:	fa1f fc8c 	uxth.w	ip, ip
90020d4a:	436a      	muls	r2, r5
90020d4c:	7835      	ldrb	r5, [r6, #0]
90020d4e:	fb09 aa04 	mla	sl, r9, r4, sl
90020d52:	7874      	ldrb	r4, [r6, #1]
90020d54:	fb09 2207 	mla	r2, r9, r7, r2
90020d58:	fb00 aa04 	mla	sl, r0, r4, sl
90020d5c:	785c      	ldrb	r4, [r3, #1]
90020d5e:	fb00 2005 	mla	r0, r0, r5, r2
90020d62:	781b      	ldrb	r3, [r3, #0]
90020d64:	fb0b a404 	mla	r4, fp, r4, sl
90020d68:	fb11 fa08 	smulbb	sl, r1, r8
90020d6c:	fb0b 0b03 	mla	fp, fp, r3, r0
90020d70:	9b02      	ldr	r3, [sp, #8]
90020d72:	f3c4 2407 	ubfx	r4, r4, #8, #8
90020d76:	fb13 f808 	smulbb	r8, r3, r8
90020d7a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
90020d7e:	fb04 a40e 	mla	r4, r4, lr, sl
90020d82:	f10c 0301 	add.w	r3, ip, #1
90020d86:	fb0b 8e0e 	mla	lr, fp, lr, r8
90020d8a:	b2a4      	uxth	r4, r4
90020d8c:	fa1f fe8e 	uxth.w	lr, lr
90020d90:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
90020d94:	f104 0a01 	add.w	sl, r4, #1
90020d98:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
90020d9c:	f10e 0c01 	add.w	ip, lr, #1
90020da0:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
90020da4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90020da8:	0964      	lsrs	r4, r4, #5
90020daa:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
90020dae:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90020db2:	ea4c 0c03 	orr.w	ip, ip, r3
90020db6:	9b03      	ldr	r3, [sp, #12]
90020db8:	ea4c 0c04 	orr.w	ip, ip, r4
90020dbc:	f8a3 c000 	strh.w	ip, [r3]
90020dc0:	b007      	add	sp, #28
90020dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90020dc6:	af05      	add	r7, sp, #20
90020dc8:	e756      	b.n	90020c78 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
90020dca:	ad05      	add	r5, sp, #20
90020dcc:	462f      	mov	r7, r5
90020dce:	e761      	b.n	90020c94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020dd0:	ad05      	add	r5, sp, #20
90020dd2:	e75f      	b.n	90020c94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
90020dd4:	ae05      	add	r6, sp, #20
90020dd6:	e772      	b.n	90020cbe <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
90020dd8:	ab05      	add	r3, sp, #20
90020dda:	461e      	mov	r6, r3
90020ddc:	e77e      	b.n	90020cdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
90020dde:	ab05      	add	r3, sp, #20
90020de0:	e77c      	b.n	90020cdc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

90020de2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90020de2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90020de6:	b095      	sub	sp, #84	; 0x54
90020de8:	9212      	str	r2, [sp, #72]	; 0x48
90020dea:	9309      	str	r3, [sp, #36]	; 0x24
90020dec:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90020dee:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
90020df2:	9013      	str	r0, [sp, #76]	; 0x4c
90020df4:	930f      	str	r3, [sp, #60]	; 0x3c
90020df6:	6850      	ldr	r0, [r2, #4]
90020df8:	910e      	str	r1, [sp, #56]	; 0x38
90020dfa:	6812      	ldr	r2, [r2, #0]
90020dfc:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
90020e00:	fb00 1303 	mla	r3, r0, r3, r1
90020e04:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90020e08:	930a      	str	r3, [sp, #40]	; 0x28
90020e0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020e0c:	681b      	ldr	r3, [r3, #0]
90020e0e:	930d      	str	r3, [sp, #52]	; 0x34
90020e10:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020e12:	685c      	ldr	r4, [r3, #4]
90020e14:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90020e16:	3404      	adds	r4, #4
90020e18:	43db      	mvns	r3, r3
90020e1a:	b2db      	uxtb	r3, r3
90020e1c:	930b      	str	r3, [sp, #44]	; 0x2c
90020e1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90020e20:	2b00      	cmp	r3, #0
90020e22:	dc03      	bgt.n	90020e2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90020e24:	9b12      	ldr	r3, [sp, #72]	; 0x48
90020e26:	2b00      	cmp	r3, #0
90020e28:	f340 8255 	ble.w	900212d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
90020e2c:	9b26      	ldr	r3, [sp, #152]	; 0x98
90020e2e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90020e32:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90020e36:	1e48      	subs	r0, r1, #1
90020e38:	1e55      	subs	r5, r2, #1
90020e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020e3c:	2b00      	cmp	r3, #0
90020e3e:	f340 80f9 	ble.w	90021034 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
90020e42:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90020e44:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020e46:	1436      	asrs	r6, r6, #16
90020e48:	ea4f 4323 	mov.w	r3, r3, asr #16
90020e4c:	d406      	bmi.n	90020e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020e4e:	4286      	cmp	r6, r0
90020e50:	da04      	bge.n	90020e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020e52:	2b00      	cmp	r3, #0
90020e54:	db02      	blt.n	90020e5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
90020e56:	42ab      	cmp	r3, r5
90020e58:	f2c0 80ed 	blt.w	90021036 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
90020e5c:	3601      	adds	r6, #1
90020e5e:	f100 80da 	bmi.w	90021016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020e62:	42b1      	cmp	r1, r6
90020e64:	f2c0 80d7 	blt.w	90021016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020e68:	3301      	adds	r3, #1
90020e6a:	f100 80d4 	bmi.w	90021016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020e6e:	429a      	cmp	r2, r3
90020e70:	f2c0 80d1 	blt.w	90021016 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
90020e74:	9b09      	ldr	r3, [sp, #36]	; 0x24
90020e76:	9311      	str	r3, [sp, #68]	; 0x44
90020e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90020e7a:	930c      	str	r3, [sp, #48]	; 0x30
90020e7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
90020e7e:	2b00      	cmp	r3, #0
90020e80:	f340 80fa 	ble.w	90021078 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
90020e84:	9826      	ldr	r0, [sp, #152]	; 0x98
90020e86:	9b20      	ldr	r3, [sp, #128]	; 0x80
90020e88:	9a20      	ldr	r2, [sp, #128]	; 0x80
90020e8a:	68c6      	ldr	r6, [r0, #12]
90020e8c:	141d      	asrs	r5, r3, #16
90020e8e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90020e90:	f3c2 3103 	ubfx	r1, r2, #12, #4
90020e94:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90020e96:	9a26      	ldr	r2, [sp, #152]	; 0x98
90020e98:	1400      	asrs	r0, r0, #16
90020e9a:	f3c3 3303 	ubfx	r3, r3, #12, #4
90020e9e:	6892      	ldr	r2, [r2, #8]
90020ea0:	f100 813e 	bmi.w	90021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020ea4:	1e57      	subs	r7, r2, #1
90020ea6:	42b8      	cmp	r0, r7
90020ea8:	f280 813a 	bge.w	90021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020eac:	2d00      	cmp	r5, #0
90020eae:	f2c0 8137 	blt.w	90021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020eb2:	1e77      	subs	r7, r6, #1
90020eb4:	42bd      	cmp	r5, r7
90020eb6:	f280 8133 	bge.w	90021120 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
90020eba:	b212      	sxth	r2, r2
90020ebc:	fb05 0002 	mla	r0, r5, r2, r0
90020ec0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90020ec2:	f815 a000 	ldrb.w	sl, [r5, r0]
90020ec6:	182e      	adds	r6, r5, r0
90020ec8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
90020ecc:	eb04 050a 	add.w	r5, r4, sl
90020ed0:	2b00      	cmp	r3, #0
90020ed2:	f000 8117 	beq.w	90021104 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
90020ed6:	f896 c001 	ldrb.w	ip, [r6, #1]
90020eda:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
90020ede:	44a4      	add	ip, r4
90020ee0:	2900      	cmp	r1, #0
90020ee2:	f000 8117 	beq.w	90021114 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
90020ee6:	18b0      	adds	r0, r6, r2
90020ee8:	5cb2      	ldrb	r2, [r6, r2]
90020eea:	7840      	ldrb	r0, [r0, #1]
90020eec:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90020ef0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90020ef4:	4422      	add	r2, r4
90020ef6:	4420      	add	r0, r4
90020ef8:	b29b      	uxth	r3, r3
90020efa:	f89c 7002 	ldrb.w	r7, [ip, #2]
90020efe:	b289      	uxth	r1, r1
90020f00:	f895 b002 	ldrb.w	fp, [r5, #2]
90020f04:	9e0c      	ldr	r6, [sp, #48]	; 0x30
90020f06:	fb03 f901 	mul.w	r9, r3, r1
90020f0a:	011b      	lsls	r3, r3, #4
90020f0c:	f8b6 e000 	ldrh.w	lr, [r6]
90020f10:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90020f14:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
90020f18:	eba3 0309 	sub.w	r3, r3, r9
90020f1c:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
90020f20:	b289      	uxth	r1, r1
90020f22:	f814 a00a 	ldrb.w	sl, [r4, sl]
90020f26:	b29b      	uxth	r3, r3
90020f28:	eba8 0801 	sub.w	r8, r8, r1
90020f2c:	435f      	muls	r7, r3
90020f2e:	fa1f f888 	uxth.w	r8, r8
90020f32:	9310      	str	r3, [sp, #64]	; 0x40
90020f34:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020f36:	fb08 770b 	mla	r7, r8, fp, r7
90020f3a:	f892 b002 	ldrb.w	fp, [r2, #2]
90020f3e:	fb01 770b 	mla	r7, r1, fp, r7
90020f42:	f890 b002 	ldrb.w	fp, [r0, #2]
90020f46:	fb09 770b 	mla	r7, r9, fp, r7
90020f4a:	ea4f 2b2e 	mov.w	fp, lr, asr #8
90020f4e:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90020f52:	f3c7 2707 	ubfx	r7, r7, #8, #8
90020f56:	fb1b fb03 	smulbb	fp, fp, r3
90020f5a:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020f5c:	fb07 b706 	mla	r7, r7, r6, fp
90020f60:	f895 b001 	ldrb.w	fp, [r5, #1]
90020f64:	f89c 5001 	ldrb.w	r5, [ip, #1]
90020f68:	f89c c000 	ldrb.w	ip, [ip]
90020f6c:	b2bf      	uxth	r7, r7
90020f6e:	435d      	muls	r5, r3
90020f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020f72:	fb08 550b 	mla	r5, r8, fp, r5
90020f76:	f892 b001 	ldrb.w	fp, [r2, #1]
90020f7a:	fb01 550b 	mla	r5, r1, fp, r5
90020f7e:	f890 b001 	ldrb.w	fp, [r0, #1]
90020f82:	fb09 550b 	mla	r5, r9, fp, r5
90020f86:	ea4f 0bee 	mov.w	fp, lr, asr #3
90020f8a:	ea4f 0ece 	mov.w	lr, lr, lsl #3
90020f8e:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
90020f92:	f3c5 2507 	ubfx	r5, r5, #8, #8
90020f96:	fa5f fe8e 	uxtb.w	lr, lr
90020f9a:	fb1b fb03 	smulbb	fp, fp, r3
90020f9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
90020fa0:	fb03 f30c 	mul.w	r3, r3, ip
90020fa4:	f892 c000 	ldrb.w	ip, [r2]
90020fa8:	fb05 b506 	mla	r5, r5, r6, fp
90020fac:	fb08 330a 	mla	r3, r8, sl, r3
90020fb0:	b2ad      	uxth	r5, r5
90020fb2:	fb01 330c 	mla	r3, r1, ip, r3
90020fb6:	f890 c000 	ldrb.w	ip, [r0]
90020fba:	f105 0b01 	add.w	fp, r5, #1
90020fbe:	fb09 3c0c 	mla	ip, r9, ip, r3
90020fc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90020fc4:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
90020fc8:	fb1e fe03 	smulbb	lr, lr, r3
90020fcc:	f3cc 2c07 	ubfx	ip, ip, #8, #8
90020fd0:	1c7b      	adds	r3, r7, #1
90020fd2:	096d      	lsrs	r5, r5, #5
90020fd4:	fb0c e606 	mla	r6, ip, r6, lr
90020fd8:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90020fdc:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90020fe0:	b2b6      	uxth	r6, r6
90020fe2:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
90020fe6:	1c77      	adds	r7, r6, #1
90020fe8:	eb07 2716 	add.w	r7, r7, r6, lsr #8
90020fec:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90020ff0:	431f      	orrs	r7, r3
90020ff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020ff4:	433d      	orrs	r5, r7
90020ff6:	801d      	strh	r5, [r3, #0]
90020ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90020ffa:	9a21      	ldr	r2, [sp, #132]	; 0x84
90020ffc:	3302      	adds	r3, #2
90020ffe:	930c      	str	r3, [sp, #48]	; 0x30
90021000:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021002:	4413      	add	r3, r2
90021004:	9a22      	ldr	r2, [sp, #136]	; 0x88
90021006:	931f      	str	r3, [sp, #124]	; 0x7c
90021008:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002100a:	4413      	add	r3, r2
9002100c:	9320      	str	r3, [sp, #128]	; 0x80
9002100e:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021010:	3b01      	subs	r3, #1
90021012:	9311      	str	r3, [sp, #68]	; 0x44
90021014:	e732      	b.n	90020e7c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90021016:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90021018:	9e21      	ldr	r6, [sp, #132]	; 0x84
9002101a:	4433      	add	r3, r6
9002101c:	9e22      	ldr	r6, [sp, #136]	; 0x88
9002101e:	931f      	str	r3, [sp, #124]	; 0x7c
90021020:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021022:	4433      	add	r3, r6
90021024:	9320      	str	r3, [sp, #128]	; 0x80
90021026:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021028:	3b01      	subs	r3, #1
9002102a:	9309      	str	r3, [sp, #36]	; 0x24
9002102c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002102e:	3302      	adds	r3, #2
90021030:	930a      	str	r3, [sp, #40]	; 0x28
90021032:	e702      	b.n	90020e3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021034:	d027      	beq.n	90021086 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
90021036:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021038:	9821      	ldr	r0, [sp, #132]	; 0x84
9002103a:	3b01      	subs	r3, #1
9002103c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
9002103e:	fb00 5003 	mla	r0, r0, r3, r5
90021042:	1400      	asrs	r0, r0, #16
90021044:	f53f af16 	bmi.w	90020e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021048:	3901      	subs	r1, #1
9002104a:	4288      	cmp	r0, r1
9002104c:	f6bf af12 	bge.w	90020e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021050:	9922      	ldr	r1, [sp, #136]	; 0x88
90021052:	9820      	ldr	r0, [sp, #128]	; 0x80
90021054:	fb01 0303 	mla	r3, r1, r3, r0
90021058:	141b      	asrs	r3, r3, #16
9002105a:	f53f af0b 	bmi.w	90020e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002105e:	3a01      	subs	r2, #1
90021060:	4293      	cmp	r3, r2
90021062:	f6bf af07 	bge.w	90020e74 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021066:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021068:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
9002106c:	9311      	str	r3, [sp, #68]	; 0x44
9002106e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021070:	930c      	str	r3, [sp, #48]	; 0x30
90021072:	9b11      	ldr	r3, [sp, #68]	; 0x44
90021074:	2b00      	cmp	r3, #0
90021076:	dc70      	bgt.n	9002115a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90021078:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002107a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
9002107c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021080:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021084:	930a      	str	r3, [sp, #40]	; 0x28
90021086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90021088:	2b00      	cmp	r3, #0
9002108a:	f340 8124 	ble.w	900212d6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
9002108e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021092:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90021094:	ee30 0a04 	vadd.f32	s0, s0, s8
90021098:	ee70 0aa4 	vadd.f32	s1, s1, s9
9002109c:	eef0 6a62 	vmov.f32	s13, s5
900210a0:	eec7 7a00 	vdiv.f32	s15, s14, s0
900210a4:	ee31 1a05 	vadd.f32	s2, s2, s10
900210a8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900210ac:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
900210b0:	eef0 6a43 	vmov.f32	s13, s6
900210b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900210b8:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
900210bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
900210c0:	ee61 7a27 	vmul.f32	s15, s2, s15
900210c4:	ee77 2a62 	vsub.f32	s5, s14, s5
900210c8:	ee37 3ac3 	vsub.f32	s6, s15, s6
900210cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
900210d0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
900210d4:	ee12 2a90 	vmov	r2, s5
900210d8:	eef0 2a47 	vmov.f32	s5, s14
900210dc:	fb92 f3f3 	sdiv	r3, r2, r3
900210e0:	ee13 2a10 	vmov	r2, s6
900210e4:	9321      	str	r3, [sp, #132]	; 0x84
900210e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900210e8:	eeb0 3a67 	vmov.f32	s6, s15
900210ec:	fb92 f3f3 	sdiv	r3, r2, r3
900210f0:	9322      	str	r3, [sp, #136]	; 0x88
900210f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900210f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
900210f6:	3b01      	subs	r3, #1
900210f8:	930e      	str	r3, [sp, #56]	; 0x38
900210fa:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900210fc:	bf08      	it	eq
900210fe:	4613      	moveq	r3, r2
90021100:	9309      	str	r3, [sp, #36]	; 0x24
90021102:	e68c      	b.n	90020e1e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021104:	b149      	cbz	r1, 9002111a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
90021106:	5cb2      	ldrb	r2, [r6, r2]
90021108:	4628      	mov	r0, r5
9002110a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002110e:	4422      	add	r2, r4
90021110:	46ac      	mov	ip, r5
90021112:	e6f1      	b.n	90020ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
90021114:	4628      	mov	r0, r5
90021116:	462a      	mov	r2, r5
90021118:	e6ee      	b.n	90020ef8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
9002111a:	4628      	mov	r0, r5
9002111c:	462a      	mov	r2, r5
9002111e:	e7f7      	b.n	90021110 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
90021120:	1c47      	adds	r7, r0, #1
90021122:	f53f af69 	bmi.w	90020ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021126:	42ba      	cmp	r2, r7
90021128:	f6ff af66 	blt.w	90020ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9002112c:	1c6f      	adds	r7, r5, #1
9002112e:	f53f af63 	bmi.w	90020ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021132:	42be      	cmp	r6, r7
90021134:	f6ff af60 	blt.w	90020ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
90021138:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
9002113a:	b236      	sxth	r6, r6
9002113c:	b212      	sxth	r2, r2
9002113e:	9002      	str	r0, [sp, #8]
90021140:	9601      	str	r6, [sp, #4]
90021142:	9200      	str	r2, [sp, #0]
90021144:	9813      	ldr	r0, [sp, #76]	; 0x4c
90021146:	e9cd 1705 	strd	r1, r7, [sp, #20]
9002114a:	e9cd 5303 	strd	r5, r3, [sp, #12]
9002114e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
90021152:	4623      	mov	r3, r4
90021154:	f7ff fd59 	bl	90020c0a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
90021158:	e74e      	b.n	90020ff8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
9002115a:	9a20      	ldr	r2, [sp, #128]	; 0x80
9002115c:	9820      	ldr	r0, [sp, #128]	; 0x80
9002115e:	f3c2 3103 	ubfx	r1, r2, #12, #4
90021162:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
90021164:	9a26      	ldr	r2, [sp, #152]	; 0x98
90021166:	1400      	asrs	r0, r0, #16
90021168:	142d      	asrs	r5, r5, #16
9002116a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002116c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021170:	f3c3 3303 	ubfx	r3, r3, #12, #4
90021174:	fb02 5000 	mla	r0, r2, r0, r5
90021178:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002117a:	f815 9000 	ldrb.w	r9, [r5, r0]
9002117e:	182e      	adds	r6, r5, r0
90021180:	eb09 0949 	add.w	r9, r9, r9, lsl #1
90021184:	eb04 0509 	add.w	r5, r4, r9
90021188:	2b00      	cmp	r3, #0
9002118a:	f000 8096 	beq.w	900212ba <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
9002118e:	7877      	ldrb	r7, [r6, #1]
90021190:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90021194:	4427      	add	r7, r4
90021196:	2900      	cmp	r1, #0
90021198:	f000 8097 	beq.w	900212ca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
9002119c:	18b0      	adds	r0, r6, r2
9002119e:	5cb2      	ldrb	r2, [r6, r2]
900211a0:	7840      	ldrb	r0, [r0, #1]
900211a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900211a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
900211aa:	4422      	add	r2, r4
900211ac:	4420      	add	r0, r4
900211ae:	b29b      	uxth	r3, r3
900211b0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
900211b2:	b289      	uxth	r1, r1
900211b4:	f895 b002 	ldrb.w	fp, [r5, #2]
900211b8:	f8b6 c000 	ldrh.w	ip, [r6]
900211bc:	fb03 f801 	mul.w	r8, r3, r1
900211c0:	011b      	lsls	r3, r3, #4
900211c2:	78be      	ldrb	r6, [r7, #2]
900211c4:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
900211c8:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
900211cc:	eba3 0308 	sub.w	r3, r3, r8
900211d0:	f814 9009 	ldrb.w	r9, [r4, r9]
900211d4:	b289      	uxth	r1, r1
900211d6:	b29b      	uxth	r3, r3
900211d8:	ebae 0e01 	sub.w	lr, lr, r1
900211dc:	435e      	muls	r6, r3
900211de:	fa1f fe8e 	uxth.w	lr, lr
900211e2:	9310      	str	r3, [sp, #64]	; 0x40
900211e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900211e6:	fb0e 660b 	mla	r6, lr, fp, r6
900211ea:	f892 b002 	ldrb.w	fp, [r2, #2]
900211ee:	fb01 660b 	mla	r6, r1, fp, r6
900211f2:	f890 b002 	ldrb.w	fp, [r0, #2]
900211f6:	fb08 660b 	mla	r6, r8, fp, r6
900211fa:	ea4f 2b2c 	mov.w	fp, ip, asr #8
900211fe:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
90021202:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021206:	fb1b fb03 	smulbb	fp, fp, r3
9002120a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002120c:	fb06 b60a 	mla	r6, r6, sl, fp
90021210:	f895 b001 	ldrb.w	fp, [r5, #1]
90021214:	787d      	ldrb	r5, [r7, #1]
90021216:	783f      	ldrb	r7, [r7, #0]
90021218:	b2b6      	uxth	r6, r6
9002121a:	435d      	muls	r5, r3
9002121c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002121e:	fb0e 550b 	mla	r5, lr, fp, r5
90021222:	f892 b001 	ldrb.w	fp, [r2, #1]
90021226:	fb01 550b 	mla	r5, r1, fp, r5
9002122a:	f890 b001 	ldrb.w	fp, [r0, #1]
9002122e:	fb08 550b 	mla	r5, r8, fp, r5
90021232:	ea4f 0bec 	mov.w	fp, ip, asr #3
90021236:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
9002123a:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
9002123e:	f3c5 2507 	ubfx	r5, r5, #8, #8
90021242:	fa5f fc8c 	uxtb.w	ip, ip
90021246:	fb1b fb03 	smulbb	fp, fp, r3
9002124a:	9b10      	ldr	r3, [sp, #64]	; 0x40
9002124c:	437b      	muls	r3, r7
9002124e:	7817      	ldrb	r7, [r2, #0]
90021250:	fb05 b50a 	mla	r5, r5, sl, fp
90021254:	fb0e 3309 	mla	r3, lr, r9, r3
90021258:	b2ad      	uxth	r5, r5
9002125a:	fb01 3307 	mla	r3, r1, r7, r3
9002125e:	7807      	ldrb	r7, [r0, #0]
90021260:	f105 0b01 	add.w	fp, r5, #1
90021264:	fb08 3707 	mla	r7, r8, r7, r3
90021268:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002126a:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
9002126e:	fb1c fc03 	smulbb	ip, ip, r3
90021272:	f3c7 2707 	ubfx	r7, r7, #8, #8
90021276:	1c73      	adds	r3, r6, #1
90021278:	096d      	lsrs	r5, r5, #5
9002127a:	fb07 c70a 	mla	r7, r7, sl, ip
9002127e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90021282:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90021286:	b2bf      	uxth	r7, r7
90021288:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002128a:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
9002128e:	1c7a      	adds	r2, r7, #1
90021290:	eb02 2217 	add.w	r2, r2, r7, lsr #8
90021294:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90021298:	4316      	orrs	r6, r2
9002129a:	9a21      	ldr	r2, [sp, #132]	; 0x84
9002129c:	432e      	orrs	r6, r5
9002129e:	f823 6b02 	strh.w	r6, [r3], #2
900212a2:	930c      	str	r3, [sp, #48]	; 0x30
900212a4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900212a6:	4413      	add	r3, r2
900212a8:	9a22      	ldr	r2, [sp, #136]	; 0x88
900212aa:	931f      	str	r3, [sp, #124]	; 0x7c
900212ac:	9b20      	ldr	r3, [sp, #128]	; 0x80
900212ae:	4413      	add	r3, r2
900212b0:	9320      	str	r3, [sp, #128]	; 0x80
900212b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
900212b4:	3b01      	subs	r3, #1
900212b6:	9311      	str	r3, [sp, #68]	; 0x44
900212b8:	e6db      	b.n	90021072 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
900212ba:	b149      	cbz	r1, 900212d0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
900212bc:	5cb2      	ldrb	r2, [r6, r2]
900212be:	4628      	mov	r0, r5
900212c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900212c4:	4422      	add	r2, r4
900212c6:	462f      	mov	r7, r5
900212c8:	e771      	b.n	900211ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
900212ca:	4628      	mov	r0, r5
900212cc:	462a      	mov	r2, r5
900212ce:	e76e      	b.n	900211ae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
900212d0:	4628      	mov	r0, r5
900212d2:	462a      	mov	r2, r5
900212d4:	e7f7      	b.n	900212c6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
900212d6:	b015      	add	sp, #84	; 0x54
900212d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900212dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
900212dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
900212e0:	880f      	ldrh	r7, [r1, #0]
900212e2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
900212e6:	023c      	lsls	r4, r7, #8
900212e8:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
900212ec:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
900212f0:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
900212f4:	017c      	lsls	r4, r7, #5
900212f6:	00ff      	lsls	r7, r7, #3
900212f8:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
900212fc:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
90021300:	b2ff      	uxtb	r7, r7
90021302:	ea4b 0404 	orr.w	r4, fp, r4
90021306:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
9002130a:	4327      	orrs	r7, r4
9002130c:	fb05 ca0e 	mla	sl, r5, lr, ip
90021310:	2d00      	cmp	r5, #0
90021312:	9701      	str	r7, [sp, #4]
90021314:	eb02 080a 	add.w	r8, r2, sl
90021318:	db7e      	blt.n	90021418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9002131a:	45a9      	cmp	r9, r5
9002131c:	dd7c      	ble.n	90021418 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
9002131e:	f1bc 0f00 	cmp.w	ip, #0
90021322:	db77      	blt.n	90021414 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90021324:	45e6      	cmp	lr, ip
90021326:	dd75      	ble.n	90021414 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
90021328:	f812 700a 	ldrb.w	r7, [r2, sl]
9002132c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
90021330:	441f      	add	r7, r3
90021332:	f11c 0201 	adds.w	r2, ip, #1
90021336:	d472      	bmi.n	9002141e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90021338:	4596      	cmp	lr, r2
9002133a:	dd70      	ble.n	9002141e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
9002133c:	2800      	cmp	r0, #0
9002133e:	d06e      	beq.n	9002141e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
90021340:	f898 4001 	ldrb.w	r4, [r8, #1]
90021344:	eb04 0444 	add.w	r4, r4, r4, lsl #1
90021348:	441c      	add	r4, r3
9002134a:	3501      	adds	r5, #1
9002134c:	d46b      	bmi.n	90021426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
9002134e:	45a9      	cmp	r9, r5
90021350:	dd69      	ble.n	90021426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90021352:	2e00      	cmp	r6, #0
90021354:	d067      	beq.n	90021426 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
90021356:	f1bc 0f00 	cmp.w	ip, #0
9002135a:	db62      	blt.n	90021422 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
9002135c:	45e6      	cmp	lr, ip
9002135e:	dd60      	ble.n	90021422 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
90021360:	f818 500e 	ldrb.w	r5, [r8, lr]
90021364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
90021368:	441d      	add	r5, r3
9002136a:	f11c 0201 	adds.w	r2, ip, #1
9002136e:	d45d      	bmi.n	9002142c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021370:	4596      	cmp	lr, r2
90021372:	dd5b      	ble.n	9002142c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021374:	2800      	cmp	r0, #0
90021376:	d059      	beq.n	9002142c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
90021378:	44c6      	add	lr, r8
9002137a:	f89e 2001 	ldrb.w	r2, [lr, #1]
9002137e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021382:	4413      	add	r3, r2
90021384:	b280      	uxth	r0, r0
90021386:	f897 e002 	ldrb.w	lr, [r7, #2]
9002138a:	b2b2      	uxth	r2, r6
9002138c:	f897 9000 	ldrb.w	r9, [r7]
90021390:	787f      	ldrb	r7, [r7, #1]
90021392:	fb00 f602 	mul.w	r6, r0, r2
90021396:	0100      	lsls	r0, r0, #4
90021398:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
9002139c:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
900213a0:	1b80      	subs	r0, r0, r6
900213a2:	fa1f fc82 	uxth.w	ip, r2
900213a6:	b282      	uxth	r2, r0
900213a8:	78a0      	ldrb	r0, [r4, #2]
900213aa:	eba8 080c 	sub.w	r8, r8, ip
900213ae:	4350      	muls	r0, r2
900213b0:	fa1f f888 	uxth.w	r8, r8
900213b4:	fb08 0e0e 	mla	lr, r8, lr, r0
900213b8:	78a8      	ldrb	r0, [r5, #2]
900213ba:	fb0c e000 	mla	r0, ip, r0, lr
900213be:	f893 e002 	ldrb.w	lr, [r3, #2]
900213c2:	fb06 0e0e 	mla	lr, r6, lr, r0
900213c6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
900213ca:	f894 e000 	ldrb.w	lr, [r4]
900213ce:	fb02 fe0e 	mul.w	lr, r2, lr
900213d2:	fb08 e909 	mla	r9, r8, r9, lr
900213d6:	f895 e000 	ldrb.w	lr, [r5]
900213da:	fb0c 990e 	mla	r9, ip, lr, r9
900213de:	f893 e000 	ldrb.w	lr, [r3]
900213e2:	785b      	ldrb	r3, [r3, #1]
900213e4:	fb06 9e0e 	mla	lr, r6, lr, r9
900213e8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
900213ec:	ea4e 0e00 	orr.w	lr, lr, r0
900213f0:	7860      	ldrb	r0, [r4, #1]
900213f2:	4350      	muls	r0, r2
900213f4:	786a      	ldrb	r2, [r5, #1]
900213f6:	fb08 0007 	mla	r0, r8, r7, r0
900213fa:	fb0c 0202 	mla	r2, ip, r2, r0
900213fe:	fb06 2303 	mla	r3, r6, r3, r2
90021402:	095b      	lsrs	r3, r3, #5
90021404:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90021408:	ea4e 0303 	orr.w	r3, lr, r3
9002140c:	800b      	strh	r3, [r1, #0]
9002140e:	b003      	add	sp, #12
90021410:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021414:	af01      	add	r7, sp, #4
90021416:	e78c      	b.n	90021332 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
90021418:	ac01      	add	r4, sp, #4
9002141a:	4627      	mov	r7, r4
9002141c:	e795      	b.n	9002134a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
9002141e:	ac01      	add	r4, sp, #4
90021420:	e793      	b.n	9002134a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
90021422:	ad01      	add	r5, sp, #4
90021424:	e7a1      	b.n	9002136a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
90021426:	ab01      	add	r3, sp, #4
90021428:	461d      	mov	r5, r3
9002142a:	e7ab      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
9002142c:	ab01      	add	r3, sp, #4
9002142e:	e7a9      	b.n	90021384 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

90021430 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021434:	b08f      	sub	sp, #60	; 0x3c
90021436:	920c      	str	r2, [sp, #48]	; 0x30
90021438:	9a1d      	ldr	r2, [sp, #116]	; 0x74
9002143a:	900d      	str	r0, [sp, #52]	; 0x34
9002143c:	910a      	str	r1, [sp, #40]	; 0x28
9002143e:	6850      	ldr	r0, [r2, #4]
90021440:	9306      	str	r3, [sp, #24]
90021442:	6812      	ldr	r2, [r2, #0]
90021444:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
90021448:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
9002144c:	fb00 1303 	mla	r3, r0, r3, r1
90021450:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021454:	9307      	str	r3, [sp, #28]
90021456:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021458:	681b      	ldr	r3, [r3, #0]
9002145a:	9308      	str	r3, [sp, #32]
9002145c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002145e:	685c      	ldr	r4, [r3, #4]
90021460:	3404      	adds	r4, #4
90021462:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90021464:	2b00      	cmp	r3, #0
90021466:	dc03      	bgt.n	90021470 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
90021468:	9b0c      	ldr	r3, [sp, #48]	; 0x30
9002146a:	2b00      	cmp	r3, #0
9002146c:	f340 81d5 	ble.w	9002181a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021470:	9b20      	ldr	r3, [sp, #128]	; 0x80
90021472:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021476:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002147a:	1e48      	subs	r0, r1, #1
9002147c:	1e56      	subs	r6, r2, #1
9002147e:	9b06      	ldr	r3, [sp, #24]
90021480:	2b00      	cmp	r3, #0
90021482:	f340 80b6 	ble.w	900215f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90021486:	ea5f 472b 	movs.w	r7, fp, asr #16
9002148a:	ea4f 4325 	mov.w	r3, r5, asr #16
9002148e:	d406      	bmi.n	9002149e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021490:	4287      	cmp	r7, r0
90021492:	da04      	bge.n	9002149e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021494:	2b00      	cmp	r3, #0
90021496:	db02      	blt.n	9002149e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
90021498:	42b3      	cmp	r3, r6
9002149a:	f2c0 80ab 	blt.w	900215f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
9002149e:	3701      	adds	r7, #1
900214a0:	f100 809c 	bmi.w	900215dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900214a4:	42b9      	cmp	r1, r7
900214a6:	f2c0 8099 	blt.w	900215dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900214aa:	3301      	adds	r3, #1
900214ac:	f100 8096 	bmi.w	900215dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900214b0:	429a      	cmp	r2, r3
900214b2:	f2c0 8093 	blt.w	900215dc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
900214b6:	9b06      	ldr	r3, [sp, #24]
900214b8:	930b      	str	r3, [sp, #44]	; 0x2c
900214ba:	9b07      	ldr	r3, [sp, #28]
900214bc:	9309      	str	r3, [sp, #36]	; 0x24
900214be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900214c0:	2b00      	cmp	r3, #0
900214c2:	f340 80b4 	ble.w	9002162e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
900214c6:	9820      	ldr	r0, [sp, #128]	; 0x80
900214c8:	142e      	asrs	r6, r5, #16
900214ca:	9a20      	ldr	r2, [sp, #128]	; 0x80
900214cc:	f3cb 3303 	ubfx	r3, fp, #12, #4
900214d0:	68c7      	ldr	r7, [r0, #12]
900214d2:	ea5f 402b 	movs.w	r0, fp, asr #16
900214d6:	f3c5 3103 	ubfx	r1, r5, #12, #4
900214da:	6892      	ldr	r2, [r2, #8]
900214dc:	f100 80fb 	bmi.w	900216d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900214e0:	f102 3cff 	add.w	ip, r2, #4294967295
900214e4:	4560      	cmp	r0, ip
900214e6:	f280 80f6 	bge.w	900216d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900214ea:	2e00      	cmp	r6, #0
900214ec:	f2c0 80f3 	blt.w	900216d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900214f0:	f107 3cff 	add.w	ip, r7, #4294967295
900214f4:	4566      	cmp	r6, ip
900214f6:	f280 80ee 	bge.w	900216d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
900214fa:	b212      	sxth	r2, r2
900214fc:	fb06 0002 	mla	r0, r6, r2, r0
90021500:	9e08      	ldr	r6, [sp, #32]
90021502:	1837      	adds	r7, r6, r0
90021504:	5c30      	ldrb	r0, [r6, r0]
90021506:	eb00 0840 	add.w	r8, r0, r0, lsl #1
9002150a:	eb04 0c08 	add.w	ip, r4, r8
9002150e:	2b00      	cmp	r3, #0
90021510:	f000 80d3 	beq.w	900216ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
90021514:	787e      	ldrb	r6, [r7, #1]
90021516:	eb06 0646 	add.w	r6, r6, r6, lsl #1
9002151a:	4426      	add	r6, r4
9002151c:	2900      	cmp	r1, #0
9002151e:	f000 80d4 	beq.w	900216ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
90021522:	18b8      	adds	r0, r7, r2
90021524:	5cba      	ldrb	r2, [r7, r2]
90021526:	7840      	ldrb	r0, [r0, #1]
90021528:	eb02 0242 	add.w	r2, r2, r2, lsl #1
9002152c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021530:	4422      	add	r2, r4
90021532:	4420      	add	r0, r4
90021534:	b29b      	uxth	r3, r3
90021536:	78b7      	ldrb	r7, [r6, #2]
90021538:	b289      	uxth	r1, r1
9002153a:	f89c a002 	ldrb.w	sl, [ip, #2]
9002153e:	f89c c001 	ldrb.w	ip, [ip, #1]
90021542:	fb03 f901 	mul.w	r9, r3, r1
90021546:	011b      	lsls	r3, r3, #4
90021548:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
9002154c:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021550:	eba3 0309 	sub.w	r3, r3, r9
90021554:	b289      	uxth	r1, r1
90021556:	b29b      	uxth	r3, r3
90021558:	ebae 0e01 	sub.w	lr, lr, r1
9002155c:	435f      	muls	r7, r3
9002155e:	fa1f fe8e 	uxth.w	lr, lr
90021562:	fb0e 770a 	mla	r7, lr, sl, r7
90021566:	f892 a002 	ldrb.w	sl, [r2, #2]
9002156a:	fb01 770a 	mla	r7, r1, sl, r7
9002156e:	f890 a002 	ldrb.w	sl, [r0, #2]
90021572:	fb09 7a0a 	mla	sl, r9, sl, r7
90021576:	f814 7008 	ldrb.w	r7, [r4, r8]
9002157a:	f896 8000 	ldrb.w	r8, [r6]
9002157e:	7876      	ldrb	r6, [r6, #1]
90021580:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
90021584:	fb03 f808 	mul.w	r8, r3, r8
90021588:	4373      	muls	r3, r6
9002158a:	fb0e 8807 	mla	r8, lr, r7, r8
9002158e:	7817      	ldrb	r7, [r2, #0]
90021590:	fb0e 330c 	mla	r3, lr, ip, r3
90021594:	fb01 8807 	mla	r8, r1, r7, r8
90021598:	7807      	ldrb	r7, [r0, #0]
9002159a:	fb09 8707 	mla	r7, r9, r7, r8
9002159e:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900215a2:	ea47 070a 	orr.w	r7, r7, sl
900215a6:	f892 a001 	ldrb.w	sl, [r2, #1]
900215aa:	fb01 310a 	mla	r1, r1, sl, r3
900215ae:	f890 a001 	ldrb.w	sl, [r0, #1]
900215b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
900215b4:	fb09 1a0a 	mla	sl, r9, sl, r1
900215b8:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900215bc:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900215c0:	ea47 070a 	orr.w	r7, r7, sl
900215c4:	801f      	strh	r7, [r3, #0]
900215c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900215c8:	3302      	adds	r3, #2
900215ca:	9309      	str	r3, [sp, #36]	; 0x24
900215cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900215ce:	449b      	add	fp, r3
900215d0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900215d2:	441d      	add	r5, r3
900215d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900215d6:	3b01      	subs	r3, #1
900215d8:	930b      	str	r3, [sp, #44]	; 0x2c
900215da:	e770      	b.n	900214be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900215dc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900215de:	449b      	add	fp, r3
900215e0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900215e2:	441d      	add	r5, r3
900215e4:	9b06      	ldr	r3, [sp, #24]
900215e6:	3b01      	subs	r3, #1
900215e8:	9306      	str	r3, [sp, #24]
900215ea:	9b07      	ldr	r3, [sp, #28]
900215ec:	3302      	adds	r3, #2
900215ee:	9307      	str	r3, [sp, #28]
900215f0:	e745      	b.n	9002147e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
900215f2:	d023      	beq.n	9002163c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
900215f4:	9b06      	ldr	r3, [sp, #24]
900215f6:	981b      	ldr	r0, [sp, #108]	; 0x6c
900215f8:	3b01      	subs	r3, #1
900215fa:	fb00 b003 	mla	r0, r0, r3, fp
900215fe:	1400      	asrs	r0, r0, #16
90021600:	f53f af59 	bmi.w	900214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021604:	3901      	subs	r1, #1
90021606:	4288      	cmp	r0, r1
90021608:	f6bf af55 	bge.w	900214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002160c:	991c      	ldr	r1, [sp, #112]	; 0x70
9002160e:	fb01 5303 	mla	r3, r1, r3, r5
90021612:	141b      	asrs	r3, r3, #16
90021614:	f53f af4f 	bmi.w	900214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021618:	3a01      	subs	r2, #1
9002161a:	4293      	cmp	r3, r2
9002161c:	f6bf af4b 	bge.w	900214b6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90021620:	9b06      	ldr	r3, [sp, #24]
90021622:	9309      	str	r3, [sp, #36]	; 0x24
90021624:	9b07      	ldr	r3, [sp, #28]
90021626:	930b      	str	r3, [sp, #44]	; 0x2c
90021628:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002162a:	2b00      	cmp	r3, #0
9002162c:	dc70      	bgt.n	90021710 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
9002162e:	9b06      	ldr	r3, [sp, #24]
90021630:	9a07      	ldr	r2, [sp, #28]
90021632:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
90021636:	eb02 0343 	add.w	r3, r2, r3, lsl #1
9002163a:	9307      	str	r3, [sp, #28]
9002163c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002163e:	2b00      	cmp	r3, #0
90021640:	f340 80eb 	ble.w	9002181a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
90021644:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021648:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002164a:	ee30 0a04 	vadd.f32	s0, s0, s8
9002164e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021652:	eef0 6a62 	vmov.f32	s13, s5
90021656:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002165a:	ee31 1a05 	vadd.f32	s2, s2, s10
9002165e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021662:	ee16 ba90 	vmov	fp, s13
90021666:	eef0 6a43 	vmov.f32	s13, s6
9002166a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
9002166e:	ee16 5a90 	vmov	r5, s13
90021672:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021676:	ee61 7a27 	vmul.f32	s15, s2, s15
9002167a:	ee77 2a62 	vsub.f32	s5, s14, s5
9002167e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021682:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021686:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002168a:	ee12 2a90 	vmov	r2, s5
9002168e:	eef0 2a47 	vmov.f32	s5, s14
90021692:	fb92 f3f3 	sdiv	r3, r2, r3
90021696:	ee13 2a10 	vmov	r2, s6
9002169a:	931b      	str	r3, [sp, #108]	; 0x6c
9002169c:	9b18      	ldr	r3, [sp, #96]	; 0x60
9002169e:	eeb0 3a67 	vmov.f32	s6, s15
900216a2:	fb92 f3f3 	sdiv	r3, r2, r3
900216a6:	931c      	str	r3, [sp, #112]	; 0x70
900216a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900216aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
900216ac:	3b01      	subs	r3, #1
900216ae:	930a      	str	r3, [sp, #40]	; 0x28
900216b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
900216b2:	bf08      	it	eq
900216b4:	4613      	moveq	r3, r2
900216b6:	9306      	str	r3, [sp, #24]
900216b8:	e6d3      	b.n	90021462 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
900216ba:	b149      	cbz	r1, 900216d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a0>
900216bc:	5cba      	ldrb	r2, [r7, r2]
900216be:	4660      	mov	r0, ip
900216c0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
900216c4:	4422      	add	r2, r4
900216c6:	4666      	mov	r6, ip
900216c8:	e734      	b.n	90021534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
900216ca:	4660      	mov	r0, ip
900216cc:	4662      	mov	r2, ip
900216ce:	e731      	b.n	90021534 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x104>
900216d0:	4660      	mov	r0, ip
900216d2:	4662      	mov	r2, ip
900216d4:	e7f7      	b.n	900216c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
900216d6:	f110 0c01 	adds.w	ip, r0, #1
900216da:	f53f af74 	bmi.w	900215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900216de:	4562      	cmp	r2, ip
900216e0:	f6ff af71 	blt.w	900215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900216e4:	f116 0c01 	adds.w	ip, r6, #1
900216e8:	f53f af6d 	bmi.w	900215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900216ec:	4567      	cmp	r7, ip
900216ee:	f6ff af6a 	blt.w	900215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900216f2:	b23f      	sxth	r7, r7
900216f4:	b212      	sxth	r2, r2
900216f6:	9701      	str	r7, [sp, #4]
900216f8:	9200      	str	r2, [sp, #0]
900216fa:	e9cd 3104 	strd	r3, r1, [sp, #16]
900216fe:	e9cd 0602 	strd	r0, r6, [sp, #8]
90021702:	4623      	mov	r3, r4
90021704:	980d      	ldr	r0, [sp, #52]	; 0x34
90021706:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
9002170a:	f7ff fde7 	bl	900212dc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
9002170e:	e75a      	b.n	900215c6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90021710:	9a20      	ldr	r2, [sp, #128]	; 0x80
90021712:	ea4f 462b 	mov.w	r6, fp, asr #16
90021716:	1428      	asrs	r0, r5, #16
90021718:	f3cb 3303 	ubfx	r3, fp, #12, #4
9002171c:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
90021720:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021724:	fb02 6000 	mla	r0, r2, r0, r6
90021728:	9e08      	ldr	r6, [sp, #32]
9002172a:	f816 8000 	ldrb.w	r8, [r6, r0]
9002172e:	1837      	adds	r7, r6, r0
90021730:	eb08 0848 	add.w	r8, r8, r8, lsl #1
90021734:	eb04 0c08 	add.w	ip, r4, r8
90021738:	2b00      	cmp	r3, #0
9002173a:	d060      	beq.n	900217fe <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ce>
9002173c:	787e      	ldrb	r6, [r7, #1]
9002173e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
90021742:	4426      	add	r6, r4
90021744:	2900      	cmp	r1, #0
90021746:	d062      	beq.n	9002180e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3de>
90021748:	18b8      	adds	r0, r7, r2
9002174a:	5cba      	ldrb	r2, [r7, r2]
9002174c:	7840      	ldrb	r0, [r0, #1]
9002174e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021752:	eb00 0040 	add.w	r0, r0, r0, lsl #1
90021756:	4422      	add	r2, r4
90021758:	4420      	add	r0, r4
9002175a:	b29b      	uxth	r3, r3
9002175c:	78b7      	ldrb	r7, [r6, #2]
9002175e:	b289      	uxth	r1, r1
90021760:	f89c a002 	ldrb.w	sl, [ip, #2]
90021764:	f89c c001 	ldrb.w	ip, [ip, #1]
90021768:	fb03 f901 	mul.w	r9, r3, r1
9002176c:	011b      	lsls	r3, r3, #4
9002176e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021772:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
90021776:	eba3 0309 	sub.w	r3, r3, r9
9002177a:	b289      	uxth	r1, r1
9002177c:	b29b      	uxth	r3, r3
9002177e:	ebae 0e01 	sub.w	lr, lr, r1
90021782:	435f      	muls	r7, r3
90021784:	fa1f fe8e 	uxth.w	lr, lr
90021788:	fb0e 770a 	mla	r7, lr, sl, r7
9002178c:	f892 a002 	ldrb.w	sl, [r2, #2]
90021790:	fb01 770a 	mla	r7, r1, sl, r7
90021794:	f890 a002 	ldrb.w	sl, [r0, #2]
90021798:	fb09 7a0a 	mla	sl, r9, sl, r7
9002179c:	f814 7008 	ldrb.w	r7, [r4, r8]
900217a0:	f896 8000 	ldrb.w	r8, [r6]
900217a4:	7876      	ldrb	r6, [r6, #1]
900217a6:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
900217aa:	fb03 f808 	mul.w	r8, r3, r8
900217ae:	4373      	muls	r3, r6
900217b0:	7856      	ldrb	r6, [r2, #1]
900217b2:	fb0e 8807 	mla	r8, lr, r7, r8
900217b6:	7817      	ldrb	r7, [r2, #0]
900217b8:	fb0e 330c 	mla	r3, lr, ip, r3
900217bc:	fb01 8807 	mla	r8, r1, r7, r8
900217c0:	7807      	ldrb	r7, [r0, #0]
900217c2:	fb01 3306 	mla	r3, r1, r6, r3
900217c6:	fb09 8707 	mla	r7, r9, r7, r8
900217ca:	f3c7 27c4 	ubfx	r7, r7, #11, #5
900217ce:	ea47 070a 	orr.w	r7, r7, sl
900217d2:	f890 a001 	ldrb.w	sl, [r0, #1]
900217d6:	fb09 3a0a 	mla	sl, r9, sl, r3
900217da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
900217dc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
900217e0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
900217e4:	ea47 070a 	orr.w	r7, r7, sl
900217e8:	f823 7b02 	strh.w	r7, [r3], #2
900217ec:	930b      	str	r3, [sp, #44]	; 0x2c
900217ee:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900217f0:	449b      	add	fp, r3
900217f2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900217f4:	441d      	add	r5, r3
900217f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
900217f8:	3b01      	subs	r3, #1
900217fa:	9309      	str	r3, [sp, #36]	; 0x24
900217fc:	e714      	b.n	90021628 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f8>
900217fe:	b149      	cbz	r1, 90021814 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e4>
90021800:	5cba      	ldrb	r2, [r7, r2]
90021802:	4660      	mov	r0, ip
90021804:	eb02 0242 	add.w	r2, r2, r2, lsl #1
90021808:	4422      	add	r2, r4
9002180a:	4666      	mov	r6, ip
9002180c:	e7a5      	b.n	9002175a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
9002180e:	4660      	mov	r0, ip
90021810:	4662      	mov	r2, ip
90021812:	e7a2      	b.n	9002175a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32a>
90021814:	4660      	mov	r0, ip
90021816:	4662      	mov	r2, ip
90021818:	e7f7      	b.n	9002180a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3da>
9002181a:	b00f      	add	sp, #60	; 0x3c
9002181c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90021820 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
90021820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021824:	b085      	sub	sp, #20
90021826:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
9002182a:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
9002182e:	9102      	str	r1, [sp, #8]
90021830:	2c00      	cmp	r4, #0
90021832:	fb04 710c 	mla	r1, r4, ip, r7
90021836:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
9002183a:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
9002183e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90021842:	eb02 0e01 	add.w	lr, r2, r1
90021846:	f2c0 8122 	blt.w	90021a8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
9002184a:	45a0      	cmp	r8, r4
9002184c:	f340 811f 	ble.w	90021a8e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
90021850:	2f00      	cmp	r7, #0
90021852:	f2c0 811a 	blt.w	90021a8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
90021856:	45bc      	cmp	ip, r7
90021858:	f340 8117 	ble.w	90021a8a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
9002185c:	5c52      	ldrb	r2, [r2, r1]
9002185e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
90021862:	1c7a      	adds	r2, r7, #1
90021864:	f100 8116 	bmi.w	90021a94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
90021868:	4594      	cmp	ip, r2
9002186a:	f340 8113 	ble.w	90021a94 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
9002186e:	2e00      	cmp	r6, #0
90021870:	f000 8112 	beq.w	90021a98 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
90021874:	f89e 2001 	ldrb.w	r2, [lr, #1]
90021878:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
9002187c:	3401      	adds	r4, #1
9002187e:	f100 810f 	bmi.w	90021aa0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021882:	45a0      	cmp	r8, r4
90021884:	f340 810c 	ble.w	90021aa0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
90021888:	2800      	cmp	r0, #0
9002188a:	f000 810c 	beq.w	90021aa6 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
9002188e:	2f00      	cmp	r7, #0
90021890:	f2c0 8104 	blt.w	90021a9c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
90021894:	45bc      	cmp	ip, r7
90021896:	f340 8101 	ble.w	90021a9c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
9002189a:	f81e 200c 	ldrb.w	r2, [lr, ip]
9002189e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
900218a2:	3701      	adds	r7, #1
900218a4:	f100 8102 	bmi.w	90021aac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
900218a8:	45bc      	cmp	ip, r7
900218aa:	f340 80ff 	ble.w	90021aac <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
900218ae:	2e00      	cmp	r6, #0
900218b0:	f000 80fe 	beq.w	90021ab0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
900218b4:	44f4      	add	ip, lr
900218b6:	f89c 2001 	ldrb.w	r2, [ip, #1]
900218ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
900218be:	b2b6      	uxth	r6, r6
900218c0:	b280      	uxth	r0, r0
900218c2:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900218c6:	fb00 fe06 	mul.w	lr, r0, r6
900218ca:	0136      	lsls	r6, r6, #4
900218cc:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900218d0:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900218d4:	eba6 070e 	sub.w	r7, r6, lr
900218d8:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900218dc:	ea4f 6914 	mov.w	r9, r4, lsr #24
900218e0:	b280      	uxth	r0, r0
900218e2:	b2bf      	uxth	r7, r7
900218e4:	1a1b      	subs	r3, r3, r0
900218e6:	ea4f 6812 	mov.w	r8, r2, lsr #24
900218ea:	fb0a f607 	mul.w	r6, sl, r7
900218ee:	b29b      	uxth	r3, r3
900218f0:	fb0b 6603 	mla	r6, fp, r3, r6
900218f4:	fb00 6609 	mla	r6, r0, r9, r6
900218f8:	fb0e 6608 	mla	r6, lr, r8, r6
900218fc:	f3c6 2607 	ubfx	r6, r6, #8, #8
90021900:	9600      	str	r6, [sp, #0]
90021902:	2e00      	cmp	r6, #0
90021904:	f000 80be 	beq.w	90021a84 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
90021908:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002190c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90021910:	9e02      	ldr	r6, [sp, #8]
90021912:	fb0b fc0c 	mul.w	ip, fp, ip
90021916:	fb0b f505 	mul.w	r5, fp, r5
9002191a:	8836      	ldrh	r6, [r6, #0]
9002191c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90021920:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021924:	9501      	str	r5, [sp, #4]
90021926:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
9002192a:	44dc      	add	ip, fp
9002192c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021930:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90021934:	9503      	str	r5, [sp, #12]
90021936:	9d01      	ldr	r5, [sp, #4]
90021938:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002193c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90021940:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90021944:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021948:	fb0a fc0c 	mul.w	ip, sl, ip
9002194c:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90021950:	fb0a fa01 	mul.w	sl, sl, r1
90021954:	ea4f 251c 	mov.w	r5, ip, lsr #8
90021958:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002195c:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90021960:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90021964:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90021968:	4465      	add	r5, ip
9002196a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002196e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90021972:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021976:	fb09 fc0c 	mul.w	ip, r9, ip
9002197a:	0a2d      	lsrs	r5, r5, #8
9002197c:	fb09 f904 	mul.w	r9, r9, r4
90021980:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021984:	ea4f 211c 	mov.w	r1, ip, lsr #8
90021988:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002198c:	f509 7480 	add.w	r4, r9, #256	; 0x100
90021990:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90021994:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90021998:	437d      	muls	r5, r7
9002199a:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002199e:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900219a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900219a6:	4461      	add	r1, ip
900219a8:	fb08 f404 	mul.w	r4, r8, r4
900219ac:	ea4f 2919 	mov.w	r9, r9, lsr #8
900219b0:	fb08 f802 	mul.w	r8, r8, r2
900219b4:	0a09      	lsrs	r1, r1, #8
900219b6:	0a22      	lsrs	r2, r4, #8
900219b8:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900219bc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900219c0:	fb07 f70a 	mul.w	r7, r7, sl
900219c4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900219c8:	4414      	add	r4, r2
900219ca:	f508 7280 	add.w	r2, r8, #256	; 0x100
900219ce:	0a24      	lsrs	r4, r4, #8
900219d0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900219d4:	9a03      	ldr	r2, [sp, #12]
900219d6:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900219da:	fb02 5503 	mla	r5, r2, r3, r5
900219de:	ea4f 2818 	mov.w	r8, r8, lsr #8
900219e2:	9a00      	ldr	r2, [sp, #0]
900219e4:	fb04 540e 	mla	r4, r4, lr, r5
900219e8:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900219ec:	1235      	asrs	r5, r6, #8
900219ee:	fb01 4100 	mla	r1, r1, r0, r4
900219f2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900219f6:	0a09      	lsrs	r1, r1, #8
900219f8:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900219fc:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90021a00:	fb03 7101 	mla	r1, r3, r1, r7
90021a04:	fb0e 1e08 	mla	lr, lr, r8, r1
90021a08:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90021a0c:	fb00 e101 	mla	r1, r0, r1, lr
90021a10:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
90021a14:	b287      	uxth	r7, r0
90021a16:	0a09      	lsrs	r1, r1, #8
90021a18:	437a      	muls	r2, r7
90021a1a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90021a1e:	1c53      	adds	r3, r2, #1
90021a20:	4321      	orrs	r1, r4
90021a22:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90021a26:	0c0a      	lsrs	r2, r1, #16
90021a28:	f3c1 2407 	ubfx	r4, r1, #8, #8
90021a2c:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90021a30:	b2c8      	uxtb	r0, r1
90021a32:	fb12 f207 	smulbb	r2, r2, r7
90021a36:	fb14 f407 	smulbb	r4, r4, r7
90021a3a:	b2db      	uxtb	r3, r3
90021a3c:	fb10 f007 	smulbb	r0, r0, r7
90021a40:	fb05 2503 	mla	r5, r5, r3, r2
90021a44:	10f2      	asrs	r2, r6, #3
90021a46:	00f6      	lsls	r6, r6, #3
90021a48:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021a4c:	b2ad      	uxth	r5, r5
90021a4e:	b2f6      	uxtb	r6, r6
90021a50:	fb02 4203 	mla	r2, r2, r3, r4
90021a54:	fb06 0303 	mla	r3, r6, r3, r0
90021a58:	b294      	uxth	r4, r2
90021a5a:	b299      	uxth	r1, r3
90021a5c:	1c6b      	adds	r3, r5, #1
90021a5e:	1c62      	adds	r2, r4, #1
90021a60:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90021a64:	1c4b      	adds	r3, r1, #1
90021a66:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90021a6a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90021a6e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90021a72:	0952      	lsrs	r2, r2, #5
90021a74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021a78:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021a7c:	432b      	orrs	r3, r5
90021a7e:	4313      	orrs	r3, r2
90021a80:	9a02      	ldr	r2, [sp, #8]
90021a82:	8013      	strh	r3, [r2, #0]
90021a84:	b005      	add	sp, #20
90021a86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90021a8a:	2500      	movs	r5, #0
90021a8c:	e6e9      	b.n	90021862 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
90021a8e:	2100      	movs	r1, #0
90021a90:	460d      	mov	r5, r1
90021a92:	e6f3      	b.n	9002187c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021a94:	2100      	movs	r1, #0
90021a96:	e6f1      	b.n	9002187c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021a98:	4631      	mov	r1, r6
90021a9a:	e6ef      	b.n	9002187c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
90021a9c:	2400      	movs	r4, #0
90021a9e:	e700      	b.n	900218a2 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
90021aa0:	2200      	movs	r2, #0
90021aa2:	4614      	mov	r4, r2
90021aa4:	e70b      	b.n	900218be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021aa6:	4602      	mov	r2, r0
90021aa8:	4604      	mov	r4, r0
90021aaa:	e708      	b.n	900218be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021aac:	2200      	movs	r2, #0
90021aae:	e706      	b.n	900218be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
90021ab0:	4632      	mov	r2, r6
90021ab2:	e704      	b.n	900218be <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

90021ab4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90021ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90021ab8:	b09f      	sub	sp, #124	; 0x7c
90021aba:	921b      	str	r2, [sp, #108]	; 0x6c
90021abc:	9309      	str	r3, [sp, #36]	; 0x24
90021abe:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
90021ac0:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
90021ac4:	901d      	str	r0, [sp, #116]	; 0x74
90021ac6:	931c      	str	r3, [sp, #112]	; 0x70
90021ac8:	6850      	ldr	r0, [r2, #4]
90021aca:	9119      	str	r1, [sp, #100]	; 0x64
90021acc:	6812      	ldr	r2, [r2, #0]
90021ace:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
90021ad0:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
90021ad4:	fb00 1303 	mla	r3, r0, r3, r1
90021ad8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90021adc:	930c      	str	r3, [sp, #48]	; 0x30
90021ade:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021ae0:	681b      	ldr	r3, [r3, #0]
90021ae2:	9312      	str	r3, [sp, #72]	; 0x48
90021ae4:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021ae6:	685e      	ldr	r6, [r3, #4]
90021ae8:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
90021aec:	3604      	adds	r6, #4
90021aee:	930d      	str	r3, [sp, #52]	; 0x34
90021af0:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021af2:	2b00      	cmp	r3, #0
90021af4:	dc03      	bgt.n	90021afe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90021af6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90021af8:	2b00      	cmp	r3, #0
90021afa:	f340 8387 	ble.w	9002220c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021afe:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021b00:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021b04:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90021b08:	1e48      	subs	r0, r1, #1
90021b0a:	1e57      	subs	r7, r2, #1
90021b0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021b0e:	2b00      	cmp	r3, #0
90021b10:	f340 8194 	ble.w	90021e3c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
90021b14:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021b16:	142b      	asrs	r3, r5, #16
90021b18:	ea5f 4c24 	movs.w	ip, r4, asr #16
90021b1c:	d406      	bmi.n	90021b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021b1e:	4584      	cmp	ip, r0
90021b20:	da04      	bge.n	90021b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021b22:	2b00      	cmp	r3, #0
90021b24:	db02      	blt.n	90021b2c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90021b26:	42bb      	cmp	r3, r7
90021b28:	f2c0 8189 	blt.w	90021e3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90021b2c:	f11c 0c01 	adds.w	ip, ip, #1
90021b30:	f100 8177 	bmi.w	90021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021b34:	4561      	cmp	r1, ip
90021b36:	f2c0 8174 	blt.w	90021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021b3a:	3301      	adds	r3, #1
90021b3c:	f100 8171 	bmi.w	90021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021b40:	429a      	cmp	r2, r3
90021b42:	f2c0 816e 	blt.w	90021e22 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
90021b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021b48:	9f0c      	ldr	r7, [sp, #48]	; 0x30
90021b4a:	931a      	str	r3, [sp, #104]	; 0x68
90021b4c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021b4e:	2b00      	cmp	r3, #0
90021b50:	f340 8193 	ble.w	90021e7a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
90021b54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021b56:	ea4f 4c25 	mov.w	ip, r5, asr #16
90021b5a:	f3c5 3103 	ubfx	r1, r5, #12, #4
90021b5e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021b62:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021b64:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
90021b68:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021b6a:	141b      	asrs	r3, r3, #16
90021b6c:	f100 81d6 	bmi.w	90021f1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021b70:	f100 38ff 	add.w	r8, r0, #4294967295
90021b74:	4543      	cmp	r3, r8
90021b76:	f280 81d1 	bge.w	90021f1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021b7a:	f1bc 0f00 	cmp.w	ip, #0
90021b7e:	f2c0 81cd 	blt.w	90021f1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021b82:	f10e 38ff 	add.w	r8, lr, #4294967295
90021b86:	45c4      	cmp	ip, r8
90021b88:	f280 81c8 	bge.w	90021f1c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
90021b8c:	b200      	sxth	r0, r0
90021b8e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021b90:	fb0c 3300 	mla	r3, ip, r0, r3
90021b94:	eb04 0803 	add.w	r8, r4, r3
90021b98:	5ce3      	ldrb	r3, [r4, r3]
90021b9a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021b9e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90021ba2:	2a00      	cmp	r2, #0
90021ba4:	f000 81af 	beq.w	90021f06 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90021ba8:	f898 c001 	ldrb.w	ip, [r8, #1]
90021bac:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90021bb0:	940e      	str	r4, [sp, #56]	; 0x38
90021bb2:	0e24      	lsrs	r4, r4, #24
90021bb4:	9415      	str	r4, [sp, #84]	; 0x54
90021bb6:	b179      	cbz	r1, 90021bd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021bb8:	eb08 0c00 	add.w	ip, r8, r0
90021bbc:	f818 0000 	ldrb.w	r0, [r8, r0]
90021bc0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021bc4:	900a      	str	r0, [sp, #40]	; 0x28
90021bc6:	0e00      	lsrs	r0, r0, #24
90021bc8:	9013      	str	r0, [sp, #76]	; 0x4c
90021bca:	f89c 0001 	ldrb.w	r0, [ip, #1]
90021bce:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021bd2:	900f      	str	r0, [sp, #60]	; 0x3c
90021bd4:	0e00      	lsrs	r0, r0, #24
90021bd6:	9016      	str	r0, [sp, #88]	; 0x58
90021bd8:	b292      	uxth	r2, r2
90021bda:	9815      	ldr	r0, [sp, #84]	; 0x54
90021bdc:	b289      	uxth	r1, r1
90021bde:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021be0:	fb02 f901 	mul.w	r9, r2, r1
90021be4:	0112      	lsls	r2, r2, #4
90021be6:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90021bea:	eba2 0809 	sub.w	r8, r2, r9
90021bee:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021bf2:	b289      	uxth	r1, r1
90021bf4:	fa1f f888 	uxth.w	r8, r8
90021bf8:	1a52      	subs	r2, r2, r1
90021bfa:	fb08 f000 	mul.w	r0, r8, r0
90021bfe:	b292      	uxth	r2, r2
90021c00:	fb02 000e 	mla	r0, r2, lr, r0
90021c04:	fb01 0004 	mla	r0, r1, r4, r0
90021c08:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021c0a:	fb09 0004 	mla	r0, r9, r4, r0
90021c0e:	f3c0 2007 	ubfx	r0, r0, #8, #8
90021c12:	2800      	cmp	r0, #0
90021c14:	f000 80fa 	beq.w	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021c18:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90021c1c:	d01b      	beq.n	90021c56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90021c1e:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90021c22:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021c26:	fb0e fa0a 	mul.w	sl, lr, sl
90021c2a:	fb0e fe03 	mul.w	lr, lr, r3
90021c2e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90021c32:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90021c36:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90021c3a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021c3e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90021c42:	4453      	add	r3, sl
90021c44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021c48:	0a1b      	lsrs	r3, r3, #8
90021c4a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90021c4e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90021c52:	ea43 030c 	orr.w	r3, r3, ip
90021c56:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021c58:	2cff      	cmp	r4, #255	; 0xff
90021c5a:	d021      	beq.n	90021ca0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90021c5c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021c5e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021c62:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021c64:	fb04 fb0b 	mul.w	fp, r4, fp
90021c68:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021c6a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021c6e:	9c15      	ldr	r4, [sp, #84]	; 0x54
90021c70:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021c74:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021c78:	fb04 fa0a 	mul.w	sl, r4, sl
90021c7c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021c80:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021c84:	44de      	add	lr, fp
90021c86:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021c8a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021c8e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021c92:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021c96:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021c9a:	ea4e 040a 	orr.w	r4, lr, sl
90021c9e:	940e      	str	r4, [sp, #56]	; 0x38
90021ca0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021ca2:	2cff      	cmp	r4, #255	; 0xff
90021ca4:	d021      	beq.n	90021cea <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
90021ca6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021ca8:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021cac:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021cae:	fb04 fb0b 	mul.w	fp, r4, fp
90021cb2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021cb4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021cb8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
90021cba:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021cbe:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021cc2:	fb04 fa0a 	mul.w	sl, r4, sl
90021cc6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021cca:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021cce:	44de      	add	lr, fp
90021cd0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021cd4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021cd8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021cdc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021ce0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021ce4:	ea4e 040a 	orr.w	r4, lr, sl
90021ce8:	940a      	str	r4, [sp, #40]	; 0x28
90021cea:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021cec:	2cff      	cmp	r4, #255	; 0xff
90021cee:	d021      	beq.n	90021d34 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
90021cf0:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021cf2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90021cf6:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021cf8:	fb04 fb0b 	mul.w	fp, r4, fp
90021cfc:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021cfe:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90021d02:	9c16      	ldr	r4, [sp, #88]	; 0x58
90021d04:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90021d08:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90021d0c:	fb04 fa0a 	mul.w	sl, r4, sl
90021d10:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021d14:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90021d18:	44de      	add	lr, fp
90021d1a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90021d1e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90021d22:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90021d26:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90021d2a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90021d2e:	ea4e 040a 	orr.w	r4, lr, sl
90021d32:	940f      	str	r4, [sp, #60]	; 0x3c
90021d34:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021d36:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
90021d3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90021d3e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90021d42:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90021d44:	fb08 fc0c 	mul.w	ip, r8, ip
90021d48:	fb02 cc0e 	mla	ip, r2, lr, ip
90021d4c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021d50:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90021d52:	fb01 cc0e 	mla	ip, r1, lr, ip
90021d56:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90021d5a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90021d5c:	fb09 cc0e 	mla	ip, r9, lr, ip
90021d60:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90021d64:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90021d66:	fb08 f80e 	mul.w	r8, r8, lr
90021d6a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90021d6e:	fb02 8303 	mla	r3, r2, r3, r8
90021d72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90021d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90021d78:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90021d7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90021d7e:	fb01 330a 	mla	r3, r1, sl, r3
90021d82:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
90021d86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
90021d88:	fb09 3901 	mla	r9, r9, r1, r3
90021d8c:	883b      	ldrh	r3, [r7, #0]
90021d8e:	4342      	muls	r2, r0
90021d90:	ea4f 2919 	mov.w	r9, r9, lsr #8
90021d94:	1c50      	adds	r0, r2, #1
90021d96:	1219      	asrs	r1, r3, #8
90021d98:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90021d9c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
90021da0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90021da4:	ea4c 0c09 	orr.w	ip, ip, r9
90021da8:	ea6f 2010 	mvn.w	r0, r0, lsr #8
90021dac:	ea4f 421c 	mov.w	r2, ip, lsr #16
90021db0:	f3cc 2e07 	ubfx	lr, ip, #8, #8
90021db4:	b2c0      	uxtb	r0, r0
90021db6:	fb12 f204 	smulbb	r2, r2, r4
90021dba:	fa5f fc8c 	uxtb.w	ip, ip
90021dbe:	fb1e fe04 	smulbb	lr, lr, r4
90021dc2:	fb01 2100 	mla	r1, r1, r0, r2
90021dc6:	10da      	asrs	r2, r3, #3
90021dc8:	fb1c fc04 	smulbb	ip, ip, r4
90021dcc:	00db      	lsls	r3, r3, #3
90021dce:	b289      	uxth	r1, r1
90021dd0:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90021dd4:	b2db      	uxtb	r3, r3
90021dd6:	fb02 e200 	mla	r2, r2, r0, lr
90021dda:	fb03 c300 	mla	r3, r3, r0, ip
90021dde:	b292      	uxth	r2, r2
90021de0:	fa1f fc83 	uxth.w	ip, r3
90021de4:	1c4b      	adds	r3, r1, #1
90021de6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90021dea:	f10c 0301 	add.w	r3, ip, #1
90021dee:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90021df2:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90021df6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90021dfa:	430b      	orrs	r3, r1
90021dfc:	1c51      	adds	r1, r2, #1
90021dfe:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90021e02:	0952      	lsrs	r2, r2, #5
90021e04:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90021e08:	4313      	orrs	r3, r2
90021e0a:	803b      	strh	r3, [r7, #0]
90021e0c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021e0e:	3702      	adds	r7, #2
90021e10:	9a29      	ldr	r2, [sp, #164]	; 0xa4
90021e12:	441a      	add	r2, r3
90021e14:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021e16:	441d      	add	r5, r3
90021e18:	9b1a      	ldr	r3, [sp, #104]	; 0x68
90021e1a:	9229      	str	r2, [sp, #164]	; 0xa4
90021e1c:	3b01      	subs	r3, #1
90021e1e:	931a      	str	r3, [sp, #104]	; 0x68
90021e20:	e694      	b.n	90021b4c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
90021e22:	9b2b      	ldr	r3, [sp, #172]	; 0xac
90021e24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021e26:	441c      	add	r4, r3
90021e28:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90021e2a:	441d      	add	r5, r3
90021e2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021e2e:	9429      	str	r4, [sp, #164]	; 0xa4
90021e30:	3b01      	subs	r3, #1
90021e32:	9309      	str	r3, [sp, #36]	; 0x24
90021e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021e36:	3302      	adds	r3, #2
90021e38:	930c      	str	r3, [sp, #48]	; 0x30
90021e3a:	e667      	b.n	90021b0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
90021e3c:	d024      	beq.n	90021e88 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
90021e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021e40:	982b      	ldr	r0, [sp, #172]	; 0xac
90021e42:	3b01      	subs	r3, #1
90021e44:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021e46:	fb00 4003 	mla	r0, r0, r3, r4
90021e4a:	1400      	asrs	r0, r0, #16
90021e4c:	f53f ae7b 	bmi.w	90021b46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021e50:	3901      	subs	r1, #1
90021e52:	4288      	cmp	r0, r1
90021e54:	f6bf ae77 	bge.w	90021b46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021e58:	992c      	ldr	r1, [sp, #176]	; 0xb0
90021e5a:	fb01 5303 	mla	r3, r1, r3, r5
90021e5e:	141b      	asrs	r3, r3, #16
90021e60:	f53f ae71 	bmi.w	90021b46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021e64:	3a01      	subs	r2, #1
90021e66:	4293      	cmp	r3, r2
90021e68:	f6bf ae6d 	bge.w	90021b46 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
90021e6c:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
90021e70:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
90021e74:	f1bb 0f00 	cmp.w	fp, #0
90021e78:	dc70      	bgt.n	90021f5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
90021e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
90021e7c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90021e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90021e82:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90021e86:	930c      	str	r3, [sp, #48]	; 0x30
90021e88:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021e8a:	2b00      	cmp	r3, #0
90021e8c:	f340 81be 	ble.w	9002220c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
90021e90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90021e94:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021e96:	ee30 0a04 	vadd.f32	s0, s0, s8
90021e9a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90021e9e:	eef0 6a62 	vmov.f32	s13, s5
90021ea2:	eec7 7a00 	vdiv.f32	s15, s14, s0
90021ea6:	ee31 1a05 	vadd.f32	s2, s2, s10
90021eaa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021eae:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
90021eb2:	eef0 6a43 	vmov.f32	s13, s6
90021eb6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90021eba:	ee16 5a90 	vmov	r5, s13
90021ebe:	ee20 7aa7 	vmul.f32	s14, s1, s15
90021ec2:	ee61 7a27 	vmul.f32	s15, s2, s15
90021ec6:	ee77 2a62 	vsub.f32	s5, s14, s5
90021eca:	ee37 3ac3 	vsub.f32	s6, s15, s6
90021ece:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90021ed2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90021ed6:	ee12 2a90 	vmov	r2, s5
90021eda:	eef0 2a47 	vmov.f32	s5, s14
90021ede:	fb92 f3f3 	sdiv	r3, r2, r3
90021ee2:	ee13 2a10 	vmov	r2, s6
90021ee6:	932b      	str	r3, [sp, #172]	; 0xac
90021ee8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021eea:	eeb0 3a67 	vmov.f32	s6, s15
90021eee:	fb92 f3f3 	sdiv	r3, r2, r3
90021ef2:	932c      	str	r3, [sp, #176]	; 0xb0
90021ef4:	9b19      	ldr	r3, [sp, #100]	; 0x64
90021ef6:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
90021ef8:	3b01      	subs	r3, #1
90021efa:	9319      	str	r3, [sp, #100]	; 0x64
90021efc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90021efe:	bf08      	it	eq
90021f00:	4613      	moveq	r3, r2
90021f02:	9309      	str	r3, [sp, #36]	; 0x24
90021f04:	e5f4      	b.n	90021af0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
90021f06:	2900      	cmp	r1, #0
90021f08:	f43f ae66 	beq.w	90021bd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021f0c:	f818 0000 	ldrb.w	r0, [r8, r0]
90021f10:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
90021f14:	900a      	str	r0, [sp, #40]	; 0x28
90021f16:	0e00      	lsrs	r0, r0, #24
90021f18:	9013      	str	r0, [sp, #76]	; 0x4c
90021f1a:	e65d      	b.n	90021bd8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
90021f1c:	f113 0801 	adds.w	r8, r3, #1
90021f20:	f53f af74 	bmi.w	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f24:	4540      	cmp	r0, r8
90021f26:	f6ff af71 	blt.w	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f2a:	f11c 0801 	adds.w	r8, ip, #1
90021f2e:	f53f af6d 	bmi.w	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f32:	45c6      	cmp	lr, r8
90021f34:	f6ff af6a 	blt.w	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f38:	9c1c      	ldr	r4, [sp, #112]	; 0x70
90021f3a:	b200      	sxth	r0, r0
90021f3c:	9302      	str	r3, [sp, #8]
90021f3e:	fa0f f38e 	sxth.w	r3, lr
90021f42:	9000      	str	r0, [sp, #0]
90021f44:	9301      	str	r3, [sp, #4]
90021f46:	4633      	mov	r3, r6
90021f48:	981d      	ldr	r0, [sp, #116]	; 0x74
90021f4a:	e9cd 1405 	strd	r1, r4, [sp, #20]
90021f4e:	e9cd c203 	strd	ip, r2, [sp, #12]
90021f52:	4639      	mov	r1, r7
90021f54:	9a12      	ldr	r2, [sp, #72]	; 0x48
90021f56:	f7ff fc63 	bl	90021820 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
90021f5a:	e757      	b.n	90021e0c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90021f5c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90021f5e:	f3c5 3003 	ubfx	r0, r5, #12, #4
90021f62:	9c29      	ldr	r4, [sp, #164]	; 0xa4
90021f64:	f3c3 3203 	ubfx	r2, r3, #12, #4
90021f68:	9b30      	ldr	r3, [sp, #192]	; 0xc0
90021f6a:	1427      	asrs	r7, r4, #16
90021f6c:	9c12      	ldr	r4, [sp, #72]	; 0x48
90021f6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90021f72:	142b      	asrs	r3, r5, #16
90021f74:	fb01 7303 	mla	r3, r1, r3, r7
90021f78:	18e7      	adds	r7, r4, r3
90021f7a:	5ce3      	ldrb	r3, [r4, r3]
90021f7c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90021f80:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90021f84:	2a00      	cmp	r2, #0
90021f86:	f000 8137 	beq.w	900221f8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
90021f8a:	f897 e001 	ldrb.w	lr, [r7, #1]
90021f8e:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
90021f92:	9410      	str	r4, [sp, #64]	; 0x40
90021f94:	0e24      	lsrs	r4, r4, #24
90021f96:	9417      	str	r4, [sp, #92]	; 0x5c
90021f98:	b170      	cbz	r0, 90021fb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
90021f9a:	eb07 0e01 	add.w	lr, r7, r1
90021f9e:	5c79      	ldrb	r1, [r7, r1]
90021fa0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021fa4:	910b      	str	r1, [sp, #44]	; 0x2c
90021fa6:	0e09      	lsrs	r1, r1, #24
90021fa8:	9114      	str	r1, [sp, #80]	; 0x50
90021faa:	f89e 1001 	ldrb.w	r1, [lr, #1]
90021fae:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90021fb2:	9111      	str	r1, [sp, #68]	; 0x44
90021fb4:	0e09      	lsrs	r1, r1, #24
90021fb6:	9118      	str	r1, [sp, #96]	; 0x60
90021fb8:	b292      	uxth	r2, r2
90021fba:	9917      	ldr	r1, [sp, #92]	; 0x5c
90021fbc:	b280      	uxth	r0, r0
90021fbe:	9c14      	ldr	r4, [sp, #80]	; 0x50
90021fc0:	fb02 f800 	mul.w	r8, r2, r0
90021fc4:	0112      	lsls	r2, r2, #4
90021fc6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90021fca:	eba2 0e08 	sub.w	lr, r2, r8
90021fce:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
90021fd2:	b280      	uxth	r0, r0
90021fd4:	fa1f fe8e 	uxth.w	lr, lr
90021fd8:	1a12      	subs	r2, r2, r0
90021fda:	fb0e f101 	mul.w	r1, lr, r1
90021fde:	b292      	uxth	r2, r2
90021fe0:	fb02 110c 	mla	r1, r2, ip, r1
90021fe4:	fb00 1104 	mla	r1, r0, r4, r1
90021fe8:	9c18      	ldr	r4, [sp, #96]	; 0x60
90021fea:	fb08 1104 	mla	r1, r8, r4, r1
90021fee:	f3c1 2107 	ubfx	r1, r1, #8, #8
90021ff2:	2900      	cmp	r1, #0
90021ff4:	f000 80f5 	beq.w	900221e2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
90021ff8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90021ffc:	d019      	beq.n	90022032 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
90021ffe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90022002:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022006:	fb0c fa0a 	mul.w	sl, ip, sl
9002200a:	fb0c fc03 	mul.w	ip, ip, r3
9002200e:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022012:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022016:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002201a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002201e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90022022:	4453      	add	r3, sl
90022024:	0a3f      	lsrs	r7, r7, #8
90022026:	0a1b      	lsrs	r3, r3, #8
90022028:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
9002202c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022030:	433b      	orrs	r3, r7
90022032:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022034:	2cff      	cmp	r4, #255	; 0xff
90022036:	d020      	beq.n	9002207a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
90022038:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002203a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
9002203e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
90022040:	4367      	muls	r7, r4
90022042:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022044:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022048:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002204c:	9c17      	ldr	r4, [sp, #92]	; 0x5c
9002204e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022052:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022056:	fb04 fa0a 	mul.w	sl, r4, sl
9002205a:	44bc      	add	ip, r7
9002205c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022060:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022064:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022068:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002206c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022070:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022074:	ea4c 040a 	orr.w	r4, ip, sl
90022078:	9410      	str	r4, [sp, #64]	; 0x40
9002207a:	9c14      	ldr	r4, [sp, #80]	; 0x50
9002207c:	2cff      	cmp	r4, #255	; 0xff
9002207e:	d020      	beq.n	900220c2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
90022080:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022082:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022086:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022088:	4367      	muls	r7, r4
9002208a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002208c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022090:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022094:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022096:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
9002209a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002209e:	fb04 fa0a 	mul.w	sl, r4, sl
900220a2:	44bc      	add	ip, r7
900220a4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900220a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900220ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900220b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900220b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900220b8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900220bc:	ea4c 040a 	orr.w	r4, ip, sl
900220c0:	940b      	str	r4, [sp, #44]	; 0x2c
900220c2:	9c18      	ldr	r4, [sp, #96]	; 0x60
900220c4:	2cff      	cmp	r4, #255	; 0xff
900220c6:	d020      	beq.n	9002210a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
900220c8:	9c11      	ldr	r4, [sp, #68]	; 0x44
900220ca:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
900220ce:	9c18      	ldr	r4, [sp, #96]	; 0x60
900220d0:	4367      	muls	r7, r4
900220d2:	9c11      	ldr	r4, [sp, #68]	; 0x44
900220d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900220d8:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900220dc:	9c18      	ldr	r4, [sp, #96]	; 0x60
900220de:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900220e2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900220e6:	fb04 fa0a 	mul.w	sl, r4, sl
900220ea:	44bc      	add	ip, r7
900220ec:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900220f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900220f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900220f8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900220fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022100:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022104:	ea4c 040a 	orr.w	r4, ip, sl
90022108:	9411      	str	r4, [sp, #68]	; 0x44
9002210a:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002210c:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022110:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022114:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022118:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002211a:	fb0e f707 	mul.w	r7, lr, r7
9002211e:	fb02 770c 	mla	r7, r2, ip, r7
90022122:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022126:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022128:	fb00 770c 	mla	r7, r0, ip, r7
9002212c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022130:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022132:	fb08 770c 	mla	r7, r8, ip, r7
90022136:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
9002213a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
9002213c:	fb0e fe0c 	mul.w	lr, lr, ip
90022140:	0a3f      	lsrs	r7, r7, #8
90022142:	fb02 e303 	mla	r3, r2, r3, lr
90022146:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90022148:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
9002214c:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022150:	9a11      	ldr	r2, [sp, #68]	; 0x44
90022152:	fb00 330a 	mla	r3, r0, sl, r3
90022156:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002215a:	f8b9 0000 	ldrh.w	r0, [r9]
9002215e:	fb08 3c0c 	mla	ip, r8, ip, r3
90022162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
90022164:	1202      	asrs	r2, r0, #8
90022166:	434b      	muls	r3, r1
90022168:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002216c:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022170:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022174:	1c59      	adds	r1, r3, #1
90022176:	ea47 070c 	orr.w	r7, r7, ip
9002217a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9002217e:	0c3b      	lsrs	r3, r7, #16
90022180:	ea6f 2111 	mvn.w	r1, r1, lsr #8
90022184:	f3c7 2c07 	ubfx	ip, r7, #8, #8
90022188:	b2ff      	uxtb	r7, r7
9002218a:	fb13 f304 	smulbb	r3, r3, r4
9002218e:	b2c9      	uxtb	r1, r1
90022190:	fb1c fc04 	smulbb	ip, ip, r4
90022194:	fb02 3201 	mla	r2, r2, r1, r3
90022198:	10c3      	asrs	r3, r0, #3
9002219a:	fb17 f704 	smulbb	r7, r7, r4
9002219e:	00c0      	lsls	r0, r0, #3
900221a0:	b292      	uxth	r2, r2
900221a2:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900221a6:	b2c0      	uxtb	r0, r0
900221a8:	fb03 c301 	mla	r3, r3, r1, ip
900221ac:	f102 0c01 	add.w	ip, r2, #1
900221b0:	fb00 7001 	mla	r0, r0, r1, r7
900221b4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
900221b8:	b280      	uxth	r0, r0
900221ba:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
900221be:	b29b      	uxth	r3, r3
900221c0:	1c42      	adds	r2, r0, #1
900221c2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
900221c6:	f3c2 22c4 	ubfx	r2, r2, #11, #5
900221ca:	ea42 020c 	orr.w	r2, r2, ip
900221ce:	f103 0c01 	add.w	ip, r3, #1
900221d2:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900221d6:	095b      	lsrs	r3, r3, #5
900221d8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900221dc:	431a      	orrs	r2, r3
900221de:	f8a9 2000 	strh.w	r2, [r9]
900221e2:	9b2b      	ldr	r3, [sp, #172]	; 0xac
900221e4:	f109 0902 	add.w	r9, r9, #2
900221e8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
900221ea:	f10b 3bff 	add.w	fp, fp, #4294967295
900221ee:	441a      	add	r2, r3
900221f0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900221f2:	9229      	str	r2, [sp, #164]	; 0xa4
900221f4:	441d      	add	r5, r3
900221f6:	e63d      	b.n	90021e74 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
900221f8:	2800      	cmp	r0, #0
900221fa:	f43f aedd 	beq.w	90021fb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
900221fe:	5c79      	ldrb	r1, [r7, r1]
90022200:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022204:	910b      	str	r1, [sp, #44]	; 0x2c
90022206:	0e09      	lsrs	r1, r1, #24
90022208:	9114      	str	r1, [sp, #80]	; 0x50
9002220a:	e6d5      	b.n	90021fb8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
9002220c:	b01f      	add	sp, #124	; 0x7c
9002220e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90022212 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
90022212:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022216:	b089      	sub	sp, #36	; 0x24
90022218:	9101      	str	r1, [sp, #4]
9002221a:	9801      	ldr	r0, [sp, #4]
9002221c:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
90022220:	8800      	ldrh	r0, [r0, #0]
90022222:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
90022226:	1206      	asrs	r6, r0, #8
90022228:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
9002222c:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
90022230:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
90022234:	9602      	str	r6, [sp, #8]
90022236:	10c6      	asrs	r6, r0, #3
90022238:	00c0      	lsls	r0, r0, #3
9002223a:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
9002223e:	b2c0      	uxtb	r0, r0
90022240:	9603      	str	r6, [sp, #12]
90022242:	9004      	str	r0, [sp, #16]
90022244:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
90022248:	fb07 100c 	mla	r0, r7, ip, r1
9002224c:	2f00      	cmp	r7, #0
9002224e:	eb02 0e00 	add.w	lr, r2, r0
90022252:	f2c0 810a 	blt.w	9002246a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
90022256:	45b8      	cmp	r8, r7
90022258:	f340 8107 	ble.w	9002246a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
9002225c:	2900      	cmp	r1, #0
9002225e:	f2c0 8102 	blt.w	90022466 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90022262:	458c      	cmp	ip, r1
90022264:	f340 80ff 	ble.w	90022466 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
90022268:	5c12      	ldrb	r2, [r2, r0]
9002226a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
9002226e:	1c4a      	adds	r2, r1, #1
90022270:	f100 80fe 	bmi.w	90022470 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
90022274:	4594      	cmp	ip, r2
90022276:	f340 80fb 	ble.w	90022470 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
9002227a:	2d00      	cmp	r5, #0
9002227c:	f000 80fa 	beq.w	90022474 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
90022280:	f89e 2001 	ldrb.w	r2, [lr, #1]
90022284:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
90022288:	3701      	adds	r7, #1
9002228a:	f100 80f7 	bmi.w	9002247c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
9002228e:	45b8      	cmp	r8, r7
90022290:	f340 80f4 	ble.w	9002247c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
90022294:	2c00      	cmp	r4, #0
90022296:	f000 80f4 	beq.w	90022482 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
9002229a:	2900      	cmp	r1, #0
9002229c:	eb0e 020c 	add.w	r2, lr, ip
900222a0:	f2c0 80ea 	blt.w	90022478 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
900222a4:	458c      	cmp	ip, r1
900222a6:	f340 80e7 	ble.w	90022478 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
900222aa:	f81e 700c 	ldrb.w	r7, [lr, ip]
900222ae:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
900222b2:	3101      	adds	r1, #1
900222b4:	f100 80e8 	bmi.w	90022488 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
900222b8:	458c      	cmp	ip, r1
900222ba:	f340 80e5 	ble.w	90022488 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
900222be:	2d00      	cmp	r5, #0
900222c0:	f000 80e4 	beq.w	9002248c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
900222c4:	7852      	ldrb	r2, [r2, #1]
900222c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
900222ca:	0e0b      	lsrs	r3, r1, #24
900222cc:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
900222d0:	ea4f 6a10 	mov.w	sl, r0, lsr #24
900222d4:	9300      	str	r3, [sp, #0]
900222d6:	b2a4      	uxth	r4, r4
900222d8:	b2ab      	uxth	r3, r5
900222da:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
900222de:	ea4f 6b16 	mov.w	fp, r6, lsr #24
900222e2:	fb03 f904 	mul.w	r9, r3, r4
900222e6:	011b      	lsls	r3, r3, #4
900222e8:	fb0a f505 	mul.w	r5, sl, r5
900222ec:	ea4f 6817 	mov.w	r8, r7, lsr #24
900222f0:	eba3 0e09 	sub.w	lr, r3, r9
900222f4:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
900222f8:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
900222fc:	0a28      	lsrs	r0, r5, #8
900222fe:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
90022302:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90022306:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
9002230a:	fb0a f303 	mul.w	r3, sl, r3
9002230e:	fb08 f707 	mul.w	r7, r8, r7
90022312:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
90022316:	4405      	add	r5, r0
90022318:	fb08 fc0c 	mul.w	ip, r8, ip
9002231c:	b2a4      	uxth	r4, r4
9002231e:	0a2d      	lsrs	r5, r5, #8
90022320:	fa1f fe8e 	uxth.w	lr, lr
90022324:	1b12      	subs	r2, r2, r4
90022326:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
9002232a:	b292      	uxth	r2, r2
9002232c:	9005      	str	r0, [sp, #20]
9002232e:	f503 7080 	add.w	r0, r3, #256	; 0x100
90022332:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90022336:	ea4f 201c 	mov.w	r0, ip, lsr #8
9002233a:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002233e:	0a1b      	lsrs	r3, r3, #8
90022340:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90022344:	9306      	str	r3, [sp, #24]
90022346:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
9002234a:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
9002234e:	4460      	add	r0, ip
90022350:	fb0b f303 	mul.w	r3, fp, r3
90022354:	fb0b f606 	mul.w	r6, fp, r6
90022358:	0a00      	lsrs	r0, r0, #8
9002235a:	0a1d      	lsrs	r5, r3, #8
9002235c:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
90022360:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
90022364:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90022368:	441d      	add	r5, r3
9002236a:	f506 7380 	add.w	r3, r6, #256	; 0x100
9002236e:	eb03 2616 	add.w	r6, r3, r6, lsr #8
90022372:	f507 7380 	add.w	r3, r7, #256	; 0x100
90022376:	0a2d      	lsrs	r5, r5, #8
90022378:	eb03 2317 	add.w	r3, r3, r7, lsr #8
9002237c:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
90022380:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90022384:	0a36      	lsrs	r6, r6, #8
90022386:	0a1b      	lsrs	r3, r3, #8
90022388:	fb05 f50e 	mul.w	r5, r5, lr
9002238c:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
90022390:	9307      	str	r3, [sp, #28]
90022392:	0e0b      	lsrs	r3, r1, #24
90022394:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90022398:	fb0e f606 	mul.w	r6, lr, r6
9002239c:	435f      	muls	r7, r3
9002239e:	4359      	muls	r1, r3
900223a0:	9b05      	ldr	r3, [sp, #20]
900223a2:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900223a6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900223aa:	fb03 5502 	mla	r5, r3, r2, r5
900223ae:	9b06      	ldr	r3, [sp, #24]
900223b0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900223b4:	fb0e fe0b 	mul.w	lr, lr, fp
900223b8:	44bc      	add	ip, r7
900223ba:	f501 7780 	add.w	r7, r1, #256	; 0x100
900223be:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900223c2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
900223c6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900223ca:	0a09      	lsrs	r1, r1, #8
900223cc:	fb0c 5509 	mla	r5, ip, r9, r5
900223d0:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
900223d4:	fb00 5504 	mla	r5, r0, r4, r5
900223d8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
900223dc:	9b07      	ldr	r3, [sp, #28]
900223de:	fb02 6000 	mla	r0, r2, r0, r6
900223e2:	0a2d      	lsrs	r5, r5, #8
900223e4:	fb02 e20a 	mla	r2, r2, sl, lr
900223e8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900223ec:	fb09 0001 	mla	r0, r9, r1, r0
900223f0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
900223f4:	fb04 0003 	mla	r0, r4, r3, r0
900223f8:	9b00      	ldr	r3, [sp, #0]
900223fa:	fb04 2408 	mla	r4, r4, r8, r2
900223fe:	9a04      	ldr	r2, [sp, #16]
90022400:	0a00      	lsrs	r0, r0, #8
90022402:	fb09 4903 	mla	r9, r9, r3, r4
90022406:	9b02      	ldr	r3, [sp, #8]
90022408:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
9002240c:	ea6f 2929 	mvn.w	r9, r9, asr #8
90022410:	4305      	orrs	r5, r0
90022412:	fa5f f989 	uxtb.w	r9, r9
90022416:	fb03 f109 	mul.w	r1, r3, r9
9002241a:	9b03      	ldr	r3, [sp, #12]
9002241c:	fb03 f309 	mul.w	r3, r3, r9
90022420:	fb02 f909 	mul.w	r9, r2, r9
90022424:	1c4a      	adds	r2, r1, #1
90022426:	1c58      	adds	r0, r3, #1
90022428:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002242c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022430:	0c2a      	lsrs	r2, r5, #16
90022432:	0a2b      	lsrs	r3, r5, #8
90022434:	eb02 2211 	add.w	r2, r2, r1, lsr #8
90022438:	eb03 2310 	add.w	r3, r3, r0, lsr #8
9002243c:	0212      	lsls	r2, r2, #8
9002243e:	00db      	lsls	r3, r3, #3
90022440:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
90022444:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022448:	4313      	orrs	r3, r2
9002244a:	f109 0201 	add.w	r2, r9, #1
9002244e:	eb02 2919 	add.w	r9, r2, r9, lsr #8
90022452:	eb05 2519 	add.w	r5, r5, r9, lsr #8
90022456:	f3c5 05c4 	ubfx	r5, r5, #3, #5
9002245a:	431d      	orrs	r5, r3
9002245c:	9b01      	ldr	r3, [sp, #4]
9002245e:	801d      	strh	r5, [r3, #0]
90022460:	b009      	add	sp, #36	; 0x24
90022462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022466:	2000      	movs	r0, #0
90022468:	e701      	b.n	9002226e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
9002246a:	2600      	movs	r6, #0
9002246c:	4630      	mov	r0, r6
9002246e:	e70b      	b.n	90022288 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022470:	2600      	movs	r6, #0
90022472:	e709      	b.n	90022288 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022474:	462e      	mov	r6, r5
90022476:	e707      	b.n	90022288 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
90022478:	2700      	movs	r7, #0
9002247a:	e71a      	b.n	900222b2 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
9002247c:	2100      	movs	r1, #0
9002247e:	460f      	mov	r7, r1
90022480:	e723      	b.n	900222ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022482:	4621      	mov	r1, r4
90022484:	4627      	mov	r7, r4
90022486:	e720      	b.n	900222ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
90022488:	2100      	movs	r1, #0
9002248a:	e71e      	b.n	900222ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
9002248c:	4629      	mov	r1, r5
9002248e:	e71c      	b.n	900222ca <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>

90022490 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022494:	b09b      	sub	sp, #108	; 0x6c
90022496:	9218      	str	r2, [sp, #96]	; 0x60
90022498:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002249a:	9019      	str	r0, [sp, #100]	; 0x64
9002249c:	9116      	str	r1, [sp, #88]	; 0x58
9002249e:	6850      	ldr	r0, [r2, #4]
900224a0:	9307      	str	r3, [sp, #28]
900224a2:	6812      	ldr	r2, [r2, #0]
900224a4:	9d26      	ldr	r5, [sp, #152]	; 0x98
900224a6:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900224aa:	fb00 1303 	mla	r3, r0, r3, r1
900224ae:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900224b2:	930a      	str	r3, [sp, #40]	; 0x28
900224b4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900224b6:	681b      	ldr	r3, [r3, #0]
900224b8:	930f      	str	r3, [sp, #60]	; 0x3c
900224ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900224bc:	685e      	ldr	r6, [r3, #4]
900224be:	3604      	adds	r6, #4
900224c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
900224c2:	2b00      	cmp	r3, #0
900224c4:	dc03      	bgt.n	900224ce <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
900224c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900224c8:	2b00      	cmp	r3, #0
900224ca:	f340 8373 	ble.w	90022bb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
900224ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900224d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900224d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900224d8:	1e48      	subs	r0, r1, #1
900224da:	1e57      	subs	r7, r2, #1
900224dc:	9b07      	ldr	r3, [sp, #28]
900224de:	2b00      	cmp	r3, #0
900224e0:	f340 818f 	ble.w	90022802 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
900224e4:	9c25      	ldr	r4, [sp, #148]	; 0x94
900224e6:	142b      	asrs	r3, r5, #16
900224e8:	ea5f 4c24 	movs.w	ip, r4, asr #16
900224ec:	d406      	bmi.n	900224fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900224ee:	4584      	cmp	ip, r0
900224f0:	da04      	bge.n	900224fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900224f2:	2b00      	cmp	r3, #0
900224f4:	db02      	blt.n	900224fc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
900224f6:	42bb      	cmp	r3, r7
900224f8:	f2c0 8184 	blt.w	90022804 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
900224fc:	f11c 0c01 	adds.w	ip, ip, #1
90022500:	f100 8172 	bmi.w	900227e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022504:	4561      	cmp	r1, ip
90022506:	f2c0 816f 	blt.w	900227e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002250a:	3301      	adds	r3, #1
9002250c:	f100 816c 	bmi.w	900227e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022510:	429a      	cmp	r2, r3
90022512:	f2c0 8169 	blt.w	900227e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90022516:	9b07      	ldr	r3, [sp, #28]
90022518:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002251a:	9317      	str	r3, [sp, #92]	; 0x5c
9002251c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002251e:	2b00      	cmp	r3, #0
90022520:	f340 818e 	ble.w	90022840 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
90022524:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022526:	ea4f 4c25 	mov.w	ip, r5, asr #16
9002252a:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002252e:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022532:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022534:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
90022538:	9b25      	ldr	r3, [sp, #148]	; 0x94
9002253a:	141b      	asrs	r3, r3, #16
9002253c:	f100 81d1 	bmi.w	900228e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022540:	f101 38ff 	add.w	r8, r1, #4294967295
90022544:	4543      	cmp	r3, r8
90022546:	f280 81cc 	bge.w	900228e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002254a:	f1bc 0f00 	cmp.w	ip, #0
9002254e:	f2c0 81c8 	blt.w	900228e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90022552:	f10e 38ff 	add.w	r8, lr, #4294967295
90022556:	45c4      	cmp	ip, r8
90022558:	f280 81c3 	bge.w	900228e2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002255c:	b209      	sxth	r1, r1
9002255e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022560:	fb0c 3301 	mla	r3, ip, r1, r3
90022564:	eb04 0803 	add.w	r8, r4, r3
90022568:	5ce3      	ldrb	r3, [r4, r3]
9002256a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
9002256e:	ea4f 6e13 	mov.w	lr, r3, lsr #24
90022572:	2a00      	cmp	r2, #0
90022574:	f000 81aa 	beq.w	900228cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
90022578:	f898 c001 	ldrb.w	ip, [r8, #1]
9002257c:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
90022580:	940b      	str	r4, [sp, #44]	; 0x2c
90022582:	0e24      	lsrs	r4, r4, #24
90022584:	9412      	str	r4, [sp, #72]	; 0x48
90022586:	b178      	cbz	r0, 900225a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
90022588:	eb08 0c01 	add.w	ip, r8, r1
9002258c:	f818 1001 	ldrb.w	r1, [r8, r1]
90022590:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022594:	9108      	str	r1, [sp, #32]
90022596:	0e09      	lsrs	r1, r1, #24
90022598:	9110      	str	r1, [sp, #64]	; 0x40
9002259a:	f89c 1001 	ldrb.w	r1, [ip, #1]
9002259e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900225a2:	910c      	str	r1, [sp, #48]	; 0x30
900225a4:	0e09      	lsrs	r1, r1, #24
900225a6:	9113      	str	r1, [sp, #76]	; 0x4c
900225a8:	b292      	uxth	r2, r2
900225aa:	9912      	ldr	r1, [sp, #72]	; 0x48
900225ac:	b280      	uxth	r0, r0
900225ae:	9c10      	ldr	r4, [sp, #64]	; 0x40
900225b0:	fb02 f900 	mul.w	r9, r2, r0
900225b4:	0112      	lsls	r2, r2, #4
900225b6:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900225ba:	eba2 0809 	sub.w	r8, r2, r9
900225be:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900225c2:	b280      	uxth	r0, r0
900225c4:	fa1f f888 	uxth.w	r8, r8
900225c8:	1a12      	subs	r2, r2, r0
900225ca:	fb08 f101 	mul.w	r1, r8, r1
900225ce:	b292      	uxth	r2, r2
900225d0:	fb02 110e 	mla	r1, r2, lr, r1
900225d4:	fb00 1104 	mla	r1, r0, r4, r1
900225d8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900225da:	fb09 1104 	mla	r1, r9, r4, r1
900225de:	f3c1 2107 	ubfx	r1, r1, #8, #8
900225e2:	2900      	cmp	r1, #0
900225e4:	f000 80f5 	beq.w	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900225e8:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900225ec:	d01b      	beq.n	90022626 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
900225ee:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900225f2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900225f6:	fb0e fa0a 	mul.w	sl, lr, sl
900225fa:	fb0e fe03 	mul.w	lr, lr, r3
900225fe:	ea4f 231a 	mov.w	r3, sl, lsr #8
90022602:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90022606:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
9002260a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
9002260e:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90022612:	4453      	add	r3, sl
90022614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022618:	0a1b      	lsrs	r3, r3, #8
9002261a:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002261e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90022622:	ea43 030c 	orr.w	r3, r3, ip
90022626:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022628:	2cff      	cmp	r4, #255	; 0xff
9002262a:	d021      	beq.n	90022670 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
9002262c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002262e:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
90022632:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022634:	fb04 fb0b 	mul.w	fp, r4, fp
90022638:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002263a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
9002263e:	9c12      	ldr	r4, [sp, #72]	; 0x48
90022640:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90022644:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022648:	fb04 fa0a 	mul.w	sl, r4, sl
9002264c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022650:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90022654:	44de      	add	lr, fp
90022656:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002265a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002265e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022662:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90022666:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002266a:	ea4e 040a 	orr.w	r4, lr, sl
9002266e:	940b      	str	r4, [sp, #44]	; 0x2c
90022670:	9c10      	ldr	r4, [sp, #64]	; 0x40
90022672:	2cff      	cmp	r4, #255	; 0xff
90022674:	d021      	beq.n	900226ba <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
90022676:	9c08      	ldr	r4, [sp, #32]
90022678:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
9002267c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002267e:	fb04 fb0b 	mul.w	fp, r4, fp
90022682:	9c08      	ldr	r4, [sp, #32]
90022684:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022688:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002268a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002268e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90022692:	fb04 fa0a 	mul.w	sl, r4, sl
90022696:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002269a:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002269e:	44de      	add	lr, fp
900226a0:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900226a4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900226a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900226ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900226b0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900226b4:	ea4e 040a 	orr.w	r4, lr, sl
900226b8:	9408      	str	r4, [sp, #32]
900226ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900226bc:	2cff      	cmp	r4, #255	; 0xff
900226be:	d021      	beq.n	90022704 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
900226c0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900226c2:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
900226c6:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900226c8:	fb04 fb0b 	mul.w	fp, r4, fp
900226cc:	9c0c      	ldr	r4, [sp, #48]	; 0x30
900226ce:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
900226d2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
900226d4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900226d8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900226dc:	fb04 fa0a 	mul.w	sl, r4, sl
900226e0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900226e4:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900226e8:	44de      	add	lr, fp
900226ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900226ee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900226f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900226f6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900226fa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900226fe:	ea4e 040a 	orr.w	r4, lr, sl
90022702:	940c      	str	r4, [sp, #48]	; 0x30
90022704:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90022706:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
9002270a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002270e:	43c9      	mvns	r1, r1
90022710:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022714:	9c08      	ldr	r4, [sp, #32]
90022716:	fb08 fc0c 	mul.w	ip, r8, ip
9002271a:	fb02 cc0e 	mla	ip, r2, lr, ip
9002271e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
90022722:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90022724:	fb00 cc0e 	mla	ip, r0, lr, ip
90022728:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
9002272c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002272e:	fb09 cc0e 	mla	ip, r9, lr, ip
90022732:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
90022736:	fb08 f80e 	mul.w	r8, r8, lr
9002273a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002273e:	fa5f fe81 	uxtb.w	lr, r1
90022742:	fb02 8303 	mla	r3, r2, r3, r8
90022746:	9a08      	ldr	r2, [sp, #32]
90022748:	f8b7 8000 	ldrh.w	r8, [r7]
9002274c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022750:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90022754:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90022756:	ea4f 01c8 	mov.w	r1, r8, lsl #3
9002275a:	fb00 330a 	mla	r3, r0, sl, r3
9002275e:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
90022762:	ea4f 2228 	mov.w	r2, r8, asr #8
90022766:	fb09 3900 	mla	r9, r9, r0, r3
9002276a:	ea4f 00e8 	mov.w	r0, r8, asr #3
9002276e:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90022772:	b2c9      	uxtb	r1, r1
90022774:	ea4f 2919 	mov.w	r9, r9, lsr #8
90022778:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002277c:	fb02 f20e 	mul.w	r2, r2, lr
90022780:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90022784:	fb00 f00e 	mul.w	r0, r0, lr
90022788:	1c53      	adds	r3, r2, #1
9002278a:	fb01 f10e 	mul.w	r1, r1, lr
9002278e:	ea4c 0c09 	orr.w	ip, ip, r9
90022792:	eb03 2212 	add.w	r2, r3, r2, lsr #8
90022796:	ea4f 431c 	mov.w	r3, ip, lsr #16
9002279a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
9002279e:	4a60      	ldr	r2, [pc, #384]	; (90022920 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
900227a0:	b2db      	uxtb	r3, r3
900227a2:	ea02 2203 	and.w	r2, r2, r3, lsl #8
900227a6:	1c43      	adds	r3, r0, #1
900227a8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900227ac:	ea4f 231c 	mov.w	r3, ip, lsr #8
900227b0:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900227b4:	00db      	lsls	r3, r3, #3
900227b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
900227ba:	4313      	orrs	r3, r2
900227bc:	1c4a      	adds	r2, r1, #1
900227be:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900227c2:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
900227c6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
900227ca:	ea4c 0c03 	orr.w	ip, ip, r3
900227ce:	f8a7 c000 	strh.w	ip, [r7]
900227d2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900227d4:	3702      	adds	r7, #2
900227d6:	9a25      	ldr	r2, [sp, #148]	; 0x94
900227d8:	441a      	add	r2, r3
900227da:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900227dc:	441d      	add	r5, r3
900227de:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900227e0:	9225      	str	r2, [sp, #148]	; 0x94
900227e2:	3b01      	subs	r3, #1
900227e4:	9317      	str	r3, [sp, #92]	; 0x5c
900227e6:	e699      	b.n	9002251c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
900227e8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
900227ea:	9c25      	ldr	r4, [sp, #148]	; 0x94
900227ec:	441c      	add	r4, r3
900227ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900227f0:	441d      	add	r5, r3
900227f2:	9b07      	ldr	r3, [sp, #28]
900227f4:	9425      	str	r4, [sp, #148]	; 0x94
900227f6:	3b01      	subs	r3, #1
900227f8:	9307      	str	r3, [sp, #28]
900227fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900227fc:	3302      	adds	r3, #2
900227fe:	930a      	str	r3, [sp, #40]	; 0x28
90022800:	e66c      	b.n	900224dc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
90022802:	d024      	beq.n	9002284e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
90022804:	9b07      	ldr	r3, [sp, #28]
90022806:	9827      	ldr	r0, [sp, #156]	; 0x9c
90022808:	3b01      	subs	r3, #1
9002280a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002280c:	fb00 4003 	mla	r0, r0, r3, r4
90022810:	1400      	asrs	r0, r0, #16
90022812:	f53f ae80 	bmi.w	90022516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022816:	3901      	subs	r1, #1
90022818:	4288      	cmp	r0, r1
9002281a:	f6bf ae7c 	bge.w	90022516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002281e:	9928      	ldr	r1, [sp, #160]	; 0xa0
90022820:	fb01 5303 	mla	r3, r1, r3, r5
90022824:	141b      	asrs	r3, r3, #16
90022826:	f53f ae76 	bmi.w	90022516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
9002282a:	3a01      	subs	r2, #1
9002282c:	4293      	cmp	r3, r2
9002282e:	f6bf ae72 	bge.w	90022516 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
90022832:	f8dd b01c 	ldr.w	fp, [sp, #28]
90022836:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
9002283a:	f1bb 0f00 	cmp.w	fp, #0
9002283e:	dc71      	bgt.n	90022924 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90022840:	9b07      	ldr	r3, [sp, #28]
90022842:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90022846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90022848:	eb03 0344 	add.w	r3, r3, r4, lsl #1
9002284c:	930a      	str	r3, [sp, #40]	; 0x28
9002284e:	9b16      	ldr	r3, [sp, #88]	; 0x58
90022850:	2b00      	cmp	r3, #0
90022852:	f340 81af 	ble.w	90022bb4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
90022856:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002285a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002285c:	ee30 0a04 	vadd.f32	s0, s0, s8
90022860:	ee70 0aa4 	vadd.f32	s1, s1, s9
90022864:	eef0 6a62 	vmov.f32	s13, s5
90022868:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002286c:	ee31 1a05 	vadd.f32	s2, s2, s10
90022870:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022874:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
90022878:	eef0 6a43 	vmov.f32	s13, s6
9002287c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90022880:	ee16 5a90 	vmov	r5, s13
90022884:	ee20 7aa7 	vmul.f32	s14, s1, s15
90022888:	ee61 7a27 	vmul.f32	s15, s2, s15
9002288c:	ee77 2a62 	vsub.f32	s5, s14, s5
90022890:	ee37 3ac3 	vsub.f32	s6, s15, s6
90022894:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90022898:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002289c:	ee12 2a90 	vmov	r2, s5
900228a0:	eef0 2a47 	vmov.f32	s5, s14
900228a4:	fb92 f3f3 	sdiv	r3, r2, r3
900228a8:	ee13 2a10 	vmov	r2, s6
900228ac:	9327      	str	r3, [sp, #156]	; 0x9c
900228ae:	9b24      	ldr	r3, [sp, #144]	; 0x90
900228b0:	eeb0 3a67 	vmov.f32	s6, s15
900228b4:	fb92 f3f3 	sdiv	r3, r2, r3
900228b8:	9328      	str	r3, [sp, #160]	; 0xa0
900228ba:	9b16      	ldr	r3, [sp, #88]	; 0x58
900228bc:	9a18      	ldr	r2, [sp, #96]	; 0x60
900228be:	3b01      	subs	r3, #1
900228c0:	9316      	str	r3, [sp, #88]	; 0x58
900228c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
900228c4:	bf08      	it	eq
900228c6:	4613      	moveq	r3, r2
900228c8:	9307      	str	r3, [sp, #28]
900228ca:	e5f9      	b.n	900224c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
900228cc:	2800      	cmp	r0, #0
900228ce:	f43f ae6b 	beq.w	900225a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900228d2:	f818 1001 	ldrb.w	r1, [r8, r1]
900228d6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
900228da:	9108      	str	r1, [sp, #32]
900228dc:	0e09      	lsrs	r1, r1, #24
900228de:	9110      	str	r1, [sp, #64]	; 0x40
900228e0:	e662      	b.n	900225a8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
900228e2:	f113 0801 	adds.w	r8, r3, #1
900228e6:	f53f af74 	bmi.w	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900228ea:	4541      	cmp	r1, r8
900228ec:	f6ff af71 	blt.w	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900228f0:	f11c 0801 	adds.w	r8, ip, #1
900228f4:	f53f af6d 	bmi.w	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900228f8:	45c6      	cmp	lr, r8
900228fa:	f6ff af6a 	blt.w	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
900228fe:	b209      	sxth	r1, r1
90022900:	e9cd 3c02 	strd	r3, ip, [sp, #8]
90022904:	fa0f f38e 	sxth.w	r3, lr
90022908:	9100      	str	r1, [sp, #0]
9002290a:	4639      	mov	r1, r7
9002290c:	9301      	str	r3, [sp, #4]
9002290e:	4633      	mov	r3, r6
90022910:	e9cd 2004 	strd	r2, r0, [sp, #16]
90022914:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90022916:	9819      	ldr	r0, [sp, #100]	; 0x64
90022918:	f7ff fc7b 	bl	90022212 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
9002291c:	e759      	b.n	900227d2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
9002291e:	bf00      	nop
90022920:	fffff800 	.word	0xfffff800
90022924:	9b25      	ldr	r3, [sp, #148]	; 0x94
90022926:	f3c5 3003 	ubfx	r0, r5, #12, #4
9002292a:	9c25      	ldr	r4, [sp, #148]	; 0x94
9002292c:	f3c3 3203 	ubfx	r2, r3, #12, #4
90022930:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90022932:	1427      	asrs	r7, r4, #16
90022934:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
90022936:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002293a:	142b      	asrs	r3, r5, #16
9002293c:	fb01 7303 	mla	r3, r1, r3, r7
90022940:	18e7      	adds	r7, r4, r3
90022942:	5ce3      	ldrb	r3, [r4, r3]
90022944:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
90022948:	ea4f 6c13 	mov.w	ip, r3, lsr #24
9002294c:	2a00      	cmp	r2, #0
9002294e:	f000 8127 	beq.w	90022ba0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
90022952:	f897 e001 	ldrb.w	lr, [r7, #1]
90022956:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
9002295a:	940d      	str	r4, [sp, #52]	; 0x34
9002295c:	0e24      	lsrs	r4, r4, #24
9002295e:	9414      	str	r4, [sp, #80]	; 0x50
90022960:	b170      	cbz	r0, 90022980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022962:	eb07 0e01 	add.w	lr, r7, r1
90022966:	5c79      	ldrb	r1, [r7, r1]
90022968:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002296c:	9109      	str	r1, [sp, #36]	; 0x24
9002296e:	0e09      	lsrs	r1, r1, #24
90022970:	9111      	str	r1, [sp, #68]	; 0x44
90022972:	f89e 1001 	ldrb.w	r1, [lr, #1]
90022976:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
9002297a:	910e      	str	r1, [sp, #56]	; 0x38
9002297c:	0e09      	lsrs	r1, r1, #24
9002297e:	9115      	str	r1, [sp, #84]	; 0x54
90022980:	b292      	uxth	r2, r2
90022982:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022984:	b280      	uxth	r0, r0
90022986:	fb02 f800 	mul.w	r8, r2, r0
9002298a:	0112      	lsls	r2, r2, #4
9002298c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
90022990:	eba2 0e08 	sub.w	lr, r2, r8
90022994:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90022998:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002299a:	b280      	uxth	r0, r0
9002299c:	fa1f fe8e 	uxth.w	lr, lr
900229a0:	1a09      	subs	r1, r1, r0
900229a2:	fb0e f202 	mul.w	r2, lr, r2
900229a6:	b289      	uxth	r1, r1
900229a8:	fb01 220c 	mla	r2, r1, ip, r2
900229ac:	fb00 2204 	mla	r2, r0, r4, r2
900229b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
900229b2:	fb08 2204 	mla	r2, r8, r4, r2
900229b6:	f3c2 2207 	ubfx	r2, r2, #8, #8
900229ba:	2a00      	cmp	r2, #0
900229bc:	f000 80e5 	beq.w	90022b8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
900229c0:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
900229c4:	d019      	beq.n	900229fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
900229c6:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
900229ca:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
900229ce:	fb0c fa0a 	mul.w	sl, ip, sl
900229d2:	fb0c fc03 	mul.w	ip, ip, r3
900229d6:	ea4f 231a 	mov.w	r3, sl, lsr #8
900229da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
900229de:	f50c 7780 	add.w	r7, ip, #256	; 0x100
900229e2:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900229e6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
900229ea:	4453      	add	r3, sl
900229ec:	0a3f      	lsrs	r7, r7, #8
900229ee:	0a1b      	lsrs	r3, r3, #8
900229f0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
900229f4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
900229f8:	433b      	orrs	r3, r7
900229fa:	9c14      	ldr	r4, [sp, #80]	; 0x50
900229fc:	2cff      	cmp	r4, #255	; 0xff
900229fe:	d020      	beq.n	90022a42 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
90022a00:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022a02:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022a06:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022a08:	4367      	muls	r7, r4
90022a0a:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022a0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022a10:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022a14:	9c14      	ldr	r4, [sp, #80]	; 0x50
90022a16:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022a1a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022a1e:	fb04 fa0a 	mul.w	sl, r4, sl
90022a22:	44bc      	add	ip, r7
90022a24:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022a28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022a2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022a30:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022a34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022a38:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022a3c:	ea4c 040a 	orr.w	r4, ip, sl
90022a40:	940d      	str	r4, [sp, #52]	; 0x34
90022a42:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022a44:	2cff      	cmp	r4, #255	; 0xff
90022a46:	d020      	beq.n	90022a8a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
90022a48:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022a4a:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022a4e:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022a50:	4367      	muls	r7, r4
90022a52:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022a54:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022a58:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022a5c:	9c11      	ldr	r4, [sp, #68]	; 0x44
90022a5e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022a62:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022a66:	fb04 fa0a 	mul.w	sl, r4, sl
90022a6a:	44bc      	add	ip, r7
90022a6c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022a70:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022a74:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022a78:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022a7c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022a80:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022a84:	ea4c 040a 	orr.w	r4, ip, sl
90022a88:	9409      	str	r4, [sp, #36]	; 0x24
90022a8a:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022a8c:	2cff      	cmp	r4, #255	; 0xff
90022a8e:	d020      	beq.n	90022ad2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
90022a90:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022a92:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022a96:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022a98:	4367      	muls	r7, r4
90022a9a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022a9c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90022aa0:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
90022aa4:	9c15      	ldr	r4, [sp, #84]	; 0x54
90022aa6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90022aaa:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022aae:	fb04 fa0a 	mul.w	sl, r4, sl
90022ab2:	44bc      	add	ip, r7
90022ab4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90022ab8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022abc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90022ac0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90022ac4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90022ac8:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90022acc:	ea4c 040a 	orr.w	r4, ip, sl
90022ad0:	940e      	str	r4, [sp, #56]	; 0x38
90022ad2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022ad4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90022ad8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90022adc:	43d2      	mvns	r2, r2
90022ade:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
90022ae2:	9c09      	ldr	r4, [sp, #36]	; 0x24
90022ae4:	b2d2      	uxtb	r2, r2
90022ae6:	fb0e f707 	mul.w	r7, lr, r7
90022aea:	fb01 770c 	mla	r7, r1, ip, r7
90022aee:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022af2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90022af4:	fb00 770c 	mla	r7, r0, ip, r7
90022af8:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90022afc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022afe:	fb08 770c 	mla	r7, r8, ip, r7
90022b02:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
90022b06:	fb0e fe0c 	mul.w	lr, lr, ip
90022b0a:	0a3f      	lsrs	r7, r7, #8
90022b0c:	fb01 e303 	mla	r3, r1, r3, lr
90022b10:	9909      	ldr	r1, [sp, #36]	; 0x24
90022b12:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90022b16:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90022b1a:	990e      	ldr	r1, [sp, #56]	; 0x38
90022b1c:	fb00 330a 	mla	r3, r0, sl, r3
90022b20:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90022b24:	fb08 3c0c 	mla	ip, r8, ip, r3
90022b28:	f8b9 3000 	ldrh.w	r3, [r9]
90022b2c:	1218      	asrs	r0, r3, #8
90022b2e:	10d9      	asrs	r1, r3, #3
90022b30:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90022b34:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90022b38:	00db      	lsls	r3, r3, #3
90022b3a:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
90022b3e:	4350      	muls	r0, r2
90022b40:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90022b44:	b2db      	uxtb	r3, r3
90022b46:	4351      	muls	r1, r2
90022b48:	ea47 070c 	orr.w	r7, r7, ip
90022b4c:	4353      	muls	r3, r2
90022b4e:	1c42      	adds	r2, r0, #1
90022b50:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022b54:	0c3a      	lsrs	r2, r7, #16
90022b56:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90022b5a:	4a18      	ldr	r2, [pc, #96]	; (90022bbc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
90022b5c:	b2c0      	uxtb	r0, r0
90022b5e:	ea02 2000 	and.w	r0, r2, r0, lsl #8
90022b62:	1c4a      	adds	r2, r1, #1
90022b64:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022b68:	0a3a      	lsrs	r2, r7, #8
90022b6a:	eb02 2111 	add.w	r1, r2, r1, lsr #8
90022b6e:	00c9      	lsls	r1, r1, #3
90022b70:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90022b74:	4301      	orrs	r1, r0
90022b76:	1c58      	adds	r0, r3, #1
90022b78:	eb00 2013 	add.w	r0, r0, r3, lsr #8
90022b7c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90022b80:	f3c7 00c4 	ubfx	r0, r7, #3, #5
90022b84:	4308      	orrs	r0, r1
90022b86:	f8a9 0000 	strh.w	r0, [r9]
90022b8a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90022b8c:	f109 0902 	add.w	r9, r9, #2
90022b90:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022b92:	f10b 3bff 	add.w	fp, fp, #4294967295
90022b96:	441a      	add	r2, r3
90022b98:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022b9a:	9225      	str	r2, [sp, #148]	; 0x94
90022b9c:	441d      	add	r5, r3
90022b9e:	e64c      	b.n	9002283a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022ba0:	2800      	cmp	r0, #0
90022ba2:	f43f aeed 	beq.w	90022980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022ba6:	5c79      	ldrb	r1, [r7, r1]
90022ba8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
90022bac:	9109      	str	r1, [sp, #36]	; 0x24
90022bae:	0e09      	lsrs	r1, r1, #24
90022bb0:	9111      	str	r1, [sp, #68]	; 0x44
90022bb2:	e6e5      	b.n	90022980 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
90022bb4:	b01b      	add	sp, #108	; 0x6c
90022bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022bba:	bf00      	nop
90022bbc:	fffff800 	.word	0xfffff800

90022bc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
90022bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022bc4:	b085      	sub	sp, #20
90022bc6:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
90022bca:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
90022bce:	2800      	cmp	r0, #0
90022bd0:	9103      	str	r1, [sp, #12]
90022bd2:	fb00 7406 	mla	r4, r0, r6, r7
90022bd6:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
90022bda:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
90022bde:	eb02 0544 	add.w	r5, r2, r4, lsl #1
90022be2:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
90022be6:	eb03 0904 	add.w	r9, r3, r4
90022bea:	9501      	str	r5, [sp, #4]
90022bec:	f2c0 8150 	blt.w	90022e90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022bf0:	4583      	cmp	fp, r0
90022bf2:	f340 814d 	ble.w	90022e90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
90022bf6:	2f00      	cmp	r7, #0
90022bf8:	f2c0 8146 	blt.w	90022e88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022bfc:	42be      	cmp	r6, r7
90022bfe:	f340 8143 	ble.w	90022e88 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
90022c02:	f813 c004 	ldrb.w	ip, [r3, r4]
90022c06:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
90022c0a:	f64f 041f 	movw	r4, #63519	; 0xf81f
90022c0e:	ea4f 02ec 	mov.w	r2, ip, asr #3
90022c12:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
90022c16:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022c1a:	4355      	muls	r5, r2
90022c1c:	fb0c f203 	mul.w	r2, ip, r3
90022c20:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90022c24:	f605 0501 	addw	r5, r5, #2049	; 0x801
90022c28:	441d      	add	r5, r3
90022c2a:	f102 0320 	add.w	r3, r2, #32
90022c2e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90022c32:	ea04 1455 	and.w	r4, r4, r5, lsr #5
90022c36:	0a1b      	lsrs	r3, r3, #8
90022c38:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90022c3c:	431c      	orrs	r4, r3
90022c3e:	1c7b      	adds	r3, r7, #1
90022c40:	f100 812b 	bmi.w	90022e9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022c44:	429e      	cmp	r6, r3
90022c46:	f340 8128 	ble.w	90022e9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
90022c4a:	2900      	cmp	r1, #0
90022c4c:	f000 8128 	beq.w	90022ea0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
90022c50:	9a01      	ldr	r2, [sp, #4]
90022c52:	f899 3001 	ldrb.w	r3, [r9, #1]
90022c56:	8855      	ldrh	r5, [r2, #2]
90022c58:	ea4f 08e3 	mov.w	r8, r3, asr #3
90022c5c:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90022c60:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022c64:	fb08 f802 	mul.w	r8, r8, r2
90022c68:	f64f 021f 	movw	r2, #63519	; 0xf81f
90022c6c:	435d      	muls	r5, r3
90022c6e:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90022c72:	f608 0801 	addw	r8, r8, #2049	; 0x801
90022c76:	44d0      	add	r8, sl
90022c78:	f105 0a20 	add.w	sl, r5, #32
90022c7c:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90022c80:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90022c84:	0a2d      	lsrs	r5, r5, #8
90022c86:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90022c8a:	432a      	orrs	r2, r5
90022c8c:	3001      	adds	r0, #1
90022c8e:	f100 810d 	bmi.w	90022eac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022c92:	4583      	cmp	fp, r0
90022c94:	f340 810a 	ble.w	90022eac <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
90022c98:	f1be 0f00 	cmp.w	lr, #0
90022c9c:	f000 810b 	beq.w	90022eb6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
90022ca0:	2f00      	cmp	r7, #0
90022ca2:	f2c0 8100 	blt.w	90022ea6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022ca6:	42be      	cmp	r6, r7
90022ca8:	f340 80fd 	ble.w	90022ea6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
90022cac:	9801      	ldr	r0, [sp, #4]
90022cae:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
90022cb2:	f819 5006 	ldrb.w	r5, [r9, r6]
90022cb6:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
90022cba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
90022cbe:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
90022cc2:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
90022cc6:	fb0a fa00 	mul.w	sl, sl, r0
90022cca:	fb05 f808 	mul.w	r8, r5, r8
90022cce:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
90022cd2:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
90022cd6:	4482      	add	sl, r0
90022cd8:	f108 0020 	add.w	r0, r8, #32
90022cdc:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022ce0:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
90022ce4:	0a00      	lsrs	r0, r0, #8
90022ce6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022cea:	ea4b 0b00 	orr.w	fp, fp, r0
90022cee:	3701      	adds	r7, #1
90022cf0:	f100 80e6 	bmi.w	90022ec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022cf4:	42be      	cmp	r6, r7
90022cf6:	f340 80e3 	ble.w	90022ec0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
90022cfa:	2900      	cmp	r1, #0
90022cfc:	f000 80e3 	beq.w	90022ec6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
90022d00:	3601      	adds	r6, #1
90022d02:	9801      	ldr	r0, [sp, #4]
90022d04:	f819 7006 	ldrb.w	r7, [r9, r6]
90022d08:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90022d0c:	ea4f 09e7 	mov.w	r9, r7, asr #3
90022d10:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90022d14:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022d18:	fb09 f906 	mul.w	r9, r9, r6
90022d1c:	fb07 f800 	mul.w	r8, r7, r0
90022d20:	f64f 001f 	movw	r0, #63519	; 0xf81f
90022d24:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
90022d28:	f609 0901 	addw	r9, r9, #2049	; 0x801
90022d2c:	44d1      	add	r9, sl
90022d2e:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90022d32:	f108 0020 	add.w	r0, r8, #32
90022d36:	eb00 2018 	add.w	r0, r0, r8, lsr #8
90022d3a:	0a00      	lsrs	r0, r0, #8
90022d3c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90022d40:	4330      	orrs	r0, r6
90022d42:	b28e      	uxth	r6, r1
90022d44:	fa1f f98e 	uxth.w	r9, lr
90022d48:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90022d4c:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90022d50:	fb06 f809 	mul.w	r8, r6, r9
90022d54:	0136      	lsls	r6, r6, #4
90022d56:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022d5a:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90022d5e:	9601      	str	r6, [sp, #4]
90022d60:	ea4a 0404 	orr.w	r4, sl, r4
90022d64:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90022d68:	fa1f f689 	uxth.w	r6, r9
90022d6c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90022d70:	fb11 f90e 	smulbb	r9, r1, lr
90022d74:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022d78:	9602      	str	r6, [sp, #8]
90022d7a:	4626      	mov	r6, r4
90022d7c:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90022d80:	f1ce 0410 	rsb	r4, lr, #16
90022d84:	ea4a 0202 	orr.w	r2, sl, r2
90022d88:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90022d8c:	1a64      	subs	r4, r4, r1
90022d8e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90022d92:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90022d96:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90022d9a:	434a      	muls	r2, r1
90022d9c:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90022da0:	ea4a 0000 	orr.w	r0, sl, r0
90022da4:	9903      	ldr	r1, [sp, #12]
90022da6:	fb04 2406 	mla	r4, r4, r6, r2
90022daa:	9e02      	ldr	r6, [sp, #8]
90022dac:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
90022db0:	fb09 4200 	mla	r2, r9, r0, r4
90022db4:	ea4f 440b 	mov.w	r4, fp, lsl #16
90022db8:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90022dbc:	8808      	ldrh	r0, [r1, #0]
90022dbe:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90022dc2:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
90022dc6:	ea44 0b0b 	orr.w	fp, r4, fp
90022dca:	9c01      	ldr	r4, [sp, #4]
90022dcc:	b289      	uxth	r1, r1
90022dce:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
90022dd2:	fb0e 2e0b 	mla	lr, lr, fp, r2
90022dd6:	1ba4      	subs	r4, r4, r6
90022dd8:	9e01      	ldr	r6, [sp, #4]
90022dda:	ea4f 525e 	mov.w	r2, lr, lsr #21
90022dde:	eba6 0608 	sub.w	r6, r6, r8
90022de2:	b2a4      	uxth	r4, r4
90022de4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90022de8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90022dec:	b2b6      	uxth	r6, r6
90022dee:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90022df2:	4373      	muls	r3, r6
90022df4:	ea42 0e0e 	orr.w	lr, r2, lr
90022df8:	fb0c 3304 	mla	r3, ip, r4, r3
90022dfc:	9c02      	ldr	r4, [sp, #8]
90022dfe:	fa1f f28e 	uxth.w	r2, lr
90022e02:	fb04 3505 	mla	r5, r4, r5, r3
90022e06:	10d4      	asrs	r4, r2, #3
90022e08:	fb08 5707 	mla	r7, r8, r7, r5
90022e0c:	1215      	asrs	r5, r2, #8
90022e0e:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
90022e12:	00d2      	lsls	r2, r2, #3
90022e14:	f3c7 2707 	ubfx	r7, r7, #8, #8
90022e18:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90022e1c:	b2d2      	uxtb	r2, r2
90022e1e:	434f      	muls	r7, r1
90022e20:	1c7b      	adds	r3, r7, #1
90022e22:	eb03 2717 	add.w	r7, r3, r7, lsr #8
90022e26:	1203      	asrs	r3, r0, #8
90022e28:	ea6f 2717 	mvn.w	r7, r7, lsr #8
90022e2c:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90022e30:	b2ff      	uxtb	r7, r7
90022e32:	fb13 f307 	smulbb	r3, r3, r7
90022e36:	fb05 3501 	mla	r5, r5, r1, r3
90022e3a:	10c3      	asrs	r3, r0, #3
90022e3c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
90022e40:	b2ad      	uxth	r5, r5
90022e42:	fb13 f307 	smulbb	r3, r3, r7
90022e46:	fb04 3401 	mla	r4, r4, r1, r3
90022e4a:	00c3      	lsls	r3, r0, #3
90022e4c:	b2db      	uxtb	r3, r3
90022e4e:	b2a4      	uxth	r4, r4
90022e50:	fb13 f307 	smulbb	r3, r3, r7
90022e54:	fb02 3101 	mla	r1, r2, r1, r3
90022e58:	1c6b      	adds	r3, r5, #1
90022e5a:	1c62      	adds	r2, r4, #1
90022e5c:	b289      	uxth	r1, r1
90022e5e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90022e62:	1c4b      	adds	r3, r1, #1
90022e64:	eb02 2414 	add.w	r4, r2, r4, lsr #8
90022e68:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90022e6c:	9a03      	ldr	r2, [sp, #12]
90022e6e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90022e72:	0964      	lsrs	r4, r4, #5
90022e74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90022e78:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
90022e7c:	432b      	orrs	r3, r5
90022e7e:	4323      	orrs	r3, r4
90022e80:	8013      	strh	r3, [r2, #0]
90022e82:	b005      	add	sp, #20
90022e84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90022e88:	f04f 0c00 	mov.w	ip, #0
90022e8c:	4664      	mov	r4, ip
90022e8e:	e6d6      	b.n	90022c3e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
90022e90:	2300      	movs	r3, #0
90022e92:	469c      	mov	ip, r3
90022e94:	461a      	mov	r2, r3
90022e96:	461c      	mov	r4, r3
90022e98:	e6f8      	b.n	90022c8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022e9a:	2300      	movs	r3, #0
90022e9c:	461a      	mov	r2, r3
90022e9e:	e6f5      	b.n	90022c8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022ea0:	460b      	mov	r3, r1
90022ea2:	460a      	mov	r2, r1
90022ea4:	e6f2      	b.n	90022c8c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
90022ea6:	2500      	movs	r5, #0
90022ea8:	46ab      	mov	fp, r5
90022eaa:	e720      	b.n	90022cee <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
90022eac:	2700      	movs	r7, #0
90022eae:	463d      	mov	r5, r7
90022eb0:	4638      	mov	r0, r7
90022eb2:	46bb      	mov	fp, r7
90022eb4:	e745      	b.n	90022d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022eb6:	4677      	mov	r7, lr
90022eb8:	4675      	mov	r5, lr
90022eba:	4670      	mov	r0, lr
90022ebc:	46f3      	mov	fp, lr
90022ebe:	e740      	b.n	90022d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022ec0:	2700      	movs	r7, #0
90022ec2:	4638      	mov	r0, r7
90022ec4:	e73d      	b.n	90022d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
90022ec6:	460f      	mov	r7, r1
90022ec8:	4608      	mov	r0, r1
90022eca:	e73a      	b.n	90022d42 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

90022ecc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90022ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90022ed0:	b097      	sub	sp, #92	; 0x5c
90022ed2:	9214      	str	r2, [sp, #80]	; 0x50
90022ed4:	9308      	str	r3, [sp, #32]
90022ed6:	9a25      	ldr	r2, [sp, #148]	; 0x94
90022ed8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
90022edc:	9015      	str	r0, [sp, #84]	; 0x54
90022ede:	9312      	str	r3, [sp, #72]	; 0x48
90022ee0:	6850      	ldr	r0, [r2, #4]
90022ee2:	9111      	str	r1, [sp, #68]	; 0x44
90022ee4:	6812      	ldr	r2, [r2, #0]
90022ee6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
90022eea:	fb00 1303 	mla	r3, r0, r3, r1
90022eee:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90022ef2:	9309      	str	r3, [sp, #36]	; 0x24
90022ef4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022ef6:	681b      	ldr	r3, [r3, #0]
90022ef8:	930b      	str	r3, [sp, #44]	; 0x2c
90022efa:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022efc:	685b      	ldr	r3, [r3, #4]
90022efe:	930c      	str	r3, [sp, #48]	; 0x30
90022f00:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
90022f04:	930a      	str	r3, [sp, #40]	; 0x28
90022f06:	9b11      	ldr	r3, [sp, #68]	; 0x44
90022f08:	2b00      	cmp	r3, #0
90022f0a:	dc03      	bgt.n	90022f14 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90022f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
90022f0e:	2b00      	cmp	r3, #0
90022f10:	f340 83cd 	ble.w	900236ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
90022f14:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022f16:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90022f1a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90022f1e:	1e48      	subs	r0, r1, #1
90022f20:	1e55      	subs	r5, r2, #1
90022f22:	9b08      	ldr	r3, [sp, #32]
90022f24:	2b00      	cmp	r3, #0
90022f26:	f340 81a5 	ble.w	90023274 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a8>
90022f2a:	9e21      	ldr	r6, [sp, #132]	; 0x84
90022f2c:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f2e:	1436      	asrs	r6, r6, #16
90022f30:	ea4f 4323 	mov.w	r3, r3, asr #16
90022f34:	d406      	bmi.n	90022f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022f36:	4286      	cmp	r6, r0
90022f38:	da04      	bge.n	90022f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022f3a:	2b00      	cmp	r3, #0
90022f3c:	db02      	blt.n	90022f44 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90022f3e:	42ab      	cmp	r3, r5
90022f40:	f2c0 8199 	blt.w	90023276 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
90022f44:	3601      	adds	r6, #1
90022f46:	f100 8186 	bmi.w	90023256 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022f4a:	42b1      	cmp	r1, r6
90022f4c:	f2c0 8183 	blt.w	90023256 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022f50:	3301      	adds	r3, #1
90022f52:	f100 8180 	bmi.w	90023256 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022f56:	429a      	cmp	r2, r3
90022f58:	f2c0 817d 	blt.w	90023256 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
90022f5c:	9b08      	ldr	r3, [sp, #32]
90022f5e:	f64f 061f 	movw	r6, #63519	; 0xf81f
90022f62:	9f09      	ldr	r7, [sp, #36]	; 0x24
90022f64:	9313      	str	r3, [sp, #76]	; 0x4c
90022f66:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90022f68:	2b00      	cmp	r3, #0
90022f6a:	f340 81a6 	ble.w	900232ba <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90022f6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f70:	9d21      	ldr	r5, [sp, #132]	; 0x84
90022f72:	1418      	asrs	r0, r3, #16
90022f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
90022f76:	142d      	asrs	r5, r5, #16
90022f78:	f3c3 3103 	ubfx	r1, r3, #12, #4
90022f7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
90022f7e:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90022f82:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90022f84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90022f88:	f100 81fa 	bmi.w	90023380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022f8c:	f102 3eff 	add.w	lr, r2, #4294967295
90022f90:	4575      	cmp	r5, lr
90022f92:	f280 81f5 	bge.w	90023380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022f96:	2800      	cmp	r0, #0
90022f98:	f2c0 81f2 	blt.w	90023380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022f9c:	f103 3eff 	add.w	lr, r3, #4294967295
90022fa0:	4570      	cmp	r0, lr
90022fa2:	f280 81ed 	bge.w	90023380 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
90022fa6:	b212      	sxth	r2, r2
90022fa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90022faa:	fa1f fe81 	uxth.w	lr, r1
90022fae:	fb00 5002 	mla	r0, r0, r2, r5
90022fb2:	ea4f 150e 	mov.w	r5, lr, lsl #4
90022fb6:	eb03 0a00 	add.w	sl, r3, r0
90022fba:	f813 9000 	ldrb.w	r9, [r3, r0]
90022fbe:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90022fc2:	f89a 8001 	ldrb.w	r8, [sl, #1]
90022fc6:	b29b      	uxth	r3, r3
90022fc8:	f1bc 0f00 	cmp.w	ip, #0
90022fcc:	f000 81bb 	beq.w	90023346 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x47a>
90022fd0:	f81a 4002 	ldrb.w	r4, [sl, r2]
90022fd4:	eb0a 0b02 	add.w	fp, sl, r2
90022fd8:	fa1f fa8c 	uxth.w	sl, ip
90022fdc:	940d      	str	r4, [sp, #52]	; 0x34
90022fde:	fb0a fe0e 	mul.w	lr, sl, lr
90022fe2:	f89b 4001 	ldrb.w	r4, [fp, #1]
90022fe6:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90022fea:	eba5 050e 	sub.w	r5, r5, lr
90022fee:	940e      	str	r4, [sp, #56]	; 0x38
90022ff0:	fa1f fa8a 	uxth.w	sl, sl
90022ff4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90022ff6:	b2ad      	uxth	r5, r5
90022ff8:	eba3 030a 	sub.w	r3, r3, sl
90022ffc:	fb08 f505 	mul.w	r5, r8, r5
90023000:	b29b      	uxth	r3, r3
90023002:	fb09 5303 	mla	r3, r9, r3, r5
90023006:	fb0a 3304 	mla	r3, sl, r4, r3
9002300a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
9002300c:	fb0e 3304 	mla	r3, lr, r4, r3
90023010:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023014:	2b00      	cmp	r3, #0
90023016:	f000 8111 	beq.w	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002301a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002301c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023020:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023024:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023028:	f000 8192 	beq.w	90023350 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
9002302c:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023030:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023034:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023038:	fb0a fe0e 	mul.w	lr, sl, lr
9002303c:	fb09 f000 	mul.w	r0, r9, r0
90023040:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023044:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023048:	f100 0b20 	add.w	fp, r0, #32
9002304c:	44ce      	add	lr, r9
9002304e:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023052:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023056:	ea4f 2919 	mov.w	r9, r9, lsr #8
9002305a:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002305e:	ea4e 0909 	orr.w	r9, lr, r9
90023062:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023066:	8868      	ldrh	r0, [r5, #2]
90023068:	d019      	beq.n	9002309e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
9002306a:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
9002306e:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023072:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023076:	fb0a fe0e 	mul.w	lr, sl, lr
9002307a:	fb08 f800 	mul.w	r8, r8, r0
9002307e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023082:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023086:	f108 0b20 	add.w	fp, r8, #32
9002308a:	4486      	add	lr, r0
9002308c:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023090:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023094:	0a00      	lsrs	r0, r0, #8
90023096:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002309a:	ea4e 0000 	orr.w	r0, lr, r0
9002309e:	ea4f 4e09 	mov.w	lr, r9, lsl #16
900230a2:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900230a6:	ea4f 4a00 	mov.w	sl, r0, lsl #16
900230aa:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900230ae:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900230b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900230b6:	ea4e 0909 	orr.w	r9, lr, r9
900230ba:	ea4a 0000 	orr.w	r0, sl, r0
900230be:	f1bc 0f00 	cmp.w	ip, #0
900230c2:	f000 8147 	beq.w	90023354 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
900230c6:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
900230ca:	9c0d      	ldr	r4, [sp, #52]	; 0x34
900230cc:	3a01      	subs	r2, #1
900230ce:	2cff      	cmp	r4, #255	; 0xff
900230d0:	ea4f 0242 	mov.w	r2, r2, lsl #1
900230d4:	f102 0202 	add.w	r2, r2, #2
900230d8:	eb05 0e02 	add.w	lr, r5, r2
900230dc:	5aaa      	ldrh	r2, [r5, r2]
900230de:	d018      	beq.n	90023112 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
900230e0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
900230e4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900230e8:	ea4f 08e4 	mov.w	r8, r4, asr #3
900230ec:	fb04 fa02 	mul.w	sl, r4, r2
900230f0:	fb08 f805 	mul.w	r8, r8, r5
900230f4:	f10a 0520 	add.w	r5, sl, #32
900230f8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
900230fc:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023100:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023104:	4442      	add	r2, r8
90023106:	0a2d      	lsrs	r5, r5, #8
90023108:	ea06 1252 	and.w	r2, r6, r2, lsr #5
9002310c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023110:	432a      	orrs	r2, r5
90023112:	9c0e      	ldr	r4, [sp, #56]	; 0x38
90023114:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023118:	2cff      	cmp	r4, #255	; 0xff
9002311a:	d01a      	beq.n	90023152 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x286>
9002311c:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90023120:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023124:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023128:	fb04 fa05 	mul.w	sl, r4, r5
9002312c:	fb08 f80e 	mul.w	r8, r8, lr
90023130:	f10a 0e20 	add.w	lr, sl, #32
90023134:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023138:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002313c:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90023140:	4445      	add	r5, r8
90023142:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023146:	ea06 1555 	and.w	r5, r6, r5, lsr #5
9002314a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
9002314e:	ea45 050e 	orr.w	r5, r5, lr
90023152:	fb1c fe01 	smulbb	lr, ip, r1
90023156:	f1cc 0810 	rsb	r8, ip, #16
9002315a:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002315e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023162:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023166:	eba8 0801 	sub.w	r8, r8, r1
9002316a:	ea4f 4b05 	mov.w	fp, r5, lsl #16
9002316e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023172:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023176:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
9002317a:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
9002317e:	ea4a 0202 	orr.w	r2, sl, r2
90023182:	4341      	muls	r1, r0
90023184:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023188:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002318c:	fb09 1108 	mla	r1, r9, r8, r1
90023190:	ea4b 0505 	orr.w	r5, fp, r5
90023194:	fb0c 1102 	mla	r1, ip, r2, r1
90023198:	fb0e 1e05 	mla	lr, lr, r5, r1
9002319c:	ea4f 525e 	mov.w	r2, lr, lsr #21
900231a0:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
900231a4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900231a8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900231ac:	ea42 0e0e 	orr.w	lr, r2, lr
900231b0:	fa1f f28e 	uxth.w	r2, lr
900231b4:	2bff      	cmp	r3, #255	; 0xff
900231b6:	d103      	bne.n	900231c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900231b8:	9912      	ldr	r1, [sp, #72]	; 0x48
900231ba:	29ff      	cmp	r1, #255	; 0xff
900231bc:	f000 80de 	beq.w	9002337c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
900231c0:	990a      	ldr	r1, [sp, #40]	; 0x28
900231c2:	1215      	asrs	r5, r2, #8
900231c4:	8838      	ldrh	r0, [r7, #0]
900231c6:	434b      	muls	r3, r1
900231c8:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900231cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900231ce:	f103 0c01 	add.w	ip, r3, #1
900231d2:	eb0c 2323 	add.w	r3, ip, r3, asr #8
900231d6:	ea6f 2323 	mvn.w	r3, r3, asr #8
900231da:	fa5f fc83 	uxtb.w	ip, r3
900231de:	1203      	asrs	r3, r0, #8
900231e0:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900231e4:	fb13 f30c 	smulbb	r3, r3, ip
900231e8:	fb05 3501 	mla	r5, r5, r1, r3
900231ec:	10c3      	asrs	r3, r0, #3
900231ee:	10d1      	asrs	r1, r2, #3
900231f0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900231f4:	00d2      	lsls	r2, r2, #3
900231f6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900231fa:	b2ad      	uxth	r5, r5
900231fc:	fb13 f30c 	smulbb	r3, r3, ip
90023200:	b2d2      	uxtb	r2, r2
90023202:	fb01 3104 	mla	r1, r1, r4, r3
90023206:	00c3      	lsls	r3, r0, #3
90023208:	b2db      	uxtb	r3, r3
9002320a:	b289      	uxth	r1, r1
9002320c:	fb13 f30c 	smulbb	r3, r3, ip
90023210:	fb02 3304 	mla	r3, r2, r4, r3
90023214:	b29a      	uxth	r2, r3
90023216:	1c6b      	adds	r3, r5, #1
90023218:	eb03 2515 	add.w	r5, r3, r5, lsr #8
9002321c:	1c53      	adds	r3, r2, #1
9002321e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023222:	1c4a      	adds	r2, r1, #1
90023224:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90023228:	eb02 2111 	add.w	r1, r2, r1, lsr #8
9002322c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90023230:	0949      	lsrs	r1, r1, #5
90023232:	432b      	orrs	r3, r5
90023234:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023238:	430b      	orrs	r3, r1
9002323a:	803b      	strh	r3, [r7, #0]
9002323c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002323e:	3702      	adds	r7, #2
90023240:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90023242:	4413      	add	r3, r2
90023244:	9a22      	ldr	r2, [sp, #136]	; 0x88
90023246:	9321      	str	r3, [sp, #132]	; 0x84
90023248:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002324a:	441a      	add	r2, r3
9002324c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
9002324e:	3b01      	subs	r3, #1
90023250:	9222      	str	r2, [sp, #136]	; 0x88
90023252:	9313      	str	r3, [sp, #76]	; 0x4c
90023254:	e687      	b.n	90022f66 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
90023256:	9b21      	ldr	r3, [sp, #132]	; 0x84
90023258:	9e23      	ldr	r6, [sp, #140]	; 0x8c
9002325a:	9c22      	ldr	r4, [sp, #136]	; 0x88
9002325c:	4433      	add	r3, r6
9002325e:	9321      	str	r3, [sp, #132]	; 0x84
90023260:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023262:	441c      	add	r4, r3
90023264:	9b08      	ldr	r3, [sp, #32]
90023266:	3b01      	subs	r3, #1
90023268:	9422      	str	r4, [sp, #136]	; 0x88
9002326a:	9308      	str	r3, [sp, #32]
9002326c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002326e:	3302      	adds	r3, #2
90023270:	9309      	str	r3, [sp, #36]	; 0x24
90023272:	e656      	b.n	90022f22 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
90023274:	d028      	beq.n	900232c8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023276:	9b08      	ldr	r3, [sp, #32]
90023278:	9823      	ldr	r0, [sp, #140]	; 0x8c
9002327a:	3b01      	subs	r3, #1
9002327c:	9d21      	ldr	r5, [sp, #132]	; 0x84
9002327e:	fb00 5003 	mla	r0, r0, r3, r5
90023282:	1400      	asrs	r0, r0, #16
90023284:	f53f ae6a 	bmi.w	90022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023288:	3901      	subs	r1, #1
9002328a:	4288      	cmp	r0, r1
9002328c:	f6bf ae66 	bge.w	90022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90023290:	9924      	ldr	r1, [sp, #144]	; 0x90
90023292:	9822      	ldr	r0, [sp, #136]	; 0x88
90023294:	fb01 0303 	mla	r3, r1, r3, r0
90023298:	141b      	asrs	r3, r3, #16
9002329a:	f53f ae5f 	bmi.w	90022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002329e:	3a01      	subs	r2, #1
900232a0:	4293      	cmp	r3, r2
900232a2:	f6bf ae5b 	bge.w	90022f5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
900232a6:	9b08      	ldr	r3, [sp, #32]
900232a8:	f64f 061f 	movw	r6, #63519	; 0xf81f
900232ac:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
900232b0:	9313      	str	r3, [sp, #76]	; 0x4c
900232b2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
900232b4:	2b00      	cmp	r3, #0
900232b6:	f300 8082 	bgt.w	900233be <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f2>
900232ba:	9b08      	ldr	r3, [sp, #32]
900232bc:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
900232c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
900232c2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
900232c6:	9309      	str	r3, [sp, #36]	; 0x24
900232c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
900232ca:	2b00      	cmp	r3, #0
900232cc:	f340 81ef 	ble.w	900236ae <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e2>
900232d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900232d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
900232d6:	ee30 0a04 	vadd.f32	s0, s0, s8
900232da:	ee70 0aa4 	vadd.f32	s1, s1, s9
900232de:	eef0 6a62 	vmov.f32	s13, s5
900232e2:	eec7 7a00 	vdiv.f32	s15, s14, s0
900232e6:	ee31 1a05 	vadd.f32	s2, s2, s10
900232ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900232ee:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
900232f2:	eef0 6a43 	vmov.f32	s13, s6
900232f6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900232fa:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
900232fe:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023302:	ee61 7a27 	vmul.f32	s15, s2, s15
90023306:	ee77 2a62 	vsub.f32	s5, s14, s5
9002330a:	ee37 3ac3 	vsub.f32	s6, s15, s6
9002330e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023312:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023316:	ee12 2a90 	vmov	r2, s5
9002331a:	eef0 2a47 	vmov.f32	s5, s14
9002331e:	fb92 f3f3 	sdiv	r3, r2, r3
90023322:	ee13 2a10 	vmov	r2, s6
90023326:	9323      	str	r3, [sp, #140]	; 0x8c
90023328:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002332a:	eeb0 3a67 	vmov.f32	s6, s15
9002332e:	fb92 f3f3 	sdiv	r3, r2, r3
90023332:	9324      	str	r3, [sp, #144]	; 0x90
90023334:	9b11      	ldr	r3, [sp, #68]	; 0x44
90023336:	9a14      	ldr	r2, [sp, #80]	; 0x50
90023338:	3b01      	subs	r3, #1
9002333a:	9311      	str	r3, [sp, #68]	; 0x44
9002333c:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002333e:	bf08      	it	eq
90023340:	4613      	moveq	r3, r2
90023342:	9308      	str	r3, [sp, #32]
90023344:	e5df      	b.n	90022f06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
90023346:	fb08 f505 	mul.w	r5, r8, r5
9002334a:	fb09 5303 	mla	r3, r9, r3, r5
9002334e:	e65f      	b.n	90023010 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
90023350:	4681      	mov	r9, r0
90023352:	e686      	b.n	90023062 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
90023354:	f1c1 0210 	rsb	r2, r1, #16
90023358:	4341      	muls	r1, r0
9002335a:	fb09 1902 	mla	r9, r9, r2, r1
9002335e:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023362:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023366:	ea4f 1959 	mov.w	r9, r9, lsr #5
9002336a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002336e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023372:	ea42 0909 	orr.w	r9, r2, r9
90023376:	fa1f f289 	uxth.w	r2, r9
9002337a:	e71b      	b.n	900231b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
9002337c:	803a      	strh	r2, [r7, #0]
9002337e:	e75d      	b.n	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023380:	f115 0e01 	adds.w	lr, r5, #1
90023384:	f53f af5a 	bmi.w	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023388:	4572      	cmp	r2, lr
9002338a:	f6ff af57 	blt.w	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002338e:	f110 0e01 	adds.w	lr, r0, #1
90023392:	f53f af53 	bmi.w	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023396:	4573      	cmp	r3, lr
90023398:	f6ff af50 	blt.w	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
9002339c:	9c12      	ldr	r4, [sp, #72]	; 0x48
9002339e:	b21b      	sxth	r3, r3
900233a0:	b212      	sxth	r2, r2
900233a2:	9502      	str	r5, [sp, #8]
900233a4:	9301      	str	r3, [sp, #4]
900233a6:	9200      	str	r2, [sp, #0]
900233a8:	e9cd 0103 	strd	r0, r1, [sp, #12]
900233ac:	e9cd c405 	strd	ip, r4, [sp, #20]
900233b0:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
900233b4:	4639      	mov	r1, r7
900233b6:	9815      	ldr	r0, [sp, #84]	; 0x54
900233b8:	f7ff fc02 	bl	90022bc0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
900233bc:	e73e      	b.n	9002323c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900233be:	9b21      	ldr	r3, [sp, #132]	; 0x84
900233c0:	f3c3 3203 	ubfx	r2, r3, #12, #4
900233c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
900233c6:	f3c3 3503 	ubfx	r5, r3, #12, #4
900233ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900233cc:	fa1f fc82 	uxth.w	ip, r2
900233d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900233d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
900233d6:	ea4f 100c 	mov.w	r0, ip, lsl #4
900233da:	141f      	asrs	r7, r3, #16
900233dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
900233de:	141b      	asrs	r3, r3, #16
900233e0:	fb01 3707 	mla	r7, r1, r7, r3
900233e4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
900233e6:	eb03 0a07 	add.w	sl, r3, r7
900233ea:	f813 9007 	ldrb.w	r9, [r3, r7]
900233ee:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
900233f2:	f89a 8001 	ldrb.w	r8, [sl, #1]
900233f6:	b29b      	uxth	r3, r3
900233f8:	2d00      	cmp	r5, #0
900233fa:	f000 813d 	beq.w	90023678 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>
900233fe:	f81a 4001 	ldrb.w	r4, [sl, r1]
90023402:	eb0a 0b01 	add.w	fp, sl, r1
90023406:	fa1f fa85 	uxth.w	sl, r5
9002340a:	940f      	str	r4, [sp, #60]	; 0x3c
9002340c:	fb0a fc0c 	mul.w	ip, sl, ip
90023410:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023414:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023418:	eba0 000c 	sub.w	r0, r0, ip
9002341c:	9410      	str	r4, [sp, #64]	; 0x40
9002341e:	fa1f fa8a 	uxth.w	sl, sl
90023422:	b280      	uxth	r0, r0
90023424:	eba3 030a 	sub.w	r3, r3, sl
90023428:	fb08 f000 	mul.w	r0, r8, r0
9002342c:	b29b      	uxth	r3, r3
9002342e:	fb09 0303 	mla	r3, r9, r3, r0
90023432:	980f      	ldr	r0, [sp, #60]	; 0x3c
90023434:	fb0a 3300 	mla	r3, sl, r0, r3
90023438:	fb0c 3304 	mla	r3, ip, r4, r3
9002343c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023440:	2b00      	cmp	r3, #0
90023442:	f000 810b 	beq.w	9002365c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
90023446:	980b      	ldr	r0, [sp, #44]	; 0x2c
90023448:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
9002344c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
9002344e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023452:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023456:	f000 8114 	beq.w	90023682 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
9002345a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002345e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023462:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023466:	fb0a fc0c 	mul.w	ip, sl, ip
9002346a:	fb09 f707 	mul.w	r7, r9, r7
9002346e:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023472:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023476:	f107 0b20 	add.w	fp, r7, #32
9002347a:	44cc      	add	ip, r9
9002347c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023480:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023484:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023488:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
9002348c:	ea4c 0909 	orr.w	r9, ip, r9
90023490:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023494:	8847      	ldrh	r7, [r0, #2]
90023496:	d019      	beq.n	900234cc <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x600>
90023498:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
9002349c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
900234a0:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900234a4:	fb0a fc0c 	mul.w	ip, sl, ip
900234a8:	fb08 f807 	mul.w	r8, r8, r7
900234ac:	ea06 175c 	and.w	r7, r6, ip, lsr #5
900234b0:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
900234b4:	f108 0b20 	add.w	fp, r8, #32
900234b8:	44bc      	add	ip, r7
900234ba:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
900234be:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
900234c2:	0a3f      	lsrs	r7, r7, #8
900234c4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900234c8:	ea4c 0707 	orr.w	r7, ip, r7
900234cc:	ea4f 4c09 	mov.w	ip, r9, lsl #16
900234d0:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
900234d4:	ea4f 4a07 	mov.w	sl, r7, lsl #16
900234d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900234dc:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
900234e0:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
900234e4:	ea4c 0909 	orr.w	r9, ip, r9
900234e8:	ea4a 0707 	orr.w	r7, sl, r7
900234ec:	2d00      	cmp	r5, #0
900234ee:	f000 80ca 	beq.w	90023686 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ba>
900234f2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
900234f6:	3901      	subs	r1, #1
900234f8:	0049      	lsls	r1, r1, #1
900234fa:	3102      	adds	r1, #2
900234fc:	eb00 0c01 	add.w	ip, r0, r1
90023500:	5a41      	ldrh	r1, [r0, r1]
90023502:	980f      	ldr	r0, [sp, #60]	; 0x3c
90023504:	28ff      	cmp	r0, #255	; 0xff
90023506:	d019      	beq.n	9002353c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x670>
90023508:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
9002350c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
9002350e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023512:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023516:	fb04 fa01 	mul.w	sl, r4, r1
9002351a:	fb08 f800 	mul.w	r8, r8, r0
9002351e:	f10a 0020 	add.w	r0, sl, #32
90023522:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023526:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002352a:	eb00 201a 	add.w	r0, r0, sl, lsr #8
9002352e:	4441      	add	r1, r8
90023530:	0a00      	lsrs	r0, r0, #8
90023532:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023536:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002353a:	4301      	orrs	r1, r0
9002353c:	9c10      	ldr	r4, [sp, #64]	; 0x40
9002353e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023542:	2cff      	cmp	r4, #255	; 0xff
90023544:	d01a      	beq.n	9002357c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b0>
90023546:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
9002354a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002354e:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023552:	fb04 fa00 	mul.w	sl, r4, r0
90023556:	fb08 f80c 	mul.w	r8, r8, ip
9002355a:	f10a 0c20 	add.w	ip, sl, #32
9002355e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90023562:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023566:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9002356a:	4440      	add	r0, r8
9002356c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90023570:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90023574:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90023578:	ea40 000c 	orr.w	r0, r0, ip
9002357c:	fb15 fc02 	smulbb	ip, r5, r2
90023580:	f1c5 0810 	rsb	r8, r5, #16
90023584:	ea4f 4a01 	mov.w	sl, r1, lsl #16
90023588:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
9002358c:	ea4f 0cec 	mov.w	ip, ip, asr #3
90023590:	eba8 0802 	sub.w	r8, r8, r2
90023594:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90023598:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002359c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
900235a0:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900235a4:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
900235a8:	ea4a 0101 	orr.w	r1, sl, r1
900235ac:	437a      	muls	r2, r7
900235ae:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
900235b2:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
900235b6:	fb09 2208 	mla	r2, r9, r8, r2
900235ba:	ea4b 0000 	orr.w	r0, fp, r0
900235be:	fb05 2201 	mla	r2, r5, r1, r2
900235c2:	fb0c 2200 	mla	r2, ip, r0, r2
900235c6:	0d57      	lsrs	r7, r2, #21
900235c8:	0952      	lsrs	r2, r2, #5
900235ca:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
900235ce:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900235d2:	433a      	orrs	r2, r7
900235d4:	2bff      	cmp	r3, #255	; 0xff
900235d6:	b292      	uxth	r2, r2
900235d8:	d102      	bne.n	900235e0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
900235da:	9912      	ldr	r1, [sp, #72]	; 0x48
900235dc:	29ff      	cmp	r1, #255	; 0xff
900235de:	d063      	beq.n	900236a8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7dc>
900235e0:	980a      	ldr	r0, [sp, #40]	; 0x28
900235e2:	1215      	asrs	r5, r2, #8
900235e4:	f8be 1000 	ldrh.w	r1, [lr]
900235e8:	4343      	muls	r3, r0
900235ea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
900235ec:	10cf      	asrs	r7, r1, #3
900235ee:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
900235f2:	1c58      	adds	r0, r3, #1
900235f4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
900235f8:	eb00 2323 	add.w	r3, r0, r3, asr #8
900235fc:	1208      	asrs	r0, r1, #8
900235fe:	ea6f 2323 	mvn.w	r3, r3, asr #8
90023602:	00c9      	lsls	r1, r1, #3
90023604:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023608:	b2db      	uxtb	r3, r3
9002360a:	b2c9      	uxtb	r1, r1
9002360c:	fb10 f003 	smulbb	r0, r0, r3
90023610:	fb11 f103 	smulbb	r1, r1, r3
90023614:	fb05 0504 	mla	r5, r5, r4, r0
90023618:	10d0      	asrs	r0, r2, #3
9002361a:	fb17 f703 	smulbb	r7, r7, r3
9002361e:	00d2      	lsls	r2, r2, #3
90023620:	b2ad      	uxth	r5, r5
90023622:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023626:	b2d2      	uxtb	r2, r2
90023628:	fb00 7004 	mla	r0, r0, r4, r7
9002362c:	1c6b      	adds	r3, r5, #1
9002362e:	fb02 1204 	mla	r2, r2, r4, r1
90023632:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90023636:	b292      	uxth	r2, r2
90023638:	b280      	uxth	r0, r0
9002363a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
9002363e:	1c57      	adds	r7, r2, #1
90023640:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90023644:	f3c7 27c4 	ubfx	r7, r7, #11, #5
90023648:	433d      	orrs	r5, r7
9002364a:	1c47      	adds	r7, r0, #1
9002364c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
90023650:	097f      	lsrs	r7, r7, #5
90023652:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023656:	433d      	orrs	r5, r7
90023658:	f8ae 5000 	strh.w	r5, [lr]
9002365c:	9b21      	ldr	r3, [sp, #132]	; 0x84
9002365e:	f10e 0e02 	add.w	lr, lr, #2
90023662:	9a23      	ldr	r2, [sp, #140]	; 0x8c
90023664:	4413      	add	r3, r2
90023666:	9a22      	ldr	r2, [sp, #136]	; 0x88
90023668:	9321      	str	r3, [sp, #132]	; 0x84
9002366a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002366c:	441a      	add	r2, r3
9002366e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
90023670:	3b01      	subs	r3, #1
90023672:	9222      	str	r2, [sp, #136]	; 0x88
90023674:	9313      	str	r3, [sp, #76]	; 0x4c
90023676:	e61c      	b.n	900232b2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90023678:	fb08 f000 	mul.w	r0, r8, r0
9002367c:	fb09 0303 	mla	r3, r9, r3, r0
90023680:	e6dc      	b.n	9002343c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x570>
90023682:	46b9      	mov	r9, r7
90023684:	e704      	b.n	90023490 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c4>
90023686:	f1c2 0110 	rsb	r1, r2, #16
9002368a:	437a      	muls	r2, r7
9002368c:	fb09 2901 	mla	r9, r9, r1, r2
90023690:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023694:	ea4f 5059 	mov.w	r0, r9, lsr #21
90023698:	ea4f 1259 	mov.w	r2, r9, lsr #5
9002369c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900236a0:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900236a4:	4302      	orrs	r2, r0
900236a6:	e795      	b.n	900235d4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x708>
900236a8:	f8ae 2000 	strh.w	r2, [lr]
900236ac:	e7d6      	b.n	9002365c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x790>
900236ae:	b017      	add	sp, #92	; 0x5c
900236b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

900236b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
900236b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900236b8:	b085      	sub	sp, #20
900236ba:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
900236be:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
900236c2:	2800      	cmp	r0, #0
900236c4:	9103      	str	r1, [sp, #12]
900236c6:	fb00 7406 	mla	r4, r0, r6, r7
900236ca:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
900236ce:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
900236d2:	eb03 0544 	add.w	r5, r3, r4, lsl #1
900236d6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
900236da:	eb02 0904 	add.w	r9, r2, r4
900236de:	9501      	str	r5, [sp, #4]
900236e0:	f2c0 8141 	blt.w	90023966 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900236e4:	4583      	cmp	fp, r0
900236e6:	f340 813e 	ble.w	90023966 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
900236ea:	2f00      	cmp	r7, #0
900236ec:	f2c0 8137 	blt.w	9002395e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900236f0:	42be      	cmp	r6, r7
900236f2:	f340 8134 	ble.w	9002395e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
900236f6:	f812 c004 	ldrb.w	ip, [r2, r4]
900236fa:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
900236fe:	f64f 041f 	movw	r4, #63519	; 0xf81f
90023702:	ea4f 02ec 	mov.w	r2, ip, asr #3
90023706:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
9002370a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002370e:	4355      	muls	r5, r2
90023710:	fb0c f203 	mul.w	r2, ip, r3
90023714:	ea04 1355 	and.w	r3, r4, r5, lsr #5
90023718:	f605 0501 	addw	r5, r5, #2049	; 0x801
9002371c:	441d      	add	r5, r3
9002371e:	f102 0320 	add.w	r3, r2, #32
90023722:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90023726:	ea04 1455 	and.w	r4, r4, r5, lsr #5
9002372a:	0a1b      	lsrs	r3, r3, #8
9002372c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90023730:	431c      	orrs	r4, r3
90023732:	1c7b      	adds	r3, r7, #1
90023734:	f100 811c 	bmi.w	90023970 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
90023738:	429e      	cmp	r6, r3
9002373a:	f340 8119 	ble.w	90023970 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
9002373e:	2900      	cmp	r1, #0
90023740:	f000 8119 	beq.w	90023976 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
90023744:	9a01      	ldr	r2, [sp, #4]
90023746:	f899 3001 	ldrb.w	r3, [r9, #1]
9002374a:	8855      	ldrh	r5, [r2, #2]
9002374c:	ea4f 08e3 	mov.w	r8, r3, asr #3
90023750:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
90023754:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023758:	fb08 f802 	mul.w	r8, r8, r2
9002375c:	f64f 021f 	movw	r2, #63519	; 0xf81f
90023760:	435d      	muls	r5, r3
90023762:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
90023766:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002376a:	44d0      	add	r8, sl
9002376c:	f105 0a20 	add.w	sl, r5, #32
90023770:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
90023774:	ea02 1258 	and.w	r2, r2, r8, lsr #5
90023778:	0a2d      	lsrs	r5, r5, #8
9002377a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
9002377e:	432a      	orrs	r2, r5
90023780:	3001      	adds	r0, #1
90023782:	f100 80fe 	bmi.w	90023982 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
90023786:	4583      	cmp	fp, r0
90023788:	f340 80fb 	ble.w	90023982 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
9002378c:	f1be 0f00 	cmp.w	lr, #0
90023790:	f000 80fc 	beq.w	9002398c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
90023794:	2f00      	cmp	r7, #0
90023796:	f2c0 80f1 	blt.w	9002397c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
9002379a:	42be      	cmp	r6, r7
9002379c:	f340 80ee 	ble.w	9002397c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
900237a0:	9801      	ldr	r0, [sp, #4]
900237a2:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
900237a6:	f819 5006 	ldrb.w	r5, [r9, r6]
900237aa:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
900237ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
900237b2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
900237b6:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
900237ba:	fb0a fa00 	mul.w	sl, sl, r0
900237be:	fb05 f808 	mul.w	r8, r5, r8
900237c2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
900237c6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
900237ca:	4482      	add	sl, r0
900237cc:	f108 0020 	add.w	r0, r8, #32
900237d0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
900237d4:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
900237d8:	0a00      	lsrs	r0, r0, #8
900237da:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900237de:	ea4b 0b00 	orr.w	fp, fp, r0
900237e2:	3701      	adds	r7, #1
900237e4:	f100 80d7 	bmi.w	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900237e8:	42be      	cmp	r6, r7
900237ea:	f340 80d4 	ble.w	90023996 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
900237ee:	2900      	cmp	r1, #0
900237f0:	f000 80d4 	beq.w	9002399c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
900237f4:	3601      	adds	r6, #1
900237f6:	9801      	ldr	r0, [sp, #4]
900237f8:	f819 7006 	ldrb.w	r7, [r9, r6]
900237fc:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
90023800:	ea4f 09e7 	mov.w	r9, r7, asr #3
90023804:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
90023808:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002380c:	fb09 f906 	mul.w	r9, r9, r6
90023810:	fb07 f800 	mul.w	r8, r7, r0
90023814:	f64f 001f 	movw	r0, #63519	; 0xf81f
90023818:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
9002381c:	f609 0901 	addw	r9, r9, #2049	; 0x801
90023820:	44d1      	add	r9, sl
90023822:	ea00 1659 	and.w	r6, r0, r9, lsr #5
90023826:	f108 0020 	add.w	r0, r8, #32
9002382a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
9002382e:	0a00      	lsrs	r0, r0, #8
90023830:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023834:	4330      	orrs	r0, r6
90023836:	b28e      	uxth	r6, r1
90023838:	fa1f f98e 	uxth.w	r9, lr
9002383c:	ea4f 4a04 	mov.w	sl, r4, lsl #16
90023840:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
90023844:	fb06 f809 	mul.w	r8, r6, r9
90023848:	0136      	lsls	r6, r6, #4
9002384a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002384e:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
90023852:	9601      	str	r6, [sp, #4]
90023854:	ea4a 0404 	orr.w	r4, sl, r4
90023858:	ea4f 4a02 	mov.w	sl, r2, lsl #16
9002385c:	fa1f f689 	uxth.w	r6, r9
90023860:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023864:	fb11 f90e 	smulbb	r9, r1, lr
90023868:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002386c:	9602      	str	r6, [sp, #8]
9002386e:	4626      	mov	r6, r4
90023870:	f3c9 09c7 	ubfx	r9, r9, #3, #8
90023874:	f1ce 0410 	rsb	r4, lr, #16
90023878:	ea4a 0202 	orr.w	r2, sl, r2
9002387c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023880:	1a64      	subs	r4, r4, r1
90023882:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
90023886:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
9002388a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002388e:	434a      	muls	r2, r1
90023890:	eb09 0444 	add.w	r4, r9, r4, lsl #1
90023894:	ea4a 0000 	orr.w	r0, sl, r0
90023898:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
9002389c:	fb04 2406 	mla	r4, r4, r6, r2
900238a0:	9903      	ldr	r1, [sp, #12]
900238a2:	fb09 4200 	mla	r2, r9, r0, r4
900238a6:	ea4f 440b 	mov.w	r4, fp, lsl #16
900238aa:	9801      	ldr	r0, [sp, #4]
900238ac:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
900238b0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900238b4:	8809      	ldrh	r1, [r1, #0]
900238b6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
900238ba:	ea44 0b0b 	orr.w	fp, r4, fp
900238be:	9c02      	ldr	r4, [sp, #8]
900238c0:	1b00      	subs	r0, r0, r4
900238c2:	9c01      	ldr	r4, [sp, #4]
900238c4:	fb0e 2e0b 	mla	lr, lr, fp, r2
900238c8:	eba4 0608 	sub.w	r6, r4, r8
900238cc:	b280      	uxth	r0, r0
900238ce:	ea4f 525e 	mov.w	r2, lr, lsr #21
900238d2:	b2b6      	uxth	r6, r6
900238d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
900238d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900238dc:	4373      	muls	r3, r6
900238de:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900238e2:	fb0c 3300 	mla	r3, ip, r0, r3
900238e6:	9802      	ldr	r0, [sp, #8]
900238e8:	ea42 0e0e 	orr.w	lr, r2, lr
900238ec:	fb00 3505 	mla	r5, r0, r5, r3
900238f0:	120b      	asrs	r3, r1, #8
900238f2:	10c8      	asrs	r0, r1, #3
900238f4:	fb08 5707 	mla	r7, r8, r7, r5
900238f8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
900238fc:	00c9      	lsls	r1, r1, #3
900238fe:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90023902:	ea6f 2727 	mvn.w	r7, r7, asr #8
90023906:	fa1f f28e 	uxth.w	r2, lr
9002390a:	b2c9      	uxtb	r1, r1
9002390c:	b2ff      	uxtb	r7, r7
9002390e:	437b      	muls	r3, r7
90023910:	4378      	muls	r0, r7
90023912:	434f      	muls	r7, r1
90023914:	1c59      	adds	r1, r3, #1
90023916:	eb01 2113 	add.w	r1, r1, r3, lsr #8
9002391a:	1213      	asrs	r3, r2, #8
9002391c:	f023 0307 	bic.w	r3, r3, #7
90023920:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90023924:	1c41      	adds	r1, r0, #1
90023926:	eb01 2010 	add.w	r0, r1, r0, lsr #8
9002392a:	10d1      	asrs	r1, r2, #3
9002392c:	021b      	lsls	r3, r3, #8
9002392e:	f021 0103 	bic.w	r1, r1, #3
90023932:	00d2      	lsls	r2, r2, #3
90023934:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90023938:	eb01 2110 	add.w	r1, r1, r0, lsr #8
9002393c:	00c9      	lsls	r1, r1, #3
9002393e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023942:	430b      	orrs	r3, r1
90023944:	1c79      	adds	r1, r7, #1
90023946:	eb01 2717 	add.w	r7, r1, r7, lsr #8
9002394a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
9002394e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023952:	431a      	orrs	r2, r3
90023954:	9b03      	ldr	r3, [sp, #12]
90023956:	801a      	strh	r2, [r3, #0]
90023958:	b005      	add	sp, #20
9002395a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002395e:	f04f 0c00 	mov.w	ip, #0
90023962:	4664      	mov	r4, ip
90023964:	e6e5      	b.n	90023732 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
90023966:	2300      	movs	r3, #0
90023968:	469c      	mov	ip, r3
9002396a:	461a      	mov	r2, r3
9002396c:	461c      	mov	r4, r3
9002396e:	e707      	b.n	90023780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023970:	2300      	movs	r3, #0
90023972:	461a      	mov	r2, r3
90023974:	e704      	b.n	90023780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
90023976:	460b      	mov	r3, r1
90023978:	460a      	mov	r2, r1
9002397a:	e701      	b.n	90023780 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
9002397c:	2500      	movs	r5, #0
9002397e:	46ab      	mov	fp, r5
90023980:	e72f      	b.n	900237e2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
90023982:	2700      	movs	r7, #0
90023984:	463d      	mov	r5, r7
90023986:	4638      	mov	r0, r7
90023988:	46bb      	mov	fp, r7
9002398a:	e754      	b.n	90023836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9002398c:	4677      	mov	r7, lr
9002398e:	4675      	mov	r5, lr
90023990:	4670      	mov	r0, lr
90023992:	46f3      	mov	fp, lr
90023994:	e74f      	b.n	90023836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
90023996:	2700      	movs	r7, #0
90023998:	4638      	mov	r0, r7
9002399a:	e74c      	b.n	90023836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
9002399c:	460f      	mov	r7, r1
9002399e:	4608      	mov	r0, r1
900239a0:	e749      	b.n	90023836 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

900239a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900239a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900239a8:	b093      	sub	sp, #76	; 0x4c
900239aa:	9210      	str	r2, [sp, #64]	; 0x40
900239ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
900239ae:	9011      	str	r0, [sp, #68]	; 0x44
900239b0:	910e      	str	r1, [sp, #56]	; 0x38
900239b2:	6850      	ldr	r0, [r2, #4]
900239b4:	9306      	str	r3, [sp, #24]
900239b6:	6812      	ldr	r2, [r2, #0]
900239b8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900239bc:	fb00 1303 	mla	r3, r0, r3, r1
900239c0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900239c4:	9307      	str	r3, [sp, #28]
900239c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900239c8:	681b      	ldr	r3, [r3, #0]
900239ca:	9308      	str	r3, [sp, #32]
900239cc:	9b24      	ldr	r3, [sp, #144]	; 0x90
900239ce:	685b      	ldr	r3, [r3, #4]
900239d0:	9309      	str	r3, [sp, #36]	; 0x24
900239d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
900239d4:	2b00      	cmp	r3, #0
900239d6:	dc03      	bgt.n	900239e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
900239d8:	9b10      	ldr	r3, [sp, #64]	; 0x40
900239da:	2b00      	cmp	r3, #0
900239dc:	f340 83b6 	ble.w	9002414c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
900239e0:	9b24      	ldr	r3, [sp, #144]	; 0x90
900239e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900239e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900239ea:	1e48      	subs	r0, r1, #1
900239ec:	1e55      	subs	r5, r2, #1
900239ee:	9b06      	ldr	r3, [sp, #24]
900239f0:	2b00      	cmp	r3, #0
900239f2:	f340 8165 	ble.w	90023cc0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900239f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
900239f8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
900239fa:	1436      	asrs	r6, r6, #16
900239fc:	ea4f 4323 	mov.w	r3, r3, asr #16
90023a00:	d406      	bmi.n	90023a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023a02:	4286      	cmp	r6, r0
90023a04:	da04      	bge.n	90023a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023a06:	2b00      	cmp	r3, #0
90023a08:	db02      	blt.n	90023a10 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
90023a0a:	42ab      	cmp	r3, r5
90023a0c:	f2c0 8159 	blt.w	90023cc2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
90023a10:	3601      	adds	r6, #1
90023a12:	f100 8146 	bmi.w	90023ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023a16:	42b1      	cmp	r1, r6
90023a18:	f2c0 8143 	blt.w	90023ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023a1c:	3301      	adds	r3, #1
90023a1e:	f100 8140 	bmi.w	90023ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023a22:	429a      	cmp	r2, r3
90023a24:	f2c0 813d 	blt.w	90023ca2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
90023a28:	9b06      	ldr	r3, [sp, #24]
90023a2a:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023a2e:	9f07      	ldr	r7, [sp, #28]
90023a30:	930f      	str	r3, [sp, #60]	; 0x3c
90023a32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023a34:	2b00      	cmp	r3, #0
90023a36:	f340 8166 	ble.w	90023d06 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90023a3a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023a3c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023a3e:	1418      	asrs	r0, r3, #16
90023a40:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023a42:	142d      	asrs	r5, r5, #16
90023a44:	f3c3 3103 	ubfx	r1, r3, #12, #4
90023a48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023a4a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
90023a4e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023a50:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
90023a54:	f100 81f0 	bmi.w	90023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023a58:	f102 3eff 	add.w	lr, r2, #4294967295
90023a5c:	4575      	cmp	r5, lr
90023a5e:	f280 81eb 	bge.w	90023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023a62:	2800      	cmp	r0, #0
90023a64:	f2c0 81e8 	blt.w	90023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023a68:	f103 3eff 	add.w	lr, r3, #4294967295
90023a6c:	4570      	cmp	r0, lr
90023a6e:	f280 81e3 	bge.w	90023e38 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
90023a72:	b212      	sxth	r2, r2
90023a74:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023a76:	fa1f fe81 	uxth.w	lr, r1
90023a7a:	fb00 5002 	mla	r0, r0, r2, r5
90023a7e:	ea4f 150e 	mov.w	r5, lr, lsl #4
90023a82:	eb03 0a00 	add.w	sl, r3, r0
90023a86:	f813 9000 	ldrb.w	r9, [r3, r0]
90023a8a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
90023a8e:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023a92:	b29b      	uxth	r3, r3
90023a94:	f1bc 0f00 	cmp.w	ip, #0
90023a98:	f000 817b 	beq.w	90023d92 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
90023a9c:	f81a 4002 	ldrb.w	r4, [sl, r2]
90023aa0:	eb0a 0b02 	add.w	fp, sl, r2
90023aa4:	fa1f fa8c 	uxth.w	sl, ip
90023aa8:	940a      	str	r4, [sp, #40]	; 0x28
90023aaa:	fb0a fe0e 	mul.w	lr, sl, lr
90023aae:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023ab2:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
90023ab6:	eba5 050e 	sub.w	r5, r5, lr
90023aba:	940b      	str	r4, [sp, #44]	; 0x2c
90023abc:	fa1f fa8a 	uxth.w	sl, sl
90023ac0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023ac2:	b2ad      	uxth	r5, r5
90023ac4:	eba3 030a 	sub.w	r3, r3, sl
90023ac8:	fb08 f505 	mul.w	r5, r8, r5
90023acc:	b29b      	uxth	r3, r3
90023ace:	fb09 5303 	mla	r3, r9, r3, r5
90023ad2:	fb0a 3304 	mla	r3, sl, r4, r3
90023ad6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023ad8:	fb0e 3304 	mla	r3, lr, r4, r3
90023adc:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023ae0:	2b00      	cmp	r3, #0
90023ae2:	f000 80d1 	beq.w	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023ae6:	9c08      	ldr	r4, [sp, #32]
90023ae8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023aec:	eb04 0540 	add.w	r5, r4, r0, lsl #1
90023af0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
90023af4:	f000 8152 	beq.w	90023d9c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90023af8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023afc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023b00:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023b04:	fb0a fe0e 	mul.w	lr, sl, lr
90023b08:	fb09 f000 	mul.w	r0, r9, r0
90023b0c:	ea06 195e 	and.w	r9, r6, lr, lsr #5
90023b10:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023b14:	f100 0b20 	add.w	fp, r0, #32
90023b18:	44ce      	add	lr, r9
90023b1a:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
90023b1e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023b22:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023b26:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023b2a:	ea4e 0909 	orr.w	r9, lr, r9
90023b2e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023b32:	8868      	ldrh	r0, [r5, #2]
90023b34:	d019      	beq.n	90023b6a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
90023b36:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
90023b3a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023b3e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023b42:	fb0a fe0e 	mul.w	lr, sl, lr
90023b46:	fb08 f800 	mul.w	r8, r8, r0
90023b4a:	ea06 105e 	and.w	r0, r6, lr, lsr #5
90023b4e:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
90023b52:	f108 0b20 	add.w	fp, r8, #32
90023b56:	4486      	add	lr, r0
90023b58:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
90023b5c:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
90023b60:	0a00      	lsrs	r0, r0, #8
90023b62:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023b66:	ea4e 0000 	orr.w	r0, lr, r0
90023b6a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
90023b6e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023b72:	ea4f 4a00 	mov.w	sl, r0, lsl #16
90023b76:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90023b7a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
90023b7e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023b82:	ea4e 0909 	orr.w	r9, lr, r9
90023b86:	ea4a 0000 	orr.w	r0, sl, r0
90023b8a:	f1bc 0f00 	cmp.w	ip, #0
90023b8e:	f000 8107 	beq.w	90023da0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3fc>
90023b92:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
90023b96:	9c0a      	ldr	r4, [sp, #40]	; 0x28
90023b98:	3a01      	subs	r2, #1
90023b9a:	2cff      	cmp	r4, #255	; 0xff
90023b9c:	ea4f 0242 	mov.w	r2, r2, lsl #1
90023ba0:	f102 0202 	add.w	r2, r2, #2
90023ba4:	eb05 0e02 	add.w	lr, r5, r2
90023ba8:	5aaa      	ldrh	r2, [r5, r2]
90023baa:	d018      	beq.n	90023bde <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23a>
90023bac:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
90023bb0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023bb4:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023bb8:	fb04 fa02 	mul.w	sl, r4, r2
90023bbc:	fb08 f805 	mul.w	r8, r8, r5
90023bc0:	f10a 0520 	add.w	r5, sl, #32
90023bc4:	ea06 1258 	and.w	r2, r6, r8, lsr #5
90023bc8:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023bcc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
90023bd0:	4442      	add	r2, r8
90023bd2:	0a2d      	lsrs	r5, r5, #8
90023bd4:	ea06 1252 	and.w	r2, r6, r2, lsr #5
90023bd8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023bdc:	432a      	orrs	r2, r5
90023bde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
90023be0:	f8be 5002 	ldrh.w	r5, [lr, #2]
90023be4:	2cff      	cmp	r4, #255	; 0xff
90023be6:	d01a      	beq.n	90023c1e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
90023be8:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
90023bec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
90023bf0:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023bf4:	fb04 fa05 	mul.w	sl, r4, r5
90023bf8:	fb08 f80e 	mul.w	r8, r8, lr
90023bfc:	f10a 0e20 	add.w	lr, sl, #32
90023c00:	ea06 1558 	and.w	r5, r6, r8, lsr #5
90023c04:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023c08:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
90023c0c:	4445      	add	r5, r8
90023c0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90023c12:	ea06 1555 	and.w	r5, r6, r5, lsr #5
90023c16:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
90023c1a:	ea45 050e 	orr.w	r5, r5, lr
90023c1e:	fb1c fe01 	smulbb	lr, ip, r1
90023c22:	f1cc 0810 	rsb	r8, ip, #16
90023c26:	ea4f 4a02 	mov.w	sl, r2, lsl #16
90023c2a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90023c2e:	ea4f 0eee 	mov.w	lr, lr, asr #3
90023c32:	eba8 0801 	sub.w	r8, r8, r1
90023c36:	ea4f 4b05 	mov.w	fp, r5, lsl #16
90023c3a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023c3e:	ebce 0141 	rsb	r1, lr, r1, lsl #1
90023c42:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90023c46:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
90023c4a:	ea4a 0202 	orr.w	r2, sl, r2
90023c4e:	4341      	muls	r1, r0
90023c50:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
90023c54:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90023c58:	fb09 1108 	mla	r1, r9, r8, r1
90023c5c:	ea4b 0505 	orr.w	r5, fp, r5
90023c60:	fb0c 1102 	mla	r1, ip, r2, r1
90023c64:	fb0e 1e05 	mla	lr, lr, r5, r1
90023c68:	ea4f 525e 	mov.w	r2, lr, lsr #21
90023c6c:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
90023c70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023c74:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
90023c78:	ea42 0e0e 	orr.w	lr, r2, lr
90023c7c:	fa1f f28e 	uxth.w	r2, lr
90023c80:	2bff      	cmp	r3, #255	; 0xff
90023c82:	f040 80a1 	bne.w	90023dc8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
90023c86:	803a      	strh	r2, [r7, #0]
90023c88:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023c8a:	3702      	adds	r7, #2
90023c8c:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
90023c8e:	4413      	add	r3, r2
90023c90:	9a1e      	ldr	r2, [sp, #120]	; 0x78
90023c92:	931d      	str	r3, [sp, #116]	; 0x74
90023c94:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023c96:	441a      	add	r2, r3
90023c98:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023c9a:	3b01      	subs	r3, #1
90023c9c:	921e      	str	r2, [sp, #120]	; 0x78
90023c9e:	930f      	str	r3, [sp, #60]	; 0x3c
90023ca0:	e6c7      	b.n	90023a32 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90023ca2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023ca4:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
90023ca6:	9c1e      	ldr	r4, [sp, #120]	; 0x78
90023ca8:	4433      	add	r3, r6
90023caa:	931d      	str	r3, [sp, #116]	; 0x74
90023cac:	9b20      	ldr	r3, [sp, #128]	; 0x80
90023cae:	441c      	add	r4, r3
90023cb0:	9b06      	ldr	r3, [sp, #24]
90023cb2:	3b01      	subs	r3, #1
90023cb4:	941e      	str	r4, [sp, #120]	; 0x78
90023cb6:	9306      	str	r3, [sp, #24]
90023cb8:	9b07      	ldr	r3, [sp, #28]
90023cba:	3302      	adds	r3, #2
90023cbc:	9307      	str	r3, [sp, #28]
90023cbe:	e696      	b.n	900239ee <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
90023cc0:	d028      	beq.n	90023d14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
90023cc2:	9b06      	ldr	r3, [sp, #24]
90023cc4:	981f      	ldr	r0, [sp, #124]	; 0x7c
90023cc6:	3b01      	subs	r3, #1
90023cc8:	9d1d      	ldr	r5, [sp, #116]	; 0x74
90023cca:	fb00 5003 	mla	r0, r0, r3, r5
90023cce:	1400      	asrs	r0, r0, #16
90023cd0:	f53f aeaa 	bmi.w	90023a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023cd4:	3901      	subs	r1, #1
90023cd6:	4288      	cmp	r0, r1
90023cd8:	f6bf aea6 	bge.w	90023a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023cdc:	9920      	ldr	r1, [sp, #128]	; 0x80
90023cde:	981e      	ldr	r0, [sp, #120]	; 0x78
90023ce0:	fb01 0303 	mla	r3, r1, r3, r0
90023ce4:	141b      	asrs	r3, r3, #16
90023ce6:	f53f ae9f 	bmi.w	90023a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023cea:	3a01      	subs	r2, #1
90023cec:	4293      	cmp	r3, r2
90023cee:	f6bf ae9b 	bge.w	90023a28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
90023cf2:	9b06      	ldr	r3, [sp, #24]
90023cf4:	f64f 061f 	movw	r6, #63519	; 0xf81f
90023cf8:	f8dd e01c 	ldr.w	lr, [sp, #28]
90023cfc:	930f      	str	r3, [sp, #60]	; 0x3c
90023cfe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
90023d00:	2b00      	cmp	r3, #0
90023d02:	f300 80b6 	bgt.w	90023e72 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
90023d06:	9b06      	ldr	r3, [sp, #24]
90023d08:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
90023d0c:	9b07      	ldr	r3, [sp, #28]
90023d0e:	eb03 0344 	add.w	r3, r3, r4, lsl #1
90023d12:	9307      	str	r3, [sp, #28]
90023d14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023d16:	2b00      	cmp	r3, #0
90023d18:	f340 8218 	ble.w	9002414c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
90023d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90023d20:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023d22:	ee30 0a04 	vadd.f32	s0, s0, s8
90023d26:	ee70 0aa4 	vadd.f32	s1, s1, s9
90023d2a:	eef0 6a62 	vmov.f32	s13, s5
90023d2e:	eec7 7a00 	vdiv.f32	s15, s14, s0
90023d32:	ee31 1a05 	vadd.f32	s2, s2, s10
90023d36:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023d3a:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
90023d3e:	eef0 6a43 	vmov.f32	s13, s6
90023d42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90023d46:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
90023d4a:	ee20 7aa7 	vmul.f32	s14, s1, s15
90023d4e:	ee61 7a27 	vmul.f32	s15, s2, s15
90023d52:	ee77 2a62 	vsub.f32	s5, s14, s5
90023d56:	ee37 3ac3 	vsub.f32	s6, s15, s6
90023d5a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90023d5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90023d62:	ee12 2a90 	vmov	r2, s5
90023d66:	eef0 2a47 	vmov.f32	s5, s14
90023d6a:	fb92 f3f3 	sdiv	r3, r2, r3
90023d6e:	ee13 2a10 	vmov	r2, s6
90023d72:	931f      	str	r3, [sp, #124]	; 0x7c
90023d74:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023d76:	eeb0 3a67 	vmov.f32	s6, s15
90023d7a:	fb92 f3f3 	sdiv	r3, r2, r3
90023d7e:	9320      	str	r3, [sp, #128]	; 0x80
90023d80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90023d82:	9a10      	ldr	r2, [sp, #64]	; 0x40
90023d84:	3b01      	subs	r3, #1
90023d86:	930e      	str	r3, [sp, #56]	; 0x38
90023d88:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90023d8a:	bf08      	it	eq
90023d8c:	4613      	moveq	r3, r2
90023d8e:	9306      	str	r3, [sp, #24]
90023d90:	e61f      	b.n	900239d2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
90023d92:	fb08 f505 	mul.w	r5, r8, r5
90023d96:	fb09 5303 	mla	r3, r9, r3, r5
90023d9a:	e69f      	b.n	90023adc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
90023d9c:	4681      	mov	r9, r0
90023d9e:	e6c6      	b.n	90023b2e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
90023da0:	f1c1 0210 	rsb	r2, r1, #16
90023da4:	4341      	muls	r1, r0
90023da6:	fb09 1902 	mla	r9, r9, r2, r1
90023daa:	ea4f 0949 	mov.w	r9, r9, lsl #1
90023dae:	ea4f 5259 	mov.w	r2, r9, lsr #21
90023db2:	ea4f 1959 	mov.w	r9, r9, lsr #5
90023db6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90023dba:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023dbe:	ea42 0909 	orr.w	r9, r2, r9
90023dc2:	fa1f f289 	uxth.w	r2, r9
90023dc6:	e75b      	b.n	90023c80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>
90023dc8:	f8b7 c000 	ldrh.w	ip, [r7]
90023dcc:	43db      	mvns	r3, r3
90023dce:	ea4f 202c 	mov.w	r0, ip, asr #8
90023dd2:	fa5f fe83 	uxtb.w	lr, r3
90023dd6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
90023dda:	ea4f 05ec 	mov.w	r5, ip, asr #3
90023dde:	ea4f 03cc 	mov.w	r3, ip, lsl #3
90023de2:	fb00 f00e 	mul.w	r0, r0, lr
90023de6:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
90023dea:	b2db      	uxtb	r3, r3
90023dec:	1c41      	adds	r1, r0, #1
90023dee:	fb05 f50e 	mul.w	r5, r5, lr
90023df2:	fb03 f30e 	mul.w	r3, r3, lr
90023df6:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90023dfa:	1211      	asrs	r1, r2, #8
90023dfc:	f021 0107 	bic.w	r1, r1, #7
90023e00:	eb01 2110 	add.w	r1, r1, r0, lsr #8
90023e04:	48d3      	ldr	r0, [pc, #844]	; (90024154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
90023e06:	b2c9      	uxtb	r1, r1
90023e08:	ea00 2001 	and.w	r0, r0, r1, lsl #8
90023e0c:	1c69      	adds	r1, r5, #1
90023e0e:	eb01 2515 	add.w	r5, r1, r5, lsr #8
90023e12:	10d1      	asrs	r1, r2, #3
90023e14:	00d2      	lsls	r2, r2, #3
90023e16:	f021 0103 	bic.w	r1, r1, #3
90023e1a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
90023e1e:	00c9      	lsls	r1, r1, #3
90023e20:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023e24:	4301      	orrs	r1, r0
90023e26:	1c58      	adds	r0, r3, #1
90023e28:	eb00 2313 	add.w	r3, r0, r3, lsr #8
90023e2c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90023e30:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90023e34:	430a      	orrs	r2, r1
90023e36:	e726      	b.n	90023c86 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
90023e38:	f115 0e01 	adds.w	lr, r5, #1
90023e3c:	f53f af24 	bmi.w	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023e40:	4572      	cmp	r2, lr
90023e42:	f6ff af21 	blt.w	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023e46:	f110 0e01 	adds.w	lr, r0, #1
90023e4a:	f53f af1d 	bmi.w	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023e4e:	4573      	cmp	r3, lr
90023e50:	f6ff af1a 	blt.w	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023e54:	b21b      	sxth	r3, r3
90023e56:	b212      	sxth	r2, r2
90023e58:	9301      	str	r3, [sp, #4]
90023e5a:	9200      	str	r2, [sp, #0]
90023e5c:	e9cd 1c04 	strd	r1, ip, [sp, #16]
90023e60:	e9cd 5002 	strd	r5, r0, [sp, #8]
90023e64:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
90023e68:	4639      	mov	r1, r7
90023e6a:	9811      	ldr	r0, [sp, #68]	; 0x44
90023e6c:	f7ff fc22 	bl	900236b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
90023e70:	e70a      	b.n	90023c88 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
90023e72:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023e74:	f3c3 3203 	ubfx	r2, r3, #12, #4
90023e78:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023e7a:	f3c3 3503 	ubfx	r5, r3, #12, #4
90023e7e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90023e80:	fa1f fc82 	uxth.w	ip, r2
90023e84:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90023e88:	9b1e      	ldr	r3, [sp, #120]	; 0x78
90023e8a:	ea4f 100c 	mov.w	r0, ip, lsl #4
90023e8e:	141f      	asrs	r7, r3, #16
90023e90:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90023e92:	141b      	asrs	r3, r3, #16
90023e94:	fb01 3707 	mla	r7, r1, r7, r3
90023e98:	9b09      	ldr	r3, [sp, #36]	; 0x24
90023e9a:	eb03 0a07 	add.w	sl, r3, r7
90023e9e:	f813 9007 	ldrb.w	r9, [r3, r7]
90023ea2:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90023ea6:	f89a 8001 	ldrb.w	r8, [sl, #1]
90023eaa:	b29b      	uxth	r3, r3
90023eac:	2d00      	cmp	r5, #0
90023eae:	f000 80fe 	beq.w	900240ae <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70a>
90023eb2:	f81a 4001 	ldrb.w	r4, [sl, r1]
90023eb6:	eb0a 0b01 	add.w	fp, sl, r1
90023eba:	fa1f fa85 	uxth.w	sl, r5
90023ebe:	940c      	str	r4, [sp, #48]	; 0x30
90023ec0:	fb0a fc0c 	mul.w	ip, sl, ip
90023ec4:	f89b 4001 	ldrb.w	r4, [fp, #1]
90023ec8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
90023ecc:	eba0 000c 	sub.w	r0, r0, ip
90023ed0:	940d      	str	r4, [sp, #52]	; 0x34
90023ed2:	fa1f fa8a 	uxth.w	sl, sl
90023ed6:	b280      	uxth	r0, r0
90023ed8:	eba3 030a 	sub.w	r3, r3, sl
90023edc:	fb08 f000 	mul.w	r0, r8, r0
90023ee0:	b29b      	uxth	r3, r3
90023ee2:	fb09 0303 	mla	r3, r9, r3, r0
90023ee6:	980c      	ldr	r0, [sp, #48]	; 0x30
90023ee8:	fb0a 3300 	mla	r3, sl, r0, r3
90023eec:	fb0c 3304 	mla	r3, ip, r4, r3
90023ef0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90023ef4:	2b00      	cmp	r3, #0
90023ef6:	f000 80cc 	beq.w	90024092 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
90023efa:	9808      	ldr	r0, [sp, #32]
90023efc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
90023f00:	9c08      	ldr	r4, [sp, #32]
90023f02:	eb00 0047 	add.w	r0, r0, r7, lsl #1
90023f06:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
90023f0a:	f000 80d5 	beq.w	900240b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
90023f0e:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023f12:	ea4f 0ae9 	mov.w	sl, r9, asr #3
90023f16:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023f1a:	fb0a fc0c 	mul.w	ip, sl, ip
90023f1e:	fb09 f707 	mul.w	r7, r9, r7
90023f22:	ea06 195c 	and.w	r9, r6, ip, lsr #5
90023f26:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023f2a:	f107 0b20 	add.w	fp, r7, #32
90023f2e:	44cc      	add	ip, r9
90023f30:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
90023f34:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023f38:	ea4f 2919 	mov.w	r9, r9, lsr #8
90023f3c:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
90023f40:	ea4c 0909 	orr.w	r9, ip, r9
90023f44:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
90023f48:	8847      	ldrh	r7, [r0, #2]
90023f4a:	d019      	beq.n	90023f80 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5dc>
90023f4c:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
90023f50:	ea4f 0ae8 	mov.w	sl, r8, asr #3
90023f54:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023f58:	fb0a fc0c 	mul.w	ip, sl, ip
90023f5c:	fb08 f807 	mul.w	r8, r8, r7
90023f60:	ea06 175c 	and.w	r7, r6, ip, lsr #5
90023f64:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
90023f68:	f108 0b20 	add.w	fp, r8, #32
90023f6c:	44bc      	add	ip, r7
90023f6e:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
90023f72:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
90023f76:	0a3f      	lsrs	r7, r7, #8
90023f78:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90023f7c:	ea4c 0707 	orr.w	r7, ip, r7
90023f80:	ea4f 4c09 	mov.w	ip, r9, lsl #16
90023f84:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
90023f88:	ea4f 4a07 	mov.w	sl, r7, lsl #16
90023f8c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
90023f90:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
90023f94:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90023f98:	ea4c 0909 	orr.w	r9, ip, r9
90023f9c:	ea4a 0707 	orr.w	r7, sl, r7
90023fa0:	2d00      	cmp	r5, #0
90023fa2:	f000 808b 	beq.w	900240bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
90023fa6:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90023faa:	3901      	subs	r1, #1
90023fac:	0049      	lsls	r1, r1, #1
90023fae:	3102      	adds	r1, #2
90023fb0:	eb00 0c01 	add.w	ip, r0, r1
90023fb4:	5a41      	ldrh	r1, [r0, r1]
90023fb6:	980c      	ldr	r0, [sp, #48]	; 0x30
90023fb8:	28ff      	cmp	r0, #255	; 0xff
90023fba:	d019      	beq.n	90023ff0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
90023fbc:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
90023fc0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
90023fc2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90023fc6:	ea4f 08e4 	mov.w	r8, r4, asr #3
90023fca:	fb04 fa01 	mul.w	sl, r4, r1
90023fce:	fb08 f800 	mul.w	r8, r8, r0
90023fd2:	f10a 0020 	add.w	r0, sl, #32
90023fd6:	ea06 1158 	and.w	r1, r6, r8, lsr #5
90023fda:	f608 0801 	addw	r8, r8, #2049	; 0x801
90023fde:	eb00 201a 	add.w	r0, r0, sl, lsr #8
90023fe2:	4441      	add	r1, r8
90023fe4:	0a00      	lsrs	r0, r0, #8
90023fe6:	ea06 1151 	and.w	r1, r6, r1, lsr #5
90023fea:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90023fee:	4301      	orrs	r1, r0
90023ff0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
90023ff2:	f8bc 0002 	ldrh.w	r0, [ip, #2]
90023ff6:	2cff      	cmp	r4, #255	; 0xff
90023ff8:	d01a      	beq.n	90024030 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68c>
90023ffa:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
90023ffe:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90024002:	ea4f 08e4 	mov.w	r8, r4, asr #3
90024006:	fb04 fa00 	mul.w	sl, r4, r0
9002400a:	fb08 f80c 	mul.w	r8, r8, ip
9002400e:	f10a 0c20 	add.w	ip, sl, #32
90024012:	ea06 1058 	and.w	r0, r6, r8, lsr #5
90024016:	f608 0801 	addw	r8, r8, #2049	; 0x801
9002401a:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
9002401e:	4440      	add	r0, r8
90024020:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024024:	ea06 1050 	and.w	r0, r6, r0, lsr #5
90024028:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
9002402c:	ea40 000c 	orr.w	r0, r0, ip
90024030:	fb15 fc02 	smulbb	ip, r5, r2
90024034:	f1c5 0810 	rsb	r8, r5, #16
90024038:	ea4f 4a01 	mov.w	sl, r1, lsl #16
9002403c:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024040:	ea4f 0cec 	mov.w	ip, ip, asr #3
90024044:	eba8 0802 	sub.w	r8, r8, r2
90024048:	ea4f 4b00 	mov.w	fp, r0, lsl #16
9002404c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024050:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
90024054:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024058:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
9002405c:	ea4a 0101 	orr.w	r1, sl, r1
90024060:	437a      	muls	r2, r7
90024062:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
90024066:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002406a:	fb09 2208 	mla	r2, r9, r8, r2
9002406e:	ea4b 0000 	orr.w	r0, fp, r0
90024072:	fb05 2201 	mla	r2, r5, r1, r2
90024076:	fb0c 2200 	mla	r2, ip, r0, r2
9002407a:	0d57      	lsrs	r7, r2, #21
9002407c:	0952      	lsrs	r2, r2, #5
9002407e:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
90024082:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024086:	433a      	orrs	r2, r7
90024088:	2bff      	cmp	r3, #255	; 0xff
9002408a:	b292      	uxth	r2, r2
9002408c:	d127      	bne.n	900240de <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73a>
9002408e:	f8ae 2000 	strh.w	r2, [lr]
90024092:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024094:	f10e 0e02 	add.w	lr, lr, #2
90024098:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
9002409a:	4413      	add	r3, r2
9002409c:	9a1e      	ldr	r2, [sp, #120]	; 0x78
9002409e:	931d      	str	r3, [sp, #116]	; 0x74
900240a0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900240a2:	441a      	add	r2, r3
900240a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
900240a6:	3b01      	subs	r3, #1
900240a8:	921e      	str	r2, [sp, #120]	; 0x78
900240aa:	930f      	str	r3, [sp, #60]	; 0x3c
900240ac:	e627      	b.n	90023cfe <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
900240ae:	fb08 f000 	mul.w	r0, r8, r0
900240b2:	fb09 0303 	mla	r3, r9, r3, r0
900240b6:	e71b      	b.n	90023ef0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54c>
900240b8:	46b9      	mov	r9, r7
900240ba:	e743      	b.n	90023f44 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a0>
900240bc:	f1c2 0110 	rsb	r1, r2, #16
900240c0:	437a      	muls	r2, r7
900240c2:	fb09 2901 	mla	r9, r9, r1, r2
900240c6:	ea4f 0949 	mov.w	r9, r9, lsl #1
900240ca:	ea4f 5059 	mov.w	r0, r9, lsr #21
900240ce:	ea4f 1259 	mov.w	r2, r9, lsr #5
900240d2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900240d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900240da:	4302      	orrs	r2, r0
900240dc:	e7d4      	b.n	90024088 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e4>
900240de:	f8be 7000 	ldrh.w	r7, [lr]
900240e2:	43db      	mvns	r3, r3
900240e4:	4c1b      	ldr	r4, [pc, #108]	; (90024154 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b0>)
900240e6:	1238      	asrs	r0, r7, #8
900240e8:	fa5f fc83 	uxtb.w	ip, r3
900240ec:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900240f0:	10fd      	asrs	r5, r7, #3
900240f2:	00fb      	lsls	r3, r7, #3
900240f4:	fb00 f00c 	mul.w	r0, r0, ip
900240f8:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
900240fc:	b2db      	uxtb	r3, r3
900240fe:	fb05 f10c 	mul.w	r1, r5, ip
90024102:	1c45      	adds	r5, r0, #1
90024104:	fb03 f30c 	mul.w	r3, r3, ip
90024108:	eb05 2010 	add.w	r0, r5, r0, lsr #8
9002410c:	1215      	asrs	r5, r2, #8
9002410e:	f025 0507 	bic.w	r5, r5, #7
90024112:	eb05 2010 	add.w	r0, r5, r0, lsr #8
90024116:	1c4d      	adds	r5, r1, #1
90024118:	eb05 2511 	add.w	r5, r5, r1, lsr #8
9002411c:	10d1      	asrs	r1, r2, #3
9002411e:	b2c0      	uxtb	r0, r0
90024120:	f021 0103 	bic.w	r1, r1, #3
90024124:	00d2      	lsls	r2, r2, #3
90024126:	ea04 2000 	and.w	r0, r4, r0, lsl #8
9002412a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
9002412e:	00c9      	lsls	r1, r1, #3
90024130:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90024134:	4308      	orrs	r0, r1
90024136:	1c59      	adds	r1, r3, #1
90024138:	eb01 2313 	add.w	r3, r1, r3, lsr #8
9002413c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
90024140:	f3c3 03c4 	ubfx	r3, r3, #3, #5
90024144:	4318      	orrs	r0, r3
90024146:	f8ae 0000 	strh.w	r0, [lr]
9002414a:	e7a2      	b.n	90024092 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ee>
9002414c:	b013      	add	sp, #76	; 0x4c
9002414e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024152:	bf00      	nop
90024154:	fffff800 	.word	0xfffff800

90024158 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
90024158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002415c:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
90024160:	f9bd a020 	ldrsh.w	sl, [sp, #32]
90024164:	fb05 4c03 	mla	ip, r5, r3, r4
90024168:	2d00      	cmp	r5, #0
9002416a:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
9002416e:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90024172:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
90024176:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
9002417a:	8808      	ldrh	r0, [r1, #0]
9002417c:	f2c0 80a7 	blt.w	900242ce <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90024180:	45aa      	cmp	sl, r5
90024182:	f340 80a4 	ble.w	900242ce <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
90024186:	2c00      	cmp	r4, #0
90024188:	f2c0 809f 	blt.w	900242ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
9002418c:	42a3      	cmp	r3, r4
9002418e:	f340 809c 	ble.w	900242ca <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
90024192:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
90024196:	1c62      	adds	r2, r4, #1
90024198:	f100 809c 	bmi.w	900242d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
9002419c:	4293      	cmp	r3, r2
9002419e:	f340 8099 	ble.w	900242d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900241a2:	f1b9 0f00 	cmp.w	r9, #0
900241a6:	f000 8095 	beq.w	900242d4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
900241aa:	f8be c002 	ldrh.w	ip, [lr, #2]
900241ae:	3501      	adds	r5, #1
900241b0:	f100 8094 	bmi.w	900242dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900241b4:	45aa      	cmp	sl, r5
900241b6:	f340 8091 	ble.w	900242dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900241ba:	2f00      	cmp	r7, #0
900241bc:	f000 808e 	beq.w	900242dc <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
900241c0:	2c00      	cmp	r4, #0
900241c2:	f2c0 8089 	blt.w	900242d8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900241c6:	42a3      	cmp	r3, r4
900241c8:	f340 8086 	ble.w	900242d8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
900241cc:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
900241d0:	3401      	adds	r4, #1
900241d2:	f100 8086 	bmi.w	900242e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900241d6:	42a3      	cmp	r3, r4
900241d8:	f340 8083 	ble.w	900242e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900241dc:	f1b9 0f00 	cmp.w	r9, #0
900241e0:	d07f      	beq.n	900242e2 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
900241e2:	3301      	adds	r3, #1
900241e4:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
900241e8:	ea4f 4408 	mov.w	r4, r8, lsl #16
900241ec:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
900241f0:	fb19 fe07 	smulbb	lr, r9, r7
900241f4:	f1c7 0210 	rsb	r2, r7, #16
900241f8:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
900241fc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
90024200:	eba2 0209 	sub.w	r2, r2, r9
90024204:	ea44 0808 	orr.w	r8, r4, r8
90024208:	ea4f 440c 	mov.w	r4, ip, lsl #16
9002420c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024210:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
90024214:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
90024218:	ebce 0747 	rsb	r7, lr, r7, lsl #1
9002421c:	ea44 0c0c 	orr.w	ip, r4, ip
90024220:	ebce 0449 	rsb	r4, lr, r9, lsl #1
90024224:	fb04 f40c 	mul.w	r4, r4, ip
90024228:	fb02 4808 	mla	r8, r2, r8, r4
9002422c:	041a      	lsls	r2, r3, #16
9002422e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024232:	b2b4      	uxth	r4, r6
90024234:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024238:	43f6      	mvns	r6, r6
9002423a:	4313      	orrs	r3, r2
9002423c:	042a      	lsls	r2, r5, #16
9002423e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
90024242:	b2f6      	uxtb	r6, r6
90024244:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024248:	fb0e 8303 	mla	r3, lr, r3, r8
9002424c:	432a      	orrs	r2, r5
9002424e:	fb07 3202 	mla	r2, r7, r2, r3
90024252:	10c7      	asrs	r7, r0, #3
90024254:	0d53      	lsrs	r3, r2, #21
90024256:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
9002425a:	0952      	lsrs	r2, r2, #5
9002425c:	fb17 f706 	smulbb	r7, r7, r6
90024260:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024264:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024268:	431a      	orrs	r2, r3
9002426a:	b293      	uxth	r3, r2
9002426c:	1202      	asrs	r2, r0, #8
9002426e:	121d      	asrs	r5, r3, #8
90024270:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90024274:	00c0      	lsls	r0, r0, #3
90024276:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
9002427a:	fb12 f206 	smulbb	r2, r2, r6
9002427e:	b2c0      	uxtb	r0, r0
90024280:	fb05 2504 	mla	r5, r5, r4, r2
90024284:	10da      	asrs	r2, r3, #3
90024286:	fb10 f006 	smulbb	r0, r0, r6
9002428a:	00db      	lsls	r3, r3, #3
9002428c:	b2ad      	uxth	r5, r5
9002428e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024292:	b2db      	uxtb	r3, r3
90024294:	fb02 7204 	mla	r2, r2, r4, r7
90024298:	fb03 0004 	mla	r0, r3, r4, r0
9002429c:	1c6b      	adds	r3, r5, #1
9002429e:	b292      	uxth	r2, r2
900242a0:	b280      	uxth	r0, r0
900242a2:	eb03 2515 	add.w	r5, r3, r5, lsr #8
900242a6:	1c43      	adds	r3, r0, #1
900242a8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
900242ac:	eb03 2310 	add.w	r3, r3, r0, lsr #8
900242b0:	1c50      	adds	r0, r2, #1
900242b2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
900242b6:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900242ba:	0952      	lsrs	r2, r2, #5
900242bc:	432b      	orrs	r3, r5
900242be:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
900242c2:	4313      	orrs	r3, r2
900242c4:	800b      	strh	r3, [r1, #0]
900242c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
900242ca:	4680      	mov	r8, r0
900242cc:	e763      	b.n	90024196 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
900242ce:	4684      	mov	ip, r0
900242d0:	4680      	mov	r8, r0
900242d2:	e76c      	b.n	900241ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900242d4:	4684      	mov	ip, r0
900242d6:	e76a      	b.n	900241ae <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
900242d8:	4605      	mov	r5, r0
900242da:	e779      	b.n	900241d0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
900242dc:	4603      	mov	r3, r0
900242de:	4605      	mov	r5, r0
900242e0:	e782      	b.n	900241e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
900242e2:	4603      	mov	r3, r0
900242e4:	e780      	b.n	900241e8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

900242e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900242e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900242ea:	b093      	sub	sp, #76	; 0x4c
900242ec:	461d      	mov	r5, r3
900242ee:	9210      	str	r2, [sp, #64]	; 0x40
900242f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
900242f2:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
900242f6:	910a      	str	r1, [sp, #40]	; 0x28
900242f8:	920b      	str	r2, [sp, #44]	; 0x2c
900242fa:	6859      	ldr	r1, [r3, #4]
900242fc:	681b      	ldr	r3, [r3, #0]
900242fe:	9011      	str	r0, [sp, #68]	; 0x44
90024300:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
90024304:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
90024308:	fb01 2707 	mla	r7, r1, r7, r2
9002430c:	eb03 0347 	add.w	r3, r3, r7, lsl #1
90024310:	9307      	str	r3, [sp, #28]
90024312:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024314:	681b      	ldr	r3, [r3, #0]
90024316:	9309      	str	r3, [sp, #36]	; 0x24
90024318:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
9002431a:	43db      	mvns	r3, r3
9002431c:	b2db      	uxtb	r3, r3
9002431e:	9308      	str	r3, [sp, #32]
90024320:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024322:	2b00      	cmp	r3, #0
90024324:	dc03      	bgt.n	9002432e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90024326:	9b10      	ldr	r3, [sp, #64]	; 0x40
90024328:	2b00      	cmp	r3, #0
9002432a:	f340 8205 	ble.w	90024738 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
9002432e:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024330:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024334:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024338:	1e48      	subs	r0, r1, #1
9002433a:	f102 3cff 	add.w	ip, r2, #4294967295
9002433e:	2d00      	cmp	r5, #0
90024340:	f340 80da 	ble.w	900244f8 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
90024344:	ea5f 4e24 	movs.w	lr, r4, asr #16
90024348:	ea4f 4326 	mov.w	r3, r6, asr #16
9002434c:	d406      	bmi.n	9002435c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
9002434e:	4586      	cmp	lr, r0
90024350:	da04      	bge.n	9002435c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90024352:	2b00      	cmp	r3, #0
90024354:	db02      	blt.n	9002435c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
90024356:	4563      	cmp	r3, ip
90024358:	f2c0 80cf 	blt.w	900244fa <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
9002435c:	f11e 0e01 	adds.w	lr, lr, #1
90024360:	f100 80c1 	bmi.w	900244e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024364:	4571      	cmp	r1, lr
90024366:	f2c0 80be 	blt.w	900244e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
9002436a:	3301      	adds	r3, #1
9002436c:	f100 80bb 	bmi.w	900244e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024370:	429a      	cmp	r2, r3
90024372:	f2c0 80b8 	blt.w	900244e6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
90024376:	46a9      	mov	r9, r5
90024378:	f8dd 801c 	ldr.w	r8, [sp, #28]
9002437c:	f1b9 0f00 	cmp.w	r9, #0
90024380:	f340 80d8 	ble.w	90024534 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
90024384:	9b24      	ldr	r3, [sp, #144]	; 0x90
90024386:	1421      	asrs	r1, r4, #16
90024388:	ea4f 4026 	mov.w	r0, r6, asr #16
9002438c:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024390:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90024394:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
90024398:	f100 8112 	bmi.w	900245c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
9002439c:	f10e 3aff 	add.w	sl, lr, #4294967295
900243a0:	4551      	cmp	r1, sl
900243a2:	f280 810d 	bge.w	900245c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900243a6:	2800      	cmp	r0, #0
900243a8:	f2c0 810a 	blt.w	900245c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900243ac:	f103 3aff 	add.w	sl, r3, #4294967295
900243b0:	4550      	cmp	r0, sl
900243b2:	f280 8105 	bge.w	900245c0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2da>
900243b6:	fa0f f38e 	sxth.w	r3, lr
900243ba:	fb00 1103 	mla	r1, r0, r3, r1
900243be:	9809      	ldr	r0, [sp, #36]	; 0x24
900243c0:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
900243c4:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
900243c8:	f8ba 1002 	ldrh.w	r1, [sl, #2]
900243cc:	f1bc 0f00 	cmp.w	ip, #0
900243d0:	d007      	beq.n	900243e2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
900243d2:	005b      	lsls	r3, r3, #1
900243d4:	eb0a 0003 	add.w	r0, sl, r3
900243d8:	f83a 3003 	ldrh.w	r3, [sl, r3]
900243dc:	930c      	str	r3, [sp, #48]	; 0x30
900243de:	8843      	ldrh	r3, [r0, #2]
900243e0:	930d      	str	r3, [sp, #52]	; 0x34
900243e2:	ea4f 400e 	mov.w	r0, lr, lsl #16
900243e6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
900243ea:	fb12 f30c 	smulbb	r3, r2, ip
900243ee:	ea4f 4a01 	mov.w	sl, r1, lsl #16
900243f2:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
900243f6:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
900243fa:	10db      	asrs	r3, r3, #3
900243fc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
90024400:	ea40 000e 	orr.w	r0, r0, lr
90024404:	f1cc 0e10 	rsb	lr, ip, #16
90024408:	ea4a 0101 	orr.w	r1, sl, r1
9002440c:	9f08      	ldr	r7, [sp, #32]
9002440e:	ebae 0e02 	sub.w	lr, lr, r2
90024412:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024416:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
9002441a:	4351      	muls	r1, r2
9002441c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
9002441e:	fb0e 1e00 	mla	lr, lr, r0, r1
90024422:	990c      	ldr	r1, [sp, #48]	; 0x30
90024424:	0410      	lsls	r0, r2, #16
90024426:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
9002442a:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002442e:	4310      	orrs	r0, r2
90024430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024432:	0412      	lsls	r2, r2, #16
90024434:	fb03 e000 	mla	r0, r3, r0, lr
90024438:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
9002443c:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
90024440:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024444:	ea42 020e 	orr.w	r2, r2, lr
90024448:	fb03 0302 	mla	r3, r3, r2, r0
9002444c:	f8b8 0000 	ldrh.w	r0, [r8]
90024450:	0d5a      	lsrs	r2, r3, #21
90024452:	095b      	lsrs	r3, r3, #5
90024454:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024458:	1201      	asrs	r1, r0, #8
9002445a:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
9002445e:	ea4f 0ee0 	mov.w	lr, r0, asr #3
90024462:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90024466:	00c0      	lsls	r0, r0, #3
90024468:	4313      	orrs	r3, r2
9002446a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
9002446e:	fb11 f107 	smulbb	r1, r1, r7
90024472:	b2c0      	uxtb	r0, r0
90024474:	b29b      	uxth	r3, r3
90024476:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
9002447a:	fb10 f007 	smulbb	r0, r0, r7
9002447e:	fb1e fe07 	smulbb	lr, lr, r7
90024482:	ea4f 2c23 	mov.w	ip, r3, asr #8
90024486:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
9002448a:	fb0c 1c02 	mla	ip, ip, r2, r1
9002448e:	10d9      	asrs	r1, r3, #3
90024490:	00db      	lsls	r3, r3, #3
90024492:	fa1f fc8c 	uxth.w	ip, ip
90024496:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
9002449a:	b2db      	uxtb	r3, r3
9002449c:	fb01 e102 	mla	r1, r1, r2, lr
900244a0:	fb03 0302 	mla	r3, r3, r2, r0
900244a4:	b289      	uxth	r1, r1
900244a6:	b29a      	uxth	r2, r3
900244a8:	f10c 0301 	add.w	r3, ip, #1
900244ac:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
900244b0:	1c53      	adds	r3, r2, #1
900244b2:	eb03 2312 	add.w	r3, r3, r2, lsr #8
900244b6:	1c4a      	adds	r2, r1, #1
900244b8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
900244bc:	eb02 2111 	add.w	r1, r2, r1, lsr #8
900244c0:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900244c4:	0949      	lsrs	r1, r1, #5
900244c6:	ea43 030c 	orr.w	r3, r3, ip
900244ca:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
900244ce:	430b      	orrs	r3, r1
900244d0:	f8a8 3000 	strh.w	r3, [r8]
900244d4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900244d6:	f108 0802 	add.w	r8, r8, #2
900244da:	f109 39ff 	add.w	r9, r9, #4294967295
900244de:	441c      	add	r4, r3
900244e0:	9b20      	ldr	r3, [sp, #128]	; 0x80
900244e2:	441e      	add	r6, r3
900244e4:	e74a      	b.n	9002437c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
900244e6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
900244e8:	3d01      	subs	r5, #1
900244ea:	441c      	add	r4, r3
900244ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
900244ee:	441e      	add	r6, r3
900244f0:	9b07      	ldr	r3, [sp, #28]
900244f2:	3302      	adds	r3, #2
900244f4:	9307      	str	r3, [sp, #28]
900244f6:	e722      	b.n	9002433e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900244f8:	d022      	beq.n	90024540 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
900244fa:	1e6b      	subs	r3, r5, #1
900244fc:	981f      	ldr	r0, [sp, #124]	; 0x7c
900244fe:	fb00 4003 	mla	r0, r0, r3, r4
90024502:	1400      	asrs	r0, r0, #16
90024504:	f53f af37 	bmi.w	90024376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024508:	3901      	subs	r1, #1
9002450a:	4288      	cmp	r0, r1
9002450c:	f6bf af33 	bge.w	90024376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024510:	9920      	ldr	r1, [sp, #128]	; 0x80
90024512:	fb01 6303 	mla	r3, r1, r3, r6
90024516:	141b      	asrs	r3, r3, #16
90024518:	f53f af2d 	bmi.w	90024376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
9002451c:	3a01      	subs	r2, #1
9002451e:	4293      	cmp	r3, r2
90024520:	f6bf af29 	bge.w	90024376 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
90024524:	46a8      	mov	r8, r5
90024526:	f8dd 901c 	ldr.w	r9, [sp, #28]
9002452a:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
9002452e:	f1b8 0f00 	cmp.w	r8, #0
90024532:	dc60      	bgt.n	900245f6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
90024534:	9b07      	ldr	r3, [sp, #28]
90024536:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
9002453a:	eb03 0345 	add.w	r3, r3, r5, lsl #1
9002453e:	9307      	str	r3, [sp, #28]
90024540:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90024542:	2b00      	cmp	r3, #0
90024544:	f340 80f8 	ble.w	90024738 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024548:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
9002454c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
9002454e:	ee30 0a04 	vadd.f32	s0, s0, s8
90024552:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024556:	eef0 6a62 	vmov.f32	s13, s5
9002455a:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002455e:	ee31 1a05 	vadd.f32	s2, s2, s10
90024562:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024566:	ee16 4a90 	vmov	r4, s13
9002456a:	eef0 6a43 	vmov.f32	s13, s6
9002456e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024572:	ee16 6a90 	vmov	r6, s13
90024576:	ee20 7aa7 	vmul.f32	s14, s1, s15
9002457a:	ee61 7a27 	vmul.f32	s15, s2, s15
9002457e:	ee77 2a62 	vsub.f32	s5, s14, s5
90024582:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024586:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
9002458a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002458e:	ee12 2a90 	vmov	r2, s5
90024592:	eef0 2a47 	vmov.f32	s5, s14
90024596:	fb92 f3f3 	sdiv	r3, r2, r3
9002459a:	ee13 2a10 	vmov	r2, s6
9002459e:	931f      	str	r3, [sp, #124]	; 0x7c
900245a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900245a2:	eeb0 3a67 	vmov.f32	s6, s15
900245a6:	fb92 f3f3 	sdiv	r3, r2, r3
900245aa:	9320      	str	r3, [sp, #128]	; 0x80
900245ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900245ae:	9a10      	ldr	r2, [sp, #64]	; 0x40
900245b0:	3b01      	subs	r3, #1
900245b2:	930a      	str	r3, [sp, #40]	; 0x28
900245b4:	bf08      	it	eq
900245b6:	4615      	moveq	r5, r2
900245b8:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900245ba:	bf18      	it	ne
900245bc:	461d      	movne	r5, r3
900245be:	e6af      	b.n	90024320 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900245c0:	f111 0a01 	adds.w	sl, r1, #1
900245c4:	d486      	bmi.n	900244d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900245c6:	45d6      	cmp	lr, sl
900245c8:	db84      	blt.n	900244d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900245ca:	f110 0a01 	adds.w	sl, r0, #1
900245ce:	d481      	bmi.n	900244d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900245d0:	4553      	cmp	r3, sl
900245d2:	f6ff af7f 	blt.w	900244d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900245d6:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
900245d8:	b21b      	sxth	r3, r3
900245da:	9101      	str	r1, [sp, #4]
900245dc:	4641      	mov	r1, r8
900245de:	9300      	str	r3, [sp, #0]
900245e0:	fa0f f38e 	sxth.w	r3, lr
900245e4:	e9cd 0202 	strd	r0, r2, [sp, #8]
900245e8:	e9cd c704 	strd	ip, r7, [sp, #16]
900245ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
900245ee:	9811      	ldr	r0, [sp, #68]	; 0x44
900245f0:	f7ff fdb2 	bl	90024158 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
900245f4:	e76e      	b.n	900244d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
900245f6:	9b24      	ldr	r3, [sp, #144]	; 0x90
900245f8:	1430      	asrs	r0, r6, #16
900245fa:	9f09      	ldr	r7, [sp, #36]	; 0x24
900245fc:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024600:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024604:	1423      	asrs	r3, r4, #16
90024606:	f3c4 3203 	ubfx	r2, r4, #12, #4
9002460a:	fb01 3000 	mla	r0, r1, r0, r3
9002460e:	9b09      	ldr	r3, [sp, #36]	; 0x24
90024610:	eb03 0340 	add.w	r3, r3, r0, lsl #1
90024614:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
90024618:	8858      	ldrh	r0, [r3, #2]
9002461a:	f1be 0f00 	cmp.w	lr, #0
9002461e:	d00b      	beq.n	90024638 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90024620:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
90024624:	3901      	subs	r1, #1
90024626:	0049      	lsls	r1, r1, #1
90024628:	3102      	adds	r1, #2
9002462a:	eb03 0b01 	add.w	fp, r3, r1
9002462e:	5a5b      	ldrh	r3, [r3, r1]
90024630:	930e      	str	r3, [sp, #56]	; 0x38
90024632:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024636:	930f      	str	r3, [sp, #60]	; 0x3c
90024638:	ea4f 410c 	mov.w	r1, ip, lsl #16
9002463c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024640:	fb12 f30e 	smulbb	r3, r2, lr
90024644:	ea4f 4b00 	mov.w	fp, r0, lsl #16
90024648:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
9002464c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024650:	10db      	asrs	r3, r3, #3
90024652:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024656:	ea41 010c 	orr.w	r1, r1, ip
9002465a:	f1ce 0c10 	rsb	ip, lr, #16
9002465e:	ea4b 0000 	orr.w	r0, fp, r0
90024662:	9f08      	ldr	r7, [sp, #32]
90024664:	ebac 0c02 	sub.w	ip, ip, r2
90024668:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002466c:	f108 38ff 	add.w	r8, r8, #4294967295
90024670:	4350      	muls	r0, r2
90024672:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024676:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90024678:	fb0c 0c01 	mla	ip, ip, r1, r0
9002467c:	980e      	ldr	r0, [sp, #56]	; 0x38
9002467e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024682:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
90024686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
90024688:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
9002468c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024690:	0412      	lsls	r2, r2, #16
90024692:	ea4b 0101 	orr.w	r1, fp, r1
90024696:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
9002469a:	fb03 c101 	mla	r1, r3, r1, ip
9002469e:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
900246a2:	4302      	orrs	r2, r0
900246a4:	fb03 1202 	mla	r2, r3, r2, r1
900246a8:	ea4f 5b52 	mov.w	fp, r2, lsr #21
900246ac:	0952      	lsrs	r2, r2, #5
900246ae:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
900246b2:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
900246b6:	f8b9 2000 	ldrh.w	r2, [r9]
900246ba:	ea4b 0303 	orr.w	r3, fp, r3
900246be:	1211      	asrs	r1, r2, #8
900246c0:	ea4f 0ce2 	mov.w	ip, r2, asr #3
900246c4:	b29b      	uxth	r3, r3
900246c6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900246ca:	00d2      	lsls	r2, r2, #3
900246cc:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
900246d0:	fb11 f107 	smulbb	r1, r1, r7
900246d4:	1218      	asrs	r0, r3, #8
900246d6:	fb1c fc07 	smulbb	ip, ip, r7
900246da:	b2d2      	uxtb	r2, r2
900246dc:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900246e0:	fb12 f207 	smulbb	r2, r2, r7
900246e4:	fb00 100a 	mla	r0, r0, sl, r1
900246e8:	10d9      	asrs	r1, r3, #3
900246ea:	00db      	lsls	r3, r3, #3
900246ec:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900246f0:	b280      	uxth	r0, r0
900246f2:	b2db      	uxtb	r3, r3
900246f4:	fb01 c10a 	mla	r1, r1, sl, ip
900246f8:	fb03 230a 	mla	r3, r3, sl, r2
900246fc:	1c42      	adds	r2, r0, #1
900246fe:	b289      	uxth	r1, r1
90024700:	b29b      	uxth	r3, r3
90024702:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90024706:	f101 0c01 	add.w	ip, r1, #1
9002470a:	1c5a      	adds	r2, r3, #1
9002470c:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
90024710:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
90024714:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90024718:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002471a:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
9002471e:	f3c2 22c4 	ubfx	r2, r2, #11, #5
90024722:	441c      	add	r4, r3
90024724:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90024728:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002472a:	4310      	orrs	r0, r2
9002472c:	441e      	add	r6, r3
9002472e:	ea40 000c 	orr.w	r0, r0, ip
90024732:	f829 0b02 	strh.w	r0, [r9], #2
90024736:	e6fa      	b.n	9002452e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
90024738:	b013      	add	sp, #76	; 0x4c
9002473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

9002473e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
9002473e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
90024742:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
90024746:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
9002474a:	fb0e 4703 	mla	r7, lr, r3, r4
9002474e:	f1be 0f00 	cmp.w	lr, #0
90024752:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
90024756:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
9002475a:	eb02 0847 	add.w	r8, r2, r7, lsl #1
9002475e:	8808      	ldrh	r0, [r1, #0]
90024760:	db60      	blt.n	90024824 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024762:	45f1      	cmp	r9, lr
90024764:	dd5e      	ble.n	90024824 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
90024766:	2c00      	cmp	r4, #0
90024768:	db5a      	blt.n	90024820 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002476a:	42a3      	cmp	r3, r4
9002476c:	dd58      	ble.n	90024820 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
9002476e:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
90024772:	1c62      	adds	r2, r4, #1
90024774:	d459      	bmi.n	9002482a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
90024776:	4293      	cmp	r3, r2
90024778:	dd57      	ble.n	9002482a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002477a:	2d00      	cmp	r5, #0
9002477c:	d055      	beq.n	9002482a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
9002477e:	f8b8 7002 	ldrh.w	r7, [r8, #2]
90024782:	f11e 0e01 	adds.w	lr, lr, #1
90024786:	d454      	bmi.n	90024832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024788:	45f1      	cmp	r9, lr
9002478a:	dd52      	ble.n	90024832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
9002478c:	2e00      	cmp	r6, #0
9002478e:	d050      	beq.n	90024832 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
90024790:	2c00      	cmp	r4, #0
90024792:	db4c      	blt.n	9002482e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024794:	42a3      	cmp	r3, r4
90024796:	dd4a      	ble.n	9002482e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
90024798:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
9002479c:	3401      	adds	r4, #1
9002479e:	d405      	bmi.n	900247ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900247a0:	42a3      	cmp	r3, r4
900247a2:	dd03      	ble.n	900247ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900247a4:	b115      	cbz	r5, 900247ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
900247a6:	3301      	adds	r3, #1
900247a8:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
900247ac:	fb15 f406 	smulbb	r4, r5, r6
900247b0:	ea4f 430c 	mov.w	r3, ip, lsl #16
900247b4:	ea4f 4e07 	mov.w	lr, r7, lsl #16
900247b8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
900247bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900247c0:	f3c4 04c7 	ubfx	r4, r4, #3, #8
900247c4:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
900247c8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
900247cc:	ea43 0c0c 	orr.w	ip, r3, ip
900247d0:	f1c6 0310 	rsb	r3, r6, #16
900247d4:	ea4e 0707 	orr.w	r7, lr, r7
900247d8:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
900247dc:	1b5b      	subs	r3, r3, r5
900247de:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
900247e2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
900247e6:	437d      	muls	r5, r7
900247e8:	fb03 5c0c 	mla	ip, r3, ip, r5
900247ec:	0403      	lsls	r3, r0, #16
900247ee:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
900247f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
900247f6:	4318      	orrs	r0, r3
900247f8:	0413      	lsls	r3, r2, #16
900247fa:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
900247fe:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
90024802:	fb04 c000 	mla	r0, r4, r0, ip
90024806:	4313      	orrs	r3, r2
90024808:	fb06 0003 	mla	r0, r6, r3, r0
9002480c:	0d43      	lsrs	r3, r0, #21
9002480e:	0940      	lsrs	r0, r0, #5
90024810:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024814:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024818:	4318      	orrs	r0, r3
9002481a:	8008      	strh	r0, [r1, #0]
9002481c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
90024820:	4684      	mov	ip, r0
90024822:	e7a6      	b.n	90024772 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
90024824:	4607      	mov	r7, r0
90024826:	4684      	mov	ip, r0
90024828:	e7ab      	b.n	90024782 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002482a:	4607      	mov	r7, r0
9002482c:	e7a9      	b.n	90024782 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
9002482e:	4602      	mov	r2, r0
90024830:	e7b4      	b.n	9002479c <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
90024832:	4602      	mov	r2, r0
90024834:	e7ba      	b.n	900247ac <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

90024836 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024836:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
9002483a:	b08f      	sub	sp, #60	; 0x3c
9002483c:	461d      	mov	r5, r3
9002483e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
90024840:	9107      	str	r1, [sp, #28]
90024842:	920c      	str	r2, [sp, #48]	; 0x30
90024844:	6859      	ldr	r1, [r3, #4]
90024846:	681b      	ldr	r3, [r3, #0]
90024848:	900d      	str	r0, [sp, #52]	; 0x34
9002484a:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
9002484e:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
90024852:	fb01 2707 	mla	r7, r1, r7, r2
90024856:	eb03 0747 	add.w	r7, r3, r7, lsl #1
9002485a:	9b20      	ldr	r3, [sp, #128]	; 0x80
9002485c:	f8d3 8000 	ldr.w	r8, [r3]
90024860:	9b07      	ldr	r3, [sp, #28]
90024862:	2b00      	cmp	r3, #0
90024864:	dc03      	bgt.n	9002486e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
90024866:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90024868:	2b00      	cmp	r3, #0
9002486a:	f340 8182 	ble.w	90024b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
9002486e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024870:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024874:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024878:	1e48      	subs	r0, r1, #1
9002487a:	f102 3cff 	add.w	ip, r2, #4294967295
9002487e:	2d00      	cmp	r5, #0
90024880:	f340 809b 	ble.w	900249ba <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
90024884:	ea5f 4e24 	movs.w	lr, r4, asr #16
90024888:	ea4f 4326 	mov.w	r3, r6, asr #16
9002488c:	d406      	bmi.n	9002489c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
9002488e:	4586      	cmp	lr, r0
90024890:	da04      	bge.n	9002489c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024892:	2b00      	cmp	r3, #0
90024894:	db02      	blt.n	9002489c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
90024896:	4563      	cmp	r3, ip
90024898:	f2c0 8090 	blt.w	900249bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
9002489c:	f11e 0e01 	adds.w	lr, lr, #1
900248a0:	f100 8084 	bmi.w	900249ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900248a4:	4571      	cmp	r1, lr
900248a6:	f2c0 8081 	blt.w	900249ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900248aa:	3301      	adds	r3, #1
900248ac:	d47e      	bmi.n	900249ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900248ae:	429a      	cmp	r2, r3
900248b0:	db7c      	blt.n	900249ac <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
900248b2:	46aa      	mov	sl, r5
900248b4:	46b9      	mov	r9, r7
900248b6:	f1ba 0f00 	cmp.w	sl, #0
900248ba:	f340 8099 	ble.w	900249f0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
900248be:	9b20      	ldr	r3, [sp, #128]	; 0x80
900248c0:	1421      	asrs	r1, r4, #16
900248c2:	ea4f 4026 	mov.w	r0, r6, asr #16
900248c6:	f3c4 3203 	ubfx	r2, r4, #12, #4
900248ca:	f3c6 3c03 	ubfx	ip, r6, #12, #4
900248ce:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
900248d2:	f100 80d1 	bmi.w	90024a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900248d6:	f10e 3bff 	add.w	fp, lr, #4294967295
900248da:	4559      	cmp	r1, fp
900248dc:	f280 80cc 	bge.w	90024a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900248e0:	2800      	cmp	r0, #0
900248e2:	f2c0 80c9 	blt.w	90024a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900248e6:	f103 3bff 	add.w	fp, r3, #4294967295
900248ea:	4558      	cmp	r0, fp
900248ec:	f280 80c4 	bge.w	90024a78 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
900248f0:	fa0f fe8e 	sxth.w	lr, lr
900248f4:	fb00 110e 	mla	r1, r0, lr, r1
900248f8:	eb08 0041 	add.w	r0, r8, r1, lsl #1
900248fc:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
90024900:	8841      	ldrh	r1, [r0, #2]
90024902:	f1bc 0f00 	cmp.w	ip, #0
90024906:	d00b      	beq.n	90024920 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
90024908:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
9002490c:	3b01      	subs	r3, #1
9002490e:	005b      	lsls	r3, r3, #1
90024910:	3302      	adds	r3, #2
90024912:	eb00 0e03 	add.w	lr, r0, r3
90024916:	5ac3      	ldrh	r3, [r0, r3]
90024918:	9308      	str	r3, [sp, #32]
9002491a:	f8be 3002 	ldrh.w	r3, [lr, #2]
9002491e:	9309      	str	r3, [sp, #36]	; 0x24
90024920:	ea4f 400b 	mov.w	r0, fp, lsl #16
90024924:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
90024928:	fb12 f30c 	smulbb	r3, r2, ip
9002492c:	f1cc 0e10 	rsb	lr, ip, #16
90024930:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024934:	10db      	asrs	r3, r3, #3
90024936:	ebae 0e02 	sub.w	lr, lr, r2
9002493a:	ea40 000b 	orr.w	r0, r0, fp
9002493e:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024942:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024946:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
9002494a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
9002494e:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
90024952:	ea4b 0101 	orr.w	r1, fp, r1
90024956:	4351      	muls	r1, r2
90024958:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002495a:	fb0e 1e00 	mla	lr, lr, r0, r1
9002495e:	0410      	lsls	r0, r2, #16
90024960:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
90024964:	9908      	ldr	r1, [sp, #32]
90024966:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
9002496a:	4310      	orrs	r0, r2
9002496c:	9a08      	ldr	r2, [sp, #32]
9002496e:	0412      	lsls	r2, r2, #16
90024970:	fb03 e000 	mla	r0, r3, r0, lr
90024974:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
90024978:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
9002497c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024980:	ea42 020e 	orr.w	r2, r2, lr
90024984:	fb03 0302 	mla	r3, r3, r2, r0
90024988:	0d5a      	lsrs	r2, r3, #21
9002498a:	095b      	lsrs	r3, r3, #5
9002498c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024990:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
90024994:	4313      	orrs	r3, r2
90024996:	f8a9 3000 	strh.w	r3, [r9]
9002499a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
9002499c:	f109 0902 	add.w	r9, r9, #2
900249a0:	f10a 3aff 	add.w	sl, sl, #4294967295
900249a4:	441c      	add	r4, r3
900249a6:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900249a8:	441e      	add	r6, r3
900249aa:	e784      	b.n	900248b6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
900249ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
900249ae:	3d01      	subs	r5, #1
900249b0:	3702      	adds	r7, #2
900249b2:	441c      	add	r4, r3
900249b4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900249b6:	441e      	add	r6, r3
900249b8:	e761      	b.n	9002487e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900249ba:	d01d      	beq.n	900249f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
900249bc:	1e6b      	subs	r3, r5, #1
900249be:	981b      	ldr	r0, [sp, #108]	; 0x6c
900249c0:	fb00 4003 	mla	r0, r0, r3, r4
900249c4:	1400      	asrs	r0, r0, #16
900249c6:	f53f af74 	bmi.w	900248b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900249ca:	3901      	subs	r1, #1
900249cc:	4288      	cmp	r0, r1
900249ce:	f6bf af70 	bge.w	900248b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900249d2:	991c      	ldr	r1, [sp, #112]	; 0x70
900249d4:	fb01 6303 	mla	r3, r1, r3, r6
900249d8:	141b      	asrs	r3, r3, #16
900249da:	f53f af6a 	bmi.w	900248b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900249de:	3a01      	subs	r2, #1
900249e0:	4293      	cmp	r3, r2
900249e2:	f6bf af66 	bge.w	900248b2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
900249e6:	46a9      	mov	r9, r5
900249e8:	46ba      	mov	sl, r7
900249ea:	f1b9 0f00 	cmp.w	r9, #0
900249ee:	dc5b      	bgt.n	90024aa8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
900249f0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900249f4:	eb07 0745 	add.w	r7, r7, r5, lsl #1
900249f8:	9b07      	ldr	r3, [sp, #28]
900249fa:	2b00      	cmp	r3, #0
900249fc:	f340 80b9 	ble.w	90024b72 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33c>
90024a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90024a04:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024a06:	ee30 0a04 	vadd.f32	s0, s0, s8
90024a0a:	ee70 0aa4 	vadd.f32	s1, s1, s9
90024a0e:	eef0 6a62 	vmov.f32	s13, s5
90024a12:	eec7 7a00 	vdiv.f32	s15, s14, s0
90024a16:	ee31 1a05 	vadd.f32	s2, s2, s10
90024a1a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024a1e:	ee16 4a90 	vmov	r4, s13
90024a22:	eef0 6a43 	vmov.f32	s13, s6
90024a26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90024a2a:	ee16 6a90 	vmov	r6, s13
90024a2e:	ee20 7aa7 	vmul.f32	s14, s1, s15
90024a32:	ee61 7a27 	vmul.f32	s15, s2, s15
90024a36:	ee77 2a62 	vsub.f32	s5, s14, s5
90024a3a:	ee37 3ac3 	vsub.f32	s6, s15, s6
90024a3e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90024a42:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90024a46:	ee12 2a90 	vmov	r2, s5
90024a4a:	eef0 2a47 	vmov.f32	s5, s14
90024a4e:	fb92 f3f3 	sdiv	r3, r2, r3
90024a52:	ee13 2a10 	vmov	r2, s6
90024a56:	931b      	str	r3, [sp, #108]	; 0x6c
90024a58:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024a5a:	eeb0 3a67 	vmov.f32	s6, s15
90024a5e:	fb92 f3f3 	sdiv	r3, r2, r3
90024a62:	931c      	str	r3, [sp, #112]	; 0x70
90024a64:	9b07      	ldr	r3, [sp, #28]
90024a66:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90024a68:	3b01      	subs	r3, #1
90024a6a:	9307      	str	r3, [sp, #28]
90024a6c:	bf08      	it	eq
90024a6e:	4615      	moveq	r5, r2
90024a70:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024a72:	bf18      	it	ne
90024a74:	461d      	movne	r5, r3
90024a76:	e6f3      	b.n	90024860 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
90024a78:	f111 0b01 	adds.w	fp, r1, #1
90024a7c:	d48d      	bmi.n	9002499a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024a7e:	45de      	cmp	lr, fp
90024a80:	db8b      	blt.n	9002499a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024a82:	f110 0b01 	adds.w	fp, r0, #1
90024a86:	d488      	bmi.n	9002499a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024a88:	455b      	cmp	r3, fp
90024a8a:	db86      	blt.n	9002499a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024a8c:	b21b      	sxth	r3, r3
90024a8e:	e9cd 1001 	strd	r1, r0, [sp, #4]
90024a92:	e9cd 2c03 	strd	r2, ip, [sp, #12]
90024a96:	9300      	str	r3, [sp, #0]
90024a98:	4642      	mov	r2, r8
90024a9a:	fa0f f38e 	sxth.w	r3, lr
90024a9e:	4649      	mov	r1, r9
90024aa0:	980d      	ldr	r0, [sp, #52]	; 0x34
90024aa2:	f7ff fe4c 	bl	9002473e <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
90024aa6:	e778      	b.n	9002499a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
90024aa8:	9b20      	ldr	r3, [sp, #128]	; 0x80
90024aaa:	1420      	asrs	r0, r4, #16
90024aac:	1431      	asrs	r1, r6, #16
90024aae:	f3c6 3e03 	ubfx	lr, r6, #12, #4
90024ab2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
90024ab6:	f3c4 3203 	ubfx	r2, r4, #12, #4
90024aba:	fb03 0101 	mla	r1, r3, r1, r0
90024abe:	eb08 0041 	add.w	r0, r8, r1, lsl #1
90024ac2:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
90024ac6:	8841      	ldrh	r1, [r0, #2]
90024ac8:	f1be 0f00 	cmp.w	lr, #0
90024acc:	d00b      	beq.n	90024ae6 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
90024ace:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
90024ad2:	3b01      	subs	r3, #1
90024ad4:	005b      	lsls	r3, r3, #1
90024ad6:	3302      	adds	r3, #2
90024ad8:	eb00 0b03 	add.w	fp, r0, r3
90024adc:	5ac3      	ldrh	r3, [r0, r3]
90024ade:	930a      	str	r3, [sp, #40]	; 0x28
90024ae0:	f8bb 3002 	ldrh.w	r3, [fp, #2]
90024ae4:	930b      	str	r3, [sp, #44]	; 0x2c
90024ae6:	ea4f 400c 	mov.w	r0, ip, lsl #16
90024aea:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
90024aee:	fb12 f30e 	smulbb	r3, r2, lr
90024af2:	ea4f 4b01 	mov.w	fp, r1, lsl #16
90024af6:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
90024afa:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
90024afe:	10db      	asrs	r3, r3, #3
90024b00:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024b04:	ea40 000c 	orr.w	r0, r0, ip
90024b08:	f1ce 0c10 	rsb	ip, lr, #16
90024b0c:	ea4b 0101 	orr.w	r1, fp, r1
90024b10:	f109 39ff 	add.w	r9, r9, #4294967295
90024b14:	ebac 0c02 	sub.w	ip, ip, r2
90024b18:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
90024b1c:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
90024b20:	4351      	muls	r1, r2
90024b22:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90024b24:	fb0c 1c00 	mla	ip, ip, r0, r1
90024b28:	990a      	ldr	r1, [sp, #40]	; 0x28
90024b2a:	ea4f 4b02 	mov.w	fp, r2, lsl #16
90024b2e:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
90024b32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90024b34:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
90024b38:	0412      	lsls	r2, r2, #16
90024b3a:	ea4b 0000 	orr.w	r0, fp, r0
90024b3e:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
90024b42:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
90024b46:	fb03 c000 	mla	r0, r3, r0, ip
90024b4a:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
90024b4e:	ea42 0b0b 	orr.w	fp, r2, fp
90024b52:	fb03 000b 	mla	r0, r3, fp, r0
90024b56:	0d43      	lsrs	r3, r0, #21
90024b58:	0940      	lsrs	r0, r0, #5
90024b5a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90024b5e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
90024b62:	4318      	orrs	r0, r3
90024b64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
90024b66:	441c      	add	r4, r3
90024b68:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90024b6a:	f82a 0b02 	strh.w	r0, [sl], #2
90024b6e:	441e      	add	r6, r3
90024b70:	e73b      	b.n	900249ea <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
90024b72:	b00f      	add	sp, #60	; 0x3c
90024b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90024b78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
90024b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024b7c:	b085      	sub	sp, #20
90024b7e:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
90024b82:	9102      	str	r1, [sp, #8]
90024b84:	2c00      	cmp	r4, #0
90024b86:	fb04 7103 	mla	r1, r4, r3, r7
90024b8a:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90024b8e:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
90024b92:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
90024b96:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90024b9a:	f2c0 811b 	blt.w	90024dd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024b9e:	45a6      	cmp	lr, r4
90024ba0:	f340 8118 	ble.w	90024dd4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
90024ba4:	2f00      	cmp	r7, #0
90024ba6:	f2c0 8113 	blt.w	90024dd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024baa:	42bb      	cmp	r3, r7
90024bac:	f340 8110 	ble.w	90024dd0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
90024bb0:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
90024bb4:	1c7a      	adds	r2, r7, #1
90024bb6:	f100 8110 	bmi.w	90024dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024bba:	4293      	cmp	r3, r2
90024bbc:	f340 810d 	ble.w	90024dda <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
90024bc0:	2e00      	cmp	r6, #0
90024bc2:	f000 810c 	beq.w	90024dde <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
90024bc6:	f8dc 1004 	ldr.w	r1, [ip, #4]
90024bca:	3401      	adds	r4, #1
90024bcc:	f100 810b 	bmi.w	90024de6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024bd0:	45a6      	cmp	lr, r4
90024bd2:	f340 8108 	ble.w	90024de6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
90024bd6:	2800      	cmp	r0, #0
90024bd8:	f000 8108 	beq.w	90024dec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
90024bdc:	2f00      	cmp	r7, #0
90024bde:	f2c0 8100 	blt.w	90024de2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024be2:	42bb      	cmp	r3, r7
90024be4:	f340 80fd 	ble.w	90024de2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
90024be8:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
90024bec:	3701      	adds	r7, #1
90024bee:	f100 8100 	bmi.w	90024df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024bf2:	42bb      	cmp	r3, r7
90024bf4:	f340 80fd 	ble.w	90024df2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
90024bf8:	2e00      	cmp	r6, #0
90024bfa:	f000 80fc 	beq.w	90024df6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
90024bfe:	3301      	adds	r3, #1
90024c00:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
90024c04:	b2b6      	uxth	r6, r6
90024c06:	b280      	uxth	r0, r0
90024c08:	ea4f 6a11 	mov.w	sl, r1, lsr #24
90024c0c:	fb00 fe06 	mul.w	lr, r0, r6
90024c10:	0136      	lsls	r6, r6, #4
90024c12:	ea4f 6b15 	mov.w	fp, r5, lsr #24
90024c16:	ebce 1000 	rsb	r0, lr, r0, lsl #4
90024c1a:	eba6 070e 	sub.w	r7, r6, lr
90024c1e:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
90024c22:	ea4f 6914 	mov.w	r9, r4, lsr #24
90024c26:	b280      	uxth	r0, r0
90024c28:	b2bf      	uxth	r7, r7
90024c2a:	1a1b      	subs	r3, r3, r0
90024c2c:	ea4f 6812 	mov.w	r8, r2, lsr #24
90024c30:	fb0a f607 	mul.w	r6, sl, r7
90024c34:	b29b      	uxth	r3, r3
90024c36:	fb0b 6603 	mla	r6, fp, r3, r6
90024c3a:	fb00 6609 	mla	r6, r0, r9, r6
90024c3e:	fb0e 6608 	mla	r6, lr, r8, r6
90024c42:	f3c6 2607 	ubfx	r6, r6, #8, #8
90024c46:	9600      	str	r6, [sp, #0]
90024c48:	2e00      	cmp	r6, #0
90024c4a:	f000 80be 	beq.w	90024dca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
90024c4e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90024c52:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
90024c56:	9e02      	ldr	r6, [sp, #8]
90024c58:	fb0b fc0c 	mul.w	ip, fp, ip
90024c5c:	fb0b f505 	mul.w	r5, fp, r5
90024c60:	8836      	ldrh	r6, [r6, #0]
90024c62:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
90024c66:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024c6a:	9501      	str	r5, [sp, #4]
90024c6c:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90024c70:	44dc      	add	ip, fp
90024c72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024c76:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90024c7a:	9503      	str	r5, [sp, #12]
90024c7c:	9d01      	ldr	r5, [sp, #4]
90024c7e:	f505 7c80 	add.w	ip, r5, #256	; 0x100
90024c82:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
90024c86:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90024c8a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024c8e:	fb0a fc0c 	mul.w	ip, sl, ip
90024c92:	ea4f 2b15 	mov.w	fp, r5, lsr #8
90024c96:	fb0a fa01 	mul.w	sl, sl, r1
90024c9a:	ea4f 251c 	mov.w	r5, ip, lsr #8
90024c9e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024ca2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
90024ca6:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024caa:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90024cae:	4465      	add	r5, ip
90024cb0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
90024cb4:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90024cb8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024cbc:	fb09 fc0c 	mul.w	ip, r9, ip
90024cc0:	0a2d      	lsrs	r5, r5, #8
90024cc2:	fb09 f904 	mul.w	r9, r9, r4
90024cc6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024cca:	ea4f 211c 	mov.w	r1, ip, lsr #8
90024cce:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90024cd2:	f509 7480 	add.w	r4, r9, #256	; 0x100
90024cd6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90024cda:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024cde:	437d      	muls	r5, r7
90024ce0:	eb04 2919 	add.w	r9, r4, r9, lsr #8
90024ce4:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
90024ce8:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024cec:	4461      	add	r1, ip
90024cee:	fb08 f404 	mul.w	r4, r8, r4
90024cf2:	ea4f 2919 	mov.w	r9, r9, lsr #8
90024cf6:	fb08 f802 	mul.w	r8, r8, r2
90024cfa:	0a09      	lsrs	r1, r1, #8
90024cfc:	0a22      	lsrs	r2, r4, #8
90024cfe:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
90024d02:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90024d06:	fb07 f70a 	mul.w	r7, r7, sl
90024d0a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024d0e:	4414      	add	r4, r2
90024d10:	f508 7280 	add.w	r2, r8, #256	; 0x100
90024d14:	0a24      	lsrs	r4, r4, #8
90024d16:	eb02 2818 	add.w	r8, r2, r8, lsr #8
90024d1a:	9a03      	ldr	r2, [sp, #12]
90024d1c:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
90024d20:	fb02 5503 	mla	r5, r2, r3, r5
90024d24:	ea4f 2818 	mov.w	r8, r8, lsr #8
90024d28:	9a00      	ldr	r2, [sp, #0]
90024d2a:	fb04 540e 	mla	r4, r4, lr, r5
90024d2e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
90024d32:	1235      	asrs	r5, r6, #8
90024d34:	fb01 4100 	mla	r1, r1, r0, r4
90024d38:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
90024d3c:	0a09      	lsrs	r1, r1, #8
90024d3e:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
90024d42:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
90024d46:	fb03 7101 	mla	r1, r3, r1, r7
90024d4a:	fb0e 1e08 	mla	lr, lr, r8, r1
90024d4e:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90024d52:	fb00 e101 	mla	r1, r0, r1, lr
90024d56:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
90024d5a:	b287      	uxth	r7, r0
90024d5c:	0a09      	lsrs	r1, r1, #8
90024d5e:	437a      	muls	r2, r7
90024d60:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90024d64:	1c53      	adds	r3, r2, #1
90024d66:	4321      	orrs	r1, r4
90024d68:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90024d6c:	0c0a      	lsrs	r2, r1, #16
90024d6e:	f3c1 2407 	ubfx	r4, r1, #8, #8
90024d72:	ea6f 2313 	mvn.w	r3, r3, lsr #8
90024d76:	b2c8      	uxtb	r0, r1
90024d78:	fb12 f207 	smulbb	r2, r2, r7
90024d7c:	fb14 f407 	smulbb	r4, r4, r7
90024d80:	b2db      	uxtb	r3, r3
90024d82:	fb10 f007 	smulbb	r0, r0, r7
90024d86:	fb05 2503 	mla	r5, r5, r3, r2
90024d8a:	10f2      	asrs	r2, r6, #3
90024d8c:	00f6      	lsls	r6, r6, #3
90024d8e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90024d92:	b2ad      	uxth	r5, r5
90024d94:	b2f6      	uxtb	r6, r6
90024d96:	fb02 4203 	mla	r2, r2, r3, r4
90024d9a:	fb06 0303 	mla	r3, r6, r3, r0
90024d9e:	b294      	uxth	r4, r2
90024da0:	b299      	uxth	r1, r3
90024da2:	1c6b      	adds	r3, r5, #1
90024da4:	1c62      	adds	r2, r4, #1
90024da6:	eb03 2515 	add.w	r5, r3, r5, lsr #8
90024daa:	1c4b      	adds	r3, r1, #1
90024dac:	eb02 2214 	add.w	r2, r2, r4, lsr #8
90024db0:	eb03 2311 	add.w	r3, r3, r1, lsr #8
90024db4:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
90024db8:	0952      	lsrs	r2, r2, #5
90024dba:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90024dbe:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90024dc2:	432b      	orrs	r3, r5
90024dc4:	4313      	orrs	r3, r2
90024dc6:	9a02      	ldr	r2, [sp, #8]
90024dc8:	8013      	strh	r3, [r2, #0]
90024dca:	b005      	add	sp, #20
90024dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90024dd0:	2500      	movs	r5, #0
90024dd2:	e6ef      	b.n	90024bb4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
90024dd4:	2100      	movs	r1, #0
90024dd6:	460d      	mov	r5, r1
90024dd8:	e6f7      	b.n	90024bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024dda:	2100      	movs	r1, #0
90024ddc:	e6f5      	b.n	90024bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024dde:	4631      	mov	r1, r6
90024de0:	e6f3      	b.n	90024bca <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
90024de2:	2400      	movs	r4, #0
90024de4:	e702      	b.n	90024bec <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
90024de6:	2200      	movs	r2, #0
90024de8:	4614      	mov	r4, r2
90024dea:	e70b      	b.n	90024c04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024dec:	4602      	mov	r2, r0
90024dee:	4604      	mov	r4, r0
90024df0:	e708      	b.n	90024c04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024df2:	2200      	movs	r2, #0
90024df4:	e706      	b.n	90024c04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
90024df6:	4632      	mov	r2, r6
90024df8:	e704      	b.n	90024c04 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

90024dfa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90024dfa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90024dfe:	b09d      	sub	sp, #116	; 0x74
90024e00:	9219      	str	r2, [sp, #100]	; 0x64
90024e02:	9307      	str	r3, [sp, #28]
90024e04:	9a2b      	ldr	r2, [sp, #172]	; 0xac
90024e06:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
90024e0a:	901b      	str	r0, [sp, #108]	; 0x6c
90024e0c:	931a      	str	r3, [sp, #104]	; 0x68
90024e0e:	6850      	ldr	r0, [r2, #4]
90024e10:	9117      	str	r1, [sp, #92]	; 0x5c
90024e12:	6812      	ldr	r2, [r2, #0]
90024e14:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
90024e18:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
90024e1c:	fb00 1303 	mla	r3, r0, r3, r1
90024e20:	eb02 0343 	add.w	r3, r2, r3, lsl #1
90024e24:	930a      	str	r3, [sp, #40]	; 0x28
90024e26:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024e28:	681b      	ldr	r3, [r3, #0]
90024e2a:	9310      	str	r3, [sp, #64]	; 0x40
90024e2c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
90024e30:	930b      	str	r3, [sp, #44]	; 0x2c
90024e32:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90024e34:	2b00      	cmp	r3, #0
90024e36:	dc03      	bgt.n	90024e40 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
90024e38:	9b19      	ldr	r3, [sp, #100]	; 0x64
90024e3a:	2b00      	cmp	r3, #0
90024e3c:	f340 8375 	ble.w	9002552a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
90024e40:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024e42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90024e46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90024e4a:	1e48      	subs	r0, r1, #1
90024e4c:	1e57      	subs	r7, r2, #1
90024e4e:	9b07      	ldr	r3, [sp, #28]
90024e50:	2b00      	cmp	r3, #0
90024e52:	f340 818e 	ble.w	90025172 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
90024e56:	ea5f 4c24 	movs.w	ip, r4, asr #16
90024e5a:	ea4f 4326 	mov.w	r3, r6, asr #16
90024e5e:	d406      	bmi.n	90024e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024e60:	4584      	cmp	ip, r0
90024e62:	da04      	bge.n	90024e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024e64:	2b00      	cmp	r3, #0
90024e66:	db02      	blt.n	90024e6e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
90024e68:	42bb      	cmp	r3, r7
90024e6a:	f2c0 8183 	blt.w	90025174 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
90024e6e:	f11c 0c01 	adds.w	ip, ip, #1
90024e72:	f100 8173 	bmi.w	9002515c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024e76:	4561      	cmp	r1, ip
90024e78:	f2c0 8170 	blt.w	9002515c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024e7c:	3301      	adds	r3, #1
90024e7e:	f100 816d 	bmi.w	9002515c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024e82:	429a      	cmp	r2, r3
90024e84:	f2c0 816a 	blt.w	9002515c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
90024e88:	9b07      	ldr	r3, [sp, #28]
90024e8a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
90024e8c:	9318      	str	r3, [sp, #96]	; 0x60
90024e8e:	9b18      	ldr	r3, [sp, #96]	; 0x60
90024e90:	2b00      	cmp	r3, #0
90024e92:	f340 818c 	ble.w	900251ae <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
90024e96:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
90024e98:	ea4f 4c26 	mov.w	ip, r6, asr #16
90024e9c:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
90024e9e:	f3c4 3003 	ubfx	r0, r4, #12, #4
90024ea2:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90024ea6:	1422      	asrs	r2, r4, #16
90024ea8:	f3c6 3103 	ubfx	r1, r6, #12, #4
90024eac:	689b      	ldr	r3, [r3, #8]
90024eae:	f100 81cd 	bmi.w	9002524c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024eb2:	f103 38ff 	add.w	r8, r3, #4294967295
90024eb6:	4542      	cmp	r2, r8
90024eb8:	f280 81c8 	bge.w	9002524c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024ebc:	f1bc 0f00 	cmp.w	ip, #0
90024ec0:	f2c0 81c4 	blt.w	9002524c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024ec4:	f10e 38ff 	add.w	r8, lr, #4294967295
90024ec8:	45c4      	cmp	ip, r8
90024eca:	f280 81bf 	bge.w	9002524c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
90024ece:	b21b      	sxth	r3, r3
90024ed0:	9d10      	ldr	r5, [sp, #64]	; 0x40
90024ed2:	fb0c 2203 	mla	r2, ip, r3, r2
90024ed6:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90024eda:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
90024ede:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90024ee2:	2800      	cmp	r0, #0
90024ee4:	f000 81a9 	beq.w	9002523a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
90024ee8:	f8d8 5004 	ldr.w	r5, [r8, #4]
90024eec:	950c      	str	r5, [sp, #48]	; 0x30
90024eee:	0e2d      	lsrs	r5, r5, #24
90024ef0:	9513      	str	r5, [sp, #76]	; 0x4c
90024ef2:	b181      	cbz	r1, 90024f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90024ef4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90024ef8:	3b01      	subs	r3, #1
90024efa:	009b      	lsls	r3, r3, #2
90024efc:	3304      	adds	r3, #4
90024efe:	eb08 0c03 	add.w	ip, r8, r3
90024f02:	f858 3003 	ldr.w	r3, [r8, r3]
90024f06:	9308      	str	r3, [sp, #32]
90024f08:	0e1b      	lsrs	r3, r3, #24
90024f0a:	9311      	str	r3, [sp, #68]	; 0x44
90024f0c:	f8dc 3004 	ldr.w	r3, [ip, #4]
90024f10:	930d      	str	r3, [sp, #52]	; 0x34
90024f12:	0e1b      	lsrs	r3, r3, #24
90024f14:	9314      	str	r3, [sp, #80]	; 0x50
90024f16:	b280      	uxth	r0, r0
90024f18:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024f1a:	b289      	uxth	r1, r1
90024f1c:	fb00 f901 	mul.w	r9, r0, r1
90024f20:	0100      	lsls	r0, r0, #4
90024f22:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
90024f26:	eba0 0809 	sub.w	r8, r0, r9
90024f2a:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
90024f2e:	9813      	ldr	r0, [sp, #76]	; 0x4c
90024f30:	b289      	uxth	r1, r1
90024f32:	fa1f f888 	uxth.w	r8, r8
90024f36:	1a5b      	subs	r3, r3, r1
90024f38:	fb08 f000 	mul.w	r0, r8, r0
90024f3c:	b29b      	uxth	r3, r3
90024f3e:	fb03 000e 	mla	r0, r3, lr, r0
90024f42:	fb01 0005 	mla	r0, r1, r5, r0
90024f46:	9d14      	ldr	r5, [sp, #80]	; 0x50
90024f48:	fb09 0005 	mla	r0, r9, r5, r0
90024f4c:	f3c0 2007 	ubfx	r0, r0, #8, #8
90024f50:	2800      	cmp	r0, #0
90024f52:	f000 80fa 	beq.w	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90024f56:	f1be 0fff 	cmp.w	lr, #255	; 0xff
90024f5a:	d01b      	beq.n	90024f94 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
90024f5c:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
90024f60:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90024f64:	fb0e fa0a 	mul.w	sl, lr, sl
90024f68:	fb0e fe02 	mul.w	lr, lr, r2
90024f6c:	ea4f 221a 	mov.w	r2, sl, lsr #8
90024f70:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90024f74:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90024f78:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024f7c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
90024f80:	4452      	add	r2, sl
90024f82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90024f86:	0a12      	lsrs	r2, r2, #8
90024f88:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90024f8c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
90024f90:	ea42 020c 	orr.w	r2, r2, ip
90024f94:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024f96:	2dff      	cmp	r5, #255	; 0xff
90024f98:	d021      	beq.n	90024fde <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
90024f9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024f9c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024fa0:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024fa2:	fb05 fb0b 	mul.w	fp, r5, fp
90024fa6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90024fa8:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024fac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
90024fae:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024fb2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90024fb6:	fb05 fa0a 	mul.w	sl, r5, sl
90024fba:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024fbe:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90024fc2:	44de      	add	lr, fp
90024fc4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90024fc8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90024fcc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90024fd0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90024fd4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90024fd8:	ea4e 050a 	orr.w	r5, lr, sl
90024fdc:	950c      	str	r5, [sp, #48]	; 0x30
90024fde:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024fe0:	2dff      	cmp	r5, #255	; 0xff
90024fe2:	d021      	beq.n	90025028 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
90024fe4:	9d08      	ldr	r5, [sp, #32]
90024fe6:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90024fea:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024fec:	fb05 fb0b 	mul.w	fp, r5, fp
90024ff0:	9d08      	ldr	r5, [sp, #32]
90024ff2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90024ff6:	9d11      	ldr	r5, [sp, #68]	; 0x44
90024ff8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90024ffc:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025000:	fb05 fa0a 	mul.w	sl, r5, sl
90025004:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025008:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002500c:	44de      	add	lr, fp
9002500e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025012:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025016:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002501a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002501e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025022:	ea4e 050a 	orr.w	r5, lr, sl
90025026:	9508      	str	r5, [sp, #32]
90025028:	9d14      	ldr	r5, [sp, #80]	; 0x50
9002502a:	2dff      	cmp	r5, #255	; 0xff
9002502c:	d021      	beq.n	90025072 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
9002502e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025030:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025034:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025036:	fb05 fb0b 	mul.w	fp, r5, fp
9002503a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
9002503c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025040:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025042:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025046:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
9002504a:	fb05 fa0a 	mul.w	sl, r5, sl
9002504e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025052:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025056:	44de      	add	lr, fp
90025058:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
9002505c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
90025060:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025064:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025068:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
9002506c:	ea4e 050a 	orr.w	r5, lr, sl
90025070:	950d      	str	r5, [sp, #52]	; 0x34
90025072:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025074:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025078:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
9002507c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025080:	9d08      	ldr	r5, [sp, #32]
90025082:	fb08 fc0c 	mul.w	ip, r8, ip
90025086:	fb03 cc0e 	mla	ip, r3, lr, ip
9002508a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
9002508e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025090:	fb01 cc0e 	mla	ip, r1, lr, ip
90025094:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025098:	9d0c      	ldr	r5, [sp, #48]	; 0x30
9002509a:	fb09 cc0e 	mla	ip, r9, lr, ip
9002509e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
900250a2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
900250a4:	fb08 f80e 	mul.w	r8, r8, lr
900250a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900250ac:	fb03 8202 	mla	r2, r3, r2, r8
900250b0:	9b08      	ldr	r3, [sp, #32]
900250b2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900250b6:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
900250ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900250bc:	fb01 220a 	mla	r2, r1, sl, r2
900250c0:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
900250c4:	883b      	ldrh	r3, [r7, #0]
900250c6:	fb09 2901 	mla	r9, r9, r1, r2
900250ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
900250cc:	1219      	asrs	r1, r3, #8
900250ce:	4342      	muls	r2, r0
900250d0:	ea4f 2919 	mov.w	r9, r9, lsr #8
900250d4:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
900250d8:	1c50      	adds	r0, r2, #1
900250da:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
900250de:	eb00 2012 	add.w	r0, r0, r2, lsr #8
900250e2:	ea4c 0c09 	orr.w	ip, ip, r9
900250e6:	ea6f 2010 	mvn.w	r0, r0, lsr #8
900250ea:	ea4f 421c 	mov.w	r2, ip, lsr #16
900250ee:	f3cc 2e07 	ubfx	lr, ip, #8, #8
900250f2:	fa5f fc8c 	uxtb.w	ip, ip
900250f6:	fb12 f205 	smulbb	r2, r2, r5
900250fa:	b2c0      	uxtb	r0, r0
900250fc:	fb1c fc05 	smulbb	ip, ip, r5
90025100:	fb01 2100 	mla	r1, r1, r0, r2
90025104:	10da      	asrs	r2, r3, #3
90025106:	fb1e fe05 	smulbb	lr, lr, r5
9002510a:	00db      	lsls	r3, r3, #3
9002510c:	b289      	uxth	r1, r1
9002510e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90025112:	b2db      	uxtb	r3, r3
90025114:	fb02 e200 	mla	r2, r2, r0, lr
90025118:	fb03 c300 	mla	r3, r3, r0, ip
9002511c:	b292      	uxth	r2, r2
9002511e:	fa1f fc83 	uxth.w	ip, r3
90025122:	1c4b      	adds	r3, r1, #1
90025124:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90025128:	f10c 0301 	add.w	r3, ip, #1
9002512c:	eb03 231c 	add.w	r3, r3, ip, lsr #8
90025130:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90025134:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90025138:	430b      	orrs	r3, r1
9002513a:	1c51      	adds	r1, r2, #1
9002513c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025140:	0952      	lsrs	r2, r2, #5
90025142:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025146:	4313      	orrs	r3, r2
90025148:	803b      	strh	r3, [r7, #0]
9002514a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002514c:	3702      	adds	r7, #2
9002514e:	441c      	add	r4, r3
90025150:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025152:	441e      	add	r6, r3
90025154:	9b18      	ldr	r3, [sp, #96]	; 0x60
90025156:	3b01      	subs	r3, #1
90025158:	9318      	str	r3, [sp, #96]	; 0x60
9002515a:	e698      	b.n	90024e8e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
9002515c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
9002515e:	441c      	add	r4, r3
90025160:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025162:	441e      	add	r6, r3
90025164:	9b07      	ldr	r3, [sp, #28]
90025166:	3b01      	subs	r3, #1
90025168:	9307      	str	r3, [sp, #28]
9002516a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
9002516c:	3302      	adds	r3, #2
9002516e:	930a      	str	r3, [sp, #40]	; 0x28
90025170:	e66d      	b.n	90024e4e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
90025172:	d023      	beq.n	900251bc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
90025174:	9b07      	ldr	r3, [sp, #28]
90025176:	9829      	ldr	r0, [sp, #164]	; 0xa4
90025178:	3b01      	subs	r3, #1
9002517a:	fb00 4003 	mla	r0, r0, r3, r4
9002517e:	1400      	asrs	r0, r0, #16
90025180:	f53f ae82 	bmi.w	90024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025184:	3901      	subs	r1, #1
90025186:	4288      	cmp	r0, r1
90025188:	f6bf ae7e 	bge.w	90024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
9002518c:	992a      	ldr	r1, [sp, #168]	; 0xa8
9002518e:	fb01 6303 	mla	r3, r1, r3, r6
90025192:	141b      	asrs	r3, r3, #16
90025194:	f53f ae78 	bmi.w	90024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
90025198:	3a01      	subs	r2, #1
9002519a:	4293      	cmp	r3, r2
9002519c:	f6bf ae74 	bge.w	90024e88 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
900251a0:	f8dd b01c 	ldr.w	fp, [sp, #28]
900251a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
900251a8:	f1bb 0f00 	cmp.w	fp, #0
900251ac:	dc6c      	bgt.n	90025288 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
900251ae:	9b07      	ldr	r3, [sp, #28]
900251b0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900251b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
900251b6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
900251ba:	930a      	str	r3, [sp, #40]	; 0x28
900251bc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
900251be:	2b00      	cmp	r3, #0
900251c0:	f340 81b3 	ble.w	9002552a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
900251c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900251c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
900251ca:	ee30 0a04 	vadd.f32	s0, s0, s8
900251ce:	ee70 0aa4 	vadd.f32	s1, s1, s9
900251d2:	eef0 6a62 	vmov.f32	s13, s5
900251d6:	eec7 7a00 	vdiv.f32	s15, s14, s0
900251da:	ee31 1a05 	vadd.f32	s2, s2, s10
900251de:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900251e2:	ee16 4a90 	vmov	r4, s13
900251e6:	eef0 6a43 	vmov.f32	s13, s6
900251ea:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900251ee:	ee16 6a90 	vmov	r6, s13
900251f2:	ee20 7aa7 	vmul.f32	s14, s1, s15
900251f6:	ee61 7a27 	vmul.f32	s15, s2, s15
900251fa:	ee77 2a62 	vsub.f32	s5, s14, s5
900251fe:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025202:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025206:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002520a:	ee12 2a90 	vmov	r2, s5
9002520e:	eef0 2a47 	vmov.f32	s5, s14
90025212:	fb92 f3f3 	sdiv	r3, r2, r3
90025216:	ee13 2a10 	vmov	r2, s6
9002521a:	9329      	str	r3, [sp, #164]	; 0xa4
9002521c:	9b26      	ldr	r3, [sp, #152]	; 0x98
9002521e:	eeb0 3a67 	vmov.f32	s6, s15
90025222:	fb92 f3f3 	sdiv	r3, r2, r3
90025226:	932a      	str	r3, [sp, #168]	; 0xa8
90025228:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002522a:	9a19      	ldr	r2, [sp, #100]	; 0x64
9002522c:	3b01      	subs	r3, #1
9002522e:	9317      	str	r3, [sp, #92]	; 0x5c
90025230:	9b26      	ldr	r3, [sp, #152]	; 0x98
90025232:	bf08      	it	eq
90025234:	4613      	moveq	r3, r2
90025236:	9307      	str	r3, [sp, #28]
90025238:	e5fb      	b.n	90024e32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
9002523a:	2900      	cmp	r1, #0
9002523c:	f43f ae6b 	beq.w	90024f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
90025240:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025244:	9308      	str	r3, [sp, #32]
90025246:	0e1b      	lsrs	r3, r3, #24
90025248:	9311      	str	r3, [sp, #68]	; 0x44
9002524a:	e664      	b.n	90024f16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
9002524c:	f112 0801 	adds.w	r8, r2, #1
90025250:	f53f af7b 	bmi.w	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025254:	4543      	cmp	r3, r8
90025256:	f6ff af78 	blt.w	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
9002525a:	f11c 0801 	adds.w	r8, ip, #1
9002525e:	f53f af74 	bmi.w	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025262:	45c6      	cmp	lr, r8
90025264:	f6ff af71 	blt.w	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025268:	9d1a      	ldr	r5, [sp, #104]	; 0x68
9002526a:	b21b      	sxth	r3, r3
9002526c:	9201      	str	r2, [sp, #4]
9002526e:	fa0f f28e 	sxth.w	r2, lr
90025272:	e9cd 1504 	strd	r1, r5, [sp, #16]
90025276:	e9cd c002 	strd	ip, r0, [sp, #8]
9002527a:	9200      	str	r2, [sp, #0]
9002527c:	4639      	mov	r1, r7
9002527e:	9a10      	ldr	r2, [sp, #64]	; 0x40
90025280:	981b      	ldr	r0, [sp, #108]	; 0x6c
90025282:	f7ff fc79 	bl	90024b78 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
90025286:	e760      	b.n	9002514a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
90025288:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
9002528a:	1427      	asrs	r7, r4, #16
9002528c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002528e:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025292:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90025296:	1433      	asrs	r3, r6, #16
90025298:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002529c:	fb01 7303 	mla	r3, r1, r3, r7
900252a0:	eb05 0783 	add.w	r7, r5, r3, lsl #2
900252a4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
900252a8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
900252ac:	2a00      	cmp	r2, #0
900252ae:	f000 8133 	beq.w	90025518 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
900252b2:	687d      	ldr	r5, [r7, #4]
900252b4:	950e      	str	r5, [sp, #56]	; 0x38
900252b6:	0e2d      	lsrs	r5, r5, #24
900252b8:	9515      	str	r5, [sp, #84]	; 0x54
900252ba:	b178      	cbz	r0, 900252dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
900252bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
900252c0:	3901      	subs	r1, #1
900252c2:	0089      	lsls	r1, r1, #2
900252c4:	3104      	adds	r1, #4
900252c6:	eb07 0e01 	add.w	lr, r7, r1
900252ca:	5879      	ldr	r1, [r7, r1]
900252cc:	9109      	str	r1, [sp, #36]	; 0x24
900252ce:	0e09      	lsrs	r1, r1, #24
900252d0:	9112      	str	r1, [sp, #72]	; 0x48
900252d2:	f8de 1004 	ldr.w	r1, [lr, #4]
900252d6:	910f      	str	r1, [sp, #60]	; 0x3c
900252d8:	0e09      	lsrs	r1, r1, #24
900252da:	9116      	str	r1, [sp, #88]	; 0x58
900252dc:	b292      	uxth	r2, r2
900252de:	9915      	ldr	r1, [sp, #84]	; 0x54
900252e0:	b280      	uxth	r0, r0
900252e2:	9d12      	ldr	r5, [sp, #72]	; 0x48
900252e4:	fb02 f800 	mul.w	r8, r2, r0
900252e8:	0112      	lsls	r2, r2, #4
900252ea:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
900252ee:	eba2 0e08 	sub.w	lr, r2, r8
900252f2:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
900252f6:	b280      	uxth	r0, r0
900252f8:	fa1f fe8e 	uxth.w	lr, lr
900252fc:	1a12      	subs	r2, r2, r0
900252fe:	fb0e f101 	mul.w	r1, lr, r1
90025302:	b292      	uxth	r2, r2
90025304:	fb02 110c 	mla	r1, r2, ip, r1
90025308:	fb00 1105 	mla	r1, r0, r5, r1
9002530c:	9d16      	ldr	r5, [sp, #88]	; 0x58
9002530e:	fb08 1105 	mla	r1, r8, r5, r1
90025312:	f3c1 2107 	ubfx	r1, r1, #8, #8
90025316:	2900      	cmp	r1, #0
90025318:	f000 80f5 	beq.w	90025506 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
9002531c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90025320:	d019      	beq.n	90025356 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
90025322:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025326:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
9002532a:	fb0c fa0a 	mul.w	sl, ip, sl
9002532e:	fb0c fc03 	mul.w	ip, ip, r3
90025332:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025336:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
9002533a:	f50c 7780 	add.w	r7, ip, #256	; 0x100
9002533e:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025342:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025346:	4453      	add	r3, sl
90025348:	0a3f      	lsrs	r7, r7, #8
9002534a:	0a1b      	lsrs	r3, r3, #8
9002534c:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90025350:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025354:	433b      	orrs	r3, r7
90025356:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025358:	2dff      	cmp	r5, #255	; 0xff
9002535a:	d020      	beq.n	9002539e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
9002535c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
9002535e:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025362:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025364:	436f      	muls	r7, r5
90025366:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025368:	ea4f 2c17 	mov.w	ip, r7, lsr #8
9002536c:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025370:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025372:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025376:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002537a:	fb05 fa0a 	mul.w	sl, r5, sl
9002537e:	44bc      	add	ip, r7
90025380:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025388:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002538c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025394:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025398:	ea4c 050a 	orr.w	r5, ip, sl
9002539c:	950e      	str	r5, [sp, #56]	; 0x38
9002539e:	9d12      	ldr	r5, [sp, #72]	; 0x48
900253a0:	2dff      	cmp	r5, #255	; 0xff
900253a2:	d020      	beq.n	900253e6 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
900253a4:	9d09      	ldr	r5, [sp, #36]	; 0x24
900253a6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900253aa:	9d12      	ldr	r5, [sp, #72]	; 0x48
900253ac:	436f      	muls	r7, r5
900253ae:	9d09      	ldr	r5, [sp, #36]	; 0x24
900253b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900253b4:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900253b8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900253ba:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
900253be:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900253c2:	fb05 fa0a 	mul.w	sl, r5, sl
900253c6:	44bc      	add	ip, r7
900253c8:	f50a 7780 	add.w	r7, sl, #256	; 0x100
900253cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
900253d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
900253d4:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
900253d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900253dc:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900253e0:	ea4c 050a 	orr.w	r5, ip, sl
900253e4:	9509      	str	r5, [sp, #36]	; 0x24
900253e6:	9d16      	ldr	r5, [sp, #88]	; 0x58
900253e8:	2dff      	cmp	r5, #255	; 0xff
900253ea:	d020      	beq.n	9002542e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
900253ec:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900253ee:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
900253f2:	9d16      	ldr	r5, [sp, #88]	; 0x58
900253f4:	436f      	muls	r7, r5
900253f6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
900253f8:	ea4f 2c17 	mov.w	ip, r7, lsr #8
900253fc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025400:	9d16      	ldr	r5, [sp, #88]	; 0x58
90025402:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025406:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
9002540a:	fb05 fa0a 	mul.w	sl, r5, sl
9002540e:	44bc      	add	ip, r7
90025410:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025414:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025418:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
9002541c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025420:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025424:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025428:	ea4c 050a 	orr.w	r5, ip, sl
9002542c:	950f      	str	r5, [sp, #60]	; 0x3c
9002542e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025430:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025434:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025438:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
9002543c:	9d09      	ldr	r5, [sp, #36]	; 0x24
9002543e:	fb0e f707 	mul.w	r7, lr, r7
90025442:	fb02 770c 	mla	r7, r2, ip, r7
90025446:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002544a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
9002544c:	fb00 770c 	mla	r7, r0, ip, r7
90025450:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025454:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025456:	fb08 770c 	mla	r7, r8, ip, r7
9002545a:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
9002545e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025460:	fb0e fe0c 	mul.w	lr, lr, ip
90025464:	0a3f      	lsrs	r7, r7, #8
90025466:	fb02 e303 	mla	r3, r2, r3, lr
9002546a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002546c:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025470:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
90025474:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025476:	fb00 330a 	mla	r3, r0, sl, r3
9002547a:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
9002547e:	f8b9 0000 	ldrh.w	r0, [r9]
90025482:	fb08 3c0c 	mla	ip, r8, ip, r3
90025486:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
90025488:	1202      	asrs	r2, r0, #8
9002548a:	4359      	muls	r1, r3
9002548c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025490:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
90025494:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025498:	1c4b      	adds	r3, r1, #1
9002549a:	ea47 070c 	orr.w	r7, r7, ip
9002549e:	eb03 2111 	add.w	r1, r3, r1, lsr #8
900254a2:	0c3b      	lsrs	r3, r7, #16
900254a4:	ea6f 2111 	mvn.w	r1, r1, lsr #8
900254a8:	f3c7 2c07 	ubfx	ip, r7, #8, #8
900254ac:	b2ff      	uxtb	r7, r7
900254ae:	fb13 f305 	smulbb	r3, r3, r5
900254b2:	b2c9      	uxtb	r1, r1
900254b4:	fb17 f705 	smulbb	r7, r7, r5
900254b8:	fb02 3201 	mla	r2, r2, r1, r3
900254bc:	10c3      	asrs	r3, r0, #3
900254be:	fb1c fc05 	smulbb	ip, ip, r5
900254c2:	00c0      	lsls	r0, r0, #3
900254c4:	b292      	uxth	r2, r2
900254c6:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
900254ca:	b2c0      	uxtb	r0, r0
900254cc:	fb03 c301 	mla	r3, r3, r1, ip
900254d0:	fb00 7001 	mla	r0, r0, r1, r7
900254d4:	1c51      	adds	r1, r2, #1
900254d6:	b29b      	uxth	r3, r3
900254d8:	b280      	uxth	r0, r0
900254da:	eb01 2212 	add.w	r2, r1, r2, lsr #8
900254de:	f100 0c01 	add.w	ip, r0, #1
900254e2:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
900254e6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
900254ea:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
900254ee:	ea4c 0202 	orr.w	r2, ip, r2
900254f2:	f103 0c01 	add.w	ip, r3, #1
900254f6:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
900254fa:	095b      	lsrs	r3, r3, #5
900254fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025500:	431a      	orrs	r2, r3
90025502:	f8a9 2000 	strh.w	r2, [r9]
90025506:	9b29      	ldr	r3, [sp, #164]	; 0xa4
90025508:	f109 0902 	add.w	r9, r9, #2
9002550c:	f10b 3bff 	add.w	fp, fp, #4294967295
90025510:	441c      	add	r4, r3
90025512:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
90025514:	441e      	add	r6, r3
90025516:	e647      	b.n	900251a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
90025518:	2800      	cmp	r0, #0
9002551a:	f43f aedf 	beq.w	900252dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002551e:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
90025522:	9109      	str	r1, [sp, #36]	; 0x24
90025524:	0e09      	lsrs	r1, r1, #24
90025526:	9112      	str	r1, [sp, #72]	; 0x48
90025528:	e6d8      	b.n	900252dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
9002552a:	b01d      	add	sp, #116	; 0x74
9002552c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90025530 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
90025530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025534:	b085      	sub	sp, #20
90025536:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
9002553a:	9102      	str	r1, [sp, #8]
9002553c:	2c00      	cmp	r4, #0
9002553e:	fb04 7103 	mla	r1, r4, r3, r7
90025542:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
90025546:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
9002554a:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
9002554e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
90025552:	f2c0 810c 	blt.w	9002576e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
90025556:	45a6      	cmp	lr, r4
90025558:	f340 8109 	ble.w	9002576e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
9002555c:	2f00      	cmp	r7, #0
9002555e:	f2c0 8104 	blt.w	9002576a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025562:	42bb      	cmp	r3, r7
90025564:	f340 8101 	ble.w	9002576a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
90025568:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
9002556c:	1c7a      	adds	r2, r7, #1
9002556e:	f100 8101 	bmi.w	90025774 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025572:	4293      	cmp	r3, r2
90025574:	f340 80fe 	ble.w	90025774 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
90025578:	2e00      	cmp	r6, #0
9002557a:	f000 80fd 	beq.w	90025778 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
9002557e:	f8dc 1004 	ldr.w	r1, [ip, #4]
90025582:	3401      	adds	r4, #1
90025584:	f100 80fc 	bmi.w	90025780 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
90025588:	45a6      	cmp	lr, r4
9002558a:	f340 80f9 	ble.w	90025780 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
9002558e:	2800      	cmp	r0, #0
90025590:	f000 80f9 	beq.w	90025786 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
90025594:	2f00      	cmp	r7, #0
90025596:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
9002559a:	f2c0 80ef 	blt.w	9002577c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
9002559e:	42bb      	cmp	r3, r7
900255a0:	f340 80ec 	ble.w	9002577c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
900255a4:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
900255a8:	3701      	adds	r7, #1
900255aa:	f100 80ef 	bmi.w	9002578c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900255ae:	42bb      	cmp	r3, r7
900255b0:	f340 80ec 	ble.w	9002578c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
900255b4:	2e00      	cmp	r6, #0
900255b6:	f000 80eb 	beq.w	90025790 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
900255ba:	6852      	ldr	r2, [r2, #4]
900255bc:	b2b6      	uxth	r6, r6
900255be:	b280      	uxth	r0, r0
900255c0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
900255c4:	fb00 fe06 	mul.w	lr, r0, r6
900255c8:	0136      	lsls	r6, r6, #4
900255ca:	ea4f 6b15 	mov.w	fp, r5, lsr #24
900255ce:	ebce 1000 	rsb	r0, lr, r0, lsl #4
900255d2:	eba6 070e 	sub.w	r7, r6, lr
900255d6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
900255da:	ea4f 6914 	mov.w	r9, r4, lsr #24
900255de:	b280      	uxth	r0, r0
900255e0:	b2bf      	uxth	r7, r7
900255e2:	1a1b      	subs	r3, r3, r0
900255e4:	ea4f 6812 	mov.w	r8, r2, lsr #24
900255e8:	fb07 f60a 	mul.w	r6, r7, sl
900255ec:	b29b      	uxth	r3, r3
900255ee:	fb0b 6603 	mla	r6, fp, r3, r6
900255f2:	fb00 6609 	mla	r6, r0, r9, r6
900255f6:	fb0e 6608 	mla	r6, lr, r8, r6
900255fa:	f3c6 2607 	ubfx	r6, r6, #8, #8
900255fe:	9600      	str	r6, [sp, #0]
90025600:	2e00      	cmp	r6, #0
90025602:	f000 80af 	beq.w	90025764 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
90025606:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
9002560a:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
9002560e:	9e02      	ldr	r6, [sp, #8]
90025610:	fb0b fc0c 	mul.w	ip, fp, ip
90025614:	fb0b f505 	mul.w	r5, fp, r5
90025618:	8836      	ldrh	r6, [r6, #0]
9002561a:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
9002561e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025622:	9501      	str	r5, [sp, #4]
90025624:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
90025628:	44dc      	add	ip, fp
9002562a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
9002562e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
90025632:	9503      	str	r5, [sp, #12]
90025634:	9d01      	ldr	r5, [sp, #4]
90025636:	f505 7c80 	add.w	ip, r5, #256	; 0x100
9002563a:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
9002563e:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
90025642:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025646:	fb0a fc0c 	mul.w	ip, sl, ip
9002564a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
9002564e:	fb0a fa01 	mul.w	sl, sl, r1
90025652:	ea4f 251c 	mov.w	r5, ip, lsr #8
90025656:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
9002565a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
9002565e:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
90025662:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
90025666:	4465      	add	r5, ip
90025668:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
9002566c:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
90025670:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025674:	fb09 fc0c 	mul.w	ip, r9, ip
90025678:	0a2d      	lsrs	r5, r5, #8
9002567a:	fb09 f904 	mul.w	r9, r9, r4
9002567e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025682:	ea4f 211c 	mov.w	r1, ip, lsr #8
90025686:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
9002568a:	f509 7480 	add.w	r4, r9, #256	; 0x100
9002568e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
90025692:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
90025696:	437d      	muls	r5, r7
90025698:	eb04 2919 	add.w	r9, r4, r9, lsr #8
9002569c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
900256a0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900256a4:	4461      	add	r1, ip
900256a6:	fb08 f404 	mul.w	r4, r8, r4
900256aa:	ea4f 2919 	mov.w	r9, r9, lsr #8
900256ae:	fb08 f802 	mul.w	r8, r8, r2
900256b2:	0a09      	lsrs	r1, r1, #8
900256b4:	0a22      	lsrs	r2, r4, #8
900256b6:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
900256ba:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
900256be:	fb07 f70a 	mul.w	r7, r7, sl
900256c2:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
900256c6:	4414      	add	r4, r2
900256c8:	f508 7280 	add.w	r2, r8, #256	; 0x100
900256cc:	0a24      	lsrs	r4, r4, #8
900256ce:	eb02 2818 	add.w	r8, r2, r8, lsr #8
900256d2:	9a03      	ldr	r2, [sp, #12]
900256d4:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
900256d8:	fb02 5503 	mla	r5, r2, r3, r5
900256dc:	ea4f 2818 	mov.w	r8, r8, lsr #8
900256e0:	fb04 540e 	mla	r4, r4, lr, r5
900256e4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
900256e8:	fb01 4100 	mla	r1, r1, r0, r4
900256ec:	0a09      	lsrs	r1, r1, #8
900256ee:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
900256f2:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
900256f6:	fb03 7101 	mla	r1, r3, r1, r7
900256fa:	9b00      	ldr	r3, [sp, #0]
900256fc:	fb0e 1e08 	mla	lr, lr, r8, r1
90025700:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
90025704:	43da      	mvns	r2, r3
90025706:	1233      	asrs	r3, r6, #8
90025708:	fb00 e101 	mla	r1, r0, r1, lr
9002570c:	10f0      	asrs	r0, r6, #3
9002570e:	b2d2      	uxtb	r2, r2
90025710:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
90025714:	0a09      	lsrs	r1, r1, #8
90025716:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002571a:	00f6      	lsls	r6, r6, #3
9002571c:	4353      	muls	r3, r2
9002571e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
90025722:	4350      	muls	r0, r2
90025724:	b2f6      	uxtb	r6, r6
90025726:	4321      	orrs	r1, r4
90025728:	4356      	muls	r6, r2
9002572a:	1c5a      	adds	r2, r3, #1
9002572c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
90025730:	0c0b      	lsrs	r3, r1, #16
90025732:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025736:	1c42      	adds	r2, r0, #1
90025738:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002573c:	0a0a      	lsrs	r2, r1, #8
9002573e:	021b      	lsls	r3, r3, #8
90025740:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025744:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
90025748:	00d2      	lsls	r2, r2, #3
9002574a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
9002574e:	4313      	orrs	r3, r2
90025750:	1c72      	adds	r2, r6, #1
90025752:	eb02 2616 	add.w	r6, r2, r6, lsr #8
90025756:	eb01 2116 	add.w	r1, r1, r6, lsr #8
9002575a:	f3c1 01c4 	ubfx	r1, r1, #3, #5
9002575e:	4319      	orrs	r1, r3
90025760:	9b02      	ldr	r3, [sp, #8]
90025762:	8019      	strh	r1, [r3, #0]
90025764:	b005      	add	sp, #20
90025766:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
9002576a:	2500      	movs	r5, #0
9002576c:	e6fe      	b.n	9002556c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
9002576e:	2100      	movs	r1, #0
90025770:	460d      	mov	r5, r1
90025772:	e706      	b.n	90025582 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025774:	2100      	movs	r1, #0
90025776:	e704      	b.n	90025582 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
90025778:	4631      	mov	r1, r6
9002577a:	e702      	b.n	90025582 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
9002577c:	2400      	movs	r4, #0
9002577e:	e713      	b.n	900255a8 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
90025780:	2200      	movs	r2, #0
90025782:	4614      	mov	r4, r2
90025784:	e71a      	b.n	900255bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025786:	4602      	mov	r2, r0
90025788:	4604      	mov	r4, r0
9002578a:	e717      	b.n	900255bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
9002578c:	2200      	movs	r2, #0
9002578e:	e715      	b.n	900255bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
90025790:	4632      	mov	r2, r6
90025792:	e713      	b.n	900255bc <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>

90025794 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
90025794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90025798:	b09b      	sub	sp, #108	; 0x6c
9002579a:	9218      	str	r2, [sp, #96]	; 0x60
9002579c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
9002579e:	9019      	str	r0, [sp, #100]	; 0x64
900257a0:	9116      	str	r1, [sp, #88]	; 0x58
900257a2:	6850      	ldr	r0, [r2, #4]
900257a4:	9307      	str	r3, [sp, #28]
900257a6:	6812      	ldr	r2, [r2, #0]
900257a8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
900257ac:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
900257b0:	fb00 1303 	mla	r3, r0, r3, r1
900257b4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
900257b8:	930a      	str	r3, [sp, #40]	; 0x28
900257ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900257bc:	681b      	ldr	r3, [r3, #0]
900257be:	930f      	str	r3, [sp, #60]	; 0x3c
900257c0:	9b16      	ldr	r3, [sp, #88]	; 0x58
900257c2:	2b00      	cmp	r3, #0
900257c4:	dc03      	bgt.n	900257ce <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
900257c6:	9b18      	ldr	r3, [sp, #96]	; 0x60
900257c8:	2b00      	cmp	r3, #0
900257ca:	f340 8387 	ble.w	90025edc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
900257ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
900257d0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
900257d4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
900257d8:	1e48      	subs	r0, r1, #1
900257da:	1e57      	subs	r7, r2, #1
900257dc:	9b07      	ldr	r3, [sp, #28]
900257de:	2b00      	cmp	r3, #0
900257e0:	f340 8166 	ble.w	90025ab0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
900257e4:	ea5f 4c24 	movs.w	ip, r4, asr #16
900257e8:	ea4f 4326 	mov.w	r3, r6, asr #16
900257ec:	d406      	bmi.n	900257fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900257ee:	4584      	cmp	ip, r0
900257f0:	da04      	bge.n	900257fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900257f2:	2b00      	cmp	r3, #0
900257f4:	db02      	blt.n	900257fc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
900257f6:	42bb      	cmp	r3, r7
900257f8:	f2c0 815b 	blt.w	90025ab2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
900257fc:	f11c 0c01 	adds.w	ip, ip, #1
90025800:	f100 814b 	bmi.w	90025a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025804:	4561      	cmp	r1, ip
90025806:	f2c0 8148 	blt.w	90025a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
9002580a:	3301      	adds	r3, #1
9002580c:	f100 8145 	bmi.w	90025a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025810:	429a      	cmp	r2, r3
90025812:	f2c0 8142 	blt.w	90025a9a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
90025816:	9b07      	ldr	r3, [sp, #28]
90025818:	9f0a      	ldr	r7, [sp, #40]	; 0x28
9002581a:	9317      	str	r3, [sp, #92]	; 0x5c
9002581c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
9002581e:	2b00      	cmp	r3, #0
90025820:	f340 8165 	ble.w	90025aee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
90025824:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
90025826:	ea4f 4c26 	mov.w	ip, r6, asr #16
9002582a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
9002582c:	f3c4 3103 	ubfx	r1, r4, #12, #4
90025830:	f8d2 e00c 	ldr.w	lr, [r2, #12]
90025834:	1422      	asrs	r2, r4, #16
90025836:	f3c6 3003 	ubfx	r0, r6, #12, #4
9002583a:	689b      	ldr	r3, [r3, #8]
9002583c:	f100 81d5 	bmi.w	90025bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025840:	f103 38ff 	add.w	r8, r3, #4294967295
90025844:	4542      	cmp	r2, r8
90025846:	f280 81d0 	bge.w	90025bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002584a:	f1bc 0f00 	cmp.w	ip, #0
9002584e:	f2c0 81cc 	blt.w	90025bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
90025852:	f10e 38ff 	add.w	r8, lr, #4294967295
90025856:	45c4      	cmp	ip, r8
90025858:	f280 81c7 	bge.w	90025bea <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
9002585c:	b21b      	sxth	r3, r3
9002585e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025860:	fb0c 2203 	mla	r2, ip, r3, r2
90025864:	eb05 0882 	add.w	r8, r5, r2, lsl #2
90025868:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
9002586c:	ea4f 6e12 	mov.w	lr, r2, lsr #24
90025870:	2900      	cmp	r1, #0
90025872:	f000 8182 	beq.w	90025b7a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
90025876:	f8d8 5004 	ldr.w	r5, [r8, #4]
9002587a:	950b      	str	r5, [sp, #44]	; 0x2c
9002587c:	0e2d      	lsrs	r5, r5, #24
9002587e:	9512      	str	r5, [sp, #72]	; 0x48
90025880:	b180      	cbz	r0, 900258a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025882:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
90025886:	3b01      	subs	r3, #1
90025888:	009b      	lsls	r3, r3, #2
9002588a:	3304      	adds	r3, #4
9002588c:	eb08 0c03 	add.w	ip, r8, r3
90025890:	f858 3003 	ldr.w	r3, [r8, r3]
90025894:	9308      	str	r3, [sp, #32]
90025896:	0e1b      	lsrs	r3, r3, #24
90025898:	9310      	str	r3, [sp, #64]	; 0x40
9002589a:	f8dc 3004 	ldr.w	r3, [ip, #4]
9002589e:	930c      	str	r3, [sp, #48]	; 0x30
900258a0:	0e1b      	lsrs	r3, r3, #24
900258a2:	9313      	str	r3, [sp, #76]	; 0x4c
900258a4:	b289      	uxth	r1, r1
900258a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
900258a8:	b280      	uxth	r0, r0
900258aa:	9d10      	ldr	r5, [sp, #64]	; 0x40
900258ac:	fb01 f900 	mul.w	r9, r1, r0
900258b0:	0109      	lsls	r1, r1, #4
900258b2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
900258b6:	eba1 0809 	sub.w	r8, r1, r9
900258ba:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
900258be:	b280      	uxth	r0, r0
900258c0:	fa1f f888 	uxth.w	r8, r8
900258c4:	1a09      	subs	r1, r1, r0
900258c6:	fb08 f303 	mul.w	r3, r8, r3
900258ca:	b289      	uxth	r1, r1
900258cc:	fb01 330e 	mla	r3, r1, lr, r3
900258d0:	fb00 3305 	mla	r3, r0, r5, r3
900258d4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900258d6:	fb09 3305 	mla	r3, r9, r5, r3
900258da:	f3c3 2307 	ubfx	r3, r3, #8, #8
900258de:	2b00      	cmp	r3, #0
900258e0:	f000 80d2 	beq.w	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
900258e4:	f1be 0fff 	cmp.w	lr, #255	; 0xff
900258e8:	d01b      	beq.n	90025922 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
900258ea:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
900258ee:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
900258f2:	fb0e fa0a 	mul.w	sl, lr, sl
900258f6:	fb0e fe02 	mul.w	lr, lr, r2
900258fa:	ea4f 221a 	mov.w	r2, sl, lsr #8
900258fe:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025902:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
90025906:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002590a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
9002590e:	4452      	add	r2, sl
90025910:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025914:	0a12      	lsrs	r2, r2, #8
90025916:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
9002591a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
9002591e:	ea42 020c 	orr.w	r2, r2, ip
90025922:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025924:	2dff      	cmp	r5, #255	; 0xff
90025926:	d021      	beq.n	9002596c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
90025928:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
9002592a:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
9002592e:	9d12      	ldr	r5, [sp, #72]	; 0x48
90025930:	fb05 fb0b 	mul.w	fp, r5, fp
90025934:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025936:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
9002593a:	9d12      	ldr	r5, [sp, #72]	; 0x48
9002593c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
90025940:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025944:	fb05 fa0a 	mul.w	sl, r5, sl
90025948:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
9002594c:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
90025950:	44de      	add	lr, fp
90025952:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
90025956:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
9002595a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
9002595e:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025962:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025966:	ea4e 050a 	orr.w	r5, lr, sl
9002596a:	950b      	str	r5, [sp, #44]	; 0x2c
9002596c:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002596e:	2dff      	cmp	r5, #255	; 0xff
90025970:	d021      	beq.n	900259b6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
90025972:	9d08      	ldr	r5, [sp, #32]
90025974:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
90025978:	9d10      	ldr	r5, [sp, #64]	; 0x40
9002597a:	fb05 fb0b 	mul.w	fp, r5, fp
9002597e:	9d08      	ldr	r5, [sp, #32]
90025980:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025984:	9d10      	ldr	r5, [sp, #64]	; 0x40
90025986:	fb05 fa0e 	mul.w	sl, r5, lr
9002598a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
9002598e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
90025992:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
90025996:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
9002599a:	44de      	add	lr, fp
9002599c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900259a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900259a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900259a8:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900259ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900259b0:	ea4e 050a 	orr.w	r5, lr, sl
900259b4:	9508      	str	r5, [sp, #32]
900259b6:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900259b8:	2dff      	cmp	r5, #255	; 0xff
900259ba:	d021      	beq.n	90025a00 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
900259bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900259be:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
900259c2:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900259c4:	fb05 fb0b 	mul.w	fp, r5, fp
900259c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900259ca:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
900259ce:	9d13      	ldr	r5, [sp, #76]	; 0x4c
900259d0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
900259d4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
900259d8:	fb05 fa0a 	mul.w	sl, r5, sl
900259dc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900259e0:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
900259e4:	44de      	add	lr, fp
900259e6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
900259ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
900259ee:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
900259f2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
900259f6:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
900259fa:	ea4e 050a 	orr.w	r5, lr, sl
900259fe:	950c      	str	r5, [sp, #48]	; 0x30
90025a00:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025a02:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
90025a06:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
90025a0a:	2bff      	cmp	r3, #255	; 0xff
90025a0c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025a10:	9d08      	ldr	r5, [sp, #32]
90025a12:	fb08 fc0c 	mul.w	ip, r8, ip
90025a16:	fb01 cc0e 	mla	ip, r1, lr, ip
90025a1a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025a1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
90025a20:	fb00 cc0e 	mla	ip, r0, lr, ip
90025a24:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
90025a28:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
90025a2a:	fb09 cc0e 	mla	ip, r9, lr, ip
90025a2e:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
90025a32:	fb08 f80e 	mul.w	r8, r8, lr
90025a36:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025a3a:	fb01 8202 	mla	r2, r1, r2, r8
90025a3e:	9908      	ldr	r1, [sp, #32]
90025a40:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025a44:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025a48:	990c      	ldr	r1, [sp, #48]	; 0x30
90025a4a:	fb00 220a 	mla	r2, r0, sl, r2
90025a4e:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
90025a52:	fb09 2900 	mla	r9, r9, r0, r2
90025a56:	ea4f 2919 	mov.w	r9, r9, lsr #8
90025a5a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
90025a5e:	ea4c 0c09 	orr.w	ip, ip, r9
90025a62:	ea4f 221c 	mov.w	r2, ip, lsr #8
90025a66:	f040 8091 	bne.w	90025b8c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
90025a6a:	ea4f 135c 	mov.w	r3, ip, lsr #5
90025a6e:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
90025a72:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90025a76:	f022 0207 	bic.w	r2, r2, #7
90025a7a:	431a      	orrs	r2, r3
90025a7c:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
90025a80:	ea4c 0c02 	orr.w	ip, ip, r2
90025a84:	f8a7 c000 	strh.w	ip, [r7]
90025a88:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025a8a:	3702      	adds	r7, #2
90025a8c:	441c      	add	r4, r3
90025a8e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025a90:	441e      	add	r6, r3
90025a92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
90025a94:	3b01      	subs	r3, #1
90025a96:	9317      	str	r3, [sp, #92]	; 0x5c
90025a98:	e6c0      	b.n	9002581c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
90025a9a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025a9c:	441c      	add	r4, r3
90025a9e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025aa0:	441e      	add	r6, r3
90025aa2:	9b07      	ldr	r3, [sp, #28]
90025aa4:	3b01      	subs	r3, #1
90025aa6:	9307      	str	r3, [sp, #28]
90025aa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025aaa:	3302      	adds	r3, #2
90025aac:	930a      	str	r3, [sp, #40]	; 0x28
90025aae:	e695      	b.n	900257dc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
90025ab0:	d024      	beq.n	90025afc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
90025ab2:	9b07      	ldr	r3, [sp, #28]
90025ab4:	9827      	ldr	r0, [sp, #156]	; 0x9c
90025ab6:	3b01      	subs	r3, #1
90025ab8:	fb00 4003 	mla	r0, r0, r3, r4
90025abc:	1400      	asrs	r0, r0, #16
90025abe:	f53f aeaa 	bmi.w	90025816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025ac2:	3901      	subs	r1, #1
90025ac4:	4288      	cmp	r0, r1
90025ac6:	f6bf aea6 	bge.w	90025816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025aca:	9928      	ldr	r1, [sp, #160]	; 0xa0
90025acc:	fb01 6303 	mla	r3, r1, r3, r6
90025ad0:	141b      	asrs	r3, r3, #16
90025ad2:	f53f aea0 	bmi.w	90025816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025ad6:	3a01      	subs	r2, #1
90025ad8:	4293      	cmp	r3, r2
90025ada:	f6bf ae9c 	bge.w	90025816 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
90025ade:	f8dd b01c 	ldr.w	fp, [sp, #28]
90025ae2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
90025ae6:	f1bb 0f00 	cmp.w	fp, #0
90025aea:	f300 809a 	bgt.w	90025c22 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
90025aee:	9b07      	ldr	r3, [sp, #28]
90025af0:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
90025af4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
90025af6:	eb03 0345 	add.w	r3, r3, r5, lsl #1
90025afa:	930a      	str	r3, [sp, #40]	; 0x28
90025afc:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025afe:	2b00      	cmp	r3, #0
90025b00:	f340 81ec 	ble.w	90025edc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
90025b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
90025b08:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025b0a:	ee30 0a04 	vadd.f32	s0, s0, s8
90025b0e:	ee70 0aa4 	vadd.f32	s1, s1, s9
90025b12:	eef0 6a62 	vmov.f32	s13, s5
90025b16:	eec7 7a00 	vdiv.f32	s15, s14, s0
90025b1a:	ee31 1a05 	vadd.f32	s2, s2, s10
90025b1e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025b22:	ee16 4a90 	vmov	r4, s13
90025b26:	eef0 6a43 	vmov.f32	s13, s6
90025b2a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90025b2e:	ee16 6a90 	vmov	r6, s13
90025b32:	ee20 7aa7 	vmul.f32	s14, s1, s15
90025b36:	ee61 7a27 	vmul.f32	s15, s2, s15
90025b3a:	ee77 2a62 	vsub.f32	s5, s14, s5
90025b3e:	ee37 3ac3 	vsub.f32	s6, s15, s6
90025b42:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90025b46:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90025b4a:	ee12 2a90 	vmov	r2, s5
90025b4e:	eef0 2a47 	vmov.f32	s5, s14
90025b52:	fb92 f3f3 	sdiv	r3, r2, r3
90025b56:	ee13 2a10 	vmov	r2, s6
90025b5a:	9327      	str	r3, [sp, #156]	; 0x9c
90025b5c:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025b5e:	eeb0 3a67 	vmov.f32	s6, s15
90025b62:	fb92 f3f3 	sdiv	r3, r2, r3
90025b66:	9328      	str	r3, [sp, #160]	; 0xa0
90025b68:	9b16      	ldr	r3, [sp, #88]	; 0x58
90025b6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
90025b6c:	3b01      	subs	r3, #1
90025b6e:	9316      	str	r3, [sp, #88]	; 0x58
90025b70:	9b24      	ldr	r3, [sp, #144]	; 0x90
90025b72:	bf08      	it	eq
90025b74:	4613      	moveq	r3, r2
90025b76:	9307      	str	r3, [sp, #28]
90025b78:	e622      	b.n	900257c0 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
90025b7a:	2800      	cmp	r0, #0
90025b7c:	f43f ae92 	beq.w	900258a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025b80:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
90025b84:	9308      	str	r3, [sp, #32]
90025b86:	0e1b      	lsrs	r3, r3, #24
90025b88:	9310      	str	r3, [sp, #64]	; 0x40
90025b8a:	e68b      	b.n	900258a4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
90025b8c:	8839      	ldrh	r1, [r7, #0]
90025b8e:	43db      	mvns	r3, r3
90025b90:	4dd4      	ldr	r5, [pc, #848]	; (90025ee4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025b92:	ea4f 2e21 	mov.w	lr, r1, asr #8
90025b96:	fa5f f883 	uxtb.w	r8, r3
90025b9a:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
90025b9e:	10c8      	asrs	r0, r1, #3
90025ba0:	00cb      	lsls	r3, r1, #3
90025ba2:	fb0e fe08 	mul.w	lr, lr, r8
90025ba6:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025baa:	b2db      	uxtb	r3, r3
90025bac:	f10e 0101 	add.w	r1, lr, #1
90025bb0:	fb00 f008 	mul.w	r0, r0, r8
90025bb4:	fb03 f308 	mul.w	r3, r3, r8
90025bb8:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
90025bbc:	ea4f 411c 	mov.w	r1, ip, lsr #16
90025bc0:	eb01 211e 	add.w	r1, r1, lr, lsr #8
90025bc4:	f100 0e01 	add.w	lr, r0, #1
90025bc8:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
90025bcc:	b2c9      	uxtb	r1, r1
90025bce:	eb02 2210 	add.w	r2, r2, r0, lsr #8
90025bd2:	ea05 2101 	and.w	r1, r5, r1, lsl #8
90025bd6:	00d2      	lsls	r2, r2, #3
90025bd8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025bdc:	430a      	orrs	r2, r1
90025bde:	1c59      	adds	r1, r3, #1
90025be0:	eb01 2313 	add.w	r3, r1, r3, lsr #8
90025be4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
90025be8:	e748      	b.n	90025a7c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
90025bea:	f112 0801 	adds.w	r8, r2, #1
90025bee:	f53f af4b 	bmi.w	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025bf2:	4543      	cmp	r3, r8
90025bf4:	f6ff af48 	blt.w	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025bf8:	f11c 0801 	adds.w	r8, ip, #1
90025bfc:	f53f af44 	bmi.w	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025c00:	45c6      	cmp	lr, r8
90025c02:	f6ff af41 	blt.w	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025c06:	b21b      	sxth	r3, r3
90025c08:	e9cd 2c01 	strd	r2, ip, [sp, #4]
90025c0c:	fa0f f28e 	sxth.w	r2, lr
90025c10:	e9cd 1003 	strd	r1, r0, [sp, #12]
90025c14:	9200      	str	r2, [sp, #0]
90025c16:	4639      	mov	r1, r7
90025c18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90025c1a:	9819      	ldr	r0, [sp, #100]	; 0x64
90025c1c:	f7ff fc88 	bl	90025530 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
90025c20:	e732      	b.n	90025a88 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
90025c22:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
90025c24:	1421      	asrs	r1, r4, #16
90025c26:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90025c28:	f3c4 3203 	ubfx	r2, r4, #12, #4
90025c2c:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
90025c30:	1433      	asrs	r3, r6, #16
90025c32:	f3c6 3003 	ubfx	r0, r6, #12, #4
90025c36:	fb07 1303 	mla	r3, r7, r3, r1
90025c3a:	990f      	ldr	r1, [sp, #60]	; 0x3c
90025c3c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
90025c40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
90025c44:	ea4f 6c13 	mov.w	ip, r3, lsr #24
90025c48:	2a00      	cmp	r2, #0
90025c4a:	f000 8108 	beq.w	90025e5e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
90025c4e:	684d      	ldr	r5, [r1, #4]
90025c50:	950d      	str	r5, [sp, #52]	; 0x34
90025c52:	0e2d      	lsrs	r5, r5, #24
90025c54:	9514      	str	r5, [sp, #80]	; 0x50
90025c56:	b178      	cbz	r0, 90025c78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025c58:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
90025c5c:	3f01      	subs	r7, #1
90025c5e:	00bf      	lsls	r7, r7, #2
90025c60:	3704      	adds	r7, #4
90025c62:	eb01 0e07 	add.w	lr, r1, r7
90025c66:	59c9      	ldr	r1, [r1, r7]
90025c68:	9109      	str	r1, [sp, #36]	; 0x24
90025c6a:	0e09      	lsrs	r1, r1, #24
90025c6c:	9111      	str	r1, [sp, #68]	; 0x44
90025c6e:	f8de 1004 	ldr.w	r1, [lr, #4]
90025c72:	910e      	str	r1, [sp, #56]	; 0x38
90025c74:	0e09      	lsrs	r1, r1, #24
90025c76:	9115      	str	r1, [sp, #84]	; 0x54
90025c78:	b292      	uxth	r2, r2
90025c7a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025c7c:	b280      	uxth	r0, r0
90025c7e:	fb02 f900 	mul.w	r9, r2, r0
90025c82:	0112      	lsls	r2, r2, #4
90025c84:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
90025c88:	eba2 0e09 	sub.w	lr, r2, r9
90025c8c:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
90025c90:	9a14      	ldr	r2, [sp, #80]	; 0x50
90025c92:	b280      	uxth	r0, r0
90025c94:	fa1f fe8e 	uxth.w	lr, lr
90025c98:	1a09      	subs	r1, r1, r0
90025c9a:	fb0e f202 	mul.w	r2, lr, r2
90025c9e:	b289      	uxth	r1, r1
90025ca0:	fb01 220c 	mla	r2, r1, ip, r2
90025ca4:	fb00 2205 	mla	r2, r0, r5, r2
90025ca8:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025caa:	fb09 2205 	mla	r2, r9, r5, r2
90025cae:	f3c2 2207 	ubfx	r2, r2, #8, #8
90025cb2:	2a00      	cmp	r2, #0
90025cb4:	f000 80ca 	beq.w	90025e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025cb8:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
90025cbc:	d019      	beq.n	90025cf2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
90025cbe:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
90025cc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025cc6:	fb0c fa0a 	mul.w	sl, ip, sl
90025cca:	fb0c fc03 	mul.w	ip, ip, r3
90025cce:	ea4f 231a 	mov.w	r3, sl, lsr #8
90025cd2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
90025cd6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
90025cda:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025cde:	eb07 271c 	add.w	r7, r7, ip, lsr #8
90025ce2:	4453      	add	r3, sl
90025ce4:	0a3f      	lsrs	r7, r7, #8
90025ce6:	0a1b      	lsrs	r3, r3, #8
90025ce8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
90025cec:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
90025cf0:	433b      	orrs	r3, r7
90025cf2:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025cf4:	2dff      	cmp	r5, #255	; 0xff
90025cf6:	d020      	beq.n	90025d3a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
90025cf8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025cfa:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025cfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025d00:	436f      	muls	r7, r5
90025d02:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025d04:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025d08:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025d0c:	9d14      	ldr	r5, [sp, #80]	; 0x50
90025d0e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025d12:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025d16:	fb05 fa0a 	mul.w	sl, r5, sl
90025d1a:	44bc      	add	ip, r7
90025d1c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025d20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025d24:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025d28:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025d2c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025d30:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025d34:	ea4c 050a 	orr.w	r5, ip, sl
90025d38:	950d      	str	r5, [sp, #52]	; 0x34
90025d3a:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025d3c:	2dff      	cmp	r5, #255	; 0xff
90025d3e:	d020      	beq.n	90025d82 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
90025d40:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025d42:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025d46:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025d48:	436f      	muls	r7, r5
90025d4a:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025d4c:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025d50:	9d11      	ldr	r5, [sp, #68]	; 0x44
90025d52:	fb05 fa0c 	mul.w	sl, r5, ip
90025d56:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025d5a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025d5e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025d62:	44bc      	add	ip, r7
90025d64:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025d68:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025d6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025d70:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025d74:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025d78:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025d7c:	ea4c 050a 	orr.w	r5, ip, sl
90025d80:	9509      	str	r5, [sp, #36]	; 0x24
90025d82:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025d84:	2dff      	cmp	r5, #255	; 0xff
90025d86:	d020      	beq.n	90025dca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
90025d88:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025d8a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025d8e:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025d90:	436f      	muls	r7, r5
90025d92:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025d94:	ea4f 2c17 	mov.w	ip, r7, lsr #8
90025d98:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
90025d9c:	9d15      	ldr	r5, [sp, #84]	; 0x54
90025d9e:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
90025da2:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025da6:	fb05 fa0a 	mul.w	sl, r5, sl
90025daa:	44bc      	add	ip, r7
90025dac:	f50a 7780 	add.w	r7, sl, #256	; 0x100
90025db0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025db4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
90025db8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
90025dbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
90025dc0:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
90025dc4:	ea4c 050a 	orr.w	r5, ip, sl
90025dc8:	950e      	str	r5, [sp, #56]	; 0x38
90025dca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025dcc:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
90025dd0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
90025dd4:	2aff      	cmp	r2, #255	; 0xff
90025dd6:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
90025dda:	9d09      	ldr	r5, [sp, #36]	; 0x24
90025ddc:	fb0e f707 	mul.w	r7, lr, r7
90025de0:	fb01 770c 	mla	r7, r1, ip, r7
90025de4:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025de8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90025dea:	fb00 770c 	mla	r7, r0, ip, r7
90025dee:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
90025df2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
90025df4:	fb09 770c 	mla	r7, r9, ip, r7
90025df8:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
90025dfc:	fb0e fe0c 	mul.w	lr, lr, ip
90025e00:	ea4f 2717 	mov.w	r7, r7, lsr #8
90025e04:	fb01 e303 	mla	r3, r1, r3, lr
90025e08:	9909      	ldr	r1, [sp, #36]	; 0x24
90025e0a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
90025e0e:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
90025e12:	990e      	ldr	r1, [sp, #56]	; 0x38
90025e14:	fb00 330a 	mla	r3, r0, sl, r3
90025e18:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
90025e1c:	fb09 3c0c 	mla	ip, r9, ip, r3
90025e20:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
90025e24:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
90025e28:	ea47 070c 	orr.w	r7, r7, ip
90025e2c:	ea4f 2317 	mov.w	r3, r7, lsr #8
90025e30:	d11e      	bne.n	90025e70 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
90025e32:	097a      	lsrs	r2, r7, #5
90025e34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
90025e38:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025e3c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90025e40:	f023 0307 	bic.w	r3, r3, #7
90025e44:	4313      	orrs	r3, r2
90025e46:	431f      	orrs	r7, r3
90025e48:	f8a8 7000 	strh.w	r7, [r8]
90025e4c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
90025e4e:	f108 0802 	add.w	r8, r8, #2
90025e52:	f10b 3bff 	add.w	fp, fp, #4294967295
90025e56:	441c      	add	r4, r3
90025e58:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90025e5a:	441e      	add	r6, r3
90025e5c:	e643      	b.n	90025ae6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
90025e5e:	2800      	cmp	r0, #0
90025e60:	f43f af0a 	beq.w	90025c78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025e64:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
90025e68:	9109      	str	r1, [sp, #36]	; 0x24
90025e6a:	0e09      	lsrs	r1, r1, #24
90025e6c:	9111      	str	r1, [sp, #68]	; 0x44
90025e6e:	e703      	b.n	90025c78 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
90025e70:	f8b8 1000 	ldrh.w	r1, [r8]
90025e74:	43d2      	mvns	r2, r2
90025e76:	ea4f 2c21 	mov.w	ip, r1, asr #8
90025e7a:	fa5f fe82 	uxtb.w	lr, r2
90025e7e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
90025e82:	10c8      	asrs	r0, r1, #3
90025e84:	00ca      	lsls	r2, r1, #3
90025e86:	fb0c fc0e 	mul.w	ip, ip, lr
90025e8a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90025e8e:	b2d2      	uxtb	r2, r2
90025e90:	f10c 0101 	add.w	r1, ip, #1
90025e94:	fb00 f00e 	mul.w	r0, r0, lr
90025e98:	fb02 f20e 	mul.w	r2, r2, lr
90025e9c:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025ea0:	0c39      	lsrs	r1, r7, #16
90025ea2:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90025ea6:	490f      	ldr	r1, [pc, #60]	; (90025ee4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
90025ea8:	fa5f fc8c 	uxtb.w	ip, ip
90025eac:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
90025eb0:	1c41      	adds	r1, r0, #1
90025eb2:	eb01 2010 	add.w	r0, r1, r0, lsr #8
90025eb6:	1c51      	adds	r1, r2, #1
90025eb8:	eb03 2010 	add.w	r0, r3, r0, lsr #8
90025ebc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
90025ec0:	00c0      	lsls	r0, r0, #3
90025ec2:	eb07 2712 	add.w	r7, r7, r2, lsr #8
90025ec6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90025eca:	f3c7 07c4 	ubfx	r7, r7, #3, #5
90025ece:	ea4c 0c00 	orr.w	ip, ip, r0
90025ed2:	ea47 0c0c 	orr.w	ip, r7, ip
90025ed6:	f8a8 c000 	strh.w	ip, [r8]
90025eda:	e7b7      	b.n	90025e4c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
90025edc:	b01b      	add	sp, #108	; 0x6c
90025ede:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90025ee2:	bf00      	nop
90025ee4:	fffff800 	.word	0xfffff800

90025ee8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
90025ee8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
90025eec:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90025ef0:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90025ef4:	2d00      	cmp	r5, #0
90025ef6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
90025efa:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
90025efe:	fb05 0e03 	mla	lr, r5, r3, r0
90025f02:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90025f06:	f2c0 808c 	blt.w	90026022 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025f0a:	45a9      	cmp	r9, r5
90025f0c:	f340 8089 	ble.w	90026022 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
90025f10:	2800      	cmp	r0, #0
90025f12:	f2c0 8084 	blt.w	9002601e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025f16:	4580      	cmp	r8, r0
90025f18:	f340 8081 	ble.w	9002601e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
90025f1c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90025f20:	f01e 0f01 	tst.w	lr, #1
90025f24:	5d16      	ldrb	r6, [r2, r4]
90025f26:	bf0c      	ite	eq
90025f28:	f006 060f 	andeq.w	r6, r6, #15
90025f2c:	1136      	asrne	r6, r6, #4
90025f2e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90025f32:	b2f6      	uxtb	r6, r6
90025f34:	1c44      	adds	r4, r0, #1
90025f36:	d477      	bmi.n	90026028 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025f38:	45a0      	cmp	r8, r4
90025f3a:	dd75      	ble.n	90026028 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
90025f3c:	2f00      	cmp	r7, #0
90025f3e:	d075      	beq.n	9002602c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
90025f40:	f10e 0a01 	add.w	sl, lr, #1
90025f44:	ea4f 045a 	mov.w	r4, sl, lsr #1
90025f48:	f01a 0f01 	tst.w	sl, #1
90025f4c:	5d14      	ldrb	r4, [r2, r4]
90025f4e:	bf0c      	ite	eq
90025f50:	f004 040f 	andeq.w	r4, r4, #15
90025f54:	1124      	asrne	r4, r4, #4
90025f56:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90025f5a:	b2e4      	uxtb	r4, r4
90025f5c:	3501      	adds	r5, #1
90025f5e:	d469      	bmi.n	90026034 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025f60:	45a9      	cmp	r9, r5
90025f62:	dd67      	ble.n	90026034 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
90025f64:	f1bc 0f00 	cmp.w	ip, #0
90025f68:	d067      	beq.n	9002603a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
90025f6a:	2800      	cmp	r0, #0
90025f6c:	db60      	blt.n	90026030 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025f6e:	4580      	cmp	r8, r0
90025f70:	dd5e      	ble.n	90026030 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
90025f72:	eb03 090e 	add.w	r9, r3, lr
90025f76:	ea4f 0559 	mov.w	r5, r9, lsr #1
90025f7a:	f019 0f01 	tst.w	r9, #1
90025f7e:	5d55      	ldrb	r5, [r2, r5]
90025f80:	bf0c      	ite	eq
90025f82:	f005 050f 	andeq.w	r5, r5, #15
90025f86:	112d      	asrne	r5, r5, #4
90025f88:	eb05 1505 	add.w	r5, r5, r5, lsl #4
90025f8c:	b2ed      	uxtb	r5, r5
90025f8e:	3001      	adds	r0, #1
90025f90:	d456      	bmi.n	90026040 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025f92:	4580      	cmp	r8, r0
90025f94:	dd54      	ble.n	90026040 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
90025f96:	2f00      	cmp	r7, #0
90025f98:	d054      	beq.n	90026044 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
90025f9a:	3301      	adds	r3, #1
90025f9c:	449e      	add	lr, r3
90025f9e:	ea4f 035e 	mov.w	r3, lr, lsr #1
90025fa2:	f01e 0f01 	tst.w	lr, #1
90025fa6:	5cd0      	ldrb	r0, [r2, r3]
90025fa8:	bf0c      	ite	eq
90025faa:	f000 000f 	andeq.w	r0, r0, #15
90025fae:	1100      	asrne	r0, r0, #4
90025fb0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
90025fb4:	b2c3      	uxtb	r3, r0
90025fb6:	b2ba      	uxth	r2, r7
90025fb8:	fa1f fc8c 	uxth.w	ip, ip
90025fbc:	fb02 f00c 	mul.w	r0, r2, ip
90025fc0:	0112      	lsls	r2, r2, #4
90025fc2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90025fc6:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90025fca:	1a12      	subs	r2, r2, r0
90025fcc:	fa1f fc8c 	uxth.w	ip, ip
90025fd0:	b292      	uxth	r2, r2
90025fd2:	eba7 070c 	sub.w	r7, r7, ip
90025fd6:	4362      	muls	r2, r4
90025fd8:	b2bf      	uxth	r7, r7
90025fda:	fb06 2207 	mla	r2, r6, r7, r2
90025fde:	fb0c 2505 	mla	r5, ip, r5, r2
90025fe2:	fb00 5303 	mla	r3, r0, r3, r5
90025fe6:	f3c3 2307 	ubfx	r3, r3, #8, #8
90025fea:	b1b3      	cbz	r3, 9002601a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
90025fec:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
90025ff0:	435a      	muls	r2, r3
90025ff2:	1c53      	adds	r3, r2, #1
90025ff4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90025ff8:	4a2d      	ldr	r2, [pc, #180]	; (900260b0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
90025ffa:	121b      	asrs	r3, r3, #8
90025ffc:	6812      	ldr	r2, [r2, #0]
90025ffe:	2bff      	cmp	r3, #255	; 0xff
90026000:	ea4f 2612 	mov.w	r6, r2, lsr #8
90026004:	d120      	bne.n	90026048 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
90026006:	0950      	lsrs	r0, r2, #5
90026008:	4b2a      	ldr	r3, [pc, #168]	; (900260b4 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
9002600a:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002600e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
90026012:	4033      	ands	r3, r6
90026014:	4318      	orrs	r0, r3
90026016:	4302      	orrs	r2, r0
90026018:	800a      	strh	r2, [r1, #0]
9002601a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002601e:	2600      	movs	r6, #0
90026020:	e788      	b.n	90025f34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
90026022:	2400      	movs	r4, #0
90026024:	4626      	mov	r6, r4
90026026:	e799      	b.n	90025f5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90026028:	2400      	movs	r4, #0
9002602a:	e797      	b.n	90025f5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
9002602c:	463c      	mov	r4, r7
9002602e:	e795      	b.n	90025f5c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
90026030:	2500      	movs	r5, #0
90026032:	e7ac      	b.n	90025f8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
90026034:	2300      	movs	r3, #0
90026036:	461d      	mov	r5, r3
90026038:	e7bd      	b.n	90025fb6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
9002603a:	4663      	mov	r3, ip
9002603c:	4665      	mov	r5, ip
9002603e:	e7ba      	b.n	90025fb6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026040:	2300      	movs	r3, #0
90026042:	e7b8      	b.n	90025fb6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026044:	463b      	mov	r3, r7
90026046:	e7b6      	b.n	90025fb6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
90026048:	880d      	ldrh	r5, [r1, #0]
9002604a:	b29f      	uxth	r7, r3
9002604c:	f3c2 4007 	ubfx	r0, r2, #16, #8
90026050:	43db      	mvns	r3, r3
90026052:	122c      	asrs	r4, r5, #8
90026054:	fb10 f007 	smulbb	r0, r0, r7
90026058:	b2db      	uxtb	r3, r3
9002605a:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
9002605e:	b2f6      	uxtb	r6, r6
90026060:	b2d2      	uxtb	r2, r2
90026062:	fb04 0403 	mla	r4, r4, r3, r0
90026066:	10e8      	asrs	r0, r5, #3
90026068:	fb12 f207 	smulbb	r2, r2, r7
9002606c:	00ed      	lsls	r5, r5, #3
9002606e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
90026072:	b2a4      	uxth	r4, r4
90026074:	fb16 f607 	smulbb	r6, r6, r7
90026078:	b2ed      	uxtb	r5, r5
9002607a:	fb00 6603 	mla	r6, r0, r3, r6
9002607e:	fb05 2303 	mla	r3, r5, r3, r2
90026082:	b2b0      	uxth	r0, r6
90026084:	b29a      	uxth	r2, r3
90026086:	1c63      	adds	r3, r4, #1
90026088:	eb03 2414 	add.w	r4, r3, r4, lsr #8
9002608c:	1c53      	adds	r3, r2, #1
9002608e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026092:	1c42      	adds	r2, r0, #1
90026094:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
90026098:	eb02 2010 	add.w	r0, r2, r0, lsr #8
9002609c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
900260a0:	0940      	lsrs	r0, r0, #5
900260a2:	4323      	orrs	r3, r4
900260a4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
900260a8:	4303      	orrs	r3, r0
900260aa:	800b      	strh	r3, [r1, #0]
900260ac:	e7b5      	b.n	9002601a <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
900260ae:	bf00      	nop
900260b0:	24026f94 	.word	0x24026f94
900260b4:	00fff800 	.word	0x00fff800

900260b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900260b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900260bc:	b097      	sub	sp, #92	; 0x5c
900260be:	9214      	str	r2, [sp, #80]	; 0x50
900260c0:	9309      	str	r3, [sp, #36]	; 0x24
900260c2:	9a25      	ldr	r2, [sp, #148]	; 0x94
900260c4:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
900260c8:	9015      	str	r0, [sp, #84]	; 0x54
900260ca:	910d      	str	r1, [sp, #52]	; 0x34
900260cc:	6850      	ldr	r0, [r2, #4]
900260ce:	930f      	str	r3, [sp, #60]	; 0x3c
900260d0:	6812      	ldr	r2, [r2, #0]
900260d2:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
900260d6:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
900260da:	fb00 1303 	mla	r3, r0, r3, r1
900260de:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900260e2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900260e4:	689b      	ldr	r3, [r3, #8]
900260e6:	3301      	adds	r3, #1
900260e8:	f023 0301 	bic.w	r3, r3, #1
900260ec:	930a      	str	r3, [sp, #40]	; 0x28
900260ee:	9b28      	ldr	r3, [sp, #160]	; 0xa0
900260f0:	681f      	ldr	r7, [r3, #0]
900260f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900260f4:	2b00      	cmp	r3, #0
900260f6:	dc03      	bgt.n	90026100 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
900260f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
900260fa:	2b00      	cmp	r3, #0
900260fc:	f340 8289 	ble.w	90026612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
90026100:	9b28      	ldr	r3, [sp, #160]	; 0xa0
90026102:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
90026106:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
9002610a:	1e48      	subs	r0, r1, #1
9002610c:	f102 3cff 	add.w	ip, r2, #4294967295
90026110:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026112:	2b00      	cmp	r3, #0
90026114:	f340 80c5 	ble.w	900262a2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
90026118:	ea5f 4e24 	movs.w	lr, r4, asr #16
9002611c:	ea4f 4326 	mov.w	r3, r6, asr #16
90026120:	d406      	bmi.n	90026130 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90026122:	4586      	cmp	lr, r0
90026124:	da04      	bge.n	90026130 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
90026126:	2b00      	cmp	r3, #0
90026128:	db02      	blt.n	90026130 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
9002612a:	4563      	cmp	r3, ip
9002612c:	f2c0 80ba 	blt.w	900262a4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
90026130:	f11e 0e01 	adds.w	lr, lr, #1
90026134:	f100 80ab 	bmi.w	9002628e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90026138:	4571      	cmp	r1, lr
9002613a:	f2c0 80a8 	blt.w	9002628e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002613e:	3301      	adds	r3, #1
90026140:	f100 80a5 	bmi.w	9002628e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
90026144:	429a      	cmp	r2, r3
90026146:	f2c0 80a2 	blt.w	9002628e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
9002614a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002614c:	46c8      	mov	r8, r9
9002614e:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
90026152:	930e      	str	r3, [sp, #56]	; 0x38
90026154:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90026156:	2b00      	cmp	r3, #0
90026158:	f340 80c4 	ble.w	900262e4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22c>
9002615c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
9002615e:	1430      	asrs	r0, r6, #16
90026160:	f3c4 3203 	ubfx	r2, r4, #12, #4
90026164:	f3c6 3103 	ubfx	r1, r6, #12, #4
90026168:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
9002616c:	1423      	asrs	r3, r4, #16
9002616e:	f100 814f 	bmi.w	90026410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90026172:	f10c 3bff 	add.w	fp, ip, #4294967295
90026176:	455b      	cmp	r3, fp
90026178:	f280 814a 	bge.w	90026410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002617c:	2800      	cmp	r0, #0
9002617e:	f2c0 8147 	blt.w	90026410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
90026182:	f10e 3bff 	add.w	fp, lr, #4294967295
90026186:	4558      	cmp	r0, fp
90026188:	f280 8142 	bge.w	90026410 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
9002618c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
9002618e:	fb00 3305 	mla	r3, r0, r5, r3
90026192:	0858      	lsrs	r0, r3, #1
90026194:	07dd      	lsls	r5, r3, #31
90026196:	f817 c000 	ldrb.w	ip, [r7, r0]
9002619a:	bf54      	ite	pl
9002619c:	f00c 0c0f 	andpl.w	ip, ip, #15
900261a0:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900261a4:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900261a8:	fa5f fc8c 	uxtb.w	ip, ip
900261ac:	2a00      	cmp	r2, #0
900261ae:	f000 80dd 	beq.w	9002636c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b4>
900261b2:	1c58      	adds	r0, r3, #1
900261b4:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900261b8:	07c0      	lsls	r0, r0, #31
900261ba:	f817 e00e 	ldrb.w	lr, [r7, lr]
900261be:	bf54      	ite	pl
900261c0:	f00e 0e0f 	andpl.w	lr, lr, #15
900261c4:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900261c8:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900261cc:	fa5f f08e 	uxtb.w	r0, lr
900261d0:	9010      	str	r0, [sp, #64]	; 0x40
900261d2:	b1d9      	cbz	r1, 9002620c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
900261d4:	4453      	add	r3, sl
900261d6:	0858      	lsrs	r0, r3, #1
900261d8:	07dd      	lsls	r5, r3, #31
900261da:	f103 0301 	add.w	r3, r3, #1
900261de:	5c38      	ldrb	r0, [r7, r0]
900261e0:	bf54      	ite	pl
900261e2:	f000 000f 	andpl.w	r0, r0, #15
900261e6:	1100      	asrmi	r0, r0, #4
900261e8:	07dd      	lsls	r5, r3, #31
900261ea:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900261ee:	b2c0      	uxtb	r0, r0
900261f0:	900b      	str	r0, [sp, #44]	; 0x2c
900261f2:	ea4f 0053 	mov.w	r0, r3, lsr #1
900261f6:	f817 e000 	ldrb.w	lr, [r7, r0]
900261fa:	bf54      	ite	pl
900261fc:	f00e 030f 	andpl.w	r3, lr, #15
90026200:	ea4f 132e 	movmi.w	r3, lr, asr #4
90026204:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026208:	b2db      	uxtb	r3, r3
9002620a:	9311      	str	r3, [sp, #68]	; 0x44
9002620c:	b292      	uxth	r2, r2
9002620e:	9d10      	ldr	r5, [sp, #64]	; 0x40
90026210:	b289      	uxth	r1, r1
90026212:	fb02 f301 	mul.w	r3, r2, r1
90026216:	0112      	lsls	r2, r2, #4
90026218:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002621c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90026220:	1ad2      	subs	r2, r2, r3
90026222:	b289      	uxth	r1, r1
90026224:	b292      	uxth	r2, r2
90026226:	1a40      	subs	r0, r0, r1
90026228:	436a      	muls	r2, r5
9002622a:	b280      	uxth	r0, r0
9002622c:	fb0c 2c00 	mla	ip, ip, r0, r2
90026230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
90026232:	fb01 c102 	mla	r1, r1, r2, ip
90026236:	9a11      	ldr	r2, [sp, #68]	; 0x44
90026238:	fb03 1302 	mla	r3, r3, r2, r1
9002623c:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026240:	b1db      	cbz	r3, 9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026242:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026244:	4353      	muls	r3, r2
90026246:	1c5a      	adds	r2, r3, #1
90026248:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002624c:	4ac6      	ldr	r2, [pc, #792]	; (90026568 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002624e:	121b      	asrs	r3, r3, #8
90026250:	6812      	ldr	r2, [r2, #0]
90026252:	2bff      	cmp	r3, #255	; 0xff
90026254:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90026258:	f040 8099 	bne.w	9002638e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
9002625c:	0953      	lsrs	r3, r2, #5
9002625e:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
90026262:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026266:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
9002626a:	f02c 0c07 	bic.w	ip, ip, #7
9002626e:	ea43 0c0c 	orr.w	ip, r3, ip
90026272:	ea4c 0202 	orr.w	r2, ip, r2
90026276:	f8a8 2000 	strh.w	r2, [r8]
9002627a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
9002627c:	f108 0802 	add.w	r8, r8, #2
90026280:	441c      	add	r4, r3
90026282:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026284:	441e      	add	r6, r3
90026286:	9b0e      	ldr	r3, [sp, #56]	; 0x38
90026288:	3b01      	subs	r3, #1
9002628a:	930e      	str	r3, [sp, #56]	; 0x38
9002628c:	e762      	b.n	90026154 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
9002628e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026290:	f109 0902 	add.w	r9, r9, #2
90026294:	441c      	add	r4, r3
90026296:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026298:	441e      	add	r6, r3
9002629a:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002629c:	3b01      	subs	r3, #1
9002629e:	9309      	str	r3, [sp, #36]	; 0x24
900262a0:	e736      	b.n	90026110 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
900262a2:	d024      	beq.n	900262ee <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
900262a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900262a6:	9823      	ldr	r0, [sp, #140]	; 0x8c
900262a8:	3b01      	subs	r3, #1
900262aa:	fb00 4003 	mla	r0, r0, r3, r4
900262ae:	1400      	asrs	r0, r0, #16
900262b0:	f53f af4b 	bmi.w	9002614a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900262b4:	3901      	subs	r1, #1
900262b6:	4288      	cmp	r0, r1
900262b8:	f6bf af47 	bge.w	9002614a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900262bc:	9924      	ldr	r1, [sp, #144]	; 0x90
900262be:	fb01 6303 	mla	r3, r1, r3, r6
900262c2:	141b      	asrs	r3, r3, #16
900262c4:	f53f af41 	bmi.w	9002614a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900262c8:	3a01      	subs	r2, #1
900262ca:	4293      	cmp	r3, r2
900262cc:	f6bf af3d 	bge.w	9002614a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
900262d0:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
900262d4:	46c8      	mov	r8, r9
900262d6:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
900262da:	930e      	str	r3, [sp, #56]	; 0x38
900262dc:	f1bb 0f00 	cmp.w	fp, #0
900262e0:	f300 80b7 	bgt.w	90026452 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
900262e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
900262e6:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
900262ea:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900262ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
900262f0:	2b00      	cmp	r3, #0
900262f2:	f340 818e 	ble.w	90026612 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55a>
900262f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900262fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
900262fc:	ee30 0a04 	vadd.f32	s0, s0, s8
90026300:	ee70 0aa4 	vadd.f32	s1, s1, s9
90026304:	eef0 6a62 	vmov.f32	s13, s5
90026308:	eec7 7a00 	vdiv.f32	s15, s14, s0
9002630c:	ee31 1a05 	vadd.f32	s2, s2, s10
90026310:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026314:	ee16 4a90 	vmov	r4, s13
90026318:	eef0 6a43 	vmov.f32	s13, s6
9002631c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026320:	ee16 6a90 	vmov	r6, s13
90026324:	ee20 7aa7 	vmul.f32	s14, s1, s15
90026328:	ee61 7a27 	vmul.f32	s15, s2, s15
9002632c:	ee77 2a62 	vsub.f32	s5, s14, s5
90026330:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026334:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90026338:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
9002633c:	ee12 2a90 	vmov	r2, s5
90026340:	eef0 2a47 	vmov.f32	s5, s14
90026344:	fb92 f3f3 	sdiv	r3, r2, r3
90026348:	ee13 2a10 	vmov	r2, s6
9002634c:	9323      	str	r3, [sp, #140]	; 0x8c
9002634e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026350:	eeb0 3a67 	vmov.f32	s6, s15
90026354:	fb92 f3f3 	sdiv	r3, r2, r3
90026358:	9324      	str	r3, [sp, #144]	; 0x90
9002635a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
9002635c:	9a14      	ldr	r2, [sp, #80]	; 0x50
9002635e:	3b01      	subs	r3, #1
90026360:	930d      	str	r3, [sp, #52]	; 0x34
90026362:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026364:	bf08      	it	eq
90026366:	4613      	moveq	r3, r2
90026368:	9309      	str	r3, [sp, #36]	; 0x24
9002636a:	e6c2      	b.n	900260f2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
9002636c:	2900      	cmp	r1, #0
9002636e:	f43f af4d 	beq.w	9002620c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
90026372:	eb0a 0003 	add.w	r0, sl, r3
90026376:	0843      	lsrs	r3, r0, #1
90026378:	07c0      	lsls	r0, r0, #31
9002637a:	5cfb      	ldrb	r3, [r7, r3]
9002637c:	bf54      	ite	pl
9002637e:	f003 030f 	andpl.w	r3, r3, #15
90026382:	111b      	asrmi	r3, r3, #4
90026384:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026388:	b2db      	uxtb	r3, r3
9002638a:	930b      	str	r3, [sp, #44]	; 0x2c
9002638c:	e73e      	b.n	9002620c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
9002638e:	f8b8 e000 	ldrh.w	lr, [r8]
90026392:	fa1f fb83 	uxth.w	fp, r3
90026396:	f3c2 4107 	ubfx	r1, r2, #16, #8
9002639a:	43db      	mvns	r3, r3
9002639c:	ea4f 202e 	mov.w	r0, lr, asr #8
900263a0:	fb11 f10b 	smulbb	r1, r1, fp
900263a4:	b2db      	uxtb	r3, r3
900263a6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900263aa:	fa5f fc8c 	uxtb.w	ip, ip
900263ae:	b2d2      	uxtb	r2, r2
900263b0:	fb00 1003 	mla	r0, r0, r3, r1
900263b4:	ea4f 01ee 	mov.w	r1, lr, asr #3
900263b8:	fb1c fc0b 	smulbb	ip, ip, fp
900263bc:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900263c0:	b280      	uxth	r0, r0
900263c2:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900263c6:	fb12 fb0b 	smulbb	fp, r2, fp
900263ca:	fa5f fe8e 	uxtb.w	lr, lr
900263ce:	fb01 cc03 	mla	ip, r1, r3, ip
900263d2:	fb0e bb03 	mla	fp, lr, r3, fp
900263d6:	1c43      	adds	r3, r0, #1
900263d8:	fa1f fc8c 	uxth.w	ip, ip
900263dc:	fa1f fb8b 	uxth.w	fp, fp
900263e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900263e4:	f10c 0101 	add.w	r1, ip, #1
900263e8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
900263ec:	f10b 0001 	add.w	r0, fp, #1
900263f0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
900263f4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
900263f8:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
900263fc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
90026400:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90026404:	4318      	orrs	r0, r3
90026406:	ea40 000c 	orr.w	r0, r0, ip
9002640a:	f8a8 0000 	strh.w	r0, [r8]
9002640e:	e734      	b.n	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026410:	f113 0b01 	adds.w	fp, r3, #1
90026414:	f53f af31 	bmi.w	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026418:	45dc      	cmp	ip, fp
9002641a:	f6ff af2e 	blt.w	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002641e:	f110 0b01 	adds.w	fp, r0, #1
90026422:	f53f af2a 	bmi.w	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026426:	45de      	cmp	lr, fp
90026428:	f6ff af27 	blt.w	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
9002642c:	9302      	str	r3, [sp, #8]
9002642e:	fa0f f38e 	sxth.w	r3, lr
90026432:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
90026434:	9301      	str	r3, [sp, #4]
90026436:	fa0f f38c 	sxth.w	r3, ip
9002643a:	e9cd 0203 	strd	r0, r2, [sp, #12]
9002643e:	e9cd 1505 	strd	r1, r5, [sp, #20]
90026442:	9300      	str	r3, [sp, #0]
90026444:	463a      	mov	r2, r7
90026446:	4653      	mov	r3, sl
90026448:	4641      	mov	r1, r8
9002644a:	9815      	ldr	r0, [sp, #84]	; 0x54
9002644c:	f7ff fd4c 	bl	90025ee8 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
90026450:	e713      	b.n	9002627a <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
90026452:	1422      	asrs	r2, r4, #16
90026454:	9d0a      	ldr	r5, [sp, #40]	; 0x28
90026456:	1433      	asrs	r3, r6, #16
90026458:	f3c4 3103 	ubfx	r1, r4, #12, #4
9002645c:	f3c6 3003 	ubfx	r0, r6, #12, #4
90026460:	fb05 2303 	mla	r3, r5, r3, r2
90026464:	085a      	lsrs	r2, r3, #1
90026466:	07dd      	lsls	r5, r3, #31
90026468:	5cba      	ldrb	r2, [r7, r2]
9002646a:	bf54      	ite	pl
9002646c:	f002 020f 	andpl.w	r2, r2, #15
90026470:	1112      	asrmi	r2, r2, #4
90026472:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026476:	b2d2      	uxtb	r2, r2
90026478:	2900      	cmp	r1, #0
9002647a:	d077      	beq.n	9002656c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
9002647c:	f103 0e01 	add.w	lr, r3, #1
90026480:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
90026484:	f01e 0f01 	tst.w	lr, #1
90026488:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002648c:	bf0c      	ite	eq
9002648e:	f00c 0c0f 	andeq.w	ip, ip, #15
90026492:	ea4f 1c2c 	movne.w	ip, ip, asr #4
90026496:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002649a:	fa5f f58c 	uxtb.w	r5, ip
9002649e:	9512      	str	r5, [sp, #72]	; 0x48
900264a0:	b308      	cbz	r0, 900264e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
900264a2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
900264a4:	442b      	add	r3, r5
900264a6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900264aa:	07dd      	lsls	r5, r3, #31
900264ac:	f103 0301 	add.w	r3, r3, #1
900264b0:	f817 c00c 	ldrb.w	ip, [r7, ip]
900264b4:	bf54      	ite	pl
900264b6:	f00c 0c0f 	andpl.w	ip, ip, #15
900264ba:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900264be:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900264c2:	fa5f f58c 	uxtb.w	r5, ip
900264c6:	ea4f 0c53 	mov.w	ip, r3, lsr #1
900264ca:	950c      	str	r5, [sp, #48]	; 0x30
900264cc:	07dd      	lsls	r5, r3, #31
900264ce:	f817 c00c 	ldrb.w	ip, [r7, ip]
900264d2:	bf54      	ite	pl
900264d4:	f00c 0c0f 	andpl.w	ip, ip, #15
900264d8:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900264dc:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900264e0:	fa5f f38c 	uxtb.w	r3, ip
900264e4:	9313      	str	r3, [sp, #76]	; 0x4c
900264e6:	b289      	uxth	r1, r1
900264e8:	9d12      	ldr	r5, [sp, #72]	; 0x48
900264ea:	b280      	uxth	r0, r0
900264ec:	fb01 f300 	mul.w	r3, r1, r0
900264f0:	0109      	lsls	r1, r1, #4
900264f2:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
900264f6:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
900264fa:	1ac9      	subs	r1, r1, r3
900264fc:	b280      	uxth	r0, r0
900264fe:	b289      	uxth	r1, r1
90026500:	ebac 0c00 	sub.w	ip, ip, r0
90026504:	4369      	muls	r1, r5
90026506:	fa1f fc8c 	uxth.w	ip, ip
9002650a:	fb02 120c 	mla	r2, r2, ip, r1
9002650e:	990c      	ldr	r1, [sp, #48]	; 0x30
90026510:	fb00 2001 	mla	r0, r0, r1, r2
90026514:	9a13      	ldr	r2, [sp, #76]	; 0x4c
90026516:	fb03 0302 	mla	r3, r3, r2, r0
9002651a:	f3c3 2307 	ubfx	r3, r3, #8, #8
9002651e:	b1d3      	cbz	r3, 90026556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026520:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
90026522:	4353      	muls	r3, r2
90026524:	1c5a      	adds	r2, r3, #1
90026526:	eb02 2313 	add.w	r3, r2, r3, lsr #8
9002652a:	4a0f      	ldr	r2, [pc, #60]	; (90026568 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
9002652c:	121b      	asrs	r3, r3, #8
9002652e:	6812      	ldr	r2, [r2, #0]
90026530:	2bff      	cmp	r3, #255	; 0xff
90026532:	ea4f 2c12 	mov.w	ip, r2, lsr #8
90026536:	d12d      	bne.n	90026594 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
90026538:	0953      	lsrs	r3, r2, #5
9002653a:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
9002653e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026542:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
90026546:	f02c 0c07 	bic.w	ip, ip, #7
9002654a:	ea43 0c0c 	orr.w	ip, r3, ip
9002654e:	ea4c 0202 	orr.w	r2, ip, r2
90026552:	f8a8 2000 	strh.w	r2, [r8]
90026556:	9b23      	ldr	r3, [sp, #140]	; 0x8c
90026558:	f108 0802 	add.w	r8, r8, #2
9002655c:	f10b 3bff 	add.w	fp, fp, #4294967295
90026560:	441c      	add	r4, r3
90026562:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026564:	441e      	add	r6, r3
90026566:	e6b9      	b.n	900262dc <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
90026568:	24026f94 	.word	0x24026f94
9002656c:	2800      	cmp	r0, #0
9002656e:	d0ba      	beq.n	900264e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026570:	9d0e      	ldr	r5, [sp, #56]	; 0x38
90026572:	442b      	add	r3, r5
90026574:	ea4f 0c53 	mov.w	ip, r3, lsr #1
90026578:	07db      	lsls	r3, r3, #31
9002657a:	f817 c00c 	ldrb.w	ip, [r7, ip]
9002657e:	bf54      	ite	pl
90026580:	f00c 0c0f 	andpl.w	ip, ip, #15
90026584:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
90026588:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
9002658c:	fa5f f38c 	uxtb.w	r3, ip
90026590:	930c      	str	r3, [sp, #48]	; 0x30
90026592:	e7a8      	b.n	900264e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42e>
90026594:	f8b8 e000 	ldrh.w	lr, [r8]
90026598:	fa1f fa83 	uxth.w	sl, r3
9002659c:	f3c2 4107 	ubfx	r1, r2, #16, #8
900265a0:	43db      	mvns	r3, r3
900265a2:	ea4f 202e 	mov.w	r0, lr, asr #8
900265a6:	fb11 f10a 	smulbb	r1, r1, sl
900265aa:	b2db      	uxtb	r3, r3
900265ac:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
900265b0:	b2d2      	uxtb	r2, r2
900265b2:	fa5f fc8c 	uxtb.w	ip, ip
900265b6:	fb00 1003 	mla	r0, r0, r3, r1
900265ba:	ea4f 01ee 	mov.w	r1, lr, asr #3
900265be:	fb12 f20a 	smulbb	r2, r2, sl
900265c2:	ea4f 0ece 	mov.w	lr, lr, lsl #3
900265c6:	b280      	uxth	r0, r0
900265c8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
900265cc:	fb1c fc0a 	smulbb	ip, ip, sl
900265d0:	fa5f fe8e 	uxtb.w	lr, lr
900265d4:	fb0e 2203 	mla	r2, lr, r3, r2
900265d8:	fb01 cc03 	mla	ip, r1, r3, ip
900265dc:	1c43      	adds	r3, r0, #1
900265de:	b292      	uxth	r2, r2
900265e0:	eb03 2010 	add.w	r0, r3, r0, lsr #8
900265e4:	1c51      	adds	r1, r2, #1
900265e6:	fa1f fc8c 	uxth.w	ip, ip
900265ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
900265ee:	eb01 2112 	add.w	r1, r1, r2, lsr #8
900265f2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
900265f6:	4308      	orrs	r0, r1
900265f8:	f10c 0101 	add.w	r1, ip, #1
900265fc:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
90026600:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
90026604:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
90026608:	ea40 000c 	orr.w	r0, r0, ip
9002660c:	f8a8 0000 	strh.w	r0, [r8]
90026610:	e7a1      	b.n	90026556 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
90026612:	b017      	add	sp, #92	; 0x5c
90026614:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

90026618 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
90026618:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
9002661c:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
90026620:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
90026624:	2d00      	cmp	r5, #0
90026626:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
9002662a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
9002662e:	fb05 0e03 	mla	lr, r5, r3, r0
90026632:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
90026636:	f2c0 80b0 	blt.w	9002679a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
9002663a:	45a9      	cmp	r9, r5
9002663c:	f340 80ad 	ble.w	9002679a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
90026640:	2800      	cmp	r0, #0
90026642:	f2c0 80a8 	blt.w	90026796 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
90026646:	4580      	cmp	r8, r0
90026648:	f340 80a5 	ble.w	90026796 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
9002664c:	ea4f 045e 	mov.w	r4, lr, lsr #1
90026650:	f01e 0f01 	tst.w	lr, #1
90026654:	5d16      	ldrb	r6, [r2, r4]
90026656:	bf0c      	ite	eq
90026658:	f006 060f 	andeq.w	r6, r6, #15
9002665c:	1136      	asrne	r6, r6, #4
9002665e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
90026662:	b2f6      	uxtb	r6, r6
90026664:	1c44      	adds	r4, r0, #1
90026666:	f100 809b 	bmi.w	900267a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
9002666a:	45a0      	cmp	r8, r4
9002666c:	f340 8098 	ble.w	900267a0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
90026670:	2f00      	cmp	r7, #0
90026672:	f000 8097 	beq.w	900267a4 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
90026676:	f10e 0a01 	add.w	sl, lr, #1
9002667a:	ea4f 045a 	mov.w	r4, sl, lsr #1
9002667e:	f01a 0f01 	tst.w	sl, #1
90026682:	5d14      	ldrb	r4, [r2, r4]
90026684:	bf0c      	ite	eq
90026686:	f004 040f 	andeq.w	r4, r4, #15
9002668a:	1124      	asrne	r4, r4, #4
9002668c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
90026690:	b2e4      	uxtb	r4, r4
90026692:	3501      	adds	r5, #1
90026694:	f100 808a 	bmi.w	900267ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
90026698:	45a9      	cmp	r9, r5
9002669a:	f340 8087 	ble.w	900267ac <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
9002669e:	f1bc 0f00 	cmp.w	ip, #0
900266a2:	f000 8086 	beq.w	900267b2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
900266a6:	2800      	cmp	r0, #0
900266a8:	db7e      	blt.n	900267a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900266aa:	4580      	cmp	r8, r0
900266ac:	dd7c      	ble.n	900267a8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
900266ae:	eb03 090e 	add.w	r9, r3, lr
900266b2:	ea4f 0559 	mov.w	r5, r9, lsr #1
900266b6:	f019 0f01 	tst.w	r9, #1
900266ba:	5d55      	ldrb	r5, [r2, r5]
900266bc:	bf0c      	ite	eq
900266be:	f005 050f 	andeq.w	r5, r5, #15
900266c2:	112d      	asrne	r5, r5, #4
900266c4:	eb05 1505 	add.w	r5, r5, r5, lsl #4
900266c8:	b2ed      	uxtb	r5, r5
900266ca:	3001      	adds	r0, #1
900266cc:	d474      	bmi.n	900267b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900266ce:	4580      	cmp	r8, r0
900266d0:	dd72      	ble.n	900267b8 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
900266d2:	2f00      	cmp	r7, #0
900266d4:	d072      	beq.n	900267bc <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
900266d6:	3301      	adds	r3, #1
900266d8:	449e      	add	lr, r3
900266da:	ea4f 035e 	mov.w	r3, lr, lsr #1
900266de:	f01e 0f01 	tst.w	lr, #1
900266e2:	5cd0      	ldrb	r0, [r2, r3]
900266e4:	bf0c      	ite	eq
900266e6:	f000 000f 	andeq.w	r0, r0, #15
900266ea:	1100      	asrne	r0, r0, #4
900266ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900266f0:	b2c3      	uxtb	r3, r0
900266f2:	b2ba      	uxth	r2, r7
900266f4:	fa1f fc8c 	uxth.w	ip, ip
900266f8:	fb02 f00c 	mul.w	r0, r2, ip
900266fc:	0112      	lsls	r2, r2, #4
900266fe:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
90026702:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
90026706:	1a12      	subs	r2, r2, r0
90026708:	fa1f fc8c 	uxth.w	ip, ip
9002670c:	b292      	uxth	r2, r2
9002670e:	eba7 070c 	sub.w	r7, r7, ip
90026712:	4362      	muls	r2, r4
90026714:	b2bf      	uxth	r7, r7
90026716:	fb06 2207 	mla	r2, r6, r7, r2
9002671a:	fb0c 2505 	mla	r5, ip, r5, r2
9002671e:	fb00 5303 	mla	r3, r0, r3, r5
90026722:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026726:	b3a3      	cbz	r3, 90026792 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
90026728:	4a25      	ldr	r2, [pc, #148]	; (900267c0 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
9002672a:	880e      	ldrh	r6, [r1, #0]
9002672c:	6815      	ldr	r5, [r2, #0]
9002672e:	b29a      	uxth	r2, r3
90026730:	1234      	asrs	r4, r6, #8
90026732:	43db      	mvns	r3, r3
90026734:	f3c5 4007 	ubfx	r0, r5, #16, #8
90026738:	f3c5 2707 	ubfx	r7, r5, #8, #8
9002673c:	b2db      	uxtb	r3, r3
9002673e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
90026742:	fb10 f002 	smulbb	r0, r0, r2
90026746:	b2ed      	uxtb	r5, r5
90026748:	fb17 f702 	smulbb	r7, r7, r2
9002674c:	fb04 0403 	mla	r4, r4, r3, r0
90026750:	10f0      	asrs	r0, r6, #3
90026752:	fb15 f202 	smulbb	r2, r5, r2
90026756:	00f6      	lsls	r6, r6, #3
90026758:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
9002675c:	b2a4      	uxth	r4, r4
9002675e:	b2f6      	uxtb	r6, r6
90026760:	fb00 7003 	mla	r0, r0, r3, r7
90026764:	fb06 2303 	mla	r3, r6, r3, r2
90026768:	b280      	uxth	r0, r0
9002676a:	b29a      	uxth	r2, r3
9002676c:	1c63      	adds	r3, r4, #1
9002676e:	eb03 2414 	add.w	r4, r3, r4, lsr #8
90026772:	1c53      	adds	r3, r2, #1
90026774:	eb03 2312 	add.w	r3, r3, r2, lsr #8
90026778:	1c42      	adds	r2, r0, #1
9002677a:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
9002677e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
90026782:	f3c3 23c4 	ubfx	r3, r3, #11, #5
90026786:	0940      	lsrs	r0, r0, #5
90026788:	4323      	orrs	r3, r4
9002678a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
9002678e:	4303      	orrs	r3, r0
90026790:	800b      	strh	r3, [r1, #0]
90026792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
90026796:	2600      	movs	r6, #0
90026798:	e764      	b.n	90026664 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
9002679a:	2400      	movs	r4, #0
9002679c:	4626      	mov	r6, r4
9002679e:	e778      	b.n	90026692 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900267a0:	2400      	movs	r4, #0
900267a2:	e776      	b.n	90026692 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900267a4:	463c      	mov	r4, r7
900267a6:	e774      	b.n	90026692 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
900267a8:	2500      	movs	r5, #0
900267aa:	e78e      	b.n	900266ca <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
900267ac:	2300      	movs	r3, #0
900267ae:	461d      	mov	r5, r3
900267b0:	e79f      	b.n	900266f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900267b2:	4663      	mov	r3, ip
900267b4:	4665      	mov	r5, ip
900267b6:	e79c      	b.n	900266f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900267b8:	2300      	movs	r3, #0
900267ba:	e79a      	b.n	900266f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900267bc:	463b      	mov	r3, r7
900267be:	e798      	b.n	900266f2 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
900267c0:	24026f94 	.word	0x24026f94

900267c4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
900267c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
900267c8:	b093      	sub	sp, #76	; 0x4c
900267ca:	461d      	mov	r5, r3
900267cc:	920c      	str	r2, [sp, #48]	; 0x30
900267ce:	9a21      	ldr	r2, [sp, #132]	; 0x84
900267d0:	9011      	str	r0, [sp, #68]	; 0x44
900267d2:	9107      	str	r1, [sp, #28]
900267d4:	6850      	ldr	r0, [r2, #4]
900267d6:	6812      	ldr	r2, [r2, #0]
900267d8:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
900267dc:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
900267e0:	fb00 1303 	mla	r3, r0, r3, r1
900267e4:	eb02 0943 	add.w	r9, r2, r3, lsl #1
900267e8:	9b24      	ldr	r3, [sp, #144]	; 0x90
900267ea:	689b      	ldr	r3, [r3, #8]
900267ec:	3301      	adds	r3, #1
900267ee:	f023 0301 	bic.w	r3, r3, #1
900267f2:	9306      	str	r3, [sp, #24]
900267f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
900267f6:	681f      	ldr	r7, [r3, #0]
900267f8:	9b07      	ldr	r3, [sp, #28]
900267fa:	2b00      	cmp	r3, #0
900267fc:	dc03      	bgt.n	90026806 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
900267fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
90026800:	2b00      	cmp	r3, #0
90026802:	f340 8267 	ble.w	90026cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
90026806:	9b24      	ldr	r3, [sp, #144]	; 0x90
90026808:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
9002680c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
90026810:	1e48      	subs	r0, r1, #1
90026812:	f102 3cff 	add.w	ip, r2, #4294967295
90026816:	2d00      	cmp	r5, #0
90026818:	f340 80b7 	ble.w	9002698a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
9002681c:	ea5f 4e24 	movs.w	lr, r4, asr #16
90026820:	ea4f 4326 	mov.w	r3, r6, asr #16
90026824:	d406      	bmi.n	90026834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
90026826:	4586      	cmp	lr, r0
90026828:	da04      	bge.n	90026834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002682a:	2b00      	cmp	r3, #0
9002682c:	db02      	blt.n	90026834 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
9002682e:	4563      	cmp	r3, ip
90026830:	f2c0 80ac 	blt.w	9002698c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
90026834:	f11e 0e01 	adds.w	lr, lr, #1
90026838:	f100 809f 	bmi.w	9002697a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002683c:	4571      	cmp	r1, lr
9002683e:	f2c0 809c 	blt.w	9002697a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026842:	3301      	adds	r3, #1
90026844:	f100 8099 	bmi.w	9002697a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
90026848:	429a      	cmp	r2, r3
9002684a:	f2c0 8096 	blt.w	9002697a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
9002684e:	46c8      	mov	r8, r9
90026850:	f9bd a018 	ldrsh.w	sl, [sp, #24]
90026854:	9509      	str	r5, [sp, #36]	; 0x24
90026856:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026858:	2b00      	cmp	r3, #0
9002685a:	f340 80b5 	ble.w	900269c8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
9002685e:	f3c4 3303 	ubfx	r3, r4, #12, #4
90026862:	1430      	asrs	r0, r6, #16
90026864:	f3c6 3103 	ubfx	r1, r6, #12, #4
90026868:	9308      	str	r3, [sp, #32]
9002686a:	9b24      	ldr	r3, [sp, #144]	; 0x90
9002686c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
90026870:	1423      	asrs	r3, r4, #16
90026872:	f100 813f 	bmi.w	90026af4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026876:	f10c 3bff 	add.w	fp, ip, #4294967295
9002687a:	455b      	cmp	r3, fp
9002687c:	f280 813a 	bge.w	90026af4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026880:	2800      	cmp	r0, #0
90026882:	f2c0 8137 	blt.w	90026af4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026886:	f10e 3bff 	add.w	fp, lr, #4294967295
9002688a:	4558      	cmp	r0, fp
9002688c:	f280 8132 	bge.w	90026af4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
90026890:	9a06      	ldr	r2, [sp, #24]
90026892:	fb00 3302 	mla	r3, r0, r2, r3
90026896:	0858      	lsrs	r0, r3, #1
90026898:	07da      	lsls	r2, r3, #31
9002689a:	9a08      	ldr	r2, [sp, #32]
9002689c:	f817 c000 	ldrb.w	ip, [r7, r0]
900268a0:	bf54      	ite	pl
900268a2:	f00c 0c0f 	andpl.w	ip, ip, #15
900268a6:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
900268aa:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
900268ae:	fa5f fc8c 	uxtb.w	ip, ip
900268b2:	2a00      	cmp	r2, #0
900268b4:	f000 80cc 	beq.w	90026a50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
900268b8:	1c58      	adds	r0, r3, #1
900268ba:	ea4f 0e50 	mov.w	lr, r0, lsr #1
900268be:	07c0      	lsls	r0, r0, #31
900268c0:	f817 e00e 	ldrb.w	lr, [r7, lr]
900268c4:	bf54      	ite	pl
900268c6:	f00e 0e0f 	andpl.w	lr, lr, #15
900268ca:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
900268ce:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
900268d2:	fa5f fe8e 	uxtb.w	lr, lr
900268d6:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
900268da:	b1b9      	cbz	r1, 9002690c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
900268dc:	4453      	add	r3, sl
900268de:	0858      	lsrs	r0, r3, #1
900268e0:	07da      	lsls	r2, r3, #31
900268e2:	5c38      	ldrb	r0, [r7, r0]
900268e4:	bf54      	ite	pl
900268e6:	f000 000f 	andpl.w	r0, r0, #15
900268ea:	1100      	asrmi	r0, r0, #4
900268ec:	eb00 1000 	add.w	r0, r0, r0, lsl #4
900268f0:	b2c0      	uxtb	r0, r0
900268f2:	900a      	str	r0, [sp, #40]	; 0x28
900268f4:	1c58      	adds	r0, r3, #1
900268f6:	0843      	lsrs	r3, r0, #1
900268f8:	07c2      	lsls	r2, r0, #31
900268fa:	5cfb      	ldrb	r3, [r7, r3]
900268fc:	bf54      	ite	pl
900268fe:	f003 030f 	andpl.w	r3, r3, #15
90026902:	111b      	asrmi	r3, r3, #4
90026904:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026908:	b2db      	uxtb	r3, r3
9002690a:	930e      	str	r3, [sp, #56]	; 0x38
9002690c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
90026910:	b289      	uxth	r1, r1
90026912:	fb02 f301 	mul.w	r3, r2, r1
90026916:	0112      	lsls	r2, r2, #4
90026918:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
9002691c:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
90026920:	1ad2      	subs	r2, r2, r3
90026922:	b289      	uxth	r1, r1
90026924:	b292      	uxth	r2, r2
90026926:	1a40      	subs	r0, r0, r1
90026928:	fa1f fe80 	uxth.w	lr, r0
9002692c:	980d      	ldr	r0, [sp, #52]	; 0x34
9002692e:	4342      	muls	r2, r0
90026930:	fb0c 2c0e 	mla	ip, ip, lr, r2
90026934:	9a0a      	ldr	r2, [sp, #40]	; 0x28
90026936:	fb01 c102 	mla	r1, r1, r2, ip
9002693a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
9002693c:	fb03 1302 	mla	r3, r3, r2, r1
90026940:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026944:	2bff      	cmp	r3, #255	; 0xff
90026946:	f040 8094 	bne.w	90026a72 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
9002694a:	4bbf      	ldr	r3, [pc, #764]	; (90026c48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
9002694c:	681a      	ldr	r2, [r3, #0]
9002694e:	4bbf      	ldr	r3, [pc, #764]	; (90026c4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026950:	0951      	lsrs	r1, r2, #5
90026952:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026956:	f3c2 02c4 	ubfx	r2, r2, #3, #5
9002695a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
9002695e:	430b      	orrs	r3, r1
90026960:	4313      	orrs	r3, r2
90026962:	f8a8 3000 	strh.w	r3, [r8]
90026966:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026968:	f108 0802 	add.w	r8, r8, #2
9002696c:	441c      	add	r4, r3
9002696e:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026970:	441e      	add	r6, r3
90026972:	9b09      	ldr	r3, [sp, #36]	; 0x24
90026974:	3b01      	subs	r3, #1
90026976:	9309      	str	r3, [sp, #36]	; 0x24
90026978:	e76d      	b.n	90026856 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
9002697a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
9002697c:	3d01      	subs	r5, #1
9002697e:	f109 0902 	add.w	r9, r9, #2
90026982:	441c      	add	r4, r3
90026984:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026986:	441e      	add	r6, r3
90026988:	e745      	b.n	90026816 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
9002698a:	d021      	beq.n	900269d0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
9002698c:	1e6b      	subs	r3, r5, #1
9002698e:	981f      	ldr	r0, [sp, #124]	; 0x7c
90026990:	fb00 4003 	mla	r0, r0, r3, r4
90026994:	1400      	asrs	r0, r0, #16
90026996:	f53f af5a 	bmi.w	9002684e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
9002699a:	3901      	subs	r1, #1
9002699c:	4288      	cmp	r0, r1
9002699e:	f6bf af56 	bge.w	9002684e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900269a2:	9920      	ldr	r1, [sp, #128]	; 0x80
900269a4:	fb01 6303 	mla	r3, r1, r3, r6
900269a8:	141b      	asrs	r3, r3, #16
900269aa:	f53f af50 	bmi.w	9002684e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900269ae:	3a01      	subs	r2, #1
900269b0:	4293      	cmp	r3, r2
900269b2:	f6bf af4c 	bge.w	9002684e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
900269b6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
900269ba:	46a8      	mov	r8, r5
900269bc:	46ce      	mov	lr, r9
900269be:	9308      	str	r3, [sp, #32]
900269c0:	f1b8 0f00 	cmp.w	r8, #0
900269c4:	f300 80b6 	bgt.w	90026b34 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x370>
900269c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
900269cc:	eb09 0945 	add.w	r9, r9, r5, lsl #1
900269d0:	9b07      	ldr	r3, [sp, #28]
900269d2:	2b00      	cmp	r3, #0
900269d4:	f340 817e 	ble.w	90026cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x510>
900269d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
900269dc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
900269de:	ee30 0a04 	vadd.f32	s0, s0, s8
900269e2:	ee70 0aa4 	vadd.f32	s1, s1, s9
900269e6:	eef0 6a62 	vmov.f32	s13, s5
900269ea:	eec7 7a00 	vdiv.f32	s15, s14, s0
900269ee:	ee31 1a05 	vadd.f32	s2, s2, s10
900269f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
900269f6:	ee16 4a90 	vmov	r4, s13
900269fa:	eef0 6a43 	vmov.f32	s13, s6
900269fe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
90026a02:	ee16 6a90 	vmov	r6, s13
90026a06:	ee20 7aa7 	vmul.f32	s14, s1, s15
90026a0a:	ee61 7a27 	vmul.f32	s15, s2, s15
90026a0e:	ee77 2a62 	vsub.f32	s5, s14, s5
90026a12:	ee37 3ac3 	vsub.f32	s6, s15, s6
90026a16:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
90026a1a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
90026a1e:	ee12 2a90 	vmov	r2, s5
90026a22:	eef0 2a47 	vmov.f32	s5, s14
90026a26:	fb92 f3f3 	sdiv	r3, r2, r3
90026a2a:	ee13 2a10 	vmov	r2, s6
90026a2e:	931f      	str	r3, [sp, #124]	; 0x7c
90026a30:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026a32:	eeb0 3a67 	vmov.f32	s6, s15
90026a36:	fb92 f3f3 	sdiv	r3, r2, r3
90026a3a:	9320      	str	r3, [sp, #128]	; 0x80
90026a3c:	9b07      	ldr	r3, [sp, #28]
90026a3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
90026a40:	3b01      	subs	r3, #1
90026a42:	9307      	str	r3, [sp, #28]
90026a44:	bf08      	it	eq
90026a46:	4615      	moveq	r5, r2
90026a48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
90026a4a:	bf18      	it	ne
90026a4c:	461d      	movne	r5, r3
90026a4e:	e6d3      	b.n	900267f8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
90026a50:	2900      	cmp	r1, #0
90026a52:	f43f af5b 	beq.w	9002690c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026a56:	eb0a 0003 	add.w	r0, sl, r3
90026a5a:	0843      	lsrs	r3, r0, #1
90026a5c:	07c0      	lsls	r0, r0, #31
90026a5e:	5cfb      	ldrb	r3, [r7, r3]
90026a60:	bf54      	ite	pl
90026a62:	f003 030f 	andpl.w	r3, r3, #15
90026a66:	111b      	asrmi	r3, r3, #4
90026a68:	eb03 1303 	add.w	r3, r3, r3, lsl #4
90026a6c:	b2db      	uxtb	r3, r3
90026a6e:	930a      	str	r3, [sp, #40]	; 0x28
90026a70:	e74c      	b.n	9002690c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
90026a72:	2b00      	cmp	r3, #0
90026a74:	f43f af77 	beq.w	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026a78:	4a73      	ldr	r2, [pc, #460]	; (90026c48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026a7a:	fa1f fe83 	uxth.w	lr, r3
90026a7e:	f8b8 c000 	ldrh.w	ip, [r8]
90026a82:	43db      	mvns	r3, r3
90026a84:	6810      	ldr	r0, [r2, #0]
90026a86:	ea4f 212c 	mov.w	r1, ip, asr #8
90026a8a:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026a8e:	b2db      	uxtb	r3, r3
90026a90:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026a94:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026a98:	fb12 f20e 	smulbb	r2, r2, lr
90026a9c:	b2c0      	uxtb	r0, r0
90026a9e:	fb1b fb0e 	smulbb	fp, fp, lr
90026aa2:	fb01 2103 	mla	r1, r1, r3, r2
90026aa6:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026aaa:	fb10 fe0e 	smulbb	lr, r0, lr
90026aae:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026ab2:	b289      	uxth	r1, r1
90026ab4:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026ab8:	fa5f fc8c 	uxtb.w	ip, ip
90026abc:	fb02 b203 	mla	r2, r2, r3, fp
90026ac0:	1c48      	adds	r0, r1, #1
90026ac2:	fb0c e303 	mla	r3, ip, r3, lr
90026ac6:	b292      	uxth	r2, r2
90026ac8:	b29b      	uxth	r3, r3
90026aca:	eb00 2111 	add.w	r1, r0, r1, lsr #8
90026ace:	f102 0b01 	add.w	fp, r2, #1
90026ad2:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
90026ad6:	1c59      	adds	r1, r3, #1
90026ad8:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026adc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
90026ae0:	0952      	lsrs	r2, r2, #5
90026ae2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
90026ae6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026aea:	4301      	orrs	r1, r0
90026aec:	4311      	orrs	r1, r2
90026aee:	f8a8 1000 	strh.w	r1, [r8]
90026af2:	e738      	b.n	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026af4:	f113 0b01 	adds.w	fp, r3, #1
90026af8:	f53f af35 	bmi.w	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026afc:	45dc      	cmp	ip, fp
90026afe:	f6ff af32 	blt.w	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026b02:	f110 0b01 	adds.w	fp, r0, #1
90026b06:	f53f af2e 	bmi.w	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026b0a:	45de      	cmp	lr, fp
90026b0c:	f6ff af2b 	blt.w	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026b10:	9302      	str	r3, [sp, #8]
90026b12:	fa0f f38e 	sxth.w	r3, lr
90026b16:	9a08      	ldr	r2, [sp, #32]
90026b18:	9301      	str	r3, [sp, #4]
90026b1a:	fa0f f38c 	sxth.w	r3, ip
90026b1e:	9105      	str	r1, [sp, #20]
90026b20:	4641      	mov	r1, r8
90026b22:	9300      	str	r3, [sp, #0]
90026b24:	4653      	mov	r3, sl
90026b26:	e9cd 0203 	strd	r0, r2, [sp, #12]
90026b2a:	463a      	mov	r2, r7
90026b2c:	9811      	ldr	r0, [sp, #68]	; 0x44
90026b2e:	f7ff fd73 	bl	90026618 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
90026b32:	e718      	b.n	90026966 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
90026b34:	1422      	asrs	r2, r4, #16
90026b36:	9906      	ldr	r1, [sp, #24]
90026b38:	1433      	asrs	r3, r6, #16
90026b3a:	f3c4 3003 	ubfx	r0, r4, #12, #4
90026b3e:	f3c6 3c03 	ubfx	ip, r6, #12, #4
90026b42:	fb01 2303 	mla	r3, r1, r3, r2
90026b46:	085a      	lsrs	r2, r3, #1
90026b48:	07d9      	lsls	r1, r3, #31
90026b4a:	5cba      	ldrb	r2, [r7, r2]
90026b4c:	bf54      	ite	pl
90026b4e:	f002 020f 	andpl.w	r2, r2, #15
90026b52:	1112      	asrmi	r2, r2, #4
90026b54:	eb02 1202 	add.w	r2, r2, r2, lsl #4
90026b58:	b2d2      	uxtb	r2, r2
90026b5a:	2800      	cmp	r0, #0
90026b5c:	d063      	beq.n	90026c26 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
90026b5e:	f103 0a01 	add.w	sl, r3, #1
90026b62:	ea4f 015a 	mov.w	r1, sl, lsr #1
90026b66:	f01a 0f01 	tst.w	sl, #1
90026b6a:	5c79      	ldrb	r1, [r7, r1]
90026b6c:	bf0c      	ite	eq
90026b6e:	f001 010f 	andeq.w	r1, r1, #15
90026b72:	1109      	asrne	r1, r1, #4
90026b74:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026b78:	b2c9      	uxtb	r1, r1
90026b7a:	910f      	str	r1, [sp, #60]	; 0x3c
90026b7c:	f1bc 0f00 	cmp.w	ip, #0
90026b80:	d01a      	beq.n	90026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026b82:	9908      	ldr	r1, [sp, #32]
90026b84:	440b      	add	r3, r1
90026b86:	0859      	lsrs	r1, r3, #1
90026b88:	f013 0f01 	tst.w	r3, #1
90026b8c:	f103 0301 	add.w	r3, r3, #1
90026b90:	5c79      	ldrb	r1, [r7, r1]
90026b92:	bf0c      	ite	eq
90026b94:	f001 010f 	andeq.w	r1, r1, #15
90026b98:	1109      	asrne	r1, r1, #4
90026b9a:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026b9e:	b2c9      	uxtb	r1, r1
90026ba0:	910b      	str	r1, [sp, #44]	; 0x2c
90026ba2:	0859      	lsrs	r1, r3, #1
90026ba4:	07db      	lsls	r3, r3, #31
90026ba6:	5c79      	ldrb	r1, [r7, r1]
90026ba8:	bf54      	ite	pl
90026baa:	f001 010f 	andpl.w	r1, r1, #15
90026bae:	1109      	asrmi	r1, r1, #4
90026bb0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026bb4:	b2c9      	uxtb	r1, r1
90026bb6:	9110      	str	r1, [sp, #64]	; 0x40
90026bb8:	b280      	uxth	r0, r0
90026bba:	fa1f fc8c 	uxth.w	ip, ip
90026bbe:	fb00 f30c 	mul.w	r3, r0, ip
90026bc2:	0100      	lsls	r0, r0, #4
90026bc4:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
90026bc8:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
90026bcc:	1ac0      	subs	r0, r0, r3
90026bce:	fa1f fc8c 	uxth.w	ip, ip
90026bd2:	b280      	uxth	r0, r0
90026bd4:	eba1 010c 	sub.w	r1, r1, ip
90026bd8:	fa1f fa81 	uxth.w	sl, r1
90026bdc:	990f      	ldr	r1, [sp, #60]	; 0x3c
90026bde:	4348      	muls	r0, r1
90026be0:	990b      	ldr	r1, [sp, #44]	; 0x2c
90026be2:	fb02 020a 	mla	r2, r2, sl, r0
90026be6:	fb0c 2c01 	mla	ip, ip, r1, r2
90026bea:	9a10      	ldr	r2, [sp, #64]	; 0x40
90026bec:	fb03 c302 	mla	r3, r3, r2, ip
90026bf0:	f3c3 2307 	ubfx	r3, r3, #8, #8
90026bf4:	2bff      	cmp	r3, #255	; 0xff
90026bf6:	d12b      	bne.n	90026c50 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48c>
90026bf8:	4b13      	ldr	r3, [pc, #76]	; (90026c48 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
90026bfa:	681a      	ldr	r2, [r3, #0]
90026bfc:	4b13      	ldr	r3, [pc, #76]	; (90026c4c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>)
90026bfe:	0951      	lsrs	r1, r2, #5
90026c00:	ea03 2312 	and.w	r3, r3, r2, lsr #8
90026c04:	f3c2 02c4 	ubfx	r2, r2, #3, #5
90026c08:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
90026c0c:	430b      	orrs	r3, r1
90026c0e:	4313      	orrs	r3, r2
90026c10:	f8ae 3000 	strh.w	r3, [lr]
90026c14:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
90026c16:	f10e 0e02 	add.w	lr, lr, #2
90026c1a:	f108 38ff 	add.w	r8, r8, #4294967295
90026c1e:	441c      	add	r4, r3
90026c20:	9b20      	ldr	r3, [sp, #128]	; 0x80
90026c22:	441e      	add	r6, r3
90026c24:	e6cc      	b.n	900269c0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
90026c26:	f1bc 0f00 	cmp.w	ip, #0
90026c2a:	d0c5      	beq.n	90026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026c2c:	9908      	ldr	r1, [sp, #32]
90026c2e:	440b      	add	r3, r1
90026c30:	0859      	lsrs	r1, r3, #1
90026c32:	07db      	lsls	r3, r3, #31
90026c34:	5c79      	ldrb	r1, [r7, r1]
90026c36:	bf54      	ite	pl
90026c38:	f001 010f 	andpl.w	r1, r1, #15
90026c3c:	1109      	asrmi	r1, r1, #4
90026c3e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
90026c42:	b2c9      	uxtb	r1, r1
90026c44:	910b      	str	r1, [sp, #44]	; 0x2c
90026c46:	e7b7      	b.n	90026bb8 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
90026c48:	24026f94 	.word	0x24026f94
90026c4c:	fffff800 	.word	0xfffff800
90026c50:	2b00      	cmp	r3, #0
90026c52:	d0df      	beq.n	90026c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026c54:	4a21      	ldr	r2, [pc, #132]	; (90026cdc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x518>)
90026c56:	fa1f fa83 	uxth.w	sl, r3
90026c5a:	f8be c000 	ldrh.w	ip, [lr]
90026c5e:	43db      	mvns	r3, r3
90026c60:	6810      	ldr	r0, [r2, #0]
90026c62:	ea4f 212c 	mov.w	r1, ip, asr #8
90026c66:	f3c0 4207 	ubfx	r2, r0, #16, #8
90026c6a:	b2db      	uxtb	r3, r3
90026c6c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
90026c70:	f3c0 2b07 	ubfx	fp, r0, #8, #8
90026c74:	fb12 f20a 	smulbb	r2, r2, sl
90026c78:	b2c0      	uxtb	r0, r0
90026c7a:	fb1b fb0a 	smulbb	fp, fp, sl
90026c7e:	fb01 2103 	mla	r1, r1, r3, r2
90026c82:	ea4f 02ec 	mov.w	r2, ip, asr #3
90026c86:	fb10 f00a 	smulbb	r0, r0, sl
90026c8a:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
90026c8e:	b289      	uxth	r1, r1
90026c90:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
90026c94:	fa5f fc8c 	uxtb.w	ip, ip
90026c98:	fb02 b203 	mla	r2, r2, r3, fp
90026c9c:	fb0c 0003 	mla	r0, ip, r3, r0
90026ca0:	1c4b      	adds	r3, r1, #1
90026ca2:	b292      	uxth	r2, r2
90026ca4:	b280      	uxth	r0, r0
90026ca6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
90026caa:	f100 0b01 	add.w	fp, r0, #1
90026cae:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
90026cb2:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
90026cb6:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
90026cba:	ea4b 0101 	orr.w	r1, fp, r1
90026cbe:	f102 0b01 	add.w	fp, r2, #1
90026cc2:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
90026cc6:	0952      	lsrs	r2, r2, #5
90026cc8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
90026ccc:	4311      	orrs	r1, r2
90026cce:	f8ae 1000 	strh.w	r1, [lr]
90026cd2:	e79f      	b.n	90026c14 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x450>
90026cd4:	b013      	add	sp, #76	; 0x4c
90026cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
90026cda:	bf00      	nop
90026cdc:	24026f94 	.word	0x24026f94

90026ce0 <CRC_Lock>:
90026ce0:	4a20      	ldr	r2, [pc, #128]	; (90026d64 <CRC_Lock+0x84>)
90026ce2:	b530      	push	{r4, r5, lr}
90026ce4:	6813      	ldr	r3, [r2, #0]
90026ce6:	f64f 74f0 	movw	r4, #65520	; 0xfff0
90026cea:	f24c 2540 	movw	r5, #49728	; 0xc240
90026cee:	f023 0301 	bic.w	r3, r3, #1
90026cf2:	6013      	str	r3, [r2, #0]
90026cf4:	4b1c      	ldr	r3, [pc, #112]	; (90026d68 <CRC_Lock+0x88>)
90026cf6:	681a      	ldr	r2, [r3, #0]
90026cf8:	4022      	ands	r2, r4
90026cfa:	42aa      	cmp	r2, r5
90026cfc:	d005      	beq.n	90026d0a <CRC_Lock+0x2a>
90026cfe:	681b      	ldr	r3, [r3, #0]
90026d00:	f24c 2270 	movw	r2, #49776	; 0xc270
90026d04:	4023      	ands	r3, r4
90026d06:	4293      	cmp	r3, r2
90026d08:	d124      	bne.n	90026d54 <CRC_Lock+0x74>
90026d0a:	4b18      	ldr	r3, [pc, #96]	; (90026d6c <CRC_Lock+0x8c>)
90026d0c:	681b      	ldr	r3, [r3, #0]
90026d0e:	bb0b      	cbnz	r3, 90026d54 <CRC_Lock+0x74>
90026d10:	4b17      	ldr	r3, [pc, #92]	; (90026d70 <CRC_Lock+0x90>)
90026d12:	681a      	ldr	r2, [r3, #0]
90026d14:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026d18:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
90026d1c:	d00d      	beq.n	90026d3a <CRC_Lock+0x5a>
90026d1e:	681a      	ldr	r2, [r3, #0]
90026d20:	f240 4483 	movw	r4, #1155	; 0x483
90026d24:	f3c2 020b 	ubfx	r2, r2, #0, #12
90026d28:	42a2      	cmp	r2, r4
90026d2a:	d006      	beq.n	90026d3a <CRC_Lock+0x5a>
90026d2c:	681b      	ldr	r3, [r3, #0]
90026d2e:	f240 4285 	movw	r2, #1157	; 0x485
90026d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
90026d36:	4293      	cmp	r3, r2
90026d38:	d10c      	bne.n	90026d54 <CRC_Lock+0x74>
90026d3a:	4b0e      	ldr	r3, [pc, #56]	; (90026d74 <CRC_Lock+0x94>)
90026d3c:	2201      	movs	r2, #1
90026d3e:	601a      	str	r2, [r3, #0]
90026d40:	681a      	ldr	r2, [r3, #0]
90026d42:	2a00      	cmp	r2, #0
90026d44:	d1fc      	bne.n	90026d40 <CRC_Lock+0x60>
90026d46:	4b0c      	ldr	r3, [pc, #48]	; (90026d78 <CRC_Lock+0x98>)
90026d48:	6018      	str	r0, [r3, #0]
90026d4a:	6818      	ldr	r0, [r3, #0]
90026d4c:	1a43      	subs	r3, r0, r1
90026d4e:	4258      	negs	r0, r3
90026d50:	4158      	adcs	r0, r3
90026d52:	bd30      	pop	{r4, r5, pc}
90026d54:	4b09      	ldr	r3, [pc, #36]	; (90026d7c <CRC_Lock+0x9c>)
90026d56:	2201      	movs	r2, #1
90026d58:	601a      	str	r2, [r3, #0]
90026d5a:	681a      	ldr	r2, [r3, #0]
90026d5c:	2a00      	cmp	r2, #0
90026d5e:	d1fc      	bne.n	90026d5a <CRC_Lock+0x7a>
90026d60:	4b07      	ldr	r3, [pc, #28]	; (90026d80 <CRC_Lock+0xa0>)
90026d62:	e7f1      	b.n	90026d48 <CRC_Lock+0x68>
90026d64:	e0002000 	.word	0xe0002000
90026d68:	e000ed00 	.word	0xe000ed00
90026d6c:	e0042000 	.word	0xe0042000
90026d70:	5c001000 	.word	0x5c001000
90026d74:	58024c08 	.word	0x58024c08
90026d78:	58024c00 	.word	0x58024c00
90026d7c:	40023008 	.word	0x40023008
90026d80:	40023000 	.word	0x40023000

90026d84 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
90026d84:	6101      	str	r1, [r0, #16]
90026d86:	4770      	bx	lr

90026d88 <_ZN8touchgfx8Gestures4tickEv>:
90026d88:	7b83      	ldrb	r3, [r0, #14]
90026d8a:	b14b      	cbz	r3, 90026da0 <_ZN8touchgfx8Gestures4tickEv+0x18>
90026d8c:	8903      	ldrh	r3, [r0, #8]
90026d8e:	3301      	adds	r3, #1
90026d90:	b29b      	uxth	r3, r3
90026d92:	2b07      	cmp	r3, #7
90026d94:	8103      	strh	r3, [r0, #8]
90026d96:	bf81      	itttt	hi
90026d98:	2300      	movhi	r3, #0
90026d9a:	8143      	strhhi	r3, [r0, #10]
90026d9c:	8183      	strhhi	r3, [r0, #12]
90026d9e:	7383      	strbhi	r3, [r0, #14]
90026da0:	4770      	bx	lr
	...

90026da4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
90026da4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
90026da8:	4698      	mov	r8, r3
90026daa:	8883      	ldrh	r3, [r0, #4]
90026dac:	4604      	mov	r4, r0
90026dae:	4617      	mov	r7, r2
90026db0:	f8ad 3006 	strh.w	r3, [sp, #6]
90026db4:	eba8 0303 	sub.w	r3, r8, r3
90026db8:	4a19      	ldr	r2, [pc, #100]	; (90026e20 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
90026dba:	460e      	mov	r6, r1
90026dbc:	b21b      	sxth	r3, r3
90026dbe:	88c1      	ldrh	r1, [r0, #6]
90026dc0:	9200      	str	r2, [sp, #0]
90026dc2:	2000      	movs	r0, #0
90026dc4:	2b00      	cmp	r3, #0
90026dc6:	8aa2      	ldrh	r2, [r4, #20]
90026dc8:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
90026dcc:	bfb8      	it	lt
90026dce:	425b      	neglt	r3, r3
90026dd0:	f88d 0004 	strb.w	r0, [sp, #4]
90026dd4:	f8ad 1008 	strh.w	r1, [sp, #8]
90026dd8:	b21b      	sxth	r3, r3
90026dda:	f8ad 800a 	strh.w	r8, [sp, #10]
90026dde:	f8ad 500c 	strh.w	r5, [sp, #12]
90026de2:	4293      	cmp	r3, r2
90026de4:	dc07      	bgt.n	90026df6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
90026de6:	1a69      	subs	r1, r5, r1
90026de8:	b209      	sxth	r1, r1
90026dea:	2900      	cmp	r1, #0
90026dec:	bfb8      	it	lt
90026dee:	4249      	neglt	r1, r1
90026df0:	b209      	sxth	r1, r1
90026df2:	428a      	cmp	r2, r1
90026df4:	da10      	bge.n	90026e18 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
90026df6:	6920      	ldr	r0, [r4, #16]
90026df8:	4669      	mov	r1, sp
90026dfa:	eba8 0606 	sub.w	r6, r8, r6
90026dfe:	1bef      	subs	r7, r5, r7
90026e00:	6803      	ldr	r3, [r0, #0]
90026e02:	685b      	ldr	r3, [r3, #4]
90026e04:	4798      	blx	r3
90026e06:	2300      	movs	r3, #0
90026e08:	2001      	movs	r0, #1
90026e0a:	8166      	strh	r6, [r4, #10]
90026e0c:	8123      	strh	r3, [r4, #8]
90026e0e:	81a7      	strh	r7, [r4, #12]
90026e10:	f8a4 8004 	strh.w	r8, [r4, #4]
90026e14:	80e5      	strh	r5, [r4, #6]
90026e16:	73a0      	strb	r0, [r4, #14]
90026e18:	b004      	add	sp, #16
90026e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90026e1e:	bf00      	nop
90026e20:	9002b5a4 	.word	0x9002b5a4

90026e24 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
90026e24:	b5f0      	push	{r4, r5, r6, r7, lr}
90026e26:	461e      	mov	r6, r3
90026e28:	1e4b      	subs	r3, r1, #1
90026e2a:	b085      	sub	sp, #20
90026e2c:	4604      	mov	r4, r0
90026e2e:	2b01      	cmp	r3, #1
90026e30:	460d      	mov	r5, r1
90026e32:	4617      	mov	r7, r2
90026e34:	d84b      	bhi.n	90026ece <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
90026e36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
90026e3a:	1cd3      	adds	r3, r2, #3
90026e3c:	b29b      	uxth	r3, r3
90026e3e:	2b06      	cmp	r3, #6
90026e40:	d916      	bls.n	90026e70 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
90026e42:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 90026ee4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026e46:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026e4a:	f8cd c004 	str.w	ip, [sp, #4]
90026e4e:	f04f 0c00 	mov.w	ip, #0
90026e52:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026e56:	6900      	ldr	r0, [r0, #16]
90026e58:	f8ad 100c 	strh.w	r1, [sp, #12]
90026e5c:	a901      	add	r1, sp, #4
90026e5e:	f88d c008 	strb.w	ip, [sp, #8]
90026e62:	f8ad 200a 	strh.w	r2, [sp, #10]
90026e66:	f8ad 300e 	strh.w	r3, [sp, #14]
90026e6a:	6803      	ldr	r3, [r0, #0]
90026e6c:	689b      	ldr	r3, [r3, #8]
90026e6e:	4798      	blx	r3
90026e70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90026e74:	1cd3      	adds	r3, r2, #3
90026e76:	b29b      	uxth	r3, r3
90026e78:	2b06      	cmp	r3, #6
90026e7a:	d916      	bls.n	90026eaa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026e7c:	f8df c064 	ldr.w	ip, [pc, #100]	; 90026ee4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
90026e80:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
90026e84:	f8cd c004 	str.w	ip, [sp, #4]
90026e88:	f04f 0c01 	mov.w	ip, #1
90026e8c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
90026e90:	6920      	ldr	r0, [r4, #16]
90026e92:	f8ad 100c 	strh.w	r1, [sp, #12]
90026e96:	a901      	add	r1, sp, #4
90026e98:	f88d c008 	strb.w	ip, [sp, #8]
90026e9c:	f8ad 200a 	strh.w	r2, [sp, #10]
90026ea0:	f8ad 300e 	strh.w	r3, [sp, #14]
90026ea4:	6803      	ldr	r3, [r0, #0]
90026ea6:	689b      	ldr	r3, [r3, #8]
90026ea8:	4798      	blx	r3
90026eaa:	4b0d      	ldr	r3, [pc, #52]	; (90026ee0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
90026eac:	a901      	add	r1, sp, #4
90026eae:	6920      	ldr	r0, [r4, #16]
90026eb0:	9301      	str	r3, [sp, #4]
90026eb2:	2300      	movs	r3, #0
90026eb4:	f88d 5008 	strb.w	r5, [sp, #8]
90026eb8:	f8ad 700a 	strh.w	r7, [sp, #10]
90026ebc:	f8ad 600c 	strh.w	r6, [sp, #12]
90026ec0:	f8ad 300e 	strh.w	r3, [sp, #14]
90026ec4:	6803      	ldr	r3, [r0, #0]
90026ec6:	681b      	ldr	r3, [r3, #0]
90026ec8:	4798      	blx	r3
90026eca:	b005      	add	sp, #20
90026ecc:	bdf0      	pop	{r4, r5, r6, r7, pc}
90026ece:	2900      	cmp	r1, #0
90026ed0:	d1eb      	bne.n	90026eaa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026ed2:	80a2      	strh	r2, [r4, #4]
90026ed4:	80c6      	strh	r6, [r0, #6]
90026ed6:	60a1      	str	r1, [r4, #8]
90026ed8:	81a1      	strh	r1, [r4, #12]
90026eda:	73a1      	strb	r1, [r4, #14]
90026edc:	e7e5      	b.n	90026eaa <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
90026ede:	bf00      	nop
90026ee0:	9002b590 	.word	0x9002b590
90026ee4:	9002b5b8 	.word	0x9002b5b8

90026ee8 <__aeabi_atexit>:
90026ee8:	460b      	mov	r3, r1
90026eea:	4601      	mov	r1, r0
90026eec:	4618      	mov	r0, r3
90026eee:	f000 b8c1 	b.w	90027074 <__cxa_atexit>

90026ef2 <_ZdlPvj>:
90026ef2:	f000 b860 	b.w	90026fb6 <_ZdlPv>

90026ef6 <__cxa_guard_acquire>:
90026ef6:	6803      	ldr	r3, [r0, #0]
90026ef8:	07db      	lsls	r3, r3, #31
90026efa:	d406      	bmi.n	90026f0a <__cxa_guard_acquire+0x14>
90026efc:	7843      	ldrb	r3, [r0, #1]
90026efe:	b103      	cbz	r3, 90026f02 <__cxa_guard_acquire+0xc>
90026f00:	deff      	udf	#255	; 0xff
90026f02:	2301      	movs	r3, #1
90026f04:	7043      	strb	r3, [r0, #1]
90026f06:	4618      	mov	r0, r3
90026f08:	4770      	bx	lr
90026f0a:	2000      	movs	r0, #0
90026f0c:	4770      	bx	lr

90026f0e <__cxa_guard_release>:
90026f0e:	2301      	movs	r3, #1
90026f10:	6003      	str	r3, [r0, #0]
90026f12:	4770      	bx	lr

90026f14 <__cxa_pure_virtual>:
90026f14:	b508      	push	{r3, lr}
90026f16:	f000 f85d 	bl	90026fd4 <_ZSt9terminatev>
	...

90026f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
90026f1c:	b508      	push	{r3, lr}
90026f1e:	680b      	ldr	r3, [r1, #0]
90026f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
90026f24:	d302      	bcc.n	90026f2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
90026f26:	480d      	ldr	r0, [pc, #52]	; (90026f5c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
90026f28:	f000 f86d 	bl	90027006 <_ZSt20__throw_length_errorPKc>
90026f2c:	4293      	cmp	r3, r2
90026f2e:	d90b      	bls.n	90026f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
90026f30:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
90026f34:	ea4f 0042 	mov.w	r0, r2, lsl #1
90026f38:	d206      	bcs.n	90026f48 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
90026f3a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
90026f3e:	bf2a      	itet	cs
90026f40:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
90026f44:	6008      	strcc	r0, [r1, #0]
90026f46:	600b      	strcs	r3, [r1, #0]
90026f48:	6808      	ldr	r0, [r1, #0]
90026f4a:	3001      	adds	r0, #1
90026f4c:	d501      	bpl.n	90026f52 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
90026f4e:	f000 f857 	bl	90027000 <_ZSt17__throw_bad_allocv>
90026f52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
90026f56:	f000 b842 	b.w	90026fde <_Znwj>
90026f5a:	bf00      	nop
90026f5c:	9002b880 	.word	0x9002b880

90026f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
90026f60:	460b      	mov	r3, r1
90026f62:	2b01      	cmp	r3, #1
90026f64:	b410      	push	{r4}
90026f66:	4611      	mov	r1, r2
90026f68:	4604      	mov	r4, r0
90026f6a:	d103      	bne.n	90026f74 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
90026f6c:	7022      	strb	r2, [r4, #0]
90026f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
90026f72:	4770      	bx	lr
90026f74:	2b00      	cmp	r3, #0
90026f76:	d0fa      	beq.n	90026f6e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
90026f78:	f85d 4b04 	ldr.w	r4, [sp], #4
90026f7c:	461a      	mov	r2, r3
90026f7e:	f000 b8e5 	b.w	9002714c <memset>

90026f82 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
90026f82:	b537      	push	{r0, r1, r2, r4, r5, lr}
90026f84:	290f      	cmp	r1, #15
90026f86:	4604      	mov	r4, r0
90026f88:	9101      	str	r1, [sp, #4]
90026f8a:	4615      	mov	r5, r2
90026f8c:	d906      	bls.n	90026f9c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
90026f8e:	2200      	movs	r2, #0
90026f90:	a901      	add	r1, sp, #4
90026f92:	f7ff ffc3 	bl	90026f1c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
90026f96:	9b01      	ldr	r3, [sp, #4]
90026f98:	6020      	str	r0, [r4, #0]
90026f9a:	60a3      	str	r3, [r4, #8]
90026f9c:	9901      	ldr	r1, [sp, #4]
90026f9e:	b119      	cbz	r1, 90026fa8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
90026fa0:	6820      	ldr	r0, [r4, #0]
90026fa2:	462a      	mov	r2, r5
90026fa4:	f7ff ffdc 	bl	90026f60 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
90026fa8:	9b01      	ldr	r3, [sp, #4]
90026faa:	6822      	ldr	r2, [r4, #0]
90026fac:	6063      	str	r3, [r4, #4]
90026fae:	2100      	movs	r1, #0
90026fb0:	54d1      	strb	r1, [r2, r3]
90026fb2:	b003      	add	sp, #12
90026fb4:	bd30      	pop	{r4, r5, pc}

90026fb6 <_ZdlPv>:
90026fb6:	f000 b8b3 	b.w	90027120 <free>

90026fba <_ZN10__cxxabiv111__terminateEPFvvE>:
90026fba:	b508      	push	{r3, lr}
90026fbc:	4780      	blx	r0
90026fbe:	f000 f82d 	bl	9002701c <abort>
	...

90026fc4 <_ZSt13get_terminatev>:
90026fc4:	4b02      	ldr	r3, [pc, #8]	; (90026fd0 <_ZSt13get_terminatev+0xc>)
90026fc6:	6818      	ldr	r0, [r3, #0]
90026fc8:	f3bf 8f5b 	dmb	ish
90026fcc:	4770      	bx	lr
90026fce:	bf00      	nop
90026fd0:	240000dc 	.word	0x240000dc

90026fd4 <_ZSt9terminatev>:
90026fd4:	b508      	push	{r3, lr}
90026fd6:	f7ff fff5 	bl	90026fc4 <_ZSt13get_terminatev>
90026fda:	f7ff ffee 	bl	90026fba <_ZN10__cxxabiv111__terminateEPFvvE>

90026fde <_Znwj>:
90026fde:	2801      	cmp	r0, #1
90026fe0:	bf38      	it	cc
90026fe2:	2001      	movcc	r0, #1
90026fe4:	b510      	push	{r4, lr}
90026fe6:	4604      	mov	r4, r0
90026fe8:	4620      	mov	r0, r4
90026fea:	f000 f891 	bl	90027110 <malloc>
90026fee:	b930      	cbnz	r0, 90026ffe <_Znwj+0x20>
90026ff0:	f000 f80c 	bl	9002700c <_ZSt15get_new_handlerv>
90026ff4:	b908      	cbnz	r0, 90026ffa <_Znwj+0x1c>
90026ff6:	f000 f811 	bl	9002701c <abort>
90026ffa:	4780      	blx	r0
90026ffc:	e7f4      	b.n	90026fe8 <_Znwj+0xa>
90026ffe:	bd10      	pop	{r4, pc}

90027000 <_ZSt17__throw_bad_allocv>:
90027000:	b508      	push	{r3, lr}
90027002:	f000 f80b 	bl	9002701c <abort>

90027006 <_ZSt20__throw_length_errorPKc>:
90027006:	b508      	push	{r3, lr}
90027008:	f000 f808 	bl	9002701c <abort>

9002700c <_ZSt15get_new_handlerv>:
9002700c:	4b02      	ldr	r3, [pc, #8]	; (90027018 <_ZSt15get_new_handlerv+0xc>)
9002700e:	6818      	ldr	r0, [r3, #0]
90027010:	f3bf 8f5b 	dmb	ish
90027014:	4770      	bx	lr
90027016:	bf00      	nop
90027018:	24027088 	.word	0x24027088

9002701c <abort>:
9002701c:	b508      	push	{r3, lr}
9002701e:	2006      	movs	r0, #6
90027020:	f000 fca2 	bl	90027968 <raise>
90027024:	2001      	movs	r0, #1
90027026:	f7dd ff35 	bl	90004e94 <_exit>
	...

9002702c <__assert_func>:
9002702c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
9002702e:	4614      	mov	r4, r2
90027030:	461a      	mov	r2, r3
90027032:	4b09      	ldr	r3, [pc, #36]	; (90027058 <__assert_func+0x2c>)
90027034:	681b      	ldr	r3, [r3, #0]
90027036:	4605      	mov	r5, r0
90027038:	68d8      	ldr	r0, [r3, #12]
9002703a:	b14c      	cbz	r4, 90027050 <__assert_func+0x24>
9002703c:	4b07      	ldr	r3, [pc, #28]	; (9002705c <__assert_func+0x30>)
9002703e:	9100      	str	r1, [sp, #0]
90027040:	e9cd 3401 	strd	r3, r4, [sp, #4]
90027044:	4906      	ldr	r1, [pc, #24]	; (90027060 <__assert_func+0x34>)
90027046:	462b      	mov	r3, r5
90027048:	f000 f828 	bl	9002709c <fiprintf>
9002704c:	f7ff ffe6 	bl	9002701c <abort>
90027050:	4b04      	ldr	r3, [pc, #16]	; (90027064 <__assert_func+0x38>)
90027052:	461c      	mov	r4, r3
90027054:	e7f3      	b.n	9002703e <__assert_func+0x12>
90027056:	bf00      	nop
90027058:	240000e0 	.word	0x240000e0
9002705c:	9002b898 	.word	0x9002b898
90027060:	9002b8a5 	.word	0x9002b8a5
90027064:	9002b8d3 	.word	0x9002b8d3

90027068 <atexit>:
90027068:	2300      	movs	r3, #0
9002706a:	4601      	mov	r1, r0
9002706c:	461a      	mov	r2, r3
9002706e:	4618      	mov	r0, r3
90027070:	f000 bd7e 	b.w	90027b70 <__register_exitproc>

90027074 <__cxa_atexit>:
90027074:	b510      	push	{r4, lr}
90027076:	4c05      	ldr	r4, [pc, #20]	; (9002708c <__cxa_atexit+0x18>)
90027078:	4613      	mov	r3, r2
9002707a:	b12c      	cbz	r4, 90027088 <__cxa_atexit+0x14>
9002707c:	460a      	mov	r2, r1
9002707e:	4601      	mov	r1, r0
90027080:	2002      	movs	r0, #2
90027082:	f000 fd75 	bl	90027b70 <__register_exitproc>
90027086:	bd10      	pop	{r4, pc}
90027088:	4620      	mov	r0, r4
9002708a:	e7fc      	b.n	90027086 <__cxa_atexit+0x12>
9002708c:	90027b71 	.word	0x90027b71

90027090 <__errno>:
90027090:	4b01      	ldr	r3, [pc, #4]	; (90027098 <__errno+0x8>)
90027092:	6818      	ldr	r0, [r3, #0]
90027094:	4770      	bx	lr
90027096:	bf00      	nop
90027098:	240000e0 	.word	0x240000e0

9002709c <fiprintf>:
9002709c:	b40e      	push	{r1, r2, r3}
9002709e:	b503      	push	{r0, r1, lr}
900270a0:	4601      	mov	r1, r0
900270a2:	ab03      	add	r3, sp, #12
900270a4:	4805      	ldr	r0, [pc, #20]	; (900270bc <fiprintf+0x20>)
900270a6:	f853 2b04 	ldr.w	r2, [r3], #4
900270aa:	6800      	ldr	r0, [r0, #0]
900270ac:	9301      	str	r3, [sp, #4]
900270ae:	f000 f95f 	bl	90027370 <_vfiprintf_r>
900270b2:	b002      	add	sp, #8
900270b4:	f85d eb04 	ldr.w	lr, [sp], #4
900270b8:	b003      	add	sp, #12
900270ba:	4770      	bx	lr
900270bc:	240000e0 	.word	0x240000e0

900270c0 <__libc_init_array>:
900270c0:	b570      	push	{r4, r5, r6, lr}
900270c2:	4d0d      	ldr	r5, [pc, #52]	; (900270f8 <__libc_init_array+0x38>)
900270c4:	4c0d      	ldr	r4, [pc, #52]	; (900270fc <__libc_init_array+0x3c>)
900270c6:	1b64      	subs	r4, r4, r5
900270c8:	10a4      	asrs	r4, r4, #2
900270ca:	2600      	movs	r6, #0
900270cc:	42a6      	cmp	r6, r4
900270ce:	d109      	bne.n	900270e4 <__libc_init_array+0x24>
900270d0:	4d0b      	ldr	r5, [pc, #44]	; (90027100 <__libc_init_array+0x40>)
900270d2:	4c0c      	ldr	r4, [pc, #48]	; (90027104 <__libc_init_array+0x44>)
900270d4:	f001 f882 	bl	900281dc <_init>
900270d8:	1b64      	subs	r4, r4, r5
900270da:	10a4      	asrs	r4, r4, #2
900270dc:	2600      	movs	r6, #0
900270de:	42a6      	cmp	r6, r4
900270e0:	d105      	bne.n	900270ee <__libc_init_array+0x2e>
900270e2:	bd70      	pop	{r4, r5, r6, pc}
900270e4:	f855 3b04 	ldr.w	r3, [r5], #4
900270e8:	4798      	blx	r3
900270ea:	3601      	adds	r6, #1
900270ec:	e7ee      	b.n	900270cc <__libc_init_array+0xc>
900270ee:	f855 3b04 	ldr.w	r3, [r5], #4
900270f2:	4798      	blx	r3
900270f4:	3601      	adds	r6, #1
900270f6:	e7f2      	b.n	900270de <__libc_init_array+0x1e>
900270f8:	9002be18 	.word	0x9002be18
900270fc:	9002be18 	.word	0x9002be18
90027100:	9002be18 	.word	0x9002be18
90027104:	9002be34 	.word	0x9002be34

90027108 <__retarget_lock_init_recursive>:
90027108:	4770      	bx	lr

9002710a <__retarget_lock_acquire_recursive>:
9002710a:	4770      	bx	lr

9002710c <__retarget_lock_release>:
9002710c:	4770      	bx	lr

9002710e <__retarget_lock_release_recursive>:
9002710e:	4770      	bx	lr

90027110 <malloc>:
90027110:	4b02      	ldr	r3, [pc, #8]	; (9002711c <malloc+0xc>)
90027112:	4601      	mov	r1, r0
90027114:	6818      	ldr	r0, [r3, #0]
90027116:	f000 b88d 	b.w	90027234 <_malloc_r>
9002711a:	bf00      	nop
9002711c:	240000e0 	.word	0x240000e0

90027120 <free>:
90027120:	4b02      	ldr	r3, [pc, #8]	; (9002712c <free+0xc>)
90027122:	4601      	mov	r1, r0
90027124:	6818      	ldr	r0, [r3, #0]
90027126:	f000 b819 	b.w	9002715c <_free_r>
9002712a:	bf00      	nop
9002712c:	240000e0 	.word	0x240000e0

90027130 <memcpy>:
90027130:	440a      	add	r2, r1
90027132:	4291      	cmp	r1, r2
90027134:	f100 33ff 	add.w	r3, r0, #4294967295
90027138:	d100      	bne.n	9002713c <memcpy+0xc>
9002713a:	4770      	bx	lr
9002713c:	b510      	push	{r4, lr}
9002713e:	f811 4b01 	ldrb.w	r4, [r1], #1
90027142:	f803 4f01 	strb.w	r4, [r3, #1]!
90027146:	4291      	cmp	r1, r2
90027148:	d1f9      	bne.n	9002713e <memcpy+0xe>
9002714a:	bd10      	pop	{r4, pc}

9002714c <memset>:
9002714c:	4402      	add	r2, r0
9002714e:	4603      	mov	r3, r0
90027150:	4293      	cmp	r3, r2
90027152:	d100      	bne.n	90027156 <memset+0xa>
90027154:	4770      	bx	lr
90027156:	f803 1b01 	strb.w	r1, [r3], #1
9002715a:	e7f9      	b.n	90027150 <memset+0x4>

9002715c <_free_r>:
9002715c:	b537      	push	{r0, r1, r2, r4, r5, lr}
9002715e:	2900      	cmp	r1, #0
90027160:	d044      	beq.n	900271ec <_free_r+0x90>
90027162:	f851 3c04 	ldr.w	r3, [r1, #-4]
90027166:	9001      	str	r0, [sp, #4]
90027168:	2b00      	cmp	r3, #0
9002716a:	f1a1 0404 	sub.w	r4, r1, #4
9002716e:	bfb8      	it	lt
90027170:	18e4      	addlt	r4, r4, r3
90027172:	f000 ff7b 	bl	9002806c <__malloc_lock>
90027176:	4a1e      	ldr	r2, [pc, #120]	; (900271f0 <_free_r+0x94>)
90027178:	9801      	ldr	r0, [sp, #4]
9002717a:	6813      	ldr	r3, [r2, #0]
9002717c:	b933      	cbnz	r3, 9002718c <_free_r+0x30>
9002717e:	6063      	str	r3, [r4, #4]
90027180:	6014      	str	r4, [r2, #0]
90027182:	b003      	add	sp, #12
90027184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
90027188:	f000 bf76 	b.w	90028078 <__malloc_unlock>
9002718c:	42a3      	cmp	r3, r4
9002718e:	d908      	bls.n	900271a2 <_free_r+0x46>
90027190:	6825      	ldr	r5, [r4, #0]
90027192:	1961      	adds	r1, r4, r5
90027194:	428b      	cmp	r3, r1
90027196:	bf01      	itttt	eq
90027198:	6819      	ldreq	r1, [r3, #0]
9002719a:	685b      	ldreq	r3, [r3, #4]
9002719c:	1949      	addeq	r1, r1, r5
9002719e:	6021      	streq	r1, [r4, #0]
900271a0:	e7ed      	b.n	9002717e <_free_r+0x22>
900271a2:	461a      	mov	r2, r3
900271a4:	685b      	ldr	r3, [r3, #4]
900271a6:	b10b      	cbz	r3, 900271ac <_free_r+0x50>
900271a8:	42a3      	cmp	r3, r4
900271aa:	d9fa      	bls.n	900271a2 <_free_r+0x46>
900271ac:	6811      	ldr	r1, [r2, #0]
900271ae:	1855      	adds	r5, r2, r1
900271b0:	42a5      	cmp	r5, r4
900271b2:	d10b      	bne.n	900271cc <_free_r+0x70>
900271b4:	6824      	ldr	r4, [r4, #0]
900271b6:	4421      	add	r1, r4
900271b8:	1854      	adds	r4, r2, r1
900271ba:	42a3      	cmp	r3, r4
900271bc:	6011      	str	r1, [r2, #0]
900271be:	d1e0      	bne.n	90027182 <_free_r+0x26>
900271c0:	681c      	ldr	r4, [r3, #0]
900271c2:	685b      	ldr	r3, [r3, #4]
900271c4:	6053      	str	r3, [r2, #4]
900271c6:	4421      	add	r1, r4
900271c8:	6011      	str	r1, [r2, #0]
900271ca:	e7da      	b.n	90027182 <_free_r+0x26>
900271cc:	d902      	bls.n	900271d4 <_free_r+0x78>
900271ce:	230c      	movs	r3, #12
900271d0:	6003      	str	r3, [r0, #0]
900271d2:	e7d6      	b.n	90027182 <_free_r+0x26>
900271d4:	6825      	ldr	r5, [r4, #0]
900271d6:	1961      	adds	r1, r4, r5
900271d8:	428b      	cmp	r3, r1
900271da:	bf04      	itt	eq
900271dc:	6819      	ldreq	r1, [r3, #0]
900271de:	685b      	ldreq	r3, [r3, #4]
900271e0:	6063      	str	r3, [r4, #4]
900271e2:	bf04      	itt	eq
900271e4:	1949      	addeq	r1, r1, r5
900271e6:	6021      	streq	r1, [r4, #0]
900271e8:	6054      	str	r4, [r2, #4]
900271ea:	e7ca      	b.n	90027182 <_free_r+0x26>
900271ec:	b003      	add	sp, #12
900271ee:	bd30      	pop	{r4, r5, pc}
900271f0:	24027090 	.word	0x24027090

900271f4 <sbrk_aligned>:
900271f4:	b570      	push	{r4, r5, r6, lr}
900271f6:	4e0e      	ldr	r6, [pc, #56]	; (90027230 <sbrk_aligned+0x3c>)
900271f8:	460c      	mov	r4, r1
900271fa:	6831      	ldr	r1, [r6, #0]
900271fc:	4605      	mov	r5, r0
900271fe:	b911      	cbnz	r1, 90027206 <sbrk_aligned+0x12>
90027200:	f000 fb7a 	bl	900278f8 <_sbrk_r>
90027204:	6030      	str	r0, [r6, #0]
90027206:	4621      	mov	r1, r4
90027208:	4628      	mov	r0, r5
9002720a:	f000 fb75 	bl	900278f8 <_sbrk_r>
9002720e:	1c43      	adds	r3, r0, #1
90027210:	d00a      	beq.n	90027228 <sbrk_aligned+0x34>
90027212:	1cc4      	adds	r4, r0, #3
90027214:	f024 0403 	bic.w	r4, r4, #3
90027218:	42a0      	cmp	r0, r4
9002721a:	d007      	beq.n	9002722c <sbrk_aligned+0x38>
9002721c:	1a21      	subs	r1, r4, r0
9002721e:	4628      	mov	r0, r5
90027220:	f000 fb6a 	bl	900278f8 <_sbrk_r>
90027224:	3001      	adds	r0, #1
90027226:	d101      	bne.n	9002722c <sbrk_aligned+0x38>
90027228:	f04f 34ff 	mov.w	r4, #4294967295
9002722c:	4620      	mov	r0, r4
9002722e:	bd70      	pop	{r4, r5, r6, pc}
90027230:	24027094 	.word	0x24027094

90027234 <_malloc_r>:
90027234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90027238:	1ccd      	adds	r5, r1, #3
9002723a:	f025 0503 	bic.w	r5, r5, #3
9002723e:	3508      	adds	r5, #8
90027240:	2d0c      	cmp	r5, #12
90027242:	bf38      	it	cc
90027244:	250c      	movcc	r5, #12
90027246:	2d00      	cmp	r5, #0
90027248:	4607      	mov	r7, r0
9002724a:	db01      	blt.n	90027250 <_malloc_r+0x1c>
9002724c:	42a9      	cmp	r1, r5
9002724e:	d905      	bls.n	9002725c <_malloc_r+0x28>
90027250:	230c      	movs	r3, #12
90027252:	603b      	str	r3, [r7, #0]
90027254:	2600      	movs	r6, #0
90027256:	4630      	mov	r0, r6
90027258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
9002725c:	4e2e      	ldr	r6, [pc, #184]	; (90027318 <_malloc_r+0xe4>)
9002725e:	f000 ff05 	bl	9002806c <__malloc_lock>
90027262:	6833      	ldr	r3, [r6, #0]
90027264:	461c      	mov	r4, r3
90027266:	bb34      	cbnz	r4, 900272b6 <_malloc_r+0x82>
90027268:	4629      	mov	r1, r5
9002726a:	4638      	mov	r0, r7
9002726c:	f7ff ffc2 	bl	900271f4 <sbrk_aligned>
90027270:	1c43      	adds	r3, r0, #1
90027272:	4604      	mov	r4, r0
90027274:	d14d      	bne.n	90027312 <_malloc_r+0xde>
90027276:	6834      	ldr	r4, [r6, #0]
90027278:	4626      	mov	r6, r4
9002727a:	2e00      	cmp	r6, #0
9002727c:	d140      	bne.n	90027300 <_malloc_r+0xcc>
9002727e:	6823      	ldr	r3, [r4, #0]
90027280:	4631      	mov	r1, r6
90027282:	4638      	mov	r0, r7
90027284:	eb04 0803 	add.w	r8, r4, r3
90027288:	f000 fb36 	bl	900278f8 <_sbrk_r>
9002728c:	4580      	cmp	r8, r0
9002728e:	d13a      	bne.n	90027306 <_malloc_r+0xd2>
90027290:	6821      	ldr	r1, [r4, #0]
90027292:	3503      	adds	r5, #3
90027294:	1a6d      	subs	r5, r5, r1
90027296:	f025 0503 	bic.w	r5, r5, #3
9002729a:	3508      	adds	r5, #8
9002729c:	2d0c      	cmp	r5, #12
9002729e:	bf38      	it	cc
900272a0:	250c      	movcc	r5, #12
900272a2:	4629      	mov	r1, r5
900272a4:	4638      	mov	r0, r7
900272a6:	f7ff ffa5 	bl	900271f4 <sbrk_aligned>
900272aa:	3001      	adds	r0, #1
900272ac:	d02b      	beq.n	90027306 <_malloc_r+0xd2>
900272ae:	6823      	ldr	r3, [r4, #0]
900272b0:	442b      	add	r3, r5
900272b2:	6023      	str	r3, [r4, #0]
900272b4:	e00e      	b.n	900272d4 <_malloc_r+0xa0>
900272b6:	6822      	ldr	r2, [r4, #0]
900272b8:	1b52      	subs	r2, r2, r5
900272ba:	d41e      	bmi.n	900272fa <_malloc_r+0xc6>
900272bc:	2a0b      	cmp	r2, #11
900272be:	d916      	bls.n	900272ee <_malloc_r+0xba>
900272c0:	1961      	adds	r1, r4, r5
900272c2:	42a3      	cmp	r3, r4
900272c4:	6025      	str	r5, [r4, #0]
900272c6:	bf18      	it	ne
900272c8:	6059      	strne	r1, [r3, #4]
900272ca:	6863      	ldr	r3, [r4, #4]
900272cc:	bf08      	it	eq
900272ce:	6031      	streq	r1, [r6, #0]
900272d0:	5162      	str	r2, [r4, r5]
900272d2:	604b      	str	r3, [r1, #4]
900272d4:	4638      	mov	r0, r7
900272d6:	f104 060b 	add.w	r6, r4, #11
900272da:	f000 fecd 	bl	90028078 <__malloc_unlock>
900272de:	f026 0607 	bic.w	r6, r6, #7
900272e2:	1d23      	adds	r3, r4, #4
900272e4:	1af2      	subs	r2, r6, r3
900272e6:	d0b6      	beq.n	90027256 <_malloc_r+0x22>
900272e8:	1b9b      	subs	r3, r3, r6
900272ea:	50a3      	str	r3, [r4, r2]
900272ec:	e7b3      	b.n	90027256 <_malloc_r+0x22>
900272ee:	6862      	ldr	r2, [r4, #4]
900272f0:	42a3      	cmp	r3, r4
900272f2:	bf0c      	ite	eq
900272f4:	6032      	streq	r2, [r6, #0]
900272f6:	605a      	strne	r2, [r3, #4]
900272f8:	e7ec      	b.n	900272d4 <_malloc_r+0xa0>
900272fa:	4623      	mov	r3, r4
900272fc:	6864      	ldr	r4, [r4, #4]
900272fe:	e7b2      	b.n	90027266 <_malloc_r+0x32>
90027300:	4634      	mov	r4, r6
90027302:	6876      	ldr	r6, [r6, #4]
90027304:	e7b9      	b.n	9002727a <_malloc_r+0x46>
90027306:	230c      	movs	r3, #12
90027308:	603b      	str	r3, [r7, #0]
9002730a:	4638      	mov	r0, r7
9002730c:	f000 feb4 	bl	90028078 <__malloc_unlock>
90027310:	e7a1      	b.n	90027256 <_malloc_r+0x22>
90027312:	6025      	str	r5, [r4, #0]
90027314:	e7de      	b.n	900272d4 <_malloc_r+0xa0>
90027316:	bf00      	nop
90027318:	24027090 	.word	0x24027090

9002731c <__sfputc_r>:
9002731c:	6893      	ldr	r3, [r2, #8]
9002731e:	3b01      	subs	r3, #1
90027320:	2b00      	cmp	r3, #0
90027322:	b410      	push	{r4}
90027324:	6093      	str	r3, [r2, #8]
90027326:	da08      	bge.n	9002733a <__sfputc_r+0x1e>
90027328:	6994      	ldr	r4, [r2, #24]
9002732a:	42a3      	cmp	r3, r4
9002732c:	db01      	blt.n	90027332 <__sfputc_r+0x16>
9002732e:	290a      	cmp	r1, #10
90027330:	d103      	bne.n	9002733a <__sfputc_r+0x1e>
90027332:	f85d 4b04 	ldr.w	r4, [sp], #4
90027336:	f000 bb5b 	b.w	900279f0 <__swbuf_r>
9002733a:	6813      	ldr	r3, [r2, #0]
9002733c:	1c58      	adds	r0, r3, #1
9002733e:	6010      	str	r0, [r2, #0]
90027340:	7019      	strb	r1, [r3, #0]
90027342:	4608      	mov	r0, r1
90027344:	f85d 4b04 	ldr.w	r4, [sp], #4
90027348:	4770      	bx	lr

9002734a <__sfputs_r>:
9002734a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
9002734c:	4606      	mov	r6, r0
9002734e:	460f      	mov	r7, r1
90027350:	4614      	mov	r4, r2
90027352:	18d5      	adds	r5, r2, r3
90027354:	42ac      	cmp	r4, r5
90027356:	d101      	bne.n	9002735c <__sfputs_r+0x12>
90027358:	2000      	movs	r0, #0
9002735a:	e007      	b.n	9002736c <__sfputs_r+0x22>
9002735c:	f814 1b01 	ldrb.w	r1, [r4], #1
90027360:	463a      	mov	r2, r7
90027362:	4630      	mov	r0, r6
90027364:	f7ff ffda 	bl	9002731c <__sfputc_r>
90027368:	1c43      	adds	r3, r0, #1
9002736a:	d1f3      	bne.n	90027354 <__sfputs_r+0xa>
9002736c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

90027370 <_vfiprintf_r>:
90027370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
90027374:	460d      	mov	r5, r1
90027376:	b09d      	sub	sp, #116	; 0x74
90027378:	4614      	mov	r4, r2
9002737a:	4698      	mov	r8, r3
9002737c:	4606      	mov	r6, r0
9002737e:	b118      	cbz	r0, 90027388 <_vfiprintf_r+0x18>
90027380:	6983      	ldr	r3, [r0, #24]
90027382:	b90b      	cbnz	r3, 90027388 <_vfiprintf_r+0x18>
90027384:	f000 fd70 	bl	90027e68 <__sinit>
90027388:	4b89      	ldr	r3, [pc, #548]	; (900275b0 <_vfiprintf_r+0x240>)
9002738a:	429d      	cmp	r5, r3
9002738c:	d11b      	bne.n	900273c6 <_vfiprintf_r+0x56>
9002738e:	6875      	ldr	r5, [r6, #4]
90027390:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027392:	07d9      	lsls	r1, r3, #31
90027394:	d405      	bmi.n	900273a2 <_vfiprintf_r+0x32>
90027396:	89ab      	ldrh	r3, [r5, #12]
90027398:	059a      	lsls	r2, r3, #22
9002739a:	d402      	bmi.n	900273a2 <_vfiprintf_r+0x32>
9002739c:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002739e:	f7ff feb4 	bl	9002710a <__retarget_lock_acquire_recursive>
900273a2:	89ab      	ldrh	r3, [r5, #12]
900273a4:	071b      	lsls	r3, r3, #28
900273a6:	d501      	bpl.n	900273ac <_vfiprintf_r+0x3c>
900273a8:	692b      	ldr	r3, [r5, #16]
900273aa:	b9eb      	cbnz	r3, 900273e8 <_vfiprintf_r+0x78>
900273ac:	4629      	mov	r1, r5
900273ae:	4630      	mov	r0, r6
900273b0:	f000 fb70 	bl	90027a94 <__swsetup_r>
900273b4:	b1c0      	cbz	r0, 900273e8 <_vfiprintf_r+0x78>
900273b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
900273b8:	07dc      	lsls	r4, r3, #31
900273ba:	d50e      	bpl.n	900273da <_vfiprintf_r+0x6a>
900273bc:	f04f 30ff 	mov.w	r0, #4294967295
900273c0:	b01d      	add	sp, #116	; 0x74
900273c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
900273c6:	4b7b      	ldr	r3, [pc, #492]	; (900275b4 <_vfiprintf_r+0x244>)
900273c8:	429d      	cmp	r5, r3
900273ca:	d101      	bne.n	900273d0 <_vfiprintf_r+0x60>
900273cc:	68b5      	ldr	r5, [r6, #8]
900273ce:	e7df      	b.n	90027390 <_vfiprintf_r+0x20>
900273d0:	4b79      	ldr	r3, [pc, #484]	; (900275b8 <_vfiprintf_r+0x248>)
900273d2:	429d      	cmp	r5, r3
900273d4:	bf08      	it	eq
900273d6:	68f5      	ldreq	r5, [r6, #12]
900273d8:	e7da      	b.n	90027390 <_vfiprintf_r+0x20>
900273da:	89ab      	ldrh	r3, [r5, #12]
900273dc:	0598      	lsls	r0, r3, #22
900273de:	d4ed      	bmi.n	900273bc <_vfiprintf_r+0x4c>
900273e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
900273e2:	f7ff fe94 	bl	9002710e <__retarget_lock_release_recursive>
900273e6:	e7e9      	b.n	900273bc <_vfiprintf_r+0x4c>
900273e8:	2300      	movs	r3, #0
900273ea:	9309      	str	r3, [sp, #36]	; 0x24
900273ec:	2320      	movs	r3, #32
900273ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
900273f2:	f8cd 800c 	str.w	r8, [sp, #12]
900273f6:	2330      	movs	r3, #48	; 0x30
900273f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 900275bc <_vfiprintf_r+0x24c>
900273fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
90027400:	f04f 0901 	mov.w	r9, #1
90027404:	4623      	mov	r3, r4
90027406:	469a      	mov	sl, r3
90027408:	f813 2b01 	ldrb.w	r2, [r3], #1
9002740c:	b10a      	cbz	r2, 90027412 <_vfiprintf_r+0xa2>
9002740e:	2a25      	cmp	r2, #37	; 0x25
90027410:	d1f9      	bne.n	90027406 <_vfiprintf_r+0x96>
90027412:	ebba 0b04 	subs.w	fp, sl, r4
90027416:	d00b      	beq.n	90027430 <_vfiprintf_r+0xc0>
90027418:	465b      	mov	r3, fp
9002741a:	4622      	mov	r2, r4
9002741c:	4629      	mov	r1, r5
9002741e:	4630      	mov	r0, r6
90027420:	f7ff ff93 	bl	9002734a <__sfputs_r>
90027424:	3001      	adds	r0, #1
90027426:	f000 80aa 	beq.w	9002757e <_vfiprintf_r+0x20e>
9002742a:	9a09      	ldr	r2, [sp, #36]	; 0x24
9002742c:	445a      	add	r2, fp
9002742e:	9209      	str	r2, [sp, #36]	; 0x24
90027430:	f89a 3000 	ldrb.w	r3, [sl]
90027434:	2b00      	cmp	r3, #0
90027436:	f000 80a2 	beq.w	9002757e <_vfiprintf_r+0x20e>
9002743a:	2300      	movs	r3, #0
9002743c:	f04f 32ff 	mov.w	r2, #4294967295
90027440:	e9cd 2305 	strd	r2, r3, [sp, #20]
90027444:	f10a 0a01 	add.w	sl, sl, #1
90027448:	9304      	str	r3, [sp, #16]
9002744a:	9307      	str	r3, [sp, #28]
9002744c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
90027450:	931a      	str	r3, [sp, #104]	; 0x68
90027452:	4654      	mov	r4, sl
90027454:	2205      	movs	r2, #5
90027456:	f814 1b01 	ldrb.w	r1, [r4], #1
9002745a:	4858      	ldr	r0, [pc, #352]	; (900275bc <_vfiprintf_r+0x24c>)
9002745c:	f7d8 ff40 	bl	900002e0 <memchr>
90027460:	9a04      	ldr	r2, [sp, #16]
90027462:	b9d8      	cbnz	r0, 9002749c <_vfiprintf_r+0x12c>
90027464:	06d1      	lsls	r1, r2, #27
90027466:	bf44      	itt	mi
90027468:	2320      	movmi	r3, #32
9002746a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
9002746e:	0713      	lsls	r3, r2, #28
90027470:	bf44      	itt	mi
90027472:	232b      	movmi	r3, #43	; 0x2b
90027474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
90027478:	f89a 3000 	ldrb.w	r3, [sl]
9002747c:	2b2a      	cmp	r3, #42	; 0x2a
9002747e:	d015      	beq.n	900274ac <_vfiprintf_r+0x13c>
90027480:	9a07      	ldr	r2, [sp, #28]
90027482:	4654      	mov	r4, sl
90027484:	2000      	movs	r0, #0
90027486:	f04f 0c0a 	mov.w	ip, #10
9002748a:	4621      	mov	r1, r4
9002748c:	f811 3b01 	ldrb.w	r3, [r1], #1
90027490:	3b30      	subs	r3, #48	; 0x30
90027492:	2b09      	cmp	r3, #9
90027494:	d94e      	bls.n	90027534 <_vfiprintf_r+0x1c4>
90027496:	b1b0      	cbz	r0, 900274c6 <_vfiprintf_r+0x156>
90027498:	9207      	str	r2, [sp, #28]
9002749a:	e014      	b.n	900274c6 <_vfiprintf_r+0x156>
9002749c:	eba0 0308 	sub.w	r3, r0, r8
900274a0:	fa09 f303 	lsl.w	r3, r9, r3
900274a4:	4313      	orrs	r3, r2
900274a6:	9304      	str	r3, [sp, #16]
900274a8:	46a2      	mov	sl, r4
900274aa:	e7d2      	b.n	90027452 <_vfiprintf_r+0xe2>
900274ac:	9b03      	ldr	r3, [sp, #12]
900274ae:	1d19      	adds	r1, r3, #4
900274b0:	681b      	ldr	r3, [r3, #0]
900274b2:	9103      	str	r1, [sp, #12]
900274b4:	2b00      	cmp	r3, #0
900274b6:	bfbb      	ittet	lt
900274b8:	425b      	neglt	r3, r3
900274ba:	f042 0202 	orrlt.w	r2, r2, #2
900274be:	9307      	strge	r3, [sp, #28]
900274c0:	9307      	strlt	r3, [sp, #28]
900274c2:	bfb8      	it	lt
900274c4:	9204      	strlt	r2, [sp, #16]
900274c6:	7823      	ldrb	r3, [r4, #0]
900274c8:	2b2e      	cmp	r3, #46	; 0x2e
900274ca:	d10c      	bne.n	900274e6 <_vfiprintf_r+0x176>
900274cc:	7863      	ldrb	r3, [r4, #1]
900274ce:	2b2a      	cmp	r3, #42	; 0x2a
900274d0:	d135      	bne.n	9002753e <_vfiprintf_r+0x1ce>
900274d2:	9b03      	ldr	r3, [sp, #12]
900274d4:	1d1a      	adds	r2, r3, #4
900274d6:	681b      	ldr	r3, [r3, #0]
900274d8:	9203      	str	r2, [sp, #12]
900274da:	2b00      	cmp	r3, #0
900274dc:	bfb8      	it	lt
900274de:	f04f 33ff 	movlt.w	r3, #4294967295
900274e2:	3402      	adds	r4, #2
900274e4:	9305      	str	r3, [sp, #20]
900274e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 900275cc <_vfiprintf_r+0x25c>
900274ea:	7821      	ldrb	r1, [r4, #0]
900274ec:	2203      	movs	r2, #3
900274ee:	4650      	mov	r0, sl
900274f0:	f7d8 fef6 	bl	900002e0 <memchr>
900274f4:	b140      	cbz	r0, 90027508 <_vfiprintf_r+0x198>
900274f6:	2340      	movs	r3, #64	; 0x40
900274f8:	eba0 000a 	sub.w	r0, r0, sl
900274fc:	fa03 f000 	lsl.w	r0, r3, r0
90027500:	9b04      	ldr	r3, [sp, #16]
90027502:	4303      	orrs	r3, r0
90027504:	3401      	adds	r4, #1
90027506:	9304      	str	r3, [sp, #16]
90027508:	f814 1b01 	ldrb.w	r1, [r4], #1
9002750c:	482c      	ldr	r0, [pc, #176]	; (900275c0 <_vfiprintf_r+0x250>)
9002750e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
90027512:	2206      	movs	r2, #6
90027514:	f7d8 fee4 	bl	900002e0 <memchr>
90027518:	2800      	cmp	r0, #0
9002751a:	d03f      	beq.n	9002759c <_vfiprintf_r+0x22c>
9002751c:	4b29      	ldr	r3, [pc, #164]	; (900275c4 <_vfiprintf_r+0x254>)
9002751e:	bb1b      	cbnz	r3, 90027568 <_vfiprintf_r+0x1f8>
90027520:	9b03      	ldr	r3, [sp, #12]
90027522:	3307      	adds	r3, #7
90027524:	f023 0307 	bic.w	r3, r3, #7
90027528:	3308      	adds	r3, #8
9002752a:	9303      	str	r3, [sp, #12]
9002752c:	9b09      	ldr	r3, [sp, #36]	; 0x24
9002752e:	443b      	add	r3, r7
90027530:	9309      	str	r3, [sp, #36]	; 0x24
90027532:	e767      	b.n	90027404 <_vfiprintf_r+0x94>
90027534:	fb0c 3202 	mla	r2, ip, r2, r3
90027538:	460c      	mov	r4, r1
9002753a:	2001      	movs	r0, #1
9002753c:	e7a5      	b.n	9002748a <_vfiprintf_r+0x11a>
9002753e:	2300      	movs	r3, #0
90027540:	3401      	adds	r4, #1
90027542:	9305      	str	r3, [sp, #20]
90027544:	4619      	mov	r1, r3
90027546:	f04f 0c0a 	mov.w	ip, #10
9002754a:	4620      	mov	r0, r4
9002754c:	f810 2b01 	ldrb.w	r2, [r0], #1
90027550:	3a30      	subs	r2, #48	; 0x30
90027552:	2a09      	cmp	r2, #9
90027554:	d903      	bls.n	9002755e <_vfiprintf_r+0x1ee>
90027556:	2b00      	cmp	r3, #0
90027558:	d0c5      	beq.n	900274e6 <_vfiprintf_r+0x176>
9002755a:	9105      	str	r1, [sp, #20]
9002755c:	e7c3      	b.n	900274e6 <_vfiprintf_r+0x176>
9002755e:	fb0c 2101 	mla	r1, ip, r1, r2
90027562:	4604      	mov	r4, r0
90027564:	2301      	movs	r3, #1
90027566:	e7f0      	b.n	9002754a <_vfiprintf_r+0x1da>
90027568:	ab03      	add	r3, sp, #12
9002756a:	9300      	str	r3, [sp, #0]
9002756c:	462a      	mov	r2, r5
9002756e:	4b16      	ldr	r3, [pc, #88]	; (900275c8 <_vfiprintf_r+0x258>)
90027570:	a904      	add	r1, sp, #16
90027572:	4630      	mov	r0, r6
90027574:	f3af 8000 	nop.w
90027578:	4607      	mov	r7, r0
9002757a:	1c78      	adds	r0, r7, #1
9002757c:	d1d6      	bne.n	9002752c <_vfiprintf_r+0x1bc>
9002757e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
90027580:	07d9      	lsls	r1, r3, #31
90027582:	d405      	bmi.n	90027590 <_vfiprintf_r+0x220>
90027584:	89ab      	ldrh	r3, [r5, #12]
90027586:	059a      	lsls	r2, r3, #22
90027588:	d402      	bmi.n	90027590 <_vfiprintf_r+0x220>
9002758a:	6da8      	ldr	r0, [r5, #88]	; 0x58
9002758c:	f7ff fdbf 	bl	9002710e <__retarget_lock_release_recursive>
90027590:	89ab      	ldrh	r3, [r5, #12]
90027592:	065b      	lsls	r3, r3, #25
90027594:	f53f af12 	bmi.w	900273bc <_vfiprintf_r+0x4c>
90027598:	9809      	ldr	r0, [sp, #36]	; 0x24
9002759a:	e711      	b.n	900273c0 <_vfiprintf_r+0x50>
9002759c:	ab03      	add	r3, sp, #12
9002759e:	9300      	str	r3, [sp, #0]
900275a0:	462a      	mov	r2, r5
900275a2:	4b09      	ldr	r3, [pc, #36]	; (900275c8 <_vfiprintf_r+0x258>)
900275a4:	a904      	add	r1, sp, #16
900275a6:	4630      	mov	r0, r6
900275a8:	f000 f880 	bl	900276ac <_printf_i>
900275ac:	e7e4      	b.n	90027578 <_vfiprintf_r+0x208>
900275ae:	bf00      	nop
900275b0:	9002b930 	.word	0x9002b930
900275b4:	9002b950 	.word	0x9002b950
900275b8:	9002b910 	.word	0x9002b910
900275bc:	9002b8d8 	.word	0x9002b8d8
900275c0:	9002b8e2 	.word	0x9002b8e2
900275c4:	00000000 	.word	0x00000000
900275c8:	9002734b 	.word	0x9002734b
900275cc:	9002b8de 	.word	0x9002b8de

900275d0 <_printf_common>:
900275d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
900275d4:	4616      	mov	r6, r2
900275d6:	4699      	mov	r9, r3
900275d8:	688a      	ldr	r2, [r1, #8]
900275da:	690b      	ldr	r3, [r1, #16]
900275dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
900275e0:	4293      	cmp	r3, r2
900275e2:	bfb8      	it	lt
900275e4:	4613      	movlt	r3, r2
900275e6:	6033      	str	r3, [r6, #0]
900275e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
900275ec:	4607      	mov	r7, r0
900275ee:	460c      	mov	r4, r1
900275f0:	b10a      	cbz	r2, 900275f6 <_printf_common+0x26>
900275f2:	3301      	adds	r3, #1
900275f4:	6033      	str	r3, [r6, #0]
900275f6:	6823      	ldr	r3, [r4, #0]
900275f8:	0699      	lsls	r1, r3, #26
900275fa:	bf42      	ittt	mi
900275fc:	6833      	ldrmi	r3, [r6, #0]
900275fe:	3302      	addmi	r3, #2
90027600:	6033      	strmi	r3, [r6, #0]
90027602:	6825      	ldr	r5, [r4, #0]
90027604:	f015 0506 	ands.w	r5, r5, #6
90027608:	d106      	bne.n	90027618 <_printf_common+0x48>
9002760a:	f104 0a19 	add.w	sl, r4, #25
9002760e:	68e3      	ldr	r3, [r4, #12]
90027610:	6832      	ldr	r2, [r6, #0]
90027612:	1a9b      	subs	r3, r3, r2
90027614:	42ab      	cmp	r3, r5
90027616:	dc26      	bgt.n	90027666 <_printf_common+0x96>
90027618:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
9002761c:	1e13      	subs	r3, r2, #0
9002761e:	6822      	ldr	r2, [r4, #0]
90027620:	bf18      	it	ne
90027622:	2301      	movne	r3, #1
90027624:	0692      	lsls	r2, r2, #26
90027626:	d42b      	bmi.n	90027680 <_printf_common+0xb0>
90027628:	f104 0243 	add.w	r2, r4, #67	; 0x43
9002762c:	4649      	mov	r1, r9
9002762e:	4638      	mov	r0, r7
90027630:	47c0      	blx	r8
90027632:	3001      	adds	r0, #1
90027634:	d01e      	beq.n	90027674 <_printf_common+0xa4>
90027636:	6823      	ldr	r3, [r4, #0]
90027638:	68e5      	ldr	r5, [r4, #12]
9002763a:	6832      	ldr	r2, [r6, #0]
9002763c:	f003 0306 	and.w	r3, r3, #6
90027640:	2b04      	cmp	r3, #4
90027642:	bf08      	it	eq
90027644:	1aad      	subeq	r5, r5, r2
90027646:	68a3      	ldr	r3, [r4, #8]
90027648:	6922      	ldr	r2, [r4, #16]
9002764a:	bf0c      	ite	eq
9002764c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
90027650:	2500      	movne	r5, #0
90027652:	4293      	cmp	r3, r2
90027654:	bfc4      	itt	gt
90027656:	1a9b      	subgt	r3, r3, r2
90027658:	18ed      	addgt	r5, r5, r3
9002765a:	2600      	movs	r6, #0
9002765c:	341a      	adds	r4, #26
9002765e:	42b5      	cmp	r5, r6
90027660:	d11a      	bne.n	90027698 <_printf_common+0xc8>
90027662:	2000      	movs	r0, #0
90027664:	e008      	b.n	90027678 <_printf_common+0xa8>
90027666:	2301      	movs	r3, #1
90027668:	4652      	mov	r2, sl
9002766a:	4649      	mov	r1, r9
9002766c:	4638      	mov	r0, r7
9002766e:	47c0      	blx	r8
90027670:	3001      	adds	r0, #1
90027672:	d103      	bne.n	9002767c <_printf_common+0xac>
90027674:	f04f 30ff 	mov.w	r0, #4294967295
90027678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002767c:	3501      	adds	r5, #1
9002767e:	e7c6      	b.n	9002760e <_printf_common+0x3e>
90027680:	18e1      	adds	r1, r4, r3
90027682:	1c5a      	adds	r2, r3, #1
90027684:	2030      	movs	r0, #48	; 0x30
90027686:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
9002768a:	4422      	add	r2, r4
9002768c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
90027690:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
90027694:	3302      	adds	r3, #2
90027696:	e7c7      	b.n	90027628 <_printf_common+0x58>
90027698:	2301      	movs	r3, #1
9002769a:	4622      	mov	r2, r4
9002769c:	4649      	mov	r1, r9
9002769e:	4638      	mov	r0, r7
900276a0:	47c0      	blx	r8
900276a2:	3001      	adds	r0, #1
900276a4:	d0e6      	beq.n	90027674 <_printf_common+0xa4>
900276a6:	3601      	adds	r6, #1
900276a8:	e7d9      	b.n	9002765e <_printf_common+0x8e>
	...

900276ac <_printf_i>:
900276ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
900276b0:	7e0f      	ldrb	r7, [r1, #24]
900276b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
900276b4:	2f78      	cmp	r7, #120	; 0x78
900276b6:	4691      	mov	r9, r2
900276b8:	4680      	mov	r8, r0
900276ba:	460c      	mov	r4, r1
900276bc:	469a      	mov	sl, r3
900276be:	f101 0243 	add.w	r2, r1, #67	; 0x43
900276c2:	d807      	bhi.n	900276d4 <_printf_i+0x28>
900276c4:	2f62      	cmp	r7, #98	; 0x62
900276c6:	d80a      	bhi.n	900276de <_printf_i+0x32>
900276c8:	2f00      	cmp	r7, #0
900276ca:	f000 80d8 	beq.w	9002787e <_printf_i+0x1d2>
900276ce:	2f58      	cmp	r7, #88	; 0x58
900276d0:	f000 80a3 	beq.w	9002781a <_printf_i+0x16e>
900276d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
900276d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
900276dc:	e03a      	b.n	90027754 <_printf_i+0xa8>
900276de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
900276e2:	2b15      	cmp	r3, #21
900276e4:	d8f6      	bhi.n	900276d4 <_printf_i+0x28>
900276e6:	a101      	add	r1, pc, #4	; (adr r1, 900276ec <_printf_i+0x40>)
900276e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
900276ec:	90027745 	.word	0x90027745
900276f0:	90027759 	.word	0x90027759
900276f4:	900276d5 	.word	0x900276d5
900276f8:	900276d5 	.word	0x900276d5
900276fc:	900276d5 	.word	0x900276d5
90027700:	900276d5 	.word	0x900276d5
90027704:	90027759 	.word	0x90027759
90027708:	900276d5 	.word	0x900276d5
9002770c:	900276d5 	.word	0x900276d5
90027710:	900276d5 	.word	0x900276d5
90027714:	900276d5 	.word	0x900276d5
90027718:	90027865 	.word	0x90027865
9002771c:	90027789 	.word	0x90027789
90027720:	90027847 	.word	0x90027847
90027724:	900276d5 	.word	0x900276d5
90027728:	900276d5 	.word	0x900276d5
9002772c:	90027887 	.word	0x90027887
90027730:	900276d5 	.word	0x900276d5
90027734:	90027789 	.word	0x90027789
90027738:	900276d5 	.word	0x900276d5
9002773c:	900276d5 	.word	0x900276d5
90027740:	9002784f 	.word	0x9002784f
90027744:	682b      	ldr	r3, [r5, #0]
90027746:	1d1a      	adds	r2, r3, #4
90027748:	681b      	ldr	r3, [r3, #0]
9002774a:	602a      	str	r2, [r5, #0]
9002774c:	f104 0542 	add.w	r5, r4, #66	; 0x42
90027750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
90027754:	2301      	movs	r3, #1
90027756:	e0a3      	b.n	900278a0 <_printf_i+0x1f4>
90027758:	6820      	ldr	r0, [r4, #0]
9002775a:	6829      	ldr	r1, [r5, #0]
9002775c:	0606      	lsls	r6, r0, #24
9002775e:	f101 0304 	add.w	r3, r1, #4
90027762:	d50a      	bpl.n	9002777a <_printf_i+0xce>
90027764:	680e      	ldr	r6, [r1, #0]
90027766:	602b      	str	r3, [r5, #0]
90027768:	2e00      	cmp	r6, #0
9002776a:	da03      	bge.n	90027774 <_printf_i+0xc8>
9002776c:	232d      	movs	r3, #45	; 0x2d
9002776e:	4276      	negs	r6, r6
90027770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
90027774:	485e      	ldr	r0, [pc, #376]	; (900278f0 <_printf_i+0x244>)
90027776:	230a      	movs	r3, #10
90027778:	e019      	b.n	900277ae <_printf_i+0x102>
9002777a:	680e      	ldr	r6, [r1, #0]
9002777c:	602b      	str	r3, [r5, #0]
9002777e:	f010 0f40 	tst.w	r0, #64	; 0x40
90027782:	bf18      	it	ne
90027784:	b236      	sxthne	r6, r6
90027786:	e7ef      	b.n	90027768 <_printf_i+0xbc>
90027788:	682b      	ldr	r3, [r5, #0]
9002778a:	6820      	ldr	r0, [r4, #0]
9002778c:	1d19      	adds	r1, r3, #4
9002778e:	6029      	str	r1, [r5, #0]
90027790:	0601      	lsls	r1, r0, #24
90027792:	d501      	bpl.n	90027798 <_printf_i+0xec>
90027794:	681e      	ldr	r6, [r3, #0]
90027796:	e002      	b.n	9002779e <_printf_i+0xf2>
90027798:	0646      	lsls	r6, r0, #25
9002779a:	d5fb      	bpl.n	90027794 <_printf_i+0xe8>
9002779c:	881e      	ldrh	r6, [r3, #0]
9002779e:	4854      	ldr	r0, [pc, #336]	; (900278f0 <_printf_i+0x244>)
900277a0:	2f6f      	cmp	r7, #111	; 0x6f
900277a2:	bf0c      	ite	eq
900277a4:	2308      	moveq	r3, #8
900277a6:	230a      	movne	r3, #10
900277a8:	2100      	movs	r1, #0
900277aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
900277ae:	6865      	ldr	r5, [r4, #4]
900277b0:	60a5      	str	r5, [r4, #8]
900277b2:	2d00      	cmp	r5, #0
900277b4:	bfa2      	ittt	ge
900277b6:	6821      	ldrge	r1, [r4, #0]
900277b8:	f021 0104 	bicge.w	r1, r1, #4
900277bc:	6021      	strge	r1, [r4, #0]
900277be:	b90e      	cbnz	r6, 900277c4 <_printf_i+0x118>
900277c0:	2d00      	cmp	r5, #0
900277c2:	d04d      	beq.n	90027860 <_printf_i+0x1b4>
900277c4:	4615      	mov	r5, r2
900277c6:	fbb6 f1f3 	udiv	r1, r6, r3
900277ca:	fb03 6711 	mls	r7, r3, r1, r6
900277ce:	5dc7      	ldrb	r7, [r0, r7]
900277d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
900277d4:	4637      	mov	r7, r6
900277d6:	42bb      	cmp	r3, r7
900277d8:	460e      	mov	r6, r1
900277da:	d9f4      	bls.n	900277c6 <_printf_i+0x11a>
900277dc:	2b08      	cmp	r3, #8
900277de:	d10b      	bne.n	900277f8 <_printf_i+0x14c>
900277e0:	6823      	ldr	r3, [r4, #0]
900277e2:	07de      	lsls	r6, r3, #31
900277e4:	d508      	bpl.n	900277f8 <_printf_i+0x14c>
900277e6:	6923      	ldr	r3, [r4, #16]
900277e8:	6861      	ldr	r1, [r4, #4]
900277ea:	4299      	cmp	r1, r3
900277ec:	bfde      	ittt	le
900277ee:	2330      	movle	r3, #48	; 0x30
900277f0:	f805 3c01 	strble.w	r3, [r5, #-1]
900277f4:	f105 35ff 	addle.w	r5, r5, #4294967295
900277f8:	1b52      	subs	r2, r2, r5
900277fa:	6122      	str	r2, [r4, #16]
900277fc:	f8cd a000 	str.w	sl, [sp]
90027800:	464b      	mov	r3, r9
90027802:	aa03      	add	r2, sp, #12
90027804:	4621      	mov	r1, r4
90027806:	4640      	mov	r0, r8
90027808:	f7ff fee2 	bl	900275d0 <_printf_common>
9002780c:	3001      	adds	r0, #1
9002780e:	d14c      	bne.n	900278aa <_printf_i+0x1fe>
90027810:	f04f 30ff 	mov.w	r0, #4294967295
90027814:	b004      	add	sp, #16
90027816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
9002781a:	4835      	ldr	r0, [pc, #212]	; (900278f0 <_printf_i+0x244>)
9002781c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
90027820:	6829      	ldr	r1, [r5, #0]
90027822:	6823      	ldr	r3, [r4, #0]
90027824:	f851 6b04 	ldr.w	r6, [r1], #4
90027828:	6029      	str	r1, [r5, #0]
9002782a:	061d      	lsls	r5, r3, #24
9002782c:	d514      	bpl.n	90027858 <_printf_i+0x1ac>
9002782e:	07df      	lsls	r7, r3, #31
90027830:	bf44      	itt	mi
90027832:	f043 0320 	orrmi.w	r3, r3, #32
90027836:	6023      	strmi	r3, [r4, #0]
90027838:	b91e      	cbnz	r6, 90027842 <_printf_i+0x196>
9002783a:	6823      	ldr	r3, [r4, #0]
9002783c:	f023 0320 	bic.w	r3, r3, #32
90027840:	6023      	str	r3, [r4, #0]
90027842:	2310      	movs	r3, #16
90027844:	e7b0      	b.n	900277a8 <_printf_i+0xfc>
90027846:	6823      	ldr	r3, [r4, #0]
90027848:	f043 0320 	orr.w	r3, r3, #32
9002784c:	6023      	str	r3, [r4, #0]
9002784e:	2378      	movs	r3, #120	; 0x78
90027850:	4828      	ldr	r0, [pc, #160]	; (900278f4 <_printf_i+0x248>)
90027852:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
90027856:	e7e3      	b.n	90027820 <_printf_i+0x174>
90027858:	0659      	lsls	r1, r3, #25
9002785a:	bf48      	it	mi
9002785c:	b2b6      	uxthmi	r6, r6
9002785e:	e7e6      	b.n	9002782e <_printf_i+0x182>
90027860:	4615      	mov	r5, r2
90027862:	e7bb      	b.n	900277dc <_printf_i+0x130>
90027864:	682b      	ldr	r3, [r5, #0]
90027866:	6826      	ldr	r6, [r4, #0]
90027868:	6961      	ldr	r1, [r4, #20]
9002786a:	1d18      	adds	r0, r3, #4
9002786c:	6028      	str	r0, [r5, #0]
9002786e:	0635      	lsls	r5, r6, #24
90027870:	681b      	ldr	r3, [r3, #0]
90027872:	d501      	bpl.n	90027878 <_printf_i+0x1cc>
90027874:	6019      	str	r1, [r3, #0]
90027876:	e002      	b.n	9002787e <_printf_i+0x1d2>
90027878:	0670      	lsls	r0, r6, #25
9002787a:	d5fb      	bpl.n	90027874 <_printf_i+0x1c8>
9002787c:	8019      	strh	r1, [r3, #0]
9002787e:	2300      	movs	r3, #0
90027880:	6123      	str	r3, [r4, #16]
90027882:	4615      	mov	r5, r2
90027884:	e7ba      	b.n	900277fc <_printf_i+0x150>
90027886:	682b      	ldr	r3, [r5, #0]
90027888:	1d1a      	adds	r2, r3, #4
9002788a:	602a      	str	r2, [r5, #0]
9002788c:	681d      	ldr	r5, [r3, #0]
9002788e:	6862      	ldr	r2, [r4, #4]
90027890:	2100      	movs	r1, #0
90027892:	4628      	mov	r0, r5
90027894:	f7d8 fd24 	bl	900002e0 <memchr>
90027898:	b108      	cbz	r0, 9002789e <_printf_i+0x1f2>
9002789a:	1b40      	subs	r0, r0, r5
9002789c:	6060      	str	r0, [r4, #4]
9002789e:	6863      	ldr	r3, [r4, #4]
900278a0:	6123      	str	r3, [r4, #16]
900278a2:	2300      	movs	r3, #0
900278a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
900278a8:	e7a8      	b.n	900277fc <_printf_i+0x150>
900278aa:	6923      	ldr	r3, [r4, #16]
900278ac:	462a      	mov	r2, r5
900278ae:	4649      	mov	r1, r9
900278b0:	4640      	mov	r0, r8
900278b2:	47d0      	blx	sl
900278b4:	3001      	adds	r0, #1
900278b6:	d0ab      	beq.n	90027810 <_printf_i+0x164>
900278b8:	6823      	ldr	r3, [r4, #0]
900278ba:	079b      	lsls	r3, r3, #30
900278bc:	d413      	bmi.n	900278e6 <_printf_i+0x23a>
900278be:	68e0      	ldr	r0, [r4, #12]
900278c0:	9b03      	ldr	r3, [sp, #12]
900278c2:	4298      	cmp	r0, r3
900278c4:	bfb8      	it	lt
900278c6:	4618      	movlt	r0, r3
900278c8:	e7a4      	b.n	90027814 <_printf_i+0x168>
900278ca:	2301      	movs	r3, #1
900278cc:	4632      	mov	r2, r6
900278ce:	4649      	mov	r1, r9
900278d0:	4640      	mov	r0, r8
900278d2:	47d0      	blx	sl
900278d4:	3001      	adds	r0, #1
900278d6:	d09b      	beq.n	90027810 <_printf_i+0x164>
900278d8:	3501      	adds	r5, #1
900278da:	68e3      	ldr	r3, [r4, #12]
900278dc:	9903      	ldr	r1, [sp, #12]
900278de:	1a5b      	subs	r3, r3, r1
900278e0:	42ab      	cmp	r3, r5
900278e2:	dcf2      	bgt.n	900278ca <_printf_i+0x21e>
900278e4:	e7eb      	b.n	900278be <_printf_i+0x212>
900278e6:	2500      	movs	r5, #0
900278e8:	f104 0619 	add.w	r6, r4, #25
900278ec:	e7f5      	b.n	900278da <_printf_i+0x22e>
900278ee:	bf00      	nop
900278f0:	9002b8e9 	.word	0x9002b8e9
900278f4:	9002b8fa 	.word	0x9002b8fa

900278f8 <_sbrk_r>:
900278f8:	b538      	push	{r3, r4, r5, lr}
900278fa:	4d06      	ldr	r5, [pc, #24]	; (90027914 <_sbrk_r+0x1c>)
900278fc:	2300      	movs	r3, #0
900278fe:	4604      	mov	r4, r0
90027900:	4608      	mov	r0, r1
90027902:	602b      	str	r3, [r5, #0]
90027904:	f7dd faf6 	bl	90004ef4 <_sbrk>
90027908:	1c43      	adds	r3, r0, #1
9002790a:	d102      	bne.n	90027912 <_sbrk_r+0x1a>
9002790c:	682b      	ldr	r3, [r5, #0]
9002790e:	b103      	cbz	r3, 90027912 <_sbrk_r+0x1a>
90027910:	6023      	str	r3, [r4, #0]
90027912:	bd38      	pop	{r3, r4, r5, pc}
90027914:	24027230 	.word	0x24027230

90027918 <_raise_r>:
90027918:	291f      	cmp	r1, #31
9002791a:	b538      	push	{r3, r4, r5, lr}
9002791c:	4604      	mov	r4, r0
9002791e:	460d      	mov	r5, r1
90027920:	d904      	bls.n	9002792c <_raise_r+0x14>
90027922:	2316      	movs	r3, #22
90027924:	6003      	str	r3, [r0, #0]
90027926:	f04f 30ff 	mov.w	r0, #4294967295
9002792a:	bd38      	pop	{r3, r4, r5, pc}
9002792c:	6c42      	ldr	r2, [r0, #68]	; 0x44
9002792e:	b112      	cbz	r2, 90027936 <_raise_r+0x1e>
90027930:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
90027934:	b94b      	cbnz	r3, 9002794a <_raise_r+0x32>
90027936:	4620      	mov	r0, r4
90027938:	f000 f830 	bl	9002799c <_getpid_r>
9002793c:	462a      	mov	r2, r5
9002793e:	4601      	mov	r1, r0
90027940:	4620      	mov	r0, r4
90027942:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
90027946:	f000 b817 	b.w	90027978 <_kill_r>
9002794a:	2b01      	cmp	r3, #1
9002794c:	d00a      	beq.n	90027964 <_raise_r+0x4c>
9002794e:	1c59      	adds	r1, r3, #1
90027950:	d103      	bne.n	9002795a <_raise_r+0x42>
90027952:	2316      	movs	r3, #22
90027954:	6003      	str	r3, [r0, #0]
90027956:	2001      	movs	r0, #1
90027958:	e7e7      	b.n	9002792a <_raise_r+0x12>
9002795a:	2400      	movs	r4, #0
9002795c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
90027960:	4628      	mov	r0, r5
90027962:	4798      	blx	r3
90027964:	2000      	movs	r0, #0
90027966:	e7e0      	b.n	9002792a <_raise_r+0x12>

90027968 <raise>:
90027968:	4b02      	ldr	r3, [pc, #8]	; (90027974 <raise+0xc>)
9002796a:	4601      	mov	r1, r0
9002796c:	6818      	ldr	r0, [r3, #0]
9002796e:	f7ff bfd3 	b.w	90027918 <_raise_r>
90027972:	bf00      	nop
90027974:	240000e0 	.word	0x240000e0

90027978 <_kill_r>:
90027978:	b538      	push	{r3, r4, r5, lr}
9002797a:	4d07      	ldr	r5, [pc, #28]	; (90027998 <_kill_r+0x20>)
9002797c:	2300      	movs	r3, #0
9002797e:	4604      	mov	r4, r0
90027980:	4608      	mov	r0, r1
90027982:	4611      	mov	r1, r2
90027984:	602b      	str	r3, [r5, #0]
90027986:	f7dd fa7b 	bl	90004e80 <_kill>
9002798a:	1c43      	adds	r3, r0, #1
9002798c:	d102      	bne.n	90027994 <_kill_r+0x1c>
9002798e:	682b      	ldr	r3, [r5, #0]
90027990:	b103      	cbz	r3, 90027994 <_kill_r+0x1c>
90027992:	6023      	str	r3, [r4, #0]
90027994:	bd38      	pop	{r3, r4, r5, pc}
90027996:	bf00      	nop
90027998:	24027230 	.word	0x24027230

9002799c <_getpid_r>:
9002799c:	f7dd ba6e 	b.w	90004e7c <_getpid>

900279a0 <strncmp>:
900279a0:	b510      	push	{r4, lr}
900279a2:	b17a      	cbz	r2, 900279c4 <strncmp+0x24>
900279a4:	4603      	mov	r3, r0
900279a6:	3901      	subs	r1, #1
900279a8:	1884      	adds	r4, r0, r2
900279aa:	f813 0b01 	ldrb.w	r0, [r3], #1
900279ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
900279b2:	4290      	cmp	r0, r2
900279b4:	d101      	bne.n	900279ba <strncmp+0x1a>
900279b6:	42a3      	cmp	r3, r4
900279b8:	d101      	bne.n	900279be <strncmp+0x1e>
900279ba:	1a80      	subs	r0, r0, r2
900279bc:	bd10      	pop	{r4, pc}
900279be:	2800      	cmp	r0, #0
900279c0:	d1f3      	bne.n	900279aa <strncmp+0xa>
900279c2:	e7fa      	b.n	900279ba <strncmp+0x1a>
900279c4:	4610      	mov	r0, r2
900279c6:	e7f9      	b.n	900279bc <strncmp+0x1c>

900279c8 <strncpy>:
900279c8:	b510      	push	{r4, lr}
900279ca:	3901      	subs	r1, #1
900279cc:	4603      	mov	r3, r0
900279ce:	b132      	cbz	r2, 900279de <strncpy+0x16>
900279d0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
900279d4:	f803 4b01 	strb.w	r4, [r3], #1
900279d8:	3a01      	subs	r2, #1
900279da:	2c00      	cmp	r4, #0
900279dc:	d1f7      	bne.n	900279ce <strncpy+0x6>
900279de:	441a      	add	r2, r3
900279e0:	2100      	movs	r1, #0
900279e2:	4293      	cmp	r3, r2
900279e4:	d100      	bne.n	900279e8 <strncpy+0x20>
900279e6:	bd10      	pop	{r4, pc}
900279e8:	f803 1b01 	strb.w	r1, [r3], #1
900279ec:	e7f9      	b.n	900279e2 <strncpy+0x1a>
	...

900279f0 <__swbuf_r>:
900279f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900279f2:	460e      	mov	r6, r1
900279f4:	4614      	mov	r4, r2
900279f6:	4605      	mov	r5, r0
900279f8:	b118      	cbz	r0, 90027a02 <__swbuf_r+0x12>
900279fa:	6983      	ldr	r3, [r0, #24]
900279fc:	b90b      	cbnz	r3, 90027a02 <__swbuf_r+0x12>
900279fe:	f000 fa33 	bl	90027e68 <__sinit>
90027a02:	4b21      	ldr	r3, [pc, #132]	; (90027a88 <__swbuf_r+0x98>)
90027a04:	429c      	cmp	r4, r3
90027a06:	d12b      	bne.n	90027a60 <__swbuf_r+0x70>
90027a08:	686c      	ldr	r4, [r5, #4]
90027a0a:	69a3      	ldr	r3, [r4, #24]
90027a0c:	60a3      	str	r3, [r4, #8]
90027a0e:	89a3      	ldrh	r3, [r4, #12]
90027a10:	071a      	lsls	r2, r3, #28
90027a12:	d52f      	bpl.n	90027a74 <__swbuf_r+0x84>
90027a14:	6923      	ldr	r3, [r4, #16]
90027a16:	b36b      	cbz	r3, 90027a74 <__swbuf_r+0x84>
90027a18:	6923      	ldr	r3, [r4, #16]
90027a1a:	6820      	ldr	r0, [r4, #0]
90027a1c:	1ac0      	subs	r0, r0, r3
90027a1e:	6963      	ldr	r3, [r4, #20]
90027a20:	b2f6      	uxtb	r6, r6
90027a22:	4283      	cmp	r3, r0
90027a24:	4637      	mov	r7, r6
90027a26:	dc04      	bgt.n	90027a32 <__swbuf_r+0x42>
90027a28:	4621      	mov	r1, r4
90027a2a:	4628      	mov	r0, r5
90027a2c:	f000 f988 	bl	90027d40 <_fflush_r>
90027a30:	bb30      	cbnz	r0, 90027a80 <__swbuf_r+0x90>
90027a32:	68a3      	ldr	r3, [r4, #8]
90027a34:	3b01      	subs	r3, #1
90027a36:	60a3      	str	r3, [r4, #8]
90027a38:	6823      	ldr	r3, [r4, #0]
90027a3a:	1c5a      	adds	r2, r3, #1
90027a3c:	6022      	str	r2, [r4, #0]
90027a3e:	701e      	strb	r6, [r3, #0]
90027a40:	6963      	ldr	r3, [r4, #20]
90027a42:	3001      	adds	r0, #1
90027a44:	4283      	cmp	r3, r0
90027a46:	d004      	beq.n	90027a52 <__swbuf_r+0x62>
90027a48:	89a3      	ldrh	r3, [r4, #12]
90027a4a:	07db      	lsls	r3, r3, #31
90027a4c:	d506      	bpl.n	90027a5c <__swbuf_r+0x6c>
90027a4e:	2e0a      	cmp	r6, #10
90027a50:	d104      	bne.n	90027a5c <__swbuf_r+0x6c>
90027a52:	4621      	mov	r1, r4
90027a54:	4628      	mov	r0, r5
90027a56:	f000 f973 	bl	90027d40 <_fflush_r>
90027a5a:	b988      	cbnz	r0, 90027a80 <__swbuf_r+0x90>
90027a5c:	4638      	mov	r0, r7
90027a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90027a60:	4b0a      	ldr	r3, [pc, #40]	; (90027a8c <__swbuf_r+0x9c>)
90027a62:	429c      	cmp	r4, r3
90027a64:	d101      	bne.n	90027a6a <__swbuf_r+0x7a>
90027a66:	68ac      	ldr	r4, [r5, #8]
90027a68:	e7cf      	b.n	90027a0a <__swbuf_r+0x1a>
90027a6a:	4b09      	ldr	r3, [pc, #36]	; (90027a90 <__swbuf_r+0xa0>)
90027a6c:	429c      	cmp	r4, r3
90027a6e:	bf08      	it	eq
90027a70:	68ec      	ldreq	r4, [r5, #12]
90027a72:	e7ca      	b.n	90027a0a <__swbuf_r+0x1a>
90027a74:	4621      	mov	r1, r4
90027a76:	4628      	mov	r0, r5
90027a78:	f000 f80c 	bl	90027a94 <__swsetup_r>
90027a7c:	2800      	cmp	r0, #0
90027a7e:	d0cb      	beq.n	90027a18 <__swbuf_r+0x28>
90027a80:	f04f 37ff 	mov.w	r7, #4294967295
90027a84:	e7ea      	b.n	90027a5c <__swbuf_r+0x6c>
90027a86:	bf00      	nop
90027a88:	9002b930 	.word	0x9002b930
90027a8c:	9002b950 	.word	0x9002b950
90027a90:	9002b910 	.word	0x9002b910

90027a94 <__swsetup_r>:
90027a94:	4b32      	ldr	r3, [pc, #200]	; (90027b60 <__swsetup_r+0xcc>)
90027a96:	b570      	push	{r4, r5, r6, lr}
90027a98:	681d      	ldr	r5, [r3, #0]
90027a9a:	4606      	mov	r6, r0
90027a9c:	460c      	mov	r4, r1
90027a9e:	b125      	cbz	r5, 90027aaa <__swsetup_r+0x16>
90027aa0:	69ab      	ldr	r3, [r5, #24]
90027aa2:	b913      	cbnz	r3, 90027aaa <__swsetup_r+0x16>
90027aa4:	4628      	mov	r0, r5
90027aa6:	f000 f9df 	bl	90027e68 <__sinit>
90027aaa:	4b2e      	ldr	r3, [pc, #184]	; (90027b64 <__swsetup_r+0xd0>)
90027aac:	429c      	cmp	r4, r3
90027aae:	d10f      	bne.n	90027ad0 <__swsetup_r+0x3c>
90027ab0:	686c      	ldr	r4, [r5, #4]
90027ab2:	89a3      	ldrh	r3, [r4, #12]
90027ab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027ab8:	0719      	lsls	r1, r3, #28
90027aba:	d42c      	bmi.n	90027b16 <__swsetup_r+0x82>
90027abc:	06dd      	lsls	r5, r3, #27
90027abe:	d411      	bmi.n	90027ae4 <__swsetup_r+0x50>
90027ac0:	2309      	movs	r3, #9
90027ac2:	6033      	str	r3, [r6, #0]
90027ac4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
90027ac8:	81a3      	strh	r3, [r4, #12]
90027aca:	f04f 30ff 	mov.w	r0, #4294967295
90027ace:	e03e      	b.n	90027b4e <__swsetup_r+0xba>
90027ad0:	4b25      	ldr	r3, [pc, #148]	; (90027b68 <__swsetup_r+0xd4>)
90027ad2:	429c      	cmp	r4, r3
90027ad4:	d101      	bne.n	90027ada <__swsetup_r+0x46>
90027ad6:	68ac      	ldr	r4, [r5, #8]
90027ad8:	e7eb      	b.n	90027ab2 <__swsetup_r+0x1e>
90027ada:	4b24      	ldr	r3, [pc, #144]	; (90027b6c <__swsetup_r+0xd8>)
90027adc:	429c      	cmp	r4, r3
90027ade:	bf08      	it	eq
90027ae0:	68ec      	ldreq	r4, [r5, #12]
90027ae2:	e7e6      	b.n	90027ab2 <__swsetup_r+0x1e>
90027ae4:	0758      	lsls	r0, r3, #29
90027ae6:	d512      	bpl.n	90027b0e <__swsetup_r+0x7a>
90027ae8:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027aea:	b141      	cbz	r1, 90027afe <__swsetup_r+0x6a>
90027aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027af0:	4299      	cmp	r1, r3
90027af2:	d002      	beq.n	90027afa <__swsetup_r+0x66>
90027af4:	4630      	mov	r0, r6
90027af6:	f7ff fb31 	bl	9002715c <_free_r>
90027afa:	2300      	movs	r3, #0
90027afc:	6363      	str	r3, [r4, #52]	; 0x34
90027afe:	89a3      	ldrh	r3, [r4, #12]
90027b00:	f023 0324 	bic.w	r3, r3, #36	; 0x24
90027b04:	81a3      	strh	r3, [r4, #12]
90027b06:	2300      	movs	r3, #0
90027b08:	6063      	str	r3, [r4, #4]
90027b0a:	6923      	ldr	r3, [r4, #16]
90027b0c:	6023      	str	r3, [r4, #0]
90027b0e:	89a3      	ldrh	r3, [r4, #12]
90027b10:	f043 0308 	orr.w	r3, r3, #8
90027b14:	81a3      	strh	r3, [r4, #12]
90027b16:	6923      	ldr	r3, [r4, #16]
90027b18:	b94b      	cbnz	r3, 90027b2e <__swsetup_r+0x9a>
90027b1a:	89a3      	ldrh	r3, [r4, #12]
90027b1c:	f403 7320 	and.w	r3, r3, #640	; 0x280
90027b20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
90027b24:	d003      	beq.n	90027b2e <__swsetup_r+0x9a>
90027b26:	4621      	mov	r1, r4
90027b28:	4630      	mov	r0, r6
90027b2a:	f000 fa5f 	bl	90027fec <__smakebuf_r>
90027b2e:	89a0      	ldrh	r0, [r4, #12]
90027b30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
90027b34:	f010 0301 	ands.w	r3, r0, #1
90027b38:	d00a      	beq.n	90027b50 <__swsetup_r+0xbc>
90027b3a:	2300      	movs	r3, #0
90027b3c:	60a3      	str	r3, [r4, #8]
90027b3e:	6963      	ldr	r3, [r4, #20]
90027b40:	425b      	negs	r3, r3
90027b42:	61a3      	str	r3, [r4, #24]
90027b44:	6923      	ldr	r3, [r4, #16]
90027b46:	b943      	cbnz	r3, 90027b5a <__swsetup_r+0xc6>
90027b48:	f010 0080 	ands.w	r0, r0, #128	; 0x80
90027b4c:	d1ba      	bne.n	90027ac4 <__swsetup_r+0x30>
90027b4e:	bd70      	pop	{r4, r5, r6, pc}
90027b50:	0781      	lsls	r1, r0, #30
90027b52:	bf58      	it	pl
90027b54:	6963      	ldrpl	r3, [r4, #20]
90027b56:	60a3      	str	r3, [r4, #8]
90027b58:	e7f4      	b.n	90027b44 <__swsetup_r+0xb0>
90027b5a:	2000      	movs	r0, #0
90027b5c:	e7f7      	b.n	90027b4e <__swsetup_r+0xba>
90027b5e:	bf00      	nop
90027b60:	240000e0 	.word	0x240000e0
90027b64:	9002b930 	.word	0x9002b930
90027b68:	9002b950 	.word	0x9002b950
90027b6c:	9002b910 	.word	0x9002b910

90027b70 <__register_exitproc>:
90027b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027b74:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 90027c30 <__register_exitproc+0xc0>
90027b78:	4606      	mov	r6, r0
90027b7a:	f8d8 0000 	ldr.w	r0, [r8]
90027b7e:	461f      	mov	r7, r3
90027b80:	460d      	mov	r5, r1
90027b82:	4691      	mov	r9, r2
90027b84:	f7ff fac1 	bl	9002710a <__retarget_lock_acquire_recursive>
90027b88:	4b25      	ldr	r3, [pc, #148]	; (90027c20 <__register_exitproc+0xb0>)
90027b8a:	681c      	ldr	r4, [r3, #0]
90027b8c:	b934      	cbnz	r4, 90027b9c <__register_exitproc+0x2c>
90027b8e:	4c25      	ldr	r4, [pc, #148]	; (90027c24 <__register_exitproc+0xb4>)
90027b90:	601c      	str	r4, [r3, #0]
90027b92:	4b25      	ldr	r3, [pc, #148]	; (90027c28 <__register_exitproc+0xb8>)
90027b94:	b113      	cbz	r3, 90027b9c <__register_exitproc+0x2c>
90027b96:	681b      	ldr	r3, [r3, #0]
90027b98:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
90027b9c:	6863      	ldr	r3, [r4, #4]
90027b9e:	2b1f      	cmp	r3, #31
90027ba0:	dd07      	ble.n	90027bb2 <__register_exitproc+0x42>
90027ba2:	f8d8 0000 	ldr.w	r0, [r8]
90027ba6:	f7ff fab2 	bl	9002710e <__retarget_lock_release_recursive>
90027baa:	f04f 30ff 	mov.w	r0, #4294967295
90027bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027bb2:	b34e      	cbz	r6, 90027c08 <__register_exitproc+0x98>
90027bb4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
90027bb8:	b988      	cbnz	r0, 90027bde <__register_exitproc+0x6e>
90027bba:	4b1c      	ldr	r3, [pc, #112]	; (90027c2c <__register_exitproc+0xbc>)
90027bbc:	b923      	cbnz	r3, 90027bc8 <__register_exitproc+0x58>
90027bbe:	f8d8 0000 	ldr.w	r0, [r8]
90027bc2:	f7ff faa3 	bl	9002710c <__retarget_lock_release>
90027bc6:	e7f0      	b.n	90027baa <__register_exitproc+0x3a>
90027bc8:	f44f 7084 	mov.w	r0, #264	; 0x108
90027bcc:	f7ff faa0 	bl	90027110 <malloc>
90027bd0:	2800      	cmp	r0, #0
90027bd2:	d0f4      	beq.n	90027bbe <__register_exitproc+0x4e>
90027bd4:	2300      	movs	r3, #0
90027bd6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
90027bda:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
90027bde:	6863      	ldr	r3, [r4, #4]
90027be0:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
90027be4:	2201      	movs	r2, #1
90027be6:	409a      	lsls	r2, r3
90027be8:	eb00 0183 	add.w	r1, r0, r3, lsl #2
90027bec:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
90027bf0:	4313      	orrs	r3, r2
90027bf2:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
90027bf6:	2e02      	cmp	r6, #2
90027bf8:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
90027bfc:	bf02      	ittt	eq
90027bfe:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
90027c02:	4313      	orreq	r3, r2
90027c04:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
90027c08:	6863      	ldr	r3, [r4, #4]
90027c0a:	f8d8 0000 	ldr.w	r0, [r8]
90027c0e:	1c5a      	adds	r2, r3, #1
90027c10:	3302      	adds	r3, #2
90027c12:	6062      	str	r2, [r4, #4]
90027c14:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
90027c18:	f7ff fa79 	bl	9002710e <__retarget_lock_release_recursive>
90027c1c:	2000      	movs	r0, #0
90027c1e:	e7c6      	b.n	90027bae <__register_exitproc+0x3e>
90027c20:	2402722c 	.word	0x2402722c
90027c24:	240271a0 	.word	0x240271a0
90027c28:	9002b90c 	.word	0x9002b90c
90027c2c:	90027111 	.word	0x90027111
90027c30:	24000144 	.word	0x24000144

90027c34 <__sflush_r>:
90027c34:	898a      	ldrh	r2, [r1, #12]
90027c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
90027c3a:	4605      	mov	r5, r0
90027c3c:	0710      	lsls	r0, r2, #28
90027c3e:	460c      	mov	r4, r1
90027c40:	d458      	bmi.n	90027cf4 <__sflush_r+0xc0>
90027c42:	684b      	ldr	r3, [r1, #4]
90027c44:	2b00      	cmp	r3, #0
90027c46:	dc05      	bgt.n	90027c54 <__sflush_r+0x20>
90027c48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
90027c4a:	2b00      	cmp	r3, #0
90027c4c:	dc02      	bgt.n	90027c54 <__sflush_r+0x20>
90027c4e:	2000      	movs	r0, #0
90027c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
90027c54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027c56:	2e00      	cmp	r6, #0
90027c58:	d0f9      	beq.n	90027c4e <__sflush_r+0x1a>
90027c5a:	2300      	movs	r3, #0
90027c5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
90027c60:	682f      	ldr	r7, [r5, #0]
90027c62:	602b      	str	r3, [r5, #0]
90027c64:	d032      	beq.n	90027ccc <__sflush_r+0x98>
90027c66:	6d60      	ldr	r0, [r4, #84]	; 0x54
90027c68:	89a3      	ldrh	r3, [r4, #12]
90027c6a:	075a      	lsls	r2, r3, #29
90027c6c:	d505      	bpl.n	90027c7a <__sflush_r+0x46>
90027c6e:	6863      	ldr	r3, [r4, #4]
90027c70:	1ac0      	subs	r0, r0, r3
90027c72:	6b63      	ldr	r3, [r4, #52]	; 0x34
90027c74:	b10b      	cbz	r3, 90027c7a <__sflush_r+0x46>
90027c76:	6c23      	ldr	r3, [r4, #64]	; 0x40
90027c78:	1ac0      	subs	r0, r0, r3
90027c7a:	2300      	movs	r3, #0
90027c7c:	4602      	mov	r2, r0
90027c7e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
90027c80:	6a21      	ldr	r1, [r4, #32]
90027c82:	4628      	mov	r0, r5
90027c84:	47b0      	blx	r6
90027c86:	1c43      	adds	r3, r0, #1
90027c88:	89a3      	ldrh	r3, [r4, #12]
90027c8a:	d106      	bne.n	90027c9a <__sflush_r+0x66>
90027c8c:	6829      	ldr	r1, [r5, #0]
90027c8e:	291d      	cmp	r1, #29
90027c90:	d82c      	bhi.n	90027cec <__sflush_r+0xb8>
90027c92:	4a2a      	ldr	r2, [pc, #168]	; (90027d3c <__sflush_r+0x108>)
90027c94:	40ca      	lsrs	r2, r1
90027c96:	07d6      	lsls	r6, r2, #31
90027c98:	d528      	bpl.n	90027cec <__sflush_r+0xb8>
90027c9a:	2200      	movs	r2, #0
90027c9c:	6062      	str	r2, [r4, #4]
90027c9e:	04d9      	lsls	r1, r3, #19
90027ca0:	6922      	ldr	r2, [r4, #16]
90027ca2:	6022      	str	r2, [r4, #0]
90027ca4:	d504      	bpl.n	90027cb0 <__sflush_r+0x7c>
90027ca6:	1c42      	adds	r2, r0, #1
90027ca8:	d101      	bne.n	90027cae <__sflush_r+0x7a>
90027caa:	682b      	ldr	r3, [r5, #0]
90027cac:	b903      	cbnz	r3, 90027cb0 <__sflush_r+0x7c>
90027cae:	6560      	str	r0, [r4, #84]	; 0x54
90027cb0:	6b61      	ldr	r1, [r4, #52]	; 0x34
90027cb2:	602f      	str	r7, [r5, #0]
90027cb4:	2900      	cmp	r1, #0
90027cb6:	d0ca      	beq.n	90027c4e <__sflush_r+0x1a>
90027cb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
90027cbc:	4299      	cmp	r1, r3
90027cbe:	d002      	beq.n	90027cc6 <__sflush_r+0x92>
90027cc0:	4628      	mov	r0, r5
90027cc2:	f7ff fa4b 	bl	9002715c <_free_r>
90027cc6:	2000      	movs	r0, #0
90027cc8:	6360      	str	r0, [r4, #52]	; 0x34
90027cca:	e7c1      	b.n	90027c50 <__sflush_r+0x1c>
90027ccc:	6a21      	ldr	r1, [r4, #32]
90027cce:	2301      	movs	r3, #1
90027cd0:	4628      	mov	r0, r5
90027cd2:	47b0      	blx	r6
90027cd4:	1c41      	adds	r1, r0, #1
90027cd6:	d1c7      	bne.n	90027c68 <__sflush_r+0x34>
90027cd8:	682b      	ldr	r3, [r5, #0]
90027cda:	2b00      	cmp	r3, #0
90027cdc:	d0c4      	beq.n	90027c68 <__sflush_r+0x34>
90027cde:	2b1d      	cmp	r3, #29
90027ce0:	d001      	beq.n	90027ce6 <__sflush_r+0xb2>
90027ce2:	2b16      	cmp	r3, #22
90027ce4:	d101      	bne.n	90027cea <__sflush_r+0xb6>
90027ce6:	602f      	str	r7, [r5, #0]
90027ce8:	e7b1      	b.n	90027c4e <__sflush_r+0x1a>
90027cea:	89a3      	ldrh	r3, [r4, #12]
90027cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90027cf0:	81a3      	strh	r3, [r4, #12]
90027cf2:	e7ad      	b.n	90027c50 <__sflush_r+0x1c>
90027cf4:	690f      	ldr	r7, [r1, #16]
90027cf6:	2f00      	cmp	r7, #0
90027cf8:	d0a9      	beq.n	90027c4e <__sflush_r+0x1a>
90027cfa:	0793      	lsls	r3, r2, #30
90027cfc:	680e      	ldr	r6, [r1, #0]
90027cfe:	bf08      	it	eq
90027d00:	694b      	ldreq	r3, [r1, #20]
90027d02:	600f      	str	r7, [r1, #0]
90027d04:	bf18      	it	ne
90027d06:	2300      	movne	r3, #0
90027d08:	eba6 0807 	sub.w	r8, r6, r7
90027d0c:	608b      	str	r3, [r1, #8]
90027d0e:	f1b8 0f00 	cmp.w	r8, #0
90027d12:	dd9c      	ble.n	90027c4e <__sflush_r+0x1a>
90027d14:	6a21      	ldr	r1, [r4, #32]
90027d16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
90027d18:	4643      	mov	r3, r8
90027d1a:	463a      	mov	r2, r7
90027d1c:	4628      	mov	r0, r5
90027d1e:	47b0      	blx	r6
90027d20:	2800      	cmp	r0, #0
90027d22:	dc06      	bgt.n	90027d32 <__sflush_r+0xfe>
90027d24:	89a3      	ldrh	r3, [r4, #12]
90027d26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
90027d2a:	81a3      	strh	r3, [r4, #12]
90027d2c:	f04f 30ff 	mov.w	r0, #4294967295
90027d30:	e78e      	b.n	90027c50 <__sflush_r+0x1c>
90027d32:	4407      	add	r7, r0
90027d34:	eba8 0800 	sub.w	r8, r8, r0
90027d38:	e7e9      	b.n	90027d0e <__sflush_r+0xda>
90027d3a:	bf00      	nop
90027d3c:	20400001 	.word	0x20400001

90027d40 <_fflush_r>:
90027d40:	b538      	push	{r3, r4, r5, lr}
90027d42:	690b      	ldr	r3, [r1, #16]
90027d44:	4605      	mov	r5, r0
90027d46:	460c      	mov	r4, r1
90027d48:	b913      	cbnz	r3, 90027d50 <_fflush_r+0x10>
90027d4a:	2500      	movs	r5, #0
90027d4c:	4628      	mov	r0, r5
90027d4e:	bd38      	pop	{r3, r4, r5, pc}
90027d50:	b118      	cbz	r0, 90027d5a <_fflush_r+0x1a>
90027d52:	6983      	ldr	r3, [r0, #24]
90027d54:	b90b      	cbnz	r3, 90027d5a <_fflush_r+0x1a>
90027d56:	f000 f887 	bl	90027e68 <__sinit>
90027d5a:	4b14      	ldr	r3, [pc, #80]	; (90027dac <_fflush_r+0x6c>)
90027d5c:	429c      	cmp	r4, r3
90027d5e:	d11b      	bne.n	90027d98 <_fflush_r+0x58>
90027d60:	686c      	ldr	r4, [r5, #4]
90027d62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90027d66:	2b00      	cmp	r3, #0
90027d68:	d0ef      	beq.n	90027d4a <_fflush_r+0xa>
90027d6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
90027d6c:	07d0      	lsls	r0, r2, #31
90027d6e:	d404      	bmi.n	90027d7a <_fflush_r+0x3a>
90027d70:	0599      	lsls	r1, r3, #22
90027d72:	d402      	bmi.n	90027d7a <_fflush_r+0x3a>
90027d74:	6da0      	ldr	r0, [r4, #88]	; 0x58
90027d76:	f7ff f9c8 	bl	9002710a <__retarget_lock_acquire_recursive>
90027d7a:	4628      	mov	r0, r5
90027d7c:	4621      	mov	r1, r4
90027d7e:	f7ff ff59 	bl	90027c34 <__sflush_r>
90027d82:	6e63      	ldr	r3, [r4, #100]	; 0x64
90027d84:	07da      	lsls	r2, r3, #31
90027d86:	4605      	mov	r5, r0
90027d88:	d4e0      	bmi.n	90027d4c <_fflush_r+0xc>
90027d8a:	89a3      	ldrh	r3, [r4, #12]
90027d8c:	059b      	lsls	r3, r3, #22
90027d8e:	d4dd      	bmi.n	90027d4c <_fflush_r+0xc>
90027d90:	6da0      	ldr	r0, [r4, #88]	; 0x58
90027d92:	f7ff f9bc 	bl	9002710e <__retarget_lock_release_recursive>
90027d96:	e7d9      	b.n	90027d4c <_fflush_r+0xc>
90027d98:	4b05      	ldr	r3, [pc, #20]	; (90027db0 <_fflush_r+0x70>)
90027d9a:	429c      	cmp	r4, r3
90027d9c:	d101      	bne.n	90027da2 <_fflush_r+0x62>
90027d9e:	68ac      	ldr	r4, [r5, #8]
90027da0:	e7df      	b.n	90027d62 <_fflush_r+0x22>
90027da2:	4b04      	ldr	r3, [pc, #16]	; (90027db4 <_fflush_r+0x74>)
90027da4:	429c      	cmp	r4, r3
90027da6:	bf08      	it	eq
90027da8:	68ec      	ldreq	r4, [r5, #12]
90027daa:	e7da      	b.n	90027d62 <_fflush_r+0x22>
90027dac:	9002b930 	.word	0x9002b930
90027db0:	9002b950 	.word	0x9002b950
90027db4:	9002b910 	.word	0x9002b910

90027db8 <std>:
90027db8:	2300      	movs	r3, #0
90027dba:	b510      	push	{r4, lr}
90027dbc:	4604      	mov	r4, r0
90027dbe:	e9c0 3300 	strd	r3, r3, [r0]
90027dc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
90027dc6:	6083      	str	r3, [r0, #8]
90027dc8:	8181      	strh	r1, [r0, #12]
90027dca:	6643      	str	r3, [r0, #100]	; 0x64
90027dcc:	81c2      	strh	r2, [r0, #14]
90027dce:	6183      	str	r3, [r0, #24]
90027dd0:	4619      	mov	r1, r3
90027dd2:	2208      	movs	r2, #8
90027dd4:	305c      	adds	r0, #92	; 0x5c
90027dd6:	f7ff f9b9 	bl	9002714c <memset>
90027dda:	4b05      	ldr	r3, [pc, #20]	; (90027df0 <std+0x38>)
90027ddc:	6263      	str	r3, [r4, #36]	; 0x24
90027dde:	4b05      	ldr	r3, [pc, #20]	; (90027df4 <std+0x3c>)
90027de0:	62a3      	str	r3, [r4, #40]	; 0x28
90027de2:	4b05      	ldr	r3, [pc, #20]	; (90027df8 <std+0x40>)
90027de4:	62e3      	str	r3, [r4, #44]	; 0x2c
90027de6:	4b05      	ldr	r3, [pc, #20]	; (90027dfc <std+0x44>)
90027de8:	6224      	str	r4, [r4, #32]
90027dea:	6323      	str	r3, [r4, #48]	; 0x30
90027dec:	bd10      	pop	{r4, pc}
90027dee:	bf00      	nop
90027df0:	90028085 	.word	0x90028085
90027df4:	900280a7 	.word	0x900280a7
90027df8:	900280df 	.word	0x900280df
90027dfc:	90028103 	.word	0x90028103

90027e00 <_cleanup_r>:
90027e00:	4901      	ldr	r1, [pc, #4]	; (90027e08 <_cleanup_r+0x8>)
90027e02:	f000 b8af 	b.w	90027f64 <_fwalk_reent>
90027e06:	bf00      	nop
90027e08:	90027d41 	.word	0x90027d41

90027e0c <__sfmoreglue>:
90027e0c:	b570      	push	{r4, r5, r6, lr}
90027e0e:	2268      	movs	r2, #104	; 0x68
90027e10:	1e4d      	subs	r5, r1, #1
90027e12:	4355      	muls	r5, r2
90027e14:	460e      	mov	r6, r1
90027e16:	f105 0174 	add.w	r1, r5, #116	; 0x74
90027e1a:	f7ff fa0b 	bl	90027234 <_malloc_r>
90027e1e:	4604      	mov	r4, r0
90027e20:	b140      	cbz	r0, 90027e34 <__sfmoreglue+0x28>
90027e22:	2100      	movs	r1, #0
90027e24:	e9c0 1600 	strd	r1, r6, [r0]
90027e28:	300c      	adds	r0, #12
90027e2a:	60a0      	str	r0, [r4, #8]
90027e2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
90027e30:	f7ff f98c 	bl	9002714c <memset>
90027e34:	4620      	mov	r0, r4
90027e36:	bd70      	pop	{r4, r5, r6, pc}

90027e38 <__sfp_lock_acquire>:
90027e38:	4801      	ldr	r0, [pc, #4]	; (90027e40 <__sfp_lock_acquire+0x8>)
90027e3a:	f7ff b966 	b.w	9002710a <__retarget_lock_acquire_recursive>
90027e3e:	bf00      	nop
90027e40:	2402708e 	.word	0x2402708e

90027e44 <__sfp_lock_release>:
90027e44:	4801      	ldr	r0, [pc, #4]	; (90027e4c <__sfp_lock_release+0x8>)
90027e46:	f7ff b962 	b.w	9002710e <__retarget_lock_release_recursive>
90027e4a:	bf00      	nop
90027e4c:	2402708e 	.word	0x2402708e

90027e50 <__sinit_lock_acquire>:
90027e50:	4801      	ldr	r0, [pc, #4]	; (90027e58 <__sinit_lock_acquire+0x8>)
90027e52:	f7ff b95a 	b.w	9002710a <__retarget_lock_acquire_recursive>
90027e56:	bf00      	nop
90027e58:	2402708f 	.word	0x2402708f

90027e5c <__sinit_lock_release>:
90027e5c:	4801      	ldr	r0, [pc, #4]	; (90027e64 <__sinit_lock_release+0x8>)
90027e5e:	f7ff b956 	b.w	9002710e <__retarget_lock_release_recursive>
90027e62:	bf00      	nop
90027e64:	2402708f 	.word	0x2402708f

90027e68 <__sinit>:
90027e68:	b510      	push	{r4, lr}
90027e6a:	4604      	mov	r4, r0
90027e6c:	f7ff fff0 	bl	90027e50 <__sinit_lock_acquire>
90027e70:	69a3      	ldr	r3, [r4, #24]
90027e72:	b11b      	cbz	r3, 90027e7c <__sinit+0x14>
90027e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
90027e78:	f7ff bff0 	b.w	90027e5c <__sinit_lock_release>
90027e7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
90027e80:	6523      	str	r3, [r4, #80]	; 0x50
90027e82:	4b13      	ldr	r3, [pc, #76]	; (90027ed0 <__sinit+0x68>)
90027e84:	4a13      	ldr	r2, [pc, #76]	; (90027ed4 <__sinit+0x6c>)
90027e86:	681b      	ldr	r3, [r3, #0]
90027e88:	62a2      	str	r2, [r4, #40]	; 0x28
90027e8a:	42a3      	cmp	r3, r4
90027e8c:	bf04      	itt	eq
90027e8e:	2301      	moveq	r3, #1
90027e90:	61a3      	streq	r3, [r4, #24]
90027e92:	4620      	mov	r0, r4
90027e94:	f000 f820 	bl	90027ed8 <__sfp>
90027e98:	6060      	str	r0, [r4, #4]
90027e9a:	4620      	mov	r0, r4
90027e9c:	f000 f81c 	bl	90027ed8 <__sfp>
90027ea0:	60a0      	str	r0, [r4, #8]
90027ea2:	4620      	mov	r0, r4
90027ea4:	f000 f818 	bl	90027ed8 <__sfp>
90027ea8:	2200      	movs	r2, #0
90027eaa:	60e0      	str	r0, [r4, #12]
90027eac:	2104      	movs	r1, #4
90027eae:	6860      	ldr	r0, [r4, #4]
90027eb0:	f7ff ff82 	bl	90027db8 <std>
90027eb4:	68a0      	ldr	r0, [r4, #8]
90027eb6:	2201      	movs	r2, #1
90027eb8:	2109      	movs	r1, #9
90027eba:	f7ff ff7d 	bl	90027db8 <std>
90027ebe:	68e0      	ldr	r0, [r4, #12]
90027ec0:	2202      	movs	r2, #2
90027ec2:	2112      	movs	r1, #18
90027ec4:	f7ff ff78 	bl	90027db8 <std>
90027ec8:	2301      	movs	r3, #1
90027eca:	61a3      	str	r3, [r4, #24]
90027ecc:	e7d2      	b.n	90027e74 <__sinit+0xc>
90027ece:	bf00      	nop
90027ed0:	9002b8d4 	.word	0x9002b8d4
90027ed4:	90027e01 	.word	0x90027e01

90027ed8 <__sfp>:
90027ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
90027eda:	4607      	mov	r7, r0
90027edc:	f7ff ffac 	bl	90027e38 <__sfp_lock_acquire>
90027ee0:	4b1e      	ldr	r3, [pc, #120]	; (90027f5c <__sfp+0x84>)
90027ee2:	681e      	ldr	r6, [r3, #0]
90027ee4:	69b3      	ldr	r3, [r6, #24]
90027ee6:	b913      	cbnz	r3, 90027eee <__sfp+0x16>
90027ee8:	4630      	mov	r0, r6
90027eea:	f7ff ffbd 	bl	90027e68 <__sinit>
90027eee:	3648      	adds	r6, #72	; 0x48
90027ef0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
90027ef4:	3b01      	subs	r3, #1
90027ef6:	d503      	bpl.n	90027f00 <__sfp+0x28>
90027ef8:	6833      	ldr	r3, [r6, #0]
90027efa:	b30b      	cbz	r3, 90027f40 <__sfp+0x68>
90027efc:	6836      	ldr	r6, [r6, #0]
90027efe:	e7f7      	b.n	90027ef0 <__sfp+0x18>
90027f00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
90027f04:	b9d5      	cbnz	r5, 90027f3c <__sfp+0x64>
90027f06:	4b16      	ldr	r3, [pc, #88]	; (90027f60 <__sfp+0x88>)
90027f08:	60e3      	str	r3, [r4, #12]
90027f0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
90027f0e:	6665      	str	r5, [r4, #100]	; 0x64
90027f10:	f7ff f8fa 	bl	90027108 <__retarget_lock_init_recursive>
90027f14:	f7ff ff96 	bl	90027e44 <__sfp_lock_release>
90027f18:	e9c4 5501 	strd	r5, r5, [r4, #4]
90027f1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
90027f20:	6025      	str	r5, [r4, #0]
90027f22:	61a5      	str	r5, [r4, #24]
90027f24:	2208      	movs	r2, #8
90027f26:	4629      	mov	r1, r5
90027f28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
90027f2c:	f7ff f90e 	bl	9002714c <memset>
90027f30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
90027f34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
90027f38:	4620      	mov	r0, r4
90027f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
90027f3c:	3468      	adds	r4, #104	; 0x68
90027f3e:	e7d9      	b.n	90027ef4 <__sfp+0x1c>
90027f40:	2104      	movs	r1, #4
90027f42:	4638      	mov	r0, r7
90027f44:	f7ff ff62 	bl	90027e0c <__sfmoreglue>
90027f48:	4604      	mov	r4, r0
90027f4a:	6030      	str	r0, [r6, #0]
90027f4c:	2800      	cmp	r0, #0
90027f4e:	d1d5      	bne.n	90027efc <__sfp+0x24>
90027f50:	f7ff ff78 	bl	90027e44 <__sfp_lock_release>
90027f54:	230c      	movs	r3, #12
90027f56:	603b      	str	r3, [r7, #0]
90027f58:	e7ee      	b.n	90027f38 <__sfp+0x60>
90027f5a:	bf00      	nop
90027f5c:	9002b8d4 	.word	0x9002b8d4
90027f60:	ffff0001 	.word	0xffff0001

90027f64 <_fwalk_reent>:
90027f64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
90027f68:	4606      	mov	r6, r0
90027f6a:	4688      	mov	r8, r1
90027f6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
90027f70:	2700      	movs	r7, #0
90027f72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
90027f76:	f1b9 0901 	subs.w	r9, r9, #1
90027f7a:	d505      	bpl.n	90027f88 <_fwalk_reent+0x24>
90027f7c:	6824      	ldr	r4, [r4, #0]
90027f7e:	2c00      	cmp	r4, #0
90027f80:	d1f7      	bne.n	90027f72 <_fwalk_reent+0xe>
90027f82:	4638      	mov	r0, r7
90027f84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
90027f88:	89ab      	ldrh	r3, [r5, #12]
90027f8a:	2b01      	cmp	r3, #1
90027f8c:	d907      	bls.n	90027f9e <_fwalk_reent+0x3a>
90027f8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
90027f92:	3301      	adds	r3, #1
90027f94:	d003      	beq.n	90027f9e <_fwalk_reent+0x3a>
90027f96:	4629      	mov	r1, r5
90027f98:	4630      	mov	r0, r6
90027f9a:	47c0      	blx	r8
90027f9c:	4307      	orrs	r7, r0
90027f9e:	3568      	adds	r5, #104	; 0x68
90027fa0:	e7e9      	b.n	90027f76 <_fwalk_reent+0x12>

90027fa2 <__swhatbuf_r>:
90027fa2:	b570      	push	{r4, r5, r6, lr}
90027fa4:	460e      	mov	r6, r1
90027fa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90027faa:	2900      	cmp	r1, #0
90027fac:	b096      	sub	sp, #88	; 0x58
90027fae:	4614      	mov	r4, r2
90027fb0:	461d      	mov	r5, r3
90027fb2:	da08      	bge.n	90027fc6 <__swhatbuf_r+0x24>
90027fb4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
90027fb8:	2200      	movs	r2, #0
90027fba:	602a      	str	r2, [r5, #0]
90027fbc:	061a      	lsls	r2, r3, #24
90027fbe:	d410      	bmi.n	90027fe2 <__swhatbuf_r+0x40>
90027fc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
90027fc4:	e00e      	b.n	90027fe4 <__swhatbuf_r+0x42>
90027fc6:	466a      	mov	r2, sp
90027fc8:	f000 f8c2 	bl	90028150 <_fstat_r>
90027fcc:	2800      	cmp	r0, #0
90027fce:	dbf1      	blt.n	90027fb4 <__swhatbuf_r+0x12>
90027fd0:	9a01      	ldr	r2, [sp, #4]
90027fd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
90027fd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
90027fda:	425a      	negs	r2, r3
90027fdc:	415a      	adcs	r2, r3
90027fde:	602a      	str	r2, [r5, #0]
90027fe0:	e7ee      	b.n	90027fc0 <__swhatbuf_r+0x1e>
90027fe2:	2340      	movs	r3, #64	; 0x40
90027fe4:	2000      	movs	r0, #0
90027fe6:	6023      	str	r3, [r4, #0]
90027fe8:	b016      	add	sp, #88	; 0x58
90027fea:	bd70      	pop	{r4, r5, r6, pc}

90027fec <__smakebuf_r>:
90027fec:	898b      	ldrh	r3, [r1, #12]
90027fee:	b573      	push	{r0, r1, r4, r5, r6, lr}
90027ff0:	079d      	lsls	r5, r3, #30
90027ff2:	4606      	mov	r6, r0
90027ff4:	460c      	mov	r4, r1
90027ff6:	d507      	bpl.n	90028008 <__smakebuf_r+0x1c>
90027ff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
90027ffc:	6023      	str	r3, [r4, #0]
90027ffe:	6123      	str	r3, [r4, #16]
90028000:	2301      	movs	r3, #1
90028002:	6163      	str	r3, [r4, #20]
90028004:	b002      	add	sp, #8
90028006:	bd70      	pop	{r4, r5, r6, pc}
90028008:	ab01      	add	r3, sp, #4
9002800a:	466a      	mov	r2, sp
9002800c:	f7ff ffc9 	bl	90027fa2 <__swhatbuf_r>
90028010:	9900      	ldr	r1, [sp, #0]
90028012:	4605      	mov	r5, r0
90028014:	4630      	mov	r0, r6
90028016:	f7ff f90d 	bl	90027234 <_malloc_r>
9002801a:	b948      	cbnz	r0, 90028030 <__smakebuf_r+0x44>
9002801c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
90028020:	059a      	lsls	r2, r3, #22
90028022:	d4ef      	bmi.n	90028004 <__smakebuf_r+0x18>
90028024:	f023 0303 	bic.w	r3, r3, #3
90028028:	f043 0302 	orr.w	r3, r3, #2
9002802c:	81a3      	strh	r3, [r4, #12]
9002802e:	e7e3      	b.n	90027ff8 <__smakebuf_r+0xc>
90028030:	4b0d      	ldr	r3, [pc, #52]	; (90028068 <__smakebuf_r+0x7c>)
90028032:	62b3      	str	r3, [r6, #40]	; 0x28
90028034:	89a3      	ldrh	r3, [r4, #12]
90028036:	6020      	str	r0, [r4, #0]
90028038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
9002803c:	81a3      	strh	r3, [r4, #12]
9002803e:	9b00      	ldr	r3, [sp, #0]
90028040:	6163      	str	r3, [r4, #20]
90028042:	9b01      	ldr	r3, [sp, #4]
90028044:	6120      	str	r0, [r4, #16]
90028046:	b15b      	cbz	r3, 90028060 <__smakebuf_r+0x74>
90028048:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
9002804c:	4630      	mov	r0, r6
9002804e:	f000 f891 	bl	90028174 <_isatty_r>
90028052:	b128      	cbz	r0, 90028060 <__smakebuf_r+0x74>
90028054:	89a3      	ldrh	r3, [r4, #12]
90028056:	f023 0303 	bic.w	r3, r3, #3
9002805a:	f043 0301 	orr.w	r3, r3, #1
9002805e:	81a3      	strh	r3, [r4, #12]
90028060:	89a0      	ldrh	r0, [r4, #12]
90028062:	4305      	orrs	r5, r0
90028064:	81a5      	strh	r5, [r4, #12]
90028066:	e7cd      	b.n	90028004 <__smakebuf_r+0x18>
90028068:	90027e01 	.word	0x90027e01

9002806c <__malloc_lock>:
9002806c:	4801      	ldr	r0, [pc, #4]	; (90028074 <__malloc_lock+0x8>)
9002806e:	f7ff b84c 	b.w	9002710a <__retarget_lock_acquire_recursive>
90028072:	bf00      	nop
90028074:	2402708d 	.word	0x2402708d

90028078 <__malloc_unlock>:
90028078:	4801      	ldr	r0, [pc, #4]	; (90028080 <__malloc_unlock+0x8>)
9002807a:	f7ff b848 	b.w	9002710e <__retarget_lock_release_recursive>
9002807e:	bf00      	nop
90028080:	2402708d 	.word	0x2402708d

90028084 <__sread>:
90028084:	b510      	push	{r4, lr}
90028086:	460c      	mov	r4, r1
90028088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
9002808c:	f000 f894 	bl	900281b8 <_read_r>
90028090:	2800      	cmp	r0, #0
90028092:	bfab      	itete	ge
90028094:	6d63      	ldrge	r3, [r4, #84]	; 0x54
90028096:	89a3      	ldrhlt	r3, [r4, #12]
90028098:	181b      	addge	r3, r3, r0
9002809a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
9002809e:	bfac      	ite	ge
900280a0:	6563      	strge	r3, [r4, #84]	; 0x54
900280a2:	81a3      	strhlt	r3, [r4, #12]
900280a4:	bd10      	pop	{r4, pc}

900280a6 <__swrite>:
900280a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
900280aa:	461f      	mov	r7, r3
900280ac:	898b      	ldrh	r3, [r1, #12]
900280ae:	05db      	lsls	r3, r3, #23
900280b0:	4605      	mov	r5, r0
900280b2:	460c      	mov	r4, r1
900280b4:	4616      	mov	r6, r2
900280b6:	d505      	bpl.n	900280c4 <__swrite+0x1e>
900280b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900280bc:	2302      	movs	r3, #2
900280be:	2200      	movs	r2, #0
900280c0:	f000 f868 	bl	90028194 <_lseek_r>
900280c4:	89a3      	ldrh	r3, [r4, #12]
900280c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
900280ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
900280ce:	81a3      	strh	r3, [r4, #12]
900280d0:	4632      	mov	r2, r6
900280d2:	463b      	mov	r3, r7
900280d4:	4628      	mov	r0, r5
900280d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
900280da:	f000 b817 	b.w	9002810c <_write_r>

900280de <__sseek>:
900280de:	b510      	push	{r4, lr}
900280e0:	460c      	mov	r4, r1
900280e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
900280e6:	f000 f855 	bl	90028194 <_lseek_r>
900280ea:	1c43      	adds	r3, r0, #1
900280ec:	89a3      	ldrh	r3, [r4, #12]
900280ee:	bf15      	itete	ne
900280f0:	6560      	strne	r0, [r4, #84]	; 0x54
900280f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
900280f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
900280fa:	81a3      	strheq	r3, [r4, #12]
900280fc:	bf18      	it	ne
900280fe:	81a3      	strhne	r3, [r4, #12]
90028100:	bd10      	pop	{r4, pc}

90028102 <__sclose>:
90028102:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
90028106:	f000 b813 	b.w	90028130 <_close_r>
	...

9002810c <_write_r>:
9002810c:	b538      	push	{r3, r4, r5, lr}
9002810e:	4d07      	ldr	r5, [pc, #28]	; (9002812c <_write_r+0x20>)
90028110:	4604      	mov	r4, r0
90028112:	4608      	mov	r0, r1
90028114:	4611      	mov	r1, r2
90028116:	2200      	movs	r2, #0
90028118:	602a      	str	r2, [r5, #0]
9002811a:	461a      	mov	r2, r3
9002811c:	f7dc fece 	bl	90004ebc <_write>
90028120:	1c43      	adds	r3, r0, #1
90028122:	d102      	bne.n	9002812a <_write_r+0x1e>
90028124:	682b      	ldr	r3, [r5, #0]
90028126:	b103      	cbz	r3, 9002812a <_write_r+0x1e>
90028128:	6023      	str	r3, [r4, #0]
9002812a:	bd38      	pop	{r3, r4, r5, pc}
9002812c:	24027230 	.word	0x24027230

90028130 <_close_r>:
90028130:	b538      	push	{r3, r4, r5, lr}
90028132:	4d06      	ldr	r5, [pc, #24]	; (9002814c <_close_r+0x1c>)
90028134:	2300      	movs	r3, #0
90028136:	4604      	mov	r4, r0
90028138:	4608      	mov	r0, r1
9002813a:	602b      	str	r3, [r5, #0]
9002813c:	f7dc fecc 	bl	90004ed8 <_close>
90028140:	1c43      	adds	r3, r0, #1
90028142:	d102      	bne.n	9002814a <_close_r+0x1a>
90028144:	682b      	ldr	r3, [r5, #0]
90028146:	b103      	cbz	r3, 9002814a <_close_r+0x1a>
90028148:	6023      	str	r3, [r4, #0]
9002814a:	bd38      	pop	{r3, r4, r5, pc}
9002814c:	24027230 	.word	0x24027230

90028150 <_fstat_r>:
90028150:	b538      	push	{r3, r4, r5, lr}
90028152:	4d07      	ldr	r5, [pc, #28]	; (90028170 <_fstat_r+0x20>)
90028154:	2300      	movs	r3, #0
90028156:	4604      	mov	r4, r0
90028158:	4608      	mov	r0, r1
9002815a:	4611      	mov	r1, r2
9002815c:	602b      	str	r3, [r5, #0]
9002815e:	f7dc febf 	bl	90004ee0 <_fstat>
90028162:	1c43      	adds	r3, r0, #1
90028164:	d102      	bne.n	9002816c <_fstat_r+0x1c>
90028166:	682b      	ldr	r3, [r5, #0]
90028168:	b103      	cbz	r3, 9002816c <_fstat_r+0x1c>
9002816a:	6023      	str	r3, [r4, #0]
9002816c:	bd38      	pop	{r3, r4, r5, pc}
9002816e:	bf00      	nop
90028170:	24027230 	.word	0x24027230

90028174 <_isatty_r>:
90028174:	b538      	push	{r3, r4, r5, lr}
90028176:	4d06      	ldr	r5, [pc, #24]	; (90028190 <_isatty_r+0x1c>)
90028178:	2300      	movs	r3, #0
9002817a:	4604      	mov	r4, r0
9002817c:	4608      	mov	r0, r1
9002817e:	602b      	str	r3, [r5, #0]
90028180:	f7dc feb4 	bl	90004eec <_isatty>
90028184:	1c43      	adds	r3, r0, #1
90028186:	d102      	bne.n	9002818e <_isatty_r+0x1a>
90028188:	682b      	ldr	r3, [r5, #0]
9002818a:	b103      	cbz	r3, 9002818e <_isatty_r+0x1a>
9002818c:	6023      	str	r3, [r4, #0]
9002818e:	bd38      	pop	{r3, r4, r5, pc}
90028190:	24027230 	.word	0x24027230

90028194 <_lseek_r>:
90028194:	b538      	push	{r3, r4, r5, lr}
90028196:	4d07      	ldr	r5, [pc, #28]	; (900281b4 <_lseek_r+0x20>)
90028198:	4604      	mov	r4, r0
9002819a:	4608      	mov	r0, r1
9002819c:	4611      	mov	r1, r2
9002819e:	2200      	movs	r2, #0
900281a0:	602a      	str	r2, [r5, #0]
900281a2:	461a      	mov	r2, r3
900281a4:	f7dc fea4 	bl	90004ef0 <_lseek>
900281a8:	1c43      	adds	r3, r0, #1
900281aa:	d102      	bne.n	900281b2 <_lseek_r+0x1e>
900281ac:	682b      	ldr	r3, [r5, #0]
900281ae:	b103      	cbz	r3, 900281b2 <_lseek_r+0x1e>
900281b0:	6023      	str	r3, [r4, #0]
900281b2:	bd38      	pop	{r3, r4, r5, pc}
900281b4:	24027230 	.word	0x24027230

900281b8 <_read_r>:
900281b8:	b538      	push	{r3, r4, r5, lr}
900281ba:	4d07      	ldr	r5, [pc, #28]	; (900281d8 <_read_r+0x20>)
900281bc:	4604      	mov	r4, r0
900281be:	4608      	mov	r0, r1
900281c0:	4611      	mov	r1, r2
900281c2:	2200      	movs	r2, #0
900281c4:	602a      	str	r2, [r5, #0]
900281c6:	461a      	mov	r2, r3
900281c8:	f7dc fe6a 	bl	90004ea0 <_read>
900281cc:	1c43      	adds	r3, r0, #1
900281ce:	d102      	bne.n	900281d6 <_read_r+0x1e>
900281d0:	682b      	ldr	r3, [r5, #0]
900281d2:	b103      	cbz	r3, 900281d6 <_read_r+0x1e>
900281d4:	6023      	str	r3, [r4, #0]
900281d6:	bd38      	pop	{r3, r4, r5, pc}
900281d8:	24027230 	.word	0x24027230

900281dc <_init>:
900281dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900281de:	bf00      	nop
900281e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
900281e2:	bc08      	pop	{r3}
900281e4:	469e      	mov	lr, r3
900281e6:	4770      	bx	lr

900281e8 <_fini>:
900281e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
900281ea:	bf00      	nop
900281ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
900281ee:	bc08      	pop	{r3}
900281f0:	469e      	mov	lr, r3
900281f2:	4770      	bx	lr
